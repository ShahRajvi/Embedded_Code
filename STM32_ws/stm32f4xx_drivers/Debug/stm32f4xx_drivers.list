
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000055c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000720  08000728  00010728  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000720  08000720  00010728  2**0
                  CONTENTS
  4 .ARM          00000000  08000720  08000720  00010728  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000720  08000728  00010728  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000720  08000720  00010720  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000724  08000724  00010724  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010728  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000728  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000728  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010728  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00010758  2**0
                  CONTENTS, READONLY
 13 .debug_info   000008b4  00000000  00000000  0001079b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000293  00000000  00000000  0001104f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000b8  00000000  00000000  000112e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000007e  00000000  00000000  000113a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001c08  00000000  00000000  0001141e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000e14  00000000  00000000  00013026  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000071f5  00000000  00000000  00013e3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000224  00000000  00000000  0001b030  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  0001b254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000708 	.word	0x08000708

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	08000708 	.word	0x08000708

08000204 <delay>:
 */


#include "stm32f446xx.h"

void delay(void){ 		// Implementing software delay
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
	//
	for(uint32_t i = 0; i<500000/2; i++);
 800020a:	2300      	movs	r3, #0
 800020c:	607b      	str	r3, [r7, #4]
 800020e:	e002      	b.n	8000216 <delay+0x12>
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	3301      	adds	r3, #1
 8000214:	607b      	str	r3, [r7, #4]
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	4a04      	ldr	r2, [pc, #16]	; (800022c <delay+0x28>)
 800021a:	4293      	cmp	r3, r2
 800021c:	d9f8      	bls.n	8000210 <delay+0xc>
}
 800021e:	bf00      	nop
 8000220:	bf00      	nop
 8000222:	370c      	adds	r7, #12
 8000224:	46bd      	mov	sp, r7
 8000226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800022a:	4770      	bx	lr
 800022c:	0003d08f 	.word	0x0003d08f

08000230 <main>:


int main(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b086      	sub	sp, #24
 8000234:	af00      	add	r7, sp, #0

	GPIO_Handle_t GPIOLed, GPIOBtn; 			//Creating a variable of type GPIO_Handle_t to configure the GPIO pin to toggle led 2 in push-pull mode.

	GPIOLed.pGPIOx = GPIOA;			// Using GPIO port A PA5 or D13 to toggle LED2
 8000236:	4b1a      	ldr	r3, [pc, #104]	; (80002a0 <main+0x70>)
 8000238:	60fb      	str	r3, [r7, #12]
	GPIOLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_5;		// Pin Number set to Pin 5
 800023a:	2305      	movs	r3, #5
 800023c:	743b      	strb	r3, [r7, #16]
	GPIOLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;		// Pin Mode set to output mode
 800023e:	2301      	movs	r3, #1
 8000240:	747b      	strb	r3, [r7, #17]
	GPIOLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;		// Pin Speed set to FAST
 8000242:	2302      	movs	r3, #2
 8000244:	74bb      	strb	r3, [r7, #18]
	GPIOLed.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;	// Output type set to pull up pull down config.
 8000246:	2300      	movs	r3, #0
 8000248:	753b      	strb	r3, [r7, #20]
	GPIOLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;	// No additional Push pull resistor activation required
 800024a:	2300      	movs	r3, #0
 800024c:	74fb      	strb	r3, [r7, #19]
	//GPIOLed.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD; 	// Open Drain configuration. Do not use OD unless its a special application.
	//GPIOLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;

	// Enabling Peripheral clock to use with the GPIO port

	GPIO_PeriClockControl(GPIOA, ENABLE);		// Enable clock for GPIO port A
 800024e:	2101      	movs	r1, #1
 8000250:	4813      	ldr	r0, [pc, #76]	; (80002a0 <main+0x70>)
 8000252:	f000 f921 	bl	8000498 <GPIO_PeriClockControl>

	GPIO_Init(&GPIOLed);
 8000256:	f107 030c 	add.w	r3, r7, #12
 800025a:	4618      	mov	r0, r3
 800025c:	f000 f84d 	bl	80002fa <GPIO_Init>

	// GPIO Button Config

	GPIOBtn.pGPIOx = GPIOC;
 8000260:	4b10      	ldr	r3, [pc, #64]	; (80002a4 <main+0x74>)
 8000262:	603b      	str	r3, [r7, #0]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13; 	//Button uses PC13
 8000264:	230d      	movs	r3, #13
 8000266:	713b      	strb	r3, [r7, #4]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN; 		// Input mode to read the state of the button.
 8000268:	2300      	movs	r3, #0
 800026a:	717b      	strb	r3, [r7, #5]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800026c:	2302      	movs	r3, #2
 800026e:	71bb      	strb	r3, [r7, #6]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000270:	2300      	movs	r3, #0
 8000272:	71fb      	strb	r3, [r7, #7]

	// Enabling Peripheral clock to use with the GPIO port

	GPIO_Init(&GPIOBtn);
 8000274:	463b      	mov	r3, r7
 8000276:	4618      	mov	r0, r3
 8000278:	f000 f83f 	bl	80002fa <GPIO_Init>
	GPIO_PeriClockControl(GPIOC, ENABLE);
 800027c:	2101      	movs	r1, #1
 800027e:	4809      	ldr	r0, [pc, #36]	; (80002a4 <main+0x74>)
 8000280:	f000 f90a 	bl	8000498 <GPIO_PeriClockControl>



	while(1){
		if(GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_NO_13) == DISABLE){		// For Nucleo board, button press = Low
 8000284:	210d      	movs	r1, #13
 8000286:	4807      	ldr	r0, [pc, #28]	; (80002a4 <main+0x74>)
 8000288:	f000 f9ee 	bl	8000668 <GPIO_ReadFromInputPin>
 800028c:	4603      	mov	r3, r0
 800028e:	2b00      	cmp	r3, #0
 8000290:	d1f8      	bne.n	8000284 <main+0x54>
			delay();		// to remove debouncing effect
 8000292:	f7ff ffb7 	bl	8000204 <delay>
			GPIO_ToggleOutputPin(GPIOA,  GPIO_PIN_NO_5);
 8000296:	2105      	movs	r1, #5
 8000298:	4801      	ldr	r0, [pc, #4]	; (80002a0 <main+0x70>)
 800029a:	f000 f9fb 	bl	8000694 <GPIO_ToggleOutputPin>
		if(GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_NO_13) == DISABLE){		// For Nucleo board, button press = Low
 800029e:	e7f1      	b.n	8000284 <main+0x54>
 80002a0:	40020000 	.word	0x40020000
 80002a4:	40020800 	.word	0x40020800

080002a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002a8:	480d      	ldr	r0, [pc, #52]	; (80002e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002aa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002ac:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002b0:	480c      	ldr	r0, [pc, #48]	; (80002e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80002b2:	490d      	ldr	r1, [pc, #52]	; (80002e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002b4:	4a0d      	ldr	r2, [pc, #52]	; (80002ec <LoopForever+0xe>)
  movs r3, #0
 80002b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002b8:	e002      	b.n	80002c0 <LoopCopyDataInit>

080002ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002be:	3304      	adds	r3, #4

080002c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002c4:	d3f9      	bcc.n	80002ba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002c6:	4a0a      	ldr	r2, [pc, #40]	; (80002f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002c8:	4c0a      	ldr	r4, [pc, #40]	; (80002f4 <LoopForever+0x16>)
  movs r3, #0
 80002ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002cc:	e001      	b.n	80002d2 <LoopFillZerobss>

080002ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002d0:	3204      	adds	r2, #4

080002d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002d4:	d3fb      	bcc.n	80002ce <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002d6:	f000 f9f3 	bl	80006c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002da:	f7ff ffa9 	bl	8000230 <main>

080002de <LoopForever>:

LoopForever:
  b LoopForever
 80002de:	e7fe      	b.n	80002de <LoopForever>
  ldr   r0, =_estack
 80002e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80002e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002e8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002ec:	08000728 	.word	0x08000728
  ldr r2, =_sbss
 80002f0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002f4:	2000001c 	.word	0x2000001c

080002f8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002f8:	e7fe      	b.n	80002f8 <ADC_IRQHandler>

080002fa <GPIO_Init>:
 *
 *  @Note		See section 8.4.1 GPIO port mode register
 *
 ******************************************************************************/

void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 80002fa:	b480      	push	{r7}
 80002fc:	b087      	sub	sp, #28
 80002fe:	af00      	add	r7, sp, #0
 8000300:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;
 8000302:	2300      	movs	r3, #0
 8000304:	617b      	str	r3, [r7, #20]

	// 1. configure the mode of the gpio pin
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG){
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	795b      	ldrb	r3, [r3, #5]
 800030a:	2b03      	cmp	r3, #3
 800030c:	d81e      	bhi.n	800034c <GPIO_Init+0x52>
		//non-interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));			// each pin takes 2 bit fields. The value is left shifted by 2 to set to the corresponding pin Number bits
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	795b      	ldrb	r3, [r3, #5]
 8000312:	461a      	mov	r2, r3
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	791b      	ldrb	r3, [r3, #4]
 8000318:	005b      	lsls	r3, r3, #1
 800031a:	fa02 f303 	lsl.w	r3, r2, r3
 800031e:	617b      	str	r3, [r7, #20]

		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);								// Clearing the bits before setting a value. Else OR operator would give garbage results.
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	681a      	ldr	r2, [r3, #0]
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	791b      	ldrb	r3, [r3, #4]
 800032a:	4619      	mov	r1, r3
 800032c:	2303      	movs	r3, #3
 800032e:	408b      	lsls	r3, r1
 8000330:	43db      	mvns	r3, r3
 8000332:	4619      	mov	r1, r3
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	400a      	ands	r2, r1
 800033a:	601a      	str	r2, [r3, #0]

		pGPIOHandle->pGPIOx->MODER |= temp;																				//setting the GPIOx_MODER register value Bit wise OR to make sure we are only changing the register bits affected
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	6819      	ldr	r1, [r3, #0]
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	697a      	ldr	r2, [r7, #20]
 8000348:	430a      	orrs	r2, r1
 800034a:	601a      	str	r2, [r3, #0]

	}
	else{
		// this part is for interrupt mode
	}
	temp = 0;
 800034c:	2300      	movs	r3, #0
 800034e:	617b      	str	r3, [r7, #20]

	// 2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));			// each pin takes 2 bit fields. The value is left shifted by 2 to set to the corresponding pin Number bits
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	799b      	ldrb	r3, [r3, #6]
 8000354:	461a      	mov	r2, r3
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	791b      	ldrb	r3, [r3, #4]
 800035a:	005b      	lsls	r3, r3, #1
 800035c:	fa02 f303 	lsl.w	r3, r2, r3
 8000360:	617b      	str	r3, [r7, #20]

	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);								// Clearing the bits before setting a value. Else OR operator would give garbage results.
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	689a      	ldr	r2, [r3, #8]
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	791b      	ldrb	r3, [r3, #4]
 800036c:	4619      	mov	r1, r3
 800036e:	2303      	movs	r3, #3
 8000370:	408b      	lsls	r3, r1
 8000372:	43db      	mvns	r3, r3
 8000374:	4619      	mov	r1, r3
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	400a      	ands	r2, r1
 800037c:	609a      	str	r2, [r3, #8]

	pGPIOHandle->pGPIOx->OSPEEDR |= temp;																			//setting the GPIOx_OSPEEDR register value
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	6899      	ldr	r1, [r3, #8]
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	697a      	ldr	r2, [r7, #20]
 800038a:	430a      	orrs	r2, r1
 800038c:	609a      	str	r2, [r3, #8]

	temp = 0;
 800038e:	2300      	movs	r3, #0
 8000390:	617b      	str	r3, [r7, #20]
	// 3. configure the pull up pull down settings (pupd)
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));			// each pin takes 2 bit fields. The value is left shifted by 2 to set to the corresponding pin Number bits
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	79db      	ldrb	r3, [r3, #7]
 8000396:	461a      	mov	r2, r3
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	791b      	ldrb	r3, [r3, #4]
 800039c:	005b      	lsls	r3, r3, #1
 800039e:	fa02 f303 	lsl.w	r3, r2, r3
 80003a2:	617b      	str	r3, [r7, #20]

	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);								// Clearing the bits before setting a value. Else OR operator would give garbage results.
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	68da      	ldr	r2, [r3, #12]
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	791b      	ldrb	r3, [r3, #4]
 80003ae:	4619      	mov	r1, r3
 80003b0:	2303      	movs	r3, #3
 80003b2:	408b      	lsls	r3, r1
 80003b4:	43db      	mvns	r3, r3
 80003b6:	4619      	mov	r1, r3
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	400a      	ands	r2, r1
 80003be:	60da      	str	r2, [r3, #12]

	pGPIOHandle->pGPIOx->PUPDR |= temp;																						//setting the GPIOx_PUPDR register value
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	68d9      	ldr	r1, [r3, #12]
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	697a      	ldr	r2, [r7, #20]
 80003cc:	430a      	orrs	r2, r1
 80003ce:	60da      	str	r2, [r3, #12]

	temp = 0;
 80003d0:	2300      	movs	r3, #0
 80003d2:	617b      	str	r3, [r7, #20]

	// 4. configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << ( pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));					// each pin takes 1 bit fields. The value is left shifted by 1 to set to the corresponding pin Number bits
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	7a1b      	ldrb	r3, [r3, #8]
 80003d8:	461a      	mov	r2, r3
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	791b      	ldrb	r3, [r3, #4]
 80003de:	fa02 f303 	lsl.w	r3, r2, r3
 80003e2:	617b      	str	r3, [r7, #20]

	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);								// Clearing the bits before setting a value. Else OR operator would give garbage results.
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	685a      	ldr	r2, [r3, #4]
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	791b      	ldrb	r3, [r3, #4]
 80003ee:	4619      	mov	r1, r3
 80003f0:	2301      	movs	r3, #1
 80003f2:	408b      	lsls	r3, r1
 80003f4:	43db      	mvns	r3, r3
 80003f6:	4619      	mov	r1, r3
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	400a      	ands	r2, r1
 80003fe:	605a      	str	r2, [r3, #4]

	pGPIOHandle->pGPIOx->OTYPER |= temp;																						//setting the GPIOx_OTYPER register value
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	6859      	ldr	r1, [r3, #4]
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	697a      	ldr	r2, [r7, #20]
 800040c:	430a      	orrs	r2, r1
 800040e:	605a      	str	r2, [r3, #4]

	temp = 0;
 8000410:	2300      	movs	r3, #0
 8000412:	617b      	str	r3, [r7, #20]

	// 5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ALTFN){		//if mode is in alternate function then use this part of codde.
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	795b      	ldrb	r3, [r3, #5]
 8000418:	2b02      	cmp	r3, #2
 800041a:	d836      	bhi.n	800048a <GPIO_Init+0x190>
		//configure the alternate function registers
		uint32_t temp1 = 0, temp2 = 0;
 800041c:	2300      	movs	r3, #0
 800041e:	613b      	str	r3, [r7, #16]
 8000420:	2300      	movs	r3, #0
 8000422:	60fb      	str	r3, [r7, #12]
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	791b      	ldrb	r3, [r3, #4]
 8000428:	08db      	lsrs	r3, r3, #3
 800042a:	b2db      	uxtb	r3, r3
 800042c:	613b      	str	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	791b      	ldrb	r3, [r3, #4]
 8000432:	f003 0307 	and.w	r3, r3, #7
 8000436:	60fb      	str	r3, [r7, #12]

		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF <<  (4 * temp2));								// Clearing the bits before setting a value. Else OR operator would give garbage results.
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	693a      	ldr	r2, [r7, #16]
 800043e:	3208      	adds	r2, #8
 8000440:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000444:	68fb      	ldr	r3, [r7, #12]
 8000446:	009b      	lsls	r3, r3, #2
 8000448:	210f      	movs	r1, #15
 800044a:	fa01 f303 	lsl.w	r3, r1, r3
 800044e:	43db      	mvns	r3, r3
 8000450:	4619      	mov	r1, r3
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	4011      	ands	r1, r2
 8000458:	693a      	ldr	r2, [r7, #16]
 800045a:	3208      	adds	r2, #8
 800045c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2) );
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	693a      	ldr	r2, [r7, #16]
 8000466:	3208      	adds	r2, #8
 8000468:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	7a5b      	ldrb	r3, [r3, #9]
 8000470:	4619      	mov	r1, r3
 8000472:	68fb      	ldr	r3, [r7, #12]
 8000474:	009b      	lsls	r3, r3, #2
 8000476:	fa01 f303 	lsl.w	r3, r1, r3
 800047a:	4619      	mov	r1, r3
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	4311      	orrs	r1, r2
 8000482:	693a      	ldr	r2, [r7, #16]
 8000484:	3208      	adds	r2, #8
 8000486:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}




}
 800048a:	bf00      	nop
 800048c:	371c      	adds	r7, #28
 800048e:	46bd      	mov	sp, r7
 8000490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000494:	4770      	bx	lr
	...

08000498 <GPIO_PeriClockControl>:
 *
 *  @Note		None
 *
 ******************************************************************************/

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi){
 8000498:	b480      	push	{r7}
 800049a:	b083      	sub	sp, #12
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
 80004a0:	460b      	mov	r3, r1
 80004a2:	70fb      	strb	r3, [r7, #3]

	/*
	 * Add exception handling here
	 */

	if(EnorDi == ENABLE){
 80004a4:	78fb      	ldrb	r3, [r7, #3]
 80004a6:	2b01      	cmp	r3, #1
 80004a8:	d162      	bne.n	8000570 <GPIO_PeriClockControl+0xd8>

		if(pGPIOx == GPIOA){
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	4a64      	ldr	r2, [pc, #400]	; (8000640 <GPIO_PeriClockControl+0x1a8>)
 80004ae:	4293      	cmp	r3, r2
 80004b0:	d106      	bne.n	80004c0 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 80004b2:	4b64      	ldr	r3, [pc, #400]	; (8000644 <GPIO_PeriClockControl+0x1ac>)
 80004b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004b6:	4a63      	ldr	r2, [pc, #396]	; (8000644 <GPIO_PeriClockControl+0x1ac>)
 80004b8:	f043 0301 	orr.w	r3, r3, #1
 80004bc:	6313      	str	r3, [r2, #48]	; 0x30
			else if (pGPIOx == GPIOI){
				GPIOI_PCLK_DI();
			}

	}
}
 80004be:	e0b9      	b.n	8000634 <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOB){
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	4a61      	ldr	r2, [pc, #388]	; (8000648 <GPIO_PeriClockControl+0x1b0>)
 80004c4:	4293      	cmp	r3, r2
 80004c6:	d106      	bne.n	80004d6 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80004c8:	4b5e      	ldr	r3, [pc, #376]	; (8000644 <GPIO_PeriClockControl+0x1ac>)
 80004ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004cc:	4a5d      	ldr	r2, [pc, #372]	; (8000644 <GPIO_PeriClockControl+0x1ac>)
 80004ce:	f043 0302 	orr.w	r3, r3, #2
 80004d2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004d4:	e0ae      	b.n	8000634 <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOC){
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	4a5c      	ldr	r2, [pc, #368]	; (800064c <GPIO_PeriClockControl+0x1b4>)
 80004da:	4293      	cmp	r3, r2
 80004dc:	d106      	bne.n	80004ec <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 80004de:	4b59      	ldr	r3, [pc, #356]	; (8000644 <GPIO_PeriClockControl+0x1ac>)
 80004e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004e2:	4a58      	ldr	r2, [pc, #352]	; (8000644 <GPIO_PeriClockControl+0x1ac>)
 80004e4:	f043 0304 	orr.w	r3, r3, #4
 80004e8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004ea:	e0a3      	b.n	8000634 <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOD){
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	4a58      	ldr	r2, [pc, #352]	; (8000650 <GPIO_PeriClockControl+0x1b8>)
 80004f0:	4293      	cmp	r3, r2
 80004f2:	d106      	bne.n	8000502 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 80004f4:	4b53      	ldr	r3, [pc, #332]	; (8000644 <GPIO_PeriClockControl+0x1ac>)
 80004f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f8:	4a52      	ldr	r2, [pc, #328]	; (8000644 <GPIO_PeriClockControl+0x1ac>)
 80004fa:	f043 0308 	orr.w	r3, r3, #8
 80004fe:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000500:	e098      	b.n	8000634 <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOE){
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	4a53      	ldr	r2, [pc, #332]	; (8000654 <GPIO_PeriClockControl+0x1bc>)
 8000506:	4293      	cmp	r3, r2
 8000508:	d106      	bne.n	8000518 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800050a:	4b4e      	ldr	r3, [pc, #312]	; (8000644 <GPIO_PeriClockControl+0x1ac>)
 800050c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050e:	4a4d      	ldr	r2, [pc, #308]	; (8000644 <GPIO_PeriClockControl+0x1ac>)
 8000510:	f043 0310 	orr.w	r3, r3, #16
 8000514:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000516:	e08d      	b.n	8000634 <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOF){
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	4a4f      	ldr	r2, [pc, #316]	; (8000658 <GPIO_PeriClockControl+0x1c0>)
 800051c:	4293      	cmp	r3, r2
 800051e:	d106      	bne.n	800052e <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000520:	4b48      	ldr	r3, [pc, #288]	; (8000644 <GPIO_PeriClockControl+0x1ac>)
 8000522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000524:	4a47      	ldr	r2, [pc, #284]	; (8000644 <GPIO_PeriClockControl+0x1ac>)
 8000526:	f043 0320 	orr.w	r3, r3, #32
 800052a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800052c:	e082      	b.n	8000634 <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOG){
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	4a4a      	ldr	r2, [pc, #296]	; (800065c <GPIO_PeriClockControl+0x1c4>)
 8000532:	4293      	cmp	r3, r2
 8000534:	d106      	bne.n	8000544 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000536:	4b43      	ldr	r3, [pc, #268]	; (8000644 <GPIO_PeriClockControl+0x1ac>)
 8000538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053a:	4a42      	ldr	r2, [pc, #264]	; (8000644 <GPIO_PeriClockControl+0x1ac>)
 800053c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000540:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000542:	e077      	b.n	8000634 <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOH){
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	4a46      	ldr	r2, [pc, #280]	; (8000660 <GPIO_PeriClockControl+0x1c8>)
 8000548:	4293      	cmp	r3, r2
 800054a:	d106      	bne.n	800055a <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 800054c:	4b3d      	ldr	r3, [pc, #244]	; (8000644 <GPIO_PeriClockControl+0x1ac>)
 800054e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000550:	4a3c      	ldr	r2, [pc, #240]	; (8000644 <GPIO_PeriClockControl+0x1ac>)
 8000552:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000556:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000558:	e06c      	b.n	8000634 <GPIO_PeriClockControl+0x19c>
		else if (pGPIOx == GPIOI){
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	4a41      	ldr	r2, [pc, #260]	; (8000664 <GPIO_PeriClockControl+0x1cc>)
 800055e:	4293      	cmp	r3, r2
 8000560:	d168      	bne.n	8000634 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_EN();
 8000562:	4b38      	ldr	r3, [pc, #224]	; (8000644 <GPIO_PeriClockControl+0x1ac>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000566:	4a37      	ldr	r2, [pc, #220]	; (8000644 <GPIO_PeriClockControl+0x1ac>)
 8000568:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800056c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800056e:	e061      	b.n	8000634 <GPIO_PeriClockControl+0x19c>
		if(pGPIOx == GPIOA){
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	4a33      	ldr	r2, [pc, #204]	; (8000640 <GPIO_PeriClockControl+0x1a8>)
 8000574:	4293      	cmp	r3, r2
 8000576:	d106      	bne.n	8000586 <GPIO_PeriClockControl+0xee>
				GPIOA_PCLK_DI();
 8000578:	4b32      	ldr	r3, [pc, #200]	; (8000644 <GPIO_PeriClockControl+0x1ac>)
 800057a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057c:	4a31      	ldr	r2, [pc, #196]	; (8000644 <GPIO_PeriClockControl+0x1ac>)
 800057e:	f023 0301 	bic.w	r3, r3, #1
 8000582:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000584:	e056      	b.n	8000634 <GPIO_PeriClockControl+0x19c>
			else if (pGPIOx == GPIOB){
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	4a2f      	ldr	r2, [pc, #188]	; (8000648 <GPIO_PeriClockControl+0x1b0>)
 800058a:	4293      	cmp	r3, r2
 800058c:	d106      	bne.n	800059c <GPIO_PeriClockControl+0x104>
				GPIOB_PCLK_DI();
 800058e:	4b2d      	ldr	r3, [pc, #180]	; (8000644 <GPIO_PeriClockControl+0x1ac>)
 8000590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000592:	4a2c      	ldr	r2, [pc, #176]	; (8000644 <GPIO_PeriClockControl+0x1ac>)
 8000594:	f023 0302 	bic.w	r3, r3, #2
 8000598:	6313      	str	r3, [r2, #48]	; 0x30
}
 800059a:	e04b      	b.n	8000634 <GPIO_PeriClockControl+0x19c>
			else if (pGPIOx == GPIOC){
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	4a2b      	ldr	r2, [pc, #172]	; (800064c <GPIO_PeriClockControl+0x1b4>)
 80005a0:	4293      	cmp	r3, r2
 80005a2:	d106      	bne.n	80005b2 <GPIO_PeriClockControl+0x11a>
				GPIOC_PCLK_DI();
 80005a4:	4b27      	ldr	r3, [pc, #156]	; (8000644 <GPIO_PeriClockControl+0x1ac>)
 80005a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a8:	4a26      	ldr	r2, [pc, #152]	; (8000644 <GPIO_PeriClockControl+0x1ac>)
 80005aa:	f023 0304 	bic.w	r3, r3, #4
 80005ae:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005b0:	e040      	b.n	8000634 <GPIO_PeriClockControl+0x19c>
			else if (pGPIOx == GPIOD){
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	4a26      	ldr	r2, [pc, #152]	; (8000650 <GPIO_PeriClockControl+0x1b8>)
 80005b6:	4293      	cmp	r3, r2
 80005b8:	d106      	bne.n	80005c8 <GPIO_PeriClockControl+0x130>
				GPIOD_PCLK_DI();
 80005ba:	4b22      	ldr	r3, [pc, #136]	; (8000644 <GPIO_PeriClockControl+0x1ac>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	4a21      	ldr	r2, [pc, #132]	; (8000644 <GPIO_PeriClockControl+0x1ac>)
 80005c0:	f023 0308 	bic.w	r3, r3, #8
 80005c4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005c6:	e035      	b.n	8000634 <GPIO_PeriClockControl+0x19c>
			else if (pGPIOx == GPIOE){
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	4a22      	ldr	r2, [pc, #136]	; (8000654 <GPIO_PeriClockControl+0x1bc>)
 80005cc:	4293      	cmp	r3, r2
 80005ce:	d106      	bne.n	80005de <GPIO_PeriClockControl+0x146>
				GPIOE_PCLK_DI();
 80005d0:	4b1c      	ldr	r3, [pc, #112]	; (8000644 <GPIO_PeriClockControl+0x1ac>)
 80005d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d4:	4a1b      	ldr	r2, [pc, #108]	; (8000644 <GPIO_PeriClockControl+0x1ac>)
 80005d6:	f023 0310 	bic.w	r3, r3, #16
 80005da:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005dc:	e02a      	b.n	8000634 <GPIO_PeriClockControl+0x19c>
			else if (pGPIOx == GPIOF){
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	4a1d      	ldr	r2, [pc, #116]	; (8000658 <GPIO_PeriClockControl+0x1c0>)
 80005e2:	4293      	cmp	r3, r2
 80005e4:	d106      	bne.n	80005f4 <GPIO_PeriClockControl+0x15c>
				GPIOF_PCLK_DI();
 80005e6:	4b17      	ldr	r3, [pc, #92]	; (8000644 <GPIO_PeriClockControl+0x1ac>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	4a16      	ldr	r2, [pc, #88]	; (8000644 <GPIO_PeriClockControl+0x1ac>)
 80005ec:	f023 0320 	bic.w	r3, r3, #32
 80005f0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005f2:	e01f      	b.n	8000634 <GPIO_PeriClockControl+0x19c>
			else if (pGPIOx == GPIOG){
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	4a19      	ldr	r2, [pc, #100]	; (800065c <GPIO_PeriClockControl+0x1c4>)
 80005f8:	4293      	cmp	r3, r2
 80005fa:	d106      	bne.n	800060a <GPIO_PeriClockControl+0x172>
				GPIOG_PCLK_DI();
 80005fc:	4b11      	ldr	r3, [pc, #68]	; (8000644 <GPIO_PeriClockControl+0x1ac>)
 80005fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000600:	4a10      	ldr	r2, [pc, #64]	; (8000644 <GPIO_PeriClockControl+0x1ac>)
 8000602:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000606:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000608:	e014      	b.n	8000634 <GPIO_PeriClockControl+0x19c>
			else if (pGPIOx == GPIOH){
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	4a14      	ldr	r2, [pc, #80]	; (8000660 <GPIO_PeriClockControl+0x1c8>)
 800060e:	4293      	cmp	r3, r2
 8000610:	d106      	bne.n	8000620 <GPIO_PeriClockControl+0x188>
				GPIOH_PCLK_DI();
 8000612:	4b0c      	ldr	r3, [pc, #48]	; (8000644 <GPIO_PeriClockControl+0x1ac>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	4a0b      	ldr	r2, [pc, #44]	; (8000644 <GPIO_PeriClockControl+0x1ac>)
 8000618:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800061c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800061e:	e009      	b.n	8000634 <GPIO_PeriClockControl+0x19c>
			else if (pGPIOx == GPIOI){
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	4a10      	ldr	r2, [pc, #64]	; (8000664 <GPIO_PeriClockControl+0x1cc>)
 8000624:	4293      	cmp	r3, r2
 8000626:	d105      	bne.n	8000634 <GPIO_PeriClockControl+0x19c>
				GPIOI_PCLK_DI();
 8000628:	4b06      	ldr	r3, [pc, #24]	; (8000644 <GPIO_PeriClockControl+0x1ac>)
 800062a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062c:	4a05      	ldr	r2, [pc, #20]	; (8000644 <GPIO_PeriClockControl+0x1ac>)
 800062e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000632:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000634:	bf00      	nop
 8000636:	370c      	adds	r7, #12
 8000638:	46bd      	mov	sp, r7
 800063a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063e:	4770      	bx	lr
 8000640:	40020000 	.word	0x40020000
 8000644:	40023800 	.word	0x40023800
 8000648:	40020400 	.word	0x40020400
 800064c:	40020800 	.word	0x40020800
 8000650:	40020c00 	.word	0x40020c00
 8000654:	40021000 	.word	0x40021000
 8000658:	40021400 	.word	0x40021400
 800065c:	40021800 	.word	0x40021800
 8000660:	40021c00 	.word	0x40021c00
 8000664:	40022000 	.word	0x40022000

08000668 <GPIO_ReadFromInputPin>:
 *
 *  @Note		None
 *
 ******************************************************************************/

uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber){
 8000668:	b480      	push	{r7}
 800066a:	b085      	sub	sp, #20
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
 8000670:	460b      	mov	r3, r1
 8000672:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	value = ((pGPIOx->IDR >> PinNumber) & 0x00000001);  // Shift the data value to the least significant bit position and return the last bit.
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	691a      	ldr	r2, [r3, #16]
 8000678:	78fb      	ldrb	r3, [r7, #3]
 800067a:	fa22 f303 	lsr.w	r3, r2, r3
 800067e:	b2db      	uxtb	r3, r3
 8000680:	f003 0301 	and.w	r3, r3, #1
 8000684:	73fb      	strb	r3, [r7, #15]
	return value;
 8000686:	7bfb      	ldrb	r3, [r7, #15]
}
 8000688:	4618      	mov	r0, r3
 800068a:	3714      	adds	r7, #20
 800068c:	46bd      	mov	sp, r7
 800068e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000692:	4770      	bx	lr

08000694 <GPIO_ToggleOutputPin>:
 *
 *  @Note		None
 *
 ******************************************************************************/

void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber){
 8000694:	b480      	push	{r7}
 8000696:	b083      	sub	sp, #12
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
 800069c:	460b      	mov	r3, r1
 800069e:	70fb      	strb	r3, [r7, #3]
	pGPIOx->ODR = (pGPIOx->ODR ^ (1 << PinNumber));		//XOR operation to toggle the required bit field.
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	695b      	ldr	r3, [r3, #20]
 80006a4:	78fa      	ldrb	r2, [r7, #3]
 80006a6:	2101      	movs	r1, #1
 80006a8:	fa01 f202 	lsl.w	r2, r1, r2
 80006ac:	405a      	eors	r2, r3
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	615a      	str	r2, [r3, #20]
}
 80006b2:	bf00      	nop
 80006b4:	370c      	adds	r7, #12
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr
	...

080006c0 <__libc_init_array>:
 80006c0:	b570      	push	{r4, r5, r6, lr}
 80006c2:	4d0d      	ldr	r5, [pc, #52]	; (80006f8 <__libc_init_array+0x38>)
 80006c4:	4c0d      	ldr	r4, [pc, #52]	; (80006fc <__libc_init_array+0x3c>)
 80006c6:	1b64      	subs	r4, r4, r5
 80006c8:	10a4      	asrs	r4, r4, #2
 80006ca:	2600      	movs	r6, #0
 80006cc:	42a6      	cmp	r6, r4
 80006ce:	d109      	bne.n	80006e4 <__libc_init_array+0x24>
 80006d0:	4d0b      	ldr	r5, [pc, #44]	; (8000700 <__libc_init_array+0x40>)
 80006d2:	4c0c      	ldr	r4, [pc, #48]	; (8000704 <__libc_init_array+0x44>)
 80006d4:	f000 f818 	bl	8000708 <_init>
 80006d8:	1b64      	subs	r4, r4, r5
 80006da:	10a4      	asrs	r4, r4, #2
 80006dc:	2600      	movs	r6, #0
 80006de:	42a6      	cmp	r6, r4
 80006e0:	d105      	bne.n	80006ee <__libc_init_array+0x2e>
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80006e8:	4798      	blx	r3
 80006ea:	3601      	adds	r6, #1
 80006ec:	e7ee      	b.n	80006cc <__libc_init_array+0xc>
 80006ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80006f2:	4798      	blx	r3
 80006f4:	3601      	adds	r6, #1
 80006f6:	e7f2      	b.n	80006de <__libc_init_array+0x1e>
 80006f8:	08000720 	.word	0x08000720
 80006fc:	08000720 	.word	0x08000720
 8000700:	08000720 	.word	0x08000720
 8000704:	08000724 	.word	0x08000724

08000708 <_init>:
 8000708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800070a:	bf00      	nop
 800070c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800070e:	bc08      	pop	{r3}
 8000710:	469e      	mov	lr, r3
 8000712:	4770      	bx	lr

08000714 <_fini>:
 8000714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000716:	bf00      	nop
 8000718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800071a:	bc08      	pop	{r3}
 800071c:	469e      	mov	lr, r3
 800071e:	4770      	bx	lr
