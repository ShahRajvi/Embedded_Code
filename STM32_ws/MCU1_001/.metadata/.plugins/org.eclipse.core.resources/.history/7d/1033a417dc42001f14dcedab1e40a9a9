/*
 * stm32f446xx.h
 *
 *  Created on: Jan 27, 2024
 *      Author: RShah23
 */

#ifndef INC_STM32F446XX_H_
#define INC_STM32F446XX_H_

#include<stdint.h>
#include <stddef.h>
//#include <stm32f446xx_gpio__driver.h>
//#include <stm32f446xx_USART_driver.h>
//#include <stm32f446xx_RCC_driver.h>
//#include <stm32f446xx_SPI_driver.h>

/*****************************************************************************************
 *
 * Defining base addresses of memory registers
 *
 *****************************************************************************************/

#define FLASH_BASEADDR	0x08000000U		//Base address of Flash memory
#define SRAM1_BASEADDR 	0x20000000U 	//Base address of SRAM1 memory 112KKB
#define SRAM2_BASEADDR 	0x20001C00U 	//Base address of SRAM2 calculated from SRAM1ADDR + 112*1024 bytes
#define SRAM 			SRAM1_BASEADDR	//Referencing SRAM1 as SRAM
#define ROM				0x1FFF0000U		//Base address of ROM memory

/*
 * Defining AHBx and APBx bus peripheral base addresses
 */

#define PERIPH_BASE			0x40000000U		//Base address of peripheral bus
#define APB1PERIPH_BASE 	PERIPH_BASE		//APB1 PERIPHERAL BUS has the same base address as periperal bus
#define APB2PERIPH_BASE		0x40010000U		//Base address of APB2 bus
#define AHB1PERIPH_BASE 	0x40020000U		//AHB1 PERIPHERAL BUS has the same base address as periperal bus
#define AHB2PERIPH_BASE		0x50000000U		//Base address of peripheral bus


/*
 * Defining base addresses of GPIO peripherals which are hanging on AHB1 bus
 */



#define GPIOA_BASEADDR (AHB1PERIPH_BASE + 0x0000) 	//Base address of GPIOA port = AHB1PERIPH_BASE + offset (check reference manual)
#define GPIOB_BASEADDR (AHB1PERIPH_BASE + 0x0400) 	//Base address of GPIOB port = AHB1PERIPH_BASE + offset (check reference manual)
#define GPIOC_BASEADDR (AHB1PERIPH_BASE + 0x0800) 	//Base address of GPIOC port = AHB1PERIPH_BASE + offset (check reference manual)
#define GPIOD_BASEADDR (AHB1PERIPH_BASE + 0x0C00) 	//Base address of GPIOD port = AHB1PERIPH_BASE + offset (check reference manual)
#define GPIOE_BASEADDR (AHB1PERIPH_BASE + 0x1000) 	//Base address of GPIOB port = AHB1PERIPH_BASE + offset (check reference manual)
#define GPIOF_BASEADDR (AHB1PERIPH_BASE + 0x1400) 	//Base address of GPIOB port = AHB1PERIPH_BASE + offset (check reference manual)
#define GPIOG_BASEADDR (AHB1PERIPH_BASE + 0x1800) 	//Base address of GPIOB port = AHB1PERIPH_BASE + offset (check reference manual)
#define GPIOH_BASEADDR (AHB1PERIPH_BASE + 0x1C00) 	//Base address of GPIOB port = AHB1PERIPH_BASE + offset (check reference manual)
#define GPIOI_BASEADDR (AHB1PERIPH_BASE + 0x2000) 	//Base address of GPIOB port = AHB1PERIPH_BASE + offset (check reference manual)
#define RCC_BASEADDR   (AHB1PERIPH_BASE + 0x3800)

/*
 * APB1 Peripheral Bus addresses I2C1, I2c2, I2C3, SPI2, SPI3, USART2-USART5
 */
/*
 * I2C bus on APB1
 */

#define	I2C1_BASEADDR	(APB1PERIPH_BASE + 0x5400)	//Base address of I2C1 bus on APB1
#define	I2C2_BASEADDR	(APB1PERIPH_BASE + 0x5800)	//Base address of I2C2 bus on APB1
#define	I2C3_BASEADDR	(APB1PERIPH_BASE + 0x5C00)	//Base address of I2C1 bus on APB1

/*
 * SPI bus on APB1
 */

#define	SPI2_BASEADDR	(APB1PERIPH_BASE + 0x3800)	//Base address of SPI2 bus on APB1
#define	SPI3_BASEADDR	(APB1PERIPH_BASE + 0x3C00)	//Base address of SPI3 bus on APB1

/*
 * USART & UART bus on APB1
 */

#define	USART2_BASEADDR	(APB1PERIPH_BASE + 0x4400)	//Base address of USART2 bus on APB1
#define	USART3_BASEADDR	(APB1PERIPH_BASE + 0x4800)	//Base address of USART3 bus on APB1
#define	UART4_BASEADDR	(APB1PERIPH_BASE + 0x4C00)	//Base address of UART4 bus on APB1
#define	UART5_BASEADDR	(APB1PERIPH_BASE + 0x5000)	//Base address of UART5 bus on APB1


/*
 * APB2 Peripheral bus definition
 */
#define	SPI1_BASEADDR	(APB2PERIPH_BASE + 0x3000)	//Base address of SPI1 bus on APB2
#define	SPI4_BASEADDR	(APB2PERIPH_BASE + 0x3400)	//Base address of SPI4 bus on APB2
#define	SPI5_BASEADDR	(APB2PERIPH_BASE + 0x5000)	//Base address of SPI5 bus on APB2
#define	SPI6_BASEADDR	(APB2PERIPH_BASE + 0x5400)	//Base address of SPI6 bus on APB2

#define	USART1_BASEADDR	(APB2PERIPH_BASE + 0x1000)	//Base address of USART1 bus on APB2
#define	USART6_BASEADDR	(APB2PERIPH_BASE + 0x1400)	//Base address of USART6 bus on APB2
#define	EXTI_BASEADDR	(APB2PERIPH_BASE + 0x3C00)	//Base address of EXTI bus on APB2
#define	SYSCFG_BASEADDR	(APB2PERIPH_BASE + 0x3800)	//Base address of SYSCFG bus on APB2

#define __vo volatile

/*****************************************************************************************
 *
 * Peripheral register definition structures
 *
 *****************************************************************************************/

typedef struct{
	__vo uint32_t MODER;		//offset 0x00
	__vo uint32_t OTYPER;	//offset 0x04
	__vo uint32_t OSPEEDR;	//offset 0x08
	__vo uint32_t PUPDR;		//offset 0x0C
	__vo uint32_t IDR;		//offset 0x10
	__vo uint32_t ODR;		//offset 0x14
	__vo uint32_t BSRR;		//offset 0x18
	__vo uint32_t LCKR;		//offset 0x1C
	__vo uint32_t AFR[2];	//AFR0 & AFR1 offset 0x20 and 0x24
}GPIO_RegDef_t;


typedef struct{
	__vo uint32_t RCC_CR;
	__vo uint32_t RCC_PLLCFG;
	__vo uint32_t RCC_CFGR;
	__vo uint32_t RCC_CIR;
	__vo uint32_t RCC_AHB1RSTR;
	__vo uint32_t RCC_AHB2RSTR;
	__vo uint32_t RCC_AHB3RSTR;
		 uint32_t RCC_Reserved0;
	__vo uint32_t RCC_APB1RSTR;
	__vo uint32_t RCC_APB2RSTR;
		 uint32_t RCC_Reserved1[2];
	__vo uint32_t RCC_AHB1ENR;
	__vo uint32_t RCC_AHB2ENR;
	__vo uint32_t RCC_AHB3ENR;
	 	 uint32_t RCC_Reserved2;
	__vo uint32_t RCC_APB1ENR;
	__vo uint32_t RCC_APB2ENR;
		 uint32_t RCC_Reserved3[2];
	__vo uint32_t RCC_AHB1LPENR;
	__vo uint32_t RCC_AHB2LPENR;
	__vo uint32_t RCC_AHB3LPENR;
		 uint32_t RCC_Reserved4;
	__vo uint32_t RCC_APB1LPENR;
	__vo uint32_t RCC_APB2LPENR;
		 uint32_t RCC_Reserved5[2];
	__vo uint32_t RCC_BDCR;
	__vo uint32_t RCC_CSR;
		 uint32_t RCC_Reserved6[2];

	__vo uint32_t RCC_SSCGR;
	__vo uint32_t RCC_PLLI2SCFGR;
	__vo uint32_t RCC_PLLSAICFGR;
	__vo uint32_t RCC_DCKCFGR;

}RCC_RegDef_t;


typedef struct{
	__vo uint32_t SPI_CR1;		// SPI control register 1. Address offset: 0x00
	__vo uint32_t SPI_CR2;		// SPI control register 2. Address offset: 0x04
	__vo uint32_t SPI_SR;		// SPI status register. Address offset: 0x08
	__vo uint32_t SPI_DR;		// SPI data register. Address offset: 0x0C
	__vo uint32_t SPI_CRPR;		// SPI CRC polynomial register. Address offset: 0x10
	__vo uint32_t SPI_RXCRCR; 	// SPI RX CRC register. Address offset: 0x14
	__vo uint32_t SPI_TXCRCR;	// SPI TX CRC register. Address offset: 0x18
	__vo uint32_t SPI_I2SCFGR;	// SPI_I2S configuration register. Address offset: 0x1C
	__vo uint32_t SPI_I2SPR;	// SPI_I2S pre-scaler register. Address offset: 0x20

}SPI_RegDef_t;

typedef struct{
	__vo uint32_t SR; 		//USART_SR  Status register			Address offset 0x00
	__vo uint32_t DR; 		//USART_DR Data Register			Address offset 0x04
	__vo uint32_t Brr; 		//USART_BRR Baud rate register		Address offset 0x08
	__vo uint32_t CR1;		//USART_CR1 Control register		Address offset 0x0C
	__vo uint32_t CR2;		//USART_CR2 Control Register 2. 	Address offset 0x10
	__vo uint32_t CR3;		//USART_CR3 Control Register 3. 	Address offset 0x14
	__vo uint32_t GTPR;		//USART_GTPR Guard time & prescaler. Address offset 0x18

}USART_RegDef_t;



#define GPIOA ((GPIO_RegDef_t*)GPIOA_BASEADDR)
#define GPIOB ((GPIO_RegDef_t*)GPIOB_BASEADDR)
#define GPIOC ((GPIO_RegDef_t*)GPIOC_BASEADDR)
#define GPIOD ((GPIO_RegDef_t*)GPIOD_BASEADDR)
#define GPIOE ((GPIO_RegDef_t*)GPIOE_BASEADDR)
#define GPIOF ((GPIO_RegDef_t*)GPIOF_BASEADDR)
#define GPIOG ((GPIO_RegDef_t*)GPIOG_BASEADDR)
#define GPIOH ((GPIO_RegDef_t*)GPIOH_BASEADDR)
#define GPIOI ((GPIO_RegDef_t*)GPIOI_BASEADDR)

#define RCC ((RCC_RegDef_t*)RCC_BASEADDR)

#define USART1 ((USART_RegDef_t*)USART1_BASEADDR)
#define USART2 ((USART_RegDef_t*)USART2_BASEADDR)
#define USART3 ((USART_RegDef_t*)USART3_BASEADDR)
#define UART4 ((USART_RegDef_t*)UART4_BASEADDR)
#define UART5 ((USART_RegDef_t*)UART5_BASEADDR)
#define USART6 ((USART_RegDef_t*)USART6_BASEADDR)

/*****************************************************************************************
 *
 * Clock Enable Macros for GPIOx peripheral (Bitwise OR to set a bit)
 *
 *****************************************************************************************/

#define GPIOA_PCLK_EN()	(RCC->RCC_AHB1ENR |= (1<<0))
#define GPIOB_PCLK_EN()	(RCC->RCC_AHB1ENR |= (1<<1))
#define GPIOC_PCLK_EN()	(RCC->RCC_AHB1ENR |= (1<<2))
#define GPIOD_PCLK_EN()	(RCC->RCC_AHB1ENR |= (1<<3))
#define GPIOE_PCLK_EN()	(RCC->RCC_AHB1ENR |= (1<<4))
#define GPIOF_PCLK_EN()	(RCC->RCC_AHB1ENR |= (1<<5))
#define GPIOG_PCLK_EN()	(RCC->RCC_AHB1ENR |= (1<<6))
#define GPIOH_PCLK_EN()	(RCC->RCC_AHB1ENR |= (1<<7))
#define GPIOI_PCLK_EN()	(RCC->RCC_AHB1ENR |= (1<<8))

/*
 * Clock Enable Macros for I2Cx peripheral
 */
#define I2C1_PCLK_EN()	(RCC->RCC_APB1ENR |= (1<<21))
#define I2C2_PCLK_EN()	(RCC->RCC_APB1ENR |= (1<<22))
#define I2C3_PCLK_EN()	(RCC->RCC_APB1ENR |= (1<<23))

/*
 * Clock Enable Macros for SPIx peripheral
 */
#define SPI1_PCLK_EN()	(RCC->RCC_APB2ENR |= (1<<12))
#define SPI2_PCLK_EN()	(RCC->RCC_APB1ENR |= (1<<14))
#define SPI3_PCLK_EN()	(RCC->RCC_APB1ENR |= (1<<15))
#define SPI4_PCLK_EN()	(RCC->RCC_APB2ENR |= (1<<13))
#define SPI5_PCLK_EN()	(RCC->RCC_APB2ENR |= (1<<20))
#define SPI6_PCLK_EN()	(RCC->RCC_APB2ENR |= (1<<21))
/*
 * Clock Enable Macros for USARTx peripheral
 */
#define USART1_PCLK_EN()	(RCC->RCC_APB2ENR |= (1<<4))

#define USART2_PCLK_EN()	(RCC->RCC_APB1ENR |= (1<<17))
#define USART3_PCLK_EN()	(RCC->RCC_APB1ENR |= (1<<18))

#define USART6_PCLK_EN()	(RCC->RCC_APB2ENR |= (1<<5))


#define UART4_PCLK_EN()		(RCC->RCC_APB1ENR |= (1<<19))
#define UART5_PCLK_EN()		(RCC->RCC_APB1ENR |= (1<<20))



/*
 * Clock Enable Macros for SYSCFG peripheral
 */

#define SYSCFG_PCLK_EN()	(RCC->RCC_APB2ENR |= (1<<14))

/*
 * Clock Disable Macros for GPIOx peripheral (Bitwise OR to set a bit)
 */

#define GPIOA_PCLK_DI()	(RCC->RCC_AHB1ENR &= ~(1<<0))
#define GPIOB_PCLK_DI()	(RCC->RCC_AHB1ENR &= ~(1<<1))
#define GPIOC_PCLK_DI()	(RCC->RCC_AHB1ENR &= ~(1<<2))
#define GPIOD_PCLK_DI()	(RCC->RCC_AHB1ENR &= ~(1<<3))
#define GPIOE_PCLK_DI()	(RCC->RCC_AHB1ENR &= ~(1<<4))
#define GPIOF_PCLK_DI()	(RCC->RCC_AHB1ENR &= ~(1<<5))
#define GPIOG_PCLK_DI()	(RCC->RCC_AHB1ENR &= ~(1<<6))
#define GPIOH_PCLK_DI()	(RCC->RCC_AHB1ENR &= ~(1<<7))
#define GPIOI_PCLK_DI()	(RCC->RCC_AHB1ENR &= ~(1<<8))

/*
 * Clock Disable Macros for I2Cx peripheral
 */

#define I2C1_PCLK_DI()	(RCC->RCC_APB1ENR &= ~(1<<21))
#define I2C2_PCLK_DI()	(RCC->RCC_APB1ENR &= ~(1<<22))
#define I2C3_PCLK_DI()	(RCC->RCC_APB1ENR &= ~(1<<23))
/*
 * Clock Disable Macros for SPIx peripheral
 */
#define SPI1_PCLK_DI()	(RCC->RCC_APB2ENR &= ~(1<<12))
#define SPI2_PCLK_DI()	(RCC->RCC_APB1ENR &= ~(1<<14))
#define SPI3_PCLK_DI()	(RCC->RCC_APB1ENR &= ~(1<<15))
#define SPI4_PCLK_DI()	(RCC->RCC_APB2ENR &= ~(1<<13))
#define SPI5_PCLK_DI()	(RCC->RCC_APB2ENR &= ~(1<<20))
#define SPI6_PCLK_DI()	(RCC->RCC_APB2ENR &= ~(1<<21))

/*
 * Clock Disable Macros for USARTx peripheral
 */

#define USART1_PCLK_DI()	(RCC->RCC_APB2ENR &= ~(1<<4))
#define USART2_PCLK_DI()	(RCC->RCC_APB1ENR &= ~(1<<17))
#define USART3_PCLK_DI()	(RCC->RCC_APB1ENR &= ~(1<<18))
#define USART6_PCLK_DI()	(RCC->RCC_APB2ENR &= ~(1<<5))

#define UART4_PCLK_DI()		(RCC->RCC_APB1ENR &= ~(1<<19))
#define UART5_PCLK_DI()		(RCC->RCC_APB1ENR &= ~(1<<20))


/*
 * Clock Disable Macros for SYSCFGG peripheral
 */

#define SYSCFG_PCLK_DI()	(RCC->RCC_APB2ENR &= ~(1<<14))


/*
 * Macros to reset GPIOx peripherals
 */
#define GPIOA_REG_RESET()	do{ (RCC->RCC_AHB1RSTR |= (1<<0)); (RCC->RCC_AHB1RSTR &= ~(1<<0)); } while(0)
#define GPIOB_REG_RESET()	do{ (RCC->RCC_AHB1RSTR |= (1<<1)); (RCC->RCC_AHB1RSTR &= ~(1<<1)); } while(0)
#define GPIOC_REG_RESET()	do{ (RCC->RCC_AHB1RSTR |= (1<<2)); (RCC->RCC_AHB1RSTR &= ~(1<<2)); } while(0)
#define GPIOD_REG_RESET()	do{ (RCC->RCC_AHB1RSTR |= (1<<3)); (RCC->RCC_AHB1RSTR &= ~(1<<3)); } while(0)
#define GPIOE_REG_RESET()	do{ (RCC->RCC_AHB1RSTR |= (1<<4)); (RCC->RCC_AHB1RSTR &= ~(1<<4)); } while(0)
#define GPIOF_REG_RESET()	do{ (RCC->RCC_AHB1RSTR |= (1<<5)); (RCC->RCC_AHB1RSTR &= ~(1<<5)); } while(0)
#define GPIOG_REG_RESET()	do{ (RCC->RCC_AHB1RSTR |= (1<<6)); (RCC->RCC_AHB1RSTR &= ~(1<<6)); } while(0)
#define GPIOH_REG_RESET()	do{ (RCC->RCC_AHB1RSTR |= (1<<7)); (RCC->RCC_AHB1RSTR &= ~(1<<7)); } while(0)
#define GPIOI_REG_RESET()	do{ (RCC->RCC_AHB1RSTR |= (1<<8)); (RCC->RCC_AHB1RSTR &= ~(1<<8)); } while(0)

/*
 * Macros for SPI peripherals
 */

#define SPI1_REG_RESET()	do{ (RCC->RCC_APB2RSTR |= (1<<12)); (RCC->RCC_APB2RSTR &= ~(1<<12)); } while(0)
#define SPI2_REG_RESET()	do{ (RCC->RCC_APB1RSTR |= (1<<14)); (RCC->RCC_APB1RSTR &= ~(1<<14)); } while(0)
#define SPI3_REG_RESET()	do{ (RCC->RCC_APB1RSTR |= (1<<15)); (RCC->RCC_APB1RSTR &= ~(1<<15)); } while(0)
#define SPI4_REG_RESET()	do{ (RCC->RCC_APB2RSTR |= (1<<13)); (RCC->RCC_APB2RSTR &= ~(1<<13)); } while(0)
#define SPI5_REG_RESET()	do{ (RCC->RCC_APB2RSTR |= (1<<20)); (RCC->RCC_APB2RSTR &= ~(1<<20)); } while(0)
#define SPI6_REG_RESET()	do{ (RCC->RCC_APB2RSTR |= (1<<21)); (RCC->RCC_APB2RSTR &= ~(1<<21)); } while(0)

/*
 * Macros to reset USART peripherals
 */

#define USART1_REG_RESET()  do{ (RCC->RCC_APB2RSTR |= (1 << 4));  (RCC->RCC_APB2RSTR &= ~(1 << 4)); }while(0)
#define USART2_REG_RESET()  do{ (RCC->RCC_APB1RSTR |= (1 << 17)); (RCC->RCC_APB1RSTR &= ~(1 << 17)); }while(0)
#define USART3_REG_RESET()  do{ (RCC->RCC_APB1RSTR |= (1 << 18)); (RCC->RCC_APB1RSTR &= ~(1 << 18)); }while(0)
#define UART4_REG_RESET()   do{ (RCC->RCC_APB1RSTR |= (1 << 19)); (RCC->RCC_APB1RSTR &= ~(1 << 19)); }while(0)
#define UART5_REG_RESET()   do{ (RCC->RCC_APB1RSTR |= (1 << 20)); (RCC->RCC_APB1RSTR &= ~(1 << 20)); }while(0)
#define USART6_REG_RESET()  do{ (RCC->RCC_APB2RSTR |= (1 << 5));  (RCC->RCC_APB2RSTR &= ~(1 << 5)); }while(0)
/*
 * Some generic macros
 */

#define ENABLE 			1
#define DISABLE			0
#define SET				ENABLE
#define RESET			DISABLE
#define GPIO_PIN_SET	SET
#define GPIO_PIN_RESET 	RESET

#define FLAG_SET		SET
#define FLAG_RESET		RESET

/***********************************************************************************************************
 *			 SPI: Bit position definition for SPI registers
 ***********************************************************************************************************/


/***********************************************************************************************************
 *			 USART: Bit position definition for USART registers
 ***********************************************************************************************************/
/*
 * Bit position definitions USART_SR
 */
#define USART_SR_PE			0
#define USART_SR_FE			1
#define USART_SR_NF 		2
#define USART_SR_ORE		3
#define USART_SR_IDLE		4
#define USART_SR_RXNE		5
#define USART_SR_TC			6
#define USART_SR_TXE		7
#define USART_SR_LBD		8
#define USART_SR_CTS		9

/*
 * Bit position definitions USART_CR1
 */
#define USART_CR1_SBK		0
#define USART_CR1_RWU 		1
#define USART_CR1_RE		2
#define USART_CR1_TE		3
#define USART_CR1_IDLEIE 	4
#define USART_CR1_RXNEIE	5
#define USART_CR1_TCIE		6
#define USART_CR1_TXEIE		7
#define USART_CR1_PEIE		8
#define USART_CR1_PS		9
#define USART_CR1_PCE		10
#define USART_CR1_WAKE		11
#define USART_CR1_M			12
#define USART_CR1_UE		13
#define USART_CR1_OVER8		15

/*
 * Bit position definitions USART_CR2
 */

#define USART_CR2_ADD		0
#define USART_CR2_LBDL		5
#define USART_CR2_LBDIE		6
#define USART_CR2_LBCL		8
#define USART_CR2_CPHA		9
#define USART_CR2_CPOL		10
#define USART_CR2_CLKEN		11
#define USART_CR2_STOP		12
#define USART_CR2_LINEN		14


/*
 * Bit position definitions USART_CR3
 */

#define USART_CR3_EIE		0
#define USART_CR3_IREN		1
#define USART_CR3_IRLP		2
#define USART_CR3_HDSEL		3
#define USART_CR3_NACK		4
#define USART_CR3_SCEN		5
#define USART_CR3_DMAR		6
#define USART_CR3_DMAT		7
#define USART_CR3_RTSE		8
#define USART_CR3_CTSE		9
#define USART_CR3_CTSIE		10
#define USART_CR3_ONEBIT	11


#include "stm32f446xx_gpio__driver.h"

#endif /* INC_STM32F446XX_H_ */
