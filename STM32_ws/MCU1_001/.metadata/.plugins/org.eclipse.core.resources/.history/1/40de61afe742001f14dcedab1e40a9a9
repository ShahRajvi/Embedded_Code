/*
 * stm32f446xx_SPI_driver.h
 *
 *  Created on: Jul 15, 2024
 *      Author: RShah23
 */

#ifndef INC_STM32F446XX_SPI_DRIVER_H_
#define INC_STM32F446XX_SPI_DRIVER_H_

#include "stm32f446xx.h"

typedef struct{
	uint8_t SPI_DeviceMode;
	uint8_t SPI_BusConfig;
	uint8_t SPI_SclkSpeed;
	uint8_t SPI_DFF;
	uint8_t SPI_CPOL;
	uint8_t SPI_CPHA;
	uint8_t SPI_SSM;

}SPI_Config_t;

typedef struct{
	SPI_RegDef_t *pSPIx;	// Base address of SPIx (SPI1 - SPI6)
	SPI_Config_t  SPI_Config;
}SPI_Handle_t;

/*
 * SPI Device Modes: Master or Slave. //MSTR bit of CR1 register
 */

#define SPI_DEVICE_MODE_SLAVE	0
#define SPI_DEVICE_MODE_MASTER	1

/*
 * SPI Device Modes: Full duplex, half duplex, simplex (Tx & Rx)
 */

#define SPI_BUS_CONFIG_FullDuplex		1
#define SPI_BUS_CONFIG_HalfDuplex		2
#define SPI_BUS_CONFIG_Simplex_TXONLY	3
#define SPI_BUS_CONFIG_Simplex_RXONLY	4

/*
 * SclkSpeed: SPI Clock Speed: Master or Slave: See CR1 BR field
 */


#define SPI_SCLK_SPEED_DIV2		0
#define SPI_SCLK_SPEED_DIV4		1
#define SPI_SCLK_SPEED_DIV8		2
#define SPI_SCLK_SPEED_DIV16	3
#define SPI_SCLK_SPEED_DIV32	4
#define SPI_SCLK_SPEED_DIV64	5
#define SPI_SCLK_SPEED_DIV128	6
#define SPI_SCLK_SPEED_DIV256	7


/*
 * DFF: SPI data frame format: 8 bit 0 or 16 bit 1
 */

#define SPI_DFF_8BIT	0
#define SPI_DFF_16BIT	1

/*
 * CPOL: SPI clock polarity: CK to 0 when idle: 0 or CK to 1 when idle: 1
 */

#define SPI_CPOL_LOW	0
#define SPI_CPOL_HIGH	1

/*
 * CPHA: SPI clock phase
 */

#define SPI_CPHA_LOW	0
#define SPI_CPHA_HIGH	1

/*
 * SSM: SPI software slave management: Disabled: 1, enabled: 0
 */

#define SPI_SSM_DISABLE	0		// HW slave management
#define SPI_SSM_ENABLE	1		// SW slave management





/****************************************************************
 *
 * API Function Definitions
 *
 ****************************************************************/

/*
 * Peripheral clock setup
 */

void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi);


/*
 * SPI Init and De-init function definition
 */

void SPI_Init(SPI_Handle_t *pSPIHandle);
void SPI_DeInit(SPI_RegDef_t *pSPIx);

/*
 * Blocking and Non-blocking based APIs
 */

void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t Len);
void SPI_ReceiveData(SPI_RegDef_t *pSPIx, uint8_t *pRxBuffer, uint32_t Len);

/*
 * IRQ Configuration and ISR handling
 */
void SPI_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnOrDi);
void SPI_IRQPriorityConfig(uint8_t IRQNumber, uint32_t IRQPriority);
void SPI_IRQHandling(SPI_Handle_t *pSPIHandle);

/*
 * Other Peripheral Control APIs
 */


#endif /* INC_STM32F446XX_SPI_DRIVER_H_ */
