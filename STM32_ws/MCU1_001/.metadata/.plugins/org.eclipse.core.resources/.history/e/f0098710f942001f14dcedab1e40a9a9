/*
 * stm32f446xx_I2C_drivers.c
 *
 *  Created on: Jul 15, 2024
 *      Author: RShah23
 */

#include "stm32f446xx_I2C_driver.h"

/*********************************************************************
 * @fn      		  - I2C_PeriClockControl
 *
 * @brief             -	This function is for peripheral clock setup
 *
 * @param[in]         - *pI2Cx // Base address of the I2C bus
 * @param[in]         - ENABLE or DISABLE
 *
 * @return      - None
 *
 * @Note        - None

 */

void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi){
	if(EnorDi == ENABLE){
				if(pI2Cx == I2C1){
							I2C1_PCLK_EN();
						}
				if(pI2Cx == I2C2){
							I2C2_PCLK_EN();
						}
				if(pI2Cx == I2C3){
							I2C3_PCLK_EN();
						}
			}

			if(EnorDi == DISABLE){
					if(pI2Cx == I2C1){
								I2C1_PCLK_DI();
							}
					if(pI2Cx == I2C2){
								I2C2_PCLK_DI();
							}
					if(pI2Cx == I2C3){
								I2C3_PCLK_DI();
							}

				}
}

/*****************************************************************
 * @fn          - I2C_DeInit
 *
 * @brief       - This function de-initialize I2C peripherals
 *
 * @param[in]   - I2C_RegDef_t *pI2Cx - pointer to the Base address of the I2C peripheral
 *
 * @return      - None
 *
 * @Note        - None
 *
 *****************************************************************/
void I2C_DeInit(I2C_RegDef_t *pI2Cx)
{
    if(pI2Cx == I2C1)
    {
    	I2C1_REG_RESET();
    }
    else if(pI2Cx == I2C2)
    {
        I2C2_REG_RESET();
    }
    else if(pI2Cx == I2C3)
    {
        I2C3_REG_RESET();
    }

    }
}

