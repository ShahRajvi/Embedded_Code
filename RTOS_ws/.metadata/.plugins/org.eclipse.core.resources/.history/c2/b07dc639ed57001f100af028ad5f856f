/*
 * task_handler.c
 *
 *  Created on: Aug 11, 2024
 *      Author: rajvi
 */

#include "main.h"

int extract_command(command_t *cmd);
void process_command(command_t *cmd);





void menu_task_handler(void* parameters){
	BaseType_t ret;
	uint32_t cmd_addr;
	const char* menu_msg =
			"**********************************\n"
			"                Menu              \n"
			"**********************************\n"
			"LED EFFECT                  ---> 0\n"
			"Date & Time                 ---> 1\n"
			"EXIT                        ---> 2\n"
			"Enter your choice here: ";

	while(1){
		xQueueuSend(q_print, &menu_msg, portMAX_DELAY);
		ret = xTaskNotifyWait(0, 0, &cmd_addr, portMAX_DELAY );
	}
}
//state_t curr_state = sMainMenu;


void cmd_task_handler(void* parameters){

	BaseType_t ret;
	command_t cmd;
		while(1){
			/* Notify Wait */
			ret = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);

			if(ret == pdTRUE){
				/* process the user data (command) stored in input data queue */
				process_command(&cmd);
			}
			/* Notify the command to relevant task */


	}
}



int extract_command(command_t *cmd){
	uint8_t item;
	BaseType_t status;

	/* Check if there are any messages waiting in the queue	 */
	status = uxQueueMessagesWaiting(q_data);
	if(!status) return -1;	// Return since there are no messages in the queue

	uint8_t i = 0;

	do{
		status = xQueueReceive(q_data, &item, 0);
		if(status == pdTRUE) cmd->payload[i++] = item;
	}while(item != '\n');

	/* When \n is received 	 */

	cmd->payload[i-1] = '\0';
	cmd->len = i-1;
	return 0;
}

void process_command(command_t *cmd){
	// Extract the data bytes from the input data queue and create a command
	BaseType_t ret;
	extract_command(cmd);

	switch(curr_state){
	case sMainMenu:
		ret = xTaskNotify(menu_task_handle, (uint32_t)cmd, eSetValueWithOverwrite);
		break;

	case sLEDEffect:
		ret = xTaskNotify(led_task_handle, (uint32_t)cmd, eSetValueWithOverwrite);
		break;

	case sRTCMenu:

	case sRTCTimeConfig:

	case sRTCDateConfig:

	case sRTCReport:
		ret = xTaskNotify(rtc_task_handle, (uint32_t)cmd, eSetValueWithOverwrite);
		break;
	}
}

void print_task_handler(void* parameters){

	while(1){


	}
}
/*
 * Toggle orange led on the board
 */
void led_task_handler(void* parameters){
	TickType_t last_wakeup_time;
	last_wakeup_time = xTaskGetTickCount();
	while(1){

		vTaskDelayUntil(&last_wakeup_time, pdMS_TO_TICKS(1000)); // Making all our tasks periodic
	}
}
/*
 * Toggle red led on the board.
 */

void rtc_task_handler(void* parameters){
	TickType_t last_wakeup_time;
	last_wakeup_time = xTaskGetTickCount();
	while(1){

		vTaskDelayUntil(&last_wakeup_time, pdMS_TO_TICKS(1000)); // Making all our tasks periodic
	}
}
