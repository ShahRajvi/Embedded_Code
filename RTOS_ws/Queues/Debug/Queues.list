
Queues.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006fbc  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  0800718c  0800718c  0000818c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080072f8  080072f8  00009014  2**0
                  CONTENTS
  4 .ARM          00000008  080072f8  080072f8  000082f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007300  08007300  00009014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007300  08007300  00008300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007304  08007304  00008304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08007308  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012e94  20000014  0800731c  00009014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20012ea8  0800731c  00009ea8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001538b  00000000  00000000  00009044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003351  00000000  00000000  0001e3cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001320  00000000  00000000  00021720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ee6  00000000  00000000  00022a40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023d78  00000000  00000000  00023926  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000181a5  00000000  00000000  0004769e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e0229  00000000  00000000  0005f843  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013fa6c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ff4  00000000  00000000  0013fab0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  00144aa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000014 	.word	0x20000014
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007174 	.word	0x08007174

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000018 	.word	0x20000018
 800020c:	08007174 	.word	0x08007174

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b96a 	b.w	80004fc <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	460c      	mov	r4, r1
 8000248:	2b00      	cmp	r3, #0
 800024a:	d14e      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024c:	4694      	mov	ip, r2
 800024e:	458c      	cmp	ip, r1
 8000250:	4686      	mov	lr, r0
 8000252:	fab2 f282 	clz	r2, r2
 8000256:	d962      	bls.n	800031e <__udivmoddi4+0xde>
 8000258:	b14a      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025a:	f1c2 0320 	rsb	r3, r2, #32
 800025e:	4091      	lsls	r1, r2
 8000260:	fa20 f303 	lsr.w	r3, r0, r3
 8000264:	fa0c fc02 	lsl.w	ip, ip, r2
 8000268:	4319      	orrs	r1, r3
 800026a:	fa00 fe02 	lsl.w	lr, r0, r2
 800026e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000272:	fa1f f68c 	uxth.w	r6, ip
 8000276:	fbb1 f4f7 	udiv	r4, r1, r7
 800027a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800027e:	fb07 1114 	mls	r1, r7, r4, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb04 f106 	mul.w	r1, r4, r6
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f104 30ff 	add.w	r0, r4, #4294967295
 8000296:	f080 8112 	bcs.w	80004be <__udivmoddi4+0x27e>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 810f 	bls.w	80004be <__udivmoddi4+0x27e>
 80002a0:	3c02      	subs	r4, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a59      	subs	r1, r3, r1
 80002a6:	fa1f f38e 	uxth.w	r3, lr
 80002aa:	fbb1 f0f7 	udiv	r0, r1, r7
 80002ae:	fb07 1110 	mls	r1, r7, r0, r1
 80002b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002b6:	fb00 f606 	mul.w	r6, r0, r6
 80002ba:	429e      	cmp	r6, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x94>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002c6:	f080 80fc 	bcs.w	80004c2 <__udivmoddi4+0x282>
 80002ca:	429e      	cmp	r6, r3
 80002cc:	f240 80f9 	bls.w	80004c2 <__udivmoddi4+0x282>
 80002d0:	4463      	add	r3, ip
 80002d2:	3802      	subs	r0, #2
 80002d4:	1b9b      	subs	r3, r3, r6
 80002d6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002da:	2100      	movs	r1, #0
 80002dc:	b11d      	cbz	r5, 80002e6 <__udivmoddi4+0xa6>
 80002de:	40d3      	lsrs	r3, r2
 80002e0:	2200      	movs	r2, #0
 80002e2:	e9c5 3200 	strd	r3, r2, [r5]
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d905      	bls.n	80002fa <__udivmoddi4+0xba>
 80002ee:	b10d      	cbz	r5, 80002f4 <__udivmoddi4+0xb4>
 80002f0:	e9c5 0100 	strd	r0, r1, [r5]
 80002f4:	2100      	movs	r1, #0
 80002f6:	4608      	mov	r0, r1
 80002f8:	e7f5      	b.n	80002e6 <__udivmoddi4+0xa6>
 80002fa:	fab3 f183 	clz	r1, r3
 80002fe:	2900      	cmp	r1, #0
 8000300:	d146      	bne.n	8000390 <__udivmoddi4+0x150>
 8000302:	42a3      	cmp	r3, r4
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xcc>
 8000306:	4290      	cmp	r0, r2
 8000308:	f0c0 80f0 	bcc.w	80004ec <__udivmoddi4+0x2ac>
 800030c:	1a86      	subs	r6, r0, r2
 800030e:	eb64 0303 	sbc.w	r3, r4, r3
 8000312:	2001      	movs	r0, #1
 8000314:	2d00      	cmp	r5, #0
 8000316:	d0e6      	beq.n	80002e6 <__udivmoddi4+0xa6>
 8000318:	e9c5 6300 	strd	r6, r3, [r5]
 800031c:	e7e3      	b.n	80002e6 <__udivmoddi4+0xa6>
 800031e:	2a00      	cmp	r2, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x204>
 8000324:	eba1 040c 	sub.w	r4, r1, ip
 8000328:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800032c:	fa1f f78c 	uxth.w	r7, ip
 8000330:	2101      	movs	r1, #1
 8000332:	fbb4 f6f8 	udiv	r6, r4, r8
 8000336:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033a:	fb08 4416 	mls	r4, r8, r6, r4
 800033e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000342:	fb07 f006 	mul.w	r0, r7, r6
 8000346:	4298      	cmp	r0, r3
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x11c>
 800034a:	eb1c 0303 	adds.w	r3, ip, r3
 800034e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x11a>
 8000354:	4298      	cmp	r0, r3
 8000356:	f200 80cd 	bhi.w	80004f4 <__udivmoddi4+0x2b4>
 800035a:	4626      	mov	r6, r4
 800035c:	1a1c      	subs	r4, r3, r0
 800035e:	fa1f f38e 	uxth.w	r3, lr
 8000362:	fbb4 f0f8 	udiv	r0, r4, r8
 8000366:	fb08 4410 	mls	r4, r8, r0, r4
 800036a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036e:	fb00 f707 	mul.w	r7, r0, r7
 8000372:	429f      	cmp	r7, r3
 8000374:	d908      	bls.n	8000388 <__udivmoddi4+0x148>
 8000376:	eb1c 0303 	adds.w	r3, ip, r3
 800037a:	f100 34ff 	add.w	r4, r0, #4294967295
 800037e:	d202      	bcs.n	8000386 <__udivmoddi4+0x146>
 8000380:	429f      	cmp	r7, r3
 8000382:	f200 80b0 	bhi.w	80004e6 <__udivmoddi4+0x2a6>
 8000386:	4620      	mov	r0, r4
 8000388:	1bdb      	subs	r3, r3, r7
 800038a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800038e:	e7a5      	b.n	80002dc <__udivmoddi4+0x9c>
 8000390:	f1c1 0620 	rsb	r6, r1, #32
 8000394:	408b      	lsls	r3, r1
 8000396:	fa22 f706 	lsr.w	r7, r2, r6
 800039a:	431f      	orrs	r7, r3
 800039c:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a0:	fa04 f301 	lsl.w	r3, r4, r1
 80003a4:	ea43 030c 	orr.w	r3, r3, ip
 80003a8:	40f4      	lsrs	r4, r6
 80003aa:	fa00 f801 	lsl.w	r8, r0, r1
 80003ae:	0c38      	lsrs	r0, r7, #16
 80003b0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003b4:	fbb4 fef0 	udiv	lr, r4, r0
 80003b8:	fa1f fc87 	uxth.w	ip, r7
 80003bc:	fb00 441e 	mls	r4, r0, lr, r4
 80003c0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c4:	fb0e f90c 	mul.w	r9, lr, ip
 80003c8:	45a1      	cmp	r9, r4
 80003ca:	fa02 f201 	lsl.w	r2, r2, r1
 80003ce:	d90a      	bls.n	80003e6 <__udivmoddi4+0x1a6>
 80003d0:	193c      	adds	r4, r7, r4
 80003d2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003d6:	f080 8084 	bcs.w	80004e2 <__udivmoddi4+0x2a2>
 80003da:	45a1      	cmp	r9, r4
 80003dc:	f240 8081 	bls.w	80004e2 <__udivmoddi4+0x2a2>
 80003e0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003e4:	443c      	add	r4, r7
 80003e6:	eba4 0409 	sub.w	r4, r4, r9
 80003ea:	fa1f f983 	uxth.w	r9, r3
 80003ee:	fbb4 f3f0 	udiv	r3, r4, r0
 80003f2:	fb00 4413 	mls	r4, r0, r3, r4
 80003f6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003fa:	fb03 fc0c 	mul.w	ip, r3, ip
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d907      	bls.n	8000412 <__udivmoddi4+0x1d2>
 8000402:	193c      	adds	r4, r7, r4
 8000404:	f103 30ff 	add.w	r0, r3, #4294967295
 8000408:	d267      	bcs.n	80004da <__udivmoddi4+0x29a>
 800040a:	45a4      	cmp	ip, r4
 800040c:	d965      	bls.n	80004da <__udivmoddi4+0x29a>
 800040e:	3b02      	subs	r3, #2
 8000410:	443c      	add	r4, r7
 8000412:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000416:	fba0 9302 	umull	r9, r3, r0, r2
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	429c      	cmp	r4, r3
 8000420:	46ce      	mov	lr, r9
 8000422:	469c      	mov	ip, r3
 8000424:	d351      	bcc.n	80004ca <__udivmoddi4+0x28a>
 8000426:	d04e      	beq.n	80004c6 <__udivmoddi4+0x286>
 8000428:	b155      	cbz	r5, 8000440 <__udivmoddi4+0x200>
 800042a:	ebb8 030e 	subs.w	r3, r8, lr
 800042e:	eb64 040c 	sbc.w	r4, r4, ip
 8000432:	fa04 f606 	lsl.w	r6, r4, r6
 8000436:	40cb      	lsrs	r3, r1
 8000438:	431e      	orrs	r6, r3
 800043a:	40cc      	lsrs	r4, r1
 800043c:	e9c5 6400 	strd	r6, r4, [r5]
 8000440:	2100      	movs	r1, #0
 8000442:	e750      	b.n	80002e6 <__udivmoddi4+0xa6>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f103 	lsr.w	r1, r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa24 f303 	lsr.w	r3, r4, r3
 8000454:	4094      	lsls	r4, r2
 8000456:	430c      	orrs	r4, r1
 8000458:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800045c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000460:	fa1f f78c 	uxth.w	r7, ip
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3110 	mls	r1, r8, r0, r3
 800046c:	0c23      	lsrs	r3, r4, #16
 800046e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000472:	fb00 f107 	mul.w	r1, r0, r7
 8000476:	4299      	cmp	r1, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x24c>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000482:	d22c      	bcs.n	80004de <__udivmoddi4+0x29e>
 8000484:	4299      	cmp	r1, r3
 8000486:	d92a      	bls.n	80004de <__udivmoddi4+0x29e>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b2a4      	uxth	r4, r4
 8000490:	fbb3 f1f8 	udiv	r1, r3, r8
 8000494:	fb08 3311 	mls	r3, r8, r1, r3
 8000498:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800049c:	fb01 f307 	mul.w	r3, r1, r7
 80004a0:	42a3      	cmp	r3, r4
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x276>
 80004a4:	eb1c 0404 	adds.w	r4, ip, r4
 80004a8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004ac:	d213      	bcs.n	80004d6 <__udivmoddi4+0x296>
 80004ae:	42a3      	cmp	r3, r4
 80004b0:	d911      	bls.n	80004d6 <__udivmoddi4+0x296>
 80004b2:	3902      	subs	r1, #2
 80004b4:	4464      	add	r4, ip
 80004b6:	1ae4      	subs	r4, r4, r3
 80004b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004bc:	e739      	b.n	8000332 <__udivmoddi4+0xf2>
 80004be:	4604      	mov	r4, r0
 80004c0:	e6f0      	b.n	80002a4 <__udivmoddi4+0x64>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e706      	b.n	80002d4 <__udivmoddi4+0x94>
 80004c6:	45c8      	cmp	r8, r9
 80004c8:	d2ae      	bcs.n	8000428 <__udivmoddi4+0x1e8>
 80004ca:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ce:	eb63 0c07 	sbc.w	ip, r3, r7
 80004d2:	3801      	subs	r0, #1
 80004d4:	e7a8      	b.n	8000428 <__udivmoddi4+0x1e8>
 80004d6:	4631      	mov	r1, r6
 80004d8:	e7ed      	b.n	80004b6 <__udivmoddi4+0x276>
 80004da:	4603      	mov	r3, r0
 80004dc:	e799      	b.n	8000412 <__udivmoddi4+0x1d2>
 80004de:	4630      	mov	r0, r6
 80004e0:	e7d4      	b.n	800048c <__udivmoddi4+0x24c>
 80004e2:	46d6      	mov	lr, sl
 80004e4:	e77f      	b.n	80003e6 <__udivmoddi4+0x1a6>
 80004e6:	4463      	add	r3, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e74d      	b.n	8000388 <__udivmoddi4+0x148>
 80004ec:	4606      	mov	r6, r0
 80004ee:	4623      	mov	r3, r4
 80004f0:	4608      	mov	r0, r1
 80004f2:	e70f      	b.n	8000314 <__udivmoddi4+0xd4>
 80004f4:	3e02      	subs	r6, #2
 80004f6:	4463      	add	r3, ip
 80004f8:	e730      	b.n	800035c <__udivmoddi4+0x11c>
 80004fa:	bf00      	nop

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b08a      	sub	sp, #40	@ 0x28
 8000504:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000506:	f000 fd35 	bl	8000f74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050a:	f000 f8e7 	bl	80006dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050e:	f000 f9a7 	bl	8000860 <MX_GPIO_Init>
  MX_RTC_Init();
 8000512:	f000 f955 	bl	80007c0 <MX_RTC_Init>
  MX_USART2_UART_Init();
 8000516:	f000 f979 	bl	800080c <MX_USART2_UART_Init>
  // Start segger recording:
  //SEGGER_SYSVIEW_Conf();

  //SEGGER_SYSVIEW_Start();		// When using Segger UART, SYSView Start occurs within the init funciton.

  status = xTaskCreate(menu_task_handler, "menu_task", 200, NULL, 2, &menu_task_handle );
 800051a:	4b5d      	ldr	r3, [pc, #372]	@ (8000690 <main+0x190>)
 800051c:	9301      	str	r3, [sp, #4]
 800051e:	2302      	movs	r3, #2
 8000520:	9300      	str	r3, [sp, #0]
 8000522:	2300      	movs	r3, #0
 8000524:	22c8      	movs	r2, #200	@ 0xc8
 8000526:	495b      	ldr	r1, [pc, #364]	@ (8000694 <main+0x194>)
 8000528:	485b      	ldr	r0, [pc, #364]	@ (8000698 <main+0x198>)
 800052a:	f004 fb89 	bl	8004c40 <xTaskCreate>
 800052e:	61f8      	str	r0, [r7, #28]
  configASSERT(status == pdPASS);
 8000530:	69fb      	ldr	r3, [r7, #28]
 8000532:	2b01      	cmp	r3, #1
 8000534:	d00b      	beq.n	800054e <main+0x4e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000536:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800053a:	f383 8811 	msr	BASEPRI, r3
 800053e:	f3bf 8f6f 	isb	sy
 8000542:	f3bf 8f4f 	dsb	sy
 8000546:	61bb      	str	r3, [r7, #24]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000548:	bf00      	nop
 800054a:	bf00      	nop
 800054c:	e7fd      	b.n	800054a <main+0x4a>

  status = xTaskCreate(cmd_task_handler, "cmd_task", 200, NULL, 2, &cmd_task_handle );
 800054e:	4b53      	ldr	r3, [pc, #332]	@ (800069c <main+0x19c>)
 8000550:	9301      	str	r3, [sp, #4]
 8000552:	2302      	movs	r3, #2
 8000554:	9300      	str	r3, [sp, #0]
 8000556:	2300      	movs	r3, #0
 8000558:	22c8      	movs	r2, #200	@ 0xc8
 800055a:	4951      	ldr	r1, [pc, #324]	@ (80006a0 <main+0x1a0>)
 800055c:	4851      	ldr	r0, [pc, #324]	@ (80006a4 <main+0x1a4>)
 800055e:	f004 fb6f 	bl	8004c40 <xTaskCreate>
 8000562:	61f8      	str	r0, [r7, #28]
  configASSERT(status == pdPASS);
 8000564:	69fb      	ldr	r3, [r7, #28]
 8000566:	2b01      	cmp	r3, #1
 8000568:	d00b      	beq.n	8000582 <main+0x82>
        __asm volatile
 800056a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800056e:	f383 8811 	msr	BASEPRI, r3
 8000572:	f3bf 8f6f 	isb	sy
 8000576:	f3bf 8f4f 	dsb	sy
 800057a:	617b      	str	r3, [r7, #20]
    }
 800057c:	bf00      	nop
 800057e:	bf00      	nop
 8000580:	e7fd      	b.n	800057e <main+0x7e>

  status = xTaskCreate(print_task_handler, "print_task", 200, NULL, 2, &print_task_handle);
 8000582:	4b49      	ldr	r3, [pc, #292]	@ (80006a8 <main+0x1a8>)
 8000584:	9301      	str	r3, [sp, #4]
 8000586:	2302      	movs	r3, #2
 8000588:	9300      	str	r3, [sp, #0]
 800058a:	2300      	movs	r3, #0
 800058c:	22c8      	movs	r2, #200	@ 0xc8
 800058e:	4947      	ldr	r1, [pc, #284]	@ (80006ac <main+0x1ac>)
 8000590:	4847      	ldr	r0, [pc, #284]	@ (80006b0 <main+0x1b0>)
 8000592:	f004 fb55 	bl	8004c40 <xTaskCreate>
 8000596:	61f8      	str	r0, [r7, #28]
  configASSERT(status == pdPASS);
 8000598:	69fb      	ldr	r3, [r7, #28]
 800059a:	2b01      	cmp	r3, #1
 800059c:	d00b      	beq.n	80005b6 <main+0xb6>
        __asm volatile
 800059e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80005a2:	f383 8811 	msr	BASEPRI, r3
 80005a6:	f3bf 8f6f 	isb	sy
 80005aa:	f3bf 8f4f 	dsb	sy
 80005ae:	613b      	str	r3, [r7, #16]
    }
 80005b0:	bf00      	nop
 80005b2:	bf00      	nop
 80005b4:	e7fd      	b.n	80005b2 <main+0xb2>

  status = xTaskCreate(led_task_handler, "led_task", 200, NULL,2, &led_task_handle);
 80005b6:	4b3f      	ldr	r3, [pc, #252]	@ (80006b4 <main+0x1b4>)
 80005b8:	9301      	str	r3, [sp, #4]
 80005ba:	2302      	movs	r3, #2
 80005bc:	9300      	str	r3, [sp, #0]
 80005be:	2300      	movs	r3, #0
 80005c0:	22c8      	movs	r2, #200	@ 0xc8
 80005c2:	493d      	ldr	r1, [pc, #244]	@ (80006b8 <main+0x1b8>)
 80005c4:	483d      	ldr	r0, [pc, #244]	@ (80006bc <main+0x1bc>)
 80005c6:	f004 fb3b 	bl	8004c40 <xTaskCreate>
 80005ca:	61f8      	str	r0, [r7, #28]
  configASSERT(status == pdPASS);
 80005cc:	69fb      	ldr	r3, [r7, #28]
 80005ce:	2b01      	cmp	r3, #1
 80005d0:	d00b      	beq.n	80005ea <main+0xea>
        __asm volatile
 80005d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80005d6:	f383 8811 	msr	BASEPRI, r3
 80005da:	f3bf 8f6f 	isb	sy
 80005de:	f3bf 8f4f 	dsb	sy
 80005e2:	60fb      	str	r3, [r7, #12]
    }
 80005e4:	bf00      	nop
 80005e6:	bf00      	nop
 80005e8:	e7fd      	b.n	80005e6 <main+0xe6>

  status = xTaskCreate(rtc_task_handler, "rtc_task", 200, NULL,2, &rtc_task_handle);
 80005ea:	4b35      	ldr	r3, [pc, #212]	@ (80006c0 <main+0x1c0>)
 80005ec:	9301      	str	r3, [sp, #4]
 80005ee:	2302      	movs	r3, #2
 80005f0:	9300      	str	r3, [sp, #0]
 80005f2:	2300      	movs	r3, #0
 80005f4:	22c8      	movs	r2, #200	@ 0xc8
 80005f6:	4933      	ldr	r1, [pc, #204]	@ (80006c4 <main+0x1c4>)
 80005f8:	4833      	ldr	r0, [pc, #204]	@ (80006c8 <main+0x1c8>)
 80005fa:	f004 fb21 	bl	8004c40 <xTaskCreate>
 80005fe:	61f8      	str	r0, [r7, #28]
  configASSERT(status == pdPASS);
 8000600:	69fb      	ldr	r3, [r7, #28]
 8000602:	2b01      	cmp	r3, #1
 8000604:	d00b      	beq.n	800061e <main+0x11e>
        __asm volatile
 8000606:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800060a:	f383 8811 	msr	BASEPRI, r3
 800060e:	f3bf 8f6f 	isb	sy
 8000612:	f3bf 8f4f 	dsb	sy
 8000616:	60bb      	str	r3, [r7, #8]
    }
 8000618:	bf00      	nop
 800061a:	bf00      	nop
 800061c:	e7fd      	b.n	800061a <main+0x11a>


  //  Queue Creation

  q_data =xQueueCreate(10, sizeof(char));
 800061e:	2200      	movs	r2, #0
 8000620:	2101      	movs	r1, #1
 8000622:	200a      	movs	r0, #10
 8000624:	f003 fd8c 	bl	8004140 <xQueueGenericCreate>
 8000628:	4603      	mov	r3, r0
 800062a:	4a28      	ldr	r2, [pc, #160]	@ (80006cc <main+0x1cc>)
 800062c:	6013      	str	r3, [r2, #0]
  configASSERT(q_data != NULL);	//Check if queue was created
 800062e:	4b27      	ldr	r3, [pc, #156]	@ (80006cc <main+0x1cc>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	2b00      	cmp	r3, #0
 8000634:	d10b      	bne.n	800064e <main+0x14e>
        __asm volatile
 8000636:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800063a:	f383 8811 	msr	BASEPRI, r3
 800063e:	f3bf 8f6f 	isb	sy
 8000642:	f3bf 8f4f 	dsb	sy
 8000646:	607b      	str	r3, [r7, #4]
    }
 8000648:	bf00      	nop
 800064a:	bf00      	nop
 800064c:	e7fd      	b.n	800064a <main+0x14a>

  q_print = xQueueCreate(10, sizeof(size_t));
 800064e:	2200      	movs	r2, #0
 8000650:	2104      	movs	r1, #4
 8000652:	200a      	movs	r0, #10
 8000654:	f003 fd74 	bl	8004140 <xQueueGenericCreate>
 8000658:	4603      	mov	r3, r0
 800065a:	4a1d      	ldr	r2, [pc, #116]	@ (80006d0 <main+0x1d0>)
 800065c:	6013      	str	r3, [r2, #0]
  configASSERT(q_print != NULL);
 800065e:	4b1c      	ldr	r3, [pc, #112]	@ (80006d0 <main+0x1d0>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d10b      	bne.n	800067e <main+0x17e>
        __asm volatile
 8000666:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800066a:	f383 8811 	msr	BASEPRI, r3
 800066e:	f3bf 8f6f 	isb	sy
 8000672:	f3bf 8f4f 	dsb	sy
 8000676:	603b      	str	r3, [r7, #0]
    }
 8000678:	bf00      	nop
 800067a:	bf00      	nop
 800067c:	e7fd      	b.n	800067a <main+0x17a>


  // Enable uart receive interrupt
  HAL_UART_Receive_IT(&huart2, &user_data, 1);
 800067e:	2201      	movs	r2, #1
 8000680:	4914      	ldr	r1, [pc, #80]	@ (80006d4 <main+0x1d4>)
 8000682:	4815      	ldr	r0, [pc, #84]	@ (80006d8 <main+0x1d8>)
 8000684:	f002 fd16 	bl	80030b4 <HAL_UART_Receive_IT>

  // start FreeRTOS scheduler
  vTaskStartScheduler();
 8000688:	f004 fcc8 	bl	800501c <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800068c:	bf00      	nop
 800068e:	e7fd      	b.n	800068c <main+0x18c>
 8000690:	20000098 	.word	0x20000098
 8000694:	0800718c 	.word	0x0800718c
 8000698:	08000cc1 	.word	0x08000cc1
 800069c:	2000009c 	.word	0x2000009c
 80006a0:	08007198 	.word	0x08007198
 80006a4:	08000db1 	.word	0x08000db1
 80006a8:	200000a0 	.word	0x200000a0
 80006ac:	080071a4 	.word	0x080071a4
 80006b0:	08000ed5 	.word	0x08000ed5
 80006b4:	200000a4 	.word	0x200000a4
 80006b8:	080071b0 	.word	0x080071b0
 80006bc:	08000ee1 	.word	0x08000ee1
 80006c0:	200000a8 	.word	0x200000a8
 80006c4:	080071bc 	.word	0x080071bc
 80006c8:	08000f01 	.word	0x08000f01
 80006cc:	200000ac 	.word	0x200000ac
 80006d0:	200000b0 	.word	0x200000b0
 80006d4:	200000b5 	.word	0x200000b5
 80006d8:	20000050 	.word	0x20000050

080006dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b094      	sub	sp, #80	@ 0x50
 80006e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006e2:	f107 031c 	add.w	r3, r7, #28
 80006e6:	2234      	movs	r2, #52	@ 0x34
 80006e8:	2100      	movs	r1, #0
 80006ea:	4618      	mov	r0, r3
 80006ec:	f006 fd08 	bl	8007100 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f0:	f107 0308 	add.w	r3, r7, #8
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	605a      	str	r2, [r3, #4]
 80006fa:	609a      	str	r2, [r3, #8]
 80006fc:	60da      	str	r2, [r3, #12]
 80006fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000700:	2300      	movs	r3, #0
 8000702:	607b      	str	r3, [r7, #4]
 8000704:	4b2c      	ldr	r3, [pc, #176]	@ (80007b8 <SystemClock_Config+0xdc>)
 8000706:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000708:	4a2b      	ldr	r2, [pc, #172]	@ (80007b8 <SystemClock_Config+0xdc>)
 800070a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800070e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000710:	4b29      	ldr	r3, [pc, #164]	@ (80007b8 <SystemClock_Config+0xdc>)
 8000712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000714:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000718:	607b      	str	r3, [r7, #4]
 800071a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800071c:	2300      	movs	r3, #0
 800071e:	603b      	str	r3, [r7, #0]
 8000720:	4b26      	ldr	r3, [pc, #152]	@ (80007bc <SystemClock_Config+0xe0>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000728:	4a24      	ldr	r2, [pc, #144]	@ (80007bc <SystemClock_Config+0xe0>)
 800072a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800072e:	6013      	str	r3, [r2, #0]
 8000730:	4b22      	ldr	r3, [pc, #136]	@ (80007bc <SystemClock_Config+0xe0>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000738:	603b      	str	r3, [r7, #0]
 800073a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800073c:	230a      	movs	r3, #10
 800073e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 8000740:	2300      	movs	r3, #0
 8000742:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000744:	2301      	movs	r3, #1
 8000746:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000748:	2310      	movs	r3, #16
 800074a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800074c:	2301      	movs	r3, #1
 800074e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000750:	2302      	movs	r3, #2
 8000752:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000754:	2300      	movs	r3, #0
 8000756:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000758:	2310      	movs	r3, #16
 800075a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800075c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000760:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000762:	2304      	movs	r3, #4
 8000764:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000766:	2302      	movs	r3, #2
 8000768:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800076a:	2302      	movs	r3, #2
 800076c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800076e:	f107 031c 	add.w	r3, r7, #28
 8000772:	4618      	mov	r0, r3
 8000774:	f001 fe08 	bl	8002388 <HAL_RCC_OscConfig>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800077e:	f000 f939 	bl	80009f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000782:	230f      	movs	r3, #15
 8000784:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000786:	2302      	movs	r3, #2
 8000788:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800078a:	2300      	movs	r3, #0
 800078c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800078e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000792:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000794:	2300      	movs	r3, #0
 8000796:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000798:	f107 0308 	add.w	r3, r7, #8
 800079c:	2102      	movs	r1, #2
 800079e:	4618      	mov	r0, r3
 80007a0:	f000 ff4c 	bl	800163c <HAL_RCC_ClockConfig>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80007aa:	f000 f923 	bl	80009f4 <Error_Handler>
  }
}
 80007ae:	bf00      	nop
 80007b0:	3750      	adds	r7, #80	@ 0x50
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	40023800 	.word	0x40023800
 80007bc:	40007000 	.word	0x40007000

080007c0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80007c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000804 <MX_RTC_Init+0x44>)
 80007c6:	4a10      	ldr	r2, [pc, #64]	@ (8000808 <MX_RTC_Init+0x48>)
 80007c8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 80007ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000804 <MX_RTC_Init+0x44>)
 80007cc:	2240      	movs	r2, #64	@ 0x40
 80007ce:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80007d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000804 <MX_RTC_Init+0x44>)
 80007d2:	227f      	movs	r2, #127	@ 0x7f
 80007d4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80007d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000804 <MX_RTC_Init+0x44>)
 80007d8:	22ff      	movs	r2, #255	@ 0xff
 80007da:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80007dc:	4b09      	ldr	r3, [pc, #36]	@ (8000804 <MX_RTC_Init+0x44>)
 80007de:	2200      	movs	r2, #0
 80007e0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80007e2:	4b08      	ldr	r3, [pc, #32]	@ (8000804 <MX_RTC_Init+0x44>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80007e8:	4b06      	ldr	r3, [pc, #24]	@ (8000804 <MX_RTC_Init+0x44>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80007ee:	4805      	ldr	r0, [pc, #20]	@ (8000804 <MX_RTC_Init+0x44>)
 80007f0:	f002 f868 	bl	80028c4 <HAL_RTC_Init>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80007fa:	f000 f8fb 	bl	80009f4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80007fe:	bf00      	nop
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	20000030 	.word	0x20000030
 8000808:	40002800 	.word	0x40002800

0800080c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000810:	4b11      	ldr	r3, [pc, #68]	@ (8000858 <MX_USART2_UART_Init+0x4c>)
 8000812:	4a12      	ldr	r2, [pc, #72]	@ (800085c <MX_USART2_UART_Init+0x50>)
 8000814:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000816:	4b10      	ldr	r3, [pc, #64]	@ (8000858 <MX_USART2_UART_Init+0x4c>)
 8000818:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800081c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800081e:	4b0e      	ldr	r3, [pc, #56]	@ (8000858 <MX_USART2_UART_Init+0x4c>)
 8000820:	2200      	movs	r2, #0
 8000822:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000824:	4b0c      	ldr	r3, [pc, #48]	@ (8000858 <MX_USART2_UART_Init+0x4c>)
 8000826:	2200      	movs	r2, #0
 8000828:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800082a:	4b0b      	ldr	r3, [pc, #44]	@ (8000858 <MX_USART2_UART_Init+0x4c>)
 800082c:	2200      	movs	r2, #0
 800082e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000830:	4b09      	ldr	r3, [pc, #36]	@ (8000858 <MX_USART2_UART_Init+0x4c>)
 8000832:	220c      	movs	r2, #12
 8000834:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000836:	4b08      	ldr	r3, [pc, #32]	@ (8000858 <MX_USART2_UART_Init+0x4c>)
 8000838:	2200      	movs	r2, #0
 800083a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800083c:	4b06      	ldr	r3, [pc, #24]	@ (8000858 <MX_USART2_UART_Init+0x4c>)
 800083e:	2200      	movs	r2, #0
 8000840:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000842:	4805      	ldr	r0, [pc, #20]	@ (8000858 <MX_USART2_UART_Init+0x4c>)
 8000844:	f002 fbe6 	bl	8003014 <HAL_UART_Init>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800084e:	f000 f8d1 	bl	80009f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000852:	bf00      	nop
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	20000050 	.word	0x20000050
 800085c:	40004400 	.word	0x40004400

08000860 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b08a      	sub	sp, #40	@ 0x28
 8000864:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000866:	f107 0314 	add.w	r3, r7, #20
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	605a      	str	r2, [r3, #4]
 8000870:	609a      	str	r2, [r3, #8]
 8000872:	60da      	str	r2, [r3, #12]
 8000874:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	613b      	str	r3, [r7, #16]
 800087a:	4b2d      	ldr	r3, [pc, #180]	@ (8000930 <MX_GPIO_Init+0xd0>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087e:	4a2c      	ldr	r2, [pc, #176]	@ (8000930 <MX_GPIO_Init+0xd0>)
 8000880:	f043 0304 	orr.w	r3, r3, #4
 8000884:	6313      	str	r3, [r2, #48]	@ 0x30
 8000886:	4b2a      	ldr	r3, [pc, #168]	@ (8000930 <MX_GPIO_Init+0xd0>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088a:	f003 0304 	and.w	r3, r3, #4
 800088e:	613b      	str	r3, [r7, #16]
 8000890:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	60fb      	str	r3, [r7, #12]
 8000896:	4b26      	ldr	r3, [pc, #152]	@ (8000930 <MX_GPIO_Init+0xd0>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089a:	4a25      	ldr	r2, [pc, #148]	@ (8000930 <MX_GPIO_Init+0xd0>)
 800089c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008a2:	4b23      	ldr	r3, [pc, #140]	@ (8000930 <MX_GPIO_Init+0xd0>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008aa:	60fb      	str	r3, [r7, #12]
 80008ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	60bb      	str	r3, [r7, #8]
 80008b2:	4b1f      	ldr	r3, [pc, #124]	@ (8000930 <MX_GPIO_Init+0xd0>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b6:	4a1e      	ldr	r2, [pc, #120]	@ (8000930 <MX_GPIO_Init+0xd0>)
 80008b8:	f043 0301 	orr.w	r3, r3, #1
 80008bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008be:	4b1c      	ldr	r3, [pc, #112]	@ (8000930 <MX_GPIO_Init+0xd0>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c2:	f003 0301 	and.w	r3, r3, #1
 80008c6:	60bb      	str	r3, [r7, #8]
 80008c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	607b      	str	r3, [r7, #4]
 80008ce:	4b18      	ldr	r3, [pc, #96]	@ (8000930 <MX_GPIO_Init+0xd0>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d2:	4a17      	ldr	r2, [pc, #92]	@ (8000930 <MX_GPIO_Init+0xd0>)
 80008d4:	f043 0302 	orr.w	r3, r3, #2
 80008d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008da:	4b15      	ldr	r3, [pc, #84]	@ (8000930 <MX_GPIO_Init+0xd0>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008de:	f003 0302 	and.w	r3, r3, #2
 80008e2:	607b      	str	r3, [r7, #4]
 80008e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008e6:	2200      	movs	r2, #0
 80008e8:	2120      	movs	r1, #32
 80008ea:	4812      	ldr	r0, [pc, #72]	@ (8000934 <MX_GPIO_Init+0xd4>)
 80008ec:	f000 fe8c 	bl	8001608 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008f0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008f6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80008fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fc:	2300      	movs	r3, #0
 80008fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000900:	f107 0314 	add.w	r3, r7, #20
 8000904:	4619      	mov	r1, r3
 8000906:	480c      	ldr	r0, [pc, #48]	@ (8000938 <MX_GPIO_Init+0xd8>)
 8000908:	f000 fcea 	bl	80012e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800090c:	2320      	movs	r3, #32
 800090e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000910:	2301      	movs	r3, #1
 8000912:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000914:	2300      	movs	r3, #0
 8000916:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000918:	2300      	movs	r3, #0
 800091a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800091c:	f107 0314 	add.w	r3, r7, #20
 8000920:	4619      	mov	r1, r3
 8000922:	4804      	ldr	r0, [pc, #16]	@ (8000934 <MX_GPIO_Init+0xd4>)
 8000924:	f000 fcdc 	bl	80012e0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000928:	bf00      	nop
 800092a:	3728      	adds	r7, #40	@ 0x28
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	40023800 	.word	0x40023800
 8000934:	40020000 	.word	0x40020000
 8000938:	40020800 	.word	0x40020800

0800093c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b086      	sub	sp, #24
 8000940:	af02      	add	r7, sp, #8
 8000942:	6078      	str	r0, [r7, #4]
	uint8_t dummy;
	if(!xQueueIsQueueFullFromISR(q_data))
 8000944:	4b1e      	ldr	r3, [pc, #120]	@ (80009c0 <HAL_UART_RxCpltCallback+0x84>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4618      	mov	r0, r3
 800094a:	f004 f8ce 	bl	8004aea <xQueueIsQueueFullFromISR>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d107      	bne.n	8000964 <HAL_UART_RxCpltCallback+0x28>
	{
		/*Queue is not full */

		/*TODO: Enqueue data byte */
		xQueueSendToBackFromISR( q_data, (void*)&user_data, NULL);
 8000954:	4b1a      	ldr	r3, [pc, #104]	@ (80009c0 <HAL_UART_RxCpltCallback+0x84>)
 8000956:	6818      	ldr	r0, [r3, #0]
 8000958:	2300      	movs	r3, #0
 800095a:	2200      	movs	r2, #0
 800095c:	4919      	ldr	r1, [pc, #100]	@ (80009c4 <HAL_UART_RxCpltCallback+0x88>)
 800095e:	f003 fd63 	bl	8004428 <xQueueGenericSendFromISR>
 8000962:	e013      	b.n	800098c <HAL_UART_RxCpltCallback+0x50>

	}else{
		/*Queue is full */
		//check, is user_data '\n'? */
		if(user_data == '\n' )
 8000964:	4b17      	ldr	r3, [pc, #92]	@ (80009c4 <HAL_UART_RxCpltCallback+0x88>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	b2db      	uxtb	r3, r3
 800096a:	2b0a      	cmp	r3, #10
 800096c:	d10e      	bne.n	800098c <HAL_UART_RxCpltCallback+0x50>
		{
			/*user_data = '\n' */

			/*TODO: make sure that last data byte of the queue is '\n' */
			xQueueReceiveFromISR(q_data,(void*)&dummy,NULL);	// Delete the last element on the queue to make space for \n
 800096e:	4b14      	ldr	r3, [pc, #80]	@ (80009c0 <HAL_UART_RxCpltCallback+0x84>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	f107 010f 	add.w	r1, r7, #15
 8000976:	2200      	movs	r2, #0
 8000978:	4618      	mov	r0, r3
 800097a:	f003 feed 	bl	8004758 <xQueueReceiveFromISR>
			xQueueSendFromISR(q_data,(void*)&user_data,NULL);
 800097e:	4b10      	ldr	r3, [pc, #64]	@ (80009c0 <HAL_UART_RxCpltCallback+0x84>)
 8000980:	6818      	ldr	r0, [r3, #0]
 8000982:	2300      	movs	r3, #0
 8000984:	2200      	movs	r2, #0
 8000986:	490f      	ldr	r1, [pc, #60]	@ (80009c4 <HAL_UART_RxCpltCallback+0x88>)
 8000988:	f003 fd4e 	bl	8004428 <xQueueGenericSendFromISR>
		}
	}



	if(user_data == '\n'){
 800098c:	4b0d      	ldr	r3, [pc, #52]	@ (80009c4 <HAL_UART_RxCpltCallback+0x88>)
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	b2db      	uxtb	r3, r3
 8000992:	2b0a      	cmp	r3, #10
 8000994:	d10a      	bne.n	80009ac <HAL_UART_RxCpltCallback+0x70>
		/*send notification to command handling task if user_data = '\n' */
		xTaskNotifyFromISR(cmd_task_handle, 0, eNoAction, NULL);
 8000996:	4b0c      	ldr	r3, [pc, #48]	@ (80009c8 <HAL_UART_RxCpltCallback+0x8c>)
 8000998:	6818      	ldr	r0, [r3, #0]
 800099a:	2300      	movs	r3, #0
 800099c:	9301      	str	r3, [sp, #4]
 800099e:	2300      	movs	r3, #0
 80009a0:	9300      	str	r3, [sp, #0]
 80009a2:	2300      	movs	r3, #0
 80009a4:	2200      	movs	r2, #0
 80009a6:	2100      	movs	r1, #0
 80009a8:	f005 fb0e 	bl	8005fc8 <xTaskGenericNotifyFromISR>

	}

	/* Enable UART data byte reception again in IT mode */
	 HAL_UART_Receive_IT(&huart2, (uint8_t*)&user_data, 1);
 80009ac:	2201      	movs	r2, #1
 80009ae:	4905      	ldr	r1, [pc, #20]	@ (80009c4 <HAL_UART_RxCpltCallback+0x88>)
 80009b0:	4806      	ldr	r0, [pc, #24]	@ (80009cc <HAL_UART_RxCpltCallback+0x90>)
 80009b2:	f002 fb7f 	bl	80030b4 <HAL_UART_Receive_IT>
}
 80009b6:	bf00      	nop
 80009b8:	3710      	adds	r7, #16
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	200000ac 	.word	0x200000ac
 80009c4:	200000b5 	.word	0x200000b5
 80009c8:	2000009c 	.word	0x2000009c
 80009cc:	20000050 	.word	0x20000050

080009d0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a04      	ldr	r2, [pc, #16]	@ (80009f0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d101      	bne.n	80009e6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009e2:	f000 fae9 	bl	8000fb8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009e6:	bf00      	nop
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40001000 	.word	0x40001000

080009f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009f8:	b672      	cpsid	i
}
 80009fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009fc:	bf00      	nop
 80009fe:	e7fd      	b.n	80009fc <Error_Handler+0x8>

08000a00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	607b      	str	r3, [r7, #4]
 8000a0a:	4b10      	ldr	r3, [pc, #64]	@ (8000a4c <HAL_MspInit+0x4c>)
 8000a0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a0e:	4a0f      	ldr	r2, [pc, #60]	@ (8000a4c <HAL_MspInit+0x4c>)
 8000a10:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a14:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a16:	4b0d      	ldr	r3, [pc, #52]	@ (8000a4c <HAL_MspInit+0x4c>)
 8000a18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a1e:	607b      	str	r3, [r7, #4]
 8000a20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	603b      	str	r3, [r7, #0]
 8000a26:	4b09      	ldr	r3, [pc, #36]	@ (8000a4c <HAL_MspInit+0x4c>)
 8000a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a2a:	4a08      	ldr	r2, [pc, #32]	@ (8000a4c <HAL_MspInit+0x4c>)
 8000a2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a30:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a32:	4b06      	ldr	r3, [pc, #24]	@ (8000a4c <HAL_MspInit+0x4c>)
 8000a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a3a:	603b      	str	r3, [r7, #0]
 8000a3c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a3e:	bf00      	nop
 8000a40:	370c      	adds	r7, #12
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	40023800 	.word	0x40023800

08000a50 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b09a      	sub	sp, #104	@ 0x68
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a58:	f107 030c 	add.w	r3, r7, #12
 8000a5c:	225c      	movs	r2, #92	@ 0x5c
 8000a5e:	2100      	movs	r1, #0
 8000a60:	4618      	mov	r0, r3
 8000a62:	f006 fb4d 	bl	8007100 <memset>
  if(hrtc->Instance==RTC)
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	4a0c      	ldr	r2, [pc, #48]	@ (8000a9c <HAL_RTC_MspInit+0x4c>)
 8000a6c:	4293      	cmp	r3, r2
 8000a6e:	d111      	bne.n	8000a94 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000a70:	2320      	movs	r3, #32
 8000a72:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000a74:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a78:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a7a:	f107 030c 	add.w	r3, r7, #12
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f000 ff28 	bl	80018d4 <HAL_RCCEx_PeriphCLKConfig>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8000a8a:	f7ff ffb3 	bl	80009f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000a8e:	4b04      	ldr	r3, [pc, #16]	@ (8000aa0 <HAL_RTC_MspInit+0x50>)
 8000a90:	2201      	movs	r2, #1
 8000a92:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8000a94:	bf00      	nop
 8000a96:	3768      	adds	r7, #104	@ 0x68
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	40002800 	.word	0x40002800
 8000aa0:	42470e3c 	.word	0x42470e3c

08000aa4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b08a      	sub	sp, #40	@ 0x28
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aac:	f107 0314 	add.w	r3, r7, #20
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	601a      	str	r2, [r3, #0]
 8000ab4:	605a      	str	r2, [r3, #4]
 8000ab6:	609a      	str	r2, [r3, #8]
 8000ab8:	60da      	str	r2, [r3, #12]
 8000aba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a1d      	ldr	r2, [pc, #116]	@ (8000b38 <HAL_UART_MspInit+0x94>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d133      	bne.n	8000b2e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	613b      	str	r3, [r7, #16]
 8000aca:	4b1c      	ldr	r3, [pc, #112]	@ (8000b3c <HAL_UART_MspInit+0x98>)
 8000acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ace:	4a1b      	ldr	r2, [pc, #108]	@ (8000b3c <HAL_UART_MspInit+0x98>)
 8000ad0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ad4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ad6:	4b19      	ldr	r3, [pc, #100]	@ (8000b3c <HAL_UART_MspInit+0x98>)
 8000ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ada:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ade:	613b      	str	r3, [r7, #16]
 8000ae0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	60fb      	str	r3, [r7, #12]
 8000ae6:	4b15      	ldr	r3, [pc, #84]	@ (8000b3c <HAL_UART_MspInit+0x98>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aea:	4a14      	ldr	r2, [pc, #80]	@ (8000b3c <HAL_UART_MspInit+0x98>)
 8000aec:	f043 0301 	orr.w	r3, r3, #1
 8000af0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000af2:	4b12      	ldr	r3, [pc, #72]	@ (8000b3c <HAL_UART_MspInit+0x98>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af6:	f003 0301 	and.w	r3, r3, #1
 8000afa:	60fb      	str	r3, [r7, #12]
 8000afc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000afe:	230c      	movs	r3, #12
 8000b00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b02:	2302      	movs	r3, #2
 8000b04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b06:	2300      	movs	r3, #0
 8000b08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b0a:	2303      	movs	r3, #3
 8000b0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b0e:	2307      	movs	r3, #7
 8000b10:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b12:	f107 0314 	add.w	r3, r7, #20
 8000b16:	4619      	mov	r1, r3
 8000b18:	4809      	ldr	r0, [pc, #36]	@ (8000b40 <HAL_UART_MspInit+0x9c>)
 8000b1a:	f000 fbe1 	bl	80012e0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 8000b1e:	2200      	movs	r2, #0
 8000b20:	2106      	movs	r1, #6
 8000b22:	2026      	movs	r0, #38	@ 0x26
 8000b24:	f000 fb20 	bl	8001168 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b28:	2026      	movs	r0, #38	@ 0x26
 8000b2a:	f000 fb39 	bl	80011a0 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000b2e:	bf00      	nop
 8000b30:	3728      	adds	r7, #40	@ 0x28
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	40004400 	.word	0x40004400
 8000b3c:	40023800 	.word	0x40023800
 8000b40:	40020000 	.word	0x40020000

08000b44 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b08e      	sub	sp, #56	@ 0x38
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000b50:	2300      	movs	r3, #0
 8000b52:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b54:	2300      	movs	r3, #0
 8000b56:	60fb      	str	r3, [r7, #12]
 8000b58:	4b33      	ldr	r3, [pc, #204]	@ (8000c28 <HAL_InitTick+0xe4>)
 8000b5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b5c:	4a32      	ldr	r2, [pc, #200]	@ (8000c28 <HAL_InitTick+0xe4>)
 8000b5e:	f043 0310 	orr.w	r3, r3, #16
 8000b62:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b64:	4b30      	ldr	r3, [pc, #192]	@ (8000c28 <HAL_InitTick+0xe4>)
 8000b66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b68:	f003 0310 	and.w	r3, r3, #16
 8000b6c:	60fb      	str	r3, [r7, #12]
 8000b6e:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b70:	f107 0210 	add.w	r2, r7, #16
 8000b74:	f107 0314 	add.w	r3, r7, #20
 8000b78:	4611      	mov	r1, r2
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f000 fe78 	bl	8001870 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b80:	6a3b      	ldr	r3, [r7, #32]
 8000b82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d103      	bne.n	8000b92 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b8a:	f000 fe49 	bl	8001820 <HAL_RCC_GetPCLK1Freq>
 8000b8e:	6378      	str	r0, [r7, #52]	@ 0x34
 8000b90:	e004      	b.n	8000b9c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000b92:	f000 fe45 	bl	8001820 <HAL_RCC_GetPCLK1Freq>
 8000b96:	4603      	mov	r3, r0
 8000b98:	005b      	lsls	r3, r3, #1
 8000b9a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b9e:	4a23      	ldr	r2, [pc, #140]	@ (8000c2c <HAL_InitTick+0xe8>)
 8000ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8000ba4:	0c9b      	lsrs	r3, r3, #18
 8000ba6:	3b01      	subs	r3, #1
 8000ba8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000baa:	4b21      	ldr	r3, [pc, #132]	@ (8000c30 <HAL_InitTick+0xec>)
 8000bac:	4a21      	ldr	r2, [pc, #132]	@ (8000c34 <HAL_InitTick+0xf0>)
 8000bae:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000bb0:	4b1f      	ldr	r3, [pc, #124]	@ (8000c30 <HAL_InitTick+0xec>)
 8000bb2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000bb6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000bb8:	4a1d      	ldr	r2, [pc, #116]	@ (8000c30 <HAL_InitTick+0xec>)
 8000bba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000bbc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000bbe:	4b1c      	ldr	r3, [pc, #112]	@ (8000c30 <HAL_InitTick+0xec>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bc4:	4b1a      	ldr	r3, [pc, #104]	@ (8000c30 <HAL_InitTick+0xec>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bca:	4b19      	ldr	r3, [pc, #100]	@ (8000c30 <HAL_InitTick+0xec>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000bd0:	4817      	ldr	r0, [pc, #92]	@ (8000c30 <HAL_InitTick+0xec>)
 8000bd2:	f001 ff7d 	bl	8002ad0 <HAL_TIM_Base_Init>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000bdc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d11b      	bne.n	8000c1c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000be4:	4812      	ldr	r0, [pc, #72]	@ (8000c30 <HAL_InitTick+0xec>)
 8000be6:	f001 ffcd 	bl	8002b84 <HAL_TIM_Base_Start_IT>
 8000bea:	4603      	mov	r3, r0
 8000bec:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000bf0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d111      	bne.n	8000c1c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000bf8:	2036      	movs	r0, #54	@ 0x36
 8000bfa:	f000 fad1 	bl	80011a0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	2b0f      	cmp	r3, #15
 8000c02:	d808      	bhi.n	8000c16 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000c04:	2200      	movs	r2, #0
 8000c06:	6879      	ldr	r1, [r7, #4]
 8000c08:	2036      	movs	r0, #54	@ 0x36
 8000c0a:	f000 faad 	bl	8001168 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c0e:	4a0a      	ldr	r2, [pc, #40]	@ (8000c38 <HAL_InitTick+0xf4>)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	6013      	str	r3, [r2, #0]
 8000c14:	e002      	b.n	8000c1c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000c16:	2301      	movs	r3, #1
 8000c18:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000c1c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	3738      	adds	r7, #56	@ 0x38
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	40023800 	.word	0x40023800
 8000c2c:	431bde83 	.word	0x431bde83
 8000c30:	200000b8 	.word	0x200000b8
 8000c34:	40001000 	.word	0x40001000
 8000c38:	20000004 	.word	0x20000004

08000c3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c40:	bf00      	nop
 8000c42:	e7fd      	b.n	8000c40 <NMI_Handler+0x4>

08000c44 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c48:	bf00      	nop
 8000c4a:	e7fd      	b.n	8000c48 <HardFault_Handler+0x4>

08000c4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c50:	bf00      	nop
 8000c52:	e7fd      	b.n	8000c50 <MemManage_Handler+0x4>

08000c54 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c58:	bf00      	nop
 8000c5a:	e7fd      	b.n	8000c58 <BusFault_Handler+0x4>

08000c5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c60:	bf00      	nop
 8000c62:	e7fd      	b.n	8000c60 <UsageFault_Handler+0x4>

08000c64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c68:	bf00      	nop
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
	...

08000c74 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c78:	4802      	ldr	r0, [pc, #8]	@ (8000c84 <USART2_IRQHandler+0x10>)
 8000c7a:	f002 fa41 	bl	8003100 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	20000050 	.word	0x20000050

08000c88 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c8c:	4802      	ldr	r0, [pc, #8]	@ (8000c98 <TIM6_DAC_IRQHandler+0x10>)
 8000c8e:	f001 ffe9 	bl	8002c64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c92:	bf00      	nop
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	200000b8 	.word	0x200000b8

08000c9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ca0:	4b06      	ldr	r3, [pc, #24]	@ (8000cbc <SystemInit+0x20>)
 8000ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ca6:	4a05      	ldr	r2, [pc, #20]	@ (8000cbc <SystemInit+0x20>)
 8000ca8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cb0:	bf00      	nop
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	e000ed00 	.word	0xe000ed00

08000cc0 <menu_task_handler>:





void menu_task_handler(void* parameters){
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b08a      	sub	sp, #40	@ 0x28
 8000cc4:	af02      	add	r7, sp, #8
 8000cc6:	6078      	str	r0, [r7, #4]
	uint32_t cmd_addr;
	command_t *cmd;

	int option;

	const char* menu_msg =
 8000cc8:	4b33      	ldr	r3, [pc, #204]	@ (8000d98 <menu_task_handler+0xd8>)
 8000cca:	613b      	str	r3, [r7, #16]
			"**********************************\n"
			"LED EFFECT                  ---> 0\n"
			"Date & Time                 ---> 1\n"
			"EXIT                        ---> 2\n"
			"Enter your choice here: ";
	const char* inv_msg = "Invalid Message \n";
 8000ccc:	4b33      	ldr	r3, [pc, #204]	@ (8000d9c <menu_task_handler+0xdc>)
 8000cce:	60fb      	str	r3, [r7, #12]



	while(1){

		xQueueSend(q_print, &menu_msg, portMAX_DELAY);
 8000cd0:	4b33      	ldr	r3, [pc, #204]	@ (8000da0 <menu_task_handler+0xe0>)
 8000cd2:	6818      	ldr	r0, [r3, #0]
 8000cd4:	f107 0110 	add.w	r1, r7, #16
 8000cd8:	2300      	movs	r3, #0
 8000cda:	f04f 32ff 	mov.w	r2, #4294967295
 8000cde:	f003 faa1 	bl	8004224 <xQueueGenericSend>
		// wait for menu commands
		xTaskNotifyWait(0, 0, &cmd_addr, portMAX_DELAY );
 8000ce2:	f107 0314 	add.w	r3, r7, #20
 8000ce6:	f04f 32ff 	mov.w	r2, #4294967295
 8000cea:	9200      	str	r2, [sp, #0]
 8000cec:	2200      	movs	r2, #0
 8000cee:	2100      	movs	r1, #0
 8000cf0:	2000      	movs	r0, #0
 8000cf2:	f004 ffc3 	bl	8005c7c <xTaskGenericNotifyWait>
		cmd = (command_t*)cmd_addr;
 8000cf6:	697b      	ldr	r3, [r7, #20]
 8000cf8:	61fb      	str	r3, [r7, #28]

		if(cmd->len == 1){
 8000cfa:	69fb      	ldr	r3, [r7, #28]
 8000cfc:	7a9b      	ldrb	r3, [r3, #10]
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d134      	bne.n	8000d6c <menu_task_handler+0xac>
			// Valid command
			option = cmd->payload[0] - 48;	// ASCII to int conversion
 8000d02:	69fb      	ldr	r3, [r7, #28]
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	3b30      	subs	r3, #48	@ 0x30
 8000d08:	61bb      	str	r3, [r7, #24]
			switch(option){
 8000d0a:	69bb      	ldr	r3, [r7, #24]
 8000d0c:	2b02      	cmp	r3, #2
 8000d0e:	d037      	beq.n	8000d80 <menu_task_handler+0xc0>
 8000d10:	69bb      	ldr	r3, [r7, #24]
 8000d12:	2b02      	cmp	r3, #2
 8000d14:	dc20      	bgt.n	8000d58 <menu_task_handler+0x98>
 8000d16:	69bb      	ldr	r3, [r7, #24]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d003      	beq.n	8000d24 <menu_task_handler+0x64>
 8000d1c:	69bb      	ldr	r3, [r7, #24]
 8000d1e:	2b01      	cmp	r3, #1
 8000d20:	d00d      	beq.n	8000d3e <menu_task_handler+0x7e>
 8000d22:	e019      	b.n	8000d58 <menu_task_handler+0x98>
				case 0:
					curr_state = sLEDEffect;
 8000d24:	4b1f      	ldr	r3, [pc, #124]	@ (8000da4 <menu_task_handler+0xe4>)
 8000d26:	2201      	movs	r2, #1
 8000d28:	701a      	strb	r2, [r3, #0]
					xTaskNotify(led_task_handle,0,eNoAction);
 8000d2a:	4b1f      	ldr	r3, [pc, #124]	@ (8000da8 <menu_task_handler+0xe8>)
 8000d2c:	6818      	ldr	r0, [r3, #0]
 8000d2e:	2300      	movs	r3, #0
 8000d30:	9300      	str	r3, [sp, #0]
 8000d32:	2300      	movs	r3, #0
 8000d34:	2200      	movs	r2, #0
 8000d36:	2100      	movs	r1, #0
 8000d38:	f005 f820 	bl	8005d7c <xTaskGenericNotify>
					break;
 8000d3c:	e021      	b.n	8000d82 <menu_task_handler+0xc2>
				case 1:
					curr_state = sRTCMenu;
 8000d3e:	4b19      	ldr	r3, [pc, #100]	@ (8000da4 <menu_task_handler+0xe4>)
 8000d40:	2202      	movs	r2, #2
 8000d42:	701a      	strb	r2, [r3, #0]
					xTaskNotify(rtc_task_handle,0,eNoAction);
 8000d44:	4b19      	ldr	r3, [pc, #100]	@ (8000dac <menu_task_handler+0xec>)
 8000d46:	6818      	ldr	r0, [r3, #0]
 8000d48:	2300      	movs	r3, #0
 8000d4a:	9300      	str	r3, [sp, #0]
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	2200      	movs	r2, #0
 8000d50:	2100      	movs	r1, #0
 8000d52:	f005 f813 	bl	8005d7c <xTaskGenericNotify>
					break;
 8000d56:	e014      	b.n	8000d82 <menu_task_handler+0xc2>
				case 2:
					break;
				default:
					xQueueSend(q_print,&inv_msg,portMAX_DELAY);
 8000d58:	4b11      	ldr	r3, [pc, #68]	@ (8000da0 <menu_task_handler+0xe0>)
 8000d5a:	6818      	ldr	r0, [r3, #0]
 8000d5c:	f107 010c 	add.w	r1, r7, #12
 8000d60:	2300      	movs	r3, #0
 8000d62:	f04f 32ff 	mov.w	r2, #4294967295
 8000d66:	f003 fa5d 	bl	8004224 <xQueueGenericSend>
					continue;
 8000d6a:	e013      	b.n	8000d94 <menu_task_handler+0xd4>
			}
		}
		else{
			//invalid entry
			xQueueSend(q_print, &inv_msg, portMAX_DELAY);
 8000d6c:	4b0c      	ldr	r3, [pc, #48]	@ (8000da0 <menu_task_handler+0xe0>)
 8000d6e:	6818      	ldr	r0, [r3, #0]
 8000d70:	f107 010c 	add.w	r1, r7, #12
 8000d74:	2300      	movs	r3, #0
 8000d76:	f04f 32ff 	mov.w	r2, #4294967295
 8000d7a:	f003 fa53 	bl	8004224 <xQueueGenericSend>
 8000d7e:	e000      	b.n	8000d82 <menu_task_handler+0xc2>
					break;
 8000d80:	bf00      	nop
		}
		// Wait to run agian when som other task notifies
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY );
 8000d82:	f04f 33ff 	mov.w	r3, #4294967295
 8000d86:	9300      	str	r3, [sp, #0]
 8000d88:	2300      	movs	r3, #0
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	2000      	movs	r0, #0
 8000d90:	f004 ff74 	bl	8005c7c <xTaskGenericNotifyWait>
		xQueueSend(q_print, &menu_msg, portMAX_DELAY);
 8000d94:	e79c      	b.n	8000cd0 <menu_task_handler+0x10>
 8000d96:	bf00      	nop
 8000d98:	080071c8 	.word	0x080071c8
 8000d9c:	080072b4 	.word	0x080072b4
 8000da0:	200000b0 	.word	0x200000b0
 8000da4:	200000b4 	.word	0x200000b4
 8000da8:	200000a4 	.word	0x200000a4
 8000dac:	200000a8 	.word	0x200000a8

08000db0 <cmd_task_handler>:


//state_t curr_state = sMainMenu;


void cmd_task_handler(void* parameters){
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b088      	sub	sp, #32
 8000db4:	af02      	add	r7, sp, #8
 8000db6:	6078      	str	r0, [r7, #4]

	BaseType_t ret;
	command_t cmd;
		while(1){
			/* Notify Wait */
			ret = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8000db8:	f04f 33ff 	mov.w	r3, #4294967295
 8000dbc:	9300      	str	r3, [sp, #0]
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	2000      	movs	r0, #0
 8000dc6:	f004 ff59 	bl	8005c7c <xTaskGenericNotifyWait>
 8000dca:	6178      	str	r0, [r7, #20]

			if(ret == pdTRUE){
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	2b01      	cmp	r3, #1
 8000dd0:	d1f2      	bne.n	8000db8 <cmd_task_handler+0x8>
				/* process the user data (command) stored in input data queue */
				process_command(&cmd);
 8000dd2:	f107 0308 	add.w	r3, r7, #8
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f000 f83c 	bl	8000e54 <process_command>
			ret = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8000ddc:	e7ec      	b.n	8000db8 <cmd_task_handler+0x8>
	...

08000de0 <extract_command>:
	}
}



int extract_command(command_t *cmd){
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b086      	sub	sp, #24
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
	uint8_t item;
	BaseType_t status;

	/* Check if there are any messages waiting in the queue	 */
	status = uxQueueMessagesWaiting(q_data);
 8000de8:	4b19      	ldr	r3, [pc, #100]	@ (8000e50 <extract_command+0x70>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4618      	mov	r0, r3
 8000dee:	f003 fd4d 	bl	800488c <uxQueueMessagesWaiting>
 8000df2:	4603      	mov	r3, r0
 8000df4:	613b      	str	r3, [r7, #16]
	if(!status) return -1;	// Return since there are no messages in the queue
 8000df6:	693b      	ldr	r3, [r7, #16]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d102      	bne.n	8000e02 <extract_command+0x22>
 8000dfc:	f04f 33ff 	mov.w	r3, #4294967295
 8000e00:	e022      	b.n	8000e48 <extract_command+0x68>

	uint8_t i = 0;
 8000e02:	2300      	movs	r3, #0
 8000e04:	75fb      	strb	r3, [r7, #23]

	do{
		status = xQueueReceive(q_data, &item, 0);
 8000e06:	4b12      	ldr	r3, [pc, #72]	@ (8000e50 <extract_command+0x70>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f107 010f 	add.w	r1, r7, #15
 8000e0e:	2200      	movs	r2, #0
 8000e10:	4618      	mov	r0, r3
 8000e12:	f003 fbbf 	bl	8004594 <xQueueReceive>
 8000e16:	6138      	str	r0, [r7, #16]
		if(status == pdTRUE) cmd->payload[i++] = item;
 8000e18:	693b      	ldr	r3, [r7, #16]
 8000e1a:	2b01      	cmp	r3, #1
 8000e1c:	d106      	bne.n	8000e2c <extract_command+0x4c>
 8000e1e:	7dfb      	ldrb	r3, [r7, #23]
 8000e20:	1c5a      	adds	r2, r3, #1
 8000e22:	75fa      	strb	r2, [r7, #23]
 8000e24:	461a      	mov	r2, r3
 8000e26:	7bf9      	ldrb	r1, [r7, #15]
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	5499      	strb	r1, [r3, r2]
	}while(item != '\n');
 8000e2c:	7bfb      	ldrb	r3, [r7, #15]
 8000e2e:	2b0a      	cmp	r3, #10
 8000e30:	d1e9      	bne.n	8000e06 <extract_command+0x26>

	/* When \n is received 	 */

	cmd->payload[i-1] = '\0';
 8000e32:	7dfb      	ldrb	r3, [r7, #23]
 8000e34:	3b01      	subs	r3, #1
 8000e36:	687a      	ldr	r2, [r7, #4]
 8000e38:	2100      	movs	r1, #0
 8000e3a:	54d1      	strb	r1, [r2, r3]
	cmd->len = i-1;
 8000e3c:	7dfb      	ldrb	r3, [r7, #23]
 8000e3e:	3b01      	subs	r3, #1
 8000e40:	b2da      	uxtb	r2, r3
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	729a      	strb	r2, [r3, #10]
	return 0;
 8000e46:	2300      	movs	r3, #0
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	3718      	adds	r7, #24
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	200000ac 	.word	0x200000ac

08000e54 <process_command>:

void process_command(command_t *cmd){
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b086      	sub	sp, #24
 8000e58:	af02      	add	r7, sp, #8
 8000e5a:	6078      	str	r0, [r7, #4]
	// Extract the data bytes from the input data queue and create a command
	BaseType_t ret;
	extract_command(cmd);
 8000e5c:	6878      	ldr	r0, [r7, #4]
 8000e5e:	f7ff ffbf 	bl	8000de0 <extract_command>

	switch(curr_state){
 8000e62:	4b18      	ldr	r3, [pc, #96]	@ (8000ec4 <process_command+0x70>)
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	2b05      	cmp	r3, #5
 8000e68:	dc27      	bgt.n	8000eba <process_command+0x66>
 8000e6a:	2b02      	cmp	r3, #2
 8000e6c:	da1a      	bge.n	8000ea4 <process_command+0x50>
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d002      	beq.n	8000e78 <process_command+0x24>
 8000e72:	2b01      	cmp	r3, #1
 8000e74:	d00b      	beq.n	8000e8e <process_command+0x3a>

	case sRTCReport:
		ret = xTaskNotify(rtc_task_handle, (uint32_t)cmd, eSetValueWithOverwrite);
		break;
	}
}
 8000e76:	e020      	b.n	8000eba <process_command+0x66>
		ret = xTaskNotify(menu_task_handle, (uint32_t)cmd, eSetValueWithOverwrite);
 8000e78:	4b13      	ldr	r3, [pc, #76]	@ (8000ec8 <process_command+0x74>)
 8000e7a:	6818      	ldr	r0, [r3, #0]
 8000e7c:	687a      	ldr	r2, [r7, #4]
 8000e7e:	2300      	movs	r3, #0
 8000e80:	9300      	str	r3, [sp, #0]
 8000e82:	2303      	movs	r3, #3
 8000e84:	2100      	movs	r1, #0
 8000e86:	f004 ff79 	bl	8005d7c <xTaskGenericNotify>
 8000e8a:	60f8      	str	r0, [r7, #12]
		break;
 8000e8c:	e015      	b.n	8000eba <process_command+0x66>
		ret = xTaskNotify(led_task_handle, (uint32_t)cmd, eSetValueWithOverwrite);
 8000e8e:	4b0f      	ldr	r3, [pc, #60]	@ (8000ecc <process_command+0x78>)
 8000e90:	6818      	ldr	r0, [r3, #0]
 8000e92:	687a      	ldr	r2, [r7, #4]
 8000e94:	2300      	movs	r3, #0
 8000e96:	9300      	str	r3, [sp, #0]
 8000e98:	2303      	movs	r3, #3
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	f004 ff6e 	bl	8005d7c <xTaskGenericNotify>
 8000ea0:	60f8      	str	r0, [r7, #12]
		break;
 8000ea2:	e00a      	b.n	8000eba <process_command+0x66>
		ret = xTaskNotify(rtc_task_handle, (uint32_t)cmd, eSetValueWithOverwrite);
 8000ea4:	4b0a      	ldr	r3, [pc, #40]	@ (8000ed0 <process_command+0x7c>)
 8000ea6:	6818      	ldr	r0, [r3, #0]
 8000ea8:	687a      	ldr	r2, [r7, #4]
 8000eaa:	2300      	movs	r3, #0
 8000eac:	9300      	str	r3, [sp, #0]
 8000eae:	2303      	movs	r3, #3
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	f004 ff63 	bl	8005d7c <xTaskGenericNotify>
 8000eb6:	60f8      	str	r0, [r7, #12]
		break;
 8000eb8:	bf00      	nop
}
 8000eba:	bf00      	nop
 8000ebc:	3710      	adds	r7, #16
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	200000b4 	.word	0x200000b4
 8000ec8:	20000098 	.word	0x20000098
 8000ecc:	200000a4 	.word	0x200000a4
 8000ed0:	200000a8 	.word	0x200000a8

08000ed4 <print_task_handler>:

void print_task_handler(void* parameters){
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]

	while(1){
 8000edc:	bf00      	nop
 8000ede:	e7fd      	b.n	8000edc <print_task_handler+0x8>

08000ee0 <led_task_handler>:
	}
}
/*
 * Toggle orange led on the board
 */
void led_task_handler(void* parameters){
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
	TickType_t last_wakeup_time;
	last_wakeup_time = xTaskGetTickCount();
 8000ee8:	f004 f9f4 	bl	80052d4 <xTaskGetTickCount>
 8000eec:	4603      	mov	r3, r0
 8000eee:	60fb      	str	r3, [r7, #12]
	while(1){

		vTaskDelayUntil(&last_wakeup_time, pdMS_TO_TICKS(1000)); // Making all our tasks periodic
 8000ef0:	f107 030c 	add.w	r3, r7, #12
 8000ef4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f004 f80d 	bl	8004f18 <xTaskDelayUntil>
 8000efe:	e7f7      	b.n	8000ef0 <led_task_handler+0x10>

08000f00 <rtc_task_handler>:
}
/*
 * Toggle red led on the board.
 */

void rtc_task_handler(void* parameters){
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
	TickType_t last_wakeup_time;
	last_wakeup_time = xTaskGetTickCount();
 8000f08:	f004 f9e4 	bl	80052d4 <xTaskGetTickCount>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	60fb      	str	r3, [r7, #12]
	while(1){

		vTaskDelayUntil(&last_wakeup_time, pdMS_TO_TICKS(1000)); // Making all our tasks periodic
 8000f10:	f107 030c 	add.w	r3, r7, #12
 8000f14:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f003 fffd 	bl	8004f18 <xTaskDelayUntil>
 8000f1e:	e7f7      	b.n	8000f10 <rtc_task_handler+0x10>

08000f20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f20:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f58 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000f24:	f7ff feba 	bl	8000c9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f28:	480c      	ldr	r0, [pc, #48]	@ (8000f5c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f2a:	490d      	ldr	r1, [pc, #52]	@ (8000f60 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f2c:	4a0d      	ldr	r2, [pc, #52]	@ (8000f64 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f30:	e002      	b.n	8000f38 <LoopCopyDataInit>

08000f32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f36:	3304      	adds	r3, #4

08000f38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f3c:	d3f9      	bcc.n	8000f32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f3e:	4a0a      	ldr	r2, [pc, #40]	@ (8000f68 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f40:	4c0a      	ldr	r4, [pc, #40]	@ (8000f6c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f44:	e001      	b.n	8000f4a <LoopFillZerobss>

08000f46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f48:	3204      	adds	r2, #4

08000f4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f4c:	d3fb      	bcc.n	8000f46 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000f4e:	f006 f8df 	bl	8007110 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f52:	f7ff fad5 	bl	8000500 <main>
  bx  lr    
 8000f56:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f58:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f60:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000f64:	08007308 	.word	0x08007308
  ldr r2, =_sbss
 8000f68:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000f6c:	20012ea8 	.word	0x20012ea8

08000f70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f70:	e7fe      	b.n	8000f70 <ADC_IRQHandler>
	...

08000f74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f78:	4b0e      	ldr	r3, [pc, #56]	@ (8000fb4 <HAL_Init+0x40>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a0d      	ldr	r2, [pc, #52]	@ (8000fb4 <HAL_Init+0x40>)
 8000f7e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f84:	4b0b      	ldr	r3, [pc, #44]	@ (8000fb4 <HAL_Init+0x40>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a0a      	ldr	r2, [pc, #40]	@ (8000fb4 <HAL_Init+0x40>)
 8000f8a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f90:	4b08      	ldr	r3, [pc, #32]	@ (8000fb4 <HAL_Init+0x40>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a07      	ldr	r2, [pc, #28]	@ (8000fb4 <HAL_Init+0x40>)
 8000f96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f9c:	2003      	movs	r0, #3
 8000f9e:	f000 f8d8 	bl	8001152 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fa2:	2000      	movs	r0, #0
 8000fa4:	f7ff fdce 	bl	8000b44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fa8:	f7ff fd2a 	bl	8000a00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fac:	2300      	movs	r3, #0
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	40023c00 	.word	0x40023c00

08000fb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fbc:	4b06      	ldr	r3, [pc, #24]	@ (8000fd8 <HAL_IncTick+0x20>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	4b06      	ldr	r3, [pc, #24]	@ (8000fdc <HAL_IncTick+0x24>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4413      	add	r3, r2
 8000fc8:	4a04      	ldr	r2, [pc, #16]	@ (8000fdc <HAL_IncTick+0x24>)
 8000fca:	6013      	str	r3, [r2, #0]
}
 8000fcc:	bf00      	nop
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	20000008 	.word	0x20000008
 8000fdc:	20000100 	.word	0x20000100

08000fe0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fe4:	4b03      	ldr	r3, [pc, #12]	@ (8000ff4 <HAL_GetTick+0x14>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	20000100 	.word	0x20000100

08000ff8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b085      	sub	sp, #20
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	f003 0307 	and.w	r3, r3, #7
 8001006:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001008:	4b0c      	ldr	r3, [pc, #48]	@ (800103c <__NVIC_SetPriorityGrouping+0x44>)
 800100a:	68db      	ldr	r3, [r3, #12]
 800100c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800100e:	68ba      	ldr	r2, [r7, #8]
 8001010:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001014:	4013      	ands	r3, r2
 8001016:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001020:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001024:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001028:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800102a:	4a04      	ldr	r2, [pc, #16]	@ (800103c <__NVIC_SetPriorityGrouping+0x44>)
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	60d3      	str	r3, [r2, #12]
}
 8001030:	bf00      	nop
 8001032:	3714      	adds	r7, #20
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr
 800103c:	e000ed00 	.word	0xe000ed00

08001040 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001044:	4b04      	ldr	r3, [pc, #16]	@ (8001058 <__NVIC_GetPriorityGrouping+0x18>)
 8001046:	68db      	ldr	r3, [r3, #12]
 8001048:	0a1b      	lsrs	r3, r3, #8
 800104a:	f003 0307 	and.w	r3, r3, #7
}
 800104e:	4618      	mov	r0, r3
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr
 8001058:	e000ed00 	.word	0xe000ed00

0800105c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106a:	2b00      	cmp	r3, #0
 800106c:	db0b      	blt.n	8001086 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800106e:	79fb      	ldrb	r3, [r7, #7]
 8001070:	f003 021f 	and.w	r2, r3, #31
 8001074:	4907      	ldr	r1, [pc, #28]	@ (8001094 <__NVIC_EnableIRQ+0x38>)
 8001076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107a:	095b      	lsrs	r3, r3, #5
 800107c:	2001      	movs	r0, #1
 800107e:	fa00 f202 	lsl.w	r2, r0, r2
 8001082:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001086:	bf00      	nop
 8001088:	370c      	adds	r7, #12
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	e000e100 	.word	0xe000e100

08001098 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	4603      	mov	r3, r0
 80010a0:	6039      	str	r1, [r7, #0]
 80010a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	db0a      	blt.n	80010c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	b2da      	uxtb	r2, r3
 80010b0:	490c      	ldr	r1, [pc, #48]	@ (80010e4 <__NVIC_SetPriority+0x4c>)
 80010b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b6:	0112      	lsls	r2, r2, #4
 80010b8:	b2d2      	uxtb	r2, r2
 80010ba:	440b      	add	r3, r1
 80010bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010c0:	e00a      	b.n	80010d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	b2da      	uxtb	r2, r3
 80010c6:	4908      	ldr	r1, [pc, #32]	@ (80010e8 <__NVIC_SetPriority+0x50>)
 80010c8:	79fb      	ldrb	r3, [r7, #7]
 80010ca:	f003 030f 	and.w	r3, r3, #15
 80010ce:	3b04      	subs	r3, #4
 80010d0:	0112      	lsls	r2, r2, #4
 80010d2:	b2d2      	uxtb	r2, r2
 80010d4:	440b      	add	r3, r1
 80010d6:	761a      	strb	r2, [r3, #24]
}
 80010d8:	bf00      	nop
 80010da:	370c      	adds	r7, #12
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr
 80010e4:	e000e100 	.word	0xe000e100
 80010e8:	e000ed00 	.word	0xe000ed00

080010ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b089      	sub	sp, #36	@ 0x24
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	60f8      	str	r0, [r7, #12]
 80010f4:	60b9      	str	r1, [r7, #8]
 80010f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	f003 0307 	and.w	r3, r3, #7
 80010fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	f1c3 0307 	rsb	r3, r3, #7
 8001106:	2b04      	cmp	r3, #4
 8001108:	bf28      	it	cs
 800110a:	2304      	movcs	r3, #4
 800110c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	3304      	adds	r3, #4
 8001112:	2b06      	cmp	r3, #6
 8001114:	d902      	bls.n	800111c <NVIC_EncodePriority+0x30>
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	3b03      	subs	r3, #3
 800111a:	e000      	b.n	800111e <NVIC_EncodePriority+0x32>
 800111c:	2300      	movs	r3, #0
 800111e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001120:	f04f 32ff 	mov.w	r2, #4294967295
 8001124:	69bb      	ldr	r3, [r7, #24]
 8001126:	fa02 f303 	lsl.w	r3, r2, r3
 800112a:	43da      	mvns	r2, r3
 800112c:	68bb      	ldr	r3, [r7, #8]
 800112e:	401a      	ands	r2, r3
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001134:	f04f 31ff 	mov.w	r1, #4294967295
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	fa01 f303 	lsl.w	r3, r1, r3
 800113e:	43d9      	mvns	r1, r3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001144:	4313      	orrs	r3, r2
         );
}
 8001146:	4618      	mov	r0, r3
 8001148:	3724      	adds	r7, #36	@ 0x24
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr

08001152 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001152:	b580      	push	{r7, lr}
 8001154:	b082      	sub	sp, #8
 8001156:	af00      	add	r7, sp, #0
 8001158:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f7ff ff4c 	bl	8000ff8 <__NVIC_SetPriorityGrouping>
}
 8001160:	bf00      	nop
 8001162:	3708      	adds	r7, #8
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}

08001168 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001168:	b580      	push	{r7, lr}
 800116a:	b086      	sub	sp, #24
 800116c:	af00      	add	r7, sp, #0
 800116e:	4603      	mov	r3, r0
 8001170:	60b9      	str	r1, [r7, #8]
 8001172:	607a      	str	r2, [r7, #4]
 8001174:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001176:	2300      	movs	r3, #0
 8001178:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800117a:	f7ff ff61 	bl	8001040 <__NVIC_GetPriorityGrouping>
 800117e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001180:	687a      	ldr	r2, [r7, #4]
 8001182:	68b9      	ldr	r1, [r7, #8]
 8001184:	6978      	ldr	r0, [r7, #20]
 8001186:	f7ff ffb1 	bl	80010ec <NVIC_EncodePriority>
 800118a:	4602      	mov	r2, r0
 800118c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001190:	4611      	mov	r1, r2
 8001192:	4618      	mov	r0, r3
 8001194:	f7ff ff80 	bl	8001098 <__NVIC_SetPriority>
}
 8001198:	bf00      	nop
 800119a:	3718      	adds	r7, #24
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}

080011a0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	4603      	mov	r3, r0
 80011a8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ae:	4618      	mov	r0, r3
 80011b0:	f7ff ff54 	bl	800105c <__NVIC_EnableIRQ>
}
 80011b4:	bf00      	nop
 80011b6:	3708      	adds	r7, #8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}

080011bc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011c8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80011ca:	f7ff ff09 	bl	8000fe0 <HAL_GetTick>
 80011ce:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	2b02      	cmp	r3, #2
 80011da:	d008      	beq.n	80011ee <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2280      	movs	r2, #128	@ 0x80
 80011e0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2200      	movs	r2, #0
 80011e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	e052      	b.n	8001294 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f022 0216 	bic.w	r2, r2, #22
 80011fc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	695a      	ldr	r2, [r3, #20]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800120c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001212:	2b00      	cmp	r3, #0
 8001214:	d103      	bne.n	800121e <HAL_DMA_Abort+0x62>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800121a:	2b00      	cmp	r3, #0
 800121c:	d007      	beq.n	800122e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f022 0208 	bic.w	r2, r2, #8
 800122c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f022 0201 	bic.w	r2, r2, #1
 800123c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800123e:	e013      	b.n	8001268 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001240:	f7ff fece 	bl	8000fe0 <HAL_GetTick>
 8001244:	4602      	mov	r2, r0
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	2b05      	cmp	r3, #5
 800124c:	d90c      	bls.n	8001268 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2220      	movs	r2, #32
 8001252:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2203      	movs	r2, #3
 8001258:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2200      	movs	r2, #0
 8001260:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001264:	2303      	movs	r3, #3
 8001266:	e015      	b.n	8001294 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f003 0301 	and.w	r3, r3, #1
 8001272:	2b00      	cmp	r3, #0
 8001274:	d1e4      	bne.n	8001240 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800127a:	223f      	movs	r2, #63	@ 0x3f
 800127c:	409a      	lsls	r2, r3
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2201      	movs	r2, #1
 8001286:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2200      	movs	r2, #0
 800128e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001292:	2300      	movs	r3, #0
}
 8001294:	4618      	mov	r0, r3
 8001296:	3710      	adds	r7, #16
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}

0800129c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	2b02      	cmp	r3, #2
 80012ae:	d004      	beq.n	80012ba <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2280      	movs	r2, #128	@ 0x80
 80012b4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	e00c      	b.n	80012d4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2205      	movs	r2, #5
 80012be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f022 0201 	bic.w	r2, r2, #1
 80012d0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80012d2:	2300      	movs	r3, #0
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr

080012e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b089      	sub	sp, #36	@ 0x24
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012ea:	2300      	movs	r3, #0
 80012ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012ee:	2300      	movs	r3, #0
 80012f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012f2:	2300      	movs	r3, #0
 80012f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012f6:	2300      	movs	r3, #0
 80012f8:	61fb      	str	r3, [r7, #28]
 80012fa:	e165      	b.n	80015c8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012fc:	2201      	movs	r2, #1
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	fa02 f303 	lsl.w	r3, r2, r3
 8001304:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	697a      	ldr	r2, [r7, #20]
 800130c:	4013      	ands	r3, r2
 800130e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001310:	693a      	ldr	r2, [r7, #16]
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	429a      	cmp	r2, r3
 8001316:	f040 8154 	bne.w	80015c2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	f003 0303 	and.w	r3, r3, #3
 8001322:	2b01      	cmp	r3, #1
 8001324:	d005      	beq.n	8001332 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800132e:	2b02      	cmp	r3, #2
 8001330:	d130      	bne.n	8001394 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	689b      	ldr	r3, [r3, #8]
 8001336:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001338:	69fb      	ldr	r3, [r7, #28]
 800133a:	005b      	lsls	r3, r3, #1
 800133c:	2203      	movs	r2, #3
 800133e:	fa02 f303 	lsl.w	r3, r2, r3
 8001342:	43db      	mvns	r3, r3
 8001344:	69ba      	ldr	r2, [r7, #24]
 8001346:	4013      	ands	r3, r2
 8001348:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	68da      	ldr	r2, [r3, #12]
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	005b      	lsls	r3, r3, #1
 8001352:	fa02 f303 	lsl.w	r3, r2, r3
 8001356:	69ba      	ldr	r2, [r7, #24]
 8001358:	4313      	orrs	r3, r2
 800135a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	69ba      	ldr	r2, [r7, #24]
 8001360:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001368:	2201      	movs	r2, #1
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	fa02 f303 	lsl.w	r3, r2, r3
 8001370:	43db      	mvns	r3, r3
 8001372:	69ba      	ldr	r2, [r7, #24]
 8001374:	4013      	ands	r3, r2
 8001376:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	091b      	lsrs	r3, r3, #4
 800137e:	f003 0201 	and.w	r2, r3, #1
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	fa02 f303 	lsl.w	r3, r2, r3
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	4313      	orrs	r3, r2
 800138c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	69ba      	ldr	r2, [r7, #24]
 8001392:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f003 0303 	and.w	r3, r3, #3
 800139c:	2b03      	cmp	r3, #3
 800139e:	d017      	beq.n	80013d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	005b      	lsls	r3, r3, #1
 80013aa:	2203      	movs	r2, #3
 80013ac:	fa02 f303 	lsl.w	r3, r2, r3
 80013b0:	43db      	mvns	r3, r3
 80013b2:	69ba      	ldr	r2, [r7, #24]
 80013b4:	4013      	ands	r3, r2
 80013b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	689a      	ldr	r2, [r3, #8]
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	005b      	lsls	r3, r3, #1
 80013c0:	fa02 f303 	lsl.w	r3, r2, r3
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	4313      	orrs	r3, r2
 80013c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f003 0303 	and.w	r3, r3, #3
 80013d8:	2b02      	cmp	r3, #2
 80013da:	d123      	bne.n	8001424 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013dc:	69fb      	ldr	r3, [r7, #28]
 80013de:	08da      	lsrs	r2, r3, #3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	3208      	adds	r2, #8
 80013e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	f003 0307 	and.w	r3, r3, #7
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	220f      	movs	r2, #15
 80013f4:	fa02 f303 	lsl.w	r3, r2, r3
 80013f8:	43db      	mvns	r3, r3
 80013fa:	69ba      	ldr	r2, [r7, #24]
 80013fc:	4013      	ands	r3, r2
 80013fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	691a      	ldr	r2, [r3, #16]
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	f003 0307 	and.w	r3, r3, #7
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	fa02 f303 	lsl.w	r3, r2, r3
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	4313      	orrs	r3, r2
 8001414:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	08da      	lsrs	r2, r3, #3
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	3208      	adds	r2, #8
 800141e:	69b9      	ldr	r1, [r7, #24]
 8001420:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	005b      	lsls	r3, r3, #1
 800142e:	2203      	movs	r2, #3
 8001430:	fa02 f303 	lsl.w	r3, r2, r3
 8001434:	43db      	mvns	r3, r3
 8001436:	69ba      	ldr	r2, [r7, #24]
 8001438:	4013      	ands	r3, r2
 800143a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f003 0203 	and.w	r2, r3, #3
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	fa02 f303 	lsl.w	r3, r2, r3
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	4313      	orrs	r3, r2
 8001450:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001460:	2b00      	cmp	r3, #0
 8001462:	f000 80ae 	beq.w	80015c2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001466:	2300      	movs	r3, #0
 8001468:	60fb      	str	r3, [r7, #12]
 800146a:	4b5d      	ldr	r3, [pc, #372]	@ (80015e0 <HAL_GPIO_Init+0x300>)
 800146c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800146e:	4a5c      	ldr	r2, [pc, #368]	@ (80015e0 <HAL_GPIO_Init+0x300>)
 8001470:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001474:	6453      	str	r3, [r2, #68]	@ 0x44
 8001476:	4b5a      	ldr	r3, [pc, #360]	@ (80015e0 <HAL_GPIO_Init+0x300>)
 8001478:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800147a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800147e:	60fb      	str	r3, [r7, #12]
 8001480:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001482:	4a58      	ldr	r2, [pc, #352]	@ (80015e4 <HAL_GPIO_Init+0x304>)
 8001484:	69fb      	ldr	r3, [r7, #28]
 8001486:	089b      	lsrs	r3, r3, #2
 8001488:	3302      	adds	r3, #2
 800148a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800148e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	f003 0303 	and.w	r3, r3, #3
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	220f      	movs	r2, #15
 800149a:	fa02 f303 	lsl.w	r3, r2, r3
 800149e:	43db      	mvns	r3, r3
 80014a0:	69ba      	ldr	r2, [r7, #24]
 80014a2:	4013      	ands	r3, r2
 80014a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4a4f      	ldr	r2, [pc, #316]	@ (80015e8 <HAL_GPIO_Init+0x308>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d025      	beq.n	80014fa <HAL_GPIO_Init+0x21a>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4a4e      	ldr	r2, [pc, #312]	@ (80015ec <HAL_GPIO_Init+0x30c>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d01f      	beq.n	80014f6 <HAL_GPIO_Init+0x216>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4a4d      	ldr	r2, [pc, #308]	@ (80015f0 <HAL_GPIO_Init+0x310>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d019      	beq.n	80014f2 <HAL_GPIO_Init+0x212>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4a4c      	ldr	r2, [pc, #304]	@ (80015f4 <HAL_GPIO_Init+0x314>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d013      	beq.n	80014ee <HAL_GPIO_Init+0x20e>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4a4b      	ldr	r2, [pc, #300]	@ (80015f8 <HAL_GPIO_Init+0x318>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d00d      	beq.n	80014ea <HAL_GPIO_Init+0x20a>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4a4a      	ldr	r2, [pc, #296]	@ (80015fc <HAL_GPIO_Init+0x31c>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d007      	beq.n	80014e6 <HAL_GPIO_Init+0x206>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4a49      	ldr	r2, [pc, #292]	@ (8001600 <HAL_GPIO_Init+0x320>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d101      	bne.n	80014e2 <HAL_GPIO_Init+0x202>
 80014de:	2306      	movs	r3, #6
 80014e0:	e00c      	b.n	80014fc <HAL_GPIO_Init+0x21c>
 80014e2:	2307      	movs	r3, #7
 80014e4:	e00a      	b.n	80014fc <HAL_GPIO_Init+0x21c>
 80014e6:	2305      	movs	r3, #5
 80014e8:	e008      	b.n	80014fc <HAL_GPIO_Init+0x21c>
 80014ea:	2304      	movs	r3, #4
 80014ec:	e006      	b.n	80014fc <HAL_GPIO_Init+0x21c>
 80014ee:	2303      	movs	r3, #3
 80014f0:	e004      	b.n	80014fc <HAL_GPIO_Init+0x21c>
 80014f2:	2302      	movs	r3, #2
 80014f4:	e002      	b.n	80014fc <HAL_GPIO_Init+0x21c>
 80014f6:	2301      	movs	r3, #1
 80014f8:	e000      	b.n	80014fc <HAL_GPIO_Init+0x21c>
 80014fa:	2300      	movs	r3, #0
 80014fc:	69fa      	ldr	r2, [r7, #28]
 80014fe:	f002 0203 	and.w	r2, r2, #3
 8001502:	0092      	lsls	r2, r2, #2
 8001504:	4093      	lsls	r3, r2
 8001506:	69ba      	ldr	r2, [r7, #24]
 8001508:	4313      	orrs	r3, r2
 800150a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800150c:	4935      	ldr	r1, [pc, #212]	@ (80015e4 <HAL_GPIO_Init+0x304>)
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	089b      	lsrs	r3, r3, #2
 8001512:	3302      	adds	r3, #2
 8001514:	69ba      	ldr	r2, [r7, #24]
 8001516:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800151a:	4b3a      	ldr	r3, [pc, #232]	@ (8001604 <HAL_GPIO_Init+0x324>)
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	43db      	mvns	r3, r3
 8001524:	69ba      	ldr	r2, [r7, #24]
 8001526:	4013      	ands	r3, r2
 8001528:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001532:	2b00      	cmp	r3, #0
 8001534:	d003      	beq.n	800153e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001536:	69ba      	ldr	r2, [r7, #24]
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	4313      	orrs	r3, r2
 800153c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800153e:	4a31      	ldr	r2, [pc, #196]	@ (8001604 <HAL_GPIO_Init+0x324>)
 8001540:	69bb      	ldr	r3, [r7, #24]
 8001542:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001544:	4b2f      	ldr	r3, [pc, #188]	@ (8001604 <HAL_GPIO_Init+0x324>)
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	43db      	mvns	r3, r3
 800154e:	69ba      	ldr	r2, [r7, #24]
 8001550:	4013      	ands	r3, r2
 8001552:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800155c:	2b00      	cmp	r3, #0
 800155e:	d003      	beq.n	8001568 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	4313      	orrs	r3, r2
 8001566:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001568:	4a26      	ldr	r2, [pc, #152]	@ (8001604 <HAL_GPIO_Init+0x324>)
 800156a:	69bb      	ldr	r3, [r7, #24]
 800156c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800156e:	4b25      	ldr	r3, [pc, #148]	@ (8001604 <HAL_GPIO_Init+0x324>)
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	43db      	mvns	r3, r3
 8001578:	69ba      	ldr	r2, [r7, #24]
 800157a:	4013      	ands	r3, r2
 800157c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001586:	2b00      	cmp	r3, #0
 8001588:	d003      	beq.n	8001592 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800158a:	69ba      	ldr	r2, [r7, #24]
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	4313      	orrs	r3, r2
 8001590:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001592:	4a1c      	ldr	r2, [pc, #112]	@ (8001604 <HAL_GPIO_Init+0x324>)
 8001594:	69bb      	ldr	r3, [r7, #24]
 8001596:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001598:	4b1a      	ldr	r3, [pc, #104]	@ (8001604 <HAL_GPIO_Init+0x324>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	43db      	mvns	r3, r3
 80015a2:	69ba      	ldr	r2, [r7, #24]
 80015a4:	4013      	ands	r3, r2
 80015a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d003      	beq.n	80015bc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80015b4:	69ba      	ldr	r2, [r7, #24]
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	4313      	orrs	r3, r2
 80015ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015bc:	4a11      	ldr	r2, [pc, #68]	@ (8001604 <HAL_GPIO_Init+0x324>)
 80015be:	69bb      	ldr	r3, [r7, #24]
 80015c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	3301      	adds	r3, #1
 80015c6:	61fb      	str	r3, [r7, #28]
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	2b0f      	cmp	r3, #15
 80015cc:	f67f ae96 	bls.w	80012fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015d0:	bf00      	nop
 80015d2:	bf00      	nop
 80015d4:	3724      	adds	r7, #36	@ 0x24
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	40023800 	.word	0x40023800
 80015e4:	40013800 	.word	0x40013800
 80015e8:	40020000 	.word	0x40020000
 80015ec:	40020400 	.word	0x40020400
 80015f0:	40020800 	.word	0x40020800
 80015f4:	40020c00 	.word	0x40020c00
 80015f8:	40021000 	.word	0x40021000
 80015fc:	40021400 	.word	0x40021400
 8001600:	40021800 	.word	0x40021800
 8001604:	40013c00 	.word	0x40013c00

08001608 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	460b      	mov	r3, r1
 8001612:	807b      	strh	r3, [r7, #2]
 8001614:	4613      	mov	r3, r2
 8001616:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001618:	787b      	ldrb	r3, [r7, #1]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d003      	beq.n	8001626 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800161e:	887a      	ldrh	r2, [r7, #2]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001624:	e003      	b.n	800162e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001626:	887b      	ldrh	r3, [r7, #2]
 8001628:	041a      	lsls	r2, r3, #16
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	619a      	str	r2, [r3, #24]
}
 800162e:	bf00      	nop
 8001630:	370c      	adds	r7, #12
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
	...

0800163c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d101      	bne.n	8001650 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800164c:	2301      	movs	r3, #1
 800164e:	e0cc      	b.n	80017ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001650:	4b68      	ldr	r3, [pc, #416]	@ (80017f4 <HAL_RCC_ClockConfig+0x1b8>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 030f 	and.w	r3, r3, #15
 8001658:	683a      	ldr	r2, [r7, #0]
 800165a:	429a      	cmp	r2, r3
 800165c:	d90c      	bls.n	8001678 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800165e:	4b65      	ldr	r3, [pc, #404]	@ (80017f4 <HAL_RCC_ClockConfig+0x1b8>)
 8001660:	683a      	ldr	r2, [r7, #0]
 8001662:	b2d2      	uxtb	r2, r2
 8001664:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001666:	4b63      	ldr	r3, [pc, #396]	@ (80017f4 <HAL_RCC_ClockConfig+0x1b8>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 030f 	and.w	r3, r3, #15
 800166e:	683a      	ldr	r2, [r7, #0]
 8001670:	429a      	cmp	r2, r3
 8001672:	d001      	beq.n	8001678 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	e0b8      	b.n	80017ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f003 0302 	and.w	r3, r3, #2
 8001680:	2b00      	cmp	r3, #0
 8001682:	d020      	beq.n	80016c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f003 0304 	and.w	r3, r3, #4
 800168c:	2b00      	cmp	r3, #0
 800168e:	d005      	beq.n	800169c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001690:	4b59      	ldr	r3, [pc, #356]	@ (80017f8 <HAL_RCC_ClockConfig+0x1bc>)
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	4a58      	ldr	r2, [pc, #352]	@ (80017f8 <HAL_RCC_ClockConfig+0x1bc>)
 8001696:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800169a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f003 0308 	and.w	r3, r3, #8
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d005      	beq.n	80016b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016a8:	4b53      	ldr	r3, [pc, #332]	@ (80017f8 <HAL_RCC_ClockConfig+0x1bc>)
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	4a52      	ldr	r2, [pc, #328]	@ (80017f8 <HAL_RCC_ClockConfig+0x1bc>)
 80016ae:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80016b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016b4:	4b50      	ldr	r3, [pc, #320]	@ (80017f8 <HAL_RCC_ClockConfig+0x1bc>)
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	494d      	ldr	r1, [pc, #308]	@ (80017f8 <HAL_RCC_ClockConfig+0x1bc>)
 80016c2:	4313      	orrs	r3, r2
 80016c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 0301 	and.w	r3, r3, #1
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d044      	beq.n	800175c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d107      	bne.n	80016ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016da:	4b47      	ldr	r3, [pc, #284]	@ (80017f8 <HAL_RCC_ClockConfig+0x1bc>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d119      	bne.n	800171a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	e07f      	b.n	80017ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	2b02      	cmp	r3, #2
 80016f0:	d003      	beq.n	80016fa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016f6:	2b03      	cmp	r3, #3
 80016f8:	d107      	bne.n	800170a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016fa:	4b3f      	ldr	r3, [pc, #252]	@ (80017f8 <HAL_RCC_ClockConfig+0x1bc>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d109      	bne.n	800171a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e06f      	b.n	80017ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800170a:	4b3b      	ldr	r3, [pc, #236]	@ (80017f8 <HAL_RCC_ClockConfig+0x1bc>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 0302 	and.w	r3, r3, #2
 8001712:	2b00      	cmp	r3, #0
 8001714:	d101      	bne.n	800171a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e067      	b.n	80017ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800171a:	4b37      	ldr	r3, [pc, #220]	@ (80017f8 <HAL_RCC_ClockConfig+0x1bc>)
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	f023 0203 	bic.w	r2, r3, #3
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	4934      	ldr	r1, [pc, #208]	@ (80017f8 <HAL_RCC_ClockConfig+0x1bc>)
 8001728:	4313      	orrs	r3, r2
 800172a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800172c:	f7ff fc58 	bl	8000fe0 <HAL_GetTick>
 8001730:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001732:	e00a      	b.n	800174a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001734:	f7ff fc54 	bl	8000fe0 <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001742:	4293      	cmp	r3, r2
 8001744:	d901      	bls.n	800174a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001746:	2303      	movs	r3, #3
 8001748:	e04f      	b.n	80017ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800174a:	4b2b      	ldr	r3, [pc, #172]	@ (80017f8 <HAL_RCC_ClockConfig+0x1bc>)
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	f003 020c 	and.w	r2, r3, #12
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	429a      	cmp	r2, r3
 800175a:	d1eb      	bne.n	8001734 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800175c:	4b25      	ldr	r3, [pc, #148]	@ (80017f4 <HAL_RCC_ClockConfig+0x1b8>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 030f 	and.w	r3, r3, #15
 8001764:	683a      	ldr	r2, [r7, #0]
 8001766:	429a      	cmp	r2, r3
 8001768:	d20c      	bcs.n	8001784 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800176a:	4b22      	ldr	r3, [pc, #136]	@ (80017f4 <HAL_RCC_ClockConfig+0x1b8>)
 800176c:	683a      	ldr	r2, [r7, #0]
 800176e:	b2d2      	uxtb	r2, r2
 8001770:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001772:	4b20      	ldr	r3, [pc, #128]	@ (80017f4 <HAL_RCC_ClockConfig+0x1b8>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 030f 	and.w	r3, r3, #15
 800177a:	683a      	ldr	r2, [r7, #0]
 800177c:	429a      	cmp	r2, r3
 800177e:	d001      	beq.n	8001784 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	e032      	b.n	80017ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 0304 	and.w	r3, r3, #4
 800178c:	2b00      	cmp	r3, #0
 800178e:	d008      	beq.n	80017a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001790:	4b19      	ldr	r3, [pc, #100]	@ (80017f8 <HAL_RCC_ClockConfig+0x1bc>)
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	4916      	ldr	r1, [pc, #88]	@ (80017f8 <HAL_RCC_ClockConfig+0x1bc>)
 800179e:	4313      	orrs	r3, r2
 80017a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0308 	and.w	r3, r3, #8
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d009      	beq.n	80017c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017ae:	4b12      	ldr	r3, [pc, #72]	@ (80017f8 <HAL_RCC_ClockConfig+0x1bc>)
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	691b      	ldr	r3, [r3, #16]
 80017ba:	00db      	lsls	r3, r3, #3
 80017bc:	490e      	ldr	r1, [pc, #56]	@ (80017f8 <HAL_RCC_ClockConfig+0x1bc>)
 80017be:	4313      	orrs	r3, r2
 80017c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80017c2:	f000 fbb1 	bl	8001f28 <HAL_RCC_GetSysClockFreq>
 80017c6:	4602      	mov	r2, r0
 80017c8:	4b0b      	ldr	r3, [pc, #44]	@ (80017f8 <HAL_RCC_ClockConfig+0x1bc>)
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	091b      	lsrs	r3, r3, #4
 80017ce:	f003 030f 	and.w	r3, r3, #15
 80017d2:	490a      	ldr	r1, [pc, #40]	@ (80017fc <HAL_RCC_ClockConfig+0x1c0>)
 80017d4:	5ccb      	ldrb	r3, [r1, r3]
 80017d6:	fa22 f303 	lsr.w	r3, r2, r3
 80017da:	4a09      	ldr	r2, [pc, #36]	@ (8001800 <HAL_RCC_ClockConfig+0x1c4>)
 80017dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80017de:	4b09      	ldr	r3, [pc, #36]	@ (8001804 <HAL_RCC_ClockConfig+0x1c8>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7ff f9ae 	bl	8000b44 <HAL_InitTick>

  return HAL_OK;
 80017e8:	2300      	movs	r3, #0
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3710      	adds	r7, #16
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	40023c00 	.word	0x40023c00
 80017f8:	40023800 	.word	0x40023800
 80017fc:	080072e0 	.word	0x080072e0
 8001800:	20000000 	.word	0x20000000
 8001804:	20000004 	.word	0x20000004

08001808 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800180c:	4b03      	ldr	r3, [pc, #12]	@ (800181c <HAL_RCC_GetHCLKFreq+0x14>)
 800180e:	681b      	ldr	r3, [r3, #0]
}
 8001810:	4618      	mov	r0, r3
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	20000000 	.word	0x20000000

08001820 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001824:	f7ff fff0 	bl	8001808 <HAL_RCC_GetHCLKFreq>
 8001828:	4602      	mov	r2, r0
 800182a:	4b05      	ldr	r3, [pc, #20]	@ (8001840 <HAL_RCC_GetPCLK1Freq+0x20>)
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	0a9b      	lsrs	r3, r3, #10
 8001830:	f003 0307 	and.w	r3, r3, #7
 8001834:	4903      	ldr	r1, [pc, #12]	@ (8001844 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001836:	5ccb      	ldrb	r3, [r1, r3]
 8001838:	fa22 f303 	lsr.w	r3, r2, r3
}
 800183c:	4618      	mov	r0, r3
 800183e:	bd80      	pop	{r7, pc}
 8001840:	40023800 	.word	0x40023800
 8001844:	080072f0 	.word	0x080072f0

08001848 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800184c:	f7ff ffdc 	bl	8001808 <HAL_RCC_GetHCLKFreq>
 8001850:	4602      	mov	r2, r0
 8001852:	4b05      	ldr	r3, [pc, #20]	@ (8001868 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	0b5b      	lsrs	r3, r3, #13
 8001858:	f003 0307 	and.w	r3, r3, #7
 800185c:	4903      	ldr	r1, [pc, #12]	@ (800186c <HAL_RCC_GetPCLK2Freq+0x24>)
 800185e:	5ccb      	ldrb	r3, [r1, r3]
 8001860:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001864:	4618      	mov	r0, r3
 8001866:	bd80      	pop	{r7, pc}
 8001868:	40023800 	.word	0x40023800
 800186c:	080072f0 	.word	0x080072f0

08001870 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	220f      	movs	r2, #15
 800187e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001880:	4b12      	ldr	r3, [pc, #72]	@ (80018cc <HAL_RCC_GetClockConfig+0x5c>)
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	f003 0203 	and.w	r2, r3, #3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800188c:	4b0f      	ldr	r3, [pc, #60]	@ (80018cc <HAL_RCC_GetClockConfig+0x5c>)
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001898:	4b0c      	ldr	r3, [pc, #48]	@ (80018cc <HAL_RCC_GetClockConfig+0x5c>)
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80018a4:	4b09      	ldr	r3, [pc, #36]	@ (80018cc <HAL_RCC_GetClockConfig+0x5c>)
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	08db      	lsrs	r3, r3, #3
 80018aa:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80018b2:	4b07      	ldr	r3, [pc, #28]	@ (80018d0 <HAL_RCC_GetClockConfig+0x60>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 020f 	and.w	r2, r3, #15
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	601a      	str	r2, [r3, #0]
}
 80018be:	bf00      	nop
 80018c0:	370c      	adds	r7, #12
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	40023800 	.word	0x40023800
 80018d0:	40023c00 	.word	0x40023c00

080018d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b08c      	sub	sp, #48	@ 0x30
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80018dc:	2300      	movs	r3, #0
 80018de:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 80018e0:	2300      	movs	r3, #0
 80018e2:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80018e4:	2300      	movs	r3, #0
 80018e6:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80018e8:	2300      	movs	r3, #0
 80018ea:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80018ec:	2300      	movs	r3, #0
 80018ee:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80018f0:	2300      	movs	r3, #0
 80018f2:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80018f4:	2300      	movs	r3, #0
 80018f6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80018f8:	2300      	movs	r3, #0
 80018fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 80018fc:	2300      	movs	r3, #0
 80018fe:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f003 0301 	and.w	r3, r3, #1
 8001908:	2b00      	cmp	r3, #0
 800190a:	d010      	beq.n	800192e <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 800190c:	4b6f      	ldr	r3, [pc, #444]	@ (8001acc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800190e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001912:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800191a:	496c      	ldr	r1, [pc, #432]	@ (8001acc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800191c:	4313      	orrs	r3, r2
 800191e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001926:	2b00      	cmp	r3, #0
 8001928:	d101      	bne.n	800192e <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800192a:	2301      	movs	r3, #1
 800192c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f003 0302 	and.w	r3, r3, #2
 8001936:	2b00      	cmp	r3, #0
 8001938:	d010      	beq.n	800195c <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800193a:	4b64      	ldr	r3, [pc, #400]	@ (8001acc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800193c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001940:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001948:	4960      	ldr	r1, [pc, #384]	@ (8001acc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800194a:	4313      	orrs	r3, r2
 800194c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001954:	2b00      	cmp	r3, #0
 8001956:	d101      	bne.n	800195c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8001958:	2301      	movs	r3, #1
 800195a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 0304 	and.w	r3, r3, #4
 8001964:	2b00      	cmp	r3, #0
 8001966:	d017      	beq.n	8001998 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001968:	4b58      	ldr	r3, [pc, #352]	@ (8001acc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800196a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800196e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001976:	4955      	ldr	r1, [pc, #340]	@ (8001acc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001978:	4313      	orrs	r3, r2
 800197a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001982:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001986:	d101      	bne.n	800198c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8001988:	2301      	movs	r3, #1
 800198a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001990:	2b00      	cmp	r3, #0
 8001992:	d101      	bne.n	8001998 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8001994:	2301      	movs	r3, #1
 8001996:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 0308 	and.w	r3, r3, #8
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d017      	beq.n	80019d4 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80019a4:	4b49      	ldr	r3, [pc, #292]	@ (8001acc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80019a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80019aa:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019b2:	4946      	ldr	r1, [pc, #280]	@ (8001acc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80019b4:	4313      	orrs	r3, r2
 80019b6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019be:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80019c2:	d101      	bne.n	80019c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80019c4:	2301      	movs	r3, #1
 80019c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d101      	bne.n	80019d4 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80019d0:	2301      	movs	r3, #1
 80019d2:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0320 	and.w	r3, r3, #32
 80019dc:	2b00      	cmp	r3, #0
 80019de:	f000 808a 	beq.w	8001af6 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80019e2:	2300      	movs	r3, #0
 80019e4:	60bb      	str	r3, [r7, #8]
 80019e6:	4b39      	ldr	r3, [pc, #228]	@ (8001acc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80019e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ea:	4a38      	ldr	r2, [pc, #224]	@ (8001acc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80019ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80019f2:	4b36      	ldr	r3, [pc, #216]	@ (8001acc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80019f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019fa:	60bb      	str	r3, [r7, #8]
 80019fc:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80019fe:	4b34      	ldr	r3, [pc, #208]	@ (8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a33      	ldr	r2, [pc, #204]	@ (8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001a04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a08:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001a0a:	f7ff fae9 	bl	8000fe0 <HAL_GetTick>
 8001a0e:	6278      	str	r0, [r7, #36]	@ 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001a10:	e008      	b.n	8001a24 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001a12:	f7ff fae5 	bl	8000fe0 <HAL_GetTick>
 8001a16:	4602      	mov	r2, r0
 8001a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d901      	bls.n	8001a24 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8001a20:	2303      	movs	r3, #3
 8001a22:	e278      	b.n	8001f16 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001a24:	4b2a      	ldr	r3, [pc, #168]	@ (8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d0f0      	beq.n	8001a12 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001a30:	4b26      	ldr	r3, [pc, #152]	@ (8001acc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a34:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001a38:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001a3a:	6a3b      	ldr	r3, [r7, #32]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d02f      	beq.n	8001aa0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a44:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001a48:	6a3a      	ldr	r2, [r7, #32]
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d028      	beq.n	8001aa0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001a4e:	4b1f      	ldr	r3, [pc, #124]	@ (8001acc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a52:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001a56:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001a58:	4b1e      	ldr	r3, [pc, #120]	@ (8001ad4 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001a5e:	4b1d      	ldr	r3, [pc, #116]	@ (8001ad4 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001a64:	4a19      	ldr	r2, [pc, #100]	@ (8001acc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a66:	6a3b      	ldr	r3, [r7, #32]
 8001a68:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001a6a:	4b18      	ldr	r3, [pc, #96]	@ (8001acc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a6e:	f003 0301 	and.w	r3, r3, #1
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d114      	bne.n	8001aa0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001a76:	f7ff fab3 	bl	8000fe0 <HAL_GetTick>
 8001a7a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a7c:	e00a      	b.n	8001a94 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a7e:	f7ff faaf 	bl	8000fe0 <HAL_GetTick>
 8001a82:	4602      	mov	r2, r0
 8001a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d901      	bls.n	8001a94 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8001a90:	2303      	movs	r3, #3
 8001a92:	e240      	b.n	8001f16 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a94:	4b0d      	ldr	r3, [pc, #52]	@ (8001acc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a98:	f003 0302 	and.w	r3, r3, #2
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d0ee      	beq.n	8001a7e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aa4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001aa8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001aac:	d114      	bne.n	8001ad8 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8001aae:	4b07      	ldr	r3, [pc, #28]	@ (8001acc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aba:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8001abe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001ac2:	4902      	ldr	r1, [pc, #8]	@ (8001acc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	608b      	str	r3, [r1, #8]
 8001ac8:	e00c      	b.n	8001ae4 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8001aca:	bf00      	nop
 8001acc:	40023800 	.word	0x40023800
 8001ad0:	40007000 	.word	0x40007000
 8001ad4:	42470e40 	.word	0x42470e40
 8001ad8:	4b4a      	ldr	r3, [pc, #296]	@ (8001c04 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	4a49      	ldr	r2, [pc, #292]	@ (8001c04 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001ade:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8001ae2:	6093      	str	r3, [r2, #8]
 8001ae4:	4b47      	ldr	r3, [pc, #284]	@ (8001c04 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001ae6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001af0:	4944      	ldr	r1, [pc, #272]	@ (8001c04 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001af2:	4313      	orrs	r3, r2
 8001af4:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0310 	and.w	r3, r3, #16
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d004      	beq.n	8001b0c <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8001b08:	4b3f      	ldr	r3, [pc, #252]	@ (8001c08 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8001b0a:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d00a      	beq.n	8001b2e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8001b18:	4b3a      	ldr	r3, [pc, #232]	@ (8001c04 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001b1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b1e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b26:	4937      	ldr	r1, [pc, #220]	@ (8001c04 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d00a      	beq.n	8001b50 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001b3a:	4b32      	ldr	r3, [pc, #200]	@ (8001c04 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001b3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b40:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b48:	492e      	ldr	r1, [pc, #184]	@ (8001c04 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d011      	beq.n	8001b80 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001b5c:	4b29      	ldr	r3, [pc, #164]	@ (8001c04 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001b5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b62:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b6a:	4926      	ldr	r1, [pc, #152]	@ (8001c04 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b76:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001b7a:	d101      	bne.n	8001b80 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d00a      	beq.n	8001ba2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8001b8c:	4b1d      	ldr	r3, [pc, #116]	@ (8001c04 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001b8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b92:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b9a:	491a      	ldr	r1, [pc, #104]	@ (8001c04 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d011      	beq.n	8001bd2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8001bae:	4b15      	ldr	r3, [pc, #84]	@ (8001c04 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001bb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001bb4:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001bbc:	4911      	ldr	r1, [pc, #68]	@ (8001c04 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001bc8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001bcc:	d101      	bne.n	8001bd2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001bd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d005      	beq.n	8001be4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001be0:	f040 80ff 	bne.w	8001de2 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001be4:	4b09      	ldr	r3, [pc, #36]	@ (8001c0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001bea:	f7ff f9f9 	bl	8000fe0 <HAL_GetTick>
 8001bee:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001bf0:	e00e      	b.n	8001c10 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001bf2:	f7ff f9f5 	bl	8000fe0 <HAL_GetTick>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	2b02      	cmp	r3, #2
 8001bfe:	d907      	bls.n	8001c10 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001c00:	2303      	movs	r3, #3
 8001c02:	e188      	b.n	8001f16 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001c04:	40023800 	.word	0x40023800
 8001c08:	424711e0 	.word	0x424711e0
 8001c0c:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001c10:	4b7e      	ldr	r3, [pc, #504]	@ (8001e0c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d1ea      	bne.n	8001bf2 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 0301 	and.w	r3, r3, #1
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d003      	beq.n	8001c30 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d009      	beq.n	8001c44 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d028      	beq.n	8001c8e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d124      	bne.n	8001c8e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001c44:	4b71      	ldr	r3, [pc, #452]	@ (8001e0c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001c46:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001c4a:	0c1b      	lsrs	r3, r3, #16
 8001c4c:	f003 0303 	and.w	r3, r3, #3
 8001c50:	3301      	adds	r3, #1
 8001c52:	005b      	lsls	r3, r3, #1
 8001c54:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001c56:	4b6d      	ldr	r3, [pc, #436]	@ (8001e0c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001c58:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001c5c:	0e1b      	lsrs	r3, r3, #24
 8001c5e:	f003 030f 	and.w	r3, r3, #15
 8001c62:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	685a      	ldr	r2, [r3, #4]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	019b      	lsls	r3, r3, #6
 8001c6e:	431a      	orrs	r2, r3
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	085b      	lsrs	r3, r3, #1
 8001c74:	3b01      	subs	r3, #1
 8001c76:	041b      	lsls	r3, r3, #16
 8001c78:	431a      	orrs	r2, r3
 8001c7a:	69bb      	ldr	r3, [r7, #24]
 8001c7c:	061b      	lsls	r3, r3, #24
 8001c7e:	431a      	orrs	r2, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	695b      	ldr	r3, [r3, #20]
 8001c84:	071b      	lsls	r3, r3, #28
 8001c86:	4961      	ldr	r1, [pc, #388]	@ (8001e0c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0304 	and.w	r3, r3, #4
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d004      	beq.n	8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c9e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001ca2:	d00a      	beq.n	8001cba <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d035      	beq.n	8001d1c <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cb4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001cb8:	d130      	bne.n	8001d1c <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001cba:	4b54      	ldr	r3, [pc, #336]	@ (8001e0c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001cbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001cc0:	0c1b      	lsrs	r3, r3, #16
 8001cc2:	f003 0303 	and.w	r3, r3, #3
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	005b      	lsls	r3, r3, #1
 8001cca:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001ccc:	4b4f      	ldr	r3, [pc, #316]	@ (8001e0c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001cce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001cd2:	0f1b      	lsrs	r3, r3, #28
 8001cd4:	f003 0307 	and.w	r3, r3, #7
 8001cd8:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	685a      	ldr	r2, [r3, #4]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	019b      	lsls	r3, r3, #6
 8001ce4:	431a      	orrs	r2, r3
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	085b      	lsrs	r3, r3, #1
 8001cea:	3b01      	subs	r3, #1
 8001cec:	041b      	lsls	r3, r3, #16
 8001cee:	431a      	orrs	r2, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	691b      	ldr	r3, [r3, #16]
 8001cf4:	061b      	lsls	r3, r3, #24
 8001cf6:	431a      	orrs	r2, r3
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	071b      	lsls	r3, r3, #28
 8001cfc:	4943      	ldr	r1, [pc, #268]	@ (8001e0c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001d04:	4b41      	ldr	r3, [pc, #260]	@ (8001e0c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001d06:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d0a:	f023 021f 	bic.w	r2, r3, #31
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d12:	3b01      	subs	r3, #1
 8001d14:	493d      	ldr	r1, [pc, #244]	@ (8001e0c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001d16:	4313      	orrs	r3, r2
 8001d18:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d029      	beq.n	8001d7c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d2c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001d30:	d124      	bne.n	8001d7c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001d32:	4b36      	ldr	r3, [pc, #216]	@ (8001e0c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001d34:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001d38:	0c1b      	lsrs	r3, r3, #16
 8001d3a:	f003 0303 	and.w	r3, r3, #3
 8001d3e:	3301      	adds	r3, #1
 8001d40:	005b      	lsls	r3, r3, #1
 8001d42:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001d44:	4b31      	ldr	r3, [pc, #196]	@ (8001e0c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001d46:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001d4a:	0f1b      	lsrs	r3, r3, #28
 8001d4c:	f003 0307 	and.w	r3, r3, #7
 8001d50:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	685a      	ldr	r2, [r3, #4]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	019b      	lsls	r3, r3, #6
 8001d5c:	431a      	orrs	r2, r3
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	68db      	ldr	r3, [r3, #12]
 8001d62:	085b      	lsrs	r3, r3, #1
 8001d64:	3b01      	subs	r3, #1
 8001d66:	041b      	lsls	r3, r3, #16
 8001d68:	431a      	orrs	r2, r3
 8001d6a:	69bb      	ldr	r3, [r7, #24]
 8001d6c:	061b      	lsls	r3, r3, #24
 8001d6e:	431a      	orrs	r2, r3
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	071b      	lsls	r3, r3, #28
 8001d74:	4925      	ldr	r1, [pc, #148]	@ (8001e0c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001d76:	4313      	orrs	r3, r2
 8001d78:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d016      	beq.n	8001db6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	685a      	ldr	r2, [r3, #4]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	019b      	lsls	r3, r3, #6
 8001d92:	431a      	orrs	r2, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	085b      	lsrs	r3, r3, #1
 8001d9a:	3b01      	subs	r3, #1
 8001d9c:	041b      	lsls	r3, r3, #16
 8001d9e:	431a      	orrs	r2, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	691b      	ldr	r3, [r3, #16]
 8001da4:	061b      	lsls	r3, r3, #24
 8001da6:	431a      	orrs	r2, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	695b      	ldr	r3, [r3, #20]
 8001dac:	071b      	lsls	r3, r3, #28
 8001dae:	4917      	ldr	r1, [pc, #92]	@ (8001e0c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001db0:	4313      	orrs	r3, r2
 8001db2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001db6:	4b16      	ldr	r3, [pc, #88]	@ (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8001db8:	2201      	movs	r2, #1
 8001dba:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001dbc:	f7ff f910 	bl	8000fe0 <HAL_GetTick>
 8001dc0:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001dc2:	e008      	b.n	8001dd6 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001dc4:	f7ff f90c 	bl	8000fe0 <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	d901      	bls.n	8001dd6 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e09f      	b.n	8001f16 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001dd6:	4b0d      	ldr	r3, [pc, #52]	@ (8001e0c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d0f0      	beq.n	8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8001de2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	f040 8095 	bne.w	8001f14 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001dea:	4b0a      	ldr	r3, [pc, #40]	@ (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001df0:	f7ff f8f6 	bl	8000fe0 <HAL_GetTick>
 8001df4:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001df6:	e00f      	b.n	8001e18 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001df8:	f7ff f8f2 	bl	8000fe0 <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d908      	bls.n	8001e18 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e085      	b.n	8001f16 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001e0a:	bf00      	nop
 8001e0c:	40023800 	.word	0x40023800
 8001e10:	42470068 	.word	0x42470068
 8001e14:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001e18:	4b41      	ldr	r3, [pc, #260]	@ (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001e20:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001e24:	d0e8      	beq.n	8001df8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0304 	and.w	r3, r3, #4
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d003      	beq.n	8001e3a <HAL_RCCEx_PeriphCLKConfig+0x566>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d009      	beq.n	8001e4e <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d02b      	beq.n	8001e9e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d127      	bne.n	8001e9e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8001e4e:	4b34      	ldr	r3, [pc, #208]	@ (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e54:	0c1b      	lsrs	r3, r3, #16
 8001e56:	f003 0303 	and.w	r3, r3, #3
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	005b      	lsls	r3, r3, #1
 8001e5e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	699a      	ldr	r2, [r3, #24]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	69db      	ldr	r3, [r3, #28]
 8001e68:	019b      	lsls	r3, r3, #6
 8001e6a:	431a      	orrs	r2, r3
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	085b      	lsrs	r3, r3, #1
 8001e70:	3b01      	subs	r3, #1
 8001e72:	041b      	lsls	r3, r3, #16
 8001e74:	431a      	orrs	r2, r3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e7a:	061b      	lsls	r3, r3, #24
 8001e7c:	4928      	ldr	r1, [pc, #160]	@ (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001e84:	4b26      	ldr	r3, [pc, #152]	@ (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001e86:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e8a:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e92:	3b01      	subs	r3, #1
 8001e94:	021b      	lsls	r3, r3, #8
 8001e96:	4922      	ldr	r1, [pc, #136]	@ (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d01d      	beq.n	8001ee6 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001eae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001eb2:	d118      	bne.n	8001ee6 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001eb4:	4b1a      	ldr	r3, [pc, #104]	@ (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001eba:	0e1b      	lsrs	r3, r3, #24
 8001ebc:	f003 030f 	and.w	r3, r3, #15
 8001ec0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	699a      	ldr	r2, [r3, #24]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	69db      	ldr	r3, [r3, #28]
 8001eca:	019b      	lsls	r3, r3, #6
 8001ecc:	431a      	orrs	r2, r3
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6a1b      	ldr	r3, [r3, #32]
 8001ed2:	085b      	lsrs	r3, r3, #1
 8001ed4:	3b01      	subs	r3, #1
 8001ed6:	041b      	lsls	r3, r3, #16
 8001ed8:	431a      	orrs	r2, r3
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	061b      	lsls	r3, r3, #24
 8001ede:	4910      	ldr	r1, [pc, #64]	@ (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001ee6:	4b0f      	ldr	r3, [pc, #60]	@ (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8001ee8:	2201      	movs	r2, #1
 8001eea:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001eec:	f7ff f878 	bl	8000fe0 <HAL_GetTick>
 8001ef0:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001ef2:	e008      	b.n	8001f06 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001ef4:	f7ff f874 	bl	8000fe0 <HAL_GetTick>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d901      	bls.n	8001f06 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001f02:	2303      	movs	r3, #3
 8001f04:	e007      	b.n	8001f16 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001f06:	4b06      	ldr	r3, [pc, #24]	@ (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001f0e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001f12:	d1ef      	bne.n	8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3730      	adds	r7, #48	@ 0x30
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	40023800 	.word	0x40023800
 8001f24:	42470070 	.word	0x42470070

08001f28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f2c:	b0ae      	sub	sp, #184	@ 0xb8
 8001f2e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001f30:	2300      	movs	r3, #0
 8001f32:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001f36:	2300      	movs	r3, #0
 8001f38:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8001f42:	2300      	movs	r3, #0
 8001f44:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f4e:	4bcb      	ldr	r3, [pc, #812]	@ (800227c <HAL_RCC_GetSysClockFreq+0x354>)
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	f003 030c 	and.w	r3, r3, #12
 8001f56:	2b0c      	cmp	r3, #12
 8001f58:	f200 8206 	bhi.w	8002368 <HAL_RCC_GetSysClockFreq+0x440>
 8001f5c:	a201      	add	r2, pc, #4	@ (adr r2, 8001f64 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001f5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f62:	bf00      	nop
 8001f64:	08001f99 	.word	0x08001f99
 8001f68:	08002369 	.word	0x08002369
 8001f6c:	08002369 	.word	0x08002369
 8001f70:	08002369 	.word	0x08002369
 8001f74:	08001fa1 	.word	0x08001fa1
 8001f78:	08002369 	.word	0x08002369
 8001f7c:	08002369 	.word	0x08002369
 8001f80:	08002369 	.word	0x08002369
 8001f84:	08001fa9 	.word	0x08001fa9
 8001f88:	08002369 	.word	0x08002369
 8001f8c:	08002369 	.word	0x08002369
 8001f90:	08002369 	.word	0x08002369
 8001f94:	08002199 	.word	0x08002199
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f98:	4bb9      	ldr	r3, [pc, #740]	@ (8002280 <HAL_RCC_GetSysClockFreq+0x358>)
 8001f9a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8001f9e:	e1e7      	b.n	8002370 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001fa0:	4bb8      	ldr	r3, [pc, #736]	@ (8002284 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001fa2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001fa6:	e1e3      	b.n	8002370 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001fa8:	4bb4      	ldr	r3, [pc, #720]	@ (800227c <HAL_RCC_GetSysClockFreq+0x354>)
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001fb0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001fb4:	4bb1      	ldr	r3, [pc, #708]	@ (800227c <HAL_RCC_GetSysClockFreq+0x354>)
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d071      	beq.n	80020a4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fc0:	4bae      	ldr	r3, [pc, #696]	@ (800227c <HAL_RCC_GetSysClockFreq+0x354>)
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	099b      	lsrs	r3, r3, #6
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001fcc:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001fd0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001fd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fd8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001fdc:	2300      	movs	r3, #0
 8001fde:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001fe2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001fe6:	4622      	mov	r2, r4
 8001fe8:	462b      	mov	r3, r5
 8001fea:	f04f 0000 	mov.w	r0, #0
 8001fee:	f04f 0100 	mov.w	r1, #0
 8001ff2:	0159      	lsls	r1, r3, #5
 8001ff4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ff8:	0150      	lsls	r0, r2, #5
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	460b      	mov	r3, r1
 8001ffe:	4621      	mov	r1, r4
 8002000:	1a51      	subs	r1, r2, r1
 8002002:	6439      	str	r1, [r7, #64]	@ 0x40
 8002004:	4629      	mov	r1, r5
 8002006:	eb63 0301 	sbc.w	r3, r3, r1
 800200a:	647b      	str	r3, [r7, #68]	@ 0x44
 800200c:	f04f 0200 	mov.w	r2, #0
 8002010:	f04f 0300 	mov.w	r3, #0
 8002014:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002018:	4649      	mov	r1, r9
 800201a:	018b      	lsls	r3, r1, #6
 800201c:	4641      	mov	r1, r8
 800201e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002022:	4641      	mov	r1, r8
 8002024:	018a      	lsls	r2, r1, #6
 8002026:	4641      	mov	r1, r8
 8002028:	1a51      	subs	r1, r2, r1
 800202a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800202c:	4649      	mov	r1, r9
 800202e:	eb63 0301 	sbc.w	r3, r3, r1
 8002032:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002034:	f04f 0200 	mov.w	r2, #0
 8002038:	f04f 0300 	mov.w	r3, #0
 800203c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002040:	4649      	mov	r1, r9
 8002042:	00cb      	lsls	r3, r1, #3
 8002044:	4641      	mov	r1, r8
 8002046:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800204a:	4641      	mov	r1, r8
 800204c:	00ca      	lsls	r2, r1, #3
 800204e:	4610      	mov	r0, r2
 8002050:	4619      	mov	r1, r3
 8002052:	4603      	mov	r3, r0
 8002054:	4622      	mov	r2, r4
 8002056:	189b      	adds	r3, r3, r2
 8002058:	633b      	str	r3, [r7, #48]	@ 0x30
 800205a:	462b      	mov	r3, r5
 800205c:	460a      	mov	r2, r1
 800205e:	eb42 0303 	adc.w	r3, r2, r3
 8002062:	637b      	str	r3, [r7, #52]	@ 0x34
 8002064:	f04f 0200 	mov.w	r2, #0
 8002068:	f04f 0300 	mov.w	r3, #0
 800206c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002070:	4629      	mov	r1, r5
 8002072:	024b      	lsls	r3, r1, #9
 8002074:	4621      	mov	r1, r4
 8002076:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800207a:	4621      	mov	r1, r4
 800207c:	024a      	lsls	r2, r1, #9
 800207e:	4610      	mov	r0, r2
 8002080:	4619      	mov	r1, r3
 8002082:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002086:	2200      	movs	r2, #0
 8002088:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800208c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002090:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002094:	f7fe f8bc 	bl	8000210 <__aeabi_uldivmod>
 8002098:	4602      	mov	r2, r0
 800209a:	460b      	mov	r3, r1
 800209c:	4613      	mov	r3, r2
 800209e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80020a2:	e067      	b.n	8002174 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020a4:	4b75      	ldr	r3, [pc, #468]	@ (800227c <HAL_RCC_GetSysClockFreq+0x354>)
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	099b      	lsrs	r3, r3, #6
 80020aa:	2200      	movs	r2, #0
 80020ac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80020b0:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80020b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80020b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020bc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80020be:	2300      	movs	r3, #0
 80020c0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80020c2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80020c6:	4622      	mov	r2, r4
 80020c8:	462b      	mov	r3, r5
 80020ca:	f04f 0000 	mov.w	r0, #0
 80020ce:	f04f 0100 	mov.w	r1, #0
 80020d2:	0159      	lsls	r1, r3, #5
 80020d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80020d8:	0150      	lsls	r0, r2, #5
 80020da:	4602      	mov	r2, r0
 80020dc:	460b      	mov	r3, r1
 80020de:	4621      	mov	r1, r4
 80020e0:	1a51      	subs	r1, r2, r1
 80020e2:	62b9      	str	r1, [r7, #40]	@ 0x28
 80020e4:	4629      	mov	r1, r5
 80020e6:	eb63 0301 	sbc.w	r3, r3, r1
 80020ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80020ec:	f04f 0200 	mov.w	r2, #0
 80020f0:	f04f 0300 	mov.w	r3, #0
 80020f4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80020f8:	4649      	mov	r1, r9
 80020fa:	018b      	lsls	r3, r1, #6
 80020fc:	4641      	mov	r1, r8
 80020fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002102:	4641      	mov	r1, r8
 8002104:	018a      	lsls	r2, r1, #6
 8002106:	4641      	mov	r1, r8
 8002108:	ebb2 0a01 	subs.w	sl, r2, r1
 800210c:	4649      	mov	r1, r9
 800210e:	eb63 0b01 	sbc.w	fp, r3, r1
 8002112:	f04f 0200 	mov.w	r2, #0
 8002116:	f04f 0300 	mov.w	r3, #0
 800211a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800211e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002122:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002126:	4692      	mov	sl, r2
 8002128:	469b      	mov	fp, r3
 800212a:	4623      	mov	r3, r4
 800212c:	eb1a 0303 	adds.w	r3, sl, r3
 8002130:	623b      	str	r3, [r7, #32]
 8002132:	462b      	mov	r3, r5
 8002134:	eb4b 0303 	adc.w	r3, fp, r3
 8002138:	627b      	str	r3, [r7, #36]	@ 0x24
 800213a:	f04f 0200 	mov.w	r2, #0
 800213e:	f04f 0300 	mov.w	r3, #0
 8002142:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002146:	4629      	mov	r1, r5
 8002148:	028b      	lsls	r3, r1, #10
 800214a:	4621      	mov	r1, r4
 800214c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002150:	4621      	mov	r1, r4
 8002152:	028a      	lsls	r2, r1, #10
 8002154:	4610      	mov	r0, r2
 8002156:	4619      	mov	r1, r3
 8002158:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800215c:	2200      	movs	r2, #0
 800215e:	673b      	str	r3, [r7, #112]	@ 0x70
 8002160:	677a      	str	r2, [r7, #116]	@ 0x74
 8002162:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002166:	f7fe f853 	bl	8000210 <__aeabi_uldivmod>
 800216a:	4602      	mov	r2, r0
 800216c:	460b      	mov	r3, r1
 800216e:	4613      	mov	r3, r2
 8002170:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002174:	4b41      	ldr	r3, [pc, #260]	@ (800227c <HAL_RCC_GetSysClockFreq+0x354>)
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	0c1b      	lsrs	r3, r3, #16
 800217a:	f003 0303 	and.w	r3, r3, #3
 800217e:	3301      	adds	r3, #1
 8002180:	005b      	lsls	r3, r3, #1
 8002182:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8002186:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800218a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800218e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002192:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002196:	e0eb      	b.n	8002370 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002198:	4b38      	ldr	r3, [pc, #224]	@ (800227c <HAL_RCC_GetSysClockFreq+0x354>)
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80021a0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021a4:	4b35      	ldr	r3, [pc, #212]	@ (800227c <HAL_RCC_GetSysClockFreq+0x354>)
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d06b      	beq.n	8002288 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021b0:	4b32      	ldr	r3, [pc, #200]	@ (800227c <HAL_RCC_GetSysClockFreq+0x354>)
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	099b      	lsrs	r3, r3, #6
 80021b6:	2200      	movs	r2, #0
 80021b8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80021ba:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80021bc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80021be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021c2:	663b      	str	r3, [r7, #96]	@ 0x60
 80021c4:	2300      	movs	r3, #0
 80021c6:	667b      	str	r3, [r7, #100]	@ 0x64
 80021c8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80021cc:	4622      	mov	r2, r4
 80021ce:	462b      	mov	r3, r5
 80021d0:	f04f 0000 	mov.w	r0, #0
 80021d4:	f04f 0100 	mov.w	r1, #0
 80021d8:	0159      	lsls	r1, r3, #5
 80021da:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80021de:	0150      	lsls	r0, r2, #5
 80021e0:	4602      	mov	r2, r0
 80021e2:	460b      	mov	r3, r1
 80021e4:	4621      	mov	r1, r4
 80021e6:	1a51      	subs	r1, r2, r1
 80021e8:	61b9      	str	r1, [r7, #24]
 80021ea:	4629      	mov	r1, r5
 80021ec:	eb63 0301 	sbc.w	r3, r3, r1
 80021f0:	61fb      	str	r3, [r7, #28]
 80021f2:	f04f 0200 	mov.w	r2, #0
 80021f6:	f04f 0300 	mov.w	r3, #0
 80021fa:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80021fe:	4659      	mov	r1, fp
 8002200:	018b      	lsls	r3, r1, #6
 8002202:	4651      	mov	r1, sl
 8002204:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002208:	4651      	mov	r1, sl
 800220a:	018a      	lsls	r2, r1, #6
 800220c:	4651      	mov	r1, sl
 800220e:	ebb2 0801 	subs.w	r8, r2, r1
 8002212:	4659      	mov	r1, fp
 8002214:	eb63 0901 	sbc.w	r9, r3, r1
 8002218:	f04f 0200 	mov.w	r2, #0
 800221c:	f04f 0300 	mov.w	r3, #0
 8002220:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002224:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002228:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800222c:	4690      	mov	r8, r2
 800222e:	4699      	mov	r9, r3
 8002230:	4623      	mov	r3, r4
 8002232:	eb18 0303 	adds.w	r3, r8, r3
 8002236:	613b      	str	r3, [r7, #16]
 8002238:	462b      	mov	r3, r5
 800223a:	eb49 0303 	adc.w	r3, r9, r3
 800223e:	617b      	str	r3, [r7, #20]
 8002240:	f04f 0200 	mov.w	r2, #0
 8002244:	f04f 0300 	mov.w	r3, #0
 8002248:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800224c:	4629      	mov	r1, r5
 800224e:	024b      	lsls	r3, r1, #9
 8002250:	4621      	mov	r1, r4
 8002252:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002256:	4621      	mov	r1, r4
 8002258:	024a      	lsls	r2, r1, #9
 800225a:	4610      	mov	r0, r2
 800225c:	4619      	mov	r1, r3
 800225e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002262:	2200      	movs	r2, #0
 8002264:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002266:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002268:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800226c:	f7fd ffd0 	bl	8000210 <__aeabi_uldivmod>
 8002270:	4602      	mov	r2, r0
 8002272:	460b      	mov	r3, r1
 8002274:	4613      	mov	r3, r2
 8002276:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800227a:	e065      	b.n	8002348 <HAL_RCC_GetSysClockFreq+0x420>
 800227c:	40023800 	.word	0x40023800
 8002280:	00f42400 	.word	0x00f42400
 8002284:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002288:	4b3d      	ldr	r3, [pc, #244]	@ (8002380 <HAL_RCC_GetSysClockFreq+0x458>)
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	099b      	lsrs	r3, r3, #6
 800228e:	2200      	movs	r2, #0
 8002290:	4618      	mov	r0, r3
 8002292:	4611      	mov	r1, r2
 8002294:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002298:	653b      	str	r3, [r7, #80]	@ 0x50
 800229a:	2300      	movs	r3, #0
 800229c:	657b      	str	r3, [r7, #84]	@ 0x54
 800229e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80022a2:	4642      	mov	r2, r8
 80022a4:	464b      	mov	r3, r9
 80022a6:	f04f 0000 	mov.w	r0, #0
 80022aa:	f04f 0100 	mov.w	r1, #0
 80022ae:	0159      	lsls	r1, r3, #5
 80022b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022b4:	0150      	lsls	r0, r2, #5
 80022b6:	4602      	mov	r2, r0
 80022b8:	460b      	mov	r3, r1
 80022ba:	4641      	mov	r1, r8
 80022bc:	1a51      	subs	r1, r2, r1
 80022be:	60b9      	str	r1, [r7, #8]
 80022c0:	4649      	mov	r1, r9
 80022c2:	eb63 0301 	sbc.w	r3, r3, r1
 80022c6:	60fb      	str	r3, [r7, #12]
 80022c8:	f04f 0200 	mov.w	r2, #0
 80022cc:	f04f 0300 	mov.w	r3, #0
 80022d0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80022d4:	4659      	mov	r1, fp
 80022d6:	018b      	lsls	r3, r1, #6
 80022d8:	4651      	mov	r1, sl
 80022da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80022de:	4651      	mov	r1, sl
 80022e0:	018a      	lsls	r2, r1, #6
 80022e2:	4651      	mov	r1, sl
 80022e4:	1a54      	subs	r4, r2, r1
 80022e6:	4659      	mov	r1, fp
 80022e8:	eb63 0501 	sbc.w	r5, r3, r1
 80022ec:	f04f 0200 	mov.w	r2, #0
 80022f0:	f04f 0300 	mov.w	r3, #0
 80022f4:	00eb      	lsls	r3, r5, #3
 80022f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80022fa:	00e2      	lsls	r2, r4, #3
 80022fc:	4614      	mov	r4, r2
 80022fe:	461d      	mov	r5, r3
 8002300:	4643      	mov	r3, r8
 8002302:	18e3      	adds	r3, r4, r3
 8002304:	603b      	str	r3, [r7, #0]
 8002306:	464b      	mov	r3, r9
 8002308:	eb45 0303 	adc.w	r3, r5, r3
 800230c:	607b      	str	r3, [r7, #4]
 800230e:	f04f 0200 	mov.w	r2, #0
 8002312:	f04f 0300 	mov.w	r3, #0
 8002316:	e9d7 4500 	ldrd	r4, r5, [r7]
 800231a:	4629      	mov	r1, r5
 800231c:	028b      	lsls	r3, r1, #10
 800231e:	4621      	mov	r1, r4
 8002320:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002324:	4621      	mov	r1, r4
 8002326:	028a      	lsls	r2, r1, #10
 8002328:	4610      	mov	r0, r2
 800232a:	4619      	mov	r1, r3
 800232c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002330:	2200      	movs	r2, #0
 8002332:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002334:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002336:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800233a:	f7fd ff69 	bl	8000210 <__aeabi_uldivmod>
 800233e:	4602      	mov	r2, r0
 8002340:	460b      	mov	r3, r1
 8002342:	4613      	mov	r3, r2
 8002344:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002348:	4b0d      	ldr	r3, [pc, #52]	@ (8002380 <HAL_RCC_GetSysClockFreq+0x458>)
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	0f1b      	lsrs	r3, r3, #28
 800234e:	f003 0307 	and.w	r3, r3, #7
 8002352:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8002356:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800235a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800235e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002362:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002366:	e003      	b.n	8002370 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002368:	4b06      	ldr	r3, [pc, #24]	@ (8002384 <HAL_RCC_GetSysClockFreq+0x45c>)
 800236a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800236e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002370:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002374:	4618      	mov	r0, r3
 8002376:	37b8      	adds	r7, #184	@ 0xb8
 8002378:	46bd      	mov	sp, r7
 800237a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800237e:	bf00      	nop
 8002380:	40023800 	.word	0x40023800
 8002384:	00f42400 	.word	0x00f42400

08002388 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b086      	sub	sp, #24
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d101      	bne.n	800239a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e28d      	b.n	80028b6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0301 	and.w	r3, r3, #1
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	f000 8083 	beq.w	80024ae <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80023a8:	4b94      	ldr	r3, [pc, #592]	@ (80025fc <HAL_RCC_OscConfig+0x274>)
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	f003 030c 	and.w	r3, r3, #12
 80023b0:	2b04      	cmp	r3, #4
 80023b2:	d019      	beq.n	80023e8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80023b4:	4b91      	ldr	r3, [pc, #580]	@ (80025fc <HAL_RCC_OscConfig+0x274>)
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80023bc:	2b08      	cmp	r3, #8
 80023be:	d106      	bne.n	80023ce <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80023c0:	4b8e      	ldr	r3, [pc, #568]	@ (80025fc <HAL_RCC_OscConfig+0x274>)
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023c8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80023cc:	d00c      	beq.n	80023e8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023ce:	4b8b      	ldr	r3, [pc, #556]	@ (80025fc <HAL_RCC_OscConfig+0x274>)
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80023d6:	2b0c      	cmp	r3, #12
 80023d8:	d112      	bne.n	8002400 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023da:	4b88      	ldr	r3, [pc, #544]	@ (80025fc <HAL_RCC_OscConfig+0x274>)
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80023e6:	d10b      	bne.n	8002400 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023e8:	4b84      	ldr	r3, [pc, #528]	@ (80025fc <HAL_RCC_OscConfig+0x274>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d05b      	beq.n	80024ac <HAL_RCC_OscConfig+0x124>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d157      	bne.n	80024ac <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	e25a      	b.n	80028b6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002408:	d106      	bne.n	8002418 <HAL_RCC_OscConfig+0x90>
 800240a:	4b7c      	ldr	r3, [pc, #496]	@ (80025fc <HAL_RCC_OscConfig+0x274>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a7b      	ldr	r2, [pc, #492]	@ (80025fc <HAL_RCC_OscConfig+0x274>)
 8002410:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002414:	6013      	str	r3, [r2, #0]
 8002416:	e01d      	b.n	8002454 <HAL_RCC_OscConfig+0xcc>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002420:	d10c      	bne.n	800243c <HAL_RCC_OscConfig+0xb4>
 8002422:	4b76      	ldr	r3, [pc, #472]	@ (80025fc <HAL_RCC_OscConfig+0x274>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a75      	ldr	r2, [pc, #468]	@ (80025fc <HAL_RCC_OscConfig+0x274>)
 8002428:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800242c:	6013      	str	r3, [r2, #0]
 800242e:	4b73      	ldr	r3, [pc, #460]	@ (80025fc <HAL_RCC_OscConfig+0x274>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a72      	ldr	r2, [pc, #456]	@ (80025fc <HAL_RCC_OscConfig+0x274>)
 8002434:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002438:	6013      	str	r3, [r2, #0]
 800243a:	e00b      	b.n	8002454 <HAL_RCC_OscConfig+0xcc>
 800243c:	4b6f      	ldr	r3, [pc, #444]	@ (80025fc <HAL_RCC_OscConfig+0x274>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a6e      	ldr	r2, [pc, #440]	@ (80025fc <HAL_RCC_OscConfig+0x274>)
 8002442:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002446:	6013      	str	r3, [r2, #0]
 8002448:	4b6c      	ldr	r3, [pc, #432]	@ (80025fc <HAL_RCC_OscConfig+0x274>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a6b      	ldr	r2, [pc, #428]	@ (80025fc <HAL_RCC_OscConfig+0x274>)
 800244e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002452:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d013      	beq.n	8002484 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800245c:	f7fe fdc0 	bl	8000fe0 <HAL_GetTick>
 8002460:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002462:	e008      	b.n	8002476 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002464:	f7fe fdbc 	bl	8000fe0 <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	2b64      	cmp	r3, #100	@ 0x64
 8002470:	d901      	bls.n	8002476 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e21f      	b.n	80028b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002476:	4b61      	ldr	r3, [pc, #388]	@ (80025fc <HAL_RCC_OscConfig+0x274>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d0f0      	beq.n	8002464 <HAL_RCC_OscConfig+0xdc>
 8002482:	e014      	b.n	80024ae <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002484:	f7fe fdac 	bl	8000fe0 <HAL_GetTick>
 8002488:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800248a:	e008      	b.n	800249e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800248c:	f7fe fda8 	bl	8000fe0 <HAL_GetTick>
 8002490:	4602      	mov	r2, r0
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	2b64      	cmp	r3, #100	@ 0x64
 8002498:	d901      	bls.n	800249e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e20b      	b.n	80028b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800249e:	4b57      	ldr	r3, [pc, #348]	@ (80025fc <HAL_RCC_OscConfig+0x274>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d1f0      	bne.n	800248c <HAL_RCC_OscConfig+0x104>
 80024aa:	e000      	b.n	80024ae <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0302 	and.w	r3, r3, #2
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d06f      	beq.n	800259a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80024ba:	4b50      	ldr	r3, [pc, #320]	@ (80025fc <HAL_RCC_OscConfig+0x274>)
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	f003 030c 	and.w	r3, r3, #12
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d017      	beq.n	80024f6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80024c6:	4b4d      	ldr	r3, [pc, #308]	@ (80025fc <HAL_RCC_OscConfig+0x274>)
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80024ce:	2b08      	cmp	r3, #8
 80024d0:	d105      	bne.n	80024de <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80024d2:	4b4a      	ldr	r3, [pc, #296]	@ (80025fc <HAL_RCC_OscConfig+0x274>)
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d00b      	beq.n	80024f6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024de:	4b47      	ldr	r3, [pc, #284]	@ (80025fc <HAL_RCC_OscConfig+0x274>)
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80024e6:	2b0c      	cmp	r3, #12
 80024e8:	d11c      	bne.n	8002524 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024ea:	4b44      	ldr	r3, [pc, #272]	@ (80025fc <HAL_RCC_OscConfig+0x274>)
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d116      	bne.n	8002524 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024f6:	4b41      	ldr	r3, [pc, #260]	@ (80025fc <HAL_RCC_OscConfig+0x274>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0302 	and.w	r3, r3, #2
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d005      	beq.n	800250e <HAL_RCC_OscConfig+0x186>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	68db      	ldr	r3, [r3, #12]
 8002506:	2b01      	cmp	r3, #1
 8002508:	d001      	beq.n	800250e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e1d3      	b.n	80028b6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800250e:	4b3b      	ldr	r3, [pc, #236]	@ (80025fc <HAL_RCC_OscConfig+0x274>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	691b      	ldr	r3, [r3, #16]
 800251a:	00db      	lsls	r3, r3, #3
 800251c:	4937      	ldr	r1, [pc, #220]	@ (80025fc <HAL_RCC_OscConfig+0x274>)
 800251e:	4313      	orrs	r3, r2
 8002520:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002522:	e03a      	b.n	800259a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d020      	beq.n	800256e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800252c:	4b34      	ldr	r3, [pc, #208]	@ (8002600 <HAL_RCC_OscConfig+0x278>)
 800252e:	2201      	movs	r2, #1
 8002530:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002532:	f7fe fd55 	bl	8000fe0 <HAL_GetTick>
 8002536:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002538:	e008      	b.n	800254c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800253a:	f7fe fd51 	bl	8000fe0 <HAL_GetTick>
 800253e:	4602      	mov	r2, r0
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	2b02      	cmp	r3, #2
 8002546:	d901      	bls.n	800254c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002548:	2303      	movs	r3, #3
 800254a:	e1b4      	b.n	80028b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800254c:	4b2b      	ldr	r3, [pc, #172]	@ (80025fc <HAL_RCC_OscConfig+0x274>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0302 	and.w	r3, r3, #2
 8002554:	2b00      	cmp	r3, #0
 8002556:	d0f0      	beq.n	800253a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002558:	4b28      	ldr	r3, [pc, #160]	@ (80025fc <HAL_RCC_OscConfig+0x274>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	691b      	ldr	r3, [r3, #16]
 8002564:	00db      	lsls	r3, r3, #3
 8002566:	4925      	ldr	r1, [pc, #148]	@ (80025fc <HAL_RCC_OscConfig+0x274>)
 8002568:	4313      	orrs	r3, r2
 800256a:	600b      	str	r3, [r1, #0]
 800256c:	e015      	b.n	800259a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800256e:	4b24      	ldr	r3, [pc, #144]	@ (8002600 <HAL_RCC_OscConfig+0x278>)
 8002570:	2200      	movs	r2, #0
 8002572:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002574:	f7fe fd34 	bl	8000fe0 <HAL_GetTick>
 8002578:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800257a:	e008      	b.n	800258e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800257c:	f7fe fd30 	bl	8000fe0 <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	2b02      	cmp	r3, #2
 8002588:	d901      	bls.n	800258e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	e193      	b.n	80028b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800258e:	4b1b      	ldr	r3, [pc, #108]	@ (80025fc <HAL_RCC_OscConfig+0x274>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0302 	and.w	r3, r3, #2
 8002596:	2b00      	cmp	r3, #0
 8002598:	d1f0      	bne.n	800257c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0308 	and.w	r3, r3, #8
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d036      	beq.n	8002614 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	695b      	ldr	r3, [r3, #20]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d016      	beq.n	80025dc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025ae:	4b15      	ldr	r3, [pc, #84]	@ (8002604 <HAL_RCC_OscConfig+0x27c>)
 80025b0:	2201      	movs	r2, #1
 80025b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025b4:	f7fe fd14 	bl	8000fe0 <HAL_GetTick>
 80025b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025ba:	e008      	b.n	80025ce <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025bc:	f7fe fd10 	bl	8000fe0 <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d901      	bls.n	80025ce <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e173      	b.n	80028b6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025ce:	4b0b      	ldr	r3, [pc, #44]	@ (80025fc <HAL_RCC_OscConfig+0x274>)
 80025d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025d2:	f003 0302 	and.w	r3, r3, #2
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d0f0      	beq.n	80025bc <HAL_RCC_OscConfig+0x234>
 80025da:	e01b      	b.n	8002614 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025dc:	4b09      	ldr	r3, [pc, #36]	@ (8002604 <HAL_RCC_OscConfig+0x27c>)
 80025de:	2200      	movs	r2, #0
 80025e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025e2:	f7fe fcfd 	bl	8000fe0 <HAL_GetTick>
 80025e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025e8:	e00e      	b.n	8002608 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025ea:	f7fe fcf9 	bl	8000fe0 <HAL_GetTick>
 80025ee:	4602      	mov	r2, r0
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	1ad3      	subs	r3, r2, r3
 80025f4:	2b02      	cmp	r3, #2
 80025f6:	d907      	bls.n	8002608 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80025f8:	2303      	movs	r3, #3
 80025fa:	e15c      	b.n	80028b6 <HAL_RCC_OscConfig+0x52e>
 80025fc:	40023800 	.word	0x40023800
 8002600:	42470000 	.word	0x42470000
 8002604:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002608:	4b8a      	ldr	r3, [pc, #552]	@ (8002834 <HAL_RCC_OscConfig+0x4ac>)
 800260a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800260c:	f003 0302 	and.w	r3, r3, #2
 8002610:	2b00      	cmp	r3, #0
 8002612:	d1ea      	bne.n	80025ea <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0304 	and.w	r3, r3, #4
 800261c:	2b00      	cmp	r3, #0
 800261e:	f000 8097 	beq.w	8002750 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002622:	2300      	movs	r3, #0
 8002624:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002626:	4b83      	ldr	r3, [pc, #524]	@ (8002834 <HAL_RCC_OscConfig+0x4ac>)
 8002628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800262a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d10f      	bne.n	8002652 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002632:	2300      	movs	r3, #0
 8002634:	60bb      	str	r3, [r7, #8]
 8002636:	4b7f      	ldr	r3, [pc, #508]	@ (8002834 <HAL_RCC_OscConfig+0x4ac>)
 8002638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800263a:	4a7e      	ldr	r2, [pc, #504]	@ (8002834 <HAL_RCC_OscConfig+0x4ac>)
 800263c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002640:	6413      	str	r3, [r2, #64]	@ 0x40
 8002642:	4b7c      	ldr	r3, [pc, #496]	@ (8002834 <HAL_RCC_OscConfig+0x4ac>)
 8002644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002646:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800264a:	60bb      	str	r3, [r7, #8]
 800264c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800264e:	2301      	movs	r3, #1
 8002650:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002652:	4b79      	ldr	r3, [pc, #484]	@ (8002838 <HAL_RCC_OscConfig+0x4b0>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800265a:	2b00      	cmp	r3, #0
 800265c:	d118      	bne.n	8002690 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800265e:	4b76      	ldr	r3, [pc, #472]	@ (8002838 <HAL_RCC_OscConfig+0x4b0>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a75      	ldr	r2, [pc, #468]	@ (8002838 <HAL_RCC_OscConfig+0x4b0>)
 8002664:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002668:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800266a:	f7fe fcb9 	bl	8000fe0 <HAL_GetTick>
 800266e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002670:	e008      	b.n	8002684 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002672:	f7fe fcb5 	bl	8000fe0 <HAL_GetTick>
 8002676:	4602      	mov	r2, r0
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	2b02      	cmp	r3, #2
 800267e:	d901      	bls.n	8002684 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002680:	2303      	movs	r3, #3
 8002682:	e118      	b.n	80028b6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002684:	4b6c      	ldr	r3, [pc, #432]	@ (8002838 <HAL_RCC_OscConfig+0x4b0>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800268c:	2b00      	cmp	r3, #0
 800268e:	d0f0      	beq.n	8002672 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	2b01      	cmp	r3, #1
 8002696:	d106      	bne.n	80026a6 <HAL_RCC_OscConfig+0x31e>
 8002698:	4b66      	ldr	r3, [pc, #408]	@ (8002834 <HAL_RCC_OscConfig+0x4ac>)
 800269a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800269c:	4a65      	ldr	r2, [pc, #404]	@ (8002834 <HAL_RCC_OscConfig+0x4ac>)
 800269e:	f043 0301 	orr.w	r3, r3, #1
 80026a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80026a4:	e01c      	b.n	80026e0 <HAL_RCC_OscConfig+0x358>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	2b05      	cmp	r3, #5
 80026ac:	d10c      	bne.n	80026c8 <HAL_RCC_OscConfig+0x340>
 80026ae:	4b61      	ldr	r3, [pc, #388]	@ (8002834 <HAL_RCC_OscConfig+0x4ac>)
 80026b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026b2:	4a60      	ldr	r2, [pc, #384]	@ (8002834 <HAL_RCC_OscConfig+0x4ac>)
 80026b4:	f043 0304 	orr.w	r3, r3, #4
 80026b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80026ba:	4b5e      	ldr	r3, [pc, #376]	@ (8002834 <HAL_RCC_OscConfig+0x4ac>)
 80026bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026be:	4a5d      	ldr	r2, [pc, #372]	@ (8002834 <HAL_RCC_OscConfig+0x4ac>)
 80026c0:	f043 0301 	orr.w	r3, r3, #1
 80026c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80026c6:	e00b      	b.n	80026e0 <HAL_RCC_OscConfig+0x358>
 80026c8:	4b5a      	ldr	r3, [pc, #360]	@ (8002834 <HAL_RCC_OscConfig+0x4ac>)
 80026ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026cc:	4a59      	ldr	r2, [pc, #356]	@ (8002834 <HAL_RCC_OscConfig+0x4ac>)
 80026ce:	f023 0301 	bic.w	r3, r3, #1
 80026d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80026d4:	4b57      	ldr	r3, [pc, #348]	@ (8002834 <HAL_RCC_OscConfig+0x4ac>)
 80026d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026d8:	4a56      	ldr	r2, [pc, #344]	@ (8002834 <HAL_RCC_OscConfig+0x4ac>)
 80026da:	f023 0304 	bic.w	r3, r3, #4
 80026de:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d015      	beq.n	8002714 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026e8:	f7fe fc7a 	bl	8000fe0 <HAL_GetTick>
 80026ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026ee:	e00a      	b.n	8002706 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026f0:	f7fe fc76 	bl	8000fe0 <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026fe:	4293      	cmp	r3, r2
 8002700:	d901      	bls.n	8002706 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002702:	2303      	movs	r3, #3
 8002704:	e0d7      	b.n	80028b6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002706:	4b4b      	ldr	r3, [pc, #300]	@ (8002834 <HAL_RCC_OscConfig+0x4ac>)
 8002708:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800270a:	f003 0302 	and.w	r3, r3, #2
 800270e:	2b00      	cmp	r3, #0
 8002710:	d0ee      	beq.n	80026f0 <HAL_RCC_OscConfig+0x368>
 8002712:	e014      	b.n	800273e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002714:	f7fe fc64 	bl	8000fe0 <HAL_GetTick>
 8002718:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800271a:	e00a      	b.n	8002732 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800271c:	f7fe fc60 	bl	8000fe0 <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	f241 3288 	movw	r2, #5000	@ 0x1388
 800272a:	4293      	cmp	r3, r2
 800272c:	d901      	bls.n	8002732 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800272e:	2303      	movs	r3, #3
 8002730:	e0c1      	b.n	80028b6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002732:	4b40      	ldr	r3, [pc, #256]	@ (8002834 <HAL_RCC_OscConfig+0x4ac>)
 8002734:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002736:	f003 0302 	and.w	r3, r3, #2
 800273a:	2b00      	cmp	r3, #0
 800273c:	d1ee      	bne.n	800271c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800273e:	7dfb      	ldrb	r3, [r7, #23]
 8002740:	2b01      	cmp	r3, #1
 8002742:	d105      	bne.n	8002750 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002744:	4b3b      	ldr	r3, [pc, #236]	@ (8002834 <HAL_RCC_OscConfig+0x4ac>)
 8002746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002748:	4a3a      	ldr	r2, [pc, #232]	@ (8002834 <HAL_RCC_OscConfig+0x4ac>)
 800274a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800274e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	699b      	ldr	r3, [r3, #24]
 8002754:	2b00      	cmp	r3, #0
 8002756:	f000 80ad 	beq.w	80028b4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800275a:	4b36      	ldr	r3, [pc, #216]	@ (8002834 <HAL_RCC_OscConfig+0x4ac>)
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	f003 030c 	and.w	r3, r3, #12
 8002762:	2b08      	cmp	r3, #8
 8002764:	d060      	beq.n	8002828 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	699b      	ldr	r3, [r3, #24]
 800276a:	2b02      	cmp	r3, #2
 800276c:	d145      	bne.n	80027fa <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800276e:	4b33      	ldr	r3, [pc, #204]	@ (800283c <HAL_RCC_OscConfig+0x4b4>)
 8002770:	2200      	movs	r2, #0
 8002772:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002774:	f7fe fc34 	bl	8000fe0 <HAL_GetTick>
 8002778:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800277a:	e008      	b.n	800278e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800277c:	f7fe fc30 	bl	8000fe0 <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	2b02      	cmp	r3, #2
 8002788:	d901      	bls.n	800278e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800278a:	2303      	movs	r3, #3
 800278c:	e093      	b.n	80028b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800278e:	4b29      	ldr	r3, [pc, #164]	@ (8002834 <HAL_RCC_OscConfig+0x4ac>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d1f0      	bne.n	800277c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	69da      	ldr	r2, [r3, #28]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6a1b      	ldr	r3, [r3, #32]
 80027a2:	431a      	orrs	r2, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027a8:	019b      	lsls	r3, r3, #6
 80027aa:	431a      	orrs	r2, r3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027b0:	085b      	lsrs	r3, r3, #1
 80027b2:	3b01      	subs	r3, #1
 80027b4:	041b      	lsls	r3, r3, #16
 80027b6:	431a      	orrs	r2, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027bc:	061b      	lsls	r3, r3, #24
 80027be:	431a      	orrs	r2, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027c4:	071b      	lsls	r3, r3, #28
 80027c6:	491b      	ldr	r1, [pc, #108]	@ (8002834 <HAL_RCC_OscConfig+0x4ac>)
 80027c8:	4313      	orrs	r3, r2
 80027ca:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027cc:	4b1b      	ldr	r3, [pc, #108]	@ (800283c <HAL_RCC_OscConfig+0x4b4>)
 80027ce:	2201      	movs	r2, #1
 80027d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d2:	f7fe fc05 	bl	8000fe0 <HAL_GetTick>
 80027d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027d8:	e008      	b.n	80027ec <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027da:	f7fe fc01 	bl	8000fe0 <HAL_GetTick>
 80027de:	4602      	mov	r2, r0
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d901      	bls.n	80027ec <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80027e8:	2303      	movs	r3, #3
 80027ea:	e064      	b.n	80028b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027ec:	4b11      	ldr	r3, [pc, #68]	@ (8002834 <HAL_RCC_OscConfig+0x4ac>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d0f0      	beq.n	80027da <HAL_RCC_OscConfig+0x452>
 80027f8:	e05c      	b.n	80028b4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027fa:	4b10      	ldr	r3, [pc, #64]	@ (800283c <HAL_RCC_OscConfig+0x4b4>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002800:	f7fe fbee 	bl	8000fe0 <HAL_GetTick>
 8002804:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002806:	e008      	b.n	800281a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002808:	f7fe fbea 	bl	8000fe0 <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	2b02      	cmp	r3, #2
 8002814:	d901      	bls.n	800281a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e04d      	b.n	80028b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800281a:	4b06      	ldr	r3, [pc, #24]	@ (8002834 <HAL_RCC_OscConfig+0x4ac>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d1f0      	bne.n	8002808 <HAL_RCC_OscConfig+0x480>
 8002826:	e045      	b.n	80028b4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	699b      	ldr	r3, [r3, #24]
 800282c:	2b01      	cmp	r3, #1
 800282e:	d107      	bne.n	8002840 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	e040      	b.n	80028b6 <HAL_RCC_OscConfig+0x52e>
 8002834:	40023800 	.word	0x40023800
 8002838:	40007000 	.word	0x40007000
 800283c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002840:	4b1f      	ldr	r3, [pc, #124]	@ (80028c0 <HAL_RCC_OscConfig+0x538>)
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	699b      	ldr	r3, [r3, #24]
 800284a:	2b01      	cmp	r3, #1
 800284c:	d030      	beq.n	80028b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002858:	429a      	cmp	r2, r3
 800285a:	d129      	bne.n	80028b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002866:	429a      	cmp	r2, r3
 8002868:	d122      	bne.n	80028b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800286a:	68fa      	ldr	r2, [r7, #12]
 800286c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002870:	4013      	ands	r3, r2
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002876:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002878:	4293      	cmp	r3, r2
 800287a:	d119      	bne.n	80028b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002886:	085b      	lsrs	r3, r3, #1
 8002888:	3b01      	subs	r3, #1
 800288a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800288c:	429a      	cmp	r2, r3
 800288e:	d10f      	bne.n	80028b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800289a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800289c:	429a      	cmp	r2, r3
 800289e:	d107      	bne.n	80028b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028aa:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d001      	beq.n	80028b4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e000      	b.n	80028b6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80028b4:	2300      	movs	r3, #0
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3718      	adds	r7, #24
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	40023800 	.word	0x40023800

080028c4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d101      	bne.n	80028da <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e073      	b.n	80029c2 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	7f5b      	ldrb	r3, [r3, #29]
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d105      	bne.n	80028f0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2200      	movs	r2, #0
 80028e8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f7fe f8b0 	bl	8000a50 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2202      	movs	r2, #2
 80028f4:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	f003 0310 	and.w	r3, r3, #16
 8002900:	2b10      	cmp	r3, #16
 8002902:	d055      	beq.n	80029b0 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	22ca      	movs	r2, #202	@ 0xca
 800290a:	625a      	str	r2, [r3, #36]	@ 0x24
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	2253      	movs	r2, #83	@ 0x53
 8002912:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	f000 f87f 	bl	8002a18 <RTC_EnterInitMode>
 800291a:	4603      	mov	r3, r0
 800291c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800291e:	7bfb      	ldrb	r3, [r7, #15]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d12c      	bne.n	800297e <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	6812      	ldr	r2, [r2, #0]
 800292e:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8002932:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002936:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	6899      	ldr	r1, [r3, #8]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	685a      	ldr	r2, [r3, #4]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	691b      	ldr	r3, [r3, #16]
 8002946:	431a      	orrs	r2, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	695b      	ldr	r3, [r3, #20]
 800294c:	431a      	orrs	r2, r3
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	430a      	orrs	r2, r1
 8002954:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	68d2      	ldr	r2, [r2, #12]
 800295e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	6919      	ldr	r1, [r3, #16]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	041a      	lsls	r2, r3, #16
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	430a      	orrs	r2, r1
 8002972:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f000 f886 	bl	8002a86 <RTC_ExitInitMode>
 800297a:	4603      	mov	r3, r0
 800297c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800297e:	7bfb      	ldrb	r3, [r7, #15]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d110      	bne.n	80029a6 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002992:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	699a      	ldr	r2, [r3, #24]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	430a      	orrs	r2, r1
 80029a4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	22ff      	movs	r2, #255	@ 0xff
 80029ac:	625a      	str	r2, [r3, #36]	@ 0x24
 80029ae:	e001      	b.n	80029b4 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80029b0:	2300      	movs	r3, #0
 80029b2:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80029b4:	7bfb      	ldrb	r3, [r7, #15]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d102      	bne.n	80029c0 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2201      	movs	r2, #1
 80029be:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80029c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3710      	adds	r7, #16
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
	...

080029cc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80029d4:	2300      	movs	r3, #0
 80029d6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a0d      	ldr	r2, [pc, #52]	@ (8002a14 <HAL_RTC_WaitForSynchro+0x48>)
 80029de:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80029e0:	f7fe fafe 	bl	8000fe0 <HAL_GetTick>
 80029e4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80029e6:	e009      	b.n	80029fc <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80029e8:	f7fe fafa 	bl	8000fe0 <HAL_GetTick>
 80029ec:	4602      	mov	r2, r0
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80029f6:	d901      	bls.n	80029fc <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80029f8:	2303      	movs	r3, #3
 80029fa:	e007      	b.n	8002a0c <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	f003 0320 	and.w	r3, r3, #32
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d0ee      	beq.n	80029e8 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8002a0a:	2300      	movs	r3, #0
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3710      	adds	r7, #16
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	00017f5f 	.word	0x00017f5f

08002a18 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a20:	2300      	movs	r3, #0
 8002a22:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002a24:	2300      	movs	r3, #0
 8002a26:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	68db      	ldr	r3, [r3, #12]
 8002a2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d122      	bne.n	8002a7c <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	68da      	ldr	r2, [r3, #12]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002a44:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002a46:	f7fe facb 	bl	8000fe0 <HAL_GetTick>
 8002a4a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002a4c:	e00c      	b.n	8002a68 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002a4e:	f7fe fac7 	bl	8000fe0 <HAL_GetTick>
 8002a52:	4602      	mov	r2, r0
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	1ad3      	subs	r3, r2, r3
 8002a58:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002a5c:	d904      	bls.n	8002a68 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2204      	movs	r2, #4
 8002a62:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	68db      	ldr	r3, [r3, #12]
 8002a6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d102      	bne.n	8002a7c <RTC_EnterInitMode+0x64>
 8002a76:	7bfb      	ldrb	r3, [r7, #15]
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d1e8      	bne.n	8002a4e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002a7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3710      	adds	r7, #16
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}

08002a86 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002a86:	b580      	push	{r7, lr}
 8002a88:	b084      	sub	sp, #16
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	68da      	ldr	r2, [r3, #12]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002aa0:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	f003 0320 	and.w	r3, r3, #32
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d10a      	bne.n	8002ac6 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f7ff ff8b 	bl	80029cc <HAL_RTC_WaitForSynchro>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d004      	beq.n	8002ac6 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2204      	movs	r2, #4
 8002ac0:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002ac6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3710      	adds	r7, #16
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}

08002ad0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d101      	bne.n	8002ae2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e041      	b.n	8002b66 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d106      	bne.n	8002afc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f000 f839 	bl	8002b6e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2202      	movs	r2, #2
 8002b00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	3304      	adds	r3, #4
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	4610      	mov	r0, r2
 8002b10:	f000 f9c0 	bl	8002e94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2201      	movs	r2, #1
 8002b18:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2201      	movs	r2, #1
 8002b58:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002b64:	2300      	movs	r3, #0
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3708      	adds	r7, #8
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}

08002b6e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002b6e:	b480      	push	{r7}
 8002b70:	b083      	sub	sp, #12
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002b76:	bf00      	nop
 8002b78:	370c      	adds	r7, #12
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr
	...

08002b84 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b085      	sub	sp, #20
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d001      	beq.n	8002b9c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e04e      	b.n	8002c3a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2202      	movs	r2, #2
 8002ba0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	68da      	ldr	r2, [r3, #12]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f042 0201 	orr.w	r2, r2, #1
 8002bb2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a23      	ldr	r2, [pc, #140]	@ (8002c48 <HAL_TIM_Base_Start_IT+0xc4>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d022      	beq.n	8002c04 <HAL_TIM_Base_Start_IT+0x80>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bc6:	d01d      	beq.n	8002c04 <HAL_TIM_Base_Start_IT+0x80>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a1f      	ldr	r2, [pc, #124]	@ (8002c4c <HAL_TIM_Base_Start_IT+0xc8>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d018      	beq.n	8002c04 <HAL_TIM_Base_Start_IT+0x80>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a1e      	ldr	r2, [pc, #120]	@ (8002c50 <HAL_TIM_Base_Start_IT+0xcc>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d013      	beq.n	8002c04 <HAL_TIM_Base_Start_IT+0x80>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a1c      	ldr	r2, [pc, #112]	@ (8002c54 <HAL_TIM_Base_Start_IT+0xd0>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d00e      	beq.n	8002c04 <HAL_TIM_Base_Start_IT+0x80>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a1b      	ldr	r2, [pc, #108]	@ (8002c58 <HAL_TIM_Base_Start_IT+0xd4>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d009      	beq.n	8002c04 <HAL_TIM_Base_Start_IT+0x80>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a19      	ldr	r2, [pc, #100]	@ (8002c5c <HAL_TIM_Base_Start_IT+0xd8>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d004      	beq.n	8002c04 <HAL_TIM_Base_Start_IT+0x80>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a18      	ldr	r2, [pc, #96]	@ (8002c60 <HAL_TIM_Base_Start_IT+0xdc>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d111      	bne.n	8002c28 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	f003 0307 	and.w	r3, r3, #7
 8002c0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2b06      	cmp	r3, #6
 8002c14:	d010      	beq.n	8002c38 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f042 0201 	orr.w	r2, r2, #1
 8002c24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c26:	e007      	b.n	8002c38 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f042 0201 	orr.w	r2, r2, #1
 8002c36:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3714      	adds	r7, #20
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr
 8002c46:	bf00      	nop
 8002c48:	40010000 	.word	0x40010000
 8002c4c:	40000400 	.word	0x40000400
 8002c50:	40000800 	.word	0x40000800
 8002c54:	40000c00 	.word	0x40000c00
 8002c58:	40010400 	.word	0x40010400
 8002c5c:	40014000 	.word	0x40014000
 8002c60:	40001800 	.word	0x40001800

08002c64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b084      	sub	sp, #16
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	68db      	ldr	r3, [r3, #12]
 8002c72:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	691b      	ldr	r3, [r3, #16]
 8002c7a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	f003 0302 	and.w	r3, r3, #2
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d020      	beq.n	8002cc8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	f003 0302 	and.w	r3, r3, #2
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d01b      	beq.n	8002cc8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f06f 0202 	mvn.w	r2, #2
 8002c98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	699b      	ldr	r3, [r3, #24]
 8002ca6:	f003 0303 	and.w	r3, r3, #3
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d003      	beq.n	8002cb6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f000 f8d2 	bl	8002e58 <HAL_TIM_IC_CaptureCallback>
 8002cb4:	e005      	b.n	8002cc2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f000 f8c4 	bl	8002e44 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cbc:	6878      	ldr	r0, [r7, #4]
 8002cbe:	f000 f8d5 	bl	8002e6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	f003 0304 	and.w	r3, r3, #4
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d020      	beq.n	8002d14 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	f003 0304 	and.w	r3, r3, #4
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d01b      	beq.n	8002d14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f06f 0204 	mvn.w	r2, #4
 8002ce4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2202      	movs	r2, #2
 8002cea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	699b      	ldr	r3, [r3, #24]
 8002cf2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d003      	beq.n	8002d02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f000 f8ac 	bl	8002e58 <HAL_TIM_IC_CaptureCallback>
 8002d00:	e005      	b.n	8002d0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f000 f89e 	bl	8002e44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	f000 f8af 	bl	8002e6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2200      	movs	r2, #0
 8002d12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	f003 0308 	and.w	r3, r3, #8
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d020      	beq.n	8002d60 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	f003 0308 	and.w	r3, r3, #8
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d01b      	beq.n	8002d60 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f06f 0208 	mvn.w	r2, #8
 8002d30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2204      	movs	r2, #4
 8002d36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	69db      	ldr	r3, [r3, #28]
 8002d3e:	f003 0303 	and.w	r3, r3, #3
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d003      	beq.n	8002d4e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f000 f886 	bl	8002e58 <HAL_TIM_IC_CaptureCallback>
 8002d4c:	e005      	b.n	8002d5a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f000 f878 	bl	8002e44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	f000 f889 	bl	8002e6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	f003 0310 	and.w	r3, r3, #16
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d020      	beq.n	8002dac <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	f003 0310 	and.w	r3, r3, #16
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d01b      	beq.n	8002dac <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f06f 0210 	mvn.w	r2, #16
 8002d7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2208      	movs	r2, #8
 8002d82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	69db      	ldr	r3, [r3, #28]
 8002d8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d003      	beq.n	8002d9a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f000 f860 	bl	8002e58 <HAL_TIM_IC_CaptureCallback>
 8002d98:	e005      	b.n	8002da6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f000 f852 	bl	8002e44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f000 f863 	bl	8002e6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2200      	movs	r2, #0
 8002daa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	f003 0301 	and.w	r3, r3, #1
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d00c      	beq.n	8002dd0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	f003 0301 	and.w	r3, r3, #1
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d007      	beq.n	8002dd0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f06f 0201 	mvn.w	r2, #1
 8002dc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f7fd fe00 	bl	80009d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d00c      	beq.n	8002df4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d007      	beq.n	8002df4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002dec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f000 f906 	bl	8003000 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d00c      	beq.n	8002e18 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d007      	beq.n	8002e18 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002e10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f000 f834 	bl	8002e80 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	f003 0320 	and.w	r3, r3, #32
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d00c      	beq.n	8002e3c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	f003 0320 	and.w	r3, r3, #32
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d007      	beq.n	8002e3c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f06f 0220 	mvn.w	r2, #32
 8002e34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f000 f8d8 	bl	8002fec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e3c:	bf00      	nop
 8002e3e:	3710      	adds	r7, #16
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}

08002e44 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e4c:	bf00      	nop
 8002e4e:	370c      	adds	r7, #12
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr

08002e58 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e60:	bf00      	nop
 8002e62:	370c      	adds	r7, #12
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr

08002e6c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e74:	bf00      	nop
 8002e76:	370c      	adds	r7, #12
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr

08002e80 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e88:	bf00      	nop
 8002e8a:	370c      	adds	r7, #12
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr

08002e94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b085      	sub	sp, #20
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	4a46      	ldr	r2, [pc, #280]	@ (8002fc0 <TIM_Base_SetConfig+0x12c>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d013      	beq.n	8002ed4 <TIM_Base_SetConfig+0x40>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002eb2:	d00f      	beq.n	8002ed4 <TIM_Base_SetConfig+0x40>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	4a43      	ldr	r2, [pc, #268]	@ (8002fc4 <TIM_Base_SetConfig+0x130>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d00b      	beq.n	8002ed4 <TIM_Base_SetConfig+0x40>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	4a42      	ldr	r2, [pc, #264]	@ (8002fc8 <TIM_Base_SetConfig+0x134>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d007      	beq.n	8002ed4 <TIM_Base_SetConfig+0x40>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	4a41      	ldr	r2, [pc, #260]	@ (8002fcc <TIM_Base_SetConfig+0x138>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d003      	beq.n	8002ed4 <TIM_Base_SetConfig+0x40>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	4a40      	ldr	r2, [pc, #256]	@ (8002fd0 <TIM_Base_SetConfig+0x13c>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d108      	bne.n	8002ee6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002eda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	68fa      	ldr	r2, [r7, #12]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4a35      	ldr	r2, [pc, #212]	@ (8002fc0 <TIM_Base_SetConfig+0x12c>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d02b      	beq.n	8002f46 <TIM_Base_SetConfig+0xb2>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ef4:	d027      	beq.n	8002f46 <TIM_Base_SetConfig+0xb2>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4a32      	ldr	r2, [pc, #200]	@ (8002fc4 <TIM_Base_SetConfig+0x130>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d023      	beq.n	8002f46 <TIM_Base_SetConfig+0xb2>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a31      	ldr	r2, [pc, #196]	@ (8002fc8 <TIM_Base_SetConfig+0x134>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d01f      	beq.n	8002f46 <TIM_Base_SetConfig+0xb2>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a30      	ldr	r2, [pc, #192]	@ (8002fcc <TIM_Base_SetConfig+0x138>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d01b      	beq.n	8002f46 <TIM_Base_SetConfig+0xb2>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a2f      	ldr	r2, [pc, #188]	@ (8002fd0 <TIM_Base_SetConfig+0x13c>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d017      	beq.n	8002f46 <TIM_Base_SetConfig+0xb2>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4a2e      	ldr	r2, [pc, #184]	@ (8002fd4 <TIM_Base_SetConfig+0x140>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d013      	beq.n	8002f46 <TIM_Base_SetConfig+0xb2>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a2d      	ldr	r2, [pc, #180]	@ (8002fd8 <TIM_Base_SetConfig+0x144>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d00f      	beq.n	8002f46 <TIM_Base_SetConfig+0xb2>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4a2c      	ldr	r2, [pc, #176]	@ (8002fdc <TIM_Base_SetConfig+0x148>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d00b      	beq.n	8002f46 <TIM_Base_SetConfig+0xb2>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4a2b      	ldr	r2, [pc, #172]	@ (8002fe0 <TIM_Base_SetConfig+0x14c>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d007      	beq.n	8002f46 <TIM_Base_SetConfig+0xb2>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a2a      	ldr	r2, [pc, #168]	@ (8002fe4 <TIM_Base_SetConfig+0x150>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d003      	beq.n	8002f46 <TIM_Base_SetConfig+0xb2>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4a29      	ldr	r2, [pc, #164]	@ (8002fe8 <TIM_Base_SetConfig+0x154>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d108      	bne.n	8002f58 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	68db      	ldr	r3, [r3, #12]
 8002f52:	68fa      	ldr	r2, [r7, #12]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	695b      	ldr	r3, [r3, #20]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	68fa      	ldr	r2, [r7, #12]
 8002f6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	689a      	ldr	r2, [r3, #8]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	4a10      	ldr	r2, [pc, #64]	@ (8002fc0 <TIM_Base_SetConfig+0x12c>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d003      	beq.n	8002f8c <TIM_Base_SetConfig+0xf8>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	4a12      	ldr	r2, [pc, #72]	@ (8002fd0 <TIM_Base_SetConfig+0x13c>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d103      	bne.n	8002f94 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	691a      	ldr	r2, [r3, #16]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2201      	movs	r2, #1
 8002f98:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	691b      	ldr	r3, [r3, #16]
 8002f9e:	f003 0301 	and.w	r3, r3, #1
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d105      	bne.n	8002fb2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	691b      	ldr	r3, [r3, #16]
 8002faa:	f023 0201 	bic.w	r2, r3, #1
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	611a      	str	r2, [r3, #16]
  }
}
 8002fb2:	bf00      	nop
 8002fb4:	3714      	adds	r7, #20
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr
 8002fbe:	bf00      	nop
 8002fc0:	40010000 	.word	0x40010000
 8002fc4:	40000400 	.word	0x40000400
 8002fc8:	40000800 	.word	0x40000800
 8002fcc:	40000c00 	.word	0x40000c00
 8002fd0:	40010400 	.word	0x40010400
 8002fd4:	40014000 	.word	0x40014000
 8002fd8:	40014400 	.word	0x40014400
 8002fdc:	40014800 	.word	0x40014800
 8002fe0:	40001800 	.word	0x40001800
 8002fe4:	40001c00 	.word	0x40001c00
 8002fe8:	40002000 	.word	0x40002000

08002fec <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ff4:	bf00      	nop
 8002ff6:	370c      	adds	r7, #12
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr

08003000 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003008:	bf00      	nop
 800300a:	370c      	adds	r7, #12
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr

08003014 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b082      	sub	sp, #8
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d101      	bne.n	8003026 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e042      	b.n	80030ac <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800302c:	b2db      	uxtb	r3, r3
 800302e:	2b00      	cmp	r3, #0
 8003030:	d106      	bne.n	8003040 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f7fd fd32 	bl	8000aa4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2224      	movs	r2, #36	@ 0x24
 8003044:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	68da      	ldr	r2, [r3, #12]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003056:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f000 fcdb 	bl	8003a14 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	691a      	ldr	r2, [r3, #16]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800306c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	695a      	ldr	r2, [r3, #20]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800307c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	68da      	ldr	r2, [r3, #12]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800308c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2220      	movs	r2, #32
 8003098:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2220      	movs	r2, #32
 80030a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2200      	movs	r2, #0
 80030a8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80030aa:	2300      	movs	r3, #0
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3708      	adds	r7, #8
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b084      	sub	sp, #16
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	60f8      	str	r0, [r7, #12]
 80030bc:	60b9      	str	r1, [r7, #8]
 80030be:	4613      	mov	r3, r2
 80030c0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	2b20      	cmp	r3, #32
 80030cc:	d112      	bne.n	80030f4 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d002      	beq.n	80030da <HAL_UART_Receive_IT+0x26>
 80030d4:	88fb      	ldrh	r3, [r7, #6]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d101      	bne.n	80030de <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e00b      	b.n	80030f6 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2200      	movs	r2, #0
 80030e2:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80030e4:	88fb      	ldrh	r3, [r7, #6]
 80030e6:	461a      	mov	r2, r3
 80030e8:	68b9      	ldr	r1, [r7, #8]
 80030ea:	68f8      	ldr	r0, [r7, #12]
 80030ec:	f000 faba 	bl	8003664 <UART_Start_Receive_IT>
 80030f0:	4603      	mov	r3, r0
 80030f2:	e000      	b.n	80030f6 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80030f4:	2302      	movs	r3, #2
  }
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3710      	adds	r7, #16
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
	...

08003100 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b0ba      	sub	sp, #232	@ 0xe8
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	695b      	ldr	r3, [r3, #20]
 8003122:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003126:	2300      	movs	r3, #0
 8003128:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800312c:	2300      	movs	r3, #0
 800312e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003132:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003136:	f003 030f 	and.w	r3, r3, #15
 800313a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800313e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003142:	2b00      	cmp	r3, #0
 8003144:	d10f      	bne.n	8003166 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003146:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800314a:	f003 0320 	and.w	r3, r3, #32
 800314e:	2b00      	cmp	r3, #0
 8003150:	d009      	beq.n	8003166 <HAL_UART_IRQHandler+0x66>
 8003152:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003156:	f003 0320 	and.w	r3, r3, #32
 800315a:	2b00      	cmp	r3, #0
 800315c:	d003      	beq.n	8003166 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f000 fb99 	bl	8003896 <UART_Receive_IT>
      return;
 8003164:	e25b      	b.n	800361e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003166:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800316a:	2b00      	cmp	r3, #0
 800316c:	f000 80de 	beq.w	800332c <HAL_UART_IRQHandler+0x22c>
 8003170:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003174:	f003 0301 	and.w	r3, r3, #1
 8003178:	2b00      	cmp	r3, #0
 800317a:	d106      	bne.n	800318a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800317c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003180:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003184:	2b00      	cmp	r3, #0
 8003186:	f000 80d1 	beq.w	800332c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800318a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800318e:	f003 0301 	and.w	r3, r3, #1
 8003192:	2b00      	cmp	r3, #0
 8003194:	d00b      	beq.n	80031ae <HAL_UART_IRQHandler+0xae>
 8003196:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800319a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d005      	beq.n	80031ae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031a6:	f043 0201 	orr.w	r2, r3, #1
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80031ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031b2:	f003 0304 	and.w	r3, r3, #4
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d00b      	beq.n	80031d2 <HAL_UART_IRQHandler+0xd2>
 80031ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80031be:	f003 0301 	and.w	r3, r3, #1
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d005      	beq.n	80031d2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031ca:	f043 0202 	orr.w	r2, r3, #2
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80031d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031d6:	f003 0302 	and.w	r3, r3, #2
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d00b      	beq.n	80031f6 <HAL_UART_IRQHandler+0xf6>
 80031de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80031e2:	f003 0301 	and.w	r3, r3, #1
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d005      	beq.n	80031f6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031ee:	f043 0204 	orr.w	r2, r3, #4
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80031f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031fa:	f003 0308 	and.w	r3, r3, #8
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d011      	beq.n	8003226 <HAL_UART_IRQHandler+0x126>
 8003202:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003206:	f003 0320 	and.w	r3, r3, #32
 800320a:	2b00      	cmp	r3, #0
 800320c:	d105      	bne.n	800321a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800320e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003212:	f003 0301 	and.w	r3, r3, #1
 8003216:	2b00      	cmp	r3, #0
 8003218:	d005      	beq.n	8003226 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800321e:	f043 0208 	orr.w	r2, r3, #8
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800322a:	2b00      	cmp	r3, #0
 800322c:	f000 81f2 	beq.w	8003614 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003230:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003234:	f003 0320 	and.w	r3, r3, #32
 8003238:	2b00      	cmp	r3, #0
 800323a:	d008      	beq.n	800324e <HAL_UART_IRQHandler+0x14e>
 800323c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003240:	f003 0320 	and.w	r3, r3, #32
 8003244:	2b00      	cmp	r3, #0
 8003246:	d002      	beq.n	800324e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f000 fb24 	bl	8003896 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	695b      	ldr	r3, [r3, #20]
 8003254:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003258:	2b40      	cmp	r3, #64	@ 0x40
 800325a:	bf0c      	ite	eq
 800325c:	2301      	moveq	r3, #1
 800325e:	2300      	movne	r3, #0
 8003260:	b2db      	uxtb	r3, r3
 8003262:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800326a:	f003 0308 	and.w	r3, r3, #8
 800326e:	2b00      	cmp	r3, #0
 8003270:	d103      	bne.n	800327a <HAL_UART_IRQHandler+0x17a>
 8003272:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003276:	2b00      	cmp	r3, #0
 8003278:	d04f      	beq.n	800331a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f000 fa2c 	bl	80036d8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	695b      	ldr	r3, [r3, #20]
 8003286:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800328a:	2b40      	cmp	r3, #64	@ 0x40
 800328c:	d141      	bne.n	8003312 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	3314      	adds	r3, #20
 8003294:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003298:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800329c:	e853 3f00 	ldrex	r3, [r3]
 80032a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80032a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80032a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80032ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	3314      	adds	r3, #20
 80032b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80032ba:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80032be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80032c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80032ca:	e841 2300 	strex	r3, r2, [r1]
 80032ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80032d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d1d9      	bne.n	800328e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d013      	beq.n	800330a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032e6:	4a7e      	ldr	r2, [pc, #504]	@ (80034e0 <HAL_UART_IRQHandler+0x3e0>)
 80032e8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032ee:	4618      	mov	r0, r3
 80032f0:	f7fd ffd4 	bl	800129c <HAL_DMA_Abort_IT>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d016      	beq.n	8003328 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003304:	4610      	mov	r0, r2
 8003306:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003308:	e00e      	b.n	8003328 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f000 f994 	bl	8003638 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003310:	e00a      	b.n	8003328 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f000 f990 	bl	8003638 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003318:	e006      	b.n	8003328 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f000 f98c 	bl	8003638 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003326:	e175      	b.n	8003614 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003328:	bf00      	nop
    return;
 800332a:	e173      	b.n	8003614 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003330:	2b01      	cmp	r3, #1
 8003332:	f040 814f 	bne.w	80035d4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003336:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800333a:	f003 0310 	and.w	r3, r3, #16
 800333e:	2b00      	cmp	r3, #0
 8003340:	f000 8148 	beq.w	80035d4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003344:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003348:	f003 0310 	and.w	r3, r3, #16
 800334c:	2b00      	cmp	r3, #0
 800334e:	f000 8141 	beq.w	80035d4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003352:	2300      	movs	r3, #0
 8003354:	60bb      	str	r3, [r7, #8]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	60bb      	str	r3, [r7, #8]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	60bb      	str	r3, [r7, #8]
 8003366:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	695b      	ldr	r3, [r3, #20]
 800336e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003372:	2b40      	cmp	r3, #64	@ 0x40
 8003374:	f040 80b6 	bne.w	80034e4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003384:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003388:	2b00      	cmp	r3, #0
 800338a:	f000 8145 	beq.w	8003618 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003392:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003396:	429a      	cmp	r2, r3
 8003398:	f080 813e 	bcs.w	8003618 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80033a2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033a8:	69db      	ldr	r3, [r3, #28]
 80033aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80033ae:	f000 8088 	beq.w	80034c2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	330c      	adds	r3, #12
 80033b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80033c0:	e853 3f00 	ldrex	r3, [r3]
 80033c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80033c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80033cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80033d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	330c      	adds	r3, #12
 80033da:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80033de:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80033e2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033e6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80033ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80033ee:	e841 2300 	strex	r3, r2, [r1]
 80033f2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80033f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d1d9      	bne.n	80033b2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	3314      	adds	r3, #20
 8003404:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003406:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003408:	e853 3f00 	ldrex	r3, [r3]
 800340c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800340e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003410:	f023 0301 	bic.w	r3, r3, #1
 8003414:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	3314      	adds	r3, #20
 800341e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003422:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003426:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003428:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800342a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800342e:	e841 2300 	strex	r3, r2, [r1]
 8003432:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003434:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003436:	2b00      	cmp	r3, #0
 8003438:	d1e1      	bne.n	80033fe <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	3314      	adds	r3, #20
 8003440:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003442:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003444:	e853 3f00 	ldrex	r3, [r3]
 8003448:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800344a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800344c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003450:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	3314      	adds	r3, #20
 800345a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800345e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003460:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003462:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003464:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003466:	e841 2300 	strex	r3, r2, [r1]
 800346a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800346c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800346e:	2b00      	cmp	r3, #0
 8003470:	d1e3      	bne.n	800343a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2220      	movs	r2, #32
 8003476:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	330c      	adds	r3, #12
 8003486:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003488:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800348a:	e853 3f00 	ldrex	r3, [r3]
 800348e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003490:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003492:	f023 0310 	bic.w	r3, r3, #16
 8003496:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	330c      	adds	r3, #12
 80034a0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80034a4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80034a6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034a8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80034aa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80034ac:	e841 2300 	strex	r3, r2, [r1]
 80034b0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80034b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d1e3      	bne.n	8003480 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034bc:	4618      	mov	r0, r3
 80034be:	f7fd fe7d 	bl	80011bc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2202      	movs	r2, #2
 80034c6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	4619      	mov	r1, r3
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	f000 f8b7 	bl	800364c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80034de:	e09b      	b.n	8003618 <HAL_UART_IRQHandler+0x518>
 80034e0:	0800379f 	.word	0x0800379f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80034ec:	b29b      	uxth	r3, r3
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80034f8:	b29b      	uxth	r3, r3
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	f000 808e 	beq.w	800361c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003500:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003504:	2b00      	cmp	r3, #0
 8003506:	f000 8089 	beq.w	800361c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	330c      	adds	r3, #12
 8003510:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003512:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003514:	e853 3f00 	ldrex	r3, [r3]
 8003518:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800351a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800351c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003520:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	330c      	adds	r3, #12
 800352a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800352e:	647a      	str	r2, [r7, #68]	@ 0x44
 8003530:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003532:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003534:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003536:	e841 2300 	strex	r3, r2, [r1]
 800353a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800353c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800353e:	2b00      	cmp	r3, #0
 8003540:	d1e3      	bne.n	800350a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	3314      	adds	r3, #20
 8003548:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800354a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800354c:	e853 3f00 	ldrex	r3, [r3]
 8003550:	623b      	str	r3, [r7, #32]
   return(result);
 8003552:	6a3b      	ldr	r3, [r7, #32]
 8003554:	f023 0301 	bic.w	r3, r3, #1
 8003558:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	3314      	adds	r3, #20
 8003562:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003566:	633a      	str	r2, [r7, #48]	@ 0x30
 8003568:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800356a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800356c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800356e:	e841 2300 	strex	r3, r2, [r1]
 8003572:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003574:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003576:	2b00      	cmp	r3, #0
 8003578:	d1e3      	bne.n	8003542 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2220      	movs	r2, #32
 800357e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	330c      	adds	r3, #12
 800358e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	e853 3f00 	ldrex	r3, [r3]
 8003596:	60fb      	str	r3, [r7, #12]
   return(result);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f023 0310 	bic.w	r3, r3, #16
 800359e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	330c      	adds	r3, #12
 80035a8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80035ac:	61fa      	str	r2, [r7, #28]
 80035ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035b0:	69b9      	ldr	r1, [r7, #24]
 80035b2:	69fa      	ldr	r2, [r7, #28]
 80035b4:	e841 2300 	strex	r3, r2, [r1]
 80035b8:	617b      	str	r3, [r7, #20]
   return(result);
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d1e3      	bne.n	8003588 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2202      	movs	r2, #2
 80035c4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80035c6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80035ca:	4619      	mov	r1, r3
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f000 f83d 	bl	800364c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80035d2:	e023      	b.n	800361c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80035d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d009      	beq.n	80035f4 <HAL_UART_IRQHandler+0x4f4>
 80035e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d003      	beq.n	80035f4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f000 f8ea 	bl	80037c6 <UART_Transmit_IT>
    return;
 80035f2:	e014      	b.n	800361e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80035f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d00e      	beq.n	800361e <HAL_UART_IRQHandler+0x51e>
 8003600:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003604:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003608:	2b00      	cmp	r3, #0
 800360a:	d008      	beq.n	800361e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f000 f92a 	bl	8003866 <UART_EndTransmit_IT>
    return;
 8003612:	e004      	b.n	800361e <HAL_UART_IRQHandler+0x51e>
    return;
 8003614:	bf00      	nop
 8003616:	e002      	b.n	800361e <HAL_UART_IRQHandler+0x51e>
      return;
 8003618:	bf00      	nop
 800361a:	e000      	b.n	800361e <HAL_UART_IRQHandler+0x51e>
      return;
 800361c:	bf00      	nop
  }
}
 800361e:	37e8      	adds	r7, #232	@ 0xe8
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}

08003624 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003624:	b480      	push	{r7}
 8003626:	b083      	sub	sp, #12
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800362c:	bf00      	nop
 800362e:	370c      	adds	r7, #12
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr

08003638 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003638:	b480      	push	{r7}
 800363a:	b083      	sub	sp, #12
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003640:	bf00      	nop
 8003642:	370c      	adds	r7, #12
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr

0800364c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800364c:	b480      	push	{r7}
 800364e:	b083      	sub	sp, #12
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	460b      	mov	r3, r1
 8003656:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003658:	bf00      	nop
 800365a:	370c      	adds	r7, #12
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr

08003664 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003664:	b480      	push	{r7}
 8003666:	b085      	sub	sp, #20
 8003668:	af00      	add	r7, sp, #0
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	60b9      	str	r1, [r7, #8]
 800366e:	4613      	mov	r3, r2
 8003670:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	68ba      	ldr	r2, [r7, #8]
 8003676:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	88fa      	ldrh	r2, [r7, #6]
 800367c:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	88fa      	ldrh	r2, [r7, #6]
 8003682:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2200      	movs	r2, #0
 8003688:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2222      	movs	r2, #34	@ 0x22
 800368e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	691b      	ldr	r3, [r3, #16]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d007      	beq.n	80036aa <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	68da      	ldr	r2, [r3, #12]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80036a8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	695a      	ldr	r2, [r3, #20]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f042 0201 	orr.w	r2, r2, #1
 80036b8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	68da      	ldr	r2, [r3, #12]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f042 0220 	orr.w	r2, r2, #32
 80036c8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80036ca:	2300      	movs	r3, #0
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3714      	adds	r7, #20
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr

080036d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80036d8:	b480      	push	{r7}
 80036da:	b095      	sub	sp, #84	@ 0x54
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	330c      	adds	r3, #12
 80036e6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036ea:	e853 3f00 	ldrex	r3, [r3]
 80036ee:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80036f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036f2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80036f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	330c      	adds	r3, #12
 80036fe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003700:	643a      	str	r2, [r7, #64]	@ 0x40
 8003702:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003704:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003706:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003708:	e841 2300 	strex	r3, r2, [r1]
 800370c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800370e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003710:	2b00      	cmp	r3, #0
 8003712:	d1e5      	bne.n	80036e0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	3314      	adds	r3, #20
 800371a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800371c:	6a3b      	ldr	r3, [r7, #32]
 800371e:	e853 3f00 	ldrex	r3, [r3]
 8003722:	61fb      	str	r3, [r7, #28]
   return(result);
 8003724:	69fb      	ldr	r3, [r7, #28]
 8003726:	f023 0301 	bic.w	r3, r3, #1
 800372a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	3314      	adds	r3, #20
 8003732:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003734:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003736:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003738:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800373a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800373c:	e841 2300 	strex	r3, r2, [r1]
 8003740:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003744:	2b00      	cmp	r3, #0
 8003746:	d1e5      	bne.n	8003714 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800374c:	2b01      	cmp	r3, #1
 800374e:	d119      	bne.n	8003784 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	330c      	adds	r3, #12
 8003756:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	e853 3f00 	ldrex	r3, [r3]
 800375e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	f023 0310 	bic.w	r3, r3, #16
 8003766:	647b      	str	r3, [r7, #68]	@ 0x44
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	330c      	adds	r3, #12
 800376e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003770:	61ba      	str	r2, [r7, #24]
 8003772:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003774:	6979      	ldr	r1, [r7, #20]
 8003776:	69ba      	ldr	r2, [r7, #24]
 8003778:	e841 2300 	strex	r3, r2, [r1]
 800377c:	613b      	str	r3, [r7, #16]
   return(result);
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d1e5      	bne.n	8003750 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2220      	movs	r2, #32
 8003788:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2200      	movs	r2, #0
 8003790:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003792:	bf00      	nop
 8003794:	3754      	adds	r7, #84	@ 0x54
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr

0800379e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800379e:	b580      	push	{r7, lr}
 80037a0:	b084      	sub	sp, #16
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037aa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2200      	movs	r2, #0
 80037b0:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2200      	movs	r2, #0
 80037b6:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80037b8:	68f8      	ldr	r0, [r7, #12]
 80037ba:	f7ff ff3d 	bl	8003638 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80037be:	bf00      	nop
 80037c0:	3710      	adds	r7, #16
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}

080037c6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80037c6:	b480      	push	{r7}
 80037c8:	b085      	sub	sp, #20
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	2b21      	cmp	r3, #33	@ 0x21
 80037d8:	d13e      	bne.n	8003858 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037e2:	d114      	bne.n	800380e <UART_Transmit_IT+0x48>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	691b      	ldr	r3, [r3, #16]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d110      	bne.n	800380e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6a1b      	ldr	r3, [r3, #32]
 80037f0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	881b      	ldrh	r3, [r3, #0]
 80037f6:	461a      	mov	r2, r3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003800:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6a1b      	ldr	r3, [r3, #32]
 8003806:	1c9a      	adds	r2, r3, #2
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	621a      	str	r2, [r3, #32]
 800380c:	e008      	b.n	8003820 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a1b      	ldr	r3, [r3, #32]
 8003812:	1c59      	adds	r1, r3, #1
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	6211      	str	r1, [r2, #32]
 8003818:	781a      	ldrb	r2, [r3, #0]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003824:	b29b      	uxth	r3, r3
 8003826:	3b01      	subs	r3, #1
 8003828:	b29b      	uxth	r3, r3
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	4619      	mov	r1, r3
 800382e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003830:	2b00      	cmp	r3, #0
 8003832:	d10f      	bne.n	8003854 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	68da      	ldr	r2, [r3, #12]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003842:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	68da      	ldr	r2, [r3, #12]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003852:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003854:	2300      	movs	r3, #0
 8003856:	e000      	b.n	800385a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003858:	2302      	movs	r3, #2
  }
}
 800385a:	4618      	mov	r0, r3
 800385c:	3714      	adds	r7, #20
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr

08003866 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003866:	b580      	push	{r7, lr}
 8003868:	b082      	sub	sp, #8
 800386a:	af00      	add	r7, sp, #0
 800386c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	68da      	ldr	r2, [r3, #12]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800387c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2220      	movs	r2, #32
 8003882:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f7ff fecc 	bl	8003624 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800388c:	2300      	movs	r3, #0
}
 800388e:	4618      	mov	r0, r3
 8003890:	3708      	adds	r7, #8
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}

08003896 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003896:	b580      	push	{r7, lr}
 8003898:	b08c      	sub	sp, #48	@ 0x30
 800389a:	af00      	add	r7, sp, #0
 800389c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	2b22      	cmp	r3, #34	@ 0x22
 80038a8:	f040 80ae 	bne.w	8003a08 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038b4:	d117      	bne.n	80038e6 <UART_Receive_IT+0x50>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	691b      	ldr	r3, [r3, #16]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d113      	bne.n	80038e6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80038be:	2300      	movs	r3, #0
 80038c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038c6:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038d4:	b29a      	uxth	r2, r3
 80038d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038d8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038de:	1c9a      	adds	r2, r3, #2
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	629a      	str	r2, [r3, #40]	@ 0x28
 80038e4:	e026      	b.n	8003934 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80038ec:	2300      	movs	r3, #0
 80038ee:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038f8:	d007      	beq.n	800390a <UART_Receive_IT+0x74>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d10a      	bne.n	8003918 <UART_Receive_IT+0x82>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	691b      	ldr	r3, [r3, #16]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d106      	bne.n	8003918 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	b2da      	uxtb	r2, r3
 8003912:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003914:	701a      	strb	r2, [r3, #0]
 8003916:	e008      	b.n	800392a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	b2db      	uxtb	r3, r3
 8003920:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003924:	b2da      	uxtb	r2, r3
 8003926:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003928:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800392e:	1c5a      	adds	r2, r3, #1
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003938:	b29b      	uxth	r3, r3
 800393a:	3b01      	subs	r3, #1
 800393c:	b29b      	uxth	r3, r3
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	4619      	mov	r1, r3
 8003942:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003944:	2b00      	cmp	r3, #0
 8003946:	d15d      	bne.n	8003a04 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	68da      	ldr	r2, [r3, #12]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f022 0220 	bic.w	r2, r2, #32
 8003956:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	68da      	ldr	r2, [r3, #12]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003966:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	695a      	ldr	r2, [r3, #20]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f022 0201 	bic.w	r2, r2, #1
 8003976:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2220      	movs	r2, #32
 800397c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2200      	movs	r2, #0
 8003984:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800398a:	2b01      	cmp	r3, #1
 800398c:	d135      	bne.n	80039fa <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	330c      	adds	r3, #12
 800399a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	e853 3f00 	ldrex	r3, [r3]
 80039a2:	613b      	str	r3, [r7, #16]
   return(result);
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	f023 0310 	bic.w	r3, r3, #16
 80039aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	330c      	adds	r3, #12
 80039b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039b4:	623a      	str	r2, [r7, #32]
 80039b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039b8:	69f9      	ldr	r1, [r7, #28]
 80039ba:	6a3a      	ldr	r2, [r7, #32]
 80039bc:	e841 2300 	strex	r3, r2, [r1]
 80039c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80039c2:	69bb      	ldr	r3, [r7, #24]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d1e5      	bne.n	8003994 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 0310 	and.w	r3, r3, #16
 80039d2:	2b10      	cmp	r3, #16
 80039d4:	d10a      	bne.n	80039ec <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80039d6:	2300      	movs	r3, #0
 80039d8:	60fb      	str	r3, [r7, #12]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	60fb      	str	r3, [r7, #12]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	60fb      	str	r3, [r7, #12]
 80039ea:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80039f0:	4619      	mov	r1, r3
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f7ff fe2a 	bl	800364c <HAL_UARTEx_RxEventCallback>
 80039f8:	e002      	b.n	8003a00 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f7fc ff9e 	bl	800093c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003a00:	2300      	movs	r3, #0
 8003a02:	e002      	b.n	8003a0a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003a04:	2300      	movs	r3, #0
 8003a06:	e000      	b.n	8003a0a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003a08:	2302      	movs	r3, #2
  }
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3730      	adds	r7, #48	@ 0x30
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
	...

08003a14 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a18:	b0c0      	sub	sp, #256	@ 0x100
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	691b      	ldr	r3, [r3, #16]
 8003a28:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a30:	68d9      	ldr	r1, [r3, #12]
 8003a32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	ea40 0301 	orr.w	r3, r0, r1
 8003a3c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003a3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a42:	689a      	ldr	r2, [r3, #8]
 8003a44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a48:	691b      	ldr	r3, [r3, #16]
 8003a4a:	431a      	orrs	r2, r3
 8003a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a50:	695b      	ldr	r3, [r3, #20]
 8003a52:	431a      	orrs	r2, r3
 8003a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a58:	69db      	ldr	r3, [r3, #28]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003a6c:	f021 010c 	bic.w	r1, r1, #12
 8003a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003a7a:	430b      	orrs	r3, r1
 8003a7c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	695b      	ldr	r3, [r3, #20]
 8003a86:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003a8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a8e:	6999      	ldr	r1, [r3, #24]
 8003a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	ea40 0301 	orr.w	r3, r0, r1
 8003a9a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	4b8f      	ldr	r3, [pc, #572]	@ (8003ce0 <UART_SetConfig+0x2cc>)
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d005      	beq.n	8003ab4 <UART_SetConfig+0xa0>
 8003aa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	4b8d      	ldr	r3, [pc, #564]	@ (8003ce4 <UART_SetConfig+0x2d0>)
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d104      	bne.n	8003abe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003ab4:	f7fd fec8 	bl	8001848 <HAL_RCC_GetPCLK2Freq>
 8003ab8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003abc:	e003      	b.n	8003ac6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003abe:	f7fd feaf 	bl	8001820 <HAL_RCC_GetPCLK1Freq>
 8003ac2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ac6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003aca:	69db      	ldr	r3, [r3, #28]
 8003acc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ad0:	f040 810c 	bne.w	8003cec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003ad4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003ade:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003ae2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003ae6:	4622      	mov	r2, r4
 8003ae8:	462b      	mov	r3, r5
 8003aea:	1891      	adds	r1, r2, r2
 8003aec:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003aee:	415b      	adcs	r3, r3
 8003af0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003af2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003af6:	4621      	mov	r1, r4
 8003af8:	eb12 0801 	adds.w	r8, r2, r1
 8003afc:	4629      	mov	r1, r5
 8003afe:	eb43 0901 	adc.w	r9, r3, r1
 8003b02:	f04f 0200 	mov.w	r2, #0
 8003b06:	f04f 0300 	mov.w	r3, #0
 8003b0a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b0e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b12:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b16:	4690      	mov	r8, r2
 8003b18:	4699      	mov	r9, r3
 8003b1a:	4623      	mov	r3, r4
 8003b1c:	eb18 0303 	adds.w	r3, r8, r3
 8003b20:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003b24:	462b      	mov	r3, r5
 8003b26:	eb49 0303 	adc.w	r3, r9, r3
 8003b2a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003b2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003b3a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003b3e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003b42:	460b      	mov	r3, r1
 8003b44:	18db      	adds	r3, r3, r3
 8003b46:	653b      	str	r3, [r7, #80]	@ 0x50
 8003b48:	4613      	mov	r3, r2
 8003b4a:	eb42 0303 	adc.w	r3, r2, r3
 8003b4e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003b50:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003b54:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003b58:	f7fc fb5a 	bl	8000210 <__aeabi_uldivmod>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	460b      	mov	r3, r1
 8003b60:	4b61      	ldr	r3, [pc, #388]	@ (8003ce8 <UART_SetConfig+0x2d4>)
 8003b62:	fba3 2302 	umull	r2, r3, r3, r2
 8003b66:	095b      	lsrs	r3, r3, #5
 8003b68:	011c      	lsls	r4, r3, #4
 8003b6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b6e:	2200      	movs	r2, #0
 8003b70:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003b74:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003b78:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003b7c:	4642      	mov	r2, r8
 8003b7e:	464b      	mov	r3, r9
 8003b80:	1891      	adds	r1, r2, r2
 8003b82:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003b84:	415b      	adcs	r3, r3
 8003b86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b88:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003b8c:	4641      	mov	r1, r8
 8003b8e:	eb12 0a01 	adds.w	sl, r2, r1
 8003b92:	4649      	mov	r1, r9
 8003b94:	eb43 0b01 	adc.w	fp, r3, r1
 8003b98:	f04f 0200 	mov.w	r2, #0
 8003b9c:	f04f 0300 	mov.w	r3, #0
 8003ba0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003ba4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003ba8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003bac:	4692      	mov	sl, r2
 8003bae:	469b      	mov	fp, r3
 8003bb0:	4643      	mov	r3, r8
 8003bb2:	eb1a 0303 	adds.w	r3, sl, r3
 8003bb6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003bba:	464b      	mov	r3, r9
 8003bbc:	eb4b 0303 	adc.w	r3, fp, r3
 8003bc0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003bd0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003bd4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003bd8:	460b      	mov	r3, r1
 8003bda:	18db      	adds	r3, r3, r3
 8003bdc:	643b      	str	r3, [r7, #64]	@ 0x40
 8003bde:	4613      	mov	r3, r2
 8003be0:	eb42 0303 	adc.w	r3, r2, r3
 8003be4:	647b      	str	r3, [r7, #68]	@ 0x44
 8003be6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003bea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003bee:	f7fc fb0f 	bl	8000210 <__aeabi_uldivmod>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	460b      	mov	r3, r1
 8003bf6:	4611      	mov	r1, r2
 8003bf8:	4b3b      	ldr	r3, [pc, #236]	@ (8003ce8 <UART_SetConfig+0x2d4>)
 8003bfa:	fba3 2301 	umull	r2, r3, r3, r1
 8003bfe:	095b      	lsrs	r3, r3, #5
 8003c00:	2264      	movs	r2, #100	@ 0x64
 8003c02:	fb02 f303 	mul.w	r3, r2, r3
 8003c06:	1acb      	subs	r3, r1, r3
 8003c08:	00db      	lsls	r3, r3, #3
 8003c0a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003c0e:	4b36      	ldr	r3, [pc, #216]	@ (8003ce8 <UART_SetConfig+0x2d4>)
 8003c10:	fba3 2302 	umull	r2, r3, r3, r2
 8003c14:	095b      	lsrs	r3, r3, #5
 8003c16:	005b      	lsls	r3, r3, #1
 8003c18:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003c1c:	441c      	add	r4, r3
 8003c1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c22:	2200      	movs	r2, #0
 8003c24:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003c28:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003c2c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003c30:	4642      	mov	r2, r8
 8003c32:	464b      	mov	r3, r9
 8003c34:	1891      	adds	r1, r2, r2
 8003c36:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003c38:	415b      	adcs	r3, r3
 8003c3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c3c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003c40:	4641      	mov	r1, r8
 8003c42:	1851      	adds	r1, r2, r1
 8003c44:	6339      	str	r1, [r7, #48]	@ 0x30
 8003c46:	4649      	mov	r1, r9
 8003c48:	414b      	adcs	r3, r1
 8003c4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c4c:	f04f 0200 	mov.w	r2, #0
 8003c50:	f04f 0300 	mov.w	r3, #0
 8003c54:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003c58:	4659      	mov	r1, fp
 8003c5a:	00cb      	lsls	r3, r1, #3
 8003c5c:	4651      	mov	r1, sl
 8003c5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c62:	4651      	mov	r1, sl
 8003c64:	00ca      	lsls	r2, r1, #3
 8003c66:	4610      	mov	r0, r2
 8003c68:	4619      	mov	r1, r3
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	4642      	mov	r2, r8
 8003c6e:	189b      	adds	r3, r3, r2
 8003c70:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003c74:	464b      	mov	r3, r9
 8003c76:	460a      	mov	r2, r1
 8003c78:	eb42 0303 	adc.w	r3, r2, r3
 8003c7c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003c8c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003c90:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003c94:	460b      	mov	r3, r1
 8003c96:	18db      	adds	r3, r3, r3
 8003c98:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003c9a:	4613      	mov	r3, r2
 8003c9c:	eb42 0303 	adc.w	r3, r2, r3
 8003ca0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ca2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003ca6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003caa:	f7fc fab1 	bl	8000210 <__aeabi_uldivmod>
 8003cae:	4602      	mov	r2, r0
 8003cb0:	460b      	mov	r3, r1
 8003cb2:	4b0d      	ldr	r3, [pc, #52]	@ (8003ce8 <UART_SetConfig+0x2d4>)
 8003cb4:	fba3 1302 	umull	r1, r3, r3, r2
 8003cb8:	095b      	lsrs	r3, r3, #5
 8003cba:	2164      	movs	r1, #100	@ 0x64
 8003cbc:	fb01 f303 	mul.w	r3, r1, r3
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	00db      	lsls	r3, r3, #3
 8003cc4:	3332      	adds	r3, #50	@ 0x32
 8003cc6:	4a08      	ldr	r2, [pc, #32]	@ (8003ce8 <UART_SetConfig+0x2d4>)
 8003cc8:	fba2 2303 	umull	r2, r3, r2, r3
 8003ccc:	095b      	lsrs	r3, r3, #5
 8003cce:	f003 0207 	and.w	r2, r3, #7
 8003cd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4422      	add	r2, r4
 8003cda:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003cdc:	e106      	b.n	8003eec <UART_SetConfig+0x4d8>
 8003cde:	bf00      	nop
 8003ce0:	40011000 	.word	0x40011000
 8003ce4:	40011400 	.word	0x40011400
 8003ce8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003cec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003cf6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003cfa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003cfe:	4642      	mov	r2, r8
 8003d00:	464b      	mov	r3, r9
 8003d02:	1891      	adds	r1, r2, r2
 8003d04:	6239      	str	r1, [r7, #32]
 8003d06:	415b      	adcs	r3, r3
 8003d08:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d0a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003d0e:	4641      	mov	r1, r8
 8003d10:	1854      	adds	r4, r2, r1
 8003d12:	4649      	mov	r1, r9
 8003d14:	eb43 0501 	adc.w	r5, r3, r1
 8003d18:	f04f 0200 	mov.w	r2, #0
 8003d1c:	f04f 0300 	mov.w	r3, #0
 8003d20:	00eb      	lsls	r3, r5, #3
 8003d22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d26:	00e2      	lsls	r2, r4, #3
 8003d28:	4614      	mov	r4, r2
 8003d2a:	461d      	mov	r5, r3
 8003d2c:	4643      	mov	r3, r8
 8003d2e:	18e3      	adds	r3, r4, r3
 8003d30:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003d34:	464b      	mov	r3, r9
 8003d36:	eb45 0303 	adc.w	r3, r5, r3
 8003d3a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003d3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	2200      	movs	r2, #0
 8003d46:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003d4a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003d4e:	f04f 0200 	mov.w	r2, #0
 8003d52:	f04f 0300 	mov.w	r3, #0
 8003d56:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003d5a:	4629      	mov	r1, r5
 8003d5c:	008b      	lsls	r3, r1, #2
 8003d5e:	4621      	mov	r1, r4
 8003d60:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d64:	4621      	mov	r1, r4
 8003d66:	008a      	lsls	r2, r1, #2
 8003d68:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003d6c:	f7fc fa50 	bl	8000210 <__aeabi_uldivmod>
 8003d70:	4602      	mov	r2, r0
 8003d72:	460b      	mov	r3, r1
 8003d74:	4b60      	ldr	r3, [pc, #384]	@ (8003ef8 <UART_SetConfig+0x4e4>)
 8003d76:	fba3 2302 	umull	r2, r3, r3, r2
 8003d7a:	095b      	lsrs	r3, r3, #5
 8003d7c:	011c      	lsls	r4, r3, #4
 8003d7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d82:	2200      	movs	r2, #0
 8003d84:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003d88:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003d8c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003d90:	4642      	mov	r2, r8
 8003d92:	464b      	mov	r3, r9
 8003d94:	1891      	adds	r1, r2, r2
 8003d96:	61b9      	str	r1, [r7, #24]
 8003d98:	415b      	adcs	r3, r3
 8003d9a:	61fb      	str	r3, [r7, #28]
 8003d9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003da0:	4641      	mov	r1, r8
 8003da2:	1851      	adds	r1, r2, r1
 8003da4:	6139      	str	r1, [r7, #16]
 8003da6:	4649      	mov	r1, r9
 8003da8:	414b      	adcs	r3, r1
 8003daa:	617b      	str	r3, [r7, #20]
 8003dac:	f04f 0200 	mov.w	r2, #0
 8003db0:	f04f 0300 	mov.w	r3, #0
 8003db4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003db8:	4659      	mov	r1, fp
 8003dba:	00cb      	lsls	r3, r1, #3
 8003dbc:	4651      	mov	r1, sl
 8003dbe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003dc2:	4651      	mov	r1, sl
 8003dc4:	00ca      	lsls	r2, r1, #3
 8003dc6:	4610      	mov	r0, r2
 8003dc8:	4619      	mov	r1, r3
 8003dca:	4603      	mov	r3, r0
 8003dcc:	4642      	mov	r2, r8
 8003dce:	189b      	adds	r3, r3, r2
 8003dd0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003dd4:	464b      	mov	r3, r9
 8003dd6:	460a      	mov	r2, r1
 8003dd8:	eb42 0303 	adc.w	r3, r2, r3
 8003ddc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003de0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003dea:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003dec:	f04f 0200 	mov.w	r2, #0
 8003df0:	f04f 0300 	mov.w	r3, #0
 8003df4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003df8:	4649      	mov	r1, r9
 8003dfa:	008b      	lsls	r3, r1, #2
 8003dfc:	4641      	mov	r1, r8
 8003dfe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e02:	4641      	mov	r1, r8
 8003e04:	008a      	lsls	r2, r1, #2
 8003e06:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003e0a:	f7fc fa01 	bl	8000210 <__aeabi_uldivmod>
 8003e0e:	4602      	mov	r2, r0
 8003e10:	460b      	mov	r3, r1
 8003e12:	4611      	mov	r1, r2
 8003e14:	4b38      	ldr	r3, [pc, #224]	@ (8003ef8 <UART_SetConfig+0x4e4>)
 8003e16:	fba3 2301 	umull	r2, r3, r3, r1
 8003e1a:	095b      	lsrs	r3, r3, #5
 8003e1c:	2264      	movs	r2, #100	@ 0x64
 8003e1e:	fb02 f303 	mul.w	r3, r2, r3
 8003e22:	1acb      	subs	r3, r1, r3
 8003e24:	011b      	lsls	r3, r3, #4
 8003e26:	3332      	adds	r3, #50	@ 0x32
 8003e28:	4a33      	ldr	r2, [pc, #204]	@ (8003ef8 <UART_SetConfig+0x4e4>)
 8003e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e2e:	095b      	lsrs	r3, r3, #5
 8003e30:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003e34:	441c      	add	r4, r3
 8003e36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	673b      	str	r3, [r7, #112]	@ 0x70
 8003e3e:	677a      	str	r2, [r7, #116]	@ 0x74
 8003e40:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003e44:	4642      	mov	r2, r8
 8003e46:	464b      	mov	r3, r9
 8003e48:	1891      	adds	r1, r2, r2
 8003e4a:	60b9      	str	r1, [r7, #8]
 8003e4c:	415b      	adcs	r3, r3
 8003e4e:	60fb      	str	r3, [r7, #12]
 8003e50:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e54:	4641      	mov	r1, r8
 8003e56:	1851      	adds	r1, r2, r1
 8003e58:	6039      	str	r1, [r7, #0]
 8003e5a:	4649      	mov	r1, r9
 8003e5c:	414b      	adcs	r3, r1
 8003e5e:	607b      	str	r3, [r7, #4]
 8003e60:	f04f 0200 	mov.w	r2, #0
 8003e64:	f04f 0300 	mov.w	r3, #0
 8003e68:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003e6c:	4659      	mov	r1, fp
 8003e6e:	00cb      	lsls	r3, r1, #3
 8003e70:	4651      	mov	r1, sl
 8003e72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e76:	4651      	mov	r1, sl
 8003e78:	00ca      	lsls	r2, r1, #3
 8003e7a:	4610      	mov	r0, r2
 8003e7c:	4619      	mov	r1, r3
 8003e7e:	4603      	mov	r3, r0
 8003e80:	4642      	mov	r2, r8
 8003e82:	189b      	adds	r3, r3, r2
 8003e84:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003e86:	464b      	mov	r3, r9
 8003e88:	460a      	mov	r2, r1
 8003e8a:	eb42 0303 	adc.w	r3, r2, r3
 8003e8e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003e90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	2200      	movs	r2, #0
 8003e98:	663b      	str	r3, [r7, #96]	@ 0x60
 8003e9a:	667a      	str	r2, [r7, #100]	@ 0x64
 8003e9c:	f04f 0200 	mov.w	r2, #0
 8003ea0:	f04f 0300 	mov.w	r3, #0
 8003ea4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003ea8:	4649      	mov	r1, r9
 8003eaa:	008b      	lsls	r3, r1, #2
 8003eac:	4641      	mov	r1, r8
 8003eae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003eb2:	4641      	mov	r1, r8
 8003eb4:	008a      	lsls	r2, r1, #2
 8003eb6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003eba:	f7fc f9a9 	bl	8000210 <__aeabi_uldivmod>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	460b      	mov	r3, r1
 8003ec2:	4b0d      	ldr	r3, [pc, #52]	@ (8003ef8 <UART_SetConfig+0x4e4>)
 8003ec4:	fba3 1302 	umull	r1, r3, r3, r2
 8003ec8:	095b      	lsrs	r3, r3, #5
 8003eca:	2164      	movs	r1, #100	@ 0x64
 8003ecc:	fb01 f303 	mul.w	r3, r1, r3
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	011b      	lsls	r3, r3, #4
 8003ed4:	3332      	adds	r3, #50	@ 0x32
 8003ed6:	4a08      	ldr	r2, [pc, #32]	@ (8003ef8 <UART_SetConfig+0x4e4>)
 8003ed8:	fba2 2303 	umull	r2, r3, r2, r3
 8003edc:	095b      	lsrs	r3, r3, #5
 8003ede:	f003 020f 	and.w	r2, r3, #15
 8003ee2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4422      	add	r2, r4
 8003eea:	609a      	str	r2, [r3, #8]
}
 8003eec:	bf00      	nop
 8003eee:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ef8:	51eb851f 	.word	0x51eb851f

08003efc <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003efc:	b480      	push	{r7}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f103 0208 	add.w	r2, r3, #8
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	f04f 32ff 	mov.w	r2, #4294967295
 8003f14:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	f103 0208 	add.w	r2, r3, #8
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	f103 0208 	add.w	r2, r3, #8
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003f30:	bf00      	nop
 8003f32:	370c      	adds	r7, #12
 8003f34:	46bd      	mov	sp, r7
 8003f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3a:	4770      	bx	lr

08003f3c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b083      	sub	sp, #12
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2200      	movs	r2, #0
 8003f48:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003f4a:	bf00      	nop
 8003f4c:	370c      	adds	r7, #12
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr

08003f56 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8003f56:	b480      	push	{r7}
 8003f58:	b085      	sub	sp, #20
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	6078      	str	r0, [r7, #4]
 8003f5e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f6c:	d103      	bne.n	8003f76 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	691b      	ldr	r3, [r3, #16]
 8003f72:	60fb      	str	r3, [r7, #12]
 8003f74:	e00c      	b.n	8003f90 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	3308      	adds	r3, #8
 8003f7a:	60fb      	str	r3, [r7, #12]
 8003f7c:	e002      	b.n	8003f84 <vListInsert+0x2e>
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	60fb      	str	r3, [r7, #12]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	68ba      	ldr	r2, [r7, #8]
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d2f6      	bcs.n	8003f7e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	685a      	ldr	r2, [r3, #4]
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	683a      	ldr	r2, [r7, #0]
 8003f9e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	68fa      	ldr	r2, [r7, #12]
 8003fa4:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	683a      	ldr	r2, [r7, #0]
 8003faa:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	687a      	ldr	r2, [r7, #4]
 8003fb0:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	1c5a      	adds	r2, r3, #1
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	601a      	str	r2, [r3, #0]
}
 8003fbc:	bf00      	nop
 8003fbe:	3714      	adds	r7, #20
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr

08003fc8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b085      	sub	sp, #20
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	691b      	ldr	r3, [r3, #16]
 8003fd4:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	687a      	ldr	r2, [r7, #4]
 8003fdc:	6892      	ldr	r2, [r2, #8]
 8003fde:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	6852      	ldr	r2, [r2, #4]
 8003fe8:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	687a      	ldr	r2, [r7, #4]
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d103      	bne.n	8003ffc <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	689a      	ldr	r2, [r3, #8]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2200      	movs	r2, #0
 8004000:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	1e5a      	subs	r2, r3, #1
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
}
 8004010:	4618      	mov	r0, r3
 8004012:	3714      	adds	r7, #20
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr

0800401c <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b086      	sub	sp, #24
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
 8004024:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8004026:	2301      	movs	r3, #1
 8004028:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d10b      	bne.n	800404c <xQueueGenericReset+0x30>
        __asm volatile
 8004034:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004038:	f383 8811 	msr	BASEPRI, r3
 800403c:	f3bf 8f6f 	isb	sy
 8004040:	f3bf 8f4f 	dsb	sy
 8004044:	60fb      	str	r3, [r7, #12]
    }
 8004046:	bf00      	nop
 8004048:	bf00      	nop
 800404a:	e7fd      	b.n	8004048 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d05d      	beq.n	800410e <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 8004056:	2b00      	cmp	r3, #0
 8004058:	d059      	beq.n	800410e <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004062:	2100      	movs	r1, #0
 8004064:	fba3 2302 	umull	r2, r3, r3, r2
 8004068:	2b00      	cmp	r3, #0
 800406a:	d000      	beq.n	800406e <xQueueGenericReset+0x52>
 800406c:	2101      	movs	r1, #1
 800406e:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8004070:	2b00      	cmp	r3, #0
 8004072:	d14c      	bne.n	800410e <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
 8004074:	f002 fd4a 	bl	8006b0c <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004080:	6939      	ldr	r1, [r7, #16]
 8004082:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004084:	fb01 f303 	mul.w	r3, r1, r3
 8004088:	441a      	add	r2, r3
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	2200      	movs	r2, #0
 8004092:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040a4:	3b01      	subs	r3, #1
 80040a6:	6939      	ldr	r1, [r7, #16]
 80040a8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80040aa:	fb01 f303 	mul.w	r3, r1, r3
 80040ae:	441a      	add	r2, r3
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	22ff      	movs	r2, #255	@ 0xff
 80040b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	22ff      	movs	r2, #255	@ 0xff
 80040c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d114      	bne.n	80040f4 <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	691b      	ldr	r3, [r3, #16]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d01a      	beq.n	8004108 <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	3310      	adds	r3, #16
 80040d6:	4618      	mov	r0, r3
 80040d8:	f001 faf8 	bl	80056cc <xTaskRemoveFromEventList>
 80040dc:	4603      	mov	r3, r0
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d012      	beq.n	8004108 <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80040e2:	4b16      	ldr	r3, [pc, #88]	@ (800413c <xQueueGenericReset+0x120>)
 80040e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80040e8:	601a      	str	r2, [r3, #0]
 80040ea:	f3bf 8f4f 	dsb	sy
 80040ee:	f3bf 8f6f 	isb	sy
 80040f2:	e009      	b.n	8004108 <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	3310      	adds	r3, #16
 80040f8:	4618      	mov	r0, r3
 80040fa:	f7ff feff 	bl	8003efc <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	3324      	adds	r3, #36	@ 0x24
 8004102:	4618      	mov	r0, r3
 8004104:	f7ff fefa 	bl	8003efc <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8004108:	f002 fd32 	bl	8006b70 <vPortExitCritical>
 800410c:	e001      	b.n	8004112 <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
 800410e:	2300      	movs	r3, #0
 8004110:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d10b      	bne.n	8004130 <xQueueGenericReset+0x114>
        __asm volatile
 8004118:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800411c:	f383 8811 	msr	BASEPRI, r3
 8004120:	f3bf 8f6f 	isb	sy
 8004124:	f3bf 8f4f 	dsb	sy
 8004128:	60bb      	str	r3, [r7, #8]
    }
 800412a:	bf00      	nop
 800412c:	bf00      	nop
 800412e:	e7fd      	b.n	800412c <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8004130:	697b      	ldr	r3, [r7, #20]
}
 8004132:	4618      	mov	r0, r3
 8004134:	3718      	adds	r7, #24
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}
 800413a:	bf00      	nop
 800413c:	e000ed04 	.word	0xe000ed04

08004140 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8004140:	b580      	push	{r7, lr}
 8004142:	b08a      	sub	sp, #40	@ 0x28
 8004144:	af02      	add	r7, sp, #8
 8004146:	60f8      	str	r0, [r7, #12]
 8004148:	60b9      	str	r1, [r7, #8]
 800414a:	4613      	mov	r3, r2
 800414c:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 800414e:	2300      	movs	r3, #0
 8004150:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d02e      	beq.n	80041b6 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8004158:	2100      	movs	r1, #0
 800415a:	68ba      	ldr	r2, [r7, #8]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	fba3 2302 	umull	r2, r3, r3, r2
 8004162:	2b00      	cmp	r3, #0
 8004164:	d000      	beq.n	8004168 <xQueueGenericCreate+0x28>
 8004166:	2101      	movs	r1, #1
 8004168:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800416a:	2b00      	cmp	r3, #0
 800416c:	d123      	bne.n	80041b6 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	68ba      	ldr	r2, [r7, #8]
 8004172:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8004176:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 800417a:	d81c      	bhi.n	80041b6 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	68ba      	ldr	r2, [r7, #8]
 8004180:	fb02 f303 	mul.w	r3, r2, r3
 8004184:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004186:	69bb      	ldr	r3, [r7, #24]
 8004188:	3350      	adds	r3, #80	@ 0x50
 800418a:	4618      	mov	r0, r3
 800418c:	f002 fde8 	bl	8006d60 <pvPortMalloc>
 8004190:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8004192:	69fb      	ldr	r3, [r7, #28]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d01d      	beq.n	80041d4 <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004198:	69fb      	ldr	r3, [r7, #28]
 800419a:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	3350      	adds	r3, #80	@ 0x50
 80041a0:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80041a2:	79fa      	ldrb	r2, [r7, #7]
 80041a4:	69fb      	ldr	r3, [r7, #28]
 80041a6:	9300      	str	r3, [sp, #0]
 80041a8:	4613      	mov	r3, r2
 80041aa:	697a      	ldr	r2, [r7, #20]
 80041ac:	68b9      	ldr	r1, [r7, #8]
 80041ae:	68f8      	ldr	r0, [r7, #12]
 80041b0:	f000 f815 	bl	80041de <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 80041b4:	e00e      	b.n	80041d4 <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 80041b6:	69fb      	ldr	r3, [r7, #28]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d10b      	bne.n	80041d4 <xQueueGenericCreate+0x94>
        __asm volatile
 80041bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041c0:	f383 8811 	msr	BASEPRI, r3
 80041c4:	f3bf 8f6f 	isb	sy
 80041c8:	f3bf 8f4f 	dsb	sy
 80041cc:	613b      	str	r3, [r7, #16]
    }
 80041ce:	bf00      	nop
 80041d0:	bf00      	nop
 80041d2:	e7fd      	b.n	80041d0 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80041d4:	69fb      	ldr	r3, [r7, #28]
    }
 80041d6:	4618      	mov	r0, r3
 80041d8:	3720      	adds	r7, #32
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}

080041de <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80041de:	b580      	push	{r7, lr}
 80041e0:	b084      	sub	sp, #16
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	60f8      	str	r0, [r7, #12]
 80041e6:	60b9      	str	r1, [r7, #8]
 80041e8:	607a      	str	r2, [r7, #4]
 80041ea:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d103      	bne.n	80041fa <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80041f2:	69bb      	ldr	r3, [r7, #24]
 80041f4:	69ba      	ldr	r2, [r7, #24]
 80041f6:	601a      	str	r2, [r3, #0]
 80041f8:	e002      	b.n	8004200 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80041fa:	69bb      	ldr	r3, [r7, #24]
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8004200:	69bb      	ldr	r3, [r7, #24]
 8004202:	68fa      	ldr	r2, [r7, #12]
 8004204:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8004206:	69bb      	ldr	r3, [r7, #24]
 8004208:	68ba      	ldr	r2, [r7, #8]
 800420a:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800420c:	2101      	movs	r1, #1
 800420e:	69b8      	ldr	r0, [r7, #24]
 8004210:	f7ff ff04 	bl	800401c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8004214:	69bb      	ldr	r3, [r7, #24]
 8004216:	78fa      	ldrb	r2, [r7, #3]
 8004218:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800421c:	bf00      	nop
 800421e:	3710      	adds	r7, #16
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}

08004224 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b08e      	sub	sp, #56	@ 0x38
 8004228:	af00      	add	r7, sp, #0
 800422a:	60f8      	str	r0, [r7, #12]
 800422c:	60b9      	str	r1, [r7, #8]
 800422e:	607a      	str	r2, [r7, #4]
 8004230:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004232:	2300      	movs	r3, #0
 8004234:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	633b      	str	r3, [r7, #48]	@ 0x30

    configASSERT( pxQueue );
 800423a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800423c:	2b00      	cmp	r3, #0
 800423e:	d10b      	bne.n	8004258 <xQueueGenericSend+0x34>
        __asm volatile
 8004240:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004244:	f383 8811 	msr	BASEPRI, r3
 8004248:	f3bf 8f6f 	isb	sy
 800424c:	f3bf 8f4f 	dsb	sy
 8004250:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8004252:	bf00      	nop
 8004254:	bf00      	nop
 8004256:	e7fd      	b.n	8004254 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d103      	bne.n	8004266 <xQueueGenericSend+0x42>
 800425e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004262:	2b00      	cmp	r3, #0
 8004264:	d101      	bne.n	800426a <xQueueGenericSend+0x46>
 8004266:	2301      	movs	r3, #1
 8004268:	e000      	b.n	800426c <xQueueGenericSend+0x48>
 800426a:	2300      	movs	r3, #0
 800426c:	2b00      	cmp	r3, #0
 800426e:	d10b      	bne.n	8004288 <xQueueGenericSend+0x64>
        __asm volatile
 8004270:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004274:	f383 8811 	msr	BASEPRI, r3
 8004278:	f3bf 8f6f 	isb	sy
 800427c:	f3bf 8f4f 	dsb	sy
 8004280:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8004282:	bf00      	nop
 8004284:	bf00      	nop
 8004286:	e7fd      	b.n	8004284 <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	2b02      	cmp	r3, #2
 800428c:	d103      	bne.n	8004296 <xQueueGenericSend+0x72>
 800428e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004290:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004292:	2b01      	cmp	r3, #1
 8004294:	d101      	bne.n	800429a <xQueueGenericSend+0x76>
 8004296:	2301      	movs	r3, #1
 8004298:	e000      	b.n	800429c <xQueueGenericSend+0x78>
 800429a:	2300      	movs	r3, #0
 800429c:	2b00      	cmp	r3, #0
 800429e:	d10b      	bne.n	80042b8 <xQueueGenericSend+0x94>
        __asm volatile
 80042a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042a4:	f383 8811 	msr	BASEPRI, r3
 80042a8:	f3bf 8f6f 	isb	sy
 80042ac:	f3bf 8f4f 	dsb	sy
 80042b0:	623b      	str	r3, [r7, #32]
    }
 80042b2:	bf00      	nop
 80042b4:	bf00      	nop
 80042b6:	e7fd      	b.n	80042b4 <xQueueGenericSend+0x90>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80042b8:	f001 fc1c 	bl	8005af4 <xTaskGetSchedulerState>
 80042bc:	4603      	mov	r3, r0
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d102      	bne.n	80042c8 <xQueueGenericSend+0xa4>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d101      	bne.n	80042cc <xQueueGenericSend+0xa8>
 80042c8:	2301      	movs	r3, #1
 80042ca:	e000      	b.n	80042ce <xQueueGenericSend+0xaa>
 80042cc:	2300      	movs	r3, #0
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d10b      	bne.n	80042ea <xQueueGenericSend+0xc6>
        __asm volatile
 80042d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042d6:	f383 8811 	msr	BASEPRI, r3
 80042da:	f3bf 8f6f 	isb	sy
 80042de:	f3bf 8f4f 	dsb	sy
 80042e2:	61fb      	str	r3, [r7, #28]
    }
 80042e4:	bf00      	nop
 80042e6:	bf00      	nop
 80042e8:	e7fd      	b.n	80042e6 <xQueueGenericSend+0xc2>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80042ea:	f002 fc0f 	bl	8006b0c <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80042ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80042f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d302      	bcc.n	8004300 <xQueueGenericSend+0xdc>
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	2b02      	cmp	r3, #2
 80042fe:	d129      	bne.n	8004354 <xQueueGenericSend+0x130>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004300:	683a      	ldr	r2, [r7, #0]
 8004302:	68b9      	ldr	r1, [r7, #8]
 8004304:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004306:	f000 fae0 	bl	80048ca <prvCopyDataToQueue>
 800430a:	62f8      	str	r0, [r7, #44]	@ 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800430c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800430e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004310:	2b00      	cmp	r3, #0
 8004312:	d010      	beq.n	8004336 <xQueueGenericSend+0x112>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004314:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004316:	3324      	adds	r3, #36	@ 0x24
 8004318:	4618      	mov	r0, r3
 800431a:	f001 f9d7 	bl	80056cc <xTaskRemoveFromEventList>
 800431e:	4603      	mov	r3, r0
 8004320:	2b00      	cmp	r3, #0
 8004322:	d013      	beq.n	800434c <xQueueGenericSend+0x128>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 8004324:	4b3f      	ldr	r3, [pc, #252]	@ (8004424 <xQueueGenericSend+0x200>)
 8004326:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800432a:	601a      	str	r2, [r3, #0]
 800432c:	f3bf 8f4f 	dsb	sy
 8004330:	f3bf 8f6f 	isb	sy
 8004334:	e00a      	b.n	800434c <xQueueGenericSend+0x128>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 8004336:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004338:	2b00      	cmp	r3, #0
 800433a:	d007      	beq.n	800434c <xQueueGenericSend+0x128>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 800433c:	4b39      	ldr	r3, [pc, #228]	@ (8004424 <xQueueGenericSend+0x200>)
 800433e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004342:	601a      	str	r2, [r3, #0]
 8004344:	f3bf 8f4f 	dsb	sy
 8004348:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 800434c:	f002 fc10 	bl	8006b70 <vPortExitCritical>
                return pdPASS;
 8004350:	2301      	movs	r3, #1
 8004352:	e063      	b.n	800441c <xQueueGenericSend+0x1f8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d103      	bne.n	8004362 <xQueueGenericSend+0x13e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800435a:	f002 fc09 	bl	8006b70 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 800435e:	2300      	movs	r3, #0
 8004360:	e05c      	b.n	800441c <xQueueGenericSend+0x1f8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8004362:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004364:	2b00      	cmp	r3, #0
 8004366:	d106      	bne.n	8004376 <xQueueGenericSend+0x152>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8004368:	f107 0314 	add.w	r3, r7, #20
 800436c:	4618      	mov	r0, r3
 800436e:	f001 fa85 	bl	800587c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8004372:	2301      	movs	r3, #1
 8004374:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8004376:	f002 fbfb 	bl	8006b70 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800437a:	f000 fea1 	bl	80050c0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800437e:	f002 fbc5 	bl	8006b0c <vPortEnterCritical>
 8004382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004384:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004388:	b25b      	sxtb	r3, r3
 800438a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800438e:	d103      	bne.n	8004398 <xQueueGenericSend+0x174>
 8004390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004392:	2200      	movs	r2, #0
 8004394:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800439a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800439e:	b25b      	sxtb	r3, r3
 80043a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043a4:	d103      	bne.n	80043ae <xQueueGenericSend+0x18a>
 80043a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043a8:	2200      	movs	r2, #0
 80043aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80043ae:	f002 fbdf 	bl	8006b70 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80043b2:	1d3a      	adds	r2, r7, #4
 80043b4:	f107 0314 	add.w	r3, r7, #20
 80043b8:	4611      	mov	r1, r2
 80043ba:	4618      	mov	r0, r3
 80043bc:	f001 fa74 	bl	80058a8 <xTaskCheckForTimeOut>
 80043c0:	4603      	mov	r3, r0
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d124      	bne.n	8004410 <xQueueGenericSend+0x1ec>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80043c6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80043c8:	f000 fb77 	bl	8004aba <prvIsQueueFull>
 80043cc:	4603      	mov	r3, r0
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d018      	beq.n	8004404 <xQueueGenericSend+0x1e0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80043d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043d4:	3310      	adds	r3, #16
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	4611      	mov	r1, r2
 80043da:	4618      	mov	r0, r3
 80043dc:	f001 f90a 	bl	80055f4 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80043e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80043e2:	f000 fb02 	bl	80049ea <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80043e6:	f000 fe79 	bl	80050dc <xTaskResumeAll>
 80043ea:	4603      	mov	r3, r0
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	f47f af7c 	bne.w	80042ea <xQueueGenericSend+0xc6>
                {
                    portYIELD_WITHIN_API();
 80043f2:	4b0c      	ldr	r3, [pc, #48]	@ (8004424 <xQueueGenericSend+0x200>)
 80043f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80043f8:	601a      	str	r2, [r3, #0]
 80043fa:	f3bf 8f4f 	dsb	sy
 80043fe:	f3bf 8f6f 	isb	sy
 8004402:	e772      	b.n	80042ea <xQueueGenericSend+0xc6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8004404:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004406:	f000 faf0 	bl	80049ea <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800440a:	f000 fe67 	bl	80050dc <xTaskResumeAll>
 800440e:	e76c      	b.n	80042ea <xQueueGenericSend+0xc6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8004410:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004412:	f000 faea 	bl	80049ea <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8004416:	f000 fe61 	bl	80050dc <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 800441a:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 800441c:	4618      	mov	r0, r3
 800441e:	3738      	adds	r7, #56	@ 0x38
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}
 8004424:	e000ed04 	.word	0xe000ed04

08004428 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b092      	sub	sp, #72	@ 0x48
 800442c:	af00      	add	r7, sp, #0
 800442e:	60f8      	str	r0, [r7, #12]
 8004430:	60b9      	str	r1, [r7, #8]
 8004432:	607a      	str	r2, [r7, #4]
 8004434:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	643b      	str	r3, [r7, #64]	@ 0x40

    configASSERT( pxQueue );
 800443a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800443c:	2b00      	cmp	r3, #0
 800443e:	d10b      	bne.n	8004458 <xQueueGenericSendFromISR+0x30>
        __asm volatile
 8004440:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004444:	f383 8811 	msr	BASEPRI, r3
 8004448:	f3bf 8f6f 	isb	sy
 800444c:	f3bf 8f4f 	dsb	sy
 8004450:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
 8004452:	bf00      	nop
 8004454:	bf00      	nop
 8004456:	e7fd      	b.n	8004454 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d103      	bne.n	8004466 <xQueueGenericSendFromISR+0x3e>
 800445e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004462:	2b00      	cmp	r3, #0
 8004464:	d101      	bne.n	800446a <xQueueGenericSendFromISR+0x42>
 8004466:	2301      	movs	r3, #1
 8004468:	e000      	b.n	800446c <xQueueGenericSendFromISR+0x44>
 800446a:	2300      	movs	r3, #0
 800446c:	2b00      	cmp	r3, #0
 800446e:	d10b      	bne.n	8004488 <xQueueGenericSendFromISR+0x60>
        __asm volatile
 8004470:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004474:	f383 8811 	msr	BASEPRI, r3
 8004478:	f3bf 8f6f 	isb	sy
 800447c:	f3bf 8f4f 	dsb	sy
 8004480:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8004482:	bf00      	nop
 8004484:	bf00      	nop
 8004486:	e7fd      	b.n	8004484 <xQueueGenericSendFromISR+0x5c>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	2b02      	cmp	r3, #2
 800448c:	d103      	bne.n	8004496 <xQueueGenericSendFromISR+0x6e>
 800448e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004490:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004492:	2b01      	cmp	r3, #1
 8004494:	d101      	bne.n	800449a <xQueueGenericSendFromISR+0x72>
 8004496:	2301      	movs	r3, #1
 8004498:	e000      	b.n	800449c <xQueueGenericSendFromISR+0x74>
 800449a:	2300      	movs	r3, #0
 800449c:	2b00      	cmp	r3, #0
 800449e:	d10b      	bne.n	80044b8 <xQueueGenericSendFromISR+0x90>
        __asm volatile
 80044a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044a4:	f383 8811 	msr	BASEPRI, r3
 80044a8:	f3bf 8f6f 	isb	sy
 80044ac:	f3bf 8f4f 	dsb	sy
 80044b0:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 80044b2:	bf00      	nop
 80044b4:	bf00      	nop
 80044b6:	e7fd      	b.n	80044b4 <xQueueGenericSendFromISR+0x8c>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80044b8:	f002 fc10 	bl	8006cdc <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 80044bc:	f3ef 8211 	mrs	r2, BASEPRI
 80044c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044c4:	f383 8811 	msr	BASEPRI, r3
 80044c8:	f3bf 8f6f 	isb	sy
 80044cc:	f3bf 8f4f 	dsb	sy
 80044d0:	623a      	str	r2, [r7, #32]
 80044d2:	61fb      	str	r3, [r7, #28]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 80044d4:	6a3b      	ldr	r3, [r7, #32]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80044d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80044d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80044da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80044dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80044de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d302      	bcc.n	80044ea <xQueueGenericSendFromISR+0xc2>
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	2b02      	cmp	r3, #2
 80044e8:	d147      	bne.n	800457a <xQueueGenericSendFromISR+0x152>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80044ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80044ec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80044f0:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80044f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80044f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044f8:	637b      	str	r3, [r7, #52]	@ 0x34
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80044fa:	683a      	ldr	r2, [r7, #0]
 80044fc:	68b9      	ldr	r1, [r7, #8]
 80044fe:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8004500:	f000 f9e3 	bl	80048ca <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8004504:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8004508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800450c:	d112      	bne.n	8004534 <xQueueGenericSendFromISR+0x10c>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800450e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004512:	2b00      	cmp	r3, #0
 8004514:	d02e      	beq.n	8004574 <xQueueGenericSendFromISR+0x14c>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004516:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004518:	3324      	adds	r3, #36	@ 0x24
 800451a:	4618      	mov	r0, r3
 800451c:	f001 f8d6 	bl	80056cc <xTaskRemoveFromEventList>
 8004520:	4603      	mov	r3, r0
 8004522:	2b00      	cmp	r3, #0
 8004524:	d026      	beq.n	8004574 <xQueueGenericSendFromISR+0x14c>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d023      	beq.n	8004574 <xQueueGenericSendFromISR+0x14c>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2201      	movs	r2, #1
 8004530:	601a      	str	r2, [r3, #0]
 8004532:	e01f      	b.n	8004574 <xQueueGenericSendFromISR+0x14c>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 8004534:	f000 fede 	bl	80052f4 <uxTaskGetNumberOfTasks>
 8004538:	6338      	str	r0, [r7, #48]	@ 0x30
 800453a:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 800453e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004540:	429a      	cmp	r2, r3
 8004542:	d917      	bls.n	8004574 <xQueueGenericSendFromISR+0x14c>
 8004544:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8004548:	2b7f      	cmp	r3, #127	@ 0x7f
 800454a:	d10b      	bne.n	8004564 <xQueueGenericSendFromISR+0x13c>
        __asm volatile
 800454c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004550:	f383 8811 	msr	BASEPRI, r3
 8004554:	f3bf 8f6f 	isb	sy
 8004558:	f3bf 8f4f 	dsb	sy
 800455c:	61bb      	str	r3, [r7, #24]
    }
 800455e:	bf00      	nop
 8004560:	bf00      	nop
 8004562:	e7fd      	b.n	8004560 <xQueueGenericSendFromISR+0x138>
 8004564:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8004568:	3301      	adds	r3, #1
 800456a:	b2db      	uxtb	r3, r3
 800456c:	b25a      	sxtb	r2, r3
 800456e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004570:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 8004574:	2301      	movs	r3, #1
 8004576:	647b      	str	r3, [r7, #68]	@ 0x44
        {
 8004578:	e001      	b.n	800457e <xQueueGenericSendFromISR+0x156>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 800457a:	2300      	movs	r3, #0
 800457c:	647b      	str	r3, [r7, #68]	@ 0x44
 800457e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004580:	617b      	str	r3, [r7, #20]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8004588:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800458a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800458c:	4618      	mov	r0, r3
 800458e:	3748      	adds	r7, #72	@ 0x48
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}

08004594 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b08c      	sub	sp, #48	@ 0x30
 8004598:	af00      	add	r7, sp, #0
 800459a:	60f8      	str	r0, [r7, #12]
 800459c:	60b9      	str	r1, [r7, #8]
 800459e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80045a0:	2300      	movs	r3, #0
 80045a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80045a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d10b      	bne.n	80045c6 <xQueueReceive+0x32>
        __asm volatile
 80045ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045b2:	f383 8811 	msr	BASEPRI, r3
 80045b6:	f3bf 8f6f 	isb	sy
 80045ba:	f3bf 8f4f 	dsb	sy
 80045be:	623b      	str	r3, [r7, #32]
    }
 80045c0:	bf00      	nop
 80045c2:	bf00      	nop
 80045c4:	e7fd      	b.n	80045c2 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d103      	bne.n	80045d4 <xQueueReceive+0x40>
 80045cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d101      	bne.n	80045d8 <xQueueReceive+0x44>
 80045d4:	2301      	movs	r3, #1
 80045d6:	e000      	b.n	80045da <xQueueReceive+0x46>
 80045d8:	2300      	movs	r3, #0
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d10b      	bne.n	80045f6 <xQueueReceive+0x62>
        __asm volatile
 80045de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045e2:	f383 8811 	msr	BASEPRI, r3
 80045e6:	f3bf 8f6f 	isb	sy
 80045ea:	f3bf 8f4f 	dsb	sy
 80045ee:	61fb      	str	r3, [r7, #28]
    }
 80045f0:	bf00      	nop
 80045f2:	bf00      	nop
 80045f4:	e7fd      	b.n	80045f2 <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80045f6:	f001 fa7d 	bl	8005af4 <xTaskGetSchedulerState>
 80045fa:	4603      	mov	r3, r0
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d102      	bne.n	8004606 <xQueueReceive+0x72>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d101      	bne.n	800460a <xQueueReceive+0x76>
 8004606:	2301      	movs	r3, #1
 8004608:	e000      	b.n	800460c <xQueueReceive+0x78>
 800460a:	2300      	movs	r3, #0
 800460c:	2b00      	cmp	r3, #0
 800460e:	d10b      	bne.n	8004628 <xQueueReceive+0x94>
        __asm volatile
 8004610:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004614:	f383 8811 	msr	BASEPRI, r3
 8004618:	f3bf 8f6f 	isb	sy
 800461c:	f3bf 8f4f 	dsb	sy
 8004620:	61bb      	str	r3, [r7, #24]
    }
 8004622:	bf00      	nop
 8004624:	bf00      	nop
 8004626:	e7fd      	b.n	8004624 <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8004628:	f002 fa70 	bl	8006b0c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800462c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800462e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004630:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004634:	2b00      	cmp	r3, #0
 8004636:	d01f      	beq.n	8004678 <xQueueReceive+0xe4>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004638:	68b9      	ldr	r1, [r7, #8]
 800463a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800463c:	f000 f9af 	bl	800499e <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004642:	1e5a      	subs	r2, r3, #1
 8004644:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004646:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004648:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800464a:	691b      	ldr	r3, [r3, #16]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d00f      	beq.n	8004670 <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004650:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004652:	3310      	adds	r3, #16
 8004654:	4618      	mov	r0, r3
 8004656:	f001 f839 	bl	80056cc <xTaskRemoveFromEventList>
 800465a:	4603      	mov	r3, r0
 800465c:	2b00      	cmp	r3, #0
 800465e:	d007      	beq.n	8004670 <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8004660:	4b3c      	ldr	r3, [pc, #240]	@ (8004754 <xQueueReceive+0x1c0>)
 8004662:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004666:	601a      	str	r2, [r3, #0]
 8004668:	f3bf 8f4f 	dsb	sy
 800466c:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8004670:	f002 fa7e 	bl	8006b70 <vPortExitCritical>
                return pdPASS;
 8004674:	2301      	movs	r3, #1
 8004676:	e069      	b.n	800474c <xQueueReceive+0x1b8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d103      	bne.n	8004686 <xQueueReceive+0xf2>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800467e:	f002 fa77 	bl	8006b70 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8004682:	2300      	movs	r3, #0
 8004684:	e062      	b.n	800474c <xQueueReceive+0x1b8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8004686:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004688:	2b00      	cmp	r3, #0
 800468a:	d106      	bne.n	800469a <xQueueReceive+0x106>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800468c:	f107 0310 	add.w	r3, r7, #16
 8004690:	4618      	mov	r0, r3
 8004692:	f001 f8f3 	bl	800587c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8004696:	2301      	movs	r3, #1
 8004698:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800469a:	f002 fa69 	bl	8006b70 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800469e:	f000 fd0f 	bl	80050c0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80046a2:	f002 fa33 	bl	8006b0c <vPortEnterCritical>
 80046a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046a8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80046ac:	b25b      	sxtb	r3, r3
 80046ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046b2:	d103      	bne.n	80046bc <xQueueReceive+0x128>
 80046b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046b6:	2200      	movs	r2, #0
 80046b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80046bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046be:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80046c2:	b25b      	sxtb	r3, r3
 80046c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046c8:	d103      	bne.n	80046d2 <xQueueReceive+0x13e>
 80046ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046cc:	2200      	movs	r2, #0
 80046ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80046d2:	f002 fa4d 	bl	8006b70 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80046d6:	1d3a      	adds	r2, r7, #4
 80046d8:	f107 0310 	add.w	r3, r7, #16
 80046dc:	4611      	mov	r1, r2
 80046de:	4618      	mov	r0, r3
 80046e0:	f001 f8e2 	bl	80058a8 <xTaskCheckForTimeOut>
 80046e4:	4603      	mov	r3, r0
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d123      	bne.n	8004732 <xQueueReceive+0x19e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80046ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80046ec:	f000 f9cf 	bl	8004a8e <prvIsQueueEmpty>
 80046f0:	4603      	mov	r3, r0
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d017      	beq.n	8004726 <xQueueReceive+0x192>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80046f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046f8:	3324      	adds	r3, #36	@ 0x24
 80046fa:	687a      	ldr	r2, [r7, #4]
 80046fc:	4611      	mov	r1, r2
 80046fe:	4618      	mov	r0, r3
 8004700:	f000 ff78 	bl	80055f4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8004704:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004706:	f000 f970 	bl	80049ea <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800470a:	f000 fce7 	bl	80050dc <xTaskResumeAll>
 800470e:	4603      	mov	r3, r0
 8004710:	2b00      	cmp	r3, #0
 8004712:	d189      	bne.n	8004628 <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 8004714:	4b0f      	ldr	r3, [pc, #60]	@ (8004754 <xQueueReceive+0x1c0>)
 8004716:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800471a:	601a      	str	r2, [r3, #0]
 800471c:	f3bf 8f4f 	dsb	sy
 8004720:	f3bf 8f6f 	isb	sy
 8004724:	e780      	b.n	8004628 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8004726:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004728:	f000 f95f 	bl	80049ea <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800472c:	f000 fcd6 	bl	80050dc <xTaskResumeAll>
 8004730:	e77a      	b.n	8004628 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8004732:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004734:	f000 f959 	bl	80049ea <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8004738:	f000 fcd0 	bl	80050dc <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800473c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800473e:	f000 f9a6 	bl	8004a8e <prvIsQueueEmpty>
 8004742:	4603      	mov	r3, r0
 8004744:	2b00      	cmp	r3, #0
 8004746:	f43f af6f 	beq.w	8004628 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800474a:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800474c:	4618      	mov	r0, r3
 800474e:	3730      	adds	r7, #48	@ 0x30
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}
 8004754:	e000ed04 	.word	0xe000ed04

08004758 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b090      	sub	sp, #64	@ 0x40
 800475c:	af00      	add	r7, sp, #0
 800475e:	60f8      	str	r0, [r7, #12]
 8004760:	60b9      	str	r1, [r7, #8]
 8004762:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	63bb      	str	r3, [r7, #56]	@ 0x38

    configASSERT( pxQueue );
 8004768:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800476a:	2b00      	cmp	r3, #0
 800476c:	d10b      	bne.n	8004786 <xQueueReceiveFromISR+0x2e>
        __asm volatile
 800476e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004772:	f383 8811 	msr	BASEPRI, r3
 8004776:	f3bf 8f6f 	isb	sy
 800477a:	f3bf 8f4f 	dsb	sy
 800477e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8004780:	bf00      	nop
 8004782:	bf00      	nop
 8004784:	e7fd      	b.n	8004782 <xQueueReceiveFromISR+0x2a>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d103      	bne.n	8004794 <xQueueReceiveFromISR+0x3c>
 800478c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800478e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004790:	2b00      	cmp	r3, #0
 8004792:	d101      	bne.n	8004798 <xQueueReceiveFromISR+0x40>
 8004794:	2301      	movs	r3, #1
 8004796:	e000      	b.n	800479a <xQueueReceiveFromISR+0x42>
 8004798:	2300      	movs	r3, #0
 800479a:	2b00      	cmp	r3, #0
 800479c:	d10b      	bne.n	80047b6 <xQueueReceiveFromISR+0x5e>
        __asm volatile
 800479e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047a2:	f383 8811 	msr	BASEPRI, r3
 80047a6:	f3bf 8f6f 	isb	sy
 80047aa:	f3bf 8f4f 	dsb	sy
 80047ae:	623b      	str	r3, [r7, #32]
    }
 80047b0:	bf00      	nop
 80047b2:	bf00      	nop
 80047b4:	e7fd      	b.n	80047b2 <xQueueReceiveFromISR+0x5a>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80047b6:	f002 fa91 	bl	8006cdc <vPortValidateInterruptPriority>
        __asm volatile
 80047ba:	f3ef 8211 	mrs	r2, BASEPRI
 80047be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047c2:	f383 8811 	msr	BASEPRI, r3
 80047c6:	f3bf 8f6f 	isb	sy
 80047ca:	f3bf 8f4f 	dsb	sy
 80047ce:	61fa      	str	r2, [r7, #28]
 80047d0:	61bb      	str	r3, [r7, #24]
        return ulOriginalBASEPRI;
 80047d2:	69fb      	ldr	r3, [r7, #28]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80047d4:	637b      	str	r3, [r7, #52]	@ 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80047d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047da:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80047dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d047      	beq.n	8004872 <xQueueReceiveFromISR+0x11a>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 80047e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047e4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80047e8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 80047ec:	68b9      	ldr	r1, [r7, #8]
 80047ee:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80047f0:	f000 f8d5 	bl	800499e <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80047f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047f6:	1e5a      	subs	r2, r3, #1
 80047f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047fa:	639a      	str	r2, [r3, #56]	@ 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 80047fc:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8004800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004804:	d112      	bne.n	800482c <xQueueReceiveFromISR+0xd4>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004806:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004808:	691b      	ldr	r3, [r3, #16]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d02e      	beq.n	800486c <xQueueReceiveFromISR+0x114>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800480e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004810:	3310      	adds	r3, #16
 8004812:	4618      	mov	r0, r3
 8004814:	f000 ff5a 	bl	80056cc <xTaskRemoveFromEventList>
 8004818:	4603      	mov	r3, r0
 800481a:	2b00      	cmp	r3, #0
 800481c:	d026      	beq.n	800486c <xQueueReceiveFromISR+0x114>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d023      	beq.n	800486c <xQueueReceiveFromISR+0x114>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2201      	movs	r2, #1
 8004828:	601a      	str	r2, [r3, #0]
 800482a:	e01f      	b.n	800486c <xQueueReceiveFromISR+0x114>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                prvIncrementQueueRxLock( pxQueue, cRxLock );
 800482c:	f000 fd62 	bl	80052f4 <uxTaskGetNumberOfTasks>
 8004830:	62b8      	str	r0, [r7, #40]	@ 0x28
 8004832:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8004836:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004838:	429a      	cmp	r2, r3
 800483a:	d917      	bls.n	800486c <xQueueReceiveFromISR+0x114>
 800483c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8004840:	2b7f      	cmp	r3, #127	@ 0x7f
 8004842:	d10b      	bne.n	800485c <xQueueReceiveFromISR+0x104>
        __asm volatile
 8004844:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004848:	f383 8811 	msr	BASEPRI, r3
 800484c:	f3bf 8f6f 	isb	sy
 8004850:	f3bf 8f4f 	dsb	sy
 8004854:	617b      	str	r3, [r7, #20]
    }
 8004856:	bf00      	nop
 8004858:	bf00      	nop
 800485a:	e7fd      	b.n	8004858 <xQueueReceiveFromISR+0x100>
 800485c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004860:	3301      	adds	r3, #1
 8004862:	b2db      	uxtb	r3, r3
 8004864:	b25a      	sxtb	r2, r3
 8004866:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004868:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            }

            xReturn = pdPASS;
 800486c:	2301      	movs	r3, #1
 800486e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004870:	e001      	b.n	8004876 <xQueueReceiveFromISR+0x11e>
        }
        else
        {
            xReturn = pdFAIL;
 8004872:	2300      	movs	r3, #0
 8004874:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004876:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004878:	613b      	str	r3, [r7, #16]
        __asm volatile
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	f383 8811 	msr	BASEPRI, r3
    }
 8004880:	bf00      	nop
            traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8004882:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004884:	4618      	mov	r0, r3
 8004886:	3740      	adds	r7, #64	@ 0x40
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}

0800488c <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b084      	sub	sp, #16
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    configASSERT( xQueue );
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d10b      	bne.n	80048b2 <uxQueueMessagesWaiting+0x26>
        __asm volatile
 800489a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800489e:	f383 8811 	msr	BASEPRI, r3
 80048a2:	f3bf 8f6f 	isb	sy
 80048a6:	f3bf 8f4f 	dsb	sy
 80048aa:	60bb      	str	r3, [r7, #8]
    }
 80048ac:	bf00      	nop
 80048ae:	bf00      	nop
 80048b0:	e7fd      	b.n	80048ae <uxQueueMessagesWaiting+0x22>

    taskENTER_CRITICAL();
 80048b2:	f002 f92b 	bl	8006b0c <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048ba:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 80048bc:	f002 f958 	bl	8006b70 <vPortExitCritical>

    return uxReturn;
 80048c0:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80048c2:	4618      	mov	r0, r3
 80048c4:	3710      	adds	r7, #16
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}

080048ca <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80048ca:	b580      	push	{r7, lr}
 80048cc:	b086      	sub	sp, #24
 80048ce:	af00      	add	r7, sp, #0
 80048d0:	60f8      	str	r0, [r7, #12]
 80048d2:	60b9      	str	r1, [r7, #8]
 80048d4:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80048d6:	2300      	movs	r3, #0
 80048d8:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048de:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d10d      	bne.n	8004904 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d14d      	bne.n	800498c <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	4618      	mov	r0, r3
 80048f6:	f001 f91b 	bl	8005b30 <xTaskPriorityDisinherit>
 80048fa:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2200      	movs	r2, #0
 8004900:	609a      	str	r2, [r3, #8]
 8004902:	e043      	b.n	800498c <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d119      	bne.n	800493e <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	6858      	ldr	r0, [r3, #4]
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004912:	461a      	mov	r2, r3
 8004914:	68b9      	ldr	r1, [r7, #8]
 8004916:	f002 fc1f 	bl	8007158 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	685a      	ldr	r2, [r3, #4]
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004922:	441a      	add	r2, r3
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	685a      	ldr	r2, [r3, #4]
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	429a      	cmp	r2, r3
 8004932:	d32b      	bcc.n	800498c <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	605a      	str	r2, [r3, #4]
 800493c:	e026      	b.n	800498c <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	68d8      	ldr	r0, [r3, #12]
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004946:	461a      	mov	r2, r3
 8004948:	68b9      	ldr	r1, [r7, #8]
 800494a:	f002 fc05 	bl	8007158 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	68da      	ldr	r2, [r3, #12]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004956:	425b      	negs	r3, r3
 8004958:	441a      	add	r2, r3
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	68da      	ldr	r2, [r3, #12]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	429a      	cmp	r2, r3
 8004968:	d207      	bcs.n	800497a <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	689a      	ldr	r2, [r3, #8]
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004972:	425b      	negs	r3, r3
 8004974:	441a      	add	r2, r3
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2b02      	cmp	r3, #2
 800497e:	d105      	bne.n	800498c <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d002      	beq.n	800498c <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	3b01      	subs	r3, #1
 800498a:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	1c5a      	adds	r2, r3, #1
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8004994:	697b      	ldr	r3, [r7, #20]
}
 8004996:	4618      	mov	r0, r3
 8004998:	3718      	adds	r7, #24
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}

0800499e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800499e:	b580      	push	{r7, lr}
 80049a0:	b082      	sub	sp, #8
 80049a2:	af00      	add	r7, sp, #0
 80049a4:	6078      	str	r0, [r7, #4]
 80049a6:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d018      	beq.n	80049e2 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	68da      	ldr	r2, [r3, #12]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049b8:	441a      	add	r2, r3
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	68da      	ldr	r2, [r3, #12]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	429a      	cmp	r2, r3
 80049c8:	d303      	bcc.n	80049d2 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	68d9      	ldr	r1, [r3, #12]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049da:	461a      	mov	r2, r3
 80049dc:	6838      	ldr	r0, [r7, #0]
 80049de:	f002 fbbb 	bl	8007158 <memcpy>
    }
}
 80049e2:	bf00      	nop
 80049e4:	3708      	adds	r7, #8
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}

080049ea <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80049ea:	b580      	push	{r7, lr}
 80049ec:	b084      	sub	sp, #16
 80049ee:	af00      	add	r7, sp, #0
 80049f0:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80049f2:	f002 f88b 	bl	8006b0c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80049fc:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80049fe:	e011      	b.n	8004a24 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d012      	beq.n	8004a2e <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	3324      	adds	r3, #36	@ 0x24
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f000 fe5d 	bl	80056cc <xTaskRemoveFromEventList>
 8004a12:	4603      	mov	r3, r0
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d001      	beq.n	8004a1c <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8004a18:	f000 ffae 	bl	8005978 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8004a1c:	7bfb      	ldrb	r3, [r7, #15]
 8004a1e:	3b01      	subs	r3, #1
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8004a24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	dce9      	bgt.n	8004a00 <prvUnlockQueue+0x16>
 8004a2c:	e000      	b.n	8004a30 <prvUnlockQueue+0x46>
                    break;
 8004a2e:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	22ff      	movs	r2, #255	@ 0xff
 8004a34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8004a38:	f002 f89a 	bl	8006b70 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8004a3c:	f002 f866 	bl	8006b0c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004a46:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8004a48:	e011      	b.n	8004a6e <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	691b      	ldr	r3, [r3, #16]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d012      	beq.n	8004a78 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	3310      	adds	r3, #16
 8004a56:	4618      	mov	r0, r3
 8004a58:	f000 fe38 	bl	80056cc <xTaskRemoveFromEventList>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d001      	beq.n	8004a66 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8004a62:	f000 ff89 	bl	8005978 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8004a66:	7bbb      	ldrb	r3, [r7, #14]
 8004a68:	3b01      	subs	r3, #1
 8004a6a:	b2db      	uxtb	r3, r3
 8004a6c:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8004a6e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	dce9      	bgt.n	8004a4a <prvUnlockQueue+0x60>
 8004a76:	e000      	b.n	8004a7a <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8004a78:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	22ff      	movs	r2, #255	@ 0xff
 8004a7e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8004a82:	f002 f875 	bl	8006b70 <vPortExitCritical>
}
 8004a86:	bf00      	nop
 8004a88:	3710      	adds	r7, #16
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}

08004a8e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8004a8e:	b580      	push	{r7, lr}
 8004a90:	b084      	sub	sp, #16
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8004a96:	f002 f839 	bl	8006b0c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d102      	bne.n	8004aa8 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	60fb      	str	r3, [r7, #12]
 8004aa6:	e001      	b.n	8004aac <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8004aac:	f002 f860 	bl	8006b70 <vPortExitCritical>

    return xReturn;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3710      	adds	r7, #16
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}

08004aba <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8004aba:	b580      	push	{r7, lr}
 8004abc:	b084      	sub	sp, #16
 8004abe:	af00      	add	r7, sp, #0
 8004ac0:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8004ac2:	f002 f823 	bl	8006b0c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d102      	bne.n	8004ad8 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	60fb      	str	r3, [r7, #12]
 8004ad6:	e001      	b.n	8004adc <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8004adc:	f002 f848 	bl	8006b70 <vPortExitCritical>

    return xReturn;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3710      	adds	r7, #16
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}

08004aea <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 8004aea:	b480      	push	{r7}
 8004aec:	b087      	sub	sp, #28
 8004aee:	af00      	add	r7, sp, #0
 8004af0:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d10b      	bne.n	8004b14 <xQueueIsQueueFullFromISR+0x2a>
        __asm volatile
 8004afc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b00:	f383 8811 	msr	BASEPRI, r3
 8004b04:	f3bf 8f6f 	isb	sy
 8004b08:	f3bf 8f4f 	dsb	sy
 8004b0c:	60fb      	str	r3, [r7, #12]
    }
 8004b0e:	bf00      	nop
 8004b10:	bf00      	nop
 8004b12:	e7fd      	b.n	8004b10 <xQueueIsQueueFullFromISR+0x26>

    if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d102      	bne.n	8004b26 <xQueueIsQueueFullFromISR+0x3c>
    {
        xReturn = pdTRUE;
 8004b20:	2301      	movs	r3, #1
 8004b22:	617b      	str	r3, [r7, #20]
 8004b24:	e001      	b.n	8004b2a <xQueueIsQueueFullFromISR+0x40>
    }
    else
    {
        xReturn = pdFALSE;
 8004b26:	2300      	movs	r3, #0
 8004b28:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8004b2a:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	371c      	adds	r7, #28
 8004b30:	46bd      	mov	sp, r7
 8004b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b36:	4770      	bx	lr

08004b38 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8004b38:	b480      	push	{r7}
 8004b3a:	b087      	sub	sp, #28
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8004b42:	2300      	movs	r3, #0
 8004b44:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d10b      	bne.n	8004b64 <vQueueAddToRegistry+0x2c>
        __asm volatile
 8004b4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b50:	f383 8811 	msr	BASEPRI, r3
 8004b54:	f3bf 8f6f 	isb	sy
 8004b58:	f3bf 8f4f 	dsb	sy
 8004b5c:	60fb      	str	r3, [r7, #12]
    }
 8004b5e:	bf00      	nop
 8004b60:	bf00      	nop
 8004b62:	e7fd      	b.n	8004b60 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d024      	beq.n	8004bb4 <vQueueAddToRegistry+0x7c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	617b      	str	r3, [r7, #20]
 8004b6e:	e01e      	b.n	8004bae <vQueueAddToRegistry+0x76>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8004b70:	4a18      	ldr	r2, [pc, #96]	@ (8004bd4 <vQueueAddToRegistry+0x9c>)
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	00db      	lsls	r3, r3, #3
 8004b76:	4413      	add	r3, r2
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	687a      	ldr	r2, [r7, #4]
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d105      	bne.n	8004b8c <vQueueAddToRegistry+0x54>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	00db      	lsls	r3, r3, #3
 8004b84:	4a13      	ldr	r2, [pc, #76]	@ (8004bd4 <vQueueAddToRegistry+0x9c>)
 8004b86:	4413      	add	r3, r2
 8004b88:	613b      	str	r3, [r7, #16]
                    break;
 8004b8a:	e013      	b.n	8004bb4 <vQueueAddToRegistry+0x7c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d10a      	bne.n	8004ba8 <vQueueAddToRegistry+0x70>
 8004b92:	4a10      	ldr	r2, [pc, #64]	@ (8004bd4 <vQueueAddToRegistry+0x9c>)
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d104      	bne.n	8004ba8 <vQueueAddToRegistry+0x70>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	00db      	lsls	r3, r3, #3
 8004ba2:	4a0c      	ldr	r2, [pc, #48]	@ (8004bd4 <vQueueAddToRegistry+0x9c>)
 8004ba4:	4413      	add	r3, r2
 8004ba6:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	3301      	adds	r3, #1
 8004bac:	617b      	str	r3, [r7, #20]
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	2b07      	cmp	r3, #7
 8004bb2:	d9dd      	bls.n	8004b70 <vQueueAddToRegistry+0x38>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d005      	beq.n	8004bc6 <vQueueAddToRegistry+0x8e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	683a      	ldr	r2, [r7, #0]
 8004bbe:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	687a      	ldr	r2, [r7, #4]
 8004bc4:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8004bc6:	bf00      	nop
 8004bc8:	371c      	adds	r7, #28
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr
 8004bd2:	bf00      	nop
 8004bd4:	20000104 	.word	0x20000104

08004bd8 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b086      	sub	sp, #24
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	60f8      	str	r0, [r7, #12]
 8004be0:	60b9      	str	r1, [r7, #8]
 8004be2:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8004be8:	f001 ff90 	bl	8006b0c <vPortEnterCritical>
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004bf2:	b25b      	sxtb	r3, r3
 8004bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bf8:	d103      	bne.n	8004c02 <vQueueWaitForMessageRestricted+0x2a>
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004c08:	b25b      	sxtb	r3, r3
 8004c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c0e:	d103      	bne.n	8004c18 <vQueueWaitForMessageRestricted+0x40>
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	2200      	movs	r2, #0
 8004c14:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004c18:	f001 ffaa 	bl	8006b70 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d106      	bne.n	8004c32 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	3324      	adds	r3, #36	@ 0x24
 8004c28:	687a      	ldr	r2, [r7, #4]
 8004c2a:	68b9      	ldr	r1, [r7, #8]
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f000 fd07 	bl	8005640 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8004c32:	6978      	ldr	r0, [r7, #20]
 8004c34:	f7ff fed9 	bl	80049ea <prvUnlockQueue>
    }
 8004c38:	bf00      	nop
 8004c3a:	3718      	adds	r7, #24
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}

08004c40 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b08c      	sub	sp, #48	@ 0x30
 8004c44:	af04      	add	r7, sp, #16
 8004c46:	60f8      	str	r0, [r7, #12]
 8004c48:	60b9      	str	r1, [r7, #8]
 8004c4a:	603b      	str	r3, [r7, #0]
 8004c4c:	4613      	mov	r3, r2
 8004c4e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004c50:	88fb      	ldrh	r3, [r7, #6]
 8004c52:	009b      	lsls	r3, r3, #2
 8004c54:	4618      	mov	r0, r3
 8004c56:	f002 f883 	bl	8006d60 <pvPortMalloc>
 8004c5a:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d013      	beq.n	8004c8a <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004c62:	2058      	movs	r0, #88	@ 0x58
 8004c64:	f002 f87c 	bl	8006d60 <pvPortMalloc>
 8004c68:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8004c6a:	69fb      	ldr	r3, [r7, #28]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d008      	beq.n	8004c82 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8004c70:	2258      	movs	r2, #88	@ 0x58
 8004c72:	2100      	movs	r1, #0
 8004c74:	69f8      	ldr	r0, [r7, #28]
 8004c76:	f002 fa43 	bl	8007100 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8004c7a:	69fb      	ldr	r3, [r7, #28]
 8004c7c:	697a      	ldr	r2, [r7, #20]
 8004c7e:	631a      	str	r2, [r3, #48]	@ 0x30
 8004c80:	e005      	b.n	8004c8e <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8004c82:	6978      	ldr	r0, [r7, #20]
 8004c84:	f002 f928 	bl	8006ed8 <vPortFree>
 8004c88:	e001      	b.n	8004c8e <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8004c8e:	69fb      	ldr	r3, [r7, #28]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d013      	beq.n	8004cbc <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004c94:	88fa      	ldrh	r2, [r7, #6]
 8004c96:	2300      	movs	r3, #0
 8004c98:	9303      	str	r3, [sp, #12]
 8004c9a:	69fb      	ldr	r3, [r7, #28]
 8004c9c:	9302      	str	r3, [sp, #8]
 8004c9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ca0:	9301      	str	r3, [sp, #4]
 8004ca2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ca4:	9300      	str	r3, [sp, #0]
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	68b9      	ldr	r1, [r7, #8]
 8004caa:	68f8      	ldr	r0, [r7, #12]
 8004cac:	f000 f80e 	bl	8004ccc <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8004cb0:	69f8      	ldr	r0, [r7, #28]
 8004cb2:	f000 f89b 	bl	8004dec <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	61bb      	str	r3, [r7, #24]
 8004cba:	e002      	b.n	8004cc2 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004cbc:	f04f 33ff 	mov.w	r3, #4294967295
 8004cc0:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8004cc2:	69bb      	ldr	r3, [r7, #24]
    }
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	3720      	adds	r7, #32
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}

08004ccc <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b088      	sub	sp, #32
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	60f8      	str	r0, [r7, #12]
 8004cd4:	60b9      	str	r1, [r7, #8]
 8004cd6:	607a      	str	r2, [r7, #4]
 8004cd8:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004cda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cdc:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	009b      	lsls	r3, r3, #2
 8004ce2:	461a      	mov	r2, r3
 8004ce4:	21a5      	movs	r1, #165	@ 0xa5
 8004ce6:	f002 fa0b 	bl	8007100 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004cea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004cf4:	3b01      	subs	r3, #1
 8004cf6:	009b      	lsls	r3, r3, #2
 8004cf8:	4413      	add	r3, r2
 8004cfa:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004cfc:	69bb      	ldr	r3, [r7, #24]
 8004cfe:	f023 0307 	bic.w	r3, r3, #7
 8004d02:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004d04:	69bb      	ldr	r3, [r7, #24]
 8004d06:	f003 0307 	and.w	r3, r3, #7
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d00b      	beq.n	8004d26 <prvInitialiseNewTask+0x5a>
        __asm volatile
 8004d0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d12:	f383 8811 	msr	BASEPRI, r3
 8004d16:	f3bf 8f6f 	isb	sy
 8004d1a:	f3bf 8f4f 	dsb	sy
 8004d1e:	617b      	str	r3, [r7, #20]
    }
 8004d20:	bf00      	nop
 8004d22:	bf00      	nop
 8004d24:	e7fd      	b.n	8004d22 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d01e      	beq.n	8004d6a <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	61fb      	str	r3, [r7, #28]
 8004d30:	e012      	b.n	8004d58 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004d32:	68ba      	ldr	r2, [r7, #8]
 8004d34:	69fb      	ldr	r3, [r7, #28]
 8004d36:	4413      	add	r3, r2
 8004d38:	7819      	ldrb	r1, [r3, #0]
 8004d3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d3c:	69fb      	ldr	r3, [r7, #28]
 8004d3e:	4413      	add	r3, r2
 8004d40:	3334      	adds	r3, #52	@ 0x34
 8004d42:	460a      	mov	r2, r1
 8004d44:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8004d46:	68ba      	ldr	r2, [r7, #8]
 8004d48:	69fb      	ldr	r3, [r7, #28]
 8004d4a:	4413      	add	r3, r2
 8004d4c:	781b      	ldrb	r3, [r3, #0]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d006      	beq.n	8004d60 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004d52:	69fb      	ldr	r3, [r7, #28]
 8004d54:	3301      	adds	r3, #1
 8004d56:	61fb      	str	r3, [r7, #28]
 8004d58:	69fb      	ldr	r3, [r7, #28]
 8004d5a:	2b09      	cmp	r3, #9
 8004d5c:	d9e9      	bls.n	8004d32 <prvInitialiseNewTask+0x66>
 8004d5e:	e000      	b.n	8004d62 <prvInitialiseNewTask+0x96>
            {
                break;
 8004d60:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004d62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d64:	2200      	movs	r2, #0
 8004d66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8004d6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d6c:	2b04      	cmp	r3, #4
 8004d6e:	d90b      	bls.n	8004d88 <prvInitialiseNewTask+0xbc>
        __asm volatile
 8004d70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d74:	f383 8811 	msr	BASEPRI, r3
 8004d78:	f3bf 8f6f 	isb	sy
 8004d7c:	f3bf 8f4f 	dsb	sy
 8004d80:	613b      	str	r3, [r7, #16]
    }
 8004d82:	bf00      	nop
 8004d84:	bf00      	nop
 8004d86:	e7fd      	b.n	8004d84 <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004d88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d8a:	2b04      	cmp	r3, #4
 8004d8c:	d901      	bls.n	8004d92 <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004d8e:	2304      	movs	r3, #4
 8004d90:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8004d92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d94:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004d96:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8004d98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d9a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004d9c:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004d9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004da0:	3304      	adds	r3, #4
 8004da2:	4618      	mov	r0, r3
 8004da4:	f7ff f8ca 	bl	8003f3c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004da8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004daa:	3318      	adds	r3, #24
 8004dac:	4618      	mov	r0, r3
 8004dae:	f7ff f8c5 	bl	8003f3c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004db2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004db4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004db6:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004db8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dba:	f1c3 0205 	rsb	r2, r3, #5
 8004dbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dc0:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004dc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dc4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004dc6:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004dc8:	683a      	ldr	r2, [r7, #0]
 8004dca:	68f9      	ldr	r1, [r7, #12]
 8004dcc:	69b8      	ldr	r0, [r7, #24]
 8004dce:	f001 fd67 	bl	80068a0 <pxPortInitialiseStack>
 8004dd2:	4602      	mov	r2, r0
 8004dd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dd6:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8004dd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d002      	beq.n	8004de4 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004dde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004de0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004de2:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004de4:	bf00      	nop
 8004de6:	3720      	adds	r7, #32
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}

08004dec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b084      	sub	sp, #16
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8004df4:	f001 fe8a 	bl	8006b0c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8004df8:	4b40      	ldr	r3, [pc, #256]	@ (8004efc <prvAddNewTaskToReadyList+0x110>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	3301      	adds	r3, #1
 8004dfe:	4a3f      	ldr	r2, [pc, #252]	@ (8004efc <prvAddNewTaskToReadyList+0x110>)
 8004e00:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8004e02:	4b3f      	ldr	r3, [pc, #252]	@ (8004f00 <prvAddNewTaskToReadyList+0x114>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d109      	bne.n	8004e1e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8004e0a:	4a3d      	ldr	r2, [pc, #244]	@ (8004f00 <prvAddNewTaskToReadyList+0x114>)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004e10:	4b3a      	ldr	r3, [pc, #232]	@ (8004efc <prvAddNewTaskToReadyList+0x110>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d110      	bne.n	8004e3a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8004e18:	f000 fdd2 	bl	80059c0 <prvInitialiseTaskLists>
 8004e1c:	e00d      	b.n	8004e3a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8004e1e:	4b39      	ldr	r3, [pc, #228]	@ (8004f04 <prvAddNewTaskToReadyList+0x118>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d109      	bne.n	8004e3a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004e26:	4b36      	ldr	r3, [pc, #216]	@ (8004f00 <prvAddNewTaskToReadyList+0x114>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e30:	429a      	cmp	r2, r3
 8004e32:	d802      	bhi.n	8004e3a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8004e34:	4a32      	ldr	r2, [pc, #200]	@ (8004f00 <prvAddNewTaskToReadyList+0x114>)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8004e3a:	4b33      	ldr	r3, [pc, #204]	@ (8004f08 <prvAddNewTaskToReadyList+0x11c>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	3301      	adds	r3, #1
 8004e40:	4a31      	ldr	r2, [pc, #196]	@ (8004f08 <prvAddNewTaskToReadyList+0x11c>)
 8004e42:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004e44:	4b30      	ldr	r3, [pc, #192]	@ (8004f08 <prvAddNewTaskToReadyList+0x11c>)
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e50:	2201      	movs	r2, #1
 8004e52:	409a      	lsls	r2, r3
 8004e54:	4b2d      	ldr	r3, [pc, #180]	@ (8004f0c <prvAddNewTaskToReadyList+0x120>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	4a2c      	ldr	r2, [pc, #176]	@ (8004f0c <prvAddNewTaskToReadyList+0x120>)
 8004e5c:	6013      	str	r3, [r2, #0]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e62:	492b      	ldr	r1, [pc, #172]	@ (8004f10 <prvAddNewTaskToReadyList+0x124>)
 8004e64:	4613      	mov	r3, r2
 8004e66:	009b      	lsls	r3, r3, #2
 8004e68:	4413      	add	r3, r2
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	440b      	add	r3, r1
 8004e6e:	3304      	adds	r3, #4
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	60fb      	str	r3, [r7, #12]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	68fa      	ldr	r2, [r7, #12]
 8004e78:	609a      	str	r2, [r3, #8]
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	689a      	ldr	r2, [r3, #8]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	60da      	str	r2, [r3, #12]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	687a      	ldr	r2, [r7, #4]
 8004e88:	3204      	adds	r2, #4
 8004e8a:	605a      	str	r2, [r3, #4]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	1d1a      	adds	r2, r3, #4
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	609a      	str	r2, [r3, #8]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e98:	4613      	mov	r3, r2
 8004e9a:	009b      	lsls	r3, r3, #2
 8004e9c:	4413      	add	r3, r2
 8004e9e:	009b      	lsls	r3, r3, #2
 8004ea0:	4a1b      	ldr	r2, [pc, #108]	@ (8004f10 <prvAddNewTaskToReadyList+0x124>)
 8004ea2:	441a      	add	r2, r3
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	615a      	str	r2, [r3, #20]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004eac:	4918      	ldr	r1, [pc, #96]	@ (8004f10 <prvAddNewTaskToReadyList+0x124>)
 8004eae:	4613      	mov	r3, r2
 8004eb0:	009b      	lsls	r3, r3, #2
 8004eb2:	4413      	add	r3, r2
 8004eb4:	009b      	lsls	r3, r3, #2
 8004eb6:	440b      	add	r3, r1
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	1c59      	adds	r1, r3, #1
 8004ebc:	4814      	ldr	r0, [pc, #80]	@ (8004f10 <prvAddNewTaskToReadyList+0x124>)
 8004ebe:	4613      	mov	r3, r2
 8004ec0:	009b      	lsls	r3, r3, #2
 8004ec2:	4413      	add	r3, r2
 8004ec4:	009b      	lsls	r3, r3, #2
 8004ec6:	4403      	add	r3, r0
 8004ec8:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8004eca:	f001 fe51 	bl	8006b70 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8004ece:	4b0d      	ldr	r3, [pc, #52]	@ (8004f04 <prvAddNewTaskToReadyList+0x118>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d00e      	beq.n	8004ef4 <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004ed6:	4b0a      	ldr	r3, [pc, #40]	@ (8004f00 <prvAddNewTaskToReadyList+0x114>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d207      	bcs.n	8004ef4 <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8004ee4:	4b0b      	ldr	r3, [pc, #44]	@ (8004f14 <prvAddNewTaskToReadyList+0x128>)
 8004ee6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004eea:	601a      	str	r2, [r3, #0]
 8004eec:	f3bf 8f4f 	dsb	sy
 8004ef0:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004ef4:	bf00      	nop
 8004ef6:	3710      	adds	r7, #16
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}
 8004efc:	2000021c 	.word	0x2000021c
 8004f00:	20000144 	.word	0x20000144
 8004f04:	20000228 	.word	0x20000228
 8004f08:	20000238 	.word	0x20000238
 8004f0c:	20000224 	.word	0x20000224
 8004f10:	20000148 	.word	0x20000148
 8004f14:	e000ed04 	.word	0xe000ed04

08004f18 <xTaskDelayUntil>:

#if ( INCLUDE_xTaskDelayUntil == 1 )

    BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                                const TickType_t xTimeIncrement )
    {
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b08a      	sub	sp, #40	@ 0x28
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	6039      	str	r1, [r7, #0]
        TickType_t xTimeToWake;
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8004f22:	2300      	movs	r3, #0
 8004f24:	627b      	str	r3, [r7, #36]	@ 0x24

        configASSERT( pxPreviousWakeTime );
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d10b      	bne.n	8004f44 <xTaskDelayUntil+0x2c>
        __asm volatile
 8004f2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f30:	f383 8811 	msr	BASEPRI, r3
 8004f34:	f3bf 8f6f 	isb	sy
 8004f38:	f3bf 8f4f 	dsb	sy
 8004f3c:	617b      	str	r3, [r7, #20]
    }
 8004f3e:	bf00      	nop
 8004f40:	bf00      	nop
 8004f42:	e7fd      	b.n	8004f40 <xTaskDelayUntil+0x28>
        configASSERT( ( xTimeIncrement > 0U ) );
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d10b      	bne.n	8004f62 <xTaskDelayUntil+0x4a>
        __asm volatile
 8004f4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f4e:	f383 8811 	msr	BASEPRI, r3
 8004f52:	f3bf 8f6f 	isb	sy
 8004f56:	f3bf 8f4f 	dsb	sy
 8004f5a:	613b      	str	r3, [r7, #16]
    }
 8004f5c:	bf00      	nop
 8004f5e:	bf00      	nop
 8004f60:	e7fd      	b.n	8004f5e <xTaskDelayUntil+0x46>
        configASSERT( uxSchedulerSuspended == 0 );
 8004f62:	4b2b      	ldr	r3, [pc, #172]	@ (8005010 <xTaskDelayUntil+0xf8>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d00b      	beq.n	8004f82 <xTaskDelayUntil+0x6a>
        __asm volatile
 8004f6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f6e:	f383 8811 	msr	BASEPRI, r3
 8004f72:	f3bf 8f6f 	isb	sy
 8004f76:	f3bf 8f4f 	dsb	sy
 8004f7a:	60fb      	str	r3, [r7, #12]
    }
 8004f7c:	bf00      	nop
 8004f7e:	bf00      	nop
 8004f80:	e7fd      	b.n	8004f7e <xTaskDelayUntil+0x66>

        vTaskSuspendAll();
 8004f82:	f000 f89d 	bl	80050c0 <vTaskSuspendAll>
        {
            /* Minor optimisation.  The tick count cannot change in this
             * block. */
            const TickType_t xConstTickCount = xTickCount;
 8004f86:	4b23      	ldr	r3, [pc, #140]	@ (8005014 <xTaskDelayUntil+0xfc>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	623b      	str	r3, [r7, #32]

            /* Generate the tick time at which the task wants to wake. */
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	683a      	ldr	r2, [r7, #0]
 8004f92:	4413      	add	r3, r2
 8004f94:	61fb      	str	r3, [r7, #28]

            if( xConstTickCount < *pxPreviousWakeTime )
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	6a3a      	ldr	r2, [r7, #32]
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d20b      	bcs.n	8004fb8 <xTaskDelayUntil+0xa0>
                /* The tick count has overflowed since this function was
                 * lasted called.  In this case the only time we should ever
                 * actually delay is if the wake time has also  overflowed,
                 * and the wake time is greater than the tick time.  When this
                 * is the case it is as if neither time had overflowed. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	69fa      	ldr	r2, [r7, #28]
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	d211      	bcs.n	8004fce <xTaskDelayUntil+0xb6>
 8004faa:	69fa      	ldr	r2, [r7, #28]
 8004fac:	6a3b      	ldr	r3, [r7, #32]
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	d90d      	bls.n	8004fce <xTaskDelayUntil+0xb6>
                {
                    xShouldDelay = pdTRUE;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	627b      	str	r3, [r7, #36]	@ 0x24
 8004fb6:	e00a      	b.n	8004fce <xTaskDelayUntil+0xb6>
            else
            {
                /* The tick time has not overflowed.  In this case we will
                 * delay if either the wake time has overflowed, and/or the
                 * tick time is less than the wake time. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	69fa      	ldr	r2, [r7, #28]
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	d303      	bcc.n	8004fca <xTaskDelayUntil+0xb2>
 8004fc2:	69fa      	ldr	r2, [r7, #28]
 8004fc4:	6a3b      	ldr	r3, [r7, #32]
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d901      	bls.n	8004fce <xTaskDelayUntil+0xb6>
                {
                    xShouldDelay = pdTRUE;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	627b      	str	r3, [r7, #36]	@ 0x24
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            /* Update the wake time ready for the next call. */
            *pxPreviousWakeTime = xTimeToWake;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	69fa      	ldr	r2, [r7, #28]
 8004fd2:	601a      	str	r2, [r3, #0]

            if( xShouldDelay != pdFALSE )
 8004fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d006      	beq.n	8004fe8 <xTaskDelayUntil+0xd0>
            {
                traceTASK_DELAY_UNTIL( xTimeToWake );

                /* prvAddCurrentTaskToDelayedList() needs the block time, not
                 * the time to wake, so subtract the current tick count. */
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8004fda:	69fa      	ldr	r2, [r7, #28]
 8004fdc:	6a3b      	ldr	r3, [r7, #32]
 8004fde:	1ad3      	subs	r3, r2, r3
 8004fe0:	2100      	movs	r1, #0
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f001 f950 	bl	8006288 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 8004fe8:	f000 f878 	bl	80050dc <xTaskResumeAll>
 8004fec:	61b8      	str	r0, [r7, #24]

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8004fee:	69bb      	ldr	r3, [r7, #24]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d107      	bne.n	8005004 <xTaskDelayUntil+0xec>
        {
            portYIELD_WITHIN_API();
 8004ff4:	4b08      	ldr	r3, [pc, #32]	@ (8005018 <xTaskDelayUntil+0x100>)
 8004ff6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ffa:	601a      	str	r2, [r3, #0]
 8004ffc:	f3bf 8f4f 	dsb	sy
 8005000:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xShouldDelay;
 8005004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8005006:	4618      	mov	r0, r3
 8005008:	3728      	adds	r7, #40	@ 0x28
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}
 800500e:	bf00      	nop
 8005010:	20000244 	.word	0x20000244
 8005014:	20000220 	.word	0x20000220
 8005018:	e000ed04 	.word	0xe000ed04

0800501c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b086      	sub	sp, #24
 8005020:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8005022:	4b20      	ldr	r3, [pc, #128]	@ (80050a4 <vTaskStartScheduler+0x88>)
 8005024:	9301      	str	r3, [sp, #4]
 8005026:	2300      	movs	r3, #0
 8005028:	9300      	str	r3, [sp, #0]
 800502a:	2300      	movs	r3, #0
 800502c:	2282      	movs	r2, #130	@ 0x82
 800502e:	491e      	ldr	r1, [pc, #120]	@ (80050a8 <vTaskStartScheduler+0x8c>)
 8005030:	481e      	ldr	r0, [pc, #120]	@ (80050ac <vTaskStartScheduler+0x90>)
 8005032:	f7ff fe05 	bl	8004c40 <xTaskCreate>
 8005036:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2b01      	cmp	r3, #1
 800503c:	d102      	bne.n	8005044 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 800503e:	f001 f9a3 	bl	8006388 <xTimerCreateTimerTask>
 8005042:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2b01      	cmp	r3, #1
 8005048:	d116      	bne.n	8005078 <vTaskStartScheduler+0x5c>
        __asm volatile
 800504a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800504e:	f383 8811 	msr	BASEPRI, r3
 8005052:	f3bf 8f6f 	isb	sy
 8005056:	f3bf 8f4f 	dsb	sy
 800505a:	60bb      	str	r3, [r7, #8]
    }
 800505c:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 800505e:	4b14      	ldr	r3, [pc, #80]	@ (80050b0 <vTaskStartScheduler+0x94>)
 8005060:	f04f 32ff 	mov.w	r2, #4294967295
 8005064:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8005066:	4b13      	ldr	r3, [pc, #76]	@ (80050b4 <vTaskStartScheduler+0x98>)
 8005068:	2201      	movs	r2, #1
 800506a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800506c:	4b12      	ldr	r3, [pc, #72]	@ (80050b8 <vTaskStartScheduler+0x9c>)
 800506e:	2200      	movs	r2, #0
 8005070:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8005072:	f001 fca7 	bl	80069c4 <xPortStartScheduler>
 8005076:	e00f      	b.n	8005098 <vTaskStartScheduler+0x7c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800507e:	d10b      	bne.n	8005098 <vTaskStartScheduler+0x7c>
        __asm volatile
 8005080:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005084:	f383 8811 	msr	BASEPRI, r3
 8005088:	f3bf 8f6f 	isb	sy
 800508c:	f3bf 8f4f 	dsb	sy
 8005090:	607b      	str	r3, [r7, #4]
    }
 8005092:	bf00      	nop
 8005094:	bf00      	nop
 8005096:	e7fd      	b.n	8005094 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8005098:	4b08      	ldr	r3, [pc, #32]	@ (80050bc <vTaskStartScheduler+0xa0>)
 800509a:	681b      	ldr	r3, [r3, #0]
}
 800509c:	bf00      	nop
 800509e:	3710      	adds	r7, #16
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}
 80050a4:	20000240 	.word	0x20000240
 80050a8:	080072c8 	.word	0x080072c8
 80050ac:	08005991 	.word	0x08005991
 80050b0:	2000023c 	.word	0x2000023c
 80050b4:	20000228 	.word	0x20000228
 80050b8:	20000220 	.word	0x20000220
 80050bc:	2000000c 	.word	0x2000000c

080050c0 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80050c0:	b480      	push	{r7}
 80050c2:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80050c4:	4b04      	ldr	r3, [pc, #16]	@ (80050d8 <vTaskSuspendAll+0x18>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	3301      	adds	r3, #1
 80050ca:	4a03      	ldr	r2, [pc, #12]	@ (80050d8 <vTaskSuspendAll+0x18>)
 80050cc:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80050ce:	bf00      	nop
 80050d0:	46bd      	mov	sp, r7
 80050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d6:	4770      	bx	lr
 80050d8:	20000244 	.word	0x20000244

080050dc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b088      	sub	sp, #32
 80050e0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80050e2:	2300      	movs	r3, #0
 80050e4:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 80050e6:	2300      	movs	r3, #0
 80050e8:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80050ea:	4b71      	ldr	r3, [pc, #452]	@ (80052b0 <xTaskResumeAll+0x1d4>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d10b      	bne.n	800510a <xTaskResumeAll+0x2e>
        __asm volatile
 80050f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050f6:	f383 8811 	msr	BASEPRI, r3
 80050fa:	f3bf 8f6f 	isb	sy
 80050fe:	f3bf 8f4f 	dsb	sy
 8005102:	607b      	str	r3, [r7, #4]
    }
 8005104:	bf00      	nop
 8005106:	bf00      	nop
 8005108:	e7fd      	b.n	8005106 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800510a:	f001 fcff 	bl	8006b0c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800510e:	4b68      	ldr	r3, [pc, #416]	@ (80052b0 <xTaskResumeAll+0x1d4>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	3b01      	subs	r3, #1
 8005114:	4a66      	ldr	r2, [pc, #408]	@ (80052b0 <xTaskResumeAll+0x1d4>)
 8005116:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005118:	4b65      	ldr	r3, [pc, #404]	@ (80052b0 <xTaskResumeAll+0x1d4>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	2b00      	cmp	r3, #0
 800511e:	f040 80c0 	bne.w	80052a2 <xTaskResumeAll+0x1c6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005122:	4b64      	ldr	r3, [pc, #400]	@ (80052b4 <xTaskResumeAll+0x1d8>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	2b00      	cmp	r3, #0
 8005128:	f000 80bb 	beq.w	80052a2 <xTaskResumeAll+0x1c6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800512c:	e08a      	b.n	8005244 <xTaskResumeAll+0x168>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800512e:	4b62      	ldr	r3, [pc, #392]	@ (80052b8 <xTaskResumeAll+0x1dc>)
 8005130:	68db      	ldr	r3, [r3, #12]
 8005132:	68db      	ldr	r3, [r3, #12]
 8005134:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8005136:	69fb      	ldr	r3, [r7, #28]
 8005138:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800513a:	613b      	str	r3, [r7, #16]
 800513c:	69fb      	ldr	r3, [r7, #28]
 800513e:	69db      	ldr	r3, [r3, #28]
 8005140:	69fa      	ldr	r2, [r7, #28]
 8005142:	6a12      	ldr	r2, [r2, #32]
 8005144:	609a      	str	r2, [r3, #8]
 8005146:	69fb      	ldr	r3, [r7, #28]
 8005148:	6a1b      	ldr	r3, [r3, #32]
 800514a:	69fa      	ldr	r2, [r7, #28]
 800514c:	69d2      	ldr	r2, [r2, #28]
 800514e:	605a      	str	r2, [r3, #4]
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	685a      	ldr	r2, [r3, #4]
 8005154:	69fb      	ldr	r3, [r7, #28]
 8005156:	3318      	adds	r3, #24
 8005158:	429a      	cmp	r2, r3
 800515a:	d103      	bne.n	8005164 <xTaskResumeAll+0x88>
 800515c:	69fb      	ldr	r3, [r7, #28]
 800515e:	6a1a      	ldr	r2, [r3, #32]
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	605a      	str	r2, [r3, #4]
 8005164:	69fb      	ldr	r3, [r7, #28]
 8005166:	2200      	movs	r2, #0
 8005168:	629a      	str	r2, [r3, #40]	@ 0x28
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	1e5a      	subs	r2, r3, #1
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8005174:	69fb      	ldr	r3, [r7, #28]
 8005176:	695b      	ldr	r3, [r3, #20]
 8005178:	60fb      	str	r3, [r7, #12]
 800517a:	69fb      	ldr	r3, [r7, #28]
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	69fa      	ldr	r2, [r7, #28]
 8005180:	68d2      	ldr	r2, [r2, #12]
 8005182:	609a      	str	r2, [r3, #8]
 8005184:	69fb      	ldr	r3, [r7, #28]
 8005186:	68db      	ldr	r3, [r3, #12]
 8005188:	69fa      	ldr	r2, [r7, #28]
 800518a:	6892      	ldr	r2, [r2, #8]
 800518c:	605a      	str	r2, [r3, #4]
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	685a      	ldr	r2, [r3, #4]
 8005192:	69fb      	ldr	r3, [r7, #28]
 8005194:	3304      	adds	r3, #4
 8005196:	429a      	cmp	r2, r3
 8005198:	d103      	bne.n	80051a2 <xTaskResumeAll+0xc6>
 800519a:	69fb      	ldr	r3, [r7, #28]
 800519c:	68da      	ldr	r2, [r3, #12]
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	605a      	str	r2, [r3, #4]
 80051a2:	69fb      	ldr	r3, [r7, #28]
 80051a4:	2200      	movs	r2, #0
 80051a6:	615a      	str	r2, [r3, #20]
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	1e5a      	subs	r2, r3, #1
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80051b2:	69fb      	ldr	r3, [r7, #28]
 80051b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051b6:	2201      	movs	r2, #1
 80051b8:	409a      	lsls	r2, r3
 80051ba:	4b40      	ldr	r3, [pc, #256]	@ (80052bc <xTaskResumeAll+0x1e0>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4313      	orrs	r3, r2
 80051c0:	4a3e      	ldr	r2, [pc, #248]	@ (80052bc <xTaskResumeAll+0x1e0>)
 80051c2:	6013      	str	r3, [r2, #0]
 80051c4:	69fb      	ldr	r3, [r7, #28]
 80051c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051c8:	493d      	ldr	r1, [pc, #244]	@ (80052c0 <xTaskResumeAll+0x1e4>)
 80051ca:	4613      	mov	r3, r2
 80051cc:	009b      	lsls	r3, r3, #2
 80051ce:	4413      	add	r3, r2
 80051d0:	009b      	lsls	r3, r3, #2
 80051d2:	440b      	add	r3, r1
 80051d4:	3304      	adds	r3, #4
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	60bb      	str	r3, [r7, #8]
 80051da:	69fb      	ldr	r3, [r7, #28]
 80051dc:	68ba      	ldr	r2, [r7, #8]
 80051de:	609a      	str	r2, [r3, #8]
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	689a      	ldr	r2, [r3, #8]
 80051e4:	69fb      	ldr	r3, [r7, #28]
 80051e6:	60da      	str	r2, [r3, #12]
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	69fa      	ldr	r2, [r7, #28]
 80051ee:	3204      	adds	r2, #4
 80051f0:	605a      	str	r2, [r3, #4]
 80051f2:	69fb      	ldr	r3, [r7, #28]
 80051f4:	1d1a      	adds	r2, r3, #4
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	609a      	str	r2, [r3, #8]
 80051fa:	69fb      	ldr	r3, [r7, #28]
 80051fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051fe:	4613      	mov	r3, r2
 8005200:	009b      	lsls	r3, r3, #2
 8005202:	4413      	add	r3, r2
 8005204:	009b      	lsls	r3, r3, #2
 8005206:	4a2e      	ldr	r2, [pc, #184]	@ (80052c0 <xTaskResumeAll+0x1e4>)
 8005208:	441a      	add	r2, r3
 800520a:	69fb      	ldr	r3, [r7, #28]
 800520c:	615a      	str	r2, [r3, #20]
 800520e:	69fb      	ldr	r3, [r7, #28]
 8005210:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005212:	492b      	ldr	r1, [pc, #172]	@ (80052c0 <xTaskResumeAll+0x1e4>)
 8005214:	4613      	mov	r3, r2
 8005216:	009b      	lsls	r3, r3, #2
 8005218:	4413      	add	r3, r2
 800521a:	009b      	lsls	r3, r3, #2
 800521c:	440b      	add	r3, r1
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	1c59      	adds	r1, r3, #1
 8005222:	4827      	ldr	r0, [pc, #156]	@ (80052c0 <xTaskResumeAll+0x1e4>)
 8005224:	4613      	mov	r3, r2
 8005226:	009b      	lsls	r3, r3, #2
 8005228:	4413      	add	r3, r2
 800522a:	009b      	lsls	r3, r3, #2
 800522c:	4403      	add	r3, r0
 800522e:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005230:	69fb      	ldr	r3, [r7, #28]
 8005232:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005234:	4b23      	ldr	r3, [pc, #140]	@ (80052c4 <xTaskResumeAll+0x1e8>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800523a:	429a      	cmp	r2, r3
 800523c:	d302      	bcc.n	8005244 <xTaskResumeAll+0x168>
                    {
                        xYieldPending = pdTRUE;
 800523e:	4b22      	ldr	r3, [pc, #136]	@ (80052c8 <xTaskResumeAll+0x1ec>)
 8005240:	2201      	movs	r2, #1
 8005242:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005244:	4b1c      	ldr	r3, [pc, #112]	@ (80052b8 <xTaskResumeAll+0x1dc>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	2b00      	cmp	r3, #0
 800524a:	f47f af70 	bne.w	800512e <xTaskResumeAll+0x52>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800524e:	69fb      	ldr	r3, [r7, #28]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d001      	beq.n	8005258 <xTaskResumeAll+0x17c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8005254:	f000 fc32 	bl	8005abc <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005258:	4b1c      	ldr	r3, [pc, #112]	@ (80052cc <xTaskResumeAll+0x1f0>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d010      	beq.n	8005286 <xTaskResumeAll+0x1aa>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8005264:	f000 f852 	bl	800530c <xTaskIncrementTick>
 8005268:	4603      	mov	r3, r0
 800526a:	2b00      	cmp	r3, #0
 800526c:	d002      	beq.n	8005274 <xTaskResumeAll+0x198>
                            {
                                xYieldPending = pdTRUE;
 800526e:	4b16      	ldr	r3, [pc, #88]	@ (80052c8 <xTaskResumeAll+0x1ec>)
 8005270:	2201      	movs	r2, #1
 8005272:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	3b01      	subs	r3, #1
 8005278:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d1f1      	bne.n	8005264 <xTaskResumeAll+0x188>

                        xPendedTicks = 0;
 8005280:	4b12      	ldr	r3, [pc, #72]	@ (80052cc <xTaskResumeAll+0x1f0>)
 8005282:	2200      	movs	r2, #0
 8005284:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8005286:	4b10      	ldr	r3, [pc, #64]	@ (80052c8 <xTaskResumeAll+0x1ec>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d009      	beq.n	80052a2 <xTaskResumeAll+0x1c6>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 800528e:	2301      	movs	r3, #1
 8005290:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8005292:	4b0f      	ldr	r3, [pc, #60]	@ (80052d0 <xTaskResumeAll+0x1f4>)
 8005294:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005298:	601a      	str	r2, [r3, #0]
 800529a:	f3bf 8f4f 	dsb	sy
 800529e:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80052a2:	f001 fc65 	bl	8006b70 <vPortExitCritical>

    return xAlreadyYielded;
 80052a6:	69bb      	ldr	r3, [r7, #24]
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	3720      	adds	r7, #32
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}
 80052b0:	20000244 	.word	0x20000244
 80052b4:	2000021c 	.word	0x2000021c
 80052b8:	200001dc 	.word	0x200001dc
 80052bc:	20000224 	.word	0x20000224
 80052c0:	20000148 	.word	0x20000148
 80052c4:	20000144 	.word	0x20000144
 80052c8:	20000230 	.word	0x20000230
 80052cc:	2000022c 	.word	0x2000022c
 80052d0:	e000ed04 	.word	0xe000ed04

080052d4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80052d4:	b480      	push	{r7}
 80052d6:	b083      	sub	sp, #12
 80052d8:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80052da:	4b05      	ldr	r3, [pc, #20]	@ (80052f0 <xTaskGetTickCount+0x1c>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80052e0:	687b      	ldr	r3, [r7, #4]
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	370c      	adds	r7, #12
 80052e6:	46bd      	mov	sp, r7
 80052e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ec:	4770      	bx	lr
 80052ee:	bf00      	nop
 80052f0:	20000220 	.word	0x20000220

080052f4 <uxTaskGetNumberOfTasks>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 80052f4:	b480      	push	{r7}
 80052f6:	af00      	add	r7, sp, #0
    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    return uxCurrentNumberOfTasks;
 80052f8:	4b03      	ldr	r3, [pc, #12]	@ (8005308 <uxTaskGetNumberOfTasks+0x14>)
 80052fa:	681b      	ldr	r3, [r3, #0]
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	46bd      	mov	sp, r7
 8005300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005304:	4770      	bx	lr
 8005306:	bf00      	nop
 8005308:	2000021c 	.word	0x2000021c

0800530c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b08a      	sub	sp, #40	@ 0x28
 8005310:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8005312:	2300      	movs	r3, #0
 8005314:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005316:	4b7e      	ldr	r3, [pc, #504]	@ (8005510 <xTaskIncrementTick+0x204>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	2b00      	cmp	r3, #0
 800531c:	f040 80ed 	bne.w	80054fa <xTaskIncrementTick+0x1ee>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005320:	4b7c      	ldr	r3, [pc, #496]	@ (8005514 <xTaskIncrementTick+0x208>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	3301      	adds	r3, #1
 8005326:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8005328:	4a7a      	ldr	r2, [pc, #488]	@ (8005514 <xTaskIncrementTick+0x208>)
 800532a:	6a3b      	ldr	r3, [r7, #32]
 800532c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800532e:	6a3b      	ldr	r3, [r7, #32]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d121      	bne.n	8005378 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8005334:	4b78      	ldr	r3, [pc, #480]	@ (8005518 <xTaskIncrementTick+0x20c>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d00b      	beq.n	8005356 <xTaskIncrementTick+0x4a>
        __asm volatile
 800533e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005342:	f383 8811 	msr	BASEPRI, r3
 8005346:	f3bf 8f6f 	isb	sy
 800534a:	f3bf 8f4f 	dsb	sy
 800534e:	607b      	str	r3, [r7, #4]
    }
 8005350:	bf00      	nop
 8005352:	bf00      	nop
 8005354:	e7fd      	b.n	8005352 <xTaskIncrementTick+0x46>
 8005356:	4b70      	ldr	r3, [pc, #448]	@ (8005518 <xTaskIncrementTick+0x20c>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	61fb      	str	r3, [r7, #28]
 800535c:	4b6f      	ldr	r3, [pc, #444]	@ (800551c <xTaskIncrementTick+0x210>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a6d      	ldr	r2, [pc, #436]	@ (8005518 <xTaskIncrementTick+0x20c>)
 8005362:	6013      	str	r3, [r2, #0]
 8005364:	4a6d      	ldr	r2, [pc, #436]	@ (800551c <xTaskIncrementTick+0x210>)
 8005366:	69fb      	ldr	r3, [r7, #28]
 8005368:	6013      	str	r3, [r2, #0]
 800536a:	4b6d      	ldr	r3, [pc, #436]	@ (8005520 <xTaskIncrementTick+0x214>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	3301      	adds	r3, #1
 8005370:	4a6b      	ldr	r2, [pc, #428]	@ (8005520 <xTaskIncrementTick+0x214>)
 8005372:	6013      	str	r3, [r2, #0]
 8005374:	f000 fba2 	bl	8005abc <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8005378:	4b6a      	ldr	r3, [pc, #424]	@ (8005524 <xTaskIncrementTick+0x218>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	6a3a      	ldr	r2, [r7, #32]
 800537e:	429a      	cmp	r2, r3
 8005380:	f0c0 80a6 	bcc.w	80054d0 <xTaskIncrementTick+0x1c4>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005384:	4b64      	ldr	r3, [pc, #400]	@ (8005518 <xTaskIncrementTick+0x20c>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d104      	bne.n	8005398 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800538e:	4b65      	ldr	r3, [pc, #404]	@ (8005524 <xTaskIncrementTick+0x218>)
 8005390:	f04f 32ff 	mov.w	r2, #4294967295
 8005394:	601a      	str	r2, [r3, #0]
                    break;
 8005396:	e09b      	b.n	80054d0 <xTaskIncrementTick+0x1c4>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005398:	4b5f      	ldr	r3, [pc, #380]	@ (8005518 <xTaskIncrementTick+0x20c>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	68db      	ldr	r3, [r3, #12]
 800539e:	68db      	ldr	r3, [r3, #12]
 80053a0:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80053a2:	69bb      	ldr	r3, [r7, #24]
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80053a8:	6a3a      	ldr	r2, [r7, #32]
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	429a      	cmp	r2, r3
 80053ae:	d203      	bcs.n	80053b8 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80053b0:	4a5c      	ldr	r2, [pc, #368]	@ (8005524 <xTaskIncrementTick+0x218>)
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80053b6:	e08b      	b.n	80054d0 <xTaskIncrementTick+0x1c4>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80053b8:	69bb      	ldr	r3, [r7, #24]
 80053ba:	695b      	ldr	r3, [r3, #20]
 80053bc:	613b      	str	r3, [r7, #16]
 80053be:	69bb      	ldr	r3, [r7, #24]
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	69ba      	ldr	r2, [r7, #24]
 80053c4:	68d2      	ldr	r2, [r2, #12]
 80053c6:	609a      	str	r2, [r3, #8]
 80053c8:	69bb      	ldr	r3, [r7, #24]
 80053ca:	68db      	ldr	r3, [r3, #12]
 80053cc:	69ba      	ldr	r2, [r7, #24]
 80053ce:	6892      	ldr	r2, [r2, #8]
 80053d0:	605a      	str	r2, [r3, #4]
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	685a      	ldr	r2, [r3, #4]
 80053d6:	69bb      	ldr	r3, [r7, #24]
 80053d8:	3304      	adds	r3, #4
 80053da:	429a      	cmp	r2, r3
 80053dc:	d103      	bne.n	80053e6 <xTaskIncrementTick+0xda>
 80053de:	69bb      	ldr	r3, [r7, #24]
 80053e0:	68da      	ldr	r2, [r3, #12]
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	605a      	str	r2, [r3, #4]
 80053e6:	69bb      	ldr	r3, [r7, #24]
 80053e8:	2200      	movs	r2, #0
 80053ea:	615a      	str	r2, [r3, #20]
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	1e5a      	subs	r2, r3, #1
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80053f6:	69bb      	ldr	r3, [r7, #24]
 80053f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d01e      	beq.n	800543c <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80053fe:	69bb      	ldr	r3, [r7, #24]
 8005400:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005402:	60fb      	str	r3, [r7, #12]
 8005404:	69bb      	ldr	r3, [r7, #24]
 8005406:	69db      	ldr	r3, [r3, #28]
 8005408:	69ba      	ldr	r2, [r7, #24]
 800540a:	6a12      	ldr	r2, [r2, #32]
 800540c:	609a      	str	r2, [r3, #8]
 800540e:	69bb      	ldr	r3, [r7, #24]
 8005410:	6a1b      	ldr	r3, [r3, #32]
 8005412:	69ba      	ldr	r2, [r7, #24]
 8005414:	69d2      	ldr	r2, [r2, #28]
 8005416:	605a      	str	r2, [r3, #4]
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	685a      	ldr	r2, [r3, #4]
 800541c:	69bb      	ldr	r3, [r7, #24]
 800541e:	3318      	adds	r3, #24
 8005420:	429a      	cmp	r2, r3
 8005422:	d103      	bne.n	800542c <xTaskIncrementTick+0x120>
 8005424:	69bb      	ldr	r3, [r7, #24]
 8005426:	6a1a      	ldr	r2, [r3, #32]
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	605a      	str	r2, [r3, #4]
 800542c:	69bb      	ldr	r3, [r7, #24]
 800542e:	2200      	movs	r2, #0
 8005430:	629a      	str	r2, [r3, #40]	@ 0x28
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	1e5a      	subs	r2, r3, #1
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800543c:	69bb      	ldr	r3, [r7, #24]
 800543e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005440:	2201      	movs	r2, #1
 8005442:	409a      	lsls	r2, r3
 8005444:	4b38      	ldr	r3, [pc, #224]	@ (8005528 <xTaskIncrementTick+0x21c>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4313      	orrs	r3, r2
 800544a:	4a37      	ldr	r2, [pc, #220]	@ (8005528 <xTaskIncrementTick+0x21c>)
 800544c:	6013      	str	r3, [r2, #0]
 800544e:	69bb      	ldr	r3, [r7, #24]
 8005450:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005452:	4936      	ldr	r1, [pc, #216]	@ (800552c <xTaskIncrementTick+0x220>)
 8005454:	4613      	mov	r3, r2
 8005456:	009b      	lsls	r3, r3, #2
 8005458:	4413      	add	r3, r2
 800545a:	009b      	lsls	r3, r3, #2
 800545c:	440b      	add	r3, r1
 800545e:	3304      	adds	r3, #4
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	60bb      	str	r3, [r7, #8]
 8005464:	69bb      	ldr	r3, [r7, #24]
 8005466:	68ba      	ldr	r2, [r7, #8]
 8005468:	609a      	str	r2, [r3, #8]
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	689a      	ldr	r2, [r3, #8]
 800546e:	69bb      	ldr	r3, [r7, #24]
 8005470:	60da      	str	r2, [r3, #12]
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	69ba      	ldr	r2, [r7, #24]
 8005478:	3204      	adds	r2, #4
 800547a:	605a      	str	r2, [r3, #4]
 800547c:	69bb      	ldr	r3, [r7, #24]
 800547e:	1d1a      	adds	r2, r3, #4
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	609a      	str	r2, [r3, #8]
 8005484:	69bb      	ldr	r3, [r7, #24]
 8005486:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005488:	4613      	mov	r3, r2
 800548a:	009b      	lsls	r3, r3, #2
 800548c:	4413      	add	r3, r2
 800548e:	009b      	lsls	r3, r3, #2
 8005490:	4a26      	ldr	r2, [pc, #152]	@ (800552c <xTaskIncrementTick+0x220>)
 8005492:	441a      	add	r2, r3
 8005494:	69bb      	ldr	r3, [r7, #24]
 8005496:	615a      	str	r2, [r3, #20]
 8005498:	69bb      	ldr	r3, [r7, #24]
 800549a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800549c:	4923      	ldr	r1, [pc, #140]	@ (800552c <xTaskIncrementTick+0x220>)
 800549e:	4613      	mov	r3, r2
 80054a0:	009b      	lsls	r3, r3, #2
 80054a2:	4413      	add	r3, r2
 80054a4:	009b      	lsls	r3, r3, #2
 80054a6:	440b      	add	r3, r1
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	1c59      	adds	r1, r3, #1
 80054ac:	481f      	ldr	r0, [pc, #124]	@ (800552c <xTaskIncrementTick+0x220>)
 80054ae:	4613      	mov	r3, r2
 80054b0:	009b      	lsls	r3, r3, #2
 80054b2:	4413      	add	r3, r2
 80054b4:	009b      	lsls	r3, r3, #2
 80054b6:	4403      	add	r3, r0
 80054b8:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80054ba:	69bb      	ldr	r3, [r7, #24]
 80054bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054be:	4b1c      	ldr	r3, [pc, #112]	@ (8005530 <xTaskIncrementTick+0x224>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054c4:	429a      	cmp	r2, r3
 80054c6:	f67f af5d 	bls.w	8005384 <xTaskIncrementTick+0x78>
                        {
                            xSwitchRequired = pdTRUE;
 80054ca:	2301      	movs	r3, #1
 80054cc:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80054ce:	e759      	b.n	8005384 <xTaskIncrementTick+0x78>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80054d0:	4b17      	ldr	r3, [pc, #92]	@ (8005530 <xTaskIncrementTick+0x224>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054d6:	4915      	ldr	r1, [pc, #84]	@ (800552c <xTaskIncrementTick+0x220>)
 80054d8:	4613      	mov	r3, r2
 80054da:	009b      	lsls	r3, r3, #2
 80054dc:	4413      	add	r3, r2
 80054de:	009b      	lsls	r3, r3, #2
 80054e0:	440b      	add	r3, r1
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	d901      	bls.n	80054ec <xTaskIncrementTick+0x1e0>
            {
                xSwitchRequired = pdTRUE;
 80054e8:	2301      	movs	r3, #1
 80054ea:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 80054ec:	4b11      	ldr	r3, [pc, #68]	@ (8005534 <xTaskIncrementTick+0x228>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d007      	beq.n	8005504 <xTaskIncrementTick+0x1f8>
            {
                xSwitchRequired = pdTRUE;
 80054f4:	2301      	movs	r3, #1
 80054f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80054f8:	e004      	b.n	8005504 <xTaskIncrementTick+0x1f8>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80054fa:	4b0f      	ldr	r3, [pc, #60]	@ (8005538 <xTaskIncrementTick+0x22c>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	3301      	adds	r3, #1
 8005500:	4a0d      	ldr	r2, [pc, #52]	@ (8005538 <xTaskIncrementTick+0x22c>)
 8005502:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8005504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005506:	4618      	mov	r0, r3
 8005508:	3728      	adds	r7, #40	@ 0x28
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}
 800550e:	bf00      	nop
 8005510:	20000244 	.word	0x20000244
 8005514:	20000220 	.word	0x20000220
 8005518:	200001d4 	.word	0x200001d4
 800551c:	200001d8 	.word	0x200001d8
 8005520:	20000234 	.word	0x20000234
 8005524:	2000023c 	.word	0x2000023c
 8005528:	20000224 	.word	0x20000224
 800552c:	20000148 	.word	0x20000148
 8005530:	20000144 	.word	0x20000144
 8005534:	20000230 	.word	0x20000230
 8005538:	2000022c 	.word	0x2000022c

0800553c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800553c:	b480      	push	{r7}
 800553e:	b087      	sub	sp, #28
 8005540:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005542:	4b27      	ldr	r3, [pc, #156]	@ (80055e0 <vTaskSwitchContext+0xa4>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d003      	beq.n	8005552 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800554a:	4b26      	ldr	r3, [pc, #152]	@ (80055e4 <vTaskSwitchContext+0xa8>)
 800554c:	2201      	movs	r2, #1
 800554e:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8005550:	e040      	b.n	80055d4 <vTaskSwitchContext+0x98>
        xYieldPending = pdFALSE;
 8005552:	4b24      	ldr	r3, [pc, #144]	@ (80055e4 <vTaskSwitchContext+0xa8>)
 8005554:	2200      	movs	r2, #0
 8005556:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005558:	4b23      	ldr	r3, [pc, #140]	@ (80055e8 <vTaskSwitchContext+0xac>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	fab3 f383 	clz	r3, r3
 8005564:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8005566:	7afb      	ldrb	r3, [r7, #11]
 8005568:	f1c3 031f 	rsb	r3, r3, #31
 800556c:	617b      	str	r3, [r7, #20]
 800556e:	491f      	ldr	r1, [pc, #124]	@ (80055ec <vTaskSwitchContext+0xb0>)
 8005570:	697a      	ldr	r2, [r7, #20]
 8005572:	4613      	mov	r3, r2
 8005574:	009b      	lsls	r3, r3, #2
 8005576:	4413      	add	r3, r2
 8005578:	009b      	lsls	r3, r3, #2
 800557a:	440b      	add	r3, r1
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d10b      	bne.n	800559a <vTaskSwitchContext+0x5e>
        __asm volatile
 8005582:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005586:	f383 8811 	msr	BASEPRI, r3
 800558a:	f3bf 8f6f 	isb	sy
 800558e:	f3bf 8f4f 	dsb	sy
 8005592:	607b      	str	r3, [r7, #4]
    }
 8005594:	bf00      	nop
 8005596:	bf00      	nop
 8005598:	e7fd      	b.n	8005596 <vTaskSwitchContext+0x5a>
 800559a:	697a      	ldr	r2, [r7, #20]
 800559c:	4613      	mov	r3, r2
 800559e:	009b      	lsls	r3, r3, #2
 80055a0:	4413      	add	r3, r2
 80055a2:	009b      	lsls	r3, r3, #2
 80055a4:	4a11      	ldr	r2, [pc, #68]	@ (80055ec <vTaskSwitchContext+0xb0>)
 80055a6:	4413      	add	r3, r2
 80055a8:	613b      	str	r3, [r7, #16]
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	685a      	ldr	r2, [r3, #4]
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	605a      	str	r2, [r3, #4]
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	685a      	ldr	r2, [r3, #4]
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	3308      	adds	r3, #8
 80055bc:	429a      	cmp	r2, r3
 80055be:	d104      	bne.n	80055ca <vTaskSwitchContext+0x8e>
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	685a      	ldr	r2, [r3, #4]
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	605a      	str	r2, [r3, #4]
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	68db      	ldr	r3, [r3, #12]
 80055d0:	4a07      	ldr	r2, [pc, #28]	@ (80055f0 <vTaskSwitchContext+0xb4>)
 80055d2:	6013      	str	r3, [r2, #0]
}
 80055d4:	bf00      	nop
 80055d6:	371c      	adds	r7, #28
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr
 80055e0:	20000244 	.word	0x20000244
 80055e4:	20000230 	.word	0x20000230
 80055e8:	20000224 	.word	0x20000224
 80055ec:	20000148 	.word	0x20000148
 80055f0:	20000144 	.word	0x20000144

080055f4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b084      	sub	sp, #16
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
 80055fc:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d10b      	bne.n	800561c <vTaskPlaceOnEventList+0x28>
        __asm volatile
 8005604:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005608:	f383 8811 	msr	BASEPRI, r3
 800560c:	f3bf 8f6f 	isb	sy
 8005610:	f3bf 8f4f 	dsb	sy
 8005614:	60fb      	str	r3, [r7, #12]
    }
 8005616:	bf00      	nop
 8005618:	bf00      	nop
 800561a:	e7fd      	b.n	8005618 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800561c:	4b07      	ldr	r3, [pc, #28]	@ (800563c <vTaskPlaceOnEventList+0x48>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	3318      	adds	r3, #24
 8005622:	4619      	mov	r1, r3
 8005624:	6878      	ldr	r0, [r7, #4]
 8005626:	f7fe fc96 	bl	8003f56 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800562a:	2101      	movs	r1, #1
 800562c:	6838      	ldr	r0, [r7, #0]
 800562e:	f000 fe2b 	bl	8006288 <prvAddCurrentTaskToDelayedList>
}
 8005632:	bf00      	nop
 8005634:	3710      	adds	r7, #16
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}
 800563a:	bf00      	nop
 800563c:	20000144 	.word	0x20000144

08005640 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8005640:	b580      	push	{r7, lr}
 8005642:	b086      	sub	sp, #24
 8005644:	af00      	add	r7, sp, #0
 8005646:	60f8      	str	r0, [r7, #12]
 8005648:	60b9      	str	r1, [r7, #8]
 800564a:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d10b      	bne.n	800566a <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 8005652:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005656:	f383 8811 	msr	BASEPRI, r3
 800565a:	f3bf 8f6f 	isb	sy
 800565e:	f3bf 8f4f 	dsb	sy
 8005662:	613b      	str	r3, [r7, #16]
    }
 8005664:	bf00      	nop
 8005666:	bf00      	nop
 8005668:	e7fd      	b.n	8005666 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	617b      	str	r3, [r7, #20]
 8005670:	4b15      	ldr	r3, [pc, #84]	@ (80056c8 <vTaskPlaceOnEventListRestricted+0x88>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	697a      	ldr	r2, [r7, #20]
 8005676:	61da      	str	r2, [r3, #28]
 8005678:	4b13      	ldr	r3, [pc, #76]	@ (80056c8 <vTaskPlaceOnEventListRestricted+0x88>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	697a      	ldr	r2, [r7, #20]
 800567e:	6892      	ldr	r2, [r2, #8]
 8005680:	621a      	str	r2, [r3, #32]
 8005682:	4b11      	ldr	r3, [pc, #68]	@ (80056c8 <vTaskPlaceOnEventListRestricted+0x88>)
 8005684:	681a      	ldr	r2, [r3, #0]
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	3218      	adds	r2, #24
 800568c:	605a      	str	r2, [r3, #4]
 800568e:	4b0e      	ldr	r3, [pc, #56]	@ (80056c8 <vTaskPlaceOnEventListRestricted+0x88>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f103 0218 	add.w	r2, r3, #24
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	609a      	str	r2, [r3, #8]
 800569a:	4b0b      	ldr	r3, [pc, #44]	@ (80056c8 <vTaskPlaceOnEventListRestricted+0x88>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	68fa      	ldr	r2, [r7, #12]
 80056a0:	629a      	str	r2, [r3, #40]	@ 0x28
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	1c5a      	adds	r2, r3, #1
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d002      	beq.n	80056b8 <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 80056b2:	f04f 33ff 	mov.w	r3, #4294967295
 80056b6:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80056b8:	6879      	ldr	r1, [r7, #4]
 80056ba:	68b8      	ldr	r0, [r7, #8]
 80056bc:	f000 fde4 	bl	8006288 <prvAddCurrentTaskToDelayedList>
    }
 80056c0:	bf00      	nop
 80056c2:	3718      	adds	r7, #24
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}
 80056c8:	20000144 	.word	0x20000144

080056cc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80056cc:	b480      	push	{r7}
 80056ce:	b08b      	sub	sp, #44	@ 0x2c
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	68db      	ldr	r3, [r3, #12]
 80056d8:	68db      	ldr	r3, [r3, #12]
 80056da:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 80056dc:	6a3b      	ldr	r3, [r7, #32]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d10b      	bne.n	80056fa <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 80056e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056e6:	f383 8811 	msr	BASEPRI, r3
 80056ea:	f3bf 8f6f 	isb	sy
 80056ee:	f3bf 8f4f 	dsb	sy
 80056f2:	60fb      	str	r3, [r7, #12]
    }
 80056f4:	bf00      	nop
 80056f6:	bf00      	nop
 80056f8:	e7fd      	b.n	80056f6 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80056fa:	6a3b      	ldr	r3, [r7, #32]
 80056fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056fe:	61fb      	str	r3, [r7, #28]
 8005700:	6a3b      	ldr	r3, [r7, #32]
 8005702:	69db      	ldr	r3, [r3, #28]
 8005704:	6a3a      	ldr	r2, [r7, #32]
 8005706:	6a12      	ldr	r2, [r2, #32]
 8005708:	609a      	str	r2, [r3, #8]
 800570a:	6a3b      	ldr	r3, [r7, #32]
 800570c:	6a1b      	ldr	r3, [r3, #32]
 800570e:	6a3a      	ldr	r2, [r7, #32]
 8005710:	69d2      	ldr	r2, [r2, #28]
 8005712:	605a      	str	r2, [r3, #4]
 8005714:	69fb      	ldr	r3, [r7, #28]
 8005716:	685a      	ldr	r2, [r3, #4]
 8005718:	6a3b      	ldr	r3, [r7, #32]
 800571a:	3318      	adds	r3, #24
 800571c:	429a      	cmp	r2, r3
 800571e:	d103      	bne.n	8005728 <xTaskRemoveFromEventList+0x5c>
 8005720:	6a3b      	ldr	r3, [r7, #32]
 8005722:	6a1a      	ldr	r2, [r3, #32]
 8005724:	69fb      	ldr	r3, [r7, #28]
 8005726:	605a      	str	r2, [r3, #4]
 8005728:	6a3b      	ldr	r3, [r7, #32]
 800572a:	2200      	movs	r2, #0
 800572c:	629a      	str	r2, [r3, #40]	@ 0x28
 800572e:	69fb      	ldr	r3, [r7, #28]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	1e5a      	subs	r2, r3, #1
 8005734:	69fb      	ldr	r3, [r7, #28]
 8005736:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005738:	4b4a      	ldr	r3, [pc, #296]	@ (8005864 <xTaskRemoveFromEventList+0x198>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d15e      	bne.n	80057fe <xTaskRemoveFromEventList+0x132>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8005740:	6a3b      	ldr	r3, [r7, #32]
 8005742:	695b      	ldr	r3, [r3, #20]
 8005744:	617b      	str	r3, [r7, #20]
 8005746:	6a3b      	ldr	r3, [r7, #32]
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	6a3a      	ldr	r2, [r7, #32]
 800574c:	68d2      	ldr	r2, [r2, #12]
 800574e:	609a      	str	r2, [r3, #8]
 8005750:	6a3b      	ldr	r3, [r7, #32]
 8005752:	68db      	ldr	r3, [r3, #12]
 8005754:	6a3a      	ldr	r2, [r7, #32]
 8005756:	6892      	ldr	r2, [r2, #8]
 8005758:	605a      	str	r2, [r3, #4]
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	685a      	ldr	r2, [r3, #4]
 800575e:	6a3b      	ldr	r3, [r7, #32]
 8005760:	3304      	adds	r3, #4
 8005762:	429a      	cmp	r2, r3
 8005764:	d103      	bne.n	800576e <xTaskRemoveFromEventList+0xa2>
 8005766:	6a3b      	ldr	r3, [r7, #32]
 8005768:	68da      	ldr	r2, [r3, #12]
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	605a      	str	r2, [r3, #4]
 800576e:	6a3b      	ldr	r3, [r7, #32]
 8005770:	2200      	movs	r2, #0
 8005772:	615a      	str	r2, [r3, #20]
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	1e5a      	subs	r2, r3, #1
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800577e:	6a3b      	ldr	r3, [r7, #32]
 8005780:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005782:	2201      	movs	r2, #1
 8005784:	409a      	lsls	r2, r3
 8005786:	4b38      	ldr	r3, [pc, #224]	@ (8005868 <xTaskRemoveFromEventList+0x19c>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4313      	orrs	r3, r2
 800578c:	4a36      	ldr	r2, [pc, #216]	@ (8005868 <xTaskRemoveFromEventList+0x19c>)
 800578e:	6013      	str	r3, [r2, #0]
 8005790:	6a3b      	ldr	r3, [r7, #32]
 8005792:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005794:	4935      	ldr	r1, [pc, #212]	@ (800586c <xTaskRemoveFromEventList+0x1a0>)
 8005796:	4613      	mov	r3, r2
 8005798:	009b      	lsls	r3, r3, #2
 800579a:	4413      	add	r3, r2
 800579c:	009b      	lsls	r3, r3, #2
 800579e:	440b      	add	r3, r1
 80057a0:	3304      	adds	r3, #4
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	613b      	str	r3, [r7, #16]
 80057a6:	6a3b      	ldr	r3, [r7, #32]
 80057a8:	693a      	ldr	r2, [r7, #16]
 80057aa:	609a      	str	r2, [r3, #8]
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	689a      	ldr	r2, [r3, #8]
 80057b0:	6a3b      	ldr	r3, [r7, #32]
 80057b2:	60da      	str	r2, [r3, #12]
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	6a3a      	ldr	r2, [r7, #32]
 80057ba:	3204      	adds	r2, #4
 80057bc:	605a      	str	r2, [r3, #4]
 80057be:	6a3b      	ldr	r3, [r7, #32]
 80057c0:	1d1a      	adds	r2, r3, #4
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	609a      	str	r2, [r3, #8]
 80057c6:	6a3b      	ldr	r3, [r7, #32]
 80057c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057ca:	4613      	mov	r3, r2
 80057cc:	009b      	lsls	r3, r3, #2
 80057ce:	4413      	add	r3, r2
 80057d0:	009b      	lsls	r3, r3, #2
 80057d2:	4a26      	ldr	r2, [pc, #152]	@ (800586c <xTaskRemoveFromEventList+0x1a0>)
 80057d4:	441a      	add	r2, r3
 80057d6:	6a3b      	ldr	r3, [r7, #32]
 80057d8:	615a      	str	r2, [r3, #20]
 80057da:	6a3b      	ldr	r3, [r7, #32]
 80057dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057de:	4923      	ldr	r1, [pc, #140]	@ (800586c <xTaskRemoveFromEventList+0x1a0>)
 80057e0:	4613      	mov	r3, r2
 80057e2:	009b      	lsls	r3, r3, #2
 80057e4:	4413      	add	r3, r2
 80057e6:	009b      	lsls	r3, r3, #2
 80057e8:	440b      	add	r3, r1
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	1c59      	adds	r1, r3, #1
 80057ee:	481f      	ldr	r0, [pc, #124]	@ (800586c <xTaskRemoveFromEventList+0x1a0>)
 80057f0:	4613      	mov	r3, r2
 80057f2:	009b      	lsls	r3, r3, #2
 80057f4:	4413      	add	r3, r2
 80057f6:	009b      	lsls	r3, r3, #2
 80057f8:	4403      	add	r3, r0
 80057fa:	6019      	str	r1, [r3, #0]
 80057fc:	e01b      	b.n	8005836 <xTaskRemoveFromEventList+0x16a>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80057fe:	4b1c      	ldr	r3, [pc, #112]	@ (8005870 <xTaskRemoveFromEventList+0x1a4>)
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	61bb      	str	r3, [r7, #24]
 8005804:	6a3b      	ldr	r3, [r7, #32]
 8005806:	69ba      	ldr	r2, [r7, #24]
 8005808:	61da      	str	r2, [r3, #28]
 800580a:	69bb      	ldr	r3, [r7, #24]
 800580c:	689a      	ldr	r2, [r3, #8]
 800580e:	6a3b      	ldr	r3, [r7, #32]
 8005810:	621a      	str	r2, [r3, #32]
 8005812:	69bb      	ldr	r3, [r7, #24]
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	6a3a      	ldr	r2, [r7, #32]
 8005818:	3218      	adds	r2, #24
 800581a:	605a      	str	r2, [r3, #4]
 800581c:	6a3b      	ldr	r3, [r7, #32]
 800581e:	f103 0218 	add.w	r2, r3, #24
 8005822:	69bb      	ldr	r3, [r7, #24]
 8005824:	609a      	str	r2, [r3, #8]
 8005826:	6a3b      	ldr	r3, [r7, #32]
 8005828:	4a11      	ldr	r2, [pc, #68]	@ (8005870 <xTaskRemoveFromEventList+0x1a4>)
 800582a:	629a      	str	r2, [r3, #40]	@ 0x28
 800582c:	4b10      	ldr	r3, [pc, #64]	@ (8005870 <xTaskRemoveFromEventList+0x1a4>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	3301      	adds	r3, #1
 8005832:	4a0f      	ldr	r2, [pc, #60]	@ (8005870 <xTaskRemoveFromEventList+0x1a4>)
 8005834:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005836:	6a3b      	ldr	r3, [r7, #32]
 8005838:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800583a:	4b0e      	ldr	r3, [pc, #56]	@ (8005874 <xTaskRemoveFromEventList+0x1a8>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005840:	429a      	cmp	r2, r3
 8005842:	d905      	bls.n	8005850 <xTaskRemoveFromEventList+0x184>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8005844:	2301      	movs	r3, #1
 8005846:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8005848:	4b0b      	ldr	r3, [pc, #44]	@ (8005878 <xTaskRemoveFromEventList+0x1ac>)
 800584a:	2201      	movs	r2, #1
 800584c:	601a      	str	r2, [r3, #0]
 800584e:	e001      	b.n	8005854 <xTaskRemoveFromEventList+0x188>
    }
    else
    {
        xReturn = pdFALSE;
 8005850:	2300      	movs	r3, #0
 8005852:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    return xReturn;
 8005854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005856:	4618      	mov	r0, r3
 8005858:	372c      	adds	r7, #44	@ 0x2c
 800585a:	46bd      	mov	sp, r7
 800585c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005860:	4770      	bx	lr
 8005862:	bf00      	nop
 8005864:	20000244 	.word	0x20000244
 8005868:	20000224 	.word	0x20000224
 800586c:	20000148 	.word	0x20000148
 8005870:	200001dc 	.word	0x200001dc
 8005874:	20000144 	.word	0x20000144
 8005878:	20000230 	.word	0x20000230

0800587c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800587c:	b480      	push	{r7}
 800587e:	b083      	sub	sp, #12
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005884:	4b06      	ldr	r3, [pc, #24]	@ (80058a0 <vTaskInternalSetTimeOutState+0x24>)
 8005886:	681a      	ldr	r2, [r3, #0]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800588c:	4b05      	ldr	r3, [pc, #20]	@ (80058a4 <vTaskInternalSetTimeOutState+0x28>)
 800588e:	681a      	ldr	r2, [r3, #0]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	605a      	str	r2, [r3, #4]
}
 8005894:	bf00      	nop
 8005896:	370c      	adds	r7, #12
 8005898:	46bd      	mov	sp, r7
 800589a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589e:	4770      	bx	lr
 80058a0:	20000234 	.word	0x20000234
 80058a4:	20000220 	.word	0x20000220

080058a8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b088      	sub	sp, #32
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
 80058b0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d10b      	bne.n	80058d0 <xTaskCheckForTimeOut+0x28>
        __asm volatile
 80058b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058bc:	f383 8811 	msr	BASEPRI, r3
 80058c0:	f3bf 8f6f 	isb	sy
 80058c4:	f3bf 8f4f 	dsb	sy
 80058c8:	613b      	str	r3, [r7, #16]
    }
 80058ca:	bf00      	nop
 80058cc:	bf00      	nop
 80058ce:	e7fd      	b.n	80058cc <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d10b      	bne.n	80058ee <xTaskCheckForTimeOut+0x46>
        __asm volatile
 80058d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058da:	f383 8811 	msr	BASEPRI, r3
 80058de:	f3bf 8f6f 	isb	sy
 80058e2:	f3bf 8f4f 	dsb	sy
 80058e6:	60fb      	str	r3, [r7, #12]
    }
 80058e8:	bf00      	nop
 80058ea:	bf00      	nop
 80058ec:	e7fd      	b.n	80058ea <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 80058ee:	f001 f90d 	bl	8006b0c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80058f2:	4b1f      	ldr	r3, [pc, #124]	@ (8005970 <xTaskCheckForTimeOut+0xc8>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	69ba      	ldr	r2, [r7, #24]
 80058fe:	1ad3      	subs	r3, r2, r3
 8005900:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f1b3 3fff 	cmp.w	r3, #4294967295
 800590a:	d102      	bne.n	8005912 <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800590c:	2300      	movs	r3, #0
 800590e:	61fb      	str	r3, [r7, #28]
 8005910:	e026      	b.n	8005960 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681a      	ldr	r2, [r3, #0]
 8005916:	4b17      	ldr	r3, [pc, #92]	@ (8005974 <xTaskCheckForTimeOut+0xcc>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	429a      	cmp	r2, r3
 800591c:	d00a      	beq.n	8005934 <xTaskCheckForTimeOut+0x8c>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	69ba      	ldr	r2, [r7, #24]
 8005924:	429a      	cmp	r2, r3
 8005926:	d305      	bcc.n	8005934 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8005928:	2301      	movs	r3, #1
 800592a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	2200      	movs	r2, #0
 8005930:	601a      	str	r2, [r3, #0]
 8005932:	e015      	b.n	8005960 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	697a      	ldr	r2, [r7, #20]
 800593a:	429a      	cmp	r2, r3
 800593c:	d20b      	bcs.n	8005956 <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	681a      	ldr	r2, [r3, #0]
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	1ad2      	subs	r2, r2, r3
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f7ff ff96 	bl	800587c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8005950:	2300      	movs	r3, #0
 8005952:	61fb      	str	r3, [r7, #28]
 8005954:	e004      	b.n	8005960 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	2200      	movs	r2, #0
 800595a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800595c:	2301      	movs	r3, #1
 800595e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8005960:	f001 f906 	bl	8006b70 <vPortExitCritical>

    return xReturn;
 8005964:	69fb      	ldr	r3, [r7, #28]
}
 8005966:	4618      	mov	r0, r3
 8005968:	3720      	adds	r7, #32
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}
 800596e:	bf00      	nop
 8005970:	20000220 	.word	0x20000220
 8005974:	20000234 	.word	0x20000234

08005978 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005978:	b480      	push	{r7}
 800597a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800597c:	4b03      	ldr	r3, [pc, #12]	@ (800598c <vTaskMissedYield+0x14>)
 800597e:	2201      	movs	r2, #1
 8005980:	601a      	str	r2, [r3, #0]
}
 8005982:	bf00      	nop
 8005984:	46bd      	mov	sp, r7
 8005986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598a:	4770      	bx	lr
 800598c:	20000230 	.word	0x20000230

08005990 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b082      	sub	sp, #8
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8005998:	f000 f852 	bl	8005a40 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800599c:	4b06      	ldr	r3, [pc, #24]	@ (80059b8 <prvIdleTask+0x28>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	d9f9      	bls.n	8005998 <prvIdleTask+0x8>
            {
                taskYIELD();
 80059a4:	4b05      	ldr	r3, [pc, #20]	@ (80059bc <prvIdleTask+0x2c>)
 80059a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80059aa:	601a      	str	r2, [r3, #0]
 80059ac:	f3bf 8f4f 	dsb	sy
 80059b0:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80059b4:	e7f0      	b.n	8005998 <prvIdleTask+0x8>
 80059b6:	bf00      	nop
 80059b8:	20000148 	.word	0x20000148
 80059bc:	e000ed04 	.word	0xe000ed04

080059c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b082      	sub	sp, #8
 80059c4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80059c6:	2300      	movs	r3, #0
 80059c8:	607b      	str	r3, [r7, #4]
 80059ca:	e00c      	b.n	80059e6 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80059cc:	687a      	ldr	r2, [r7, #4]
 80059ce:	4613      	mov	r3, r2
 80059d0:	009b      	lsls	r3, r3, #2
 80059d2:	4413      	add	r3, r2
 80059d4:	009b      	lsls	r3, r3, #2
 80059d6:	4a12      	ldr	r2, [pc, #72]	@ (8005a20 <prvInitialiseTaskLists+0x60>)
 80059d8:	4413      	add	r3, r2
 80059da:	4618      	mov	r0, r3
 80059dc:	f7fe fa8e 	bl	8003efc <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	3301      	adds	r3, #1
 80059e4:	607b      	str	r3, [r7, #4]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2b04      	cmp	r3, #4
 80059ea:	d9ef      	bls.n	80059cc <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80059ec:	480d      	ldr	r0, [pc, #52]	@ (8005a24 <prvInitialiseTaskLists+0x64>)
 80059ee:	f7fe fa85 	bl	8003efc <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80059f2:	480d      	ldr	r0, [pc, #52]	@ (8005a28 <prvInitialiseTaskLists+0x68>)
 80059f4:	f7fe fa82 	bl	8003efc <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80059f8:	480c      	ldr	r0, [pc, #48]	@ (8005a2c <prvInitialiseTaskLists+0x6c>)
 80059fa:	f7fe fa7f 	bl	8003efc <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80059fe:	480c      	ldr	r0, [pc, #48]	@ (8005a30 <prvInitialiseTaskLists+0x70>)
 8005a00:	f7fe fa7c 	bl	8003efc <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8005a04:	480b      	ldr	r0, [pc, #44]	@ (8005a34 <prvInitialiseTaskLists+0x74>)
 8005a06:	f7fe fa79 	bl	8003efc <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8005a0a:	4b0b      	ldr	r3, [pc, #44]	@ (8005a38 <prvInitialiseTaskLists+0x78>)
 8005a0c:	4a05      	ldr	r2, [pc, #20]	@ (8005a24 <prvInitialiseTaskLists+0x64>)
 8005a0e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005a10:	4b0a      	ldr	r3, [pc, #40]	@ (8005a3c <prvInitialiseTaskLists+0x7c>)
 8005a12:	4a05      	ldr	r2, [pc, #20]	@ (8005a28 <prvInitialiseTaskLists+0x68>)
 8005a14:	601a      	str	r2, [r3, #0]
}
 8005a16:	bf00      	nop
 8005a18:	3708      	adds	r7, #8
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}
 8005a1e:	bf00      	nop
 8005a20:	20000148 	.word	0x20000148
 8005a24:	200001ac 	.word	0x200001ac
 8005a28:	200001c0 	.word	0x200001c0
 8005a2c:	200001dc 	.word	0x200001dc
 8005a30:	200001f0 	.word	0x200001f0
 8005a34:	20000208 	.word	0x20000208
 8005a38:	200001d4 	.word	0x200001d4
 8005a3c:	200001d8 	.word	0x200001d8

08005a40 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b082      	sub	sp, #8
 8005a44:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005a46:	e019      	b.n	8005a7c <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8005a48:	f001 f860 	bl	8006b0c <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a4c:	4b10      	ldr	r3, [pc, #64]	@ (8005a90 <prvCheckTasksWaitingTermination+0x50>)
 8005a4e:	68db      	ldr	r3, [r3, #12]
 8005a50:	68db      	ldr	r3, [r3, #12]
 8005a52:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	3304      	adds	r3, #4
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f7fe fab5 	bl	8003fc8 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8005a5e:	4b0d      	ldr	r3, [pc, #52]	@ (8005a94 <prvCheckTasksWaitingTermination+0x54>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	3b01      	subs	r3, #1
 8005a64:	4a0b      	ldr	r2, [pc, #44]	@ (8005a94 <prvCheckTasksWaitingTermination+0x54>)
 8005a66:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8005a68:	4b0b      	ldr	r3, [pc, #44]	@ (8005a98 <prvCheckTasksWaitingTermination+0x58>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	3b01      	subs	r3, #1
 8005a6e:	4a0a      	ldr	r2, [pc, #40]	@ (8005a98 <prvCheckTasksWaitingTermination+0x58>)
 8005a70:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8005a72:	f001 f87d 	bl	8006b70 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f000 f810 	bl	8005a9c <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005a7c:	4b06      	ldr	r3, [pc, #24]	@ (8005a98 <prvCheckTasksWaitingTermination+0x58>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d1e1      	bne.n	8005a48 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8005a84:	bf00      	nop
 8005a86:	bf00      	nop
 8005a88:	3708      	adds	r7, #8
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}
 8005a8e:	bf00      	nop
 8005a90:	200001f0 	.word	0x200001f0
 8005a94:	2000021c 	.word	0x2000021c
 8005a98:	20000204 	.word	0x20000204

08005a9c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b082      	sub	sp, #8
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f001 fa15 	bl	8006ed8 <vPortFree>
            vPortFree( pxTCB );
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f001 fa12 	bl	8006ed8 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8005ab4:	bf00      	nop
 8005ab6:	3708      	adds	r7, #8
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}

08005abc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005abc:	b480      	push	{r7}
 8005abe:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ac0:	4b0a      	ldr	r3, [pc, #40]	@ (8005aec <prvResetNextTaskUnblockTime+0x30>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d104      	bne.n	8005ad4 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8005aca:	4b09      	ldr	r3, [pc, #36]	@ (8005af0 <prvResetNextTaskUnblockTime+0x34>)
 8005acc:	f04f 32ff 	mov.w	r2, #4294967295
 8005ad0:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8005ad2:	e005      	b.n	8005ae0 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005ad4:	4b05      	ldr	r3, [pc, #20]	@ (8005aec <prvResetNextTaskUnblockTime+0x30>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	68db      	ldr	r3, [r3, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a04      	ldr	r2, [pc, #16]	@ (8005af0 <prvResetNextTaskUnblockTime+0x34>)
 8005ade:	6013      	str	r3, [r2, #0]
}
 8005ae0:	bf00      	nop
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae8:	4770      	bx	lr
 8005aea:	bf00      	nop
 8005aec:	200001d4 	.word	0x200001d4
 8005af0:	2000023c 	.word	0x2000023c

08005af4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8005af4:	b480      	push	{r7}
 8005af6:	b083      	sub	sp, #12
 8005af8:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8005afa:	4b0b      	ldr	r3, [pc, #44]	@ (8005b28 <xTaskGetSchedulerState+0x34>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d102      	bne.n	8005b08 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8005b02:	2301      	movs	r3, #1
 8005b04:	607b      	str	r3, [r7, #4]
 8005b06:	e008      	b.n	8005b1a <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b08:	4b08      	ldr	r3, [pc, #32]	@ (8005b2c <xTaskGetSchedulerState+0x38>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d102      	bne.n	8005b16 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8005b10:	2302      	movs	r3, #2
 8005b12:	607b      	str	r3, [r7, #4]
 8005b14:	e001      	b.n	8005b1a <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8005b16:	2300      	movs	r3, #0
 8005b18:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8005b1a:	687b      	ldr	r3, [r7, #4]
    }
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	370c      	adds	r7, #12
 8005b20:	46bd      	mov	sp, r7
 8005b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b26:	4770      	bx	lr
 8005b28:	20000228 	.word	0x20000228
 8005b2c:	20000244 	.word	0x20000244

08005b30 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b088      	sub	sp, #32
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	f000 808e 	beq.w	8005c64 <xTaskPriorityDisinherit+0x134>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8005b48:	4b49      	ldr	r3, [pc, #292]	@ (8005c70 <xTaskPriorityDisinherit+0x140>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	69ba      	ldr	r2, [r7, #24]
 8005b4e:	429a      	cmp	r2, r3
 8005b50:	d00b      	beq.n	8005b6a <xTaskPriorityDisinherit+0x3a>
        __asm volatile
 8005b52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b56:	f383 8811 	msr	BASEPRI, r3
 8005b5a:	f3bf 8f6f 	isb	sy
 8005b5e:	f3bf 8f4f 	dsb	sy
 8005b62:	613b      	str	r3, [r7, #16]
    }
 8005b64:	bf00      	nop
 8005b66:	bf00      	nop
 8005b68:	e7fd      	b.n	8005b66 <xTaskPriorityDisinherit+0x36>
            configASSERT( pxTCB->uxMutexesHeld );
 8005b6a:	69bb      	ldr	r3, [r7, #24]
 8005b6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d10b      	bne.n	8005b8a <xTaskPriorityDisinherit+0x5a>
        __asm volatile
 8005b72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b76:	f383 8811 	msr	BASEPRI, r3
 8005b7a:	f3bf 8f6f 	isb	sy
 8005b7e:	f3bf 8f4f 	dsb	sy
 8005b82:	60fb      	str	r3, [r7, #12]
    }
 8005b84:	bf00      	nop
 8005b86:	bf00      	nop
 8005b88:	e7fd      	b.n	8005b86 <xTaskPriorityDisinherit+0x56>
            ( pxTCB->uxMutexesHeld )--;
 8005b8a:	69bb      	ldr	r3, [r7, #24]
 8005b8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b8e:	1e5a      	subs	r2, r3, #1
 8005b90:	69bb      	ldr	r3, [r7, #24]
 8005b92:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005b94:	69bb      	ldr	r3, [r7, #24]
 8005b96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b98:	69bb      	ldr	r3, [r7, #24]
 8005b9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b9c:	429a      	cmp	r2, r3
 8005b9e:	d061      	beq.n	8005c64 <xTaskPriorityDisinherit+0x134>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005ba0:	69bb      	ldr	r3, [r7, #24]
 8005ba2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d15d      	bne.n	8005c64 <xTaskPriorityDisinherit+0x134>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ba8:	69bb      	ldr	r3, [r7, #24]
 8005baa:	3304      	adds	r3, #4
 8005bac:	4618      	mov	r0, r3
 8005bae:	f7fe fa0b 	bl	8003fc8 <uxListRemove>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d10a      	bne.n	8005bce <xTaskPriorityDisinherit+0x9e>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8005bb8:	69bb      	ldr	r3, [r7, #24]
 8005bba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bbc:	2201      	movs	r2, #1
 8005bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8005bc2:	43da      	mvns	r2, r3
 8005bc4:	4b2b      	ldr	r3, [pc, #172]	@ (8005c74 <xTaskPriorityDisinherit+0x144>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4013      	ands	r3, r2
 8005bca:	4a2a      	ldr	r2, [pc, #168]	@ (8005c74 <xTaskPriorityDisinherit+0x144>)
 8005bcc:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005bce:	69bb      	ldr	r3, [r7, #24]
 8005bd0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005bd2:	69bb      	ldr	r3, [r7, #24]
 8005bd4:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005bd6:	69bb      	ldr	r3, [r7, #24]
 8005bd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bda:	f1c3 0205 	rsb	r2, r3, #5
 8005bde:	69bb      	ldr	r3, [r7, #24]
 8005be0:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8005be2:	69bb      	ldr	r3, [r7, #24]
 8005be4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005be6:	2201      	movs	r2, #1
 8005be8:	409a      	lsls	r2, r3
 8005bea:	4b22      	ldr	r3, [pc, #136]	@ (8005c74 <xTaskPriorityDisinherit+0x144>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	4a20      	ldr	r2, [pc, #128]	@ (8005c74 <xTaskPriorityDisinherit+0x144>)
 8005bf2:	6013      	str	r3, [r2, #0]
 8005bf4:	69bb      	ldr	r3, [r7, #24]
 8005bf6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bf8:	491f      	ldr	r1, [pc, #124]	@ (8005c78 <xTaskPriorityDisinherit+0x148>)
 8005bfa:	4613      	mov	r3, r2
 8005bfc:	009b      	lsls	r3, r3, #2
 8005bfe:	4413      	add	r3, r2
 8005c00:	009b      	lsls	r3, r3, #2
 8005c02:	440b      	add	r3, r1
 8005c04:	3304      	adds	r3, #4
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	617b      	str	r3, [r7, #20]
 8005c0a:	69bb      	ldr	r3, [r7, #24]
 8005c0c:	697a      	ldr	r2, [r7, #20]
 8005c0e:	609a      	str	r2, [r3, #8]
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	689a      	ldr	r2, [r3, #8]
 8005c14:	69bb      	ldr	r3, [r7, #24]
 8005c16:	60da      	str	r2, [r3, #12]
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	69ba      	ldr	r2, [r7, #24]
 8005c1e:	3204      	adds	r2, #4
 8005c20:	605a      	str	r2, [r3, #4]
 8005c22:	69bb      	ldr	r3, [r7, #24]
 8005c24:	1d1a      	adds	r2, r3, #4
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	609a      	str	r2, [r3, #8]
 8005c2a:	69bb      	ldr	r3, [r7, #24]
 8005c2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c2e:	4613      	mov	r3, r2
 8005c30:	009b      	lsls	r3, r3, #2
 8005c32:	4413      	add	r3, r2
 8005c34:	009b      	lsls	r3, r3, #2
 8005c36:	4a10      	ldr	r2, [pc, #64]	@ (8005c78 <xTaskPriorityDisinherit+0x148>)
 8005c38:	441a      	add	r2, r3
 8005c3a:	69bb      	ldr	r3, [r7, #24]
 8005c3c:	615a      	str	r2, [r3, #20]
 8005c3e:	69bb      	ldr	r3, [r7, #24]
 8005c40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c42:	490d      	ldr	r1, [pc, #52]	@ (8005c78 <xTaskPriorityDisinherit+0x148>)
 8005c44:	4613      	mov	r3, r2
 8005c46:	009b      	lsls	r3, r3, #2
 8005c48:	4413      	add	r3, r2
 8005c4a:	009b      	lsls	r3, r3, #2
 8005c4c:	440b      	add	r3, r1
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	1c59      	adds	r1, r3, #1
 8005c52:	4809      	ldr	r0, [pc, #36]	@ (8005c78 <xTaskPriorityDisinherit+0x148>)
 8005c54:	4613      	mov	r3, r2
 8005c56:	009b      	lsls	r3, r3, #2
 8005c58:	4413      	add	r3, r2
 8005c5a:	009b      	lsls	r3, r3, #2
 8005c5c:	4403      	add	r3, r0
 8005c5e:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8005c60:	2301      	movs	r3, #1
 8005c62:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8005c64:	69fb      	ldr	r3, [r7, #28]
    }
 8005c66:	4618      	mov	r0, r3
 8005c68:	3720      	adds	r7, #32
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}
 8005c6e:	bf00      	nop
 8005c70:	20000144 	.word	0x20000144
 8005c74:	20000224 	.word	0x20000224
 8005c78:	20000148 	.word	0x20000148

08005c7c <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b086      	sub	sp, #24
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	60f8      	str	r0, [r7, #12]
 8005c84:	60b9      	str	r1, [r7, #8]
 8005c86:	607a      	str	r2, [r7, #4]
 8005c88:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d00b      	beq.n	8005ca8 <xTaskGenericNotifyWait+0x2c>
        __asm volatile
 8005c90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c94:	f383 8811 	msr	BASEPRI, r3
 8005c98:	f3bf 8f6f 	isb	sy
 8005c9c:	f3bf 8f4f 	dsb	sy
 8005ca0:	613b      	str	r3, [r7, #16]
    }
 8005ca2:	bf00      	nop
 8005ca4:	bf00      	nop
 8005ca6:	e7fd      	b.n	8005ca4 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8005ca8:	f000 ff30 	bl	8006b0c <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8005cac:	4b31      	ldr	r3, [pc, #196]	@ (8005d74 <xTaskGenericNotifyWait+0xf8>)
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	4413      	add	r3, r2
 8005cb4:	3354      	adds	r3, #84	@ 0x54
 8005cb6:	781b      	ldrb	r3, [r3, #0]
 8005cb8:	b2db      	uxtb	r3, r3
 8005cba:	2b02      	cmp	r3, #2
 8005cbc:	d022      	beq.n	8005d04 <xTaskGenericNotifyWait+0x88>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8005cbe:	4b2d      	ldr	r3, [pc, #180]	@ (8005d74 <xTaskGenericNotifyWait+0xf8>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	68fa      	ldr	r2, [r7, #12]
 8005cc4:	3214      	adds	r2, #20
 8005cc6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005cca:	68ba      	ldr	r2, [r7, #8]
 8005ccc:	43d2      	mvns	r2, r2
 8005cce:	4011      	ands	r1, r2
 8005cd0:	68fa      	ldr	r2, [r7, #12]
 8005cd2:	3214      	adds	r2, #20
 8005cd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8005cd8:	4b26      	ldr	r3, [pc, #152]	@ (8005d74 <xTaskGenericNotifyWait+0xf8>)
 8005cda:	681a      	ldr	r2, [r3, #0]
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	4413      	add	r3, r2
 8005ce0:	3354      	adds	r3, #84	@ 0x54
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8005ce6:	6a3b      	ldr	r3, [r7, #32]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d00b      	beq.n	8005d04 <xTaskGenericNotifyWait+0x88>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005cec:	2101      	movs	r1, #1
 8005cee:	6a38      	ldr	r0, [r7, #32]
 8005cf0:	f000 faca 	bl	8006288 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8005cf4:	4b20      	ldr	r3, [pc, #128]	@ (8005d78 <xTaskGenericNotifyWait+0xfc>)
 8005cf6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005cfa:	601a      	str	r2, [r3, #0]
 8005cfc:	f3bf 8f4f 	dsb	sy
 8005d00:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8005d04:	f000 ff34 	bl	8006b70 <vPortExitCritical>

        taskENTER_CRITICAL();
 8005d08:	f000 ff00 	bl	8006b0c <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );

            if( pulNotificationValue != NULL )
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d007      	beq.n	8005d22 <xTaskGenericNotifyWait+0xa6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8005d12:	4b18      	ldr	r3, [pc, #96]	@ (8005d74 <xTaskGenericNotifyWait+0xf8>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	68fa      	ldr	r2, [r7, #12]
 8005d18:	3214      	adds	r2, #20
 8005d1a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8005d22:	4b14      	ldr	r3, [pc, #80]	@ (8005d74 <xTaskGenericNotifyWait+0xf8>)
 8005d24:	681a      	ldr	r2, [r3, #0]
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	4413      	add	r3, r2
 8005d2a:	3354      	adds	r3, #84	@ 0x54
 8005d2c:	781b      	ldrb	r3, [r3, #0]
 8005d2e:	b2db      	uxtb	r3, r3
 8005d30:	2b02      	cmp	r3, #2
 8005d32:	d002      	beq.n	8005d3a <xTaskGenericNotifyWait+0xbe>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8005d34:	2300      	movs	r3, #0
 8005d36:	617b      	str	r3, [r7, #20]
 8005d38:	e00e      	b.n	8005d58 <xTaskGenericNotifyWait+0xdc>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8005d3a:	4b0e      	ldr	r3, [pc, #56]	@ (8005d74 <xTaskGenericNotifyWait+0xf8>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	68fa      	ldr	r2, [r7, #12]
 8005d40:	3214      	adds	r2, #20
 8005d42:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005d46:	687a      	ldr	r2, [r7, #4]
 8005d48:	43d2      	mvns	r2, r2
 8005d4a:	4011      	ands	r1, r2
 8005d4c:	68fa      	ldr	r2, [r7, #12]
 8005d4e:	3214      	adds	r2, #20
 8005d50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8005d54:	2301      	movs	r3, #1
 8005d56:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8005d58:	4b06      	ldr	r3, [pc, #24]	@ (8005d74 <xTaskGenericNotifyWait+0xf8>)
 8005d5a:	681a      	ldr	r2, [r3, #0]
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	4413      	add	r3, r2
 8005d60:	3354      	adds	r3, #84	@ 0x54
 8005d62:	2200      	movs	r2, #0
 8005d64:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8005d66:	f000 ff03 	bl	8006b70 <vPortExitCritical>

        return xReturn;
 8005d6a:	697b      	ldr	r3, [r7, #20]
    }
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	3718      	adds	r7, #24
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}
 8005d74:	20000144 	.word	0x20000144
 8005d78:	e000ed04 	.word	0xe000ed04

08005d7c <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b08e      	sub	sp, #56	@ 0x38
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	60f8      	str	r0, [r7, #12]
 8005d84:	60b9      	str	r1, [r7, #8]
 8005d86:	607a      	str	r2, [r7, #4]
 8005d88:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	637b      	str	r3, [r7, #52]	@ 0x34
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d00b      	beq.n	8005dac <xTaskGenericNotify+0x30>
        __asm volatile
 8005d94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d98:	f383 8811 	msr	BASEPRI, r3
 8005d9c:	f3bf 8f6f 	isb	sy
 8005da0:	f3bf 8f4f 	dsb	sy
 8005da4:	623b      	str	r3, [r7, #32]
    }
 8005da6:	bf00      	nop
 8005da8:	bf00      	nop
 8005daa:	e7fd      	b.n	8005da8 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d10b      	bne.n	8005dca <xTaskGenericNotify+0x4e>
        __asm volatile
 8005db2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005db6:	f383 8811 	msr	BASEPRI, r3
 8005dba:	f3bf 8f6f 	isb	sy
 8005dbe:	f3bf 8f4f 	dsb	sy
 8005dc2:	61fb      	str	r3, [r7, #28]
    }
 8005dc4:	bf00      	nop
 8005dc6:	bf00      	nop
 8005dc8:	e7fd      	b.n	8005dc6 <xTaskGenericNotify+0x4a>
        pxTCB = xTaskToNotify;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	633b      	str	r3, [r7, #48]	@ 0x30

        taskENTER_CRITICAL();
 8005dce:	f000 fe9d 	bl	8006b0c <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8005dd2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d006      	beq.n	8005de6 <xTaskGenericNotify+0x6a>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8005dd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dda:	68ba      	ldr	r2, [r7, #8]
 8005ddc:	3214      	adds	r2, #20
 8005dde:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005de2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005de4:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8005de6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	4413      	add	r3, r2
 8005dec:	3354      	adds	r3, #84	@ 0x54
 8005dee:	781b      	ldrb	r3, [r3, #0]
 8005df0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8005df4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	4413      	add	r3, r2
 8005dfa:	3354      	adds	r3, #84	@ 0x54
 8005dfc:	2202      	movs	r2, #2
 8005dfe:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8005e00:	78fb      	ldrb	r3, [r7, #3]
 8005e02:	2b04      	cmp	r3, #4
 8005e04:	d83b      	bhi.n	8005e7e <xTaskGenericNotify+0x102>
 8005e06:	a201      	add	r2, pc, #4	@ (adr r2, 8005e0c <xTaskGenericNotify+0x90>)
 8005e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e0c:	08005e9f 	.word	0x08005e9f
 8005e10:	08005e21 	.word	0x08005e21
 8005e14:	08005e3d 	.word	0x08005e3d
 8005e18:	08005e55 	.word	0x08005e55
 8005e1c:	08005e63 	.word	0x08005e63
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8005e20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e22:	68ba      	ldr	r2, [r7, #8]
 8005e24:	3214      	adds	r2, #20
 8005e26:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	ea42 0103 	orr.w	r1, r2, r3
 8005e30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e32:	68ba      	ldr	r2, [r7, #8]
 8005e34:	3214      	adds	r2, #20
 8005e36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8005e3a:	e033      	b.n	8005ea4 <xTaskGenericNotify+0x128>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8005e3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e3e:	68ba      	ldr	r2, [r7, #8]
 8005e40:	3214      	adds	r2, #20
 8005e42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e46:	1c59      	adds	r1, r3, #1
 8005e48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e4a:	68ba      	ldr	r2, [r7, #8]
 8005e4c:	3214      	adds	r2, #20
 8005e4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8005e52:	e027      	b.n	8005ea4 <xTaskGenericNotify+0x128>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8005e54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e56:	68ba      	ldr	r2, [r7, #8]
 8005e58:	3214      	adds	r2, #20
 8005e5a:	6879      	ldr	r1, [r7, #4]
 8005e5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8005e60:	e020      	b.n	8005ea4 <xTaskGenericNotify+0x128>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8005e62:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005e66:	2b02      	cmp	r3, #2
 8005e68:	d006      	beq.n	8005e78 <xTaskGenericNotify+0xfc>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8005e6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e6c:	68ba      	ldr	r2, [r7, #8]
 8005e6e:	3214      	adds	r2, #20
 8005e70:	6879      	ldr	r1, [r7, #4]
 8005e72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8005e76:	e015      	b.n	8005ea4 <xTaskGenericNotify+0x128>
                        xReturn = pdFAIL;
 8005e78:	2300      	movs	r3, #0
 8005e7a:	637b      	str	r3, [r7, #52]	@ 0x34
                    break;
 8005e7c:	e012      	b.n	8005ea4 <xTaskGenericNotify+0x128>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8005e7e:	4b4d      	ldr	r3, [pc, #308]	@ (8005fb4 <xTaskGenericNotify+0x238>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d00d      	beq.n	8005ea2 <xTaskGenericNotify+0x126>
        __asm volatile
 8005e86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e8a:	f383 8811 	msr	BASEPRI, r3
 8005e8e:	f3bf 8f6f 	isb	sy
 8005e92:	f3bf 8f4f 	dsb	sy
 8005e96:	61bb      	str	r3, [r7, #24]
    }
 8005e98:	bf00      	nop
 8005e9a:	bf00      	nop
 8005e9c:	e7fd      	b.n	8005e9a <xTaskGenericNotify+0x11e>
                    break;
 8005e9e:	bf00      	nop
 8005ea0:	e000      	b.n	8005ea4 <xTaskGenericNotify+0x128>

                    break;
 8005ea2:	bf00      	nop

            traceTASK_NOTIFY(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8005ea4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	d17c      	bne.n	8005fa6 <xTaskGenericNotify+0x22a>
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8005eac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eae:	695b      	ldr	r3, [r3, #20]
 8005eb0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005eb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eb4:	689b      	ldr	r3, [r3, #8]
 8005eb6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005eb8:	68d2      	ldr	r2, [r2, #12]
 8005eba:	609a      	str	r2, [r3, #8]
 8005ebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ebe:	68db      	ldr	r3, [r3, #12]
 8005ec0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ec2:	6892      	ldr	r2, [r2, #8]
 8005ec4:	605a      	str	r2, [r3, #4]
 8005ec6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ec8:	685a      	ldr	r2, [r3, #4]
 8005eca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ecc:	3304      	adds	r3, #4
 8005ece:	429a      	cmp	r2, r3
 8005ed0:	d103      	bne.n	8005eda <xTaskGenericNotify+0x15e>
 8005ed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ed4:	68da      	ldr	r2, [r3, #12]
 8005ed6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ed8:	605a      	str	r2, [r3, #4]
 8005eda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005edc:	2200      	movs	r2, #0
 8005ede:	615a      	str	r2, [r3, #20]
 8005ee0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	1e5a      	subs	r2, r3, #1
 8005ee6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ee8:	601a      	str	r2, [r3, #0]
                prvAddTaskToReadyList( pxTCB );
 8005eea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eee:	2201      	movs	r2, #1
 8005ef0:	409a      	lsls	r2, r3
 8005ef2:	4b31      	ldr	r3, [pc, #196]	@ (8005fb8 <xTaskGenericNotify+0x23c>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	4a2f      	ldr	r2, [pc, #188]	@ (8005fb8 <xTaskGenericNotify+0x23c>)
 8005efa:	6013      	str	r3, [r2, #0]
 8005efc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005efe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f00:	492e      	ldr	r1, [pc, #184]	@ (8005fbc <xTaskGenericNotify+0x240>)
 8005f02:	4613      	mov	r3, r2
 8005f04:	009b      	lsls	r3, r3, #2
 8005f06:	4413      	add	r3, r2
 8005f08:	009b      	lsls	r3, r3, #2
 8005f0a:	440b      	add	r3, r1
 8005f0c:	3304      	adds	r3, #4
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f16:	609a      	str	r2, [r3, #8]
 8005f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f1a:	689a      	ldr	r2, [r3, #8]
 8005f1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f1e:	60da      	str	r2, [r3, #12]
 8005f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f22:	689b      	ldr	r3, [r3, #8]
 8005f24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f26:	3204      	adds	r2, #4
 8005f28:	605a      	str	r2, [r3, #4]
 8005f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f2c:	1d1a      	adds	r2, r3, #4
 8005f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f30:	609a      	str	r2, [r3, #8]
 8005f32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f36:	4613      	mov	r3, r2
 8005f38:	009b      	lsls	r3, r3, #2
 8005f3a:	4413      	add	r3, r2
 8005f3c:	009b      	lsls	r3, r3, #2
 8005f3e:	4a1f      	ldr	r2, [pc, #124]	@ (8005fbc <xTaskGenericNotify+0x240>)
 8005f40:	441a      	add	r2, r3
 8005f42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f44:	615a      	str	r2, [r3, #20]
 8005f46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f4a:	491c      	ldr	r1, [pc, #112]	@ (8005fbc <xTaskGenericNotify+0x240>)
 8005f4c:	4613      	mov	r3, r2
 8005f4e:	009b      	lsls	r3, r3, #2
 8005f50:	4413      	add	r3, r2
 8005f52:	009b      	lsls	r3, r3, #2
 8005f54:	440b      	add	r3, r1
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	1c59      	adds	r1, r3, #1
 8005f5a:	4818      	ldr	r0, [pc, #96]	@ (8005fbc <xTaskGenericNotify+0x240>)
 8005f5c:	4613      	mov	r3, r2
 8005f5e:	009b      	lsls	r3, r3, #2
 8005f60:	4413      	add	r3, r2
 8005f62:	009b      	lsls	r3, r3, #2
 8005f64:	4403      	add	r3, r0
 8005f66:	6019      	str	r1, [r3, #0]

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8005f68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d00b      	beq.n	8005f88 <xTaskGenericNotify+0x20c>
        __asm volatile
 8005f70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f74:	f383 8811 	msr	BASEPRI, r3
 8005f78:	f3bf 8f6f 	isb	sy
 8005f7c:	f3bf 8f4f 	dsb	sy
 8005f80:	617b      	str	r3, [r7, #20]
    }
 8005f82:	bf00      	nop
 8005f84:	bf00      	nop
 8005f86:	e7fd      	b.n	8005f84 <xTaskGenericNotify+0x208>
                     * earliest possible time. */
                    prvResetNextTaskUnblockTime();
                }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005f88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f8c:	4b0c      	ldr	r3, [pc, #48]	@ (8005fc0 <xTaskGenericNotify+0x244>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f92:	429a      	cmp	r2, r3
 8005f94:	d907      	bls.n	8005fa6 <xTaskGenericNotify+0x22a>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 8005f96:	4b0b      	ldr	r3, [pc, #44]	@ (8005fc4 <xTaskGenericNotify+0x248>)
 8005f98:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f9c:	601a      	str	r2, [r3, #0]
 8005f9e:	f3bf 8f4f 	dsb	sy
 8005fa2:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8005fa6:	f000 fde3 	bl	8006b70 <vPortExitCritical>

        return xReturn;
 8005faa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 8005fac:	4618      	mov	r0, r3
 8005fae:	3738      	adds	r7, #56	@ 0x38
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}
 8005fb4:	20000220 	.word	0x20000220
 8005fb8:	20000224 	.word	0x20000224
 8005fbc:	20000148 	.word	0x20000148
 8005fc0:	20000144 	.word	0x20000144
 8005fc4:	e000ed04 	.word	0xe000ed04

08005fc8 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b092      	sub	sp, #72	@ 0x48
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	60f8      	str	r0, [r7, #12]
 8005fd0:	60b9      	str	r1, [r7, #8]
 8005fd2:	607a      	str	r2, [r7, #4]
 8005fd4:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	647b      	str	r3, [r7, #68]	@ 0x44
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d10b      	bne.n	8005ff8 <xTaskGenericNotifyFromISR+0x30>
        __asm volatile
 8005fe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fe4:	f383 8811 	msr	BASEPRI, r3
 8005fe8:	f3bf 8f6f 	isb	sy
 8005fec:	f3bf 8f4f 	dsb	sy
 8005ff0:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8005ff2:	bf00      	nop
 8005ff4:	bf00      	nop
 8005ff6:	e7fd      	b.n	8005ff4 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d00b      	beq.n	8006016 <xTaskGenericNotifyFromISR+0x4e>
        __asm volatile
 8005ffe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006002:	f383 8811 	msr	BASEPRI, r3
 8006006:	f3bf 8f6f 	isb	sy
 800600a:	f3bf 8f4f 	dsb	sy
 800600e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8006010:	bf00      	nop
 8006012:	bf00      	nop
 8006014:	e7fd      	b.n	8006012 <xTaskGenericNotifyFromISR+0x4a>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006016:	f000 fe61 	bl	8006cdc <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	643b      	str	r3, [r7, #64]	@ 0x40
        __asm volatile
 800601e:	f3ef 8211 	mrs	r2, BASEPRI
 8006022:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006026:	f383 8811 	msr	BASEPRI, r3
 800602a:	f3bf 8f6f 	isb	sy
 800602e:	f3bf 8f4f 	dsb	sy
 8006032:	623a      	str	r2, [r7, #32]
 8006034:	61fb      	str	r3, [r7, #28]
        return ulOriginalBASEPRI;
 8006036:	6a3b      	ldr	r3, [r7, #32]

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006038:	63fb      	str	r3, [r7, #60]	@ 0x3c
        {
            if( pulPreviousNotificationValue != NULL )
 800603a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800603c:	2b00      	cmp	r3, #0
 800603e:	d006      	beq.n	800604e <xTaskGenericNotifyFromISR+0x86>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8006040:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006042:	68ba      	ldr	r2, [r7, #8]
 8006044:	3214      	adds	r2, #20
 8006046:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800604a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800604c:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 800604e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	4413      	add	r3, r2
 8006054:	3354      	adds	r3, #84	@ 0x54
 8006056:	781b      	ldrb	r3, [r3, #0]
 8006058:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 800605c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	4413      	add	r3, r2
 8006062:	3354      	adds	r3, #84	@ 0x54
 8006064:	2202      	movs	r2, #2
 8006066:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8006068:	78fb      	ldrb	r3, [r7, #3]
 800606a:	2b04      	cmp	r3, #4
 800606c:	d83b      	bhi.n	80060e6 <xTaskGenericNotifyFromISR+0x11e>
 800606e:	a201      	add	r2, pc, #4	@ (adr r2, 8006074 <xTaskGenericNotifyFromISR+0xac>)
 8006070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006074:	08006107 	.word	0x08006107
 8006078:	08006089 	.word	0x08006089
 800607c:	080060a5 	.word	0x080060a5
 8006080:	080060bd 	.word	0x080060bd
 8006084:	080060cb 	.word	0x080060cb
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8006088:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800608a:	68ba      	ldr	r2, [r7, #8]
 800608c:	3214      	adds	r2, #20
 800608e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	ea42 0103 	orr.w	r1, r2, r3
 8006098:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800609a:	68ba      	ldr	r2, [r7, #8]
 800609c:	3214      	adds	r2, #20
 800609e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80060a2:	e033      	b.n	800610c <xTaskGenericNotifyFromISR+0x144>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80060a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80060a6:	68ba      	ldr	r2, [r7, #8]
 80060a8:	3214      	adds	r2, #20
 80060aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060ae:	1c59      	adds	r1, r3, #1
 80060b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80060b2:	68ba      	ldr	r2, [r7, #8]
 80060b4:	3214      	adds	r2, #20
 80060b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80060ba:	e027      	b.n	800610c <xTaskGenericNotifyFromISR+0x144>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80060bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80060be:	68ba      	ldr	r2, [r7, #8]
 80060c0:	3214      	adds	r2, #20
 80060c2:	6879      	ldr	r1, [r7, #4]
 80060c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80060c8:	e020      	b.n	800610c <xTaskGenericNotifyFromISR+0x144>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80060ca:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80060ce:	2b02      	cmp	r3, #2
 80060d0:	d006      	beq.n	80060e0 <xTaskGenericNotifyFromISR+0x118>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80060d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80060d4:	68ba      	ldr	r2, [r7, #8]
 80060d6:	3214      	adds	r2, #20
 80060d8:	6879      	ldr	r1, [r7, #4]
 80060da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 80060de:	e015      	b.n	800610c <xTaskGenericNotifyFromISR+0x144>
                        xReturn = pdFAIL;
 80060e0:	2300      	movs	r3, #0
 80060e2:	647b      	str	r3, [r7, #68]	@ 0x44
                    break;
 80060e4:	e012      	b.n	800610c <xTaskGenericNotifyFromISR+0x144>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 80060e6:	4b61      	ldr	r3, [pc, #388]	@ (800626c <xTaskGenericNotifyFromISR+0x2a4>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d00d      	beq.n	800610a <xTaskGenericNotifyFromISR+0x142>
        __asm volatile
 80060ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060f2:	f383 8811 	msr	BASEPRI, r3
 80060f6:	f3bf 8f6f 	isb	sy
 80060fa:	f3bf 8f4f 	dsb	sy
 80060fe:	61bb      	str	r3, [r7, #24]
    }
 8006100:	bf00      	nop
 8006102:	bf00      	nop
 8006104:	e7fd      	b.n	8006102 <xTaskGenericNotifyFromISR+0x13a>
                    break;
 8006106:	bf00      	nop
 8006108:	e000      	b.n	800610c <xTaskGenericNotifyFromISR+0x144>
                    break;
 800610a:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800610c:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8006110:	2b01      	cmp	r3, #1
 8006112:	f040 809f 	bne.w	8006254 <xTaskGenericNotifyFromISR+0x28c>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006116:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006118:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800611a:	2b00      	cmp	r3, #0
 800611c:	d00b      	beq.n	8006136 <xTaskGenericNotifyFromISR+0x16e>
        __asm volatile
 800611e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006122:	f383 8811 	msr	BASEPRI, r3
 8006126:	f3bf 8f6f 	isb	sy
 800612a:	f3bf 8f4f 	dsb	sy
 800612e:	617b      	str	r3, [r7, #20]
    }
 8006130:	bf00      	nop
 8006132:	bf00      	nop
 8006134:	e7fd      	b.n	8006132 <xTaskGenericNotifyFromISR+0x16a>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006136:	4b4e      	ldr	r3, [pc, #312]	@ (8006270 <xTaskGenericNotifyFromISR+0x2a8>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d15e      	bne.n	80061fc <xTaskGenericNotifyFromISR+0x234>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800613e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006140:	695b      	ldr	r3, [r3, #20]
 8006142:	633b      	str	r3, [r7, #48]	@ 0x30
 8006144:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006146:	689b      	ldr	r3, [r3, #8]
 8006148:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800614a:	68d2      	ldr	r2, [r2, #12]
 800614c:	609a      	str	r2, [r3, #8]
 800614e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006150:	68db      	ldr	r3, [r3, #12]
 8006152:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006154:	6892      	ldr	r2, [r2, #8]
 8006156:	605a      	str	r2, [r3, #4]
 8006158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800615a:	685a      	ldr	r2, [r3, #4]
 800615c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800615e:	3304      	adds	r3, #4
 8006160:	429a      	cmp	r2, r3
 8006162:	d103      	bne.n	800616c <xTaskGenericNotifyFromISR+0x1a4>
 8006164:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006166:	68da      	ldr	r2, [r3, #12]
 8006168:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800616a:	605a      	str	r2, [r3, #4]
 800616c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800616e:	2200      	movs	r2, #0
 8006170:	615a      	str	r2, [r3, #20]
 8006172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	1e5a      	subs	r2, r3, #1
 8006178:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800617a:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 800617c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800617e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006180:	2201      	movs	r2, #1
 8006182:	409a      	lsls	r2, r3
 8006184:	4b3b      	ldr	r3, [pc, #236]	@ (8006274 <xTaskGenericNotifyFromISR+0x2ac>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4313      	orrs	r3, r2
 800618a:	4a3a      	ldr	r2, [pc, #232]	@ (8006274 <xTaskGenericNotifyFromISR+0x2ac>)
 800618c:	6013      	str	r3, [r2, #0]
 800618e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006190:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006192:	4939      	ldr	r1, [pc, #228]	@ (8006278 <xTaskGenericNotifyFromISR+0x2b0>)
 8006194:	4613      	mov	r3, r2
 8006196:	009b      	lsls	r3, r3, #2
 8006198:	4413      	add	r3, r2
 800619a:	009b      	lsls	r3, r3, #2
 800619c:	440b      	add	r3, r1
 800619e:	3304      	adds	r3, #4
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80061a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80061a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80061a8:	609a      	str	r2, [r3, #8]
 80061aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061ac:	689a      	ldr	r2, [r3, #8]
 80061ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80061b0:	60da      	str	r2, [r3, #12]
 80061b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061b4:	689b      	ldr	r3, [r3, #8]
 80061b6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80061b8:	3204      	adds	r2, #4
 80061ba:	605a      	str	r2, [r3, #4]
 80061bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80061be:	1d1a      	adds	r2, r3, #4
 80061c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061c2:	609a      	str	r2, [r3, #8]
 80061c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80061c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061c8:	4613      	mov	r3, r2
 80061ca:	009b      	lsls	r3, r3, #2
 80061cc:	4413      	add	r3, r2
 80061ce:	009b      	lsls	r3, r3, #2
 80061d0:	4a29      	ldr	r2, [pc, #164]	@ (8006278 <xTaskGenericNotifyFromISR+0x2b0>)
 80061d2:	441a      	add	r2, r3
 80061d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80061d6:	615a      	str	r2, [r3, #20]
 80061d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80061da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061dc:	4926      	ldr	r1, [pc, #152]	@ (8006278 <xTaskGenericNotifyFromISR+0x2b0>)
 80061de:	4613      	mov	r3, r2
 80061e0:	009b      	lsls	r3, r3, #2
 80061e2:	4413      	add	r3, r2
 80061e4:	009b      	lsls	r3, r3, #2
 80061e6:	440b      	add	r3, r1
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	1c59      	adds	r1, r3, #1
 80061ec:	4822      	ldr	r0, [pc, #136]	@ (8006278 <xTaskGenericNotifyFromISR+0x2b0>)
 80061ee:	4613      	mov	r3, r2
 80061f0:	009b      	lsls	r3, r3, #2
 80061f2:	4413      	add	r3, r2
 80061f4:	009b      	lsls	r3, r3, #2
 80061f6:	4403      	add	r3, r0
 80061f8:	6019      	str	r1, [r3, #0]
 80061fa:	e01b      	b.n	8006234 <xTaskGenericNotifyFromISR+0x26c>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80061fc:	4b1f      	ldr	r3, [pc, #124]	@ (800627c <xTaskGenericNotifyFromISR+0x2b4>)
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	637b      	str	r3, [r7, #52]	@ 0x34
 8006202:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006204:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006206:	61da      	str	r2, [r3, #28]
 8006208:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800620a:	689a      	ldr	r2, [r3, #8]
 800620c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800620e:	621a      	str	r2, [r3, #32]
 8006210:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006216:	3218      	adds	r2, #24
 8006218:	605a      	str	r2, [r3, #4]
 800621a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800621c:	f103 0218 	add.w	r2, r3, #24
 8006220:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006222:	609a      	str	r2, [r3, #8]
 8006224:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006226:	4a15      	ldr	r2, [pc, #84]	@ (800627c <xTaskGenericNotifyFromISR+0x2b4>)
 8006228:	629a      	str	r2, [r3, #40]	@ 0x28
 800622a:	4b14      	ldr	r3, [pc, #80]	@ (800627c <xTaskGenericNotifyFromISR+0x2b4>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	3301      	adds	r3, #1
 8006230:	4a12      	ldr	r2, [pc, #72]	@ (800627c <xTaskGenericNotifyFromISR+0x2b4>)
 8006232:	6013      	str	r3, [r2, #0]
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006234:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006236:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006238:	4b11      	ldr	r3, [pc, #68]	@ (8006280 <xTaskGenericNotifyFromISR+0x2b8>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800623e:	429a      	cmp	r2, r3
 8006240:	d908      	bls.n	8006254 <xTaskGenericNotifyFromISR+0x28c>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 8006242:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006244:	2b00      	cmp	r3, #0
 8006246:	d002      	beq.n	800624e <xTaskGenericNotifyFromISR+0x286>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8006248:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800624a:	2201      	movs	r2, #1
 800624c:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 800624e:	4b0d      	ldr	r3, [pc, #52]	@ (8006284 <xTaskGenericNotifyFromISR+0x2bc>)
 8006250:	2201      	movs	r2, #1
 8006252:	601a      	str	r2, [r3, #0]
 8006254:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006256:	613b      	str	r3, [r7, #16]
        __asm volatile
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	f383 8811 	msr	BASEPRI, r3
    }
 800625e:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 8006260:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
    }
 8006262:	4618      	mov	r0, r3
 8006264:	3748      	adds	r7, #72	@ 0x48
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}
 800626a:	bf00      	nop
 800626c:	20000220 	.word	0x20000220
 8006270:	20000244 	.word	0x20000244
 8006274:	20000224 	.word	0x20000224
 8006278:	20000148 	.word	0x20000148
 800627c:	200001dc 	.word	0x200001dc
 8006280:	20000144 	.word	0x20000144
 8006284:	20000230 	.word	0x20000230

08006288 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b086      	sub	sp, #24
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
 8006290:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8006292:	4b36      	ldr	r3, [pc, #216]	@ (800636c <prvAddCurrentTaskToDelayedList+0xe4>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006298:	4b35      	ldr	r3, [pc, #212]	@ (8006370 <prvAddCurrentTaskToDelayedList+0xe8>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	3304      	adds	r3, #4
 800629e:	4618      	mov	r0, r3
 80062a0:	f7fd fe92 	bl	8003fc8 <uxListRemove>
 80062a4:	4603      	mov	r3, r0
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d10b      	bne.n	80062c2 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80062aa:	4b31      	ldr	r3, [pc, #196]	@ (8006370 <prvAddCurrentTaskToDelayedList+0xe8>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062b0:	2201      	movs	r2, #1
 80062b2:	fa02 f303 	lsl.w	r3, r2, r3
 80062b6:	43da      	mvns	r2, r3
 80062b8:	4b2e      	ldr	r3, [pc, #184]	@ (8006374 <prvAddCurrentTaskToDelayedList+0xec>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4013      	ands	r3, r2
 80062be:	4a2d      	ldr	r2, [pc, #180]	@ (8006374 <prvAddCurrentTaskToDelayedList+0xec>)
 80062c0:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062c8:	d124      	bne.n	8006314 <prvAddCurrentTaskToDelayedList+0x8c>
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d021      	beq.n	8006314 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80062d0:	4b29      	ldr	r3, [pc, #164]	@ (8006378 <prvAddCurrentTaskToDelayedList+0xf0>)
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	613b      	str	r3, [r7, #16]
 80062d6:	4b26      	ldr	r3, [pc, #152]	@ (8006370 <prvAddCurrentTaskToDelayedList+0xe8>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	693a      	ldr	r2, [r7, #16]
 80062dc:	609a      	str	r2, [r3, #8]
 80062de:	4b24      	ldr	r3, [pc, #144]	@ (8006370 <prvAddCurrentTaskToDelayedList+0xe8>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	693a      	ldr	r2, [r7, #16]
 80062e4:	6892      	ldr	r2, [r2, #8]
 80062e6:	60da      	str	r2, [r3, #12]
 80062e8:	4b21      	ldr	r3, [pc, #132]	@ (8006370 <prvAddCurrentTaskToDelayedList+0xe8>)
 80062ea:	681a      	ldr	r2, [r3, #0]
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	689b      	ldr	r3, [r3, #8]
 80062f0:	3204      	adds	r2, #4
 80062f2:	605a      	str	r2, [r3, #4]
 80062f4:	4b1e      	ldr	r3, [pc, #120]	@ (8006370 <prvAddCurrentTaskToDelayedList+0xe8>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	1d1a      	adds	r2, r3, #4
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	609a      	str	r2, [r3, #8]
 80062fe:	4b1c      	ldr	r3, [pc, #112]	@ (8006370 <prvAddCurrentTaskToDelayedList+0xe8>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a1d      	ldr	r2, [pc, #116]	@ (8006378 <prvAddCurrentTaskToDelayedList+0xf0>)
 8006304:	615a      	str	r2, [r3, #20]
 8006306:	4b1c      	ldr	r3, [pc, #112]	@ (8006378 <prvAddCurrentTaskToDelayedList+0xf0>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	3301      	adds	r3, #1
 800630c:	4a1a      	ldr	r2, [pc, #104]	@ (8006378 <prvAddCurrentTaskToDelayedList+0xf0>)
 800630e:	6013      	str	r3, [r2, #0]
 8006310:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8006312:	e026      	b.n	8006362 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8006314:	697a      	ldr	r2, [r7, #20]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	4413      	add	r3, r2
 800631a:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800631c:	4b14      	ldr	r3, [pc, #80]	@ (8006370 <prvAddCurrentTaskToDelayedList+0xe8>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	68fa      	ldr	r2, [r7, #12]
 8006322:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8006324:	68fa      	ldr	r2, [r7, #12]
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	429a      	cmp	r2, r3
 800632a:	d209      	bcs.n	8006340 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800632c:	4b13      	ldr	r3, [pc, #76]	@ (800637c <prvAddCurrentTaskToDelayedList+0xf4>)
 800632e:	681a      	ldr	r2, [r3, #0]
 8006330:	4b0f      	ldr	r3, [pc, #60]	@ (8006370 <prvAddCurrentTaskToDelayedList+0xe8>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	3304      	adds	r3, #4
 8006336:	4619      	mov	r1, r3
 8006338:	4610      	mov	r0, r2
 800633a:	f7fd fe0c 	bl	8003f56 <vListInsert>
}
 800633e:	e010      	b.n	8006362 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006340:	4b0f      	ldr	r3, [pc, #60]	@ (8006380 <prvAddCurrentTaskToDelayedList+0xf8>)
 8006342:	681a      	ldr	r2, [r3, #0]
 8006344:	4b0a      	ldr	r3, [pc, #40]	@ (8006370 <prvAddCurrentTaskToDelayedList+0xe8>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	3304      	adds	r3, #4
 800634a:	4619      	mov	r1, r3
 800634c:	4610      	mov	r0, r2
 800634e:	f7fd fe02 	bl	8003f56 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8006352:	4b0c      	ldr	r3, [pc, #48]	@ (8006384 <prvAddCurrentTaskToDelayedList+0xfc>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	68fa      	ldr	r2, [r7, #12]
 8006358:	429a      	cmp	r2, r3
 800635a:	d202      	bcs.n	8006362 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 800635c:	4a09      	ldr	r2, [pc, #36]	@ (8006384 <prvAddCurrentTaskToDelayedList+0xfc>)
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	6013      	str	r3, [r2, #0]
}
 8006362:	bf00      	nop
 8006364:	3718      	adds	r7, #24
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}
 800636a:	bf00      	nop
 800636c:	20000220 	.word	0x20000220
 8006370:	20000144 	.word	0x20000144
 8006374:	20000224 	.word	0x20000224
 8006378:	20000208 	.word	0x20000208
 800637c:	200001d8 	.word	0x200001d8
 8006380:	200001d4 	.word	0x200001d4
 8006384:	2000023c 	.word	0x2000023c

08006388 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8006388:	b580      	push	{r7, lr}
 800638a:	b084      	sub	sp, #16
 800638c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800638e:	2300      	movs	r3, #0
 8006390:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8006392:	f000 fa4f 	bl	8006834 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8006396:	4b12      	ldr	r3, [pc, #72]	@ (80063e0 <xTimerCreateTimerTask+0x58>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d00b      	beq.n	80063b6 <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 800639e:	4b11      	ldr	r3, [pc, #68]	@ (80063e4 <xTimerCreateTimerTask+0x5c>)
 80063a0:	9301      	str	r3, [sp, #4]
 80063a2:	2302      	movs	r3, #2
 80063a4:	9300      	str	r3, [sp, #0]
 80063a6:	2300      	movs	r3, #0
 80063a8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80063ac:	490e      	ldr	r1, [pc, #56]	@ (80063e8 <xTimerCreateTimerTask+0x60>)
 80063ae:	480f      	ldr	r0, [pc, #60]	@ (80063ec <xTimerCreateTimerTask+0x64>)
 80063b0:	f7fe fc46 	bl	8004c40 <xTaskCreate>
 80063b4:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d10b      	bne.n	80063d4 <xTimerCreateTimerTask+0x4c>
        __asm volatile
 80063bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063c0:	f383 8811 	msr	BASEPRI, r3
 80063c4:	f3bf 8f6f 	isb	sy
 80063c8:	f3bf 8f4f 	dsb	sy
 80063cc:	603b      	str	r3, [r7, #0]
    }
 80063ce:	bf00      	nop
 80063d0:	bf00      	nop
 80063d2:	e7fd      	b.n	80063d0 <xTimerCreateTimerTask+0x48>
        return xReturn;
 80063d4:	687b      	ldr	r3, [r7, #4]
    }
 80063d6:	4618      	mov	r0, r3
 80063d8:	3708      	adds	r7, #8
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}
 80063de:	bf00      	nop
 80063e0:	20000278 	.word	0x20000278
 80063e4:	2000027c 	.word	0x2000027c
 80063e8:	080072d0 	.word	0x080072d0
 80063ec:	08006495 	.word	0x08006495

080063f0 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b084      	sub	sp, #16
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	60f8      	str	r0, [r7, #12]
 80063f8:	60b9      	str	r1, [r7, #8]
 80063fa:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80063fc:	e008      	b.n	8006410 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	699b      	ldr	r3, [r3, #24]
 8006402:	68ba      	ldr	r2, [r7, #8]
 8006404:	4413      	add	r3, r2
 8006406:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	6a1b      	ldr	r3, [r3, #32]
 800640c:	68f8      	ldr	r0, [r7, #12]
 800640e:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	699a      	ldr	r2, [r3, #24]
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	18d1      	adds	r1, r2, r3
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	687a      	ldr	r2, [r7, #4]
 800641c:	68f8      	ldr	r0, [r7, #12]
 800641e:	f000 f8df 	bl	80065e0 <prvInsertTimerInActiveList>
 8006422:	4603      	mov	r3, r0
 8006424:	2b00      	cmp	r3, #0
 8006426:	d1ea      	bne.n	80063fe <prvReloadTimer+0xe>
        }
    }
 8006428:	bf00      	nop
 800642a:	bf00      	nop
 800642c:	3710      	adds	r7, #16
 800642e:	46bd      	mov	sp, r7
 8006430:	bd80      	pop	{r7, pc}
	...

08006434 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8006434:	b580      	push	{r7, lr}
 8006436:	b084      	sub	sp, #16
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
 800643c:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800643e:	4b14      	ldr	r3, [pc, #80]	@ (8006490 <prvProcessExpiredTimer+0x5c>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	68db      	ldr	r3, [r3, #12]
 8006444:	68db      	ldr	r3, [r3, #12]
 8006446:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	3304      	adds	r3, #4
 800644c:	4618      	mov	r0, r3
 800644e:	f7fd fdbb 	bl	8003fc8 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006458:	f003 0304 	and.w	r3, r3, #4
 800645c:	2b00      	cmp	r3, #0
 800645e:	d005      	beq.n	800646c <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8006460:	683a      	ldr	r2, [r7, #0]
 8006462:	6879      	ldr	r1, [r7, #4]
 8006464:	68f8      	ldr	r0, [r7, #12]
 8006466:	f7ff ffc3 	bl	80063f0 <prvReloadTimer>
 800646a:	e008      	b.n	800647e <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006472:	f023 0301 	bic.w	r3, r3, #1
 8006476:	b2da      	uxtb	r2, r3
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	6a1b      	ldr	r3, [r3, #32]
 8006482:	68f8      	ldr	r0, [r7, #12]
 8006484:	4798      	blx	r3
    }
 8006486:	bf00      	nop
 8006488:	3710      	adds	r7, #16
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}
 800648e:	bf00      	nop
 8006490:	20000270 	.word	0x20000270

08006494 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8006494:	b580      	push	{r7, lr}
 8006496:	b084      	sub	sp, #16
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800649c:	f107 0308 	add.w	r3, r7, #8
 80064a0:	4618      	mov	r0, r3
 80064a2:	f000 f859 	bl	8006558 <prvGetNextExpireTime>
 80064a6:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	4619      	mov	r1, r3
 80064ac:	68f8      	ldr	r0, [r7, #12]
 80064ae:	f000 f805 	bl	80064bc <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80064b2:	f000 f8d7 	bl	8006664 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80064b6:	bf00      	nop
 80064b8:	e7f0      	b.n	800649c <prvTimerTask+0x8>
	...

080064bc <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80064bc:	b580      	push	{r7, lr}
 80064be:	b084      	sub	sp, #16
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
 80064c4:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80064c6:	f7fe fdfb 	bl	80050c0 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80064ca:	f107 0308 	add.w	r3, r7, #8
 80064ce:	4618      	mov	r0, r3
 80064d0:	f000 f866 	bl	80065a0 <prvSampleTimeNow>
 80064d4:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d130      	bne.n	800653e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d10a      	bne.n	80064f8 <prvProcessTimerOrBlockTask+0x3c>
 80064e2:	687a      	ldr	r2, [r7, #4]
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	429a      	cmp	r2, r3
 80064e8:	d806      	bhi.n	80064f8 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80064ea:	f7fe fdf7 	bl	80050dc <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80064ee:	68f9      	ldr	r1, [r7, #12]
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f7ff ff9f 	bl	8006434 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80064f6:	e024      	b.n	8006542 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d008      	beq.n	8006510 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80064fe:	4b13      	ldr	r3, [pc, #76]	@ (800654c <prvProcessTimerOrBlockTask+0x90>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d101      	bne.n	800650c <prvProcessTimerOrBlockTask+0x50>
 8006508:	2301      	movs	r3, #1
 800650a:	e000      	b.n	800650e <prvProcessTimerOrBlockTask+0x52>
 800650c:	2300      	movs	r3, #0
 800650e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006510:	4b0f      	ldr	r3, [pc, #60]	@ (8006550 <prvProcessTimerOrBlockTask+0x94>)
 8006512:	6818      	ldr	r0, [r3, #0]
 8006514:	687a      	ldr	r2, [r7, #4]
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	1ad3      	subs	r3, r2, r3
 800651a:	683a      	ldr	r2, [r7, #0]
 800651c:	4619      	mov	r1, r3
 800651e:	f7fe fb5b 	bl	8004bd8 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8006522:	f7fe fddb 	bl	80050dc <xTaskResumeAll>
 8006526:	4603      	mov	r3, r0
 8006528:	2b00      	cmp	r3, #0
 800652a:	d10a      	bne.n	8006542 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 800652c:	4b09      	ldr	r3, [pc, #36]	@ (8006554 <prvProcessTimerOrBlockTask+0x98>)
 800652e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006532:	601a      	str	r2, [r3, #0]
 8006534:	f3bf 8f4f 	dsb	sy
 8006538:	f3bf 8f6f 	isb	sy
    }
 800653c:	e001      	b.n	8006542 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800653e:	f7fe fdcd 	bl	80050dc <xTaskResumeAll>
    }
 8006542:	bf00      	nop
 8006544:	3710      	adds	r7, #16
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}
 800654a:	bf00      	nop
 800654c:	20000274 	.word	0x20000274
 8006550:	20000278 	.word	0x20000278
 8006554:	e000ed04 	.word	0xe000ed04

08006558 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8006558:	b480      	push	{r7}
 800655a:	b085      	sub	sp, #20
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006560:	4b0e      	ldr	r3, [pc, #56]	@ (800659c <prvGetNextExpireTime+0x44>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d101      	bne.n	800656e <prvGetNextExpireTime+0x16>
 800656a:	2201      	movs	r2, #1
 800656c:	e000      	b.n	8006570 <prvGetNextExpireTime+0x18>
 800656e:	2200      	movs	r2, #0
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d105      	bne.n	8006588 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800657c:	4b07      	ldr	r3, [pc, #28]	@ (800659c <prvGetNextExpireTime+0x44>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	68db      	ldr	r3, [r3, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	60fb      	str	r3, [r7, #12]
 8006586:	e001      	b.n	800658c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8006588:	2300      	movs	r3, #0
 800658a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800658c:	68fb      	ldr	r3, [r7, #12]
    }
 800658e:	4618      	mov	r0, r3
 8006590:	3714      	adds	r7, #20
 8006592:	46bd      	mov	sp, r7
 8006594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006598:	4770      	bx	lr
 800659a:	bf00      	nop
 800659c:	20000270 	.word	0x20000270

080065a0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b084      	sub	sp, #16
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80065a8:	f7fe fe94 	bl	80052d4 <xTaskGetTickCount>
 80065ac:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80065ae:	4b0b      	ldr	r3, [pc, #44]	@ (80065dc <prvSampleTimeNow+0x3c>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	68fa      	ldr	r2, [r7, #12]
 80065b4:	429a      	cmp	r2, r3
 80065b6:	d205      	bcs.n	80065c4 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80065b8:	f000 f916 	bl	80067e8 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2201      	movs	r2, #1
 80065c0:	601a      	str	r2, [r3, #0]
 80065c2:	e002      	b.n	80065ca <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2200      	movs	r2, #0
 80065c8:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80065ca:	4a04      	ldr	r2, [pc, #16]	@ (80065dc <prvSampleTimeNow+0x3c>)
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80065d0:	68fb      	ldr	r3, [r7, #12]
    }
 80065d2:	4618      	mov	r0, r3
 80065d4:	3710      	adds	r7, #16
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}
 80065da:	bf00      	nop
 80065dc:	20000280 	.word	0x20000280

080065e0 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b086      	sub	sp, #24
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	60f8      	str	r0, [r7, #12]
 80065e8:	60b9      	str	r1, [r7, #8]
 80065ea:	607a      	str	r2, [r7, #4]
 80065ec:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80065ee:	2300      	movs	r3, #0
 80065f0:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	68ba      	ldr	r2, [r7, #8]
 80065f6:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	68fa      	ldr	r2, [r7, #12]
 80065fc:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80065fe:	68ba      	ldr	r2, [r7, #8]
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	429a      	cmp	r2, r3
 8006604:	d812      	bhi.n	800662c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006606:	687a      	ldr	r2, [r7, #4]
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	1ad2      	subs	r2, r2, r3
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	699b      	ldr	r3, [r3, #24]
 8006610:	429a      	cmp	r2, r3
 8006612:	d302      	bcc.n	800661a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8006614:	2301      	movs	r3, #1
 8006616:	617b      	str	r3, [r7, #20]
 8006618:	e01b      	b.n	8006652 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800661a:	4b10      	ldr	r3, [pc, #64]	@ (800665c <prvInsertTimerInActiveList+0x7c>)
 800661c:	681a      	ldr	r2, [r3, #0]
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	3304      	adds	r3, #4
 8006622:	4619      	mov	r1, r3
 8006624:	4610      	mov	r0, r2
 8006626:	f7fd fc96 	bl	8003f56 <vListInsert>
 800662a:	e012      	b.n	8006652 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800662c:	687a      	ldr	r2, [r7, #4]
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	429a      	cmp	r2, r3
 8006632:	d206      	bcs.n	8006642 <prvInsertTimerInActiveList+0x62>
 8006634:	68ba      	ldr	r2, [r7, #8]
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	429a      	cmp	r2, r3
 800663a:	d302      	bcc.n	8006642 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800663c:	2301      	movs	r3, #1
 800663e:	617b      	str	r3, [r7, #20]
 8006640:	e007      	b.n	8006652 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006642:	4b07      	ldr	r3, [pc, #28]	@ (8006660 <prvInsertTimerInActiveList+0x80>)
 8006644:	681a      	ldr	r2, [r3, #0]
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	3304      	adds	r3, #4
 800664a:	4619      	mov	r1, r3
 800664c:	4610      	mov	r0, r2
 800664e:	f7fd fc82 	bl	8003f56 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8006652:	697b      	ldr	r3, [r7, #20]
    }
 8006654:	4618      	mov	r0, r3
 8006656:	3718      	adds	r7, #24
 8006658:	46bd      	mov	sp, r7
 800665a:	bd80      	pop	{r7, pc}
 800665c:	20000274 	.word	0x20000274
 8006660:	20000270 	.word	0x20000270

08006664 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8006664:	b580      	push	{r7, lr}
 8006666:	b088      	sub	sp, #32
 8006668:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800666a:	e0a9      	b.n	80067c0 <prvProcessReceivedCommands+0x15c>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	2b00      	cmp	r3, #0
 8006670:	f2c0 80a6 	blt.w	80067c0 <prvProcessReceivedCommands+0x15c>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006678:	69fb      	ldr	r3, [r7, #28]
 800667a:	695b      	ldr	r3, [r3, #20]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d004      	beq.n	800668a <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006680:	69fb      	ldr	r3, [r7, #28]
 8006682:	3304      	adds	r3, #4
 8006684:	4618      	mov	r0, r3
 8006686:	f7fd fc9f 	bl	8003fc8 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800668a:	1d3b      	adds	r3, r7, #4
 800668c:	4618      	mov	r0, r3
 800668e:	f7ff ff87 	bl	80065a0 <prvSampleTimeNow>
 8006692:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	3b01      	subs	r3, #1
 8006698:	2b08      	cmp	r3, #8
 800669a:	f200 808e 	bhi.w	80067ba <prvProcessReceivedCommands+0x156>
 800669e:	a201      	add	r2, pc, #4	@ (adr r2, 80066a4 <prvProcessReceivedCommands+0x40>)
 80066a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066a4:	080066c9 	.word	0x080066c9
 80066a8:	080066c9 	.word	0x080066c9
 80066ac:	08006731 	.word	0x08006731
 80066b0:	08006745 	.word	0x08006745
 80066b4:	08006791 	.word	0x08006791
 80066b8:	080066c9 	.word	0x080066c9
 80066bc:	080066c9 	.word	0x080066c9
 80066c0:	08006731 	.word	0x08006731
 80066c4:	08006745 	.word	0x08006745
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80066c8:	69fb      	ldr	r3, [r7, #28]
 80066ca:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80066ce:	f043 0301 	orr.w	r3, r3, #1
 80066d2:	b2da      	uxtb	r2, r3
 80066d4:	69fb      	ldr	r3, [r7, #28]
 80066d6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80066da:	68fa      	ldr	r2, [r7, #12]
 80066dc:	69fb      	ldr	r3, [r7, #28]
 80066de:	699b      	ldr	r3, [r3, #24]
 80066e0:	18d1      	adds	r1, r2, r3
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	69ba      	ldr	r2, [r7, #24]
 80066e6:	69f8      	ldr	r0, [r7, #28]
 80066e8:	f7ff ff7a 	bl	80065e0 <prvInsertTimerInActiveList>
 80066ec:	4603      	mov	r3, r0
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d065      	beq.n	80067be <prvProcessReceivedCommands+0x15a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80066f2:	69fb      	ldr	r3, [r7, #28]
 80066f4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80066f8:	f003 0304 	and.w	r3, r3, #4
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d009      	beq.n	8006714 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8006700:	68fa      	ldr	r2, [r7, #12]
 8006702:	69fb      	ldr	r3, [r7, #28]
 8006704:	699b      	ldr	r3, [r3, #24]
 8006706:	4413      	add	r3, r2
 8006708:	69ba      	ldr	r2, [r7, #24]
 800670a:	4619      	mov	r1, r3
 800670c:	69f8      	ldr	r0, [r7, #28]
 800670e:	f7ff fe6f 	bl	80063f0 <prvReloadTimer>
 8006712:	e008      	b.n	8006726 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8006714:	69fb      	ldr	r3, [r7, #28]
 8006716:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800671a:	f023 0301 	bic.w	r3, r3, #1
 800671e:	b2da      	uxtb	r2, r3
 8006720:	69fb      	ldr	r3, [r7, #28]
 8006722:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006726:	69fb      	ldr	r3, [r7, #28]
 8006728:	6a1b      	ldr	r3, [r3, #32]
 800672a:	69f8      	ldr	r0, [r7, #28]
 800672c:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800672e:	e046      	b.n	80067be <prvProcessReceivedCommands+0x15a>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8006730:	69fb      	ldr	r3, [r7, #28]
 8006732:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006736:	f023 0301 	bic.w	r3, r3, #1
 800673a:	b2da      	uxtb	r2, r3
 800673c:	69fb      	ldr	r3, [r7, #28]
 800673e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8006742:	e03d      	b.n	80067c0 <prvProcessReceivedCommands+0x15c>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006744:	69fb      	ldr	r3, [r7, #28]
 8006746:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800674a:	f043 0301 	orr.w	r3, r3, #1
 800674e:	b2da      	uxtb	r2, r3
 8006750:	69fb      	ldr	r3, [r7, #28]
 8006752:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006756:	68fa      	ldr	r2, [r7, #12]
 8006758:	69fb      	ldr	r3, [r7, #28]
 800675a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800675c:	69fb      	ldr	r3, [r7, #28]
 800675e:	699b      	ldr	r3, [r3, #24]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d10b      	bne.n	800677c <prvProcessReceivedCommands+0x118>
        __asm volatile
 8006764:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006768:	f383 8811 	msr	BASEPRI, r3
 800676c:	f3bf 8f6f 	isb	sy
 8006770:	f3bf 8f4f 	dsb	sy
 8006774:	617b      	str	r3, [r7, #20]
    }
 8006776:	bf00      	nop
 8006778:	bf00      	nop
 800677a:	e7fd      	b.n	8006778 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800677c:	69fb      	ldr	r3, [r7, #28]
 800677e:	699a      	ldr	r2, [r3, #24]
 8006780:	69bb      	ldr	r3, [r7, #24]
 8006782:	18d1      	adds	r1, r2, r3
 8006784:	69bb      	ldr	r3, [r7, #24]
 8006786:	69ba      	ldr	r2, [r7, #24]
 8006788:	69f8      	ldr	r0, [r7, #28]
 800678a:	f7ff ff29 	bl	80065e0 <prvInsertTimerInActiveList>
                        break;
 800678e:	e017      	b.n	80067c0 <prvProcessReceivedCommands+0x15c>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006790:	69fb      	ldr	r3, [r7, #28]
 8006792:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006796:	f003 0302 	and.w	r3, r3, #2
 800679a:	2b00      	cmp	r3, #0
 800679c:	d103      	bne.n	80067a6 <prvProcessReceivedCommands+0x142>
                            {
                                vPortFree( pxTimer );
 800679e:	69f8      	ldr	r0, [r7, #28]
 80067a0:	f000 fb9a 	bl	8006ed8 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80067a4:	e00c      	b.n	80067c0 <prvProcessReceivedCommands+0x15c>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80067a6:	69fb      	ldr	r3, [r7, #28]
 80067a8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80067ac:	f023 0301 	bic.w	r3, r3, #1
 80067b0:	b2da      	uxtb	r2, r3
 80067b2:	69fb      	ldr	r3, [r7, #28]
 80067b4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 80067b8:	e002      	b.n	80067c0 <prvProcessReceivedCommands+0x15c>

                    default:
                        /* Don't expect to get here. */
                        break;
 80067ba:	bf00      	nop
 80067bc:	e000      	b.n	80067c0 <prvProcessReceivedCommands+0x15c>
                        break;
 80067be:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80067c0:	4b08      	ldr	r3, [pc, #32]	@ (80067e4 <prvProcessReceivedCommands+0x180>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f107 0108 	add.w	r1, r7, #8
 80067c8:	2200      	movs	r2, #0
 80067ca:	4618      	mov	r0, r3
 80067cc:	f7fd fee2 	bl	8004594 <xQueueReceive>
 80067d0:	4603      	mov	r3, r0
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	f47f af4a 	bne.w	800666c <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 80067d8:	bf00      	nop
 80067da:	bf00      	nop
 80067dc:	3720      	adds	r7, #32
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}
 80067e2:	bf00      	nop
 80067e4:	20000278 	.word	0x20000278

080067e8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b082      	sub	sp, #8
 80067ec:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80067ee:	e009      	b.n	8006804 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80067f0:	4b0e      	ldr	r3, [pc, #56]	@ (800682c <prvSwitchTimerLists+0x44>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	68db      	ldr	r3, [r3, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 80067fa:	f04f 31ff 	mov.w	r1, #4294967295
 80067fe:	6838      	ldr	r0, [r7, #0]
 8006800:	f7ff fe18 	bl	8006434 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006804:	4b09      	ldr	r3, [pc, #36]	@ (800682c <prvSwitchTimerLists+0x44>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d1f0      	bne.n	80067f0 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 800680e:	4b07      	ldr	r3, [pc, #28]	@ (800682c <prvSwitchTimerLists+0x44>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8006814:	4b06      	ldr	r3, [pc, #24]	@ (8006830 <prvSwitchTimerLists+0x48>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4a04      	ldr	r2, [pc, #16]	@ (800682c <prvSwitchTimerLists+0x44>)
 800681a:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800681c:	4a04      	ldr	r2, [pc, #16]	@ (8006830 <prvSwitchTimerLists+0x48>)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6013      	str	r3, [r2, #0]
    }
 8006822:	bf00      	nop
 8006824:	3708      	adds	r7, #8
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}
 800682a:	bf00      	nop
 800682c:	20000270 	.word	0x20000270
 8006830:	20000274 	.word	0x20000274

08006834 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8006834:	b580      	push	{r7, lr}
 8006836:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8006838:	f000 f968 	bl	8006b0c <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800683c:	4b12      	ldr	r3, [pc, #72]	@ (8006888 <prvCheckForValidListAndQueue+0x54>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d11d      	bne.n	8006880 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8006844:	4811      	ldr	r0, [pc, #68]	@ (800688c <prvCheckForValidListAndQueue+0x58>)
 8006846:	f7fd fb59 	bl	8003efc <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800684a:	4811      	ldr	r0, [pc, #68]	@ (8006890 <prvCheckForValidListAndQueue+0x5c>)
 800684c:	f7fd fb56 	bl	8003efc <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8006850:	4b10      	ldr	r3, [pc, #64]	@ (8006894 <prvCheckForValidListAndQueue+0x60>)
 8006852:	4a0e      	ldr	r2, [pc, #56]	@ (800688c <prvCheckForValidListAndQueue+0x58>)
 8006854:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8006856:	4b10      	ldr	r3, [pc, #64]	@ (8006898 <prvCheckForValidListAndQueue+0x64>)
 8006858:	4a0d      	ldr	r2, [pc, #52]	@ (8006890 <prvCheckForValidListAndQueue+0x5c>)
 800685a:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800685c:	2200      	movs	r2, #0
 800685e:	210c      	movs	r1, #12
 8006860:	200a      	movs	r0, #10
 8006862:	f7fd fc6d 	bl	8004140 <xQueueGenericCreate>
 8006866:	4603      	mov	r3, r0
 8006868:	4a07      	ldr	r2, [pc, #28]	@ (8006888 <prvCheckForValidListAndQueue+0x54>)
 800686a:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 800686c:	4b06      	ldr	r3, [pc, #24]	@ (8006888 <prvCheckForValidListAndQueue+0x54>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d005      	beq.n	8006880 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006874:	4b04      	ldr	r3, [pc, #16]	@ (8006888 <prvCheckForValidListAndQueue+0x54>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4908      	ldr	r1, [pc, #32]	@ (800689c <prvCheckForValidListAndQueue+0x68>)
 800687a:	4618      	mov	r0, r3
 800687c:	f7fe f95c 	bl	8004b38 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8006880:	f000 f976 	bl	8006b70 <vPortExitCritical>
    }
 8006884:	bf00      	nop
 8006886:	bd80      	pop	{r7, pc}
 8006888:	20000278 	.word	0x20000278
 800688c:	20000248 	.word	0x20000248
 8006890:	2000025c 	.word	0x2000025c
 8006894:	20000270 	.word	0x20000270
 8006898:	20000274 	.word	0x20000274
 800689c:	080072d8 	.word	0x080072d8

080068a0 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80068a0:	b480      	push	{r7}
 80068a2:	b085      	sub	sp, #20
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	60f8      	str	r0, [r7, #12]
 80068a8:	60b9      	str	r1, [r7, #8]
 80068aa:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	3b04      	subs	r3, #4
 80068b0:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80068b8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	3b04      	subs	r3, #4
 80068be:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	f023 0201 	bic.w	r2, r3, #1
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	3b04      	subs	r3, #4
 80068ce:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80068d0:	4a0c      	ldr	r2, [pc, #48]	@ (8006904 <pxPortInitialiseStack+0x64>)
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	3b14      	subs	r3, #20
 80068da:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80068dc:	687a      	ldr	r2, [r7, #4]
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	3b04      	subs	r3, #4
 80068e6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	f06f 0202 	mvn.w	r2, #2
 80068ee:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	3b20      	subs	r3, #32
 80068f4:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80068f6:	68fb      	ldr	r3, [r7, #12]
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	3714      	adds	r7, #20
 80068fc:	46bd      	mov	sp, r7
 80068fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006902:	4770      	bx	lr
 8006904:	08006909 	.word	0x08006909

08006908 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006908:	b480      	push	{r7}
 800690a:	b085      	sub	sp, #20
 800690c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800690e:	2300      	movs	r3, #0
 8006910:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8006912:	4b13      	ldr	r3, [pc, #76]	@ (8006960 <prvTaskExitError+0x58>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f1b3 3fff 	cmp.w	r3, #4294967295
 800691a:	d00b      	beq.n	8006934 <prvTaskExitError+0x2c>
        __asm volatile
 800691c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006920:	f383 8811 	msr	BASEPRI, r3
 8006924:	f3bf 8f6f 	isb	sy
 8006928:	f3bf 8f4f 	dsb	sy
 800692c:	60fb      	str	r3, [r7, #12]
    }
 800692e:	bf00      	nop
 8006930:	bf00      	nop
 8006932:	e7fd      	b.n	8006930 <prvTaskExitError+0x28>
        __asm volatile
 8006934:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006938:	f383 8811 	msr	BASEPRI, r3
 800693c:	f3bf 8f6f 	isb	sy
 8006940:	f3bf 8f4f 	dsb	sy
 8006944:	60bb      	str	r3, [r7, #8]
    }
 8006946:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8006948:	bf00      	nop
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d0fc      	beq.n	800694a <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8006950:	bf00      	nop
 8006952:	bf00      	nop
 8006954:	3714      	adds	r7, #20
 8006956:	46bd      	mov	sp, r7
 8006958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695c:	4770      	bx	lr
 800695e:	bf00      	nop
 8006960:	20000010 	.word	0x20000010
	...

08006970 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8006970:	4b07      	ldr	r3, [pc, #28]	@ (8006990 <pxCurrentTCBConst2>)
 8006972:	6819      	ldr	r1, [r3, #0]
 8006974:	6808      	ldr	r0, [r1, #0]
 8006976:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800697a:	f380 8809 	msr	PSP, r0
 800697e:	f3bf 8f6f 	isb	sy
 8006982:	f04f 0000 	mov.w	r0, #0
 8006986:	f380 8811 	msr	BASEPRI, r0
 800698a:	4770      	bx	lr
 800698c:	f3af 8000 	nop.w

08006990 <pxCurrentTCBConst2>:
 8006990:	20000144 	.word	0x20000144
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8006994:	bf00      	nop
 8006996:	bf00      	nop

08006998 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8006998:	4808      	ldr	r0, [pc, #32]	@ (80069bc <prvPortStartFirstTask+0x24>)
 800699a:	6800      	ldr	r0, [r0, #0]
 800699c:	6800      	ldr	r0, [r0, #0]
 800699e:	f380 8808 	msr	MSP, r0
 80069a2:	f04f 0000 	mov.w	r0, #0
 80069a6:	f380 8814 	msr	CONTROL, r0
 80069aa:	b662      	cpsie	i
 80069ac:	b661      	cpsie	f
 80069ae:	f3bf 8f4f 	dsb	sy
 80069b2:	f3bf 8f6f 	isb	sy
 80069b6:	df00      	svc	0
 80069b8:	bf00      	nop
 80069ba:	0000      	.short	0x0000
 80069bc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80069c0:	bf00      	nop
 80069c2:	bf00      	nop

080069c4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b086      	sub	sp, #24
 80069c8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80069ca:	4b47      	ldr	r3, [pc, #284]	@ (8006ae8 <xPortStartScheduler+0x124>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4a47      	ldr	r2, [pc, #284]	@ (8006aec <xPortStartScheduler+0x128>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d10b      	bne.n	80069ec <xPortStartScheduler+0x28>
        __asm volatile
 80069d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069d8:	f383 8811 	msr	BASEPRI, r3
 80069dc:	f3bf 8f6f 	isb	sy
 80069e0:	f3bf 8f4f 	dsb	sy
 80069e4:	613b      	str	r3, [r7, #16]
    }
 80069e6:	bf00      	nop
 80069e8:	bf00      	nop
 80069ea:	e7fd      	b.n	80069e8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80069ec:	4b3e      	ldr	r3, [pc, #248]	@ (8006ae8 <xPortStartScheduler+0x124>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a3f      	ldr	r2, [pc, #252]	@ (8006af0 <xPortStartScheduler+0x12c>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d10b      	bne.n	8006a0e <xPortStartScheduler+0x4a>
        __asm volatile
 80069f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069fa:	f383 8811 	msr	BASEPRI, r3
 80069fe:	f3bf 8f6f 	isb	sy
 8006a02:	f3bf 8f4f 	dsb	sy
 8006a06:	60fb      	str	r3, [r7, #12]
    }
 8006a08:	bf00      	nop
 8006a0a:	bf00      	nop
 8006a0c:	e7fd      	b.n	8006a0a <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006a0e:	4b39      	ldr	r3, [pc, #228]	@ (8006af4 <xPortStartScheduler+0x130>)
 8006a10:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006a12:	697b      	ldr	r3, [r7, #20]
 8006a14:	781b      	ldrb	r3, [r3, #0]
 8006a16:	b2db      	uxtb	r3, r3
 8006a18:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006a1a:	697b      	ldr	r3, [r7, #20]
 8006a1c:	22ff      	movs	r2, #255	@ 0xff
 8006a1e:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	781b      	ldrb	r3, [r3, #0]
 8006a24:	b2db      	uxtb	r3, r3
 8006a26:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006a28:	78fb      	ldrb	r3, [r7, #3]
 8006a2a:	b2db      	uxtb	r3, r3
 8006a2c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006a30:	b2da      	uxtb	r2, r3
 8006a32:	4b31      	ldr	r3, [pc, #196]	@ (8006af8 <xPortStartScheduler+0x134>)
 8006a34:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006a36:	4b31      	ldr	r3, [pc, #196]	@ (8006afc <xPortStartScheduler+0x138>)
 8006a38:	2207      	movs	r2, #7
 8006a3a:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006a3c:	e009      	b.n	8006a52 <xPortStartScheduler+0x8e>
        {
            ulMaxPRIGROUPValue--;
 8006a3e:	4b2f      	ldr	r3, [pc, #188]	@ (8006afc <xPortStartScheduler+0x138>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	3b01      	subs	r3, #1
 8006a44:	4a2d      	ldr	r2, [pc, #180]	@ (8006afc <xPortStartScheduler+0x138>)
 8006a46:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006a48:	78fb      	ldrb	r3, [r7, #3]
 8006a4a:	b2db      	uxtb	r3, r3
 8006a4c:	005b      	lsls	r3, r3, #1
 8006a4e:	b2db      	uxtb	r3, r3
 8006a50:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006a52:	78fb      	ldrb	r3, [r7, #3]
 8006a54:	b2db      	uxtb	r3, r3
 8006a56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a5a:	2b80      	cmp	r3, #128	@ 0x80
 8006a5c:	d0ef      	beq.n	8006a3e <xPortStartScheduler+0x7a>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006a5e:	4b27      	ldr	r3, [pc, #156]	@ (8006afc <xPortStartScheduler+0x138>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f1c3 0307 	rsb	r3, r3, #7
 8006a66:	2b04      	cmp	r3, #4
 8006a68:	d00b      	beq.n	8006a82 <xPortStartScheduler+0xbe>
        __asm volatile
 8006a6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a6e:	f383 8811 	msr	BASEPRI, r3
 8006a72:	f3bf 8f6f 	isb	sy
 8006a76:	f3bf 8f4f 	dsb	sy
 8006a7a:	60bb      	str	r3, [r7, #8]
    }
 8006a7c:	bf00      	nop
 8006a7e:	bf00      	nop
 8006a80:	e7fd      	b.n	8006a7e <xPortStartScheduler+0xba>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006a82:	4b1e      	ldr	r3, [pc, #120]	@ (8006afc <xPortStartScheduler+0x138>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	021b      	lsls	r3, r3, #8
 8006a88:	4a1c      	ldr	r2, [pc, #112]	@ (8006afc <xPortStartScheduler+0x138>)
 8006a8a:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006a8c:	4b1b      	ldr	r3, [pc, #108]	@ (8006afc <xPortStartScheduler+0x138>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006a94:	4a19      	ldr	r2, [pc, #100]	@ (8006afc <xPortStartScheduler+0x138>)
 8006a96:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	b2da      	uxtb	r2, r3
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8006aa0:	4b17      	ldr	r3, [pc, #92]	@ (8006b00 <xPortStartScheduler+0x13c>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4a16      	ldr	r2, [pc, #88]	@ (8006b00 <xPortStartScheduler+0x13c>)
 8006aa6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006aaa:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8006aac:	4b14      	ldr	r3, [pc, #80]	@ (8006b00 <xPortStartScheduler+0x13c>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a13      	ldr	r2, [pc, #76]	@ (8006b00 <xPortStartScheduler+0x13c>)
 8006ab2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006ab6:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8006ab8:	f000 f8e0 	bl	8006c7c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8006abc:	4b11      	ldr	r3, [pc, #68]	@ (8006b04 <xPortStartScheduler+0x140>)
 8006abe:	2200      	movs	r2, #0
 8006ac0:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8006ac2:	f000 f8ff 	bl	8006cc4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006ac6:	4b10      	ldr	r3, [pc, #64]	@ (8006b08 <xPortStartScheduler+0x144>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a0f      	ldr	r2, [pc, #60]	@ (8006b08 <xPortStartScheduler+0x144>)
 8006acc:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8006ad0:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8006ad2:	f7ff ff61 	bl	8006998 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8006ad6:	f7fe fd31 	bl	800553c <vTaskSwitchContext>
    prvTaskExitError();
 8006ada:	f7ff ff15 	bl	8006908 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8006ade:	2300      	movs	r3, #0
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	3718      	adds	r7, #24
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}
 8006ae8:	e000ed00 	.word	0xe000ed00
 8006aec:	410fc271 	.word	0x410fc271
 8006af0:	410fc270 	.word	0x410fc270
 8006af4:	e000e400 	.word	0xe000e400
 8006af8:	20000284 	.word	0x20000284
 8006afc:	20000288 	.word	0x20000288
 8006b00:	e000ed20 	.word	0xe000ed20
 8006b04:	20000010 	.word	0x20000010
 8006b08:	e000ef34 	.word	0xe000ef34

08006b0c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b083      	sub	sp, #12
 8006b10:	af00      	add	r7, sp, #0
        __asm volatile
 8006b12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b16:	f383 8811 	msr	BASEPRI, r3
 8006b1a:	f3bf 8f6f 	isb	sy
 8006b1e:	f3bf 8f4f 	dsb	sy
 8006b22:	607b      	str	r3, [r7, #4]
    }
 8006b24:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8006b26:	4b10      	ldr	r3, [pc, #64]	@ (8006b68 <vPortEnterCritical+0x5c>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	3301      	adds	r3, #1
 8006b2c:	4a0e      	ldr	r2, [pc, #56]	@ (8006b68 <vPortEnterCritical+0x5c>)
 8006b2e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8006b30:	4b0d      	ldr	r3, [pc, #52]	@ (8006b68 <vPortEnterCritical+0x5c>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	2b01      	cmp	r3, #1
 8006b36:	d110      	bne.n	8006b5a <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006b38:	4b0c      	ldr	r3, [pc, #48]	@ (8006b6c <vPortEnterCritical+0x60>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	b2db      	uxtb	r3, r3
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d00b      	beq.n	8006b5a <vPortEnterCritical+0x4e>
        __asm volatile
 8006b42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b46:	f383 8811 	msr	BASEPRI, r3
 8006b4a:	f3bf 8f6f 	isb	sy
 8006b4e:	f3bf 8f4f 	dsb	sy
 8006b52:	603b      	str	r3, [r7, #0]
    }
 8006b54:	bf00      	nop
 8006b56:	bf00      	nop
 8006b58:	e7fd      	b.n	8006b56 <vPortEnterCritical+0x4a>
    }
}
 8006b5a:	bf00      	nop
 8006b5c:	370c      	adds	r7, #12
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b64:	4770      	bx	lr
 8006b66:	bf00      	nop
 8006b68:	20000010 	.word	0x20000010
 8006b6c:	e000ed04 	.word	0xe000ed04

08006b70 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006b70:	b480      	push	{r7}
 8006b72:	b083      	sub	sp, #12
 8006b74:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8006b76:	4b12      	ldr	r3, [pc, #72]	@ (8006bc0 <vPortExitCritical+0x50>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d10b      	bne.n	8006b96 <vPortExitCritical+0x26>
        __asm volatile
 8006b7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b82:	f383 8811 	msr	BASEPRI, r3
 8006b86:	f3bf 8f6f 	isb	sy
 8006b8a:	f3bf 8f4f 	dsb	sy
 8006b8e:	607b      	str	r3, [r7, #4]
    }
 8006b90:	bf00      	nop
 8006b92:	bf00      	nop
 8006b94:	e7fd      	b.n	8006b92 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8006b96:	4b0a      	ldr	r3, [pc, #40]	@ (8006bc0 <vPortExitCritical+0x50>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	3b01      	subs	r3, #1
 8006b9c:	4a08      	ldr	r2, [pc, #32]	@ (8006bc0 <vPortExitCritical+0x50>)
 8006b9e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8006ba0:	4b07      	ldr	r3, [pc, #28]	@ (8006bc0 <vPortExitCritical+0x50>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d105      	bne.n	8006bb4 <vPortExitCritical+0x44>
 8006ba8:	2300      	movs	r3, #0
 8006baa:	603b      	str	r3, [r7, #0]
        __asm volatile
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	f383 8811 	msr	BASEPRI, r3
    }
 8006bb2:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8006bb4:	bf00      	nop
 8006bb6:	370c      	adds	r7, #12
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbe:	4770      	bx	lr
 8006bc0:	20000010 	.word	0x20000010
	...

08006bd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8006bd0:	f3ef 8009 	mrs	r0, PSP
 8006bd4:	f3bf 8f6f 	isb	sy
 8006bd8:	4b15      	ldr	r3, [pc, #84]	@ (8006c30 <pxCurrentTCBConst>)
 8006bda:	681a      	ldr	r2, [r3, #0]
 8006bdc:	f01e 0f10 	tst.w	lr, #16
 8006be0:	bf08      	it	eq
 8006be2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006be6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bea:	6010      	str	r0, [r2, #0]
 8006bec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006bf0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006bf4:	f380 8811 	msr	BASEPRI, r0
 8006bf8:	f3bf 8f4f 	dsb	sy
 8006bfc:	f3bf 8f6f 	isb	sy
 8006c00:	f7fe fc9c 	bl	800553c <vTaskSwitchContext>
 8006c04:	f04f 0000 	mov.w	r0, #0
 8006c08:	f380 8811 	msr	BASEPRI, r0
 8006c0c:	bc09      	pop	{r0, r3}
 8006c0e:	6819      	ldr	r1, [r3, #0]
 8006c10:	6808      	ldr	r0, [r1, #0]
 8006c12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c16:	f01e 0f10 	tst.w	lr, #16
 8006c1a:	bf08      	it	eq
 8006c1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006c20:	f380 8809 	msr	PSP, r0
 8006c24:	f3bf 8f6f 	isb	sy
 8006c28:	4770      	bx	lr
 8006c2a:	bf00      	nop
 8006c2c:	f3af 8000 	nop.w

08006c30 <pxCurrentTCBConst>:
 8006c30:	20000144 	.word	0x20000144
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8006c34:	bf00      	nop
 8006c36:	bf00      	nop

08006c38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b082      	sub	sp, #8
 8006c3c:	af00      	add	r7, sp, #0
        __asm volatile
 8006c3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c42:	f383 8811 	msr	BASEPRI, r3
 8006c46:	f3bf 8f6f 	isb	sy
 8006c4a:	f3bf 8f4f 	dsb	sy
 8006c4e:	607b      	str	r3, [r7, #4]
    }
 8006c50:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8006c52:	f7fe fb5b 	bl	800530c <xTaskIncrementTick>
 8006c56:	4603      	mov	r3, r0
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d003      	beq.n	8006c64 <SysTick_Handler+0x2c>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006c5c:	4b06      	ldr	r3, [pc, #24]	@ (8006c78 <SysTick_Handler+0x40>)
 8006c5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c62:	601a      	str	r2, [r3, #0]
 8006c64:	2300      	movs	r3, #0
 8006c66:	603b      	str	r3, [r7, #0]
        __asm volatile
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	f383 8811 	msr	BASEPRI, r3
    }
 8006c6e:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 8006c70:	bf00      	nop
 8006c72:	3708      	adds	r7, #8
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}
 8006c78:	e000ed04 	.word	0xe000ed04

08006c7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006c80:	4b0b      	ldr	r3, [pc, #44]	@ (8006cb0 <vPortSetupTimerInterrupt+0x34>)
 8006c82:	2200      	movs	r2, #0
 8006c84:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006c86:	4b0b      	ldr	r3, [pc, #44]	@ (8006cb4 <vPortSetupTimerInterrupt+0x38>)
 8006c88:	2200      	movs	r2, #0
 8006c8a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006c8c:	4b0a      	ldr	r3, [pc, #40]	@ (8006cb8 <vPortSetupTimerInterrupt+0x3c>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4a0a      	ldr	r2, [pc, #40]	@ (8006cbc <vPortSetupTimerInterrupt+0x40>)
 8006c92:	fba2 2303 	umull	r2, r3, r2, r3
 8006c96:	099b      	lsrs	r3, r3, #6
 8006c98:	4a09      	ldr	r2, [pc, #36]	@ (8006cc0 <vPortSetupTimerInterrupt+0x44>)
 8006c9a:	3b01      	subs	r3, #1
 8006c9c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006c9e:	4b04      	ldr	r3, [pc, #16]	@ (8006cb0 <vPortSetupTimerInterrupt+0x34>)
 8006ca0:	2207      	movs	r2, #7
 8006ca2:	601a      	str	r2, [r3, #0]
}
 8006ca4:	bf00      	nop
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cac:	4770      	bx	lr
 8006cae:	bf00      	nop
 8006cb0:	e000e010 	.word	0xe000e010
 8006cb4:	e000e018 	.word	0xe000e018
 8006cb8:	20000000 	.word	0x20000000
 8006cbc:	10624dd3 	.word	0x10624dd3
 8006cc0:	e000e014 	.word	0xe000e014

08006cc4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8006cc4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006cd4 <vPortEnableVFP+0x10>
 8006cc8:	6801      	ldr	r1, [r0, #0]
 8006cca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006cce:	6001      	str	r1, [r0, #0]
 8006cd0:	4770      	bx	lr
 8006cd2:	0000      	.short	0x0000
 8006cd4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8006cd8:	bf00      	nop
 8006cda:	bf00      	nop

08006cdc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8006cdc:	b480      	push	{r7}
 8006cde:	b085      	sub	sp, #20
 8006ce0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8006ce2:	f3ef 8305 	mrs	r3, IPSR
 8006ce6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	2b0f      	cmp	r3, #15
 8006cec:	d915      	bls.n	8006d1a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006cee:	4a18      	ldr	r2, [pc, #96]	@ (8006d50 <vPortValidateInterruptPriority+0x74>)
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	4413      	add	r3, r2
 8006cf4:	781b      	ldrb	r3, [r3, #0]
 8006cf6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006cf8:	4b16      	ldr	r3, [pc, #88]	@ (8006d54 <vPortValidateInterruptPriority+0x78>)
 8006cfa:	781b      	ldrb	r3, [r3, #0]
 8006cfc:	7afa      	ldrb	r2, [r7, #11]
 8006cfe:	429a      	cmp	r2, r3
 8006d00:	d20b      	bcs.n	8006d1a <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 8006d02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d06:	f383 8811 	msr	BASEPRI, r3
 8006d0a:	f3bf 8f6f 	isb	sy
 8006d0e:	f3bf 8f4f 	dsb	sy
 8006d12:	607b      	str	r3, [r7, #4]
    }
 8006d14:	bf00      	nop
 8006d16:	bf00      	nop
 8006d18:	e7fd      	b.n	8006d16 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006d1a:	4b0f      	ldr	r3, [pc, #60]	@ (8006d58 <vPortValidateInterruptPriority+0x7c>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006d22:	4b0e      	ldr	r3, [pc, #56]	@ (8006d5c <vPortValidateInterruptPriority+0x80>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	429a      	cmp	r2, r3
 8006d28:	d90b      	bls.n	8006d42 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 8006d2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d2e:	f383 8811 	msr	BASEPRI, r3
 8006d32:	f3bf 8f6f 	isb	sy
 8006d36:	f3bf 8f4f 	dsb	sy
 8006d3a:	603b      	str	r3, [r7, #0]
    }
 8006d3c:	bf00      	nop
 8006d3e:	bf00      	nop
 8006d40:	e7fd      	b.n	8006d3e <vPortValidateInterruptPriority+0x62>
    }
 8006d42:	bf00      	nop
 8006d44:	3714      	adds	r7, #20
 8006d46:	46bd      	mov	sp, r7
 8006d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4c:	4770      	bx	lr
 8006d4e:	bf00      	nop
 8006d50:	e000e3f0 	.word	0xe000e3f0
 8006d54:	20000284 	.word	0x20000284
 8006d58:	e000ed0c 	.word	0xe000ed0c
 8006d5c:	20000288 	.word	0x20000288

08006d60 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b08a      	sub	sp, #40	@ 0x28
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8006d6c:	f7fe f9a8 	bl	80050c0 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8006d70:	4b54      	ldr	r3, [pc, #336]	@ (8006ec4 <pvPortMalloc+0x164>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d101      	bne.n	8006d7c <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8006d78:	f000 f90c 	bl	8006f94 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d012      	beq.n	8006da8 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8006d82:	2208      	movs	r2, #8
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f003 0307 	and.w	r3, r3, #7
 8006d8a:	1ad3      	subs	r3, r2, r3
 8006d8c:	3308      	adds	r3, #8
 8006d8e:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8006d90:	69bb      	ldr	r3, [r7, #24]
 8006d92:	43db      	mvns	r3, r3
 8006d94:	687a      	ldr	r2, [r7, #4]
 8006d96:	429a      	cmp	r2, r3
 8006d98:	d804      	bhi.n	8006da4 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8006d9a:	687a      	ldr	r2, [r7, #4]
 8006d9c:	69bb      	ldr	r3, [r7, #24]
 8006d9e:	4413      	add	r3, r2
 8006da0:	607b      	str	r3, [r7, #4]
 8006da2:	e001      	b.n	8006da8 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8006da4:	2300      	movs	r3, #0
 8006da6:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	db71      	blt.n	8006e92 <pvPortMalloc+0x132>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d06e      	beq.n	8006e92 <pvPortMalloc+0x132>
 8006db4:	4b44      	ldr	r3, [pc, #272]	@ (8006ec8 <pvPortMalloc+0x168>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	687a      	ldr	r2, [r7, #4]
 8006dba:	429a      	cmp	r2, r3
 8006dbc:	d869      	bhi.n	8006e92 <pvPortMalloc+0x132>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8006dbe:	4b43      	ldr	r3, [pc, #268]	@ (8006ecc <pvPortMalloc+0x16c>)
 8006dc0:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8006dc2:	4b42      	ldr	r3, [pc, #264]	@ (8006ecc <pvPortMalloc+0x16c>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006dc8:	e004      	b.n	8006dd4 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8006dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dcc:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8006dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	687a      	ldr	r2, [r7, #4]
 8006dda:	429a      	cmp	r2, r3
 8006ddc:	d903      	bls.n	8006de6 <pvPortMalloc+0x86>
 8006dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d1f1      	bne.n	8006dca <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8006de6:	4b37      	ldr	r3, [pc, #220]	@ (8006ec4 <pvPortMalloc+0x164>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006dec:	429a      	cmp	r2, r3
 8006dee:	d050      	beq.n	8006e92 <pvPortMalloc+0x132>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006df0:	6a3b      	ldr	r3, [r7, #32]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	2208      	movs	r2, #8
 8006df6:	4413      	add	r3, r2
 8006df8:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dfc:	681a      	ldr	r2, [r3, #0]
 8006dfe:	6a3b      	ldr	r3, [r7, #32]
 8006e00:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e04:	685a      	ldr	r2, [r3, #4]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	1ad2      	subs	r2, r2, r3
 8006e0a:	2308      	movs	r3, #8
 8006e0c:	005b      	lsls	r3, r3, #1
 8006e0e:	429a      	cmp	r2, r3
 8006e10:	d920      	bls.n	8006e54 <pvPortMalloc+0xf4>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006e12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	4413      	add	r3, r2
 8006e18:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e1a:	697b      	ldr	r3, [r7, #20]
 8006e1c:	f003 0307 	and.w	r3, r3, #7
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d00b      	beq.n	8006e3c <pvPortMalloc+0xdc>
        __asm volatile
 8006e24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e28:	f383 8811 	msr	BASEPRI, r3
 8006e2c:	f3bf 8f6f 	isb	sy
 8006e30:	f3bf 8f4f 	dsb	sy
 8006e34:	613b      	str	r3, [r7, #16]
    }
 8006e36:	bf00      	nop
 8006e38:	bf00      	nop
 8006e3a:	e7fd      	b.n	8006e38 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e3e:	685a      	ldr	r2, [r3, #4]
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	1ad2      	subs	r2, r2, r3
 8006e44:	697b      	ldr	r3, [r7, #20]
 8006e46:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8006e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e4a:	687a      	ldr	r2, [r7, #4]
 8006e4c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006e4e:	6978      	ldr	r0, [r7, #20]
 8006e50:	f000 f8fc 	bl	800704c <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006e54:	4b1c      	ldr	r3, [pc, #112]	@ (8006ec8 <pvPortMalloc+0x168>)
 8006e56:	681a      	ldr	r2, [r3, #0]
 8006e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e5a:	685b      	ldr	r3, [r3, #4]
 8006e5c:	1ad3      	subs	r3, r2, r3
 8006e5e:	4a1a      	ldr	r2, [pc, #104]	@ (8006ec8 <pvPortMalloc+0x168>)
 8006e60:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006e62:	4b19      	ldr	r3, [pc, #100]	@ (8006ec8 <pvPortMalloc+0x168>)
 8006e64:	681a      	ldr	r2, [r3, #0]
 8006e66:	4b1a      	ldr	r3, [pc, #104]	@ (8006ed0 <pvPortMalloc+0x170>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	429a      	cmp	r2, r3
 8006e6c:	d203      	bcs.n	8006e76 <pvPortMalloc+0x116>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006e6e:	4b16      	ldr	r3, [pc, #88]	@ (8006ec8 <pvPortMalloc+0x168>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	4a17      	ldr	r2, [pc, #92]	@ (8006ed0 <pvPortMalloc+0x170>)
 8006e74:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8006e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8006e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e80:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8006e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e84:	2200      	movs	r2, #0
 8006e86:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8006e88:	4b12      	ldr	r3, [pc, #72]	@ (8006ed4 <pvPortMalloc+0x174>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	3301      	adds	r3, #1
 8006e8e:	4a11      	ldr	r2, [pc, #68]	@ (8006ed4 <pvPortMalloc+0x174>)
 8006e90:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8006e92:	f7fe f923 	bl	80050dc <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e96:	69fb      	ldr	r3, [r7, #28]
 8006e98:	f003 0307 	and.w	r3, r3, #7
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d00b      	beq.n	8006eb8 <pvPortMalloc+0x158>
        __asm volatile
 8006ea0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ea4:	f383 8811 	msr	BASEPRI, r3
 8006ea8:	f3bf 8f6f 	isb	sy
 8006eac:	f3bf 8f4f 	dsb	sy
 8006eb0:	60fb      	str	r3, [r7, #12]
    }
 8006eb2:	bf00      	nop
 8006eb4:	bf00      	nop
 8006eb6:	e7fd      	b.n	8006eb4 <pvPortMalloc+0x154>
    return pvReturn;
 8006eb8:	69fb      	ldr	r3, [r7, #28]
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	3728      	adds	r7, #40	@ 0x28
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}
 8006ec2:	bf00      	nop
 8006ec4:	20012e94 	.word	0x20012e94
 8006ec8:	20012e98 	.word	0x20012e98
 8006ecc:	20012e8c 	.word	0x20012e8c
 8006ed0:	20012e9c 	.word	0x20012e9c
 8006ed4:	20012ea0 	.word	0x20012ea0

08006ed8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b086      	sub	sp, #24
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d04b      	beq.n	8006f82 <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8006eea:	2308      	movs	r3, #8
 8006eec:	425b      	negs	r3, r3
 8006eee:	697a      	ldr	r2, [r7, #20]
 8006ef0:	4413      	add	r3, r2
 8006ef2:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8006ef4:	697b      	ldr	r3, [r7, #20]
 8006ef6:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8006ef8:	693b      	ldr	r3, [r7, #16]
 8006efa:	685b      	ldr	r3, [r3, #4]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	db0b      	blt.n	8006f18 <vPortFree+0x40>
        __asm volatile
 8006f00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f04:	f383 8811 	msr	BASEPRI, r3
 8006f08:	f3bf 8f6f 	isb	sy
 8006f0c:	f3bf 8f4f 	dsb	sy
 8006f10:	60fb      	str	r3, [r7, #12]
    }
 8006f12:	bf00      	nop
 8006f14:	bf00      	nop
 8006f16:	e7fd      	b.n	8006f14 <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006f18:	693b      	ldr	r3, [r7, #16]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d00b      	beq.n	8006f38 <vPortFree+0x60>
        __asm volatile
 8006f20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f24:	f383 8811 	msr	BASEPRI, r3
 8006f28:	f3bf 8f6f 	isb	sy
 8006f2c:	f3bf 8f4f 	dsb	sy
 8006f30:	60bb      	str	r3, [r7, #8]
    }
 8006f32:	bf00      	nop
 8006f34:	bf00      	nop
 8006f36:	e7fd      	b.n	8006f34 <vPortFree+0x5c>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	685b      	ldr	r3, [r3, #4]
 8006f3c:	0fdb      	lsrs	r3, r3, #31
 8006f3e:	f003 0301 	and.w	r3, r3, #1
 8006f42:	b2db      	uxtb	r3, r3
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d01c      	beq.n	8006f82 <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8006f48:	693b      	ldr	r3, [r7, #16]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d118      	bne.n	8006f82 <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	685b      	ldr	r3, [r3, #4]
 8006f54:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006f58:	693b      	ldr	r3, [r7, #16]
 8006f5a:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8006f5c:	f7fe f8b0 	bl	80050c0 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8006f60:	693b      	ldr	r3, [r7, #16]
 8006f62:	685a      	ldr	r2, [r3, #4]
 8006f64:	4b09      	ldr	r3, [pc, #36]	@ (8006f8c <vPortFree+0xb4>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4413      	add	r3, r2
 8006f6a:	4a08      	ldr	r2, [pc, #32]	@ (8006f8c <vPortFree+0xb4>)
 8006f6c:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006f6e:	6938      	ldr	r0, [r7, #16]
 8006f70:	f000 f86c 	bl	800704c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8006f74:	4b06      	ldr	r3, [pc, #24]	@ (8006f90 <vPortFree+0xb8>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	3301      	adds	r3, #1
 8006f7a:	4a05      	ldr	r2, [pc, #20]	@ (8006f90 <vPortFree+0xb8>)
 8006f7c:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8006f7e:	f7fe f8ad 	bl	80050dc <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8006f82:	bf00      	nop
 8006f84:	3718      	adds	r7, #24
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bd80      	pop	{r7, pc}
 8006f8a:	bf00      	nop
 8006f8c:	20012e98 	.word	0x20012e98
 8006f90:	20012ea4 	.word	0x20012ea4

08006f94 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8006f94:	b480      	push	{r7}
 8006f96:	b085      	sub	sp, #20
 8006f98:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006f9a:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 8006f9e:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8006fa0:	4b25      	ldr	r3, [pc, #148]	@ (8007038 <prvHeapInit+0xa4>)
 8006fa2:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	f003 0307 	and.w	r3, r3, #7
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d00c      	beq.n	8006fc8 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	3307      	adds	r3, #7
 8006fb2:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	f023 0307 	bic.w	r3, r3, #7
 8006fba:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8006fbc:	68ba      	ldr	r2, [r7, #8]
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	1ad3      	subs	r3, r2, r3
 8006fc2:	4a1d      	ldr	r2, [pc, #116]	@ (8007038 <prvHeapInit+0xa4>)
 8006fc4:	4413      	add	r3, r2
 8006fc6:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006fcc:	4a1b      	ldr	r2, [pc, #108]	@ (800703c <prvHeapInit+0xa8>)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8006fd2:	4b1a      	ldr	r3, [pc, #104]	@ (800703c <prvHeapInit+0xa8>)
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	68ba      	ldr	r2, [r7, #8]
 8006fdc:	4413      	add	r3, r2
 8006fde:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8006fe0:	2208      	movs	r2, #8
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	1a9b      	subs	r3, r3, r2
 8006fe6:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	f023 0307 	bic.w	r3, r3, #7
 8006fee:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	4a13      	ldr	r2, [pc, #76]	@ (8007040 <prvHeapInit+0xac>)
 8006ff4:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8006ff6:	4b12      	ldr	r3, [pc, #72]	@ (8007040 <prvHeapInit+0xac>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8006ffe:	4b10      	ldr	r3, [pc, #64]	@ (8007040 <prvHeapInit+0xac>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	2200      	movs	r2, #0
 8007004:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	68fa      	ldr	r2, [r7, #12]
 800700e:	1ad2      	subs	r2, r2, r3
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007014:	4b0a      	ldr	r3, [pc, #40]	@ (8007040 <prvHeapInit+0xac>)
 8007016:	681a      	ldr	r2, [r3, #0]
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	685b      	ldr	r3, [r3, #4]
 8007020:	4a08      	ldr	r2, [pc, #32]	@ (8007044 <prvHeapInit+0xb0>)
 8007022:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	685b      	ldr	r3, [r3, #4]
 8007028:	4a07      	ldr	r2, [pc, #28]	@ (8007048 <prvHeapInit+0xb4>)
 800702a:	6013      	str	r3, [r2, #0]
}
 800702c:	bf00      	nop
 800702e:	3714      	adds	r7, #20
 8007030:	46bd      	mov	sp, r7
 8007032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007036:	4770      	bx	lr
 8007038:	2000028c 	.word	0x2000028c
 800703c:	20012e8c 	.word	0x20012e8c
 8007040:	20012e94 	.word	0x20012e94
 8007044:	20012e9c 	.word	0x20012e9c
 8007048:	20012e98 	.word	0x20012e98

0800704c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800704c:	b480      	push	{r7}
 800704e:	b085      	sub	sp, #20
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007054:	4b28      	ldr	r3, [pc, #160]	@ (80070f8 <prvInsertBlockIntoFreeList+0xac>)
 8007056:	60fb      	str	r3, [r7, #12]
 8007058:	e002      	b.n	8007060 <prvInsertBlockIntoFreeList+0x14>
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	60fb      	str	r3, [r7, #12]
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	687a      	ldr	r2, [r7, #4]
 8007066:	429a      	cmp	r2, r3
 8007068:	d8f7      	bhi.n	800705a <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	685b      	ldr	r3, [r3, #4]
 8007072:	68ba      	ldr	r2, [r7, #8]
 8007074:	4413      	add	r3, r2
 8007076:	687a      	ldr	r2, [r7, #4]
 8007078:	429a      	cmp	r2, r3
 800707a:	d108      	bne.n	800708e <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	685a      	ldr	r2, [r3, #4]
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	685b      	ldr	r3, [r3, #4]
 8007084:	441a      	add	r2, r3
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	685b      	ldr	r3, [r3, #4]
 8007096:	68ba      	ldr	r2, [r7, #8]
 8007098:	441a      	add	r2, r3
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	429a      	cmp	r2, r3
 80070a0:	d118      	bne.n	80070d4 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681a      	ldr	r2, [r3, #0]
 80070a6:	4b15      	ldr	r3, [pc, #84]	@ (80070fc <prvInsertBlockIntoFreeList+0xb0>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	429a      	cmp	r2, r3
 80070ac:	d00d      	beq.n	80070ca <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	685a      	ldr	r2, [r3, #4]
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	685b      	ldr	r3, [r3, #4]
 80070b8:	441a      	add	r2, r3
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	681a      	ldr	r2, [r3, #0]
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	601a      	str	r2, [r3, #0]
 80070c8:	e008      	b.n	80070dc <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80070ca:	4b0c      	ldr	r3, [pc, #48]	@ (80070fc <prvInsertBlockIntoFreeList+0xb0>)
 80070cc:	681a      	ldr	r2, [r3, #0]
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	601a      	str	r2, [r3, #0]
 80070d2:	e003      	b.n	80070dc <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681a      	ldr	r2, [r3, #0]
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80070dc:	68fa      	ldr	r2, [r7, #12]
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	429a      	cmp	r2, r3
 80070e2:	d002      	beq.n	80070ea <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	687a      	ldr	r2, [r7, #4]
 80070e8:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80070ea:	bf00      	nop
 80070ec:	3714      	adds	r7, #20
 80070ee:	46bd      	mov	sp, r7
 80070f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f4:	4770      	bx	lr
 80070f6:	bf00      	nop
 80070f8:	20012e8c 	.word	0x20012e8c
 80070fc:	20012e94 	.word	0x20012e94

08007100 <memset>:
 8007100:	4402      	add	r2, r0
 8007102:	4603      	mov	r3, r0
 8007104:	4293      	cmp	r3, r2
 8007106:	d100      	bne.n	800710a <memset+0xa>
 8007108:	4770      	bx	lr
 800710a:	f803 1b01 	strb.w	r1, [r3], #1
 800710e:	e7f9      	b.n	8007104 <memset+0x4>

08007110 <__libc_init_array>:
 8007110:	b570      	push	{r4, r5, r6, lr}
 8007112:	4d0d      	ldr	r5, [pc, #52]	@ (8007148 <__libc_init_array+0x38>)
 8007114:	4c0d      	ldr	r4, [pc, #52]	@ (800714c <__libc_init_array+0x3c>)
 8007116:	1b64      	subs	r4, r4, r5
 8007118:	10a4      	asrs	r4, r4, #2
 800711a:	2600      	movs	r6, #0
 800711c:	42a6      	cmp	r6, r4
 800711e:	d109      	bne.n	8007134 <__libc_init_array+0x24>
 8007120:	4d0b      	ldr	r5, [pc, #44]	@ (8007150 <__libc_init_array+0x40>)
 8007122:	4c0c      	ldr	r4, [pc, #48]	@ (8007154 <__libc_init_array+0x44>)
 8007124:	f000 f826 	bl	8007174 <_init>
 8007128:	1b64      	subs	r4, r4, r5
 800712a:	10a4      	asrs	r4, r4, #2
 800712c:	2600      	movs	r6, #0
 800712e:	42a6      	cmp	r6, r4
 8007130:	d105      	bne.n	800713e <__libc_init_array+0x2e>
 8007132:	bd70      	pop	{r4, r5, r6, pc}
 8007134:	f855 3b04 	ldr.w	r3, [r5], #4
 8007138:	4798      	blx	r3
 800713a:	3601      	adds	r6, #1
 800713c:	e7ee      	b.n	800711c <__libc_init_array+0xc>
 800713e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007142:	4798      	blx	r3
 8007144:	3601      	adds	r6, #1
 8007146:	e7f2      	b.n	800712e <__libc_init_array+0x1e>
 8007148:	08007300 	.word	0x08007300
 800714c:	08007300 	.word	0x08007300
 8007150:	08007300 	.word	0x08007300
 8007154:	08007304 	.word	0x08007304

08007158 <memcpy>:
 8007158:	440a      	add	r2, r1
 800715a:	4291      	cmp	r1, r2
 800715c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007160:	d100      	bne.n	8007164 <memcpy+0xc>
 8007162:	4770      	bx	lr
 8007164:	b510      	push	{r4, lr}
 8007166:	f811 4b01 	ldrb.w	r4, [r1], #1
 800716a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800716e:	4291      	cmp	r1, r2
 8007170:	d1f9      	bne.n	8007166 <memcpy+0xe>
 8007172:	bd10      	pop	{r4, pc}

08007174 <_init>:
 8007174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007176:	bf00      	nop
 8007178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800717a:	bc08      	pop	{r3}
 800717c:	469e      	mov	lr, r3
 800717e:	4770      	bx	lr

08007180 <_fini>:
 8007180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007182:	bf00      	nop
 8007184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007186:	bc08      	pop	{r3}
 8007188:	469e      	mov	lr, r3
 800718a:	4770      	bx	lr
