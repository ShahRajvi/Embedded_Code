
Queues.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000089a8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000440  08008b78  08008b78  00009b78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008fb8  08008fb8  0000a06c  2**0
                  CONTENTS
  4 .ARM          00000008  08008fb8  08008fb8  00009fb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008fc0  08008fc0  0000a06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008fc0  08008fc0  00009fc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008fc4  08008fc4  00009fc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08008fc8  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013020  2000006c  08009034  0000a06c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001308c  08009034  0000a08c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000168ce  00000000  00000000  0000a09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038b7  00000000  00000000  0002096a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013d0  00000000  00000000  00024228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f5d  00000000  00000000  000255f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000252c7  00000000  00000000  00026555  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a014  00000000  00000000  0004b81c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e07ad  00000000  00000000  00065830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00145fdd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005718  00000000  00000000  00146020  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  0014b738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008b60 	.word	0x08008b60

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000070 	.word	0x20000070
 800020c:	08008b60 	.word	0x08008b60

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96a 	b.w	80005cc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	460c      	mov	r4, r1
 8000318:	2b00      	cmp	r3, #0
 800031a:	d14e      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031c:	4694      	mov	ip, r2
 800031e:	458c      	cmp	ip, r1
 8000320:	4686      	mov	lr, r0
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	d962      	bls.n	80003ee <__udivmoddi4+0xde>
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0320 	rsb	r3, r2, #32
 800032e:	4091      	lsls	r1, r2
 8000330:	fa20 f303 	lsr.w	r3, r0, r3
 8000334:	fa0c fc02 	lsl.w	ip, ip, r2
 8000338:	4319      	orrs	r1, r3
 800033a:	fa00 fe02 	lsl.w	lr, r0, r2
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f f68c 	uxth.w	r6, ip
 8000346:	fbb1 f4f7 	udiv	r4, r1, r7
 800034a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034e:	fb07 1114 	mls	r1, r7, r4, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb04 f106 	mul.w	r1, r4, r6
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f104 30ff 	add.w	r0, r4, #4294967295
 8000366:	f080 8112 	bcs.w	800058e <__udivmoddi4+0x27e>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 810f 	bls.w	800058e <__udivmoddi4+0x27e>
 8000370:	3c02      	subs	r4, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	fa1f f38e 	uxth.w	r3, lr
 800037a:	fbb1 f0f7 	udiv	r0, r1, r7
 800037e:	fb07 1110 	mls	r1, r7, r0, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb00 f606 	mul.w	r6, r0, r6
 800038a:	429e      	cmp	r6, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x94>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f100 31ff 	add.w	r1, r0, #4294967295
 8000396:	f080 80fc 	bcs.w	8000592 <__udivmoddi4+0x282>
 800039a:	429e      	cmp	r6, r3
 800039c:	f240 80f9 	bls.w	8000592 <__udivmoddi4+0x282>
 80003a0:	4463      	add	r3, ip
 80003a2:	3802      	subs	r0, #2
 80003a4:	1b9b      	subs	r3, r3, r6
 80003a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003aa:	2100      	movs	r1, #0
 80003ac:	b11d      	cbz	r5, 80003b6 <__udivmoddi4+0xa6>
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	e9c5 3200 	strd	r3, r2, [r5]
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d905      	bls.n	80003ca <__udivmoddi4+0xba>
 80003be:	b10d      	cbz	r5, 80003c4 <__udivmoddi4+0xb4>
 80003c0:	e9c5 0100 	strd	r0, r1, [r5]
 80003c4:	2100      	movs	r1, #0
 80003c6:	4608      	mov	r0, r1
 80003c8:	e7f5      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ca:	fab3 f183 	clz	r1, r3
 80003ce:	2900      	cmp	r1, #0
 80003d0:	d146      	bne.n	8000460 <__udivmoddi4+0x150>
 80003d2:	42a3      	cmp	r3, r4
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xcc>
 80003d6:	4290      	cmp	r0, r2
 80003d8:	f0c0 80f0 	bcc.w	80005bc <__udivmoddi4+0x2ac>
 80003dc:	1a86      	subs	r6, r0, r2
 80003de:	eb64 0303 	sbc.w	r3, r4, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	2d00      	cmp	r5, #0
 80003e6:	d0e6      	beq.n	80003b6 <__udivmoddi4+0xa6>
 80003e8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ec:	e7e3      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	f040 8090 	bne.w	8000514 <__udivmoddi4+0x204>
 80003f4:	eba1 040c 	sub.w	r4, r1, ip
 80003f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003fc:	fa1f f78c 	uxth.w	r7, ip
 8000400:	2101      	movs	r1, #1
 8000402:	fbb4 f6f8 	udiv	r6, r4, r8
 8000406:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800040a:	fb08 4416 	mls	r4, r8, r6, r4
 800040e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000412:	fb07 f006 	mul.w	r0, r7, r6
 8000416:	4298      	cmp	r0, r3
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x11c>
 800041a:	eb1c 0303 	adds.w	r3, ip, r3
 800041e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x11a>
 8000424:	4298      	cmp	r0, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 800042a:	4626      	mov	r6, r4
 800042c:	1a1c      	subs	r4, r3, r0
 800042e:	fa1f f38e 	uxth.w	r3, lr
 8000432:	fbb4 f0f8 	udiv	r0, r4, r8
 8000436:	fb08 4410 	mls	r4, r8, r0, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb00 f707 	mul.w	r7, r0, r7
 8000442:	429f      	cmp	r7, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x148>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 34ff 	add.w	r4, r0, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x146>
 8000450:	429f      	cmp	r7, r3
 8000452:	f200 80b0 	bhi.w	80005b6 <__udivmoddi4+0x2a6>
 8000456:	4620      	mov	r0, r4
 8000458:	1bdb      	subs	r3, r3, r7
 800045a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800045e:	e7a5      	b.n	80003ac <__udivmoddi4+0x9c>
 8000460:	f1c1 0620 	rsb	r6, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 f706 	lsr.w	r7, r2, r6
 800046a:	431f      	orrs	r7, r3
 800046c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000470:	fa04 f301 	lsl.w	r3, r4, r1
 8000474:	ea43 030c 	orr.w	r3, r3, ip
 8000478:	40f4      	lsrs	r4, r6
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	0c38      	lsrs	r0, r7, #16
 8000480:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000484:	fbb4 fef0 	udiv	lr, r4, r0
 8000488:	fa1f fc87 	uxth.w	ip, r7
 800048c:	fb00 441e 	mls	r4, r0, lr, r4
 8000490:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000494:	fb0e f90c 	mul.w	r9, lr, ip
 8000498:	45a1      	cmp	r9, r4
 800049a:	fa02 f201 	lsl.w	r2, r2, r1
 800049e:	d90a      	bls.n	80004b6 <__udivmoddi4+0x1a6>
 80004a0:	193c      	adds	r4, r7, r4
 80004a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004a6:	f080 8084 	bcs.w	80005b2 <__udivmoddi4+0x2a2>
 80004aa:	45a1      	cmp	r9, r4
 80004ac:	f240 8081 	bls.w	80005b2 <__udivmoddi4+0x2a2>
 80004b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004b4:	443c      	add	r4, r7
 80004b6:	eba4 0409 	sub.w	r4, r4, r9
 80004ba:	fa1f f983 	uxth.w	r9, r3
 80004be:	fbb4 f3f0 	udiv	r3, r4, r0
 80004c2:	fb00 4413 	mls	r4, r0, r3, r4
 80004c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d907      	bls.n	80004e2 <__udivmoddi4+0x1d2>
 80004d2:	193c      	adds	r4, r7, r4
 80004d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d8:	d267      	bcs.n	80005aa <__udivmoddi4+0x29a>
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d965      	bls.n	80005aa <__udivmoddi4+0x29a>
 80004de:	3b02      	subs	r3, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004e6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ea:	eba4 040c 	sub.w	r4, r4, ip
 80004ee:	429c      	cmp	r4, r3
 80004f0:	46ce      	mov	lr, r9
 80004f2:	469c      	mov	ip, r3
 80004f4:	d351      	bcc.n	800059a <__udivmoddi4+0x28a>
 80004f6:	d04e      	beq.n	8000596 <__udivmoddi4+0x286>
 80004f8:	b155      	cbz	r5, 8000510 <__udivmoddi4+0x200>
 80004fa:	ebb8 030e 	subs.w	r3, r8, lr
 80004fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000502:	fa04 f606 	lsl.w	r6, r4, r6
 8000506:	40cb      	lsrs	r3, r1
 8000508:	431e      	orrs	r6, r3
 800050a:	40cc      	lsrs	r4, r1
 800050c:	e9c5 6400 	strd	r6, r4, [r5]
 8000510:	2100      	movs	r1, #0
 8000512:	e750      	b.n	80003b6 <__udivmoddi4+0xa6>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f103 	lsr.w	r1, r0, r3
 800051c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000520:	fa24 f303 	lsr.w	r3, r4, r3
 8000524:	4094      	lsls	r4, r2
 8000526:	430c      	orrs	r4, r1
 8000528:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800052c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000530:	fa1f f78c 	uxth.w	r7, ip
 8000534:	fbb3 f0f8 	udiv	r0, r3, r8
 8000538:	fb08 3110 	mls	r1, r8, r0, r3
 800053c:	0c23      	lsrs	r3, r4, #16
 800053e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000542:	fb00 f107 	mul.w	r1, r0, r7
 8000546:	4299      	cmp	r1, r3
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x24c>
 800054a:	eb1c 0303 	adds.w	r3, ip, r3
 800054e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000552:	d22c      	bcs.n	80005ae <__udivmoddi4+0x29e>
 8000554:	4299      	cmp	r1, r3
 8000556:	d92a      	bls.n	80005ae <__udivmoddi4+0x29e>
 8000558:	3802      	subs	r0, #2
 800055a:	4463      	add	r3, ip
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b2a4      	uxth	r4, r4
 8000560:	fbb3 f1f8 	udiv	r1, r3, r8
 8000564:	fb08 3311 	mls	r3, r8, r1, r3
 8000568:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800056c:	fb01 f307 	mul.w	r3, r1, r7
 8000570:	42a3      	cmp	r3, r4
 8000572:	d908      	bls.n	8000586 <__udivmoddi4+0x276>
 8000574:	eb1c 0404 	adds.w	r4, ip, r4
 8000578:	f101 36ff 	add.w	r6, r1, #4294967295
 800057c:	d213      	bcs.n	80005a6 <__udivmoddi4+0x296>
 800057e:	42a3      	cmp	r3, r4
 8000580:	d911      	bls.n	80005a6 <__udivmoddi4+0x296>
 8000582:	3902      	subs	r1, #2
 8000584:	4464      	add	r4, ip
 8000586:	1ae4      	subs	r4, r4, r3
 8000588:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800058c:	e739      	b.n	8000402 <__udivmoddi4+0xf2>
 800058e:	4604      	mov	r4, r0
 8000590:	e6f0      	b.n	8000374 <__udivmoddi4+0x64>
 8000592:	4608      	mov	r0, r1
 8000594:	e706      	b.n	80003a4 <__udivmoddi4+0x94>
 8000596:	45c8      	cmp	r8, r9
 8000598:	d2ae      	bcs.n	80004f8 <__udivmoddi4+0x1e8>
 800059a:	ebb9 0e02 	subs.w	lr, r9, r2
 800059e:	eb63 0c07 	sbc.w	ip, r3, r7
 80005a2:	3801      	subs	r0, #1
 80005a4:	e7a8      	b.n	80004f8 <__udivmoddi4+0x1e8>
 80005a6:	4631      	mov	r1, r6
 80005a8:	e7ed      	b.n	8000586 <__udivmoddi4+0x276>
 80005aa:	4603      	mov	r3, r0
 80005ac:	e799      	b.n	80004e2 <__udivmoddi4+0x1d2>
 80005ae:	4630      	mov	r0, r6
 80005b0:	e7d4      	b.n	800055c <__udivmoddi4+0x24c>
 80005b2:	46d6      	mov	lr, sl
 80005b4:	e77f      	b.n	80004b6 <__udivmoddi4+0x1a6>
 80005b6:	4463      	add	r3, ip
 80005b8:	3802      	subs	r0, #2
 80005ba:	e74d      	b.n	8000458 <__udivmoddi4+0x148>
 80005bc:	4606      	mov	r6, r0
 80005be:	4623      	mov	r3, r4
 80005c0:	4608      	mov	r0, r1
 80005c2:	e70f      	b.n	80003e4 <__udivmoddi4+0xd4>
 80005c4:	3e02      	subs	r6, #2
 80005c6:	4463      	add	r3, ip
 80005c8:	e730      	b.n	800042c <__udivmoddi4+0x11c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <led_effect_stop>:


#include "main.h"

void led_effect_stop(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b084      	sub	sp, #16
 80005d4:	af02      	add	r7, sp, #8
	for(int i = 0 ; i < 4 ; i++)
 80005d6:	2300      	movs	r3, #0
 80005d8:	607b      	str	r3, [r7, #4]
 80005da:	e00e      	b.n	80005fa <led_effect_stop+0x2a>
		xTimerStop(led_timer_handle[i],portMAX_DELAY);
 80005dc:	4a0b      	ldr	r2, [pc, #44]	@ (800060c <led_effect_stop+0x3c>)
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80005e4:	f04f 33ff 	mov.w	r3, #4294967295
 80005e8:	9300      	str	r3, [sp, #0]
 80005ea:	2300      	movs	r3, #0
 80005ec:	2200      	movs	r2, #0
 80005ee:	2103      	movs	r1, #3
 80005f0:	f006 fefa 	bl	80073e8 <xTimerGenericCommand>
	for(int i = 0 ; i < 4 ; i++)
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	3301      	adds	r3, #1
 80005f8:	607b      	str	r3, [r7, #4]
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	2b03      	cmp	r3, #3
 80005fe:	dded      	ble.n	80005dc <led_effect_stop+0xc>
}
 8000600:	bf00      	nop
 8000602:	bf00      	nop
 8000604:	3708      	adds	r7, #8
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	2000010c 	.word	0x2000010c

08000610 <led_effect>:

void led_effect(int n )
{
 8000610:	b590      	push	{r4, r7, lr}
 8000612:	b085      	sub	sp, #20
 8000614:	af02      	add	r7, sp, #8
 8000616:	6078      	str	r0, [r7, #4]
	led_effect_stop();
 8000618:	f7ff ffda 	bl	80005d0 <led_effect_stop>
	xTimerStart(led_timer_handle[n-1], portMAX_DELAY);
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	3b01      	subs	r3, #1
 8000620:	4a08      	ldr	r2, [pc, #32]	@ (8000644 <led_effect+0x34>)
 8000622:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8000626:	f005 fdf7 	bl	8006218 <xTaskGetTickCount>
 800062a:	4602      	mov	r2, r0
 800062c:	f04f 33ff 	mov.w	r3, #4294967295
 8000630:	9300      	str	r3, [sp, #0]
 8000632:	2300      	movs	r3, #0
 8000634:	2101      	movs	r1, #1
 8000636:	4620      	mov	r0, r4
 8000638:	f006 fed6 	bl	80073e8 <xTimerGenericCommand>

}
 800063c:	bf00      	nop
 800063e:	370c      	adds	r7, #12
 8000640:	46bd      	mov	sp, r7
 8000642:	bd90      	pop	{r4, r7, pc}
 8000644:	2000010c 	.word	0x2000010c

08000648 <LED_effect1>:


void LED_effect1(){
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
	// LED2 toggle at 1s
	HAL_GPIO_TogglePin(GPIOA, LED_GREEN_PIN);
 800064c:	2120      	movs	r1, #32
 800064e:	4804      	ldr	r0, [pc, #16]	@ (8000660 <LED_effect1+0x18>)
 8000650:	f001 fcdf 	bl	8002012 <HAL_GPIO_TogglePin>
	vTaskDelay(pdMS_TO_TICKS(1000));
 8000654:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000658:	f005 fc4c 	bl	8005ef4 <vTaskDelay>
}
 800065c:	bf00      	nop
 800065e:	bd80      	pop	{r7, pc}
 8000660:	40020000 	.word	0x40020000

08000664 <LED_effect2>:


void LED_effect2(){
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
	// LED2 toggle at 2s
	HAL_GPIO_TogglePin(GPIOA, LED_GREEN_PIN);
 8000668:	2120      	movs	r1, #32
 800066a:	4804      	ldr	r0, [pc, #16]	@ (800067c <LED_effect2+0x18>)
 800066c:	f001 fcd1 	bl	8002012 <HAL_GPIO_TogglePin>
	vTaskDelay(pdMS_TO_TICKS(2000));
 8000670:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000674:	f005 fc3e 	bl	8005ef4 <vTaskDelay>
}
 8000678:	bf00      	nop
 800067a:	bd80      	pop	{r7, pc}
 800067c:	40020000 	.word	0x40020000

08000680 <LED_effect3>:

void LED_effect3(){
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
	// LED2 toggle at 3s
	HAL_GPIO_TogglePin(GPIOA, LED_GREEN_PIN);
 8000684:	2120      	movs	r1, #32
 8000686:	4804      	ldr	r0, [pc, #16]	@ (8000698 <LED_effect3+0x18>)
 8000688:	f001 fcc3 	bl	8002012 <HAL_GPIO_TogglePin>
	vTaskDelay(pdMS_TO_TICKS(3000));
 800068c:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000690:	f005 fc30 	bl	8005ef4 <vTaskDelay>
}
 8000694:	bf00      	nop
 8000696:	bd80      	pop	{r7, pc}
 8000698:	40020000 	.word	0x40020000

0800069c <LED_effect4>:

void LED_effect4(){
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
	// LED2 toggle at 4s
	HAL_GPIO_TogglePin(GPIOA, LED_GREEN_PIN);
 80006a0:	2120      	movs	r1, #32
 80006a2:	4804      	ldr	r0, [pc, #16]	@ (80006b4 <LED_effect4+0x18>)
 80006a4:	f001 fcb5 	bl	8002012 <HAL_GPIO_TogglePin>
	vTaskDelay(pdMS_TO_TICKS(400));
 80006a8:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 80006ac:	f005 fc22 	bl	8005ef4 <vTaskDelay>
}
 80006b0:	bf00      	nop
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	40020000 	.word	0x40020000

080006b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b08c      	sub	sp, #48	@ 0x30
 80006bc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006be:	f001 f945 	bl	800194c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006c2:	f000 f907 	bl	80008d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006c6:	f000 f9c7 	bl	8000a58 <MX_GPIO_Init>
  MX_RTC_Init();
 80006ca:	f000 f975 	bl	80009b8 <MX_RTC_Init>
  MX_USART2_UART_Init();
 80006ce:	f000 f999 	bl	8000a04 <MX_USART2_UART_Init>
  // Start segger recording:
  //SEGGER_SYSVIEW_Conf();

  //SEGGER_SYSVIEW_Start();		// When using Segger UART, SYSView Start occurs within the init funciton.

  status = xTaskCreate(menu_task_handler, "menu_task", 200, NULL, 2, &menu_task_handle );
 80006d2:	4b6a      	ldr	r3, [pc, #424]	@ (800087c <main+0x1c4>)
 80006d4:	9301      	str	r3, [sp, #4]
 80006d6:	2302      	movs	r3, #2
 80006d8:	9300      	str	r3, [sp, #0]
 80006da:	2300      	movs	r3, #0
 80006dc:	22c8      	movs	r2, #200	@ 0xc8
 80006de:	4968      	ldr	r1, [pc, #416]	@ (8000880 <main+0x1c8>)
 80006e0:	4868      	ldr	r0, [pc, #416]	@ (8000884 <main+0x1cc>)
 80006e2:	f005 fa9b 	bl	8005c1c <xTaskCreate>
 80006e6:	6238      	str	r0, [r7, #32]
  configASSERT(status == pdPASS);
 80006e8:	6a3b      	ldr	r3, [r7, #32]
 80006ea:	2b01      	cmp	r3, #1
 80006ec:	d00b      	beq.n	8000706 <main+0x4e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80006ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80006f2:	f383 8811 	msr	BASEPRI, r3
 80006f6:	f3bf 8f6f 	isb	sy
 80006fa:	f3bf 8f4f 	dsb	sy
 80006fe:	61fb      	str	r3, [r7, #28]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000700:	bf00      	nop
 8000702:	bf00      	nop
 8000704:	e7fd      	b.n	8000702 <main+0x4a>

  status = xTaskCreate(cmd_task_handler, "cmd_task", 200, NULL, 2, &cmd_task_handle );
 8000706:	4b60      	ldr	r3, [pc, #384]	@ (8000888 <main+0x1d0>)
 8000708:	9301      	str	r3, [sp, #4]
 800070a:	2302      	movs	r3, #2
 800070c:	9300      	str	r3, [sp, #0]
 800070e:	2300      	movs	r3, #0
 8000710:	22c8      	movs	r2, #200	@ 0xc8
 8000712:	495e      	ldr	r1, [pc, #376]	@ (800088c <main+0x1d4>)
 8000714:	485e      	ldr	r0, [pc, #376]	@ (8000890 <main+0x1d8>)
 8000716:	f005 fa81 	bl	8005c1c <xTaskCreate>
 800071a:	6238      	str	r0, [r7, #32]
  configASSERT(status == pdPASS);
 800071c:	6a3b      	ldr	r3, [r7, #32]
 800071e:	2b01      	cmp	r3, #1
 8000720:	d00b      	beq.n	800073a <main+0x82>
        __asm volatile
 8000722:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000726:	f383 8811 	msr	BASEPRI, r3
 800072a:	f3bf 8f6f 	isb	sy
 800072e:	f3bf 8f4f 	dsb	sy
 8000732:	61bb      	str	r3, [r7, #24]
    }
 8000734:	bf00      	nop
 8000736:	bf00      	nop
 8000738:	e7fd      	b.n	8000736 <main+0x7e>

  status = xTaskCreate(print_task_handler, "print_task", 200, NULL, 2, &print_task_handle);
 800073a:	4b56      	ldr	r3, [pc, #344]	@ (8000894 <main+0x1dc>)
 800073c:	9301      	str	r3, [sp, #4]
 800073e:	2302      	movs	r3, #2
 8000740:	9300      	str	r3, [sp, #0]
 8000742:	2300      	movs	r3, #0
 8000744:	22c8      	movs	r2, #200	@ 0xc8
 8000746:	4954      	ldr	r1, [pc, #336]	@ (8000898 <main+0x1e0>)
 8000748:	4854      	ldr	r0, [pc, #336]	@ (800089c <main+0x1e4>)
 800074a:	f005 fa67 	bl	8005c1c <xTaskCreate>
 800074e:	6238      	str	r0, [r7, #32]
  configASSERT(status == pdPASS);
 8000750:	6a3b      	ldr	r3, [r7, #32]
 8000752:	2b01      	cmp	r3, #1
 8000754:	d00b      	beq.n	800076e <main+0xb6>
        __asm volatile
 8000756:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800075a:	f383 8811 	msr	BASEPRI, r3
 800075e:	f3bf 8f6f 	isb	sy
 8000762:	f3bf 8f4f 	dsb	sy
 8000766:	617b      	str	r3, [r7, #20]
    }
 8000768:	bf00      	nop
 800076a:	bf00      	nop
 800076c:	e7fd      	b.n	800076a <main+0xb2>

  status = xTaskCreate(led_task_handler, "led_task", 200, NULL,2, &led_task_handle);
 800076e:	4b4c      	ldr	r3, [pc, #304]	@ (80008a0 <main+0x1e8>)
 8000770:	9301      	str	r3, [sp, #4]
 8000772:	2302      	movs	r3, #2
 8000774:	9300      	str	r3, [sp, #0]
 8000776:	2300      	movs	r3, #0
 8000778:	22c8      	movs	r2, #200	@ 0xc8
 800077a:	494a      	ldr	r1, [pc, #296]	@ (80008a4 <main+0x1ec>)
 800077c:	484a      	ldr	r0, [pc, #296]	@ (80008a8 <main+0x1f0>)
 800077e:	f005 fa4d 	bl	8005c1c <xTaskCreate>
 8000782:	6238      	str	r0, [r7, #32]
  configASSERT(status == pdPASS);
 8000784:	6a3b      	ldr	r3, [r7, #32]
 8000786:	2b01      	cmp	r3, #1
 8000788:	d00b      	beq.n	80007a2 <main+0xea>
        __asm volatile
 800078a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800078e:	f383 8811 	msr	BASEPRI, r3
 8000792:	f3bf 8f6f 	isb	sy
 8000796:	f3bf 8f4f 	dsb	sy
 800079a:	613b      	str	r3, [r7, #16]
    }
 800079c:	bf00      	nop
 800079e:	bf00      	nop
 80007a0:	e7fd      	b.n	800079e <main+0xe6>

  status = xTaskCreate(rtc_task_handler, "rtc_task", 200, NULL,2, &rtc_task_handle);
 80007a2:	4b42      	ldr	r3, [pc, #264]	@ (80008ac <main+0x1f4>)
 80007a4:	9301      	str	r3, [sp, #4]
 80007a6:	2302      	movs	r3, #2
 80007a8:	9300      	str	r3, [sp, #0]
 80007aa:	2300      	movs	r3, #0
 80007ac:	22c8      	movs	r2, #200	@ 0xc8
 80007ae:	4940      	ldr	r1, [pc, #256]	@ (80008b0 <main+0x1f8>)
 80007b0:	4840      	ldr	r0, [pc, #256]	@ (80008b4 <main+0x1fc>)
 80007b2:	f005 fa33 	bl	8005c1c <xTaskCreate>
 80007b6:	6238      	str	r0, [r7, #32]
  configASSERT(status == pdPASS);
 80007b8:	6a3b      	ldr	r3, [r7, #32]
 80007ba:	2b01      	cmp	r3, #1
 80007bc:	d00b      	beq.n	80007d6 <main+0x11e>
        __asm volatile
 80007be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80007c2:	f383 8811 	msr	BASEPRI, r3
 80007c6:	f3bf 8f6f 	isb	sy
 80007ca:	f3bf 8f4f 	dsb	sy
 80007ce:	60fb      	str	r3, [r7, #12]
    }
 80007d0:	bf00      	nop
 80007d2:	bf00      	nop
 80007d4:	e7fd      	b.n	80007d2 <main+0x11a>


  //  Queue Creation

  q_data =xQueueCreate(10, sizeof(char));
 80007d6:	2200      	movs	r2, #0
 80007d8:	2101      	movs	r1, #1
 80007da:	200a      	movs	r0, #10
 80007dc:	f004 fc9e 	bl	800511c <xQueueGenericCreate>
 80007e0:	4603      	mov	r3, r0
 80007e2:	4a35      	ldr	r2, [pc, #212]	@ (80008b8 <main+0x200>)
 80007e4:	6013      	str	r3, [r2, #0]
  configASSERT(q_data != NULL);	//Check if queue was created
 80007e6:	4b34      	ldr	r3, [pc, #208]	@ (80008b8 <main+0x200>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d10b      	bne.n	8000806 <main+0x14e>
        __asm volatile
 80007ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80007f2:	f383 8811 	msr	BASEPRI, r3
 80007f6:	f3bf 8f6f 	isb	sy
 80007fa:	f3bf 8f4f 	dsb	sy
 80007fe:	60bb      	str	r3, [r7, #8]
    }
 8000800:	bf00      	nop
 8000802:	bf00      	nop
 8000804:	e7fd      	b.n	8000802 <main+0x14a>

  q_print = xQueueCreate(10, sizeof(size_t));
 8000806:	2200      	movs	r2, #0
 8000808:	2104      	movs	r1, #4
 800080a:	200a      	movs	r0, #10
 800080c:	f004 fc86 	bl	800511c <xQueueGenericCreate>
 8000810:	4603      	mov	r3, r0
 8000812:	4a2a      	ldr	r2, [pc, #168]	@ (80008bc <main+0x204>)
 8000814:	6013      	str	r3, [r2, #0]
  configASSERT(q_print != NULL);
 8000816:	4b29      	ldr	r3, [pc, #164]	@ (80008bc <main+0x204>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	2b00      	cmp	r3, #0
 800081c:	d10b      	bne.n	8000836 <main+0x17e>
        __asm volatile
 800081e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000822:	f383 8811 	msr	BASEPRI, r3
 8000826:	f3bf 8f6f 	isb	sy
 800082a:	f3bf 8f4f 	dsb	sy
 800082e:	607b      	str	r3, [r7, #4]
    }
 8000830:	bf00      	nop
 8000832:	bf00      	nop
 8000834:	e7fd      	b.n	8000832 <main+0x17a>

  /* Create software timer for LED effects */


  for(int i = 0; i < 4; i++){
 8000836:	2300      	movs	r3, #0
 8000838:	627b      	str	r3, [r7, #36]	@ 0x24
 800083a:	e013      	b.n	8000864 <main+0x1ac>
	  led_timer_handle[i] = xTimerCreate("led_timer", pdMS_TO_TICKS(500), pdTRUE, (void *)(i+1), fn_led_effect_callback);
 800083c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800083e:	3301      	adds	r3, #1
 8000840:	461a      	mov	r2, r3
 8000842:	4b1f      	ldr	r3, [pc, #124]	@ (80008c0 <main+0x208>)
 8000844:	9300      	str	r3, [sp, #0]
 8000846:	4613      	mov	r3, r2
 8000848:	2201      	movs	r2, #1
 800084a:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800084e:	481d      	ldr	r0, [pc, #116]	@ (80008c4 <main+0x20c>)
 8000850:	f006 fd70 	bl	8007334 <xTimerCreate>
 8000854:	4602      	mov	r2, r0
 8000856:	491c      	ldr	r1, [pc, #112]	@ (80008c8 <main+0x210>)
 8000858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800085a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for(int i = 0; i < 4; i++){
 800085e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000860:	3301      	adds	r3, #1
 8000862:	627b      	str	r3, [r7, #36]	@ 0x24
 8000864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000866:	2b03      	cmp	r3, #3
 8000868:	dde8      	ble.n	800083c <main+0x184>
  }


  // Enable uart receive interrupt
  HAL_UART_Receive_IT(&huart2, (uint8_t*) &user_data, 1);
 800086a:	2201      	movs	r2, #1
 800086c:	4917      	ldr	r1, [pc, #92]	@ (80008cc <main+0x214>)
 800086e:	4818      	ldr	r0, [pc, #96]	@ (80008d0 <main+0x218>)
 8000870:	f003 fbb7 	bl	8003fe2 <HAL_UART_Receive_IT>

  // start FreeRTOS scheduler
  vTaskStartScheduler();
 8000874:	f005 fb74 	bl	8005f60 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000878:	bf00      	nop
 800087a:	e7fd      	b.n	8000878 <main+0x1c0>
 800087c:	200000f0 	.word	0x200000f0
 8000880:	08008b78 	.word	0x08008b78
 8000884:	080010c9 	.word	0x080010c9
 8000888:	200000f4 	.word	0x200000f4
 800088c:	08008b84 	.word	0x08008b84
 8000890:	080011b1 	.word	0x080011b1
 8000894:	200000f8 	.word	0x200000f8
 8000898:	08008b90 	.word	0x08008b90
 800089c:	080011e1 	.word	0x080011e1
 80008a0:	200000fc 	.word	0x200000fc
 80008a4:	08008b9c 	.word	0x08008b9c
 80008a8:	08001221 	.word	0x08001221
 80008ac:	20000100 	.word	0x20000100
 80008b0:	08008ba8 	.word	0x08008ba8
 80008b4:	08001355 	.word	0x08001355
 80008b8:	20000104 	.word	0x20000104
 80008bc:	20000108 	.word	0x20000108
 80008c0:	08000bc9 	.word	0x08000bc9
 80008c4:	08008bb4 	.word	0x08008bb4
 80008c8:	2000010c 	.word	0x2000010c
 80008cc:	20000121 	.word	0x20000121
 80008d0:	200000a8 	.word	0x200000a8

080008d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b094      	sub	sp, #80	@ 0x50
 80008d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008da:	f107 031c 	add.w	r3, r7, #28
 80008de:	2234      	movs	r2, #52	@ 0x34
 80008e0:	2100      	movs	r1, #0
 80008e2:	4618      	mov	r0, r3
 80008e4:	f007 fcbc 	bl	8008260 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008e8:	f107 0308 	add.w	r3, r7, #8
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
 80008f0:	605a      	str	r2, [r3, #4]
 80008f2:	609a      	str	r2, [r3, #8]
 80008f4:	60da      	str	r2, [r3, #12]
 80008f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008f8:	2300      	movs	r3, #0
 80008fa:	607b      	str	r3, [r7, #4]
 80008fc:	4b2c      	ldr	r3, [pc, #176]	@ (80009b0 <SystemClock_Config+0xdc>)
 80008fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000900:	4a2b      	ldr	r2, [pc, #172]	@ (80009b0 <SystemClock_Config+0xdc>)
 8000902:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000906:	6413      	str	r3, [r2, #64]	@ 0x40
 8000908:	4b29      	ldr	r3, [pc, #164]	@ (80009b0 <SystemClock_Config+0xdc>)
 800090a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800090c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000910:	607b      	str	r3, [r7, #4]
 8000912:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000914:	2300      	movs	r3, #0
 8000916:	603b      	str	r3, [r7, #0]
 8000918:	4b26      	ldr	r3, [pc, #152]	@ (80009b4 <SystemClock_Config+0xe0>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000920:	4a24      	ldr	r2, [pc, #144]	@ (80009b4 <SystemClock_Config+0xe0>)
 8000922:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000926:	6013      	str	r3, [r2, #0]
 8000928:	4b22      	ldr	r3, [pc, #136]	@ (80009b4 <SystemClock_Config+0xe0>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000930:	603b      	str	r3, [r7, #0]
 8000932:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000934:	230a      	movs	r3, #10
 8000936:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 8000938:	2300      	movs	r3, #0
 800093a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800093c:	2301      	movs	r3, #1
 800093e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000940:	2310      	movs	r3, #16
 8000942:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000944:	2301      	movs	r3, #1
 8000946:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000948:	2302      	movs	r3, #2
 800094a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800094c:	2300      	movs	r3, #0
 800094e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000950:	2310      	movs	r3, #16
 8000952:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000954:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000958:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800095a:	2304      	movs	r3, #4
 800095c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800095e:	2302      	movs	r3, #2
 8000960:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000962:	2302      	movs	r3, #2
 8000964:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000966:	f107 031c 	add.w	r3, r7, #28
 800096a:	4618      	mov	r0, r3
 800096c:	f002 fa12 	bl	8002d94 <HAL_RCC_OscConfig>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000976:	f000 f961 	bl	8000c3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800097a:	230f      	movs	r3, #15
 800097c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800097e:	2302      	movs	r3, #2
 8000980:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000982:	2300      	movs	r3, #0
 8000984:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000986:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800098a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800098c:	2300      	movs	r3, #0
 800098e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000990:	f107 0308 	add.w	r3, r7, #8
 8000994:	2102      	movs	r1, #2
 8000996:	4618      	mov	r0, r3
 8000998:	f001 fb56 	bl	8002048 <HAL_RCC_ClockConfig>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80009a2:	f000 f94b 	bl	8000c3c <Error_Handler>
  }
}
 80009a6:	bf00      	nop
 80009a8:	3750      	adds	r7, #80	@ 0x50
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	40023800 	.word	0x40023800
 80009b4:	40007000 	.word	0x40007000

080009b8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80009bc:	4b0f      	ldr	r3, [pc, #60]	@ (80009fc <MX_RTC_Init+0x44>)
 80009be:	4a10      	ldr	r2, [pc, #64]	@ (8000a00 <MX_RTC_Init+0x48>)
 80009c0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 80009c2:	4b0e      	ldr	r3, [pc, #56]	@ (80009fc <MX_RTC_Init+0x44>)
 80009c4:	2240      	movs	r2, #64	@ 0x40
 80009c6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80009c8:	4b0c      	ldr	r3, [pc, #48]	@ (80009fc <MX_RTC_Init+0x44>)
 80009ca:	227f      	movs	r2, #127	@ 0x7f
 80009cc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80009ce:	4b0b      	ldr	r3, [pc, #44]	@ (80009fc <MX_RTC_Init+0x44>)
 80009d0:	22ff      	movs	r2, #255	@ 0xff
 80009d2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80009d4:	4b09      	ldr	r3, [pc, #36]	@ (80009fc <MX_RTC_Init+0x44>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80009da:	4b08      	ldr	r3, [pc, #32]	@ (80009fc <MX_RTC_Init+0x44>)
 80009dc:	2200      	movs	r2, #0
 80009de:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80009e0:	4b06      	ldr	r3, [pc, #24]	@ (80009fc <MX_RTC_Init+0x44>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80009e6:	4805      	ldr	r0, [pc, #20]	@ (80009fc <MX_RTC_Init+0x44>)
 80009e8:	f002 fc72 	bl	80032d0 <HAL_RTC_Init>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80009f2:	f000 f923 	bl	8000c3c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80009f6:	bf00      	nop
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	20000088 	.word	0x20000088
 8000a00:	40002800 	.word	0x40002800

08000a04 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a08:	4b11      	ldr	r3, [pc, #68]	@ (8000a50 <MX_USART2_UART_Init+0x4c>)
 8000a0a:	4a12      	ldr	r2, [pc, #72]	@ (8000a54 <MX_USART2_UART_Init+0x50>)
 8000a0c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a0e:	4b10      	ldr	r3, [pc, #64]	@ (8000a50 <MX_USART2_UART_Init+0x4c>)
 8000a10:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a14:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a16:	4b0e      	ldr	r3, [pc, #56]	@ (8000a50 <MX_USART2_UART_Init+0x4c>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000a50 <MX_USART2_UART_Init+0x4c>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a22:	4b0b      	ldr	r3, [pc, #44]	@ (8000a50 <MX_USART2_UART_Init+0x4c>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a28:	4b09      	ldr	r3, [pc, #36]	@ (8000a50 <MX_USART2_UART_Init+0x4c>)
 8000a2a:	220c      	movs	r2, #12
 8000a2c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a2e:	4b08      	ldr	r3, [pc, #32]	@ (8000a50 <MX_USART2_UART_Init+0x4c>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a34:	4b06      	ldr	r3, [pc, #24]	@ (8000a50 <MX_USART2_UART_Init+0x4c>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a3a:	4805      	ldr	r0, [pc, #20]	@ (8000a50 <MX_USART2_UART_Init+0x4c>)
 8000a3c:	f003 f9f6 	bl	8003e2c <HAL_UART_Init>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a46:	f000 f8f9 	bl	8000c3c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a4a:	bf00      	nop
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	200000a8 	.word	0x200000a8
 8000a54:	40004400 	.word	0x40004400

08000a58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b08a      	sub	sp, #40	@ 0x28
 8000a5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5e:	f107 0314 	add.w	r3, r7, #20
 8000a62:	2200      	movs	r2, #0
 8000a64:	601a      	str	r2, [r3, #0]
 8000a66:	605a      	str	r2, [r3, #4]
 8000a68:	609a      	str	r2, [r3, #8]
 8000a6a:	60da      	str	r2, [r3, #12]
 8000a6c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a6e:	2300      	movs	r3, #0
 8000a70:	613b      	str	r3, [r7, #16]
 8000a72:	4b2d      	ldr	r3, [pc, #180]	@ (8000b28 <MX_GPIO_Init+0xd0>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a76:	4a2c      	ldr	r2, [pc, #176]	@ (8000b28 <MX_GPIO_Init+0xd0>)
 8000a78:	f043 0304 	orr.w	r3, r3, #4
 8000a7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a7e:	4b2a      	ldr	r3, [pc, #168]	@ (8000b28 <MX_GPIO_Init+0xd0>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a82:	f003 0304 	and.w	r3, r3, #4
 8000a86:	613b      	str	r3, [r7, #16]
 8000a88:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	60fb      	str	r3, [r7, #12]
 8000a8e:	4b26      	ldr	r3, [pc, #152]	@ (8000b28 <MX_GPIO_Init+0xd0>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a92:	4a25      	ldr	r2, [pc, #148]	@ (8000b28 <MX_GPIO_Init+0xd0>)
 8000a94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a9a:	4b23      	ldr	r3, [pc, #140]	@ (8000b28 <MX_GPIO_Init+0xd0>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000aa2:	60fb      	str	r3, [r7, #12]
 8000aa4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	60bb      	str	r3, [r7, #8]
 8000aaa:	4b1f      	ldr	r3, [pc, #124]	@ (8000b28 <MX_GPIO_Init+0xd0>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aae:	4a1e      	ldr	r2, [pc, #120]	@ (8000b28 <MX_GPIO_Init+0xd0>)
 8000ab0:	f043 0301 	orr.w	r3, r3, #1
 8000ab4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ab6:	4b1c      	ldr	r3, [pc, #112]	@ (8000b28 <MX_GPIO_Init+0xd0>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aba:	f003 0301 	and.w	r3, r3, #1
 8000abe:	60bb      	str	r3, [r7, #8]
 8000ac0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	607b      	str	r3, [r7, #4]
 8000ac6:	4b18      	ldr	r3, [pc, #96]	@ (8000b28 <MX_GPIO_Init+0xd0>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aca:	4a17      	ldr	r2, [pc, #92]	@ (8000b28 <MX_GPIO_Init+0xd0>)
 8000acc:	f043 0302 	orr.w	r3, r3, #2
 8000ad0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ad2:	4b15      	ldr	r3, [pc, #84]	@ (8000b28 <MX_GPIO_Init+0xd0>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad6:	f003 0302 	and.w	r3, r3, #2
 8000ada:	607b      	str	r3, [r7, #4]
 8000adc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ade:	2200      	movs	r2, #0
 8000ae0:	2120      	movs	r1, #32
 8000ae2:	4812      	ldr	r0, [pc, #72]	@ (8000b2c <MX_GPIO_Init+0xd4>)
 8000ae4:	f001 fa7c 	bl	8001fe0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ae8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000aec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000aee:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000af2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af4:	2300      	movs	r3, #0
 8000af6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000af8:	f107 0314 	add.w	r3, r7, #20
 8000afc:	4619      	mov	r1, r3
 8000afe:	480c      	ldr	r0, [pc, #48]	@ (8000b30 <MX_GPIO_Init+0xd8>)
 8000b00:	f001 f8da 	bl	8001cb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b04:	2320      	movs	r3, #32
 8000b06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b10:	2300      	movs	r3, #0
 8000b12:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b14:	f107 0314 	add.w	r3, r7, #20
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4804      	ldr	r0, [pc, #16]	@ (8000b2c <MX_GPIO_Init+0xd4>)
 8000b1c:	f001 f8cc 	bl	8001cb8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b20:	bf00      	nop
 8000b22:	3728      	adds	r7, #40	@ 0x28
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	40023800 	.word	0x40023800
 8000b2c:	40020000 	.word	0x40020000
 8000b30:	40020800 	.word	0x40020800

08000b34 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b086      	sub	sp, #24
 8000b38:	af02      	add	r7, sp, #8
 8000b3a:	6078      	str	r0, [r7, #4]
	uint8_t dummy;
	if(!xQueueIsQueueFullFromISR(q_data))
 8000b3c:	4b1e      	ldr	r3, [pc, #120]	@ (8000bb8 <HAL_UART_RxCpltCallback+0x84>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4618      	mov	r0, r3
 8000b42:	f004 ffc0 	bl	8005ac6 <xQueueIsQueueFullFromISR>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d107      	bne.n	8000b5c <HAL_UART_RxCpltCallback+0x28>
	{
		/*Queue is not full */

		/*TODO: Enqueue data byte */
		xQueueSendToBackFromISR( q_data, (void*)&user_data, NULL);
 8000b4c:	4b1a      	ldr	r3, [pc, #104]	@ (8000bb8 <HAL_UART_RxCpltCallback+0x84>)
 8000b4e:	6818      	ldr	r0, [r3, #0]
 8000b50:	2300      	movs	r3, #0
 8000b52:	2200      	movs	r2, #0
 8000b54:	4919      	ldr	r1, [pc, #100]	@ (8000bbc <HAL_UART_RxCpltCallback+0x88>)
 8000b56:	f004 fc55 	bl	8005404 <xQueueGenericSendFromISR>
 8000b5a:	e013      	b.n	8000b84 <HAL_UART_RxCpltCallback+0x50>

	}else{
		/*Queue is full */
		//check, is user_data '\n'? */
		if(user_data == '\n' )
 8000b5c:	4b17      	ldr	r3, [pc, #92]	@ (8000bbc <HAL_UART_RxCpltCallback+0x88>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	b2db      	uxtb	r3, r3
 8000b62:	2b0a      	cmp	r3, #10
 8000b64:	d10e      	bne.n	8000b84 <HAL_UART_RxCpltCallback+0x50>
		{
			/*user_data = '\n' */

			/*TODO: make sure that last data byte of the queue is '\n' */
			xQueueReceiveFromISR(q_data,(void*)&dummy,NULL);	// Delete the last element on the queue to make space for \n
 8000b66:	4b14      	ldr	r3, [pc, #80]	@ (8000bb8 <HAL_UART_RxCpltCallback+0x84>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	f107 010f 	add.w	r1, r7, #15
 8000b6e:	2200      	movs	r2, #0
 8000b70:	4618      	mov	r0, r3
 8000b72:	f004 fddf 	bl	8005734 <xQueueReceiveFromISR>
			xQueueSendFromISR(q_data,(void*)&user_data,NULL);
 8000b76:	4b10      	ldr	r3, [pc, #64]	@ (8000bb8 <HAL_UART_RxCpltCallback+0x84>)
 8000b78:	6818      	ldr	r0, [r3, #0]
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	490f      	ldr	r1, [pc, #60]	@ (8000bbc <HAL_UART_RxCpltCallback+0x88>)
 8000b80:	f004 fc40 	bl	8005404 <xQueueGenericSendFromISR>
		}
	}



	if(user_data == '\n'){
 8000b84:	4b0d      	ldr	r3, [pc, #52]	@ (8000bbc <HAL_UART_RxCpltCallback+0x88>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	b2db      	uxtb	r3, r3
 8000b8a:	2b0a      	cmp	r3, #10
 8000b8c:	d10a      	bne.n	8000ba4 <HAL_UART_RxCpltCallback+0x70>
		/*send notification to command handling task if user_data = '\n' */
		xTaskNotifyFromISR(cmd_task_handle, 0, eNoAction, NULL);
 8000b8e:	4b0c      	ldr	r3, [pc, #48]	@ (8000bc0 <HAL_UART_RxCpltCallback+0x8c>)
 8000b90:	6818      	ldr	r0, [r3, #0]
 8000b92:	2300      	movs	r3, #0
 8000b94:	9301      	str	r3, [sp, #4]
 8000b96:	2300      	movs	r3, #0
 8000b98:	9300      	str	r3, [sp, #0]
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	f006 f9b4 	bl	8006f0c <xTaskGenericNotifyFromISR>

	}

	/* Enable UART data byte reception again in IT mode */
	 HAL_UART_Receive_IT(&huart2, (uint8_t*)&user_data, 1);
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	4905      	ldr	r1, [pc, #20]	@ (8000bbc <HAL_UART_RxCpltCallback+0x88>)
 8000ba8:	4806      	ldr	r0, [pc, #24]	@ (8000bc4 <HAL_UART_RxCpltCallback+0x90>)
 8000baa:	f003 fa1a 	bl	8003fe2 <HAL_UART_Receive_IT>
}
 8000bae:	bf00      	nop
 8000bb0:	3710      	adds	r7, #16
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	20000104 	.word	0x20000104
 8000bbc:	20000121 	.word	0x20000121
 8000bc0:	200000f4 	.word	0x200000f4
 8000bc4:	200000a8 	.word	0x200000a8

08000bc8 <fn_led_effect_callback>:

void fn_led_effect_callback(TimerHandle_t xTimer){
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b084      	sub	sp, #16
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
	int id;
	id = (uint32_t)pvTimerGetTimerID(xTimer);
 8000bd0:	6878      	ldr	r0, [r7, #4]
 8000bd2:	f006 fed9 	bl	8007988 <pvTimerGetTimerID>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	60fb      	str	r3, [r7, #12]

	switch(id){
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	3b01      	subs	r3, #1
 8000bde:	2b03      	cmp	r3, #3
 8000be0:	d816      	bhi.n	8000c10 <fn_led_effect_callback+0x48>
 8000be2:	a201      	add	r2, pc, #4	@ (adr r2, 8000be8 <fn_led_effect_callback+0x20>)
 8000be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000be8:	08000bf9 	.word	0x08000bf9
 8000bec:	08000bff 	.word	0x08000bff
 8000bf0:	08000c05 	.word	0x08000c05
 8000bf4:	08000c0b 	.word	0x08000c0b
	case 1:
		LED_effect1();
 8000bf8:	f7ff fd26 	bl	8000648 <LED_effect1>
		break;
 8000bfc:	e008      	b.n	8000c10 <fn_led_effect_callback+0x48>
	case 2:
		LED_effect2();
 8000bfe:	f7ff fd31 	bl	8000664 <LED_effect2>
		break;
 8000c02:	e005      	b.n	8000c10 <fn_led_effect_callback+0x48>
	case 3:
		LED_effect3();
 8000c04:	f7ff fd3c 	bl	8000680 <LED_effect3>
		break;
 8000c08:	e002      	b.n	8000c10 <fn_led_effect_callback+0x48>
	case 4:
		LED_effect4();
 8000c0a:	f7ff fd47 	bl	800069c <LED_effect4>
		break;
 8000c0e:	bf00      	nop
	}

}
 8000c10:	bf00      	nop
 8000c12:	3710      	adds	r7, #16
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}

08000c18 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a04      	ldr	r2, [pc, #16]	@ (8000c38 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d101      	bne.n	8000c2e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c2a:	f000 feb1 	bl	8001990 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c2e:	bf00      	nop
 8000c30:	3708      	adds	r7, #8
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	40001000 	.word	0x40001000

08000c3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c40:	b672      	cpsid	i
}
 8000c42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c44:	bf00      	nop
 8000c46:	e7fd      	b.n	8000c44 <Error_Handler+0x8>

08000c48 <show_time_date>:
 */

#include "main.h"


void show_time_date(void){
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b08c      	sub	sp, #48	@ 0x30
 8000c4c:	af04      	add	r7, sp, #16
	static char *date = showdate;

	RTC_DateTypeDef rtc_date;
	RTC_TimeTypeDef rtc_time;

	memset(&rtc_date, 0, sizeof(rtc_date));
 8000c4e:	f107 0318 	add.w	r3, r7, #24
 8000c52:	2204      	movs	r2, #4
 8000c54:	2100      	movs	r1, #0
 8000c56:	4618      	mov	r0, r3
 8000c58:	f007 fb02 	bl	8008260 <memset>
	memset(&rtc_time, 0, sizeof(rtc_time));
 8000c5c:	1d3b      	adds	r3, r7, #4
 8000c5e:	2214      	movs	r2, #20
 8000c60:	2100      	movs	r1, #0
 8000c62:	4618      	mov	r0, r3
 8000c64:	f007 fafc 	bl	8008260 <memset>

	/* Get Current time and date 	 */

	HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN);
 8000c68:	1d3b      	adds	r3, r7, #4
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	4816      	ldr	r0, [pc, #88]	@ (8000cc8 <show_time_date+0x80>)
 8000c70:	f002 fc4b 	bl	800350a <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &rtc_date, RTC_FORMAT_BIN);
 8000c74:	f107 0318 	add.w	r3, r7, #24
 8000c78:	2200      	movs	r2, #0
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	4812      	ldr	r0, [pc, #72]	@ (8000cc8 <show_time_date+0x80>)
 8000c7e:	f002 fd26 	bl	80036ce <HAL_RTC_GetDate>

	char *format;
	format = (rtc_time.TimeFormat == RTC_HOURFORMAT12_AM)? "AM" : "PM";
 8000c82:	79fb      	ldrb	r3, [r7, #7]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d101      	bne.n	8000c8c <show_time_date+0x44>
 8000c88:	4b10      	ldr	r3, [pc, #64]	@ (8000ccc <show_time_date+0x84>)
 8000c8a:	e000      	b.n	8000c8e <show_time_date+0x46>
 8000c8c:	4b10      	ldr	r3, [pc, #64]	@ (8000cd0 <show_time_date+0x88>)
 8000c8e:	61fb      	str	r3, [r7, #28]

	sprintf((char*) showtime, "%s: \t%02d:\t%02d:\t%02d [%s]\n", "\nCurrent Time & Date", rtc_time.Hours, rtc_time.Minutes, rtc_time.Seconds, format);
 8000c90:	793b      	ldrb	r3, [r7, #4]
 8000c92:	4618      	mov	r0, r3
 8000c94:	797b      	ldrb	r3, [r7, #5]
 8000c96:	461a      	mov	r2, r3
 8000c98:	79bb      	ldrb	r3, [r7, #6]
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	69fb      	ldr	r3, [r7, #28]
 8000c9e:	9302      	str	r3, [sp, #8]
 8000ca0:	9101      	str	r1, [sp, #4]
 8000ca2:	9200      	str	r2, [sp, #0]
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	4a0b      	ldr	r2, [pc, #44]	@ (8000cd4 <show_time_date+0x8c>)
 8000ca8:	490b      	ldr	r1, [pc, #44]	@ (8000cd8 <show_time_date+0x90>)
 8000caa:	480c      	ldr	r0, [pc, #48]	@ (8000cdc <show_time_date+0x94>)
 8000cac:	f007 fab8 	bl	8008220 <siprintf>
	xQueueSend(q_print, &time, portMAX_DELAY);
 8000cb0:	4b0b      	ldr	r3, [pc, #44]	@ (8000ce0 <show_time_date+0x98>)
 8000cb2:	6818      	ldr	r0, [r3, #0]
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	f04f 32ff 	mov.w	r2, #4294967295
 8000cba:	490a      	ldr	r1, [pc, #40]	@ (8000ce4 <show_time_date+0x9c>)
 8000cbc:	f004 faa0 	bl	8005200 <xQueueGenericSend>
}
 8000cc0:	bf00      	nop
 8000cc2:	3720      	adds	r7, #32
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	20000088 	.word	0x20000088
 8000ccc:	08008bc0 	.word	0x08008bc0
 8000cd0:	08008bc4 	.word	0x08008bc4
 8000cd4:	08008bc8 	.word	0x08008bc8
 8000cd8:	08008be0 	.word	0x08008be0
 8000cdc:	20000124 	.word	0x20000124
 8000ce0:	20000108 	.word	0x20000108
 8000ce4:	20000000 	.word	0x20000000

08000ce8 <rtc_configure_time>:


void rtc_configure_time(RTC_TimeTypeDef *time){
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]

	time->TimeFormat = RTC_HOURFORMAT12_AM;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	70da      	strb	r2, [r3, #3]
	time->DayLightSaving = RTC_DAYLIGHTSAVING_NONE ;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	60da      	str	r2, [r3, #12]
	time->StoreOperation = RTC_STOREOPERATION_RESET;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2200      	movs	r2, #0
 8000d00:	611a      	str	r2, [r3, #16]

	HAL_RTC_SetTime(&hrtc,time,RTC_FORMAT_BIN);
 8000d02:	2200      	movs	r2, #0
 8000d04:	6879      	ldr	r1, [r7, #4]
 8000d06:	4803      	ldr	r0, [pc, #12]	@ (8000d14 <rtc_configure_time+0x2c>)
 8000d08:	f002 fb65 	bl	80033d6 <HAL_RTC_SetTime>

}
 8000d0c:	bf00      	nop
 8000d0e:	3708      	adds	r7, #8
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	20000088 	.word	0x20000088

08000d18 <rtc_configure_date>:

void rtc_configure_date(RTC_DateTypeDef *date){
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
	HAL_RTC_SetDate(&hrtc,date,RTC_FORMAT_BIN);
 8000d20:	2200      	movs	r2, #0
 8000d22:	6879      	ldr	r1, [r7, #4]
 8000d24:	4803      	ldr	r0, [pc, #12]	@ (8000d34 <rtc_configure_date+0x1c>)
 8000d26:	f002 fc4e 	bl	80035c6 <HAL_RTC_SetDate>
}
 8000d2a:	bf00      	nop
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	20000088 	.word	0x20000088

08000d38 <validate_rtc_information>:

int validate_rtc_information(RTC_TimeTypeDef *time, RTC_DateTypeDef *date){
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
 8000d40:	6039      	str	r1, [r7, #0]
	if(time){
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d00d      	beq.n	8000d64 <validate_rtc_information+0x2c>
			if( (time->Hours > 12) || (time->Minutes > 59) || (time->Seconds > 59) )
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	2b0c      	cmp	r3, #12
 8000d4e:	d807      	bhi.n	8000d60 <validate_rtc_information+0x28>
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	785b      	ldrb	r3, [r3, #1]
 8000d54:	2b3b      	cmp	r3, #59	@ 0x3b
 8000d56:	d803      	bhi.n	8000d60 <validate_rtc_information+0x28>
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	789b      	ldrb	r3, [r3, #2]
 8000d5c:	2b3b      	cmp	r3, #59	@ 0x3b
 8000d5e:	d901      	bls.n	8000d64 <validate_rtc_information+0x2c>
				return 1;
 8000d60:	2301      	movs	r3, #1
 8000d62:	e015      	b.n	8000d90 <validate_rtc_information+0x58>
		}

		if(date){
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d011      	beq.n	8000d8e <validate_rtc_information+0x56>
			if( (date->Date > 31) || (date->WeekDay > 7) || (date->Year > 99) || (date->Month > 12) )
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	789b      	ldrb	r3, [r3, #2]
 8000d6e:	2b1f      	cmp	r3, #31
 8000d70:	d80b      	bhi.n	8000d8a <validate_rtc_information+0x52>
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	2b07      	cmp	r3, #7
 8000d78:	d807      	bhi.n	8000d8a <validate_rtc_information+0x52>
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	78db      	ldrb	r3, [r3, #3]
 8000d7e:	2b63      	cmp	r3, #99	@ 0x63
 8000d80:	d803      	bhi.n	8000d8a <validate_rtc_information+0x52>
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	785b      	ldrb	r3, [r3, #1]
 8000d86:	2b0c      	cmp	r3, #12
 8000d88:	d901      	bls.n	8000d8e <validate_rtc_information+0x56>
				return 1;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	e000      	b.n	8000d90 <validate_rtc_information+0x58>
		}

		return 0;
 8000d8e:	2300      	movs	r3, #0
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	370c      	adds	r7, #12
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr

08000d9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000da2:	2300      	movs	r3, #0
 8000da4:	607b      	str	r3, [r7, #4]
 8000da6:	4b10      	ldr	r3, [pc, #64]	@ (8000de8 <HAL_MspInit+0x4c>)
 8000da8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000daa:	4a0f      	ldr	r2, [pc, #60]	@ (8000de8 <HAL_MspInit+0x4c>)
 8000dac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000db0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000db2:	4b0d      	ldr	r3, [pc, #52]	@ (8000de8 <HAL_MspInit+0x4c>)
 8000db4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000db6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000dba:	607b      	str	r3, [r7, #4]
 8000dbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	603b      	str	r3, [r7, #0]
 8000dc2:	4b09      	ldr	r3, [pc, #36]	@ (8000de8 <HAL_MspInit+0x4c>)
 8000dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dc6:	4a08      	ldr	r2, [pc, #32]	@ (8000de8 <HAL_MspInit+0x4c>)
 8000dc8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000dcc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dce:	4b06      	ldr	r3, [pc, #24]	@ (8000de8 <HAL_MspInit+0x4c>)
 8000dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dd6:	603b      	str	r3, [r7, #0]
 8000dd8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dda:	bf00      	nop
 8000ddc:	370c      	adds	r7, #12
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	40023800 	.word	0x40023800

08000dec <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b09a      	sub	sp, #104	@ 0x68
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000df4:	f107 030c 	add.w	r3, r7, #12
 8000df8:	225c      	movs	r2, #92	@ 0x5c
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f007 fa2f 	bl	8008260 <memset>
  if(hrtc->Instance==RTC)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4a0c      	ldr	r2, [pc, #48]	@ (8000e38 <HAL_RTC_MspInit+0x4c>)
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	d111      	bne.n	8000e30 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000e0c:	2320      	movs	r3, #32
 8000e0e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000e10:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e14:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e16:	f107 030c 	add.w	r3, r7, #12
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f001 fa60 	bl	80022e0 <HAL_RCCEx_PeriphCLKConfig>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8000e26:	f7ff ff09 	bl	8000c3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000e2a:	4b04      	ldr	r3, [pc, #16]	@ (8000e3c <HAL_RTC_MspInit+0x50>)
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8000e30:	bf00      	nop
 8000e32:	3768      	adds	r7, #104	@ 0x68
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	40002800 	.word	0x40002800
 8000e3c:	42470e3c 	.word	0x42470e3c

08000e40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b08a      	sub	sp, #40	@ 0x28
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e48:	f107 0314 	add.w	r3, r7, #20
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	605a      	str	r2, [r3, #4]
 8000e52:	609a      	str	r2, [r3, #8]
 8000e54:	60da      	str	r2, [r3, #12]
 8000e56:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a1d      	ldr	r2, [pc, #116]	@ (8000ed4 <HAL_UART_MspInit+0x94>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d133      	bne.n	8000eca <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e62:	2300      	movs	r3, #0
 8000e64:	613b      	str	r3, [r7, #16]
 8000e66:	4b1c      	ldr	r3, [pc, #112]	@ (8000ed8 <HAL_UART_MspInit+0x98>)
 8000e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e6a:	4a1b      	ldr	r2, [pc, #108]	@ (8000ed8 <HAL_UART_MspInit+0x98>)
 8000e6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e70:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e72:	4b19      	ldr	r3, [pc, #100]	@ (8000ed8 <HAL_UART_MspInit+0x98>)
 8000e74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e7a:	613b      	str	r3, [r7, #16]
 8000e7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e7e:	2300      	movs	r3, #0
 8000e80:	60fb      	str	r3, [r7, #12]
 8000e82:	4b15      	ldr	r3, [pc, #84]	@ (8000ed8 <HAL_UART_MspInit+0x98>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e86:	4a14      	ldr	r2, [pc, #80]	@ (8000ed8 <HAL_UART_MspInit+0x98>)
 8000e88:	f043 0301 	orr.w	r3, r3, #1
 8000e8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e8e:	4b12      	ldr	r3, [pc, #72]	@ (8000ed8 <HAL_UART_MspInit+0x98>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e92:	f003 0301 	and.w	r3, r3, #1
 8000e96:	60fb      	str	r3, [r7, #12]
 8000e98:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e9a:	230c      	movs	r3, #12
 8000e9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea6:	2303      	movs	r3, #3
 8000ea8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000eaa:	2307      	movs	r3, #7
 8000eac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eae:	f107 0314 	add.w	r3, r7, #20
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4809      	ldr	r0, [pc, #36]	@ (8000edc <HAL_UART_MspInit+0x9c>)
 8000eb6:	f000 feff 	bl	8001cb8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 8000eba:	2200      	movs	r2, #0
 8000ebc:	2106      	movs	r1, #6
 8000ebe:	2026      	movs	r0, #38	@ 0x26
 8000ec0:	f000 fe3e 	bl	8001b40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ec4:	2026      	movs	r0, #38	@ 0x26
 8000ec6:	f000 fe57 	bl	8001b78 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000eca:	bf00      	nop
 8000ecc:	3728      	adds	r7, #40	@ 0x28
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	40004400 	.word	0x40004400
 8000ed8:	40023800 	.word	0x40023800
 8000edc:	40020000 	.word	0x40020000

08000ee0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b08e      	sub	sp, #56	@ 0x38
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000eec:	2300      	movs	r3, #0
 8000eee:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	60fb      	str	r3, [r7, #12]
 8000ef4:	4b33      	ldr	r3, [pc, #204]	@ (8000fc4 <HAL_InitTick+0xe4>)
 8000ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ef8:	4a32      	ldr	r2, [pc, #200]	@ (8000fc4 <HAL_InitTick+0xe4>)
 8000efa:	f043 0310 	orr.w	r3, r3, #16
 8000efe:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f00:	4b30      	ldr	r3, [pc, #192]	@ (8000fc4 <HAL_InitTick+0xe4>)
 8000f02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f04:	f003 0310 	and.w	r3, r3, #16
 8000f08:	60fb      	str	r3, [r7, #12]
 8000f0a:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f0c:	f107 0210 	add.w	r2, r7, #16
 8000f10:	f107 0314 	add.w	r3, r7, #20
 8000f14:	4611      	mov	r1, r2
 8000f16:	4618      	mov	r0, r3
 8000f18:	f001 f9b0 	bl	800227c <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000f1c:	6a3b      	ldr	r3, [r7, #32]
 8000f1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000f20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d103      	bne.n	8000f2e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000f26:	f001 f981 	bl	800222c <HAL_RCC_GetPCLK1Freq>
 8000f2a:	6378      	str	r0, [r7, #52]	@ 0x34
 8000f2c:	e004      	b.n	8000f38 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000f2e:	f001 f97d 	bl	800222c <HAL_RCC_GetPCLK1Freq>
 8000f32:	4603      	mov	r3, r0
 8000f34:	005b      	lsls	r3, r3, #1
 8000f36:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f3a:	4a23      	ldr	r2, [pc, #140]	@ (8000fc8 <HAL_InitTick+0xe8>)
 8000f3c:	fba2 2303 	umull	r2, r3, r2, r3
 8000f40:	0c9b      	lsrs	r3, r3, #18
 8000f42:	3b01      	subs	r3, #1
 8000f44:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000f46:	4b21      	ldr	r3, [pc, #132]	@ (8000fcc <HAL_InitTick+0xec>)
 8000f48:	4a21      	ldr	r2, [pc, #132]	@ (8000fd0 <HAL_InitTick+0xf0>)
 8000f4a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000f4c:	4b1f      	ldr	r3, [pc, #124]	@ (8000fcc <HAL_InitTick+0xec>)
 8000f4e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000f52:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000f54:	4a1d      	ldr	r2, [pc, #116]	@ (8000fcc <HAL_InitTick+0xec>)
 8000f56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f58:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000f5a:	4b1c      	ldr	r3, [pc, #112]	@ (8000fcc <HAL_InitTick+0xec>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f60:	4b1a      	ldr	r3, [pc, #104]	@ (8000fcc <HAL_InitTick+0xec>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f66:	4b19      	ldr	r3, [pc, #100]	@ (8000fcc <HAL_InitTick+0xec>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000f6c:	4817      	ldr	r0, [pc, #92]	@ (8000fcc <HAL_InitTick+0xec>)
 8000f6e:	f002 fcbb 	bl	80038e8 <HAL_TIM_Base_Init>
 8000f72:	4603      	mov	r3, r0
 8000f74:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000f78:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d11b      	bne.n	8000fb8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000f80:	4812      	ldr	r0, [pc, #72]	@ (8000fcc <HAL_InitTick+0xec>)
 8000f82:	f002 fd0b 	bl	800399c <HAL_TIM_Base_Start_IT>
 8000f86:	4603      	mov	r3, r0
 8000f88:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000f8c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d111      	bne.n	8000fb8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000f94:	2036      	movs	r0, #54	@ 0x36
 8000f96:	f000 fdef 	bl	8001b78 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2b0f      	cmp	r3, #15
 8000f9e:	d808      	bhi.n	8000fb2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	6879      	ldr	r1, [r7, #4]
 8000fa4:	2036      	movs	r0, #54	@ 0x36
 8000fa6:	f000 fdcb 	bl	8001b40 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000faa:	4a0a      	ldr	r2, [pc, #40]	@ (8000fd4 <HAL_InitTick+0xf4>)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	6013      	str	r3, [r2, #0]
 8000fb0:	e002      	b.n	8000fb8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000fb8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3738      	adds	r7, #56	@ 0x38
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	40023800 	.word	0x40023800
 8000fc8:	431bde83 	.word	0x431bde83
 8000fcc:	2000014c 	.word	0x2000014c
 8000fd0:	40001000 	.word	0x40001000
 8000fd4:	2000000c 	.word	0x2000000c

08000fd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fdc:	bf00      	nop
 8000fde:	e7fd      	b.n	8000fdc <NMI_Handler+0x4>

08000fe0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fe4:	bf00      	nop
 8000fe6:	e7fd      	b.n	8000fe4 <HardFault_Handler+0x4>

08000fe8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fec:	bf00      	nop
 8000fee:	e7fd      	b.n	8000fec <MemManage_Handler+0x4>

08000ff0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ff4:	bf00      	nop
 8000ff6:	e7fd      	b.n	8000ff4 <BusFault_Handler+0x4>

08000ff8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ffc:	bf00      	nop
 8000ffe:	e7fd      	b.n	8000ffc <UsageFault_Handler+0x4>

08001000 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001004:	bf00      	nop
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
	...

08001010 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001014:	4802      	ldr	r0, [pc, #8]	@ (8001020 <USART2_IRQHandler+0x10>)
 8001016:	f003 f809 	bl	800402c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800101a:	bf00      	nop
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	200000a8 	.word	0x200000a8

08001024 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001028:	4802      	ldr	r0, [pc, #8]	@ (8001034 <TIM6_DAC_IRQHandler+0x10>)
 800102a:	f002 fd27 	bl	8003a7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	2000014c 	.word	0x2000014c

08001038 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b086      	sub	sp, #24
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001040:	4a14      	ldr	r2, [pc, #80]	@ (8001094 <_sbrk+0x5c>)
 8001042:	4b15      	ldr	r3, [pc, #84]	@ (8001098 <_sbrk+0x60>)
 8001044:	1ad3      	subs	r3, r2, r3
 8001046:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800104c:	4b13      	ldr	r3, [pc, #76]	@ (800109c <_sbrk+0x64>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d102      	bne.n	800105a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001054:	4b11      	ldr	r3, [pc, #68]	@ (800109c <_sbrk+0x64>)
 8001056:	4a12      	ldr	r2, [pc, #72]	@ (80010a0 <_sbrk+0x68>)
 8001058:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800105a:	4b10      	ldr	r3, [pc, #64]	@ (800109c <_sbrk+0x64>)
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4413      	add	r3, r2
 8001062:	693a      	ldr	r2, [r7, #16]
 8001064:	429a      	cmp	r2, r3
 8001066:	d207      	bcs.n	8001078 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001068:	f007 f902 	bl	8008270 <__errno>
 800106c:	4603      	mov	r3, r0
 800106e:	220c      	movs	r2, #12
 8001070:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001072:	f04f 33ff 	mov.w	r3, #4294967295
 8001076:	e009      	b.n	800108c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001078:	4b08      	ldr	r3, [pc, #32]	@ (800109c <_sbrk+0x64>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800107e:	4b07      	ldr	r3, [pc, #28]	@ (800109c <_sbrk+0x64>)
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4413      	add	r3, r2
 8001086:	4a05      	ldr	r2, [pc, #20]	@ (800109c <_sbrk+0x64>)
 8001088:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800108a:	68fb      	ldr	r3, [r7, #12]
}
 800108c:	4618      	mov	r0, r3
 800108e:	3718      	adds	r7, #24
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	20020000 	.word	0x20020000
 8001098:	00000400 	.word	0x00000400
 800109c:	20000194 	.word	0x20000194
 80010a0:	20013090 	.word	0x20013090

080010a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010a8:	4b06      	ldr	r3, [pc, #24]	@ (80010c4 <SystemInit+0x20>)
 80010aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010ae:	4a05      	ldr	r2, [pc, #20]	@ (80010c4 <SystemInit+0x20>)
 80010b0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010b8:	bf00      	nop
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	e000ed00 	.word	0xe000ed00

080010c8 <menu_task_handler>:
void process_command(command_t *cmd);

const char* inv_msg = "Invalid Message \n";


void menu_task_handler(void* parameters){
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b088      	sub	sp, #32
 80010cc:	af02      	add	r7, sp, #8
 80010ce:	6078      	str	r0, [r7, #4]
	uint32_t cmd_addr;
	command_t *cmd;

	int option;

	const char* menu_msg =
 80010d0:	4b31      	ldr	r3, [pc, #196]	@ (8001198 <menu_task_handler+0xd0>)
 80010d2:	60bb      	str	r3, [r7, #8]



	while(1){

		xQueueSend(q_print, &menu_msg, portMAX_DELAY);
 80010d4:	4b31      	ldr	r3, [pc, #196]	@ (800119c <menu_task_handler+0xd4>)
 80010d6:	6818      	ldr	r0, [r3, #0]
 80010d8:	f107 0108 	add.w	r1, r7, #8
 80010dc:	2300      	movs	r3, #0
 80010de:	f04f 32ff 	mov.w	r2, #4294967295
 80010e2:	f004 f88d 	bl	8005200 <xQueueGenericSend>
		// wait for menu commands
		xTaskNotifyWait(0, 0, &cmd_addr, portMAX_DELAY );
 80010e6:	f107 030c 	add.w	r3, r7, #12
 80010ea:	f04f 32ff 	mov.w	r2, #4294967295
 80010ee:	9200      	str	r2, [sp, #0]
 80010f0:	2200      	movs	r2, #0
 80010f2:	2100      	movs	r1, #0
 80010f4:	2000      	movs	r0, #0
 80010f6:	f005 fd63 	bl	8006bc0 <xTaskGenericNotifyWait>
		cmd = (command_t*)cmd_addr;
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	617b      	str	r3, [r7, #20]

		if(cmd->len == 1){
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	7a9b      	ldrb	r3, [r3, #10]
 8001102:	2b01      	cmp	r3, #1
 8001104:	d133      	bne.n	800116e <menu_task_handler+0xa6>
			// Valid command
			option = cmd->payload[0] - 48;	// ASCII to int conversion
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	3b30      	subs	r3, #48	@ 0x30
 800110c:	613b      	str	r3, [r7, #16]
			switch(option){
 800110e:	693b      	ldr	r3, [r7, #16]
 8001110:	2b02      	cmp	r3, #2
 8001112:	d035      	beq.n	8001180 <menu_task_handler+0xb8>
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	2b02      	cmp	r3, #2
 8001118:	dc20      	bgt.n	800115c <menu_task_handler+0x94>
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d003      	beq.n	8001128 <menu_task_handler+0x60>
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	2b01      	cmp	r3, #1
 8001124:	d00d      	beq.n	8001142 <menu_task_handler+0x7a>
 8001126:	e019      	b.n	800115c <menu_task_handler+0x94>
				case 0:
					curr_state = sLEDEffect;
 8001128:	4b1d      	ldr	r3, [pc, #116]	@ (80011a0 <menu_task_handler+0xd8>)
 800112a:	2201      	movs	r2, #1
 800112c:	701a      	strb	r2, [r3, #0]
					xTaskNotify(led_task_handle,0,eNoAction);
 800112e:	4b1d      	ldr	r3, [pc, #116]	@ (80011a4 <menu_task_handler+0xdc>)
 8001130:	6818      	ldr	r0, [r3, #0]
 8001132:	2300      	movs	r3, #0
 8001134:	9300      	str	r3, [sp, #0]
 8001136:	2300      	movs	r3, #0
 8001138:	2200      	movs	r2, #0
 800113a:	2100      	movs	r1, #0
 800113c:	f005 fdc0 	bl	8006cc0 <xTaskGenericNotify>
					break;
 8001140:	e01f      	b.n	8001182 <menu_task_handler+0xba>
				case 1:
					curr_state = sRTCMenu;
 8001142:	4b17      	ldr	r3, [pc, #92]	@ (80011a0 <menu_task_handler+0xd8>)
 8001144:	2202      	movs	r2, #2
 8001146:	701a      	strb	r2, [r3, #0]
					xTaskNotify(rtc_task_handle,0,eNoAction);
 8001148:	4b17      	ldr	r3, [pc, #92]	@ (80011a8 <menu_task_handler+0xe0>)
 800114a:	6818      	ldr	r0, [r3, #0]
 800114c:	2300      	movs	r3, #0
 800114e:	9300      	str	r3, [sp, #0]
 8001150:	2300      	movs	r3, #0
 8001152:	2200      	movs	r2, #0
 8001154:	2100      	movs	r1, #0
 8001156:	f005 fdb3 	bl	8006cc0 <xTaskGenericNotify>
					break;
 800115a:	e012      	b.n	8001182 <menu_task_handler+0xba>
				case 2:
					break;
				default:
					xQueueSend(q_print,&inv_msg,portMAX_DELAY);
 800115c:	4b0f      	ldr	r3, [pc, #60]	@ (800119c <menu_task_handler+0xd4>)
 800115e:	6818      	ldr	r0, [r3, #0]
 8001160:	2300      	movs	r3, #0
 8001162:	f04f 32ff 	mov.w	r2, #4294967295
 8001166:	4911      	ldr	r1, [pc, #68]	@ (80011ac <menu_task_handler+0xe4>)
 8001168:	f004 f84a 	bl	8005200 <xQueueGenericSend>
					continue;
 800116c:	e012      	b.n	8001194 <menu_task_handler+0xcc>
			}
		}
		else{
			//invalid entry
			xQueueSend(q_print, &inv_msg, portMAX_DELAY);
 800116e:	4b0b      	ldr	r3, [pc, #44]	@ (800119c <menu_task_handler+0xd4>)
 8001170:	6818      	ldr	r0, [r3, #0]
 8001172:	2300      	movs	r3, #0
 8001174:	f04f 32ff 	mov.w	r2, #4294967295
 8001178:	490c      	ldr	r1, [pc, #48]	@ (80011ac <menu_task_handler+0xe4>)
 800117a:	f004 f841 	bl	8005200 <xQueueGenericSend>
			continue;
 800117e:	e009      	b.n	8001194 <menu_task_handler+0xcc>
					break;
 8001180:	bf00      	nop
		}
		// Wait to run again when some other task notifies
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY );
 8001182:	f04f 33ff 	mov.w	r3, #4294967295
 8001186:	9300      	str	r3, [sp, #0]
 8001188:	2300      	movs	r3, #0
 800118a:	2200      	movs	r2, #0
 800118c:	2100      	movs	r1, #0
 800118e:	2000      	movs	r0, #0
 8001190:	f005 fd16 	bl	8006bc0 <xTaskGenericNotifyWait>
		xQueueSend(q_print, &menu_msg, portMAX_DELAY);
 8001194:	e79e      	b.n	80010d4 <menu_task_handler+0xc>
 8001196:	bf00      	nop
 8001198:	08008c10 	.word	0x08008c10
 800119c:	20000108 	.word	0x20000108
 80011a0:	20000120 	.word	0x20000120
 80011a4:	200000fc 	.word	0x200000fc
 80011a8:	20000100 	.word	0x20000100
 80011ac:	20000008 	.word	0x20000008

080011b0 <cmd_task_handler>:
	} // while super loop end
}


void cmd_task_handler(void* parameters){
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b088      	sub	sp, #32
 80011b4:	af02      	add	r7, sp, #8
 80011b6:	6078      	str	r0, [r7, #4]

	BaseType_t ret;
	command_t cmd;
		while(1){
			/* Notify Wait */
			ret = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 80011b8:	f04f 33ff 	mov.w	r3, #4294967295
 80011bc:	9300      	str	r3, [sp, #0]
 80011be:	2300      	movs	r3, #0
 80011c0:	2200      	movs	r2, #0
 80011c2:	2100      	movs	r1, #0
 80011c4:	2000      	movs	r0, #0
 80011c6:	f005 fcfb 	bl	8006bc0 <xTaskGenericNotifyWait>
 80011ca:	6178      	str	r0, [r7, #20]

			if(ret == pdTRUE){
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d1f2      	bne.n	80011b8 <cmd_task_handler+0x8>
				/* process the user data (command) stored in input data queue */
				process_command(&cmd);
 80011d2:	f107 0308 	add.w	r3, r7, #8
 80011d6:	4618      	mov	r0, r3
 80011d8:	f000 fb2e 	bl	8001838 <process_command>
			ret = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 80011dc:	e7ec      	b.n	80011b8 <cmd_task_handler+0x8>
	...

080011e0 <print_task_handler>:


	}
}

void print_task_handler(void* parameters){
 80011e0:	b590      	push	{r4, r7, lr}
 80011e2:	b085      	sub	sp, #20
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
	uint32_t *msg;
	while(1){
		xQueueReceive(q_print, &msg, portMAX_DELAY);
 80011e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001218 <print_task_handler+0x38>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f107 010c 	add.w	r1, r7, #12
 80011f0:	f04f 32ff 	mov.w	r2, #4294967295
 80011f4:	4618      	mov	r0, r3
 80011f6:	f004 f9bb 	bl	8005570 <xQueueReceive>
		HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen((char*)msg), HAL_MAX_DELAY);
 80011fa:	68fc      	ldr	r4, [r7, #12]
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	4618      	mov	r0, r3
 8001200:	f7ff f810 	bl	8000224 <strlen>
 8001204:	4603      	mov	r3, r0
 8001206:	b29a      	uxth	r2, r3
 8001208:	f04f 33ff 	mov.w	r3, #4294967295
 800120c:	4621      	mov	r1, r4
 800120e:	4803      	ldr	r0, [pc, #12]	@ (800121c <print_task_handler+0x3c>)
 8001210:	f002 fe5c 	bl	8003ecc <HAL_UART_Transmit>
		xQueueReceive(q_print, &msg, portMAX_DELAY);
 8001214:	bf00      	nop
 8001216:	e7e7      	b.n	80011e8 <print_task_handler+0x8>
 8001218:	20000108 	.word	0x20000108
 800121c:	200000a8 	.word	0x200000a8

08001220 <led_task_handler>:
}

/*
 * Displays LED Menu
 */
void led_task_handler(void* parameters){
 8001220:	b580      	push	{r7, lr}
 8001222:	b088      	sub	sp, #32
 8001224:	af02      	add	r7, sp, #8
 8001226:	6078      	str	r0, [r7, #4]
	uint32_t cmd_addr;
		command_t *cmd;
		const char* msg_led = "========================\n"
 8001228:	4b40      	ldr	r3, [pc, #256]	@ (800132c <led_task_handler+0x10c>)
 800122a:	60fb      	str	r3, [r7, #12]
							  "|      LED Effect     |\n"
							  "========================\n"
							  "(none,e1,e2,e3,e4)\n"
							  "Enter your choice here : ";
		const char* inv_msg = "Invalid Message \n";
 800122c:	4b40      	ldr	r3, [pc, #256]	@ (8001330 <led_task_handler+0x110>)
 800122e:	60bb      	str	r3, [r7, #8]
		while(1){
			/*Wait for notification (Notify wait) */
			xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8001230:	f04f 33ff 	mov.w	r3, #4294967295
 8001234:	9300      	str	r3, [sp, #0]
 8001236:	2300      	movs	r3, #0
 8001238:	2200      	movs	r2, #0
 800123a:	2100      	movs	r1, #0
 800123c:	2000      	movs	r0, #0
 800123e:	f005 fcbf 	bl	8006bc0 <xTaskGenericNotifyWait>

			/*Print LED menu */
			xQueueSend(q_print,&msg_led,portMAX_DELAY);
 8001242:	4b3c      	ldr	r3, [pc, #240]	@ (8001334 <led_task_handler+0x114>)
 8001244:	6818      	ldr	r0, [r3, #0]
 8001246:	f107 010c 	add.w	r1, r7, #12
 800124a:	2300      	movs	r3, #0
 800124c:	f04f 32ff 	mov.w	r2, #4294967295
 8001250:	f003 ffd6 	bl	8005200 <xQueueGenericSend>

			/*wait for LED command (Notify wait) */
			xTaskNotifyWait(0,0,&cmd_addr,portMAX_DELAY);
 8001254:	f107 0310 	add.w	r3, r7, #16
 8001258:	f04f 32ff 	mov.w	r2, #4294967295
 800125c:	9200      	str	r2, [sp, #0]
 800125e:	2200      	movs	r2, #0
 8001260:	2100      	movs	r1, #0
 8001262:	2000      	movs	r0, #0
 8001264:	f005 fcac 	bl	8006bc0 <xTaskGenericNotifyWait>
			cmd = (command_t*)cmd_addr;
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	617b      	str	r3, [r7, #20]

			if(cmd->len <= 4)
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	7a9b      	ldrb	r3, [r3, #10]
 8001270:	2b04      	cmp	r3, #4
 8001272:	d844      	bhi.n	80012fe <led_task_handler+0xde>
			{
				if(! strcmp((char*)cmd->payload,"none"))
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	4930      	ldr	r1, [pc, #192]	@ (8001338 <led_task_handler+0x118>)
 8001278:	4618      	mov	r0, r3
 800127a:	f7fe ffc9 	bl	8000210 <strcmp>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d102      	bne.n	800128a <led_task_handler+0x6a>
					led_effect_stop();
 8001284:	f7ff f9a4 	bl	80005d0 <led_effect_stop>
 8001288:	e042      	b.n	8001310 <led_task_handler+0xf0>
				else if (! strcmp((char*)cmd->payload,"e1"))
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	492b      	ldr	r1, [pc, #172]	@ (800133c <led_task_handler+0x11c>)
 800128e:	4618      	mov	r0, r3
 8001290:	f7fe ffbe 	bl	8000210 <strcmp>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d103      	bne.n	80012a2 <led_task_handler+0x82>
					led_effect(1);
 800129a:	2001      	movs	r0, #1
 800129c:	f7ff f9b8 	bl	8000610 <led_effect>
 80012a0:	e036      	b.n	8001310 <led_task_handler+0xf0>
				else if (! strcmp((char*)cmd->payload,"e2"))
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	4926      	ldr	r1, [pc, #152]	@ (8001340 <led_task_handler+0x120>)
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7fe ffb2 	bl	8000210 <strcmp>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d103      	bne.n	80012ba <led_task_handler+0x9a>
					led_effect(2);
 80012b2:	2002      	movs	r0, #2
 80012b4:	f7ff f9ac 	bl	8000610 <led_effect>
 80012b8:	e02a      	b.n	8001310 <led_task_handler+0xf0>
				else if (! strcmp((char*)cmd->payload,"e3"))
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	4921      	ldr	r1, [pc, #132]	@ (8001344 <led_task_handler+0x124>)
 80012be:	4618      	mov	r0, r3
 80012c0:	f7fe ffa6 	bl	8000210 <strcmp>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d103      	bne.n	80012d2 <led_task_handler+0xb2>
					led_effect(3);
 80012ca:	2003      	movs	r0, #3
 80012cc:	f7ff f9a0 	bl	8000610 <led_effect>
 80012d0:	e01e      	b.n	8001310 <led_task_handler+0xf0>
				else if (! strcmp((char*)cmd->payload,"e4"))
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	491c      	ldr	r1, [pc, #112]	@ (8001348 <led_task_handler+0x128>)
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7fe ff9a 	bl	8000210 <strcmp>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d103      	bne.n	80012ea <led_task_handler+0xca>
					led_effect(4);
 80012e2:	2004      	movs	r0, #4
 80012e4:	f7ff f994 	bl	8000610 <led_effect>
 80012e8:	e012      	b.n	8001310 <led_task_handler+0xf0>
				else
					xQueueSend(q_print,&inv_msg,portMAX_DELAY); /*print invalid message */
 80012ea:	4b12      	ldr	r3, [pc, #72]	@ (8001334 <led_task_handler+0x114>)
 80012ec:	6818      	ldr	r0, [r3, #0]
 80012ee:	f107 0108 	add.w	r1, r7, #8
 80012f2:	2300      	movs	r3, #0
 80012f4:	f04f 32ff 	mov.w	r2, #4294967295
 80012f8:	f003 ff82 	bl	8005200 <xQueueGenericSend>
 80012fc:	e008      	b.n	8001310 <led_task_handler+0xf0>
			}else
				xQueueSend(q_print,&inv_msg,portMAX_DELAY);
 80012fe:	4b0d      	ldr	r3, [pc, #52]	@ (8001334 <led_task_handler+0x114>)
 8001300:	6818      	ldr	r0, [r3, #0]
 8001302:	f107 0108 	add.w	r1, r7, #8
 8001306:	2300      	movs	r3, #0
 8001308:	f04f 32ff 	mov.w	r2, #4294967295
 800130c:	f003 ff78 	bl	8005200 <xQueueGenericSend>

			/* update state variable */
			curr_state = sMainMenu;
 8001310:	4b0e      	ldr	r3, [pc, #56]	@ (800134c <led_task_handler+0x12c>)
 8001312:	2200      	movs	r2, #0
 8001314:	701a      	strb	r2, [r3, #0]

			/*Notify menu task */
			xTaskNotify(menu_task_handle,0,eNoAction);
 8001316:	4b0e      	ldr	r3, [pc, #56]	@ (8001350 <led_task_handler+0x130>)
 8001318:	6818      	ldr	r0, [r3, #0]
 800131a:	2300      	movs	r3, #0
 800131c:	9300      	str	r3, [sp, #0]
 800131e:	2300      	movs	r3, #0
 8001320:	2200      	movs	r2, #0
 8001322:	2100      	movs	r1, #0
 8001324:	f005 fccc 	bl	8006cc0 <xTaskGenericNotify>
			xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8001328:	e782      	b.n	8001230 <led_task_handler+0x10>
 800132a:	bf00      	nop
 800132c:	08008cfc 	.word	0x08008cfc
 8001330:	08008bfc 	.word	0x08008bfc
 8001334:	20000108 	.word	0x20000108
 8001338:	08008d74 	.word	0x08008d74
 800133c:	08008d7c 	.word	0x08008d7c
 8001340:	08008d80 	.word	0x08008d80
 8001344:	08008d84 	.word	0x08008d84
 8001348:	08008d88 	.word	0x08008d88
 800134c:	20000120 	.word	0x20000120
 8001350:	200000f0 	.word	0x200000f0

08001354 <rtc_task_handler>:
}

/*
 * Displays RTC Task Menu
 */
void rtc_task_handler(void* parameters){
 8001354:	b590      	push	{r4, r7, lr}
 8001356:	b09b      	sub	sp, #108	@ 0x6c
 8001358:	af02      	add	r7, sp, #8
 800135a:	6078      	str	r0, [r7, #4]
	const char* msg_rtc1 = "========================\n"
 800135c:	4bb3      	ldr	r3, [pc, #716]	@ (800162c <rtc_task_handler+0x2d8>)
 800135e:	64fb      	str	r3, [r7, #76]	@ 0x4c
						   "           RTC          \n"
						   "========================\n";

		const char* msg_rtc2 =  "Configure Time            ----> 0\n"
 8001360:	4bb3      	ldr	r3, [pc, #716]	@ (8001630 <rtc_task_handler+0x2dc>)
 8001362:	64bb      	str	r3, [r7, #72]	@ 0x48
								"Enable reporting          ----> 2\n"
								"Exit                      ----> 3\n"
								"Enter your choice here : ";


		const char *msg_rtc_hh = "Enter hour(1-12):";
 8001364:	4bb3      	ldr	r3, [pc, #716]	@ (8001634 <rtc_task_handler+0x2e0>)
 8001366:	647b      	str	r3, [r7, #68]	@ 0x44
		const char *msg_rtc_mm = "Enter minutes(0-59):";
 8001368:	4bb3      	ldr	r3, [pc, #716]	@ (8001638 <rtc_task_handler+0x2e4>)
 800136a:	643b      	str	r3, [r7, #64]	@ 0x40
		const char *msg_rtc_ss = "Enter seconds(0-59):";
 800136c:	4bb3      	ldr	r3, [pc, #716]	@ (800163c <rtc_task_handler+0x2e8>)
 800136e:	63fb      	str	r3, [r7, #60]	@ 0x3c

		const char *msg_rtc_dd  = "Enter date(1-31):";
 8001370:	4bb3      	ldr	r3, [pc, #716]	@ (8001640 <rtc_task_handler+0x2ec>)
 8001372:	63bb      	str	r3, [r7, #56]	@ 0x38
		const char *msg_rtc_mo  = "Enter month(1-12):";
 8001374:	4bb3      	ldr	r3, [pc, #716]	@ (8001644 <rtc_task_handler+0x2f0>)
 8001376:	637b      	str	r3, [r7, #52]	@ 0x34
		const char *msg_rtc_dow = "Enter day(1-7 sun:1):";
 8001378:	4bb3      	ldr	r3, [pc, #716]	@ (8001648 <rtc_task_handler+0x2f4>)
 800137a:	633b      	str	r3, [r7, #48]	@ 0x30
		const char *msg_rtc_yr  = "Enter year(0-99):";
 800137c:	4bb3      	ldr	r3, [pc, #716]	@ (800164c <rtc_task_handler+0x2f8>)
 800137e:	62fb      	str	r3, [r7, #44]	@ 0x2c

		const char *msg_conf = "Configuration successful\n";
 8001380:	4bb3      	ldr	r3, [pc, #716]	@ (8001650 <rtc_task_handler+0x2fc>)
 8001382:	62bb      	str	r3, [r7, #40]	@ 0x28
		const char *msg_rtc_report = "Enable time&date reporting(y/n)?: ";
 8001384:	4bb3      	ldr	r3, [pc, #716]	@ (8001654 <rtc_task_handler+0x300>)
 8001386:	627b      	str	r3, [r7, #36]	@ 0x24
		RTC_DateTypeDef date;
		RTC_TimeTypeDef time;

		while(1){
			/* Notify wait (wait till someone notifies)*/
			xTaskNotifyWait(0, 0, NULL, portMAX_DELAY );
 8001388:	f04f 33ff 	mov.w	r3, #4294967295
 800138c:	9300      	str	r3, [sp, #0]
 800138e:	2300      	movs	r3, #0
 8001390:	2200      	movs	r2, #0
 8001392:	2100      	movs	r1, #0
 8001394:	2000      	movs	r0, #0
 8001396:	f005 fc13 	bl	8006bc0 <xTaskGenericNotifyWait>
			/* Print the menu and show current date and time information */
			xQueueSend(q_print, &msg_rtc1, portMAX_DELAY);
 800139a:	4baf      	ldr	r3, [pc, #700]	@ (8001658 <rtc_task_handler+0x304>)
 800139c:	6818      	ldr	r0, [r3, #0]
 800139e:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 80013a2:	2300      	movs	r3, #0
 80013a4:	f04f 32ff 	mov.w	r2, #4294967295
 80013a8:	f003 ff2a 	bl	8005200 <xQueueGenericSend>
			show_time_date();
 80013ac:	f7ff fc4c 	bl	8000c48 <show_time_date>
			xQueueSend(q_print,&msg_rtc2,portMAX_DELAY);
 80013b0:	4ba9      	ldr	r3, [pc, #676]	@ (8001658 <rtc_task_handler+0x304>)
 80013b2:	6818      	ldr	r0, [r3, #0]
 80013b4:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 80013b8:	2300      	movs	r3, #0
 80013ba:	f04f 32ff 	mov.w	r2, #4294967295
 80013be:	f003 ff1f 	bl	8005200 <xQueueGenericSend>

			while(curr_state != sMainMenu){
 80013c2:	e1e4      	b.n	800178e <rtc_task_handler+0x43a>

				/* Wait for command notification (Notify wait) */
				xTaskNotifyWait(0, 0, &cmd_addr, portMAX_DELAY );
 80013c4:	f107 0320 	add.w	r3, r7, #32
 80013c8:	f04f 32ff 	mov.w	r2, #4294967295
 80013cc:	9200      	str	r2, [sp, #0]
 80013ce:	2200      	movs	r2, #0
 80013d0:	2100      	movs	r1, #0
 80013d2:	2000      	movs	r0, #0
 80013d4:	f005 fbf4 	bl	8006bc0 <xTaskGenericNotifyWait>
				cmd = (command_t*)cmd_addr;
 80013d8:	6a3b      	ldr	r3, [r7, #32]
 80013da:	65fb      	str	r3, [r7, #92]	@ 0x5c

				switch(curr_state)
 80013dc:	4b9f      	ldr	r3, [pc, #636]	@ (800165c <rtc_task_handler+0x308>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	3b02      	subs	r3, #2
 80013e2:	2b03      	cmp	r3, #3
 80013e4:	f200 81d3 	bhi.w	800178e <rtc_task_handler+0x43a>
 80013e8:	a201      	add	r2, pc, #4	@ (adr r2, 80013f0 <rtc_task_handler+0x9c>)
 80013ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013ee:	bf00      	nop
 80013f0:	08001401 	.word	0x08001401
 80013f4:	080014b5 	.word	0x080014b5
 80013f8:	080015a3 	.word	0x080015a3
 80013fc:	0800171b 	.word	0x0800171b
				{
					case sRTCMenu:{
						/* process RTC menu commands */
						if(cmd->len == 1){
 8001400:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001402:	7a9b      	ldrb	r3, [r3, #10]
 8001404:	2b01      	cmp	r3, #1
 8001406:	d148      	bne.n	800149a <rtc_task_handler+0x146>
							menu_code = cmd->payload[0] - 48;
 8001408:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	3b30      	subs	r3, #48	@ 0x30
 800140e:	653b      	str	r3, [r7, #80]	@ 0x50
 8001410:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001412:	2b03      	cmp	r3, #3
 8001414:	d835      	bhi.n	8001482 <rtc_task_handler+0x12e>
 8001416:	a201      	add	r2, pc, #4	@ (adr r2, 800141c <rtc_task_handler+0xc8>)
 8001418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800141c:	0800142d 	.word	0x0800142d
 8001420:	08001447 	.word	0x08001447
 8001424:	08001461 	.word	0x08001461
 8001428:	0800147b 	.word	0x0800147b
							switch(menu_code){
							case 0:
								curr_state = sRTCTimeConfig;
 800142c:	4b8b      	ldr	r3, [pc, #556]	@ (800165c <rtc_task_handler+0x308>)
 800142e:	2203      	movs	r2, #3
 8001430:	701a      	strb	r2, [r3, #0]
								xQueueSend(q_print, &msg_rtc_hh , portMAX_DELAY);
 8001432:	4b89      	ldr	r3, [pc, #548]	@ (8001658 <rtc_task_handler+0x304>)
 8001434:	6818      	ldr	r0, [r3, #0]
 8001436:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 800143a:	2300      	movs	r3, #0
 800143c:	f04f 32ff 	mov.w	r2, #4294967295
 8001440:	f003 fede 	bl	8005200 <xQueueGenericSend>
								break;
 8001444:	e035      	b.n	80014b2 <rtc_task_handler+0x15e>
							case 1:
								curr_state = sRTCDateConfig;
 8001446:	4b85      	ldr	r3, [pc, #532]	@ (800165c <rtc_task_handler+0x308>)
 8001448:	2204      	movs	r2, #4
 800144a:	701a      	strb	r2, [r3, #0]
								xQueueSend(q_print, &msg_rtc_dd , portMAX_DELAY);
 800144c:	4b82      	ldr	r3, [pc, #520]	@ (8001658 <rtc_task_handler+0x304>)
 800144e:	6818      	ldr	r0, [r3, #0]
 8001450:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8001454:	2300      	movs	r3, #0
 8001456:	f04f 32ff 	mov.w	r2, #4294967295
 800145a:	f003 fed1 	bl	8005200 <xQueueGenericSend>
								break;
 800145e:	e028      	b.n	80014b2 <rtc_task_handler+0x15e>
							case 2:
								curr_state = sRTCReport;
 8001460:	4b7e      	ldr	r3, [pc, #504]	@ (800165c <rtc_task_handler+0x308>)
 8001462:	2205      	movs	r2, #5
 8001464:	701a      	strb	r2, [r3, #0]
								xQueueSend(q_print, &msg_rtc_report , portMAX_DELAY);
 8001466:	4b7c      	ldr	r3, [pc, #496]	@ (8001658 <rtc_task_handler+0x304>)
 8001468:	6818      	ldr	r0, [r3, #0]
 800146a:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 800146e:	2300      	movs	r3, #0
 8001470:	f04f 32ff 	mov.w	r2, #4294967295
 8001474:	f003 fec4 	bl	8005200 <xQueueGenericSend>
								break;
 8001478:	e01b      	b.n	80014b2 <rtc_task_handler+0x15e>
							case 3:
								curr_state = sMainMenu;
 800147a:	4b78      	ldr	r3, [pc, #480]	@ (800165c <rtc_task_handler+0x308>)
 800147c:	2200      	movs	r2, #0
 800147e:	701a      	strb	r2, [r3, #0]
								break;
 8001480:	e017      	b.n	80014b2 <rtc_task_handler+0x15e>
							default:
								curr_state = sMainMenu;
 8001482:	4b76      	ldr	r3, [pc, #472]	@ (800165c <rtc_task_handler+0x308>)
 8001484:	2200      	movs	r2, #0
 8001486:	701a      	strb	r2, [r3, #0]
								xQueueSend(q_print, &inv_msg , portMAX_DELAY);
 8001488:	4b73      	ldr	r3, [pc, #460]	@ (8001658 <rtc_task_handler+0x304>)
 800148a:	6818      	ldr	r0, [r3, #0]
 800148c:	2300      	movs	r3, #0
 800148e:	f04f 32ff 	mov.w	r2, #4294967295
 8001492:	4973      	ldr	r1, [pc, #460]	@ (8001660 <rtc_task_handler+0x30c>)
 8001494:	f003 feb4 	bl	8005200 <xQueueGenericSend>
						}else{
							curr_state = sMainMenu;
							xQueueSend(q_print, &inv_msg, portMAX_DELAY);
						}

						break;}
 8001498:	e179      	b.n	800178e <rtc_task_handler+0x43a>
							curr_state = sMainMenu;
 800149a:	4b70      	ldr	r3, [pc, #448]	@ (800165c <rtc_task_handler+0x308>)
 800149c:	2200      	movs	r2, #0
 800149e:	701a      	strb	r2, [r3, #0]
							xQueueSend(q_print, &inv_msg, portMAX_DELAY);
 80014a0:	4b6d      	ldr	r3, [pc, #436]	@ (8001658 <rtc_task_handler+0x304>)
 80014a2:	6818      	ldr	r0, [r3, #0]
 80014a4:	2300      	movs	r3, #0
 80014a6:	f04f 32ff 	mov.w	r2, #4294967295
 80014aa:	496d      	ldr	r1, [pc, #436]	@ (8001660 <rtc_task_handler+0x30c>)
 80014ac:	f003 fea8 	bl	8005200 <xQueueGenericSend>
						break;}
 80014b0:	e16d      	b.n	800178e <rtc_task_handler+0x43a>
 80014b2:	e16c      	b.n	800178e <rtc_task_handler+0x43a>

					case sRTCTimeConfig:{
						/* get hh, mm, ss infor and configure RTC */
						switch(rtc_state){
 80014b4:	4b6b      	ldr	r3, [pc, #428]	@ (8001664 <rtc_task_handler+0x310>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	2b02      	cmp	r3, #2
 80014ba:	d03b      	beq.n	8001534 <rtc_task_handler+0x1e0>
 80014bc:	2b02      	cmp	r3, #2
 80014be:	f300 8165 	bgt.w	800178c <rtc_task_handler+0x438>
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d002      	beq.n	80014cc <rtc_task_handler+0x178>
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	d01a      	beq.n	8001500 <rtc_task_handler+0x1ac>
								curr_state = sMainMenu;
								break;
						}

						/* take care of invalid entries */
						break;}
 80014ca:	e15f      	b.n	800178c <rtc_task_handler+0x438>
								uint8_t hour = getnumber(cmd->payload, cmd->len);
 80014cc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80014ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80014d0:	7a9b      	ldrb	r3, [r3, #10]
 80014d2:	4619      	mov	r1, r3
 80014d4:	4610      	mov	r0, r2
 80014d6:	f000 f9eb 	bl	80018b0 <getnumber>
 80014da:	4603      	mov	r3, r0
 80014dc:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
								time.Hours = hour;
 80014e0:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80014e4:	723b      	strb	r3, [r7, #8]
								rtc_state = MIN_conf;
 80014e6:	4b5f      	ldr	r3, [pc, #380]	@ (8001664 <rtc_task_handler+0x310>)
 80014e8:	2201      	movs	r2, #1
 80014ea:	601a      	str	r2, [r3, #0]
								xQueueSend(q_print, &msg_rtc_mm , portMAX_DELAY);
 80014ec:	4b5a      	ldr	r3, [pc, #360]	@ (8001658 <rtc_task_handler+0x304>)
 80014ee:	6818      	ldr	r0, [r3, #0]
 80014f0:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 80014f4:	2300      	movs	r3, #0
 80014f6:	f04f 32ff 	mov.w	r2, #4294967295
 80014fa:	f003 fe81 	bl	8005200 <xQueueGenericSend>
								break;
 80014fe:	e04f      	b.n	80015a0 <rtc_task_handler+0x24c>
								uint8_t min = getnumber(cmd->payload, cmd->len);
 8001500:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8001502:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001504:	7a9b      	ldrb	r3, [r3, #10]
 8001506:	4619      	mov	r1, r3
 8001508:	4610      	mov	r0, r2
 800150a:	f000 f9d1 	bl	80018b0 <getnumber>
 800150e:	4603      	mov	r3, r0
 8001510:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
								time.Minutes = min;
 8001514:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8001518:	727b      	strb	r3, [r7, #9]
								xQueueSend(q_print, &msg_rtc_ss , portMAX_DELAY);
 800151a:	4b4f      	ldr	r3, [pc, #316]	@ (8001658 <rtc_task_handler+0x304>)
 800151c:	6818      	ldr	r0, [r3, #0]
 800151e:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8001522:	2300      	movs	r3, #0
 8001524:	f04f 32ff 	mov.w	r2, #4294967295
 8001528:	f003 fe6a 	bl	8005200 <xQueueGenericSend>
								rtc_state = SEC_conf;
 800152c:	4b4d      	ldr	r3, [pc, #308]	@ (8001664 <rtc_task_handler+0x310>)
 800152e:	2202      	movs	r2, #2
 8001530:	601a      	str	r2, [r3, #0]
								break;
 8001532:	e035      	b.n	80015a0 <rtc_task_handler+0x24c>
								uint8_t ss = getnumber(cmd->payload, cmd->len);
 8001534:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8001536:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001538:	7a9b      	ldrb	r3, [r3, #10]
 800153a:	4619      	mov	r1, r3
 800153c:	4610      	mov	r0, r2
 800153e:	f000 f9b7 	bl	80018b0 <getnumber>
 8001542:	4603      	mov	r3, r0
 8001544:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
								time.Seconds = ss;
 8001548:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800154c:	72bb      	strb	r3, [r7, #10]
								if(!validate_rtc_information(&time, NULL)){
 800154e:	f107 0308 	add.w	r3, r7, #8
 8001552:	2100      	movs	r1, #0
 8001554:	4618      	mov	r0, r3
 8001556:	f7ff fbef 	bl	8000d38 <validate_rtc_information>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d110      	bne.n	8001582 <rtc_task_handler+0x22e>
									rtc_configure_time(&time);
 8001560:	f107 0308 	add.w	r3, r7, #8
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff fbbf 	bl	8000ce8 <rtc_configure_time>
									xQueueSend(q_print, &msg_conf, portMAX_DELAY);
 800156a:	4b3b      	ldr	r3, [pc, #236]	@ (8001658 <rtc_task_handler+0x304>)
 800156c:	6818      	ldr	r0, [r3, #0]
 800156e:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8001572:	2300      	movs	r3, #0
 8001574:	f04f 32ff 	mov.w	r2, #4294967295
 8001578:	f003 fe42 	bl	8005200 <xQueueGenericSend>
									show_time_date();
 800157c:	f7ff fb64 	bl	8000c48 <show_time_date>
 8001580:	e007      	b.n	8001592 <rtc_task_handler+0x23e>
									xQueueSend(q_print, &inv_msg, portMAX_DELAY);
 8001582:	4b35      	ldr	r3, [pc, #212]	@ (8001658 <rtc_task_handler+0x304>)
 8001584:	6818      	ldr	r0, [r3, #0]
 8001586:	2300      	movs	r3, #0
 8001588:	f04f 32ff 	mov.w	r2, #4294967295
 800158c:	4934      	ldr	r1, [pc, #208]	@ (8001660 <rtc_task_handler+0x30c>)
 800158e:	f003 fe37 	bl	8005200 <xQueueGenericSend>
								rtc_state = 0;
 8001592:	4b34      	ldr	r3, [pc, #208]	@ (8001664 <rtc_task_handler+0x310>)
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]
								curr_state = sMainMenu;
 8001598:	4b30      	ldr	r3, [pc, #192]	@ (800165c <rtc_task_handler+0x308>)
 800159a:	2200      	movs	r2, #0
 800159c:	701a      	strb	r2, [r3, #0]
								break;
 800159e:	bf00      	nop
						break;}
 80015a0:	e0f4      	b.n	800178c <rtc_task_handler+0x438>

					case sRTCDateConfig:{

						/* get date, month, day , year info and configure RTC */
						switch(rtc_state){
 80015a2:	4b30      	ldr	r3, [pc, #192]	@ (8001664 <rtc_task_handler+0x310>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	3b03      	subs	r3, #3
 80015a8:	2b03      	cmp	r3, #3
 80015aa:	f200 80b6 	bhi.w	800171a <rtc_task_handler+0x3c6>
 80015ae:	a201      	add	r2, pc, #4	@ (adr r2, 80015b4 <rtc_task_handler+0x260>)
 80015b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015b4:	080015c5 	.word	0x080015c5
 80015b8:	080015f9 	.word	0x080015f9
 80015bc:	08001669 	.word	0x08001669
 80015c0:	0800169d 	.word	0x0800169d
							case DD_conf:
								uint8_t dd = getnumber(cmd->payload, cmd->len);
 80015c4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80015c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80015c8:	7a9b      	ldrb	r3, [r3, #10]
 80015ca:	4619      	mov	r1, r3
 80015cc:	4610      	mov	r0, r2
 80015ce:	f000 f96f 	bl	80018b0 <getnumber>
 80015d2:	4603      	mov	r3, r0
 80015d4:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58
								date.Date = dd;
 80015d8:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 80015dc:	77bb      	strb	r3, [r7, #30]
								xQueueSend(q_print, &msg_rtc_mo, portMAX_DELAY);
 80015de:	4b1e      	ldr	r3, [pc, #120]	@ (8001658 <rtc_task_handler+0x304>)
 80015e0:	6818      	ldr	r0, [r3, #0]
 80015e2:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 80015e6:	2300      	movs	r3, #0
 80015e8:	f04f 32ff 	mov.w	r2, #4294967295
 80015ec:	f003 fe08 	bl	8005200 <xQueueGenericSend>
								rtc_state = MM_conf;
 80015f0:	4b1c      	ldr	r3, [pc, #112]	@ (8001664 <rtc_task_handler+0x310>)
 80015f2:	2204      	movs	r2, #4
 80015f4:	601a      	str	r2, [r3, #0]
								break;
 80015f6:	e090      	b.n	800171a <rtc_task_handler+0x3c6>
							case MM_conf:
								uint8_t mm = getnumber(cmd->payload, cmd->len);
 80015f8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80015fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80015fc:	7a9b      	ldrb	r3, [r3, #10]
 80015fe:	4619      	mov	r1, r3
 8001600:	4610      	mov	r0, r2
 8001602:	f000 f955 	bl	80018b0 <getnumber>
 8001606:	4603      	mov	r3, r0
 8001608:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59
								date.Month = mm;
 800160c:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 8001610:	777b      	strb	r3, [r7, #29]
								xQueueSend(q_print, &msg_rtc_yr, portMAX_DELAY);
 8001612:	4b11      	ldr	r3, [pc, #68]	@ (8001658 <rtc_task_handler+0x304>)
 8001614:	6818      	ldr	r0, [r3, #0]
 8001616:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 800161a:	2300      	movs	r3, #0
 800161c:	f04f 32ff 	mov.w	r2, #4294967295
 8001620:	f003 fdee 	bl	8005200 <xQueueGenericSend>
								rtc_state = YY_conf;
 8001624:	4b0f      	ldr	r3, [pc, #60]	@ (8001664 <rtc_task_handler+0x310>)
 8001626:	2205      	movs	r2, #5
 8001628:	601a      	str	r2, [r3, #0]
								break;
 800162a:	e076      	b.n	800171a <rtc_task_handler+0x3c6>
 800162c:	08008d8c 	.word	0x08008d8c
 8001630:	08008dd8 	.word	0x08008dd8
 8001634:	08008e7c 	.word	0x08008e7c
 8001638:	08008e90 	.word	0x08008e90
 800163c:	08008ea8 	.word	0x08008ea8
 8001640:	08008ec0 	.word	0x08008ec0
 8001644:	08008ed4 	.word	0x08008ed4
 8001648:	08008ee8 	.word	0x08008ee8
 800164c:	08008f00 	.word	0x08008f00
 8001650:	08008f14 	.word	0x08008f14
 8001654:	08008f30 	.word	0x08008f30
 8001658:	20000108 	.word	0x20000108
 800165c:	20000120 	.word	0x20000120
 8001660:	20000008 	.word	0x20000008
 8001664:	20000198 	.word	0x20000198
							case YY_conf:
								uint8_t yr = getnumber(cmd->payload, cmd->len);
 8001668:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800166a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800166c:	7a9b      	ldrb	r3, [r3, #10]
 800166e:	4619      	mov	r1, r3
 8001670:	4610      	mov	r0, r2
 8001672:	f000 f91d 	bl	80018b0 <getnumber>
 8001676:	4603      	mov	r3, r0
 8001678:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
								date.Year = yr;
 800167c:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 8001680:	77fb      	strb	r3, [r7, #31]
								xQueueSend(q_print, &msg_rtc_dow, portMAX_DELAY);
 8001682:	4b4a      	ldr	r3, [pc, #296]	@ (80017ac <rtc_task_handler+0x458>)
 8001684:	6818      	ldr	r0, [r3, #0]
 8001686:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 800168a:	2300      	movs	r3, #0
 800168c:	f04f 32ff 	mov.w	r2, #4294967295
 8001690:	f003 fdb6 	bl	8005200 <xQueueGenericSend>
								rtc_state = DAY_conf;
 8001694:	4b46      	ldr	r3, [pc, #280]	@ (80017b0 <rtc_task_handler+0x45c>)
 8001696:	2206      	movs	r2, #6
 8001698:	601a      	str	r2, [r3, #0]
								break;
 800169a:	e03e      	b.n	800171a <rtc_task_handler+0x3c6>
							case DAY_conf:
								uint8_t day = getnumber(cmd->payload, cmd->len);
 800169c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800169e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80016a0:	7a9b      	ldrb	r3, [r3, #10]
 80016a2:	4619      	mov	r1, r3
 80016a4:	4610      	mov	r0, r2
 80016a6:	f000 f903 	bl	80018b0 <getnumber>
 80016aa:	4603      	mov	r3, r0
 80016ac:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
								date.WeekDay = day;
 80016b0:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80016b4:	773b      	strb	r3, [r7, #28]
								xQueueSend(q_print, &msg_rtc_yr, portMAX_DELAY);
 80016b6:	4b3d      	ldr	r3, [pc, #244]	@ (80017ac <rtc_task_handler+0x458>)
 80016b8:	6818      	ldr	r0, [r3, #0]
 80016ba:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 80016be:	2300      	movs	r3, #0
 80016c0:	f04f 32ff 	mov.w	r2, #4294967295
 80016c4:	f003 fd9c 	bl	8005200 <xQueueGenericSend>
								if(!validate_rtc_information(NULL, &date)){
 80016c8:	f107 031c 	add.w	r3, r7, #28
 80016cc:	4619      	mov	r1, r3
 80016ce:	2000      	movs	r0, #0
 80016d0:	f7ff fb32 	bl	8000d38 <validate_rtc_information>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d110      	bne.n	80016fc <rtc_task_handler+0x3a8>
									rtc_configure_date(&date);
 80016da:	f107 031c 	add.w	r3, r7, #28
 80016de:	4618      	mov	r0, r3
 80016e0:	f7ff fb1a 	bl	8000d18 <rtc_configure_date>
									xQueueSend(q_print, &msg_conf, portMAX_DELAY);
 80016e4:	4b31      	ldr	r3, [pc, #196]	@ (80017ac <rtc_task_handler+0x458>)
 80016e6:	6818      	ldr	r0, [r3, #0]
 80016e8:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80016ec:	2300      	movs	r3, #0
 80016ee:	f04f 32ff 	mov.w	r2, #4294967295
 80016f2:	f003 fd85 	bl	8005200 <xQueueGenericSend>
									show_time_date();
 80016f6:	f7ff faa7 	bl	8000c48 <show_time_date>
 80016fa:	e007      	b.n	800170c <rtc_task_handler+0x3b8>
								}else{
									xQueueSend(q_print, &inv_msg, portMAX_DELAY);
 80016fc:	4b2b      	ldr	r3, [pc, #172]	@ (80017ac <rtc_task_handler+0x458>)
 80016fe:	6818      	ldr	r0, [r3, #0]
 8001700:	2300      	movs	r3, #0
 8001702:	f04f 32ff 	mov.w	r2, #4294967295
 8001706:	492b      	ldr	r1, [pc, #172]	@ (80017b4 <rtc_task_handler+0x460>)
 8001708:	f003 fd7a 	bl	8005200 <xQueueGenericSend>
								}
								curr_state = sMainMenu;
 800170c:	4b2a      	ldr	r3, [pc, #168]	@ (80017b8 <rtc_task_handler+0x464>)
 800170e:	2200      	movs	r2, #0
 8001710:	701a      	strb	r2, [r3, #0]
								rtc_state = 0;
 8001712:	4b27      	ldr	r3, [pc, #156]	@ (80017b0 <rtc_task_handler+0x45c>)
 8001714:	2200      	movs	r2, #0
 8001716:	601a      	str	r2, [r3, #0]
								break;
 8001718:	bf00      	nop
						break;}
					}

					case sRTCReport:{
						/* enable or disable RTC current time reporting over ITM printf */
						if(cmd->len == 1){
 800171a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800171c:	7a9b      	ldrb	r3, [r3, #10]
 800171e:	2b01      	cmp	r3, #1
 8001720:	d130      	bne.n	8001784 <rtc_task_handler+0x430>
							if(cmd->payload[0] == 'y'){
 8001722:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	2b79      	cmp	r3, #121	@ 0x79
 8001728:	d115      	bne.n	8001756 <rtc_task_handler+0x402>
								if(xTimerIsTimerActive(rtc_timer) == pdFALSE)
 800172a:	4b24      	ldr	r3, [pc, #144]	@ (80017bc <rtc_task_handler+0x468>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4618      	mov	r0, r3
 8001730:	f006 f900 	bl	8007934 <xTimerIsTimerActive>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d124      	bne.n	8001784 <rtc_task_handler+0x430>
								xTimerStart(rtc_timer,portMAX_DELAY);
 800173a:	4b20      	ldr	r3, [pc, #128]	@ (80017bc <rtc_task_handler+0x468>)
 800173c:	681c      	ldr	r4, [r3, #0]
 800173e:	f004 fd6b 	bl	8006218 <xTaskGetTickCount>
 8001742:	4602      	mov	r2, r0
 8001744:	f04f 33ff 	mov.w	r3, #4294967295
 8001748:	9300      	str	r3, [sp, #0]
 800174a:	2300      	movs	r3, #0
 800174c:	2101      	movs	r1, #1
 800174e:	4620      	mov	r0, r4
 8001750:	f005 fe4a 	bl	80073e8 <xTimerGenericCommand>
 8001754:	e016      	b.n	8001784 <rtc_task_handler+0x430>
							}else if(cmd->payload[0] == 'n'){
 8001756:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	2b6e      	cmp	r3, #110	@ 0x6e
 800175c:	d10a      	bne.n	8001774 <rtc_task_handler+0x420>
								xTimerStop(rtc_timer,portMAX_DELAY);
 800175e:	4b17      	ldr	r3, [pc, #92]	@ (80017bc <rtc_task_handler+0x468>)
 8001760:	6818      	ldr	r0, [r3, #0]
 8001762:	f04f 33ff 	mov.w	r3, #4294967295
 8001766:	9300      	str	r3, [sp, #0]
 8001768:	2300      	movs	r3, #0
 800176a:	2200      	movs	r2, #0
 800176c:	2103      	movs	r1, #3
 800176e:	f005 fe3b 	bl	80073e8 <xTimerGenericCommand>
 8001772:	e007      	b.n	8001784 <rtc_task_handler+0x430>
							}else {
								xQueueSend(q_print, &inv_msg, portMAX_DELAY);
 8001774:	4b0d      	ldr	r3, [pc, #52]	@ (80017ac <rtc_task_handler+0x458>)
 8001776:	6818      	ldr	r0, [r3, #0]
 8001778:	2300      	movs	r3, #0
 800177a:	f04f 32ff 	mov.w	r2, #4294967295
 800177e:	490d      	ldr	r1, [pc, #52]	@ (80017b4 <rtc_task_handler+0x460>)
 8001780:	f003 fd3e 	bl	8005200 <xQueueGenericSend>
							}
						}
						curr_state = sMainMenu;
 8001784:	4b0c      	ldr	r3, [pc, #48]	@ (80017b8 <rtc_task_handler+0x464>)
 8001786:	2200      	movs	r2, #0
 8001788:	701a      	strb	r2, [r3, #0]
						break;}
 800178a:	e000      	b.n	800178e <rtc_task_handler+0x43a>
						break;}
 800178c:	bf00      	nop
			while(curr_state != sMainMenu){
 800178e:	4b0a      	ldr	r3, [pc, #40]	@ (80017b8 <rtc_task_handler+0x464>)
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	2b00      	cmp	r3, #0
 8001794:	f47f ae16 	bne.w	80013c4 <rtc_task_handler+0x70>
				}// switch end

			} //while end

			   /* Notify menu task */
				xTaskNotify(menu_task_handle,0, eNoAction);
 8001798:	4b09      	ldr	r3, [pc, #36]	@ (80017c0 <rtc_task_handler+0x46c>)
 800179a:	6818      	ldr	r0, [r3, #0]
 800179c:	2300      	movs	r3, #0
 800179e:	9300      	str	r3, [sp, #0]
 80017a0:	2300      	movs	r3, #0
 80017a2:	2200      	movs	r2, #0
 80017a4:	2100      	movs	r1, #0
 80017a6:	f005 fa8b 	bl	8006cc0 <xTaskGenericNotify>
			xTaskNotifyWait(0, 0, NULL, portMAX_DELAY );
 80017aa:	e5ed      	b.n	8001388 <rtc_task_handler+0x34>
 80017ac:	20000108 	.word	0x20000108
 80017b0:	20000198 	.word	0x20000198
 80017b4:	20000008 	.word	0x20000008
 80017b8:	20000120 	.word	0x20000120
 80017bc:	2000011c 	.word	0x2000011c
 80017c0:	200000f0 	.word	0x200000f0

080017c4 <extract_command>:

		}//while super loop end
}


int extract_command(command_t *cmd){
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b086      	sub	sp, #24
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
	uint8_t item;
	BaseType_t status;

	/* Check if there are any messages waiting in the queue	 */
	status = uxQueueMessagesWaiting(q_data);
 80017cc:	4b19      	ldr	r3, [pc, #100]	@ (8001834 <extract_command+0x70>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4618      	mov	r0, r3
 80017d2:	f004 f849 	bl	8005868 <uxQueueMessagesWaiting>
 80017d6:	4603      	mov	r3, r0
 80017d8:	613b      	str	r3, [r7, #16]
	if(!status) return -1;	// Return since there are no messages in the queue
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d102      	bne.n	80017e6 <extract_command+0x22>
 80017e0:	f04f 33ff 	mov.w	r3, #4294967295
 80017e4:	e022      	b.n	800182c <extract_command+0x68>

	uint8_t i = 0;
 80017e6:	2300      	movs	r3, #0
 80017e8:	75fb      	strb	r3, [r7, #23]

	do{
		status = xQueueReceive(q_data, &item, 0);
 80017ea:	4b12      	ldr	r3, [pc, #72]	@ (8001834 <extract_command+0x70>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f107 010f 	add.w	r1, r7, #15
 80017f2:	2200      	movs	r2, #0
 80017f4:	4618      	mov	r0, r3
 80017f6:	f003 febb 	bl	8005570 <xQueueReceive>
 80017fa:	6138      	str	r0, [r7, #16]
		if(status == pdTRUE) cmd->payload[i++] = item;
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d106      	bne.n	8001810 <extract_command+0x4c>
 8001802:	7dfb      	ldrb	r3, [r7, #23]
 8001804:	1c5a      	adds	r2, r3, #1
 8001806:	75fa      	strb	r2, [r7, #23]
 8001808:	461a      	mov	r2, r3
 800180a:	7bf9      	ldrb	r1, [r7, #15]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	5499      	strb	r1, [r3, r2]
	}while(item != '\n');
 8001810:	7bfb      	ldrb	r3, [r7, #15]
 8001812:	2b0a      	cmp	r3, #10
 8001814:	d1e9      	bne.n	80017ea <extract_command+0x26>

	/* When \n is received 	 */

	cmd->payload[i-1] = '\0';
 8001816:	7dfb      	ldrb	r3, [r7, #23]
 8001818:	3b01      	subs	r3, #1
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	2100      	movs	r1, #0
 800181e:	54d1      	strb	r1, [r2, r3]
	cmd->len = i-1;
 8001820:	7dfb      	ldrb	r3, [r7, #23]
 8001822:	3b01      	subs	r3, #1
 8001824:	b2da      	uxtb	r2, r3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	729a      	strb	r2, [r3, #10]
	return 0;
 800182a:	2300      	movs	r3, #0
}
 800182c:	4618      	mov	r0, r3
 800182e:	3718      	adds	r7, #24
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	20000104 	.word	0x20000104

08001838 <process_command>:

void process_command(command_t *cmd){
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af02      	add	r7, sp, #8
 800183e:	6078      	str	r0, [r7, #4]
	// Extract the data bytes from the input data queue and create a command

	extract_command(cmd);
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	f7ff ffbf 	bl	80017c4 <extract_command>

	switch(curr_state){
 8001846:	4b16      	ldr	r3, [pc, #88]	@ (80018a0 <process_command+0x68>)
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	2b05      	cmp	r3, #5
 800184c:	dc24      	bgt.n	8001898 <process_command+0x60>
 800184e:	2b02      	cmp	r3, #2
 8001850:	da18      	bge.n	8001884 <process_command+0x4c>
 8001852:	2b00      	cmp	r3, #0
 8001854:	d002      	beq.n	800185c <process_command+0x24>
 8001856:	2b01      	cmp	r3, #1
 8001858:	d00a      	beq.n	8001870 <process_command+0x38>

	case sRTCReport:
		xTaskNotify(rtc_task_handle, (uint32_t)cmd, eSetValueWithOverwrite);
		break;
	}
}
 800185a:	e01d      	b.n	8001898 <process_command+0x60>
		xTaskNotify(menu_task_handle, (uint32_t)cmd, eSetValueWithOverwrite);
 800185c:	4b11      	ldr	r3, [pc, #68]	@ (80018a4 <process_command+0x6c>)
 800185e:	6818      	ldr	r0, [r3, #0]
 8001860:	687a      	ldr	r2, [r7, #4]
 8001862:	2300      	movs	r3, #0
 8001864:	9300      	str	r3, [sp, #0]
 8001866:	2303      	movs	r3, #3
 8001868:	2100      	movs	r1, #0
 800186a:	f005 fa29 	bl	8006cc0 <xTaskGenericNotify>
		break;
 800186e:	e013      	b.n	8001898 <process_command+0x60>
		xTaskNotify(led_task_handle, (uint32_t)cmd, eSetValueWithOverwrite);
 8001870:	4b0d      	ldr	r3, [pc, #52]	@ (80018a8 <process_command+0x70>)
 8001872:	6818      	ldr	r0, [r3, #0]
 8001874:	687a      	ldr	r2, [r7, #4]
 8001876:	2300      	movs	r3, #0
 8001878:	9300      	str	r3, [sp, #0]
 800187a:	2303      	movs	r3, #3
 800187c:	2100      	movs	r1, #0
 800187e:	f005 fa1f 	bl	8006cc0 <xTaskGenericNotify>
		break;
 8001882:	e009      	b.n	8001898 <process_command+0x60>
		xTaskNotify(rtc_task_handle, (uint32_t)cmd, eSetValueWithOverwrite);
 8001884:	4b09      	ldr	r3, [pc, #36]	@ (80018ac <process_command+0x74>)
 8001886:	6818      	ldr	r0, [r3, #0]
 8001888:	687a      	ldr	r2, [r7, #4]
 800188a:	2300      	movs	r3, #0
 800188c:	9300      	str	r3, [sp, #0]
 800188e:	2303      	movs	r3, #3
 8001890:	2100      	movs	r1, #0
 8001892:	f005 fa15 	bl	8006cc0 <xTaskGenericNotify>
		break;
 8001896:	bf00      	nop
}
 8001898:	bf00      	nop
 800189a:	3708      	adds	r7, #8
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	20000120 	.word	0x20000120
 80018a4:	200000f0 	.word	0x200000f0
 80018a8:	200000fc 	.word	0x200000fc
 80018ac:	20000100 	.word	0x20000100

080018b0 <getnumber>:


/*
 * Converts ASCII characters to uint8_t number
 */
uint8_t getnumber(uint8_t *p , int len){
 80018b0:	b480      	push	{r7}
 80018b2:	b085      	sub	sp, #20
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	6039      	str	r1, [r7, #0]
	int value;

	if(len>1){
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	2b01      	cmp	r3, #1
 80018be:	dd0f      	ble.n	80018e0 <getnumber+0x30>
		value = (((p[0] - 48)*10) + (p[1] - 48));
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 80018c8:	4613      	mov	r3, r2
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	4413      	add	r3, r2
 80018ce:	005b      	lsls	r3, r3, #1
 80018d0:	461a      	mov	r2, r3
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	3301      	adds	r3, #1
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	3b30      	subs	r3, #48	@ 0x30
 80018da:	4413      	add	r3, r2
 80018dc:	60fb      	str	r3, [r7, #12]
 80018de:	e003      	b.n	80018e8 <getnumber+0x38>
	}
	else{
		value = (p[0] - 48);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	3b30      	subs	r3, #48	@ 0x30
 80018e6:	60fb      	str	r3, [r7, #12]
	}
	return value;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	b2db      	uxtb	r3, r3
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3714      	adds	r7, #20
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr

080018f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80018f8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001930 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80018fc:	f7ff fbd2 	bl	80010a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001900:	480c      	ldr	r0, [pc, #48]	@ (8001934 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001902:	490d      	ldr	r1, [pc, #52]	@ (8001938 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001904:	4a0d      	ldr	r2, [pc, #52]	@ (800193c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001906:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001908:	e002      	b.n	8001910 <LoopCopyDataInit>

0800190a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800190a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800190c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800190e:	3304      	adds	r3, #4

08001910 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001910:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001912:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001914:	d3f9      	bcc.n	800190a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001916:	4a0a      	ldr	r2, [pc, #40]	@ (8001940 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001918:	4c0a      	ldr	r4, [pc, #40]	@ (8001944 <LoopFillZerobss+0x22>)
  movs r3, #0
 800191a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800191c:	e001      	b.n	8001922 <LoopFillZerobss>

0800191e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800191e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001920:	3204      	adds	r2, #4

08001922 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001922:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001924:	d3fb      	bcc.n	800191e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001926:	f006 fca9 	bl	800827c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800192a:	f7fe fec5 	bl	80006b8 <main>
  bx  lr    
 800192e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001930:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001934:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001938:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 800193c:	08008fc8 	.word	0x08008fc8
  ldr r2, =_sbss
 8001940:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001944:	2001308c 	.word	0x2001308c

08001948 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001948:	e7fe      	b.n	8001948 <ADC_IRQHandler>
	...

0800194c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001950:	4b0e      	ldr	r3, [pc, #56]	@ (800198c <HAL_Init+0x40>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a0d      	ldr	r2, [pc, #52]	@ (800198c <HAL_Init+0x40>)
 8001956:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800195a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800195c:	4b0b      	ldr	r3, [pc, #44]	@ (800198c <HAL_Init+0x40>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a0a      	ldr	r2, [pc, #40]	@ (800198c <HAL_Init+0x40>)
 8001962:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001966:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001968:	4b08      	ldr	r3, [pc, #32]	@ (800198c <HAL_Init+0x40>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a07      	ldr	r2, [pc, #28]	@ (800198c <HAL_Init+0x40>)
 800196e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001972:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001974:	2003      	movs	r0, #3
 8001976:	f000 f8d8 	bl	8001b2a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800197a:	2000      	movs	r0, #0
 800197c:	f7ff fab0 	bl	8000ee0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001980:	f7ff fa0c 	bl	8000d9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001984:	2300      	movs	r3, #0
}
 8001986:	4618      	mov	r0, r3
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	40023c00 	.word	0x40023c00

08001990 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001994:	4b06      	ldr	r3, [pc, #24]	@ (80019b0 <HAL_IncTick+0x20>)
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	461a      	mov	r2, r3
 800199a:	4b06      	ldr	r3, [pc, #24]	@ (80019b4 <HAL_IncTick+0x24>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4413      	add	r3, r2
 80019a0:	4a04      	ldr	r2, [pc, #16]	@ (80019b4 <HAL_IncTick+0x24>)
 80019a2:	6013      	str	r3, [r2, #0]
}
 80019a4:	bf00      	nop
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop
 80019b0:	20000010 	.word	0x20000010
 80019b4:	2000019c 	.word	0x2000019c

080019b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  return uwTick;
 80019bc:	4b03      	ldr	r3, [pc, #12]	@ (80019cc <HAL_GetTick+0x14>)
 80019be:	681b      	ldr	r3, [r3, #0]
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	2000019c 	.word	0x2000019c

080019d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b085      	sub	sp, #20
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	f003 0307 	and.w	r3, r3, #7
 80019de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001a14 <__NVIC_SetPriorityGrouping+0x44>)
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019e6:	68ba      	ldr	r2, [r7, #8]
 80019e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80019ec:	4013      	ands	r3, r2
 80019ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80019fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a02:	4a04      	ldr	r2, [pc, #16]	@ (8001a14 <__NVIC_SetPriorityGrouping+0x44>)
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	60d3      	str	r3, [r2, #12]
}
 8001a08:	bf00      	nop
 8001a0a:	3714      	adds	r7, #20
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr
 8001a14:	e000ed00 	.word	0xe000ed00

08001a18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a1c:	4b04      	ldr	r3, [pc, #16]	@ (8001a30 <__NVIC_GetPriorityGrouping+0x18>)
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	0a1b      	lsrs	r3, r3, #8
 8001a22:	f003 0307 	and.w	r3, r3, #7
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr
 8001a30:	e000ed00 	.word	0xe000ed00

08001a34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	db0b      	blt.n	8001a5e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a46:	79fb      	ldrb	r3, [r7, #7]
 8001a48:	f003 021f 	and.w	r2, r3, #31
 8001a4c:	4907      	ldr	r1, [pc, #28]	@ (8001a6c <__NVIC_EnableIRQ+0x38>)
 8001a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a52:	095b      	lsrs	r3, r3, #5
 8001a54:	2001      	movs	r0, #1
 8001a56:	fa00 f202 	lsl.w	r2, r0, r2
 8001a5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a5e:	bf00      	nop
 8001a60:	370c      	adds	r7, #12
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	e000e100 	.word	0xe000e100

08001a70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	4603      	mov	r3, r0
 8001a78:	6039      	str	r1, [r7, #0]
 8001a7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	db0a      	blt.n	8001a9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	b2da      	uxtb	r2, r3
 8001a88:	490c      	ldr	r1, [pc, #48]	@ (8001abc <__NVIC_SetPriority+0x4c>)
 8001a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a8e:	0112      	lsls	r2, r2, #4
 8001a90:	b2d2      	uxtb	r2, r2
 8001a92:	440b      	add	r3, r1
 8001a94:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a98:	e00a      	b.n	8001ab0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	b2da      	uxtb	r2, r3
 8001a9e:	4908      	ldr	r1, [pc, #32]	@ (8001ac0 <__NVIC_SetPriority+0x50>)
 8001aa0:	79fb      	ldrb	r3, [r7, #7]
 8001aa2:	f003 030f 	and.w	r3, r3, #15
 8001aa6:	3b04      	subs	r3, #4
 8001aa8:	0112      	lsls	r2, r2, #4
 8001aaa:	b2d2      	uxtb	r2, r2
 8001aac:	440b      	add	r3, r1
 8001aae:	761a      	strb	r2, [r3, #24]
}
 8001ab0:	bf00      	nop
 8001ab2:	370c      	adds	r7, #12
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr
 8001abc:	e000e100 	.word	0xe000e100
 8001ac0:	e000ed00 	.word	0xe000ed00

08001ac4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b089      	sub	sp, #36	@ 0x24
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	60f8      	str	r0, [r7, #12]
 8001acc:	60b9      	str	r1, [r7, #8]
 8001ace:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	f003 0307 	and.w	r3, r3, #7
 8001ad6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	f1c3 0307 	rsb	r3, r3, #7
 8001ade:	2b04      	cmp	r3, #4
 8001ae0:	bf28      	it	cs
 8001ae2:	2304      	movcs	r3, #4
 8001ae4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	3304      	adds	r3, #4
 8001aea:	2b06      	cmp	r3, #6
 8001aec:	d902      	bls.n	8001af4 <NVIC_EncodePriority+0x30>
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	3b03      	subs	r3, #3
 8001af2:	e000      	b.n	8001af6 <NVIC_EncodePriority+0x32>
 8001af4:	2300      	movs	r3, #0
 8001af6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001af8:	f04f 32ff 	mov.w	r2, #4294967295
 8001afc:	69bb      	ldr	r3, [r7, #24]
 8001afe:	fa02 f303 	lsl.w	r3, r2, r3
 8001b02:	43da      	mvns	r2, r3
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	401a      	ands	r2, r3
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b0c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	fa01 f303 	lsl.w	r3, r1, r3
 8001b16:	43d9      	mvns	r1, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b1c:	4313      	orrs	r3, r2
         );
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3724      	adds	r7, #36	@ 0x24
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr

08001b2a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b2a:	b580      	push	{r7, lr}
 8001b2c:	b082      	sub	sp, #8
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f7ff ff4c 	bl	80019d0 <__NVIC_SetPriorityGrouping>
}
 8001b38:	bf00      	nop
 8001b3a:	3708      	adds	r7, #8
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}

08001b40 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b086      	sub	sp, #24
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	4603      	mov	r3, r0
 8001b48:	60b9      	str	r1, [r7, #8]
 8001b4a:	607a      	str	r2, [r7, #4]
 8001b4c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b52:	f7ff ff61 	bl	8001a18 <__NVIC_GetPriorityGrouping>
 8001b56:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b58:	687a      	ldr	r2, [r7, #4]
 8001b5a:	68b9      	ldr	r1, [r7, #8]
 8001b5c:	6978      	ldr	r0, [r7, #20]
 8001b5e:	f7ff ffb1 	bl	8001ac4 <NVIC_EncodePriority>
 8001b62:	4602      	mov	r2, r0
 8001b64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b68:	4611      	mov	r1, r2
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7ff ff80 	bl	8001a70 <__NVIC_SetPriority>
}
 8001b70:	bf00      	nop
 8001b72:	3718      	adds	r7, #24
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	4603      	mov	r3, r0
 8001b80:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7ff ff54 	bl	8001a34 <__NVIC_EnableIRQ>
}
 8001b8c:	bf00      	nop
 8001b8e:	3708      	adds	r7, #8
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}

08001b94 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b084      	sub	sp, #16
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ba0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001ba2:	f7ff ff09 	bl	80019b8 <HAL_GetTick>
 8001ba6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	2b02      	cmp	r3, #2
 8001bb2:	d008      	beq.n	8001bc6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2280      	movs	r2, #128	@ 0x80
 8001bb8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e052      	b.n	8001c6c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f022 0216 	bic.w	r2, r2, #22
 8001bd4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	695a      	ldr	r2, [r3, #20]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001be4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d103      	bne.n	8001bf6 <HAL_DMA_Abort+0x62>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d007      	beq.n	8001c06 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f022 0208 	bic.w	r2, r2, #8
 8001c04:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f022 0201 	bic.w	r2, r2, #1
 8001c14:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c16:	e013      	b.n	8001c40 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c18:	f7ff fece 	bl	80019b8 <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	2b05      	cmp	r3, #5
 8001c24:	d90c      	bls.n	8001c40 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2220      	movs	r2, #32
 8001c2a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2203      	movs	r2, #3
 8001c30:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2200      	movs	r2, #0
 8001c38:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	e015      	b.n	8001c6c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 0301 	and.w	r3, r3, #1
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d1e4      	bne.n	8001c18 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c52:	223f      	movs	r2, #63	@ 0x3f
 8001c54:	409a      	lsls	r2, r3
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2200      	movs	r2, #0
 8001c66:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001c6a:	2300      	movs	r3, #0
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3710      	adds	r7, #16
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}

08001c74 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d004      	beq.n	8001c92 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2280      	movs	r2, #128	@ 0x80
 8001c8c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e00c      	b.n	8001cac <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2205      	movs	r2, #5
 8001c96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f022 0201 	bic.w	r2, r2, #1
 8001ca8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001caa:	2300      	movs	r3, #0
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr

08001cb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b089      	sub	sp, #36	@ 0x24
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cce:	2300      	movs	r3, #0
 8001cd0:	61fb      	str	r3, [r7, #28]
 8001cd2:	e165      	b.n	8001fa0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cdc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	697a      	ldr	r2, [r7, #20]
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ce8:	693a      	ldr	r2, [r7, #16]
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	f040 8154 	bne.w	8001f9a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f003 0303 	and.w	r3, r3, #3
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d005      	beq.n	8001d0a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d130      	bne.n	8001d6c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	005b      	lsls	r3, r3, #1
 8001d14:	2203      	movs	r2, #3
 8001d16:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1a:	43db      	mvns	r3, r3
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	4013      	ands	r3, r2
 8001d20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	68da      	ldr	r2, [r3, #12]
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	005b      	lsls	r3, r3, #1
 8001d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2e:	69ba      	ldr	r2, [r7, #24]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	69ba      	ldr	r2, [r7, #24]
 8001d38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d40:	2201      	movs	r2, #1
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	fa02 f303 	lsl.w	r3, r2, r3
 8001d48:	43db      	mvns	r3, r3
 8001d4a:	69ba      	ldr	r2, [r7, #24]
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	091b      	lsrs	r3, r3, #4
 8001d56:	f003 0201 	and.w	r2, r3, #1
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	69ba      	ldr	r2, [r7, #24]
 8001d6a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f003 0303 	and.w	r3, r3, #3
 8001d74:	2b03      	cmp	r3, #3
 8001d76:	d017      	beq.n	8001da8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	005b      	lsls	r3, r3, #1
 8001d82:	2203      	movs	r2, #3
 8001d84:	fa02 f303 	lsl.w	r3, r2, r3
 8001d88:	43db      	mvns	r3, r3
 8001d8a:	69ba      	ldr	r2, [r7, #24]
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	689a      	ldr	r2, [r3, #8]
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	005b      	lsls	r3, r3, #1
 8001d98:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	69ba      	ldr	r2, [r7, #24]
 8001da6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f003 0303 	and.w	r3, r3, #3
 8001db0:	2b02      	cmp	r3, #2
 8001db2:	d123      	bne.n	8001dfc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	08da      	lsrs	r2, r3, #3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	3208      	adds	r2, #8
 8001dbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	f003 0307 	and.w	r3, r3, #7
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	220f      	movs	r2, #15
 8001dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd0:	43db      	mvns	r3, r3
 8001dd2:	69ba      	ldr	r2, [r7, #24]
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	691a      	ldr	r2, [r3, #16]
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	f003 0307 	and.w	r3, r3, #7
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	fa02 f303 	lsl.w	r3, r2, r3
 8001de8:	69ba      	ldr	r2, [r7, #24]
 8001dea:	4313      	orrs	r3, r2
 8001dec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	08da      	lsrs	r2, r3, #3
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	3208      	adds	r2, #8
 8001df6:	69b9      	ldr	r1, [r7, #24]
 8001df8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	005b      	lsls	r3, r3, #1
 8001e06:	2203      	movs	r2, #3
 8001e08:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0c:	43db      	mvns	r3, r3
 8001e0e:	69ba      	ldr	r2, [r7, #24]
 8001e10:	4013      	ands	r3, r2
 8001e12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f003 0203 	and.w	r2, r3, #3
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	005b      	lsls	r3, r3, #1
 8001e20:	fa02 f303 	lsl.w	r3, r2, r3
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	69ba      	ldr	r2, [r7, #24]
 8001e2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	f000 80ae 	beq.w	8001f9a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e3e:	2300      	movs	r3, #0
 8001e40:	60fb      	str	r3, [r7, #12]
 8001e42:	4b5d      	ldr	r3, [pc, #372]	@ (8001fb8 <HAL_GPIO_Init+0x300>)
 8001e44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e46:	4a5c      	ldr	r2, [pc, #368]	@ (8001fb8 <HAL_GPIO_Init+0x300>)
 8001e48:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e4e:	4b5a      	ldr	r3, [pc, #360]	@ (8001fb8 <HAL_GPIO_Init+0x300>)
 8001e50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e56:	60fb      	str	r3, [r7, #12]
 8001e58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e5a:	4a58      	ldr	r2, [pc, #352]	@ (8001fbc <HAL_GPIO_Init+0x304>)
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	089b      	lsrs	r3, r3, #2
 8001e60:	3302      	adds	r3, #2
 8001e62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	f003 0303 	and.w	r3, r3, #3
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	220f      	movs	r2, #15
 8001e72:	fa02 f303 	lsl.w	r3, r2, r3
 8001e76:	43db      	mvns	r3, r3
 8001e78:	69ba      	ldr	r2, [r7, #24]
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4a4f      	ldr	r2, [pc, #316]	@ (8001fc0 <HAL_GPIO_Init+0x308>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d025      	beq.n	8001ed2 <HAL_GPIO_Init+0x21a>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4a4e      	ldr	r2, [pc, #312]	@ (8001fc4 <HAL_GPIO_Init+0x30c>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d01f      	beq.n	8001ece <HAL_GPIO_Init+0x216>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4a4d      	ldr	r2, [pc, #308]	@ (8001fc8 <HAL_GPIO_Init+0x310>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d019      	beq.n	8001eca <HAL_GPIO_Init+0x212>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4a4c      	ldr	r2, [pc, #304]	@ (8001fcc <HAL_GPIO_Init+0x314>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d013      	beq.n	8001ec6 <HAL_GPIO_Init+0x20e>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4a4b      	ldr	r2, [pc, #300]	@ (8001fd0 <HAL_GPIO_Init+0x318>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d00d      	beq.n	8001ec2 <HAL_GPIO_Init+0x20a>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4a4a      	ldr	r2, [pc, #296]	@ (8001fd4 <HAL_GPIO_Init+0x31c>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d007      	beq.n	8001ebe <HAL_GPIO_Init+0x206>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a49      	ldr	r2, [pc, #292]	@ (8001fd8 <HAL_GPIO_Init+0x320>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d101      	bne.n	8001eba <HAL_GPIO_Init+0x202>
 8001eb6:	2306      	movs	r3, #6
 8001eb8:	e00c      	b.n	8001ed4 <HAL_GPIO_Init+0x21c>
 8001eba:	2307      	movs	r3, #7
 8001ebc:	e00a      	b.n	8001ed4 <HAL_GPIO_Init+0x21c>
 8001ebe:	2305      	movs	r3, #5
 8001ec0:	e008      	b.n	8001ed4 <HAL_GPIO_Init+0x21c>
 8001ec2:	2304      	movs	r3, #4
 8001ec4:	e006      	b.n	8001ed4 <HAL_GPIO_Init+0x21c>
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e004      	b.n	8001ed4 <HAL_GPIO_Init+0x21c>
 8001eca:	2302      	movs	r3, #2
 8001ecc:	e002      	b.n	8001ed4 <HAL_GPIO_Init+0x21c>
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e000      	b.n	8001ed4 <HAL_GPIO_Init+0x21c>
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	69fa      	ldr	r2, [r7, #28]
 8001ed6:	f002 0203 	and.w	r2, r2, #3
 8001eda:	0092      	lsls	r2, r2, #2
 8001edc:	4093      	lsls	r3, r2
 8001ede:	69ba      	ldr	r2, [r7, #24]
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ee4:	4935      	ldr	r1, [pc, #212]	@ (8001fbc <HAL_GPIO_Init+0x304>)
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	089b      	lsrs	r3, r3, #2
 8001eea:	3302      	adds	r3, #2
 8001eec:	69ba      	ldr	r2, [r7, #24]
 8001eee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ef2:	4b3a      	ldr	r3, [pc, #232]	@ (8001fdc <HAL_GPIO_Init+0x324>)
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	43db      	mvns	r3, r3
 8001efc:	69ba      	ldr	r2, [r7, #24]
 8001efe:	4013      	ands	r3, r2
 8001f00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d003      	beq.n	8001f16 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001f0e:	69ba      	ldr	r2, [r7, #24]
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f16:	4a31      	ldr	r2, [pc, #196]	@ (8001fdc <HAL_GPIO_Init+0x324>)
 8001f18:	69bb      	ldr	r3, [r7, #24]
 8001f1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f1c:	4b2f      	ldr	r3, [pc, #188]	@ (8001fdc <HAL_GPIO_Init+0x324>)
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	43db      	mvns	r3, r3
 8001f26:	69ba      	ldr	r2, [r7, #24]
 8001f28:	4013      	ands	r3, r2
 8001f2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d003      	beq.n	8001f40 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f40:	4a26      	ldr	r2, [pc, #152]	@ (8001fdc <HAL_GPIO_Init+0x324>)
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f46:	4b25      	ldr	r3, [pc, #148]	@ (8001fdc <HAL_GPIO_Init+0x324>)
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	43db      	mvns	r3, r3
 8001f50:	69ba      	ldr	r2, [r7, #24]
 8001f52:	4013      	ands	r3, r2
 8001f54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d003      	beq.n	8001f6a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001f62:	69ba      	ldr	r2, [r7, #24]
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	4313      	orrs	r3, r2
 8001f68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f6a:	4a1c      	ldr	r2, [pc, #112]	@ (8001fdc <HAL_GPIO_Init+0x324>)
 8001f6c:	69bb      	ldr	r3, [r7, #24]
 8001f6e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f70:	4b1a      	ldr	r3, [pc, #104]	@ (8001fdc <HAL_GPIO_Init+0x324>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	43db      	mvns	r3, r3
 8001f7a:	69ba      	ldr	r2, [r7, #24]
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d003      	beq.n	8001f94 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001f8c:	69ba      	ldr	r2, [r7, #24]
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	4313      	orrs	r3, r2
 8001f92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f94:	4a11      	ldr	r2, [pc, #68]	@ (8001fdc <HAL_GPIO_Init+0x324>)
 8001f96:	69bb      	ldr	r3, [r7, #24]
 8001f98:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	61fb      	str	r3, [r7, #28]
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	2b0f      	cmp	r3, #15
 8001fa4:	f67f ae96 	bls.w	8001cd4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001fa8:	bf00      	nop
 8001faa:	bf00      	nop
 8001fac:	3724      	adds	r7, #36	@ 0x24
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	40023800 	.word	0x40023800
 8001fbc:	40013800 	.word	0x40013800
 8001fc0:	40020000 	.word	0x40020000
 8001fc4:	40020400 	.word	0x40020400
 8001fc8:	40020800 	.word	0x40020800
 8001fcc:	40020c00 	.word	0x40020c00
 8001fd0:	40021000 	.word	0x40021000
 8001fd4:	40021400 	.word	0x40021400
 8001fd8:	40021800 	.word	0x40021800
 8001fdc:	40013c00 	.word	0x40013c00

08001fe0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	460b      	mov	r3, r1
 8001fea:	807b      	strh	r3, [r7, #2]
 8001fec:	4613      	mov	r3, r2
 8001fee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ff0:	787b      	ldrb	r3, [r7, #1]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d003      	beq.n	8001ffe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ff6:	887a      	ldrh	r2, [r7, #2]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ffc:	e003      	b.n	8002006 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ffe:	887b      	ldrh	r3, [r7, #2]
 8002000:	041a      	lsls	r2, r3, #16
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	619a      	str	r2, [r3, #24]
}
 8002006:	bf00      	nop
 8002008:	370c      	adds	r7, #12
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr

08002012 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002012:	b480      	push	{r7}
 8002014:	b085      	sub	sp, #20
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]
 800201a:	460b      	mov	r3, r1
 800201c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	695b      	ldr	r3, [r3, #20]
 8002022:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002024:	887a      	ldrh	r2, [r7, #2]
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	4013      	ands	r3, r2
 800202a:	041a      	lsls	r2, r3, #16
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	43d9      	mvns	r1, r3
 8002030:	887b      	ldrh	r3, [r7, #2]
 8002032:	400b      	ands	r3, r1
 8002034:	431a      	orrs	r2, r3
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	619a      	str	r2, [r3, #24]
}
 800203a:	bf00      	nop
 800203c:	3714      	adds	r7, #20
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
	...

08002048 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d101      	bne.n	800205c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e0cc      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800205c:	4b68      	ldr	r3, [pc, #416]	@ (8002200 <HAL_RCC_ClockConfig+0x1b8>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 030f 	and.w	r3, r3, #15
 8002064:	683a      	ldr	r2, [r7, #0]
 8002066:	429a      	cmp	r2, r3
 8002068:	d90c      	bls.n	8002084 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800206a:	4b65      	ldr	r3, [pc, #404]	@ (8002200 <HAL_RCC_ClockConfig+0x1b8>)
 800206c:	683a      	ldr	r2, [r7, #0]
 800206e:	b2d2      	uxtb	r2, r2
 8002070:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002072:	4b63      	ldr	r3, [pc, #396]	@ (8002200 <HAL_RCC_ClockConfig+0x1b8>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 030f 	and.w	r3, r3, #15
 800207a:	683a      	ldr	r2, [r7, #0]
 800207c:	429a      	cmp	r2, r3
 800207e:	d001      	beq.n	8002084 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e0b8      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0302 	and.w	r3, r3, #2
 800208c:	2b00      	cmp	r3, #0
 800208e:	d020      	beq.n	80020d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0304 	and.w	r3, r3, #4
 8002098:	2b00      	cmp	r3, #0
 800209a:	d005      	beq.n	80020a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800209c:	4b59      	ldr	r3, [pc, #356]	@ (8002204 <HAL_RCC_ClockConfig+0x1bc>)
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	4a58      	ldr	r2, [pc, #352]	@ (8002204 <HAL_RCC_ClockConfig+0x1bc>)
 80020a2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80020a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0308 	and.w	r3, r3, #8
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d005      	beq.n	80020c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020b4:	4b53      	ldr	r3, [pc, #332]	@ (8002204 <HAL_RCC_ClockConfig+0x1bc>)
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	4a52      	ldr	r2, [pc, #328]	@ (8002204 <HAL_RCC_ClockConfig+0x1bc>)
 80020ba:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80020be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020c0:	4b50      	ldr	r3, [pc, #320]	@ (8002204 <HAL_RCC_ClockConfig+0x1bc>)
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	494d      	ldr	r1, [pc, #308]	@ (8002204 <HAL_RCC_ClockConfig+0x1bc>)
 80020ce:	4313      	orrs	r3, r2
 80020d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0301 	and.w	r3, r3, #1
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d044      	beq.n	8002168 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d107      	bne.n	80020f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020e6:	4b47      	ldr	r3, [pc, #284]	@ (8002204 <HAL_RCC_ClockConfig+0x1bc>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d119      	bne.n	8002126 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e07f      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d003      	beq.n	8002106 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002102:	2b03      	cmp	r3, #3
 8002104:	d107      	bne.n	8002116 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002106:	4b3f      	ldr	r3, [pc, #252]	@ (8002204 <HAL_RCC_ClockConfig+0x1bc>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d109      	bne.n	8002126 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e06f      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002116:	4b3b      	ldr	r3, [pc, #236]	@ (8002204 <HAL_RCC_ClockConfig+0x1bc>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0302 	and.w	r3, r3, #2
 800211e:	2b00      	cmp	r3, #0
 8002120:	d101      	bne.n	8002126 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e067      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002126:	4b37      	ldr	r3, [pc, #220]	@ (8002204 <HAL_RCC_ClockConfig+0x1bc>)
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	f023 0203 	bic.w	r2, r3, #3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	4934      	ldr	r1, [pc, #208]	@ (8002204 <HAL_RCC_ClockConfig+0x1bc>)
 8002134:	4313      	orrs	r3, r2
 8002136:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002138:	f7ff fc3e 	bl	80019b8 <HAL_GetTick>
 800213c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800213e:	e00a      	b.n	8002156 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002140:	f7ff fc3a 	bl	80019b8 <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800214e:	4293      	cmp	r3, r2
 8002150:	d901      	bls.n	8002156 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e04f      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002156:	4b2b      	ldr	r3, [pc, #172]	@ (8002204 <HAL_RCC_ClockConfig+0x1bc>)
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	f003 020c 	and.w	r2, r3, #12
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	429a      	cmp	r2, r3
 8002166:	d1eb      	bne.n	8002140 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002168:	4b25      	ldr	r3, [pc, #148]	@ (8002200 <HAL_RCC_ClockConfig+0x1b8>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 030f 	and.w	r3, r3, #15
 8002170:	683a      	ldr	r2, [r7, #0]
 8002172:	429a      	cmp	r2, r3
 8002174:	d20c      	bcs.n	8002190 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002176:	4b22      	ldr	r3, [pc, #136]	@ (8002200 <HAL_RCC_ClockConfig+0x1b8>)
 8002178:	683a      	ldr	r2, [r7, #0]
 800217a:	b2d2      	uxtb	r2, r2
 800217c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800217e:	4b20      	ldr	r3, [pc, #128]	@ (8002200 <HAL_RCC_ClockConfig+0x1b8>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 030f 	and.w	r3, r3, #15
 8002186:	683a      	ldr	r2, [r7, #0]
 8002188:	429a      	cmp	r2, r3
 800218a:	d001      	beq.n	8002190 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e032      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0304 	and.w	r3, r3, #4
 8002198:	2b00      	cmp	r3, #0
 800219a:	d008      	beq.n	80021ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800219c:	4b19      	ldr	r3, [pc, #100]	@ (8002204 <HAL_RCC_ClockConfig+0x1bc>)
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	4916      	ldr	r1, [pc, #88]	@ (8002204 <HAL_RCC_ClockConfig+0x1bc>)
 80021aa:	4313      	orrs	r3, r2
 80021ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0308 	and.w	r3, r3, #8
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d009      	beq.n	80021ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021ba:	4b12      	ldr	r3, [pc, #72]	@ (8002204 <HAL_RCC_ClockConfig+0x1bc>)
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	691b      	ldr	r3, [r3, #16]
 80021c6:	00db      	lsls	r3, r3, #3
 80021c8:	490e      	ldr	r1, [pc, #56]	@ (8002204 <HAL_RCC_ClockConfig+0x1bc>)
 80021ca:	4313      	orrs	r3, r2
 80021cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80021ce:	f000 fbb1 	bl	8002934 <HAL_RCC_GetSysClockFreq>
 80021d2:	4602      	mov	r2, r0
 80021d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002204 <HAL_RCC_ClockConfig+0x1bc>)
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	091b      	lsrs	r3, r3, #4
 80021da:	f003 030f 	and.w	r3, r3, #15
 80021de:	490a      	ldr	r1, [pc, #40]	@ (8002208 <HAL_RCC_ClockConfig+0x1c0>)
 80021e0:	5ccb      	ldrb	r3, [r1, r3]
 80021e2:	fa22 f303 	lsr.w	r3, r2, r3
 80021e6:	4a09      	ldr	r2, [pc, #36]	@ (800220c <HAL_RCC_ClockConfig+0x1c4>)
 80021e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80021ea:	4b09      	ldr	r3, [pc, #36]	@ (8002210 <HAL_RCC_ClockConfig+0x1c8>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7fe fe76 	bl	8000ee0 <HAL_InitTick>

  return HAL_OK;
 80021f4:	2300      	movs	r3, #0
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3710      	adds	r7, #16
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	40023c00 	.word	0x40023c00
 8002204:	40023800 	.word	0x40023800
 8002208:	08008f6c 	.word	0x08008f6c
 800220c:	20000004 	.word	0x20000004
 8002210:	2000000c 	.word	0x2000000c

08002214 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002218:	4b03      	ldr	r3, [pc, #12]	@ (8002228 <HAL_RCC_GetHCLKFreq+0x14>)
 800221a:	681b      	ldr	r3, [r3, #0]
}
 800221c:	4618      	mov	r0, r3
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop
 8002228:	20000004 	.word	0x20000004

0800222c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002230:	f7ff fff0 	bl	8002214 <HAL_RCC_GetHCLKFreq>
 8002234:	4602      	mov	r2, r0
 8002236:	4b05      	ldr	r3, [pc, #20]	@ (800224c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	0a9b      	lsrs	r3, r3, #10
 800223c:	f003 0307 	and.w	r3, r3, #7
 8002240:	4903      	ldr	r1, [pc, #12]	@ (8002250 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002242:	5ccb      	ldrb	r3, [r1, r3]
 8002244:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002248:	4618      	mov	r0, r3
 800224a:	bd80      	pop	{r7, pc}
 800224c:	40023800 	.word	0x40023800
 8002250:	08008f7c 	.word	0x08008f7c

08002254 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002258:	f7ff ffdc 	bl	8002214 <HAL_RCC_GetHCLKFreq>
 800225c:	4602      	mov	r2, r0
 800225e:	4b05      	ldr	r3, [pc, #20]	@ (8002274 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	0b5b      	lsrs	r3, r3, #13
 8002264:	f003 0307 	and.w	r3, r3, #7
 8002268:	4903      	ldr	r1, [pc, #12]	@ (8002278 <HAL_RCC_GetPCLK2Freq+0x24>)
 800226a:	5ccb      	ldrb	r3, [r1, r3]
 800226c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002270:	4618      	mov	r0, r3
 8002272:	bd80      	pop	{r7, pc}
 8002274:	40023800 	.word	0x40023800
 8002278:	08008f7c 	.word	0x08008f7c

0800227c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	220f      	movs	r2, #15
 800228a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800228c:	4b12      	ldr	r3, [pc, #72]	@ (80022d8 <HAL_RCC_GetClockConfig+0x5c>)
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	f003 0203 	and.w	r2, r3, #3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002298:	4b0f      	ldr	r3, [pc, #60]	@ (80022d8 <HAL_RCC_GetClockConfig+0x5c>)
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80022a4:	4b0c      	ldr	r3, [pc, #48]	@ (80022d8 <HAL_RCC_GetClockConfig+0x5c>)
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80022b0:	4b09      	ldr	r3, [pc, #36]	@ (80022d8 <HAL_RCC_GetClockConfig+0x5c>)
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	08db      	lsrs	r3, r3, #3
 80022b6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80022be:	4b07      	ldr	r3, [pc, #28]	@ (80022dc <HAL_RCC_GetClockConfig+0x60>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 020f 	and.w	r2, r3, #15
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	601a      	str	r2, [r3, #0]
}
 80022ca:	bf00      	nop
 80022cc:	370c      	adds	r7, #12
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop
 80022d8:	40023800 	.word	0x40023800
 80022dc:	40023c00 	.word	0x40023c00

080022e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b08c      	sub	sp, #48	@ 0x30
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80022e8:	2300      	movs	r3, #0
 80022ea:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 80022ec:	2300      	movs	r3, #0
 80022ee:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80022f0:	2300      	movs	r3, #0
 80022f2:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80022f4:	2300      	movs	r3, #0
 80022f6:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80022f8:	2300      	movs	r3, #0
 80022fa:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80022fc:	2300      	movs	r3, #0
 80022fe:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8002300:	2300      	movs	r3, #0
 8002302:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8002304:	2300      	movs	r3, #0
 8002306:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 8002308:	2300      	movs	r3, #0
 800230a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0301 	and.w	r3, r3, #1
 8002314:	2b00      	cmp	r3, #0
 8002316:	d010      	beq.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002318:	4b6f      	ldr	r3, [pc, #444]	@ (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800231a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800231e:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002326:	496c      	ldr	r1, [pc, #432]	@ (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002328:	4313      	orrs	r3, r2
 800232a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002332:	2b00      	cmp	r3, #0
 8002334:	d101      	bne.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8002336:	2301      	movs	r3, #1
 8002338:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0302 	and.w	r3, r3, #2
 8002342:	2b00      	cmp	r3, #0
 8002344:	d010      	beq.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8002346:	4b64      	ldr	r3, [pc, #400]	@ (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002348:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800234c:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002354:	4960      	ldr	r1, [pc, #384]	@ (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002356:	4313      	orrs	r3, r2
 8002358:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002360:	2b00      	cmp	r3, #0
 8002362:	d101      	bne.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8002364:	2301      	movs	r3, #1
 8002366:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0304 	and.w	r3, r3, #4
 8002370:	2b00      	cmp	r3, #0
 8002372:	d017      	beq.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002374:	4b58      	ldr	r3, [pc, #352]	@ (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002376:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800237a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002382:	4955      	ldr	r1, [pc, #340]	@ (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002384:	4313      	orrs	r3, r2
 8002386:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800238e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002392:	d101      	bne.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8002394:	2301      	movs	r3, #1
 8002396:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800239c:	2b00      	cmp	r3, #0
 800239e:	d101      	bne.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80023a0:	2301      	movs	r3, #1
 80023a2:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 0308 	and.w	r3, r3, #8
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d017      	beq.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80023b0:	4b49      	ldr	r3, [pc, #292]	@ (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80023b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80023b6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023be:	4946      	ldr	r1, [pc, #280]	@ (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80023c0:	4313      	orrs	r3, r2
 80023c2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80023ce:	d101      	bne.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80023d0:	2301      	movs	r3, #1
 80023d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d101      	bne.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80023dc:	2301      	movs	r3, #1
 80023de:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 0320 	and.w	r3, r3, #32
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	f000 808a 	beq.w	8002502 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80023ee:	2300      	movs	r3, #0
 80023f0:	60bb      	str	r3, [r7, #8]
 80023f2:	4b39      	ldr	r3, [pc, #228]	@ (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80023f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023f6:	4a38      	ldr	r2, [pc, #224]	@ (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80023f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80023fe:	4b36      	ldr	r3, [pc, #216]	@ (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002402:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002406:	60bb      	str	r3, [r7, #8]
 8002408:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800240a:	4b34      	ldr	r3, [pc, #208]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a33      	ldr	r2, [pc, #204]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002410:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002414:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002416:	f7ff facf 	bl	80019b8 <HAL_GetTick>
 800241a:	6278      	str	r0, [r7, #36]	@ 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800241c:	e008      	b.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800241e:	f7ff facb 	bl	80019b8 <HAL_GetTick>
 8002422:	4602      	mov	r2, r0
 8002424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	2b02      	cmp	r3, #2
 800242a:	d901      	bls.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 800242c:	2303      	movs	r3, #3
 800242e:	e278      	b.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002430:	4b2a      	ldr	r3, [pc, #168]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002438:	2b00      	cmp	r3, #0
 800243a:	d0f0      	beq.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800243c:	4b26      	ldr	r3, [pc, #152]	@ (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800243e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002440:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002444:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002446:	6a3b      	ldr	r3, [r7, #32]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d02f      	beq.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002450:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002454:	6a3a      	ldr	r2, [r7, #32]
 8002456:	429a      	cmp	r2, r3
 8002458:	d028      	beq.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800245a:	4b1f      	ldr	r3, [pc, #124]	@ (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800245c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800245e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002462:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002464:	4b1e      	ldr	r3, [pc, #120]	@ (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002466:	2201      	movs	r2, #1
 8002468:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800246a:	4b1d      	ldr	r3, [pc, #116]	@ (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800246c:	2200      	movs	r2, #0
 800246e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002470:	4a19      	ldr	r2, [pc, #100]	@ (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002472:	6a3b      	ldr	r3, [r7, #32]
 8002474:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002476:	4b18      	ldr	r3, [pc, #96]	@ (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002478:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800247a:	f003 0301 	and.w	r3, r3, #1
 800247e:	2b01      	cmp	r3, #1
 8002480:	d114      	bne.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002482:	f7ff fa99 	bl	80019b8 <HAL_GetTick>
 8002486:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002488:	e00a      	b.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800248a:	f7ff fa95 	bl	80019b8 <HAL_GetTick>
 800248e:	4602      	mov	r2, r0
 8002490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002498:	4293      	cmp	r3, r2
 800249a:	d901      	bls.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 800249c:	2303      	movs	r3, #3
 800249e:	e240      	b.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024a0:	4b0d      	ldr	r3, [pc, #52]	@ (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80024a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024a4:	f003 0302 	and.w	r3, r3, #2
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d0ee      	beq.n	800248a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024b0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80024b4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80024b8:	d114      	bne.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x204>
 80024ba:	4b07      	ldr	r3, [pc, #28]	@ (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024c6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80024ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80024ce:	4902      	ldr	r1, [pc, #8]	@ (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80024d0:	4313      	orrs	r3, r2
 80024d2:	608b      	str	r3, [r1, #8]
 80024d4:	e00c      	b.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80024d6:	bf00      	nop
 80024d8:	40023800 	.word	0x40023800
 80024dc:	40007000 	.word	0x40007000
 80024e0:	42470e40 	.word	0x42470e40
 80024e4:	4b4a      	ldr	r3, [pc, #296]	@ (8002610 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	4a49      	ldr	r2, [pc, #292]	@ (8002610 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80024ea:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80024ee:	6093      	str	r3, [r2, #8]
 80024f0:	4b47      	ldr	r3, [pc, #284]	@ (8002610 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80024f2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024fc:	4944      	ldr	r1, [pc, #272]	@ (8002610 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80024fe:	4313      	orrs	r3, r2
 8002500:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0310 	and.w	r3, r3, #16
 800250a:	2b00      	cmp	r3, #0
 800250c:	d004      	beq.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8002514:	4b3f      	ldr	r3, [pc, #252]	@ (8002614 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8002516:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002520:	2b00      	cmp	r3, #0
 8002522:	d00a      	beq.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002524:	4b3a      	ldr	r3, [pc, #232]	@ (8002610 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002526:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800252a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002532:	4937      	ldr	r1, [pc, #220]	@ (8002610 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002534:	4313      	orrs	r3, r2
 8002536:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002542:	2b00      	cmp	r3, #0
 8002544:	d00a      	beq.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002546:	4b32      	ldr	r3, [pc, #200]	@ (8002610 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002548:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800254c:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002554:	492e      	ldr	r1, [pc, #184]	@ (8002610 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002556:	4313      	orrs	r3, r2
 8002558:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002564:	2b00      	cmp	r3, #0
 8002566:	d011      	beq.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002568:	4b29      	ldr	r3, [pc, #164]	@ (8002610 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800256a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800256e:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002576:	4926      	ldr	r1, [pc, #152]	@ (8002610 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002578:	4313      	orrs	r3, r2
 800257a:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002582:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002586:	d101      	bne.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8002588:	2301      	movs	r3, #1
 800258a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002594:	2b00      	cmp	r3, #0
 8002596:	d00a      	beq.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8002598:	4b1d      	ldr	r3, [pc, #116]	@ (8002610 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800259a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800259e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025a6:	491a      	ldr	r1, [pc, #104]	@ (8002610 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80025a8:	4313      	orrs	r3, r2
 80025aa:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d011      	beq.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80025ba:	4b15      	ldr	r3, [pc, #84]	@ (8002610 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80025bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80025c0:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025c8:	4911      	ldr	r1, [pc, #68]	@ (8002610 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80025ca:	4313      	orrs	r3, r2
 80025cc:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80025d8:	d101      	bne.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80025da:	2301      	movs	r3, #1
 80025dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80025de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d005      	beq.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80025ec:	f040 80ff 	bne.w	80027ee <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80025f0:	4b09      	ldr	r3, [pc, #36]	@ (8002618 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80025f6:	f7ff f9df 	bl	80019b8 <HAL_GetTick>
 80025fa:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80025fc:	e00e      	b.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80025fe:	f7ff f9db 	bl	80019b8 <HAL_GetTick>
 8002602:	4602      	mov	r2, r0
 8002604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	2b02      	cmp	r3, #2
 800260a:	d907      	bls.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800260c:	2303      	movs	r3, #3
 800260e:	e188      	b.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002610:	40023800 	.word	0x40023800
 8002614:	424711e0 	.word	0x424711e0
 8002618:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800261c:	4b7e      	ldr	r3, [pc, #504]	@ (8002818 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002624:	2b00      	cmp	r3, #0
 8002626:	d1ea      	bne.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0301 	and.w	r3, r3, #1
 8002630:	2b00      	cmp	r3, #0
 8002632:	d003      	beq.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002638:	2b00      	cmp	r3, #0
 800263a:	d009      	beq.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002644:	2b00      	cmp	r3, #0
 8002646:	d028      	beq.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800264c:	2b00      	cmp	r3, #0
 800264e:	d124      	bne.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002650:	4b71      	ldr	r3, [pc, #452]	@ (8002818 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002652:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002656:	0c1b      	lsrs	r3, r3, #16
 8002658:	f003 0303 	and.w	r3, r3, #3
 800265c:	3301      	adds	r3, #1
 800265e:	005b      	lsls	r3, r3, #1
 8002660:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002662:	4b6d      	ldr	r3, [pc, #436]	@ (8002818 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002664:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002668:	0e1b      	lsrs	r3, r3, #24
 800266a:	f003 030f 	and.w	r3, r3, #15
 800266e:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	685a      	ldr	r2, [r3, #4]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	019b      	lsls	r3, r3, #6
 800267a:	431a      	orrs	r2, r3
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	085b      	lsrs	r3, r3, #1
 8002680:	3b01      	subs	r3, #1
 8002682:	041b      	lsls	r3, r3, #16
 8002684:	431a      	orrs	r2, r3
 8002686:	69bb      	ldr	r3, [r7, #24]
 8002688:	061b      	lsls	r3, r3, #24
 800268a:	431a      	orrs	r2, r3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	695b      	ldr	r3, [r3, #20]
 8002690:	071b      	lsls	r3, r3, #28
 8002692:	4961      	ldr	r1, [pc, #388]	@ (8002818 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002694:	4313      	orrs	r3, r2
 8002696:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0304 	and.w	r3, r3, #4
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d004      	beq.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80026ae:	d00a      	beq.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d035      	beq.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026c0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80026c4:	d130      	bne.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80026c6:	4b54      	ldr	r3, [pc, #336]	@ (8002818 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80026c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80026cc:	0c1b      	lsrs	r3, r3, #16
 80026ce:	f003 0303 	and.w	r3, r3, #3
 80026d2:	3301      	adds	r3, #1
 80026d4:	005b      	lsls	r3, r3, #1
 80026d6:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80026d8:	4b4f      	ldr	r3, [pc, #316]	@ (8002818 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80026da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80026de:	0f1b      	lsrs	r3, r3, #28
 80026e0:	f003 0307 	and.w	r3, r3, #7
 80026e4:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685a      	ldr	r2, [r3, #4]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	019b      	lsls	r3, r3, #6
 80026f0:	431a      	orrs	r2, r3
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	085b      	lsrs	r3, r3, #1
 80026f6:	3b01      	subs	r3, #1
 80026f8:	041b      	lsls	r3, r3, #16
 80026fa:	431a      	orrs	r2, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	691b      	ldr	r3, [r3, #16]
 8002700:	061b      	lsls	r3, r3, #24
 8002702:	431a      	orrs	r2, r3
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	071b      	lsls	r3, r3, #28
 8002708:	4943      	ldr	r1, [pc, #268]	@ (8002818 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800270a:	4313      	orrs	r3, r2
 800270c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002710:	4b41      	ldr	r3, [pc, #260]	@ (8002818 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002712:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002716:	f023 021f 	bic.w	r2, r3, #31
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800271e:	3b01      	subs	r3, #1
 8002720:	493d      	ldr	r1, [pc, #244]	@ (8002818 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002722:	4313      	orrs	r3, r2
 8002724:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002730:	2b00      	cmp	r3, #0
 8002732:	d029      	beq.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002738:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800273c:	d124      	bne.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800273e:	4b36      	ldr	r3, [pc, #216]	@ (8002818 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002740:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002744:	0c1b      	lsrs	r3, r3, #16
 8002746:	f003 0303 	and.w	r3, r3, #3
 800274a:	3301      	adds	r3, #1
 800274c:	005b      	lsls	r3, r3, #1
 800274e:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002750:	4b31      	ldr	r3, [pc, #196]	@ (8002818 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002752:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002756:	0f1b      	lsrs	r3, r3, #28
 8002758:	f003 0307 	and.w	r3, r3, #7
 800275c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685a      	ldr	r2, [r3, #4]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	019b      	lsls	r3, r3, #6
 8002768:	431a      	orrs	r2, r3
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	68db      	ldr	r3, [r3, #12]
 800276e:	085b      	lsrs	r3, r3, #1
 8002770:	3b01      	subs	r3, #1
 8002772:	041b      	lsls	r3, r3, #16
 8002774:	431a      	orrs	r2, r3
 8002776:	69bb      	ldr	r3, [r7, #24]
 8002778:	061b      	lsls	r3, r3, #24
 800277a:	431a      	orrs	r2, r3
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	071b      	lsls	r3, r3, #28
 8002780:	4925      	ldr	r1, [pc, #148]	@ (8002818 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002782:	4313      	orrs	r3, r2
 8002784:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002790:	2b00      	cmp	r3, #0
 8002792:	d016      	beq.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	685a      	ldr	r2, [r3, #4]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	019b      	lsls	r3, r3, #6
 800279e:	431a      	orrs	r2, r3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	085b      	lsrs	r3, r3, #1
 80027a6:	3b01      	subs	r3, #1
 80027a8:	041b      	lsls	r3, r3, #16
 80027aa:	431a      	orrs	r2, r3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	691b      	ldr	r3, [r3, #16]
 80027b0:	061b      	lsls	r3, r3, #24
 80027b2:	431a      	orrs	r2, r3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	695b      	ldr	r3, [r3, #20]
 80027b8:	071b      	lsls	r3, r3, #28
 80027ba:	4917      	ldr	r1, [pc, #92]	@ (8002818 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80027bc:	4313      	orrs	r3, r2
 80027be:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80027c2:	4b16      	ldr	r3, [pc, #88]	@ (800281c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80027c4:	2201      	movs	r2, #1
 80027c6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80027c8:	f7ff f8f6 	bl	80019b8 <HAL_GetTick>
 80027cc:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80027ce:	e008      	b.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80027d0:	f7ff f8f2 	bl	80019b8 <HAL_GetTick>
 80027d4:	4602      	mov	r2, r0
 80027d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	2b02      	cmp	r3, #2
 80027dc:	d901      	bls.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80027de:	2303      	movs	r3, #3
 80027e0:	e09f      	b.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80027e2:	4b0d      	ldr	r3, [pc, #52]	@ (8002818 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d0f0      	beq.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 80027ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	f040 8095 	bne.w	8002920 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80027f6:	4b0a      	ldr	r3, [pc, #40]	@ (8002820 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80027fc:	f7ff f8dc 	bl	80019b8 <HAL_GetTick>
 8002800:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002802:	e00f      	b.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002804:	f7ff f8d8 	bl	80019b8 <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	2b02      	cmp	r3, #2
 8002810:	d908      	bls.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	e085      	b.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002816:	bf00      	nop
 8002818:	40023800 	.word	0x40023800
 800281c:	42470068 	.word	0x42470068
 8002820:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002824:	4b41      	ldr	r3, [pc, #260]	@ (800292c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800282c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002830:	d0e8      	beq.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0304 	and.w	r3, r3, #4
 800283a:	2b00      	cmp	r3, #0
 800283c:	d003      	beq.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x566>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002842:	2b00      	cmp	r3, #0
 8002844:	d009      	beq.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800284e:	2b00      	cmp	r3, #0
 8002850:	d02b      	beq.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002856:	2b00      	cmp	r3, #0
 8002858:	d127      	bne.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800285a:	4b34      	ldr	r3, [pc, #208]	@ (800292c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800285c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002860:	0c1b      	lsrs	r3, r3, #16
 8002862:	f003 0303 	and.w	r3, r3, #3
 8002866:	3301      	adds	r3, #1
 8002868:	005b      	lsls	r3, r3, #1
 800286a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	699a      	ldr	r2, [r3, #24]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	69db      	ldr	r3, [r3, #28]
 8002874:	019b      	lsls	r3, r3, #6
 8002876:	431a      	orrs	r2, r3
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	085b      	lsrs	r3, r3, #1
 800287c:	3b01      	subs	r3, #1
 800287e:	041b      	lsls	r3, r3, #16
 8002880:	431a      	orrs	r2, r3
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002886:	061b      	lsls	r3, r3, #24
 8002888:	4928      	ldr	r1, [pc, #160]	@ (800292c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800288a:	4313      	orrs	r3, r2
 800288c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002890:	4b26      	ldr	r3, [pc, #152]	@ (800292c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002892:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002896:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800289e:	3b01      	subs	r3, #1
 80028a0:	021b      	lsls	r3, r3, #8
 80028a2:	4922      	ldr	r1, [pc, #136]	@ (800292c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80028a4:	4313      	orrs	r3, r2
 80028a6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d01d      	beq.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x612>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028ba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80028be:	d118      	bne.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80028c0:	4b1a      	ldr	r3, [pc, #104]	@ (800292c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80028c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028c6:	0e1b      	lsrs	r3, r3, #24
 80028c8:	f003 030f 	and.w	r3, r3, #15
 80028cc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	699a      	ldr	r2, [r3, #24]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	69db      	ldr	r3, [r3, #28]
 80028d6:	019b      	lsls	r3, r3, #6
 80028d8:	431a      	orrs	r2, r3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6a1b      	ldr	r3, [r3, #32]
 80028de:	085b      	lsrs	r3, r3, #1
 80028e0:	3b01      	subs	r3, #1
 80028e2:	041b      	lsls	r3, r3, #16
 80028e4:	431a      	orrs	r2, r3
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	061b      	lsls	r3, r3, #24
 80028ea:	4910      	ldr	r1, [pc, #64]	@ (800292c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80028ec:	4313      	orrs	r3, r2
 80028ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80028f2:	4b0f      	ldr	r3, [pc, #60]	@ (8002930 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 80028f4:	2201      	movs	r2, #1
 80028f6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80028f8:	f7ff f85e 	bl	80019b8 <HAL_GetTick>
 80028fc:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80028fe:	e008      	b.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002900:	f7ff f85a 	bl	80019b8 <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	2b02      	cmp	r3, #2
 800290c:	d901      	bls.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e007      	b.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002912:	4b06      	ldr	r3, [pc, #24]	@ (800292c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800291a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800291e:	d1ef      	bne.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8002920:	2300      	movs	r3, #0
}
 8002922:	4618      	mov	r0, r3
 8002924:	3730      	adds	r7, #48	@ 0x30
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	40023800 	.word	0x40023800
 8002930:	42470070 	.word	0x42470070

08002934 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002934:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002938:	b0ae      	sub	sp, #184	@ 0xb8
 800293a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800293c:	2300      	movs	r3, #0
 800293e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002942:	2300      	movs	r3, #0
 8002944:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002948:	2300      	movs	r3, #0
 800294a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800294e:	2300      	movs	r3, #0
 8002950:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002954:	2300      	movs	r3, #0
 8002956:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800295a:	4bcb      	ldr	r3, [pc, #812]	@ (8002c88 <HAL_RCC_GetSysClockFreq+0x354>)
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	f003 030c 	and.w	r3, r3, #12
 8002962:	2b0c      	cmp	r3, #12
 8002964:	f200 8206 	bhi.w	8002d74 <HAL_RCC_GetSysClockFreq+0x440>
 8002968:	a201      	add	r2, pc, #4	@ (adr r2, 8002970 <HAL_RCC_GetSysClockFreq+0x3c>)
 800296a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800296e:	bf00      	nop
 8002970:	080029a5 	.word	0x080029a5
 8002974:	08002d75 	.word	0x08002d75
 8002978:	08002d75 	.word	0x08002d75
 800297c:	08002d75 	.word	0x08002d75
 8002980:	080029ad 	.word	0x080029ad
 8002984:	08002d75 	.word	0x08002d75
 8002988:	08002d75 	.word	0x08002d75
 800298c:	08002d75 	.word	0x08002d75
 8002990:	080029b5 	.word	0x080029b5
 8002994:	08002d75 	.word	0x08002d75
 8002998:	08002d75 	.word	0x08002d75
 800299c:	08002d75 	.word	0x08002d75
 80029a0:	08002ba5 	.word	0x08002ba5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029a4:	4bb9      	ldr	r3, [pc, #740]	@ (8002c8c <HAL_RCC_GetSysClockFreq+0x358>)
 80029a6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 80029aa:	e1e7      	b.n	8002d7c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029ac:	4bb8      	ldr	r3, [pc, #736]	@ (8002c90 <HAL_RCC_GetSysClockFreq+0x35c>)
 80029ae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80029b2:	e1e3      	b.n	8002d7c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029b4:	4bb4      	ldr	r3, [pc, #720]	@ (8002c88 <HAL_RCC_GetSysClockFreq+0x354>)
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80029bc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029c0:	4bb1      	ldr	r3, [pc, #708]	@ (8002c88 <HAL_RCC_GetSysClockFreq+0x354>)
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d071      	beq.n	8002ab0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029cc:	4bae      	ldr	r3, [pc, #696]	@ (8002c88 <HAL_RCC_GetSysClockFreq+0x354>)
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	099b      	lsrs	r3, r3, #6
 80029d2:	2200      	movs	r2, #0
 80029d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80029d8:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80029dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80029e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029e4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80029e8:	2300      	movs	r3, #0
 80029ea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80029ee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80029f2:	4622      	mov	r2, r4
 80029f4:	462b      	mov	r3, r5
 80029f6:	f04f 0000 	mov.w	r0, #0
 80029fa:	f04f 0100 	mov.w	r1, #0
 80029fe:	0159      	lsls	r1, r3, #5
 8002a00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a04:	0150      	lsls	r0, r2, #5
 8002a06:	4602      	mov	r2, r0
 8002a08:	460b      	mov	r3, r1
 8002a0a:	4621      	mov	r1, r4
 8002a0c:	1a51      	subs	r1, r2, r1
 8002a0e:	6439      	str	r1, [r7, #64]	@ 0x40
 8002a10:	4629      	mov	r1, r5
 8002a12:	eb63 0301 	sbc.w	r3, r3, r1
 8002a16:	647b      	str	r3, [r7, #68]	@ 0x44
 8002a18:	f04f 0200 	mov.w	r2, #0
 8002a1c:	f04f 0300 	mov.w	r3, #0
 8002a20:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002a24:	4649      	mov	r1, r9
 8002a26:	018b      	lsls	r3, r1, #6
 8002a28:	4641      	mov	r1, r8
 8002a2a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a2e:	4641      	mov	r1, r8
 8002a30:	018a      	lsls	r2, r1, #6
 8002a32:	4641      	mov	r1, r8
 8002a34:	1a51      	subs	r1, r2, r1
 8002a36:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002a38:	4649      	mov	r1, r9
 8002a3a:	eb63 0301 	sbc.w	r3, r3, r1
 8002a3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a40:	f04f 0200 	mov.w	r2, #0
 8002a44:	f04f 0300 	mov.w	r3, #0
 8002a48:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002a4c:	4649      	mov	r1, r9
 8002a4e:	00cb      	lsls	r3, r1, #3
 8002a50:	4641      	mov	r1, r8
 8002a52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a56:	4641      	mov	r1, r8
 8002a58:	00ca      	lsls	r2, r1, #3
 8002a5a:	4610      	mov	r0, r2
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	4603      	mov	r3, r0
 8002a60:	4622      	mov	r2, r4
 8002a62:	189b      	adds	r3, r3, r2
 8002a64:	633b      	str	r3, [r7, #48]	@ 0x30
 8002a66:	462b      	mov	r3, r5
 8002a68:	460a      	mov	r2, r1
 8002a6a:	eb42 0303 	adc.w	r3, r2, r3
 8002a6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a70:	f04f 0200 	mov.w	r2, #0
 8002a74:	f04f 0300 	mov.w	r3, #0
 8002a78:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002a7c:	4629      	mov	r1, r5
 8002a7e:	024b      	lsls	r3, r1, #9
 8002a80:	4621      	mov	r1, r4
 8002a82:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002a86:	4621      	mov	r1, r4
 8002a88:	024a      	lsls	r2, r1, #9
 8002a8a:	4610      	mov	r0, r2
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002a92:	2200      	movs	r2, #0
 8002a94:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002a98:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002a9c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002aa0:	f7fd fc1e 	bl	80002e0 <__aeabi_uldivmod>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	460b      	mov	r3, r1
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002aae:	e067      	b.n	8002b80 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ab0:	4b75      	ldr	r3, [pc, #468]	@ (8002c88 <HAL_RCC_GetSysClockFreq+0x354>)
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	099b      	lsrs	r3, r3, #6
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002abc:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002ac0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002ac4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ac8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002aca:	2300      	movs	r3, #0
 8002acc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002ace:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002ad2:	4622      	mov	r2, r4
 8002ad4:	462b      	mov	r3, r5
 8002ad6:	f04f 0000 	mov.w	r0, #0
 8002ada:	f04f 0100 	mov.w	r1, #0
 8002ade:	0159      	lsls	r1, r3, #5
 8002ae0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ae4:	0150      	lsls	r0, r2, #5
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	460b      	mov	r3, r1
 8002aea:	4621      	mov	r1, r4
 8002aec:	1a51      	subs	r1, r2, r1
 8002aee:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002af0:	4629      	mov	r1, r5
 8002af2:	eb63 0301 	sbc.w	r3, r3, r1
 8002af6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002af8:	f04f 0200 	mov.w	r2, #0
 8002afc:	f04f 0300 	mov.w	r3, #0
 8002b00:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002b04:	4649      	mov	r1, r9
 8002b06:	018b      	lsls	r3, r1, #6
 8002b08:	4641      	mov	r1, r8
 8002b0a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b0e:	4641      	mov	r1, r8
 8002b10:	018a      	lsls	r2, r1, #6
 8002b12:	4641      	mov	r1, r8
 8002b14:	ebb2 0a01 	subs.w	sl, r2, r1
 8002b18:	4649      	mov	r1, r9
 8002b1a:	eb63 0b01 	sbc.w	fp, r3, r1
 8002b1e:	f04f 0200 	mov.w	r2, #0
 8002b22:	f04f 0300 	mov.w	r3, #0
 8002b26:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002b2a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002b2e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b32:	4692      	mov	sl, r2
 8002b34:	469b      	mov	fp, r3
 8002b36:	4623      	mov	r3, r4
 8002b38:	eb1a 0303 	adds.w	r3, sl, r3
 8002b3c:	623b      	str	r3, [r7, #32]
 8002b3e:	462b      	mov	r3, r5
 8002b40:	eb4b 0303 	adc.w	r3, fp, r3
 8002b44:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b46:	f04f 0200 	mov.w	r2, #0
 8002b4a:	f04f 0300 	mov.w	r3, #0
 8002b4e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002b52:	4629      	mov	r1, r5
 8002b54:	028b      	lsls	r3, r1, #10
 8002b56:	4621      	mov	r1, r4
 8002b58:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b5c:	4621      	mov	r1, r4
 8002b5e:	028a      	lsls	r2, r1, #10
 8002b60:	4610      	mov	r0, r2
 8002b62:	4619      	mov	r1, r3
 8002b64:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002b68:	2200      	movs	r2, #0
 8002b6a:	673b      	str	r3, [r7, #112]	@ 0x70
 8002b6c:	677a      	str	r2, [r7, #116]	@ 0x74
 8002b6e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002b72:	f7fd fbb5 	bl	80002e0 <__aeabi_uldivmod>
 8002b76:	4602      	mov	r2, r0
 8002b78:	460b      	mov	r3, r1
 8002b7a:	4613      	mov	r3, r2
 8002b7c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b80:	4b41      	ldr	r3, [pc, #260]	@ (8002c88 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	0c1b      	lsrs	r3, r3, #16
 8002b86:	f003 0303 	and.w	r3, r3, #3
 8002b8a:	3301      	adds	r3, #1
 8002b8c:	005b      	lsls	r3, r3, #1
 8002b8e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8002b92:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002b96:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002b9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b9e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002ba2:	e0eb      	b.n	8002d7c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ba4:	4b38      	ldr	r3, [pc, #224]	@ (8002c88 <HAL_RCC_GetSysClockFreq+0x354>)
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002bac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002bb0:	4b35      	ldr	r3, [pc, #212]	@ (8002c88 <HAL_RCC_GetSysClockFreq+0x354>)
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d06b      	beq.n	8002c94 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bbc:	4b32      	ldr	r3, [pc, #200]	@ (8002c88 <HAL_RCC_GetSysClockFreq+0x354>)
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	099b      	lsrs	r3, r3, #6
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002bc6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002bc8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002bca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bce:	663b      	str	r3, [r7, #96]	@ 0x60
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	667b      	str	r3, [r7, #100]	@ 0x64
 8002bd4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002bd8:	4622      	mov	r2, r4
 8002bda:	462b      	mov	r3, r5
 8002bdc:	f04f 0000 	mov.w	r0, #0
 8002be0:	f04f 0100 	mov.w	r1, #0
 8002be4:	0159      	lsls	r1, r3, #5
 8002be6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bea:	0150      	lsls	r0, r2, #5
 8002bec:	4602      	mov	r2, r0
 8002bee:	460b      	mov	r3, r1
 8002bf0:	4621      	mov	r1, r4
 8002bf2:	1a51      	subs	r1, r2, r1
 8002bf4:	61b9      	str	r1, [r7, #24]
 8002bf6:	4629      	mov	r1, r5
 8002bf8:	eb63 0301 	sbc.w	r3, r3, r1
 8002bfc:	61fb      	str	r3, [r7, #28]
 8002bfe:	f04f 0200 	mov.w	r2, #0
 8002c02:	f04f 0300 	mov.w	r3, #0
 8002c06:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002c0a:	4659      	mov	r1, fp
 8002c0c:	018b      	lsls	r3, r1, #6
 8002c0e:	4651      	mov	r1, sl
 8002c10:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c14:	4651      	mov	r1, sl
 8002c16:	018a      	lsls	r2, r1, #6
 8002c18:	4651      	mov	r1, sl
 8002c1a:	ebb2 0801 	subs.w	r8, r2, r1
 8002c1e:	4659      	mov	r1, fp
 8002c20:	eb63 0901 	sbc.w	r9, r3, r1
 8002c24:	f04f 0200 	mov.w	r2, #0
 8002c28:	f04f 0300 	mov.w	r3, #0
 8002c2c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c30:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c34:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c38:	4690      	mov	r8, r2
 8002c3a:	4699      	mov	r9, r3
 8002c3c:	4623      	mov	r3, r4
 8002c3e:	eb18 0303 	adds.w	r3, r8, r3
 8002c42:	613b      	str	r3, [r7, #16]
 8002c44:	462b      	mov	r3, r5
 8002c46:	eb49 0303 	adc.w	r3, r9, r3
 8002c4a:	617b      	str	r3, [r7, #20]
 8002c4c:	f04f 0200 	mov.w	r2, #0
 8002c50:	f04f 0300 	mov.w	r3, #0
 8002c54:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002c58:	4629      	mov	r1, r5
 8002c5a:	024b      	lsls	r3, r1, #9
 8002c5c:	4621      	mov	r1, r4
 8002c5e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002c62:	4621      	mov	r1, r4
 8002c64:	024a      	lsls	r2, r1, #9
 8002c66:	4610      	mov	r0, r2
 8002c68:	4619      	mov	r1, r3
 8002c6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002c6e:	2200      	movs	r2, #0
 8002c70:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002c72:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002c74:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002c78:	f7fd fb32 	bl	80002e0 <__aeabi_uldivmod>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	460b      	mov	r3, r1
 8002c80:	4613      	mov	r3, r2
 8002c82:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002c86:	e065      	b.n	8002d54 <HAL_RCC_GetSysClockFreq+0x420>
 8002c88:	40023800 	.word	0x40023800
 8002c8c:	00f42400 	.word	0x00f42400
 8002c90:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c94:	4b3d      	ldr	r3, [pc, #244]	@ (8002d8c <HAL_RCC_GetSysClockFreq+0x458>)
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	099b      	lsrs	r3, r3, #6
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	4611      	mov	r1, r2
 8002ca0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002ca4:	653b      	str	r3, [r7, #80]	@ 0x50
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	657b      	str	r3, [r7, #84]	@ 0x54
 8002caa:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002cae:	4642      	mov	r2, r8
 8002cb0:	464b      	mov	r3, r9
 8002cb2:	f04f 0000 	mov.w	r0, #0
 8002cb6:	f04f 0100 	mov.w	r1, #0
 8002cba:	0159      	lsls	r1, r3, #5
 8002cbc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002cc0:	0150      	lsls	r0, r2, #5
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	460b      	mov	r3, r1
 8002cc6:	4641      	mov	r1, r8
 8002cc8:	1a51      	subs	r1, r2, r1
 8002cca:	60b9      	str	r1, [r7, #8]
 8002ccc:	4649      	mov	r1, r9
 8002cce:	eb63 0301 	sbc.w	r3, r3, r1
 8002cd2:	60fb      	str	r3, [r7, #12]
 8002cd4:	f04f 0200 	mov.w	r2, #0
 8002cd8:	f04f 0300 	mov.w	r3, #0
 8002cdc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002ce0:	4659      	mov	r1, fp
 8002ce2:	018b      	lsls	r3, r1, #6
 8002ce4:	4651      	mov	r1, sl
 8002ce6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002cea:	4651      	mov	r1, sl
 8002cec:	018a      	lsls	r2, r1, #6
 8002cee:	4651      	mov	r1, sl
 8002cf0:	1a54      	subs	r4, r2, r1
 8002cf2:	4659      	mov	r1, fp
 8002cf4:	eb63 0501 	sbc.w	r5, r3, r1
 8002cf8:	f04f 0200 	mov.w	r2, #0
 8002cfc:	f04f 0300 	mov.w	r3, #0
 8002d00:	00eb      	lsls	r3, r5, #3
 8002d02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d06:	00e2      	lsls	r2, r4, #3
 8002d08:	4614      	mov	r4, r2
 8002d0a:	461d      	mov	r5, r3
 8002d0c:	4643      	mov	r3, r8
 8002d0e:	18e3      	adds	r3, r4, r3
 8002d10:	603b      	str	r3, [r7, #0]
 8002d12:	464b      	mov	r3, r9
 8002d14:	eb45 0303 	adc.w	r3, r5, r3
 8002d18:	607b      	str	r3, [r7, #4]
 8002d1a:	f04f 0200 	mov.w	r2, #0
 8002d1e:	f04f 0300 	mov.w	r3, #0
 8002d22:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d26:	4629      	mov	r1, r5
 8002d28:	028b      	lsls	r3, r1, #10
 8002d2a:	4621      	mov	r1, r4
 8002d2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d30:	4621      	mov	r1, r4
 8002d32:	028a      	lsls	r2, r1, #10
 8002d34:	4610      	mov	r0, r2
 8002d36:	4619      	mov	r1, r3
 8002d38:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002d40:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002d42:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002d46:	f7fd facb 	bl	80002e0 <__aeabi_uldivmod>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	460b      	mov	r3, r1
 8002d4e:	4613      	mov	r3, r2
 8002d50:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002d54:	4b0d      	ldr	r3, [pc, #52]	@ (8002d8c <HAL_RCC_GetSysClockFreq+0x458>)
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	0f1b      	lsrs	r3, r3, #28
 8002d5a:	f003 0307 	and.w	r3, r3, #7
 8002d5e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8002d62:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002d66:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002d6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d6e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002d72:	e003      	b.n	8002d7c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d74:	4b06      	ldr	r3, [pc, #24]	@ (8002d90 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002d76:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002d7a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d7c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	37b8      	adds	r7, #184	@ 0xb8
 8002d84:	46bd      	mov	sp, r7
 8002d86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d8a:	bf00      	nop
 8002d8c:	40023800 	.word	0x40023800
 8002d90:	00f42400 	.word	0x00f42400

08002d94 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b086      	sub	sp, #24
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d101      	bne.n	8002da6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e28d      	b.n	80032c2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0301 	and.w	r3, r3, #1
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	f000 8083 	beq.w	8002eba <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002db4:	4b94      	ldr	r3, [pc, #592]	@ (8003008 <HAL_RCC_OscConfig+0x274>)
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	f003 030c 	and.w	r3, r3, #12
 8002dbc:	2b04      	cmp	r3, #4
 8002dbe:	d019      	beq.n	8002df4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002dc0:	4b91      	ldr	r3, [pc, #580]	@ (8003008 <HAL_RCC_OscConfig+0x274>)
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002dc8:	2b08      	cmp	r3, #8
 8002dca:	d106      	bne.n	8002dda <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002dcc:	4b8e      	ldr	r3, [pc, #568]	@ (8003008 <HAL_RCC_OscConfig+0x274>)
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002dd4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002dd8:	d00c      	beq.n	8002df4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002dda:	4b8b      	ldr	r3, [pc, #556]	@ (8003008 <HAL_RCC_OscConfig+0x274>)
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002de2:	2b0c      	cmp	r3, #12
 8002de4:	d112      	bne.n	8002e0c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002de6:	4b88      	ldr	r3, [pc, #544]	@ (8003008 <HAL_RCC_OscConfig+0x274>)
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002dee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002df2:	d10b      	bne.n	8002e0c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002df4:	4b84      	ldr	r3, [pc, #528]	@ (8003008 <HAL_RCC_OscConfig+0x274>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d05b      	beq.n	8002eb8 <HAL_RCC_OscConfig+0x124>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d157      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e25a      	b.n	80032c2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e14:	d106      	bne.n	8002e24 <HAL_RCC_OscConfig+0x90>
 8002e16:	4b7c      	ldr	r3, [pc, #496]	@ (8003008 <HAL_RCC_OscConfig+0x274>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a7b      	ldr	r2, [pc, #492]	@ (8003008 <HAL_RCC_OscConfig+0x274>)
 8002e1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e20:	6013      	str	r3, [r2, #0]
 8002e22:	e01d      	b.n	8002e60 <HAL_RCC_OscConfig+0xcc>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002e2c:	d10c      	bne.n	8002e48 <HAL_RCC_OscConfig+0xb4>
 8002e2e:	4b76      	ldr	r3, [pc, #472]	@ (8003008 <HAL_RCC_OscConfig+0x274>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a75      	ldr	r2, [pc, #468]	@ (8003008 <HAL_RCC_OscConfig+0x274>)
 8002e34:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e38:	6013      	str	r3, [r2, #0]
 8002e3a:	4b73      	ldr	r3, [pc, #460]	@ (8003008 <HAL_RCC_OscConfig+0x274>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a72      	ldr	r2, [pc, #456]	@ (8003008 <HAL_RCC_OscConfig+0x274>)
 8002e40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e44:	6013      	str	r3, [r2, #0]
 8002e46:	e00b      	b.n	8002e60 <HAL_RCC_OscConfig+0xcc>
 8002e48:	4b6f      	ldr	r3, [pc, #444]	@ (8003008 <HAL_RCC_OscConfig+0x274>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a6e      	ldr	r2, [pc, #440]	@ (8003008 <HAL_RCC_OscConfig+0x274>)
 8002e4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e52:	6013      	str	r3, [r2, #0]
 8002e54:	4b6c      	ldr	r3, [pc, #432]	@ (8003008 <HAL_RCC_OscConfig+0x274>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a6b      	ldr	r2, [pc, #428]	@ (8003008 <HAL_RCC_OscConfig+0x274>)
 8002e5a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d013      	beq.n	8002e90 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e68:	f7fe fda6 	bl	80019b8 <HAL_GetTick>
 8002e6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e6e:	e008      	b.n	8002e82 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e70:	f7fe fda2 	bl	80019b8 <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	2b64      	cmp	r3, #100	@ 0x64
 8002e7c:	d901      	bls.n	8002e82 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e21f      	b.n	80032c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e82:	4b61      	ldr	r3, [pc, #388]	@ (8003008 <HAL_RCC_OscConfig+0x274>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d0f0      	beq.n	8002e70 <HAL_RCC_OscConfig+0xdc>
 8002e8e:	e014      	b.n	8002eba <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e90:	f7fe fd92 	bl	80019b8 <HAL_GetTick>
 8002e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e96:	e008      	b.n	8002eaa <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e98:	f7fe fd8e 	bl	80019b8 <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	2b64      	cmp	r3, #100	@ 0x64
 8002ea4:	d901      	bls.n	8002eaa <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	e20b      	b.n	80032c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002eaa:	4b57      	ldr	r3, [pc, #348]	@ (8003008 <HAL_RCC_OscConfig+0x274>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d1f0      	bne.n	8002e98 <HAL_RCC_OscConfig+0x104>
 8002eb6:	e000      	b.n	8002eba <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0302 	and.w	r3, r3, #2
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d06f      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002ec6:	4b50      	ldr	r3, [pc, #320]	@ (8003008 <HAL_RCC_OscConfig+0x274>)
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	f003 030c 	and.w	r3, r3, #12
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d017      	beq.n	8002f02 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002ed2:	4b4d      	ldr	r3, [pc, #308]	@ (8003008 <HAL_RCC_OscConfig+0x274>)
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002eda:	2b08      	cmp	r3, #8
 8002edc:	d105      	bne.n	8002eea <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002ede:	4b4a      	ldr	r3, [pc, #296]	@ (8003008 <HAL_RCC_OscConfig+0x274>)
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d00b      	beq.n	8002f02 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002eea:	4b47      	ldr	r3, [pc, #284]	@ (8003008 <HAL_RCC_OscConfig+0x274>)
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002ef2:	2b0c      	cmp	r3, #12
 8002ef4:	d11c      	bne.n	8002f30 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ef6:	4b44      	ldr	r3, [pc, #272]	@ (8003008 <HAL_RCC_OscConfig+0x274>)
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d116      	bne.n	8002f30 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f02:	4b41      	ldr	r3, [pc, #260]	@ (8003008 <HAL_RCC_OscConfig+0x274>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0302 	and.w	r3, r3, #2
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d005      	beq.n	8002f1a <HAL_RCC_OscConfig+0x186>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d001      	beq.n	8002f1a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e1d3      	b.n	80032c2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f1a:	4b3b      	ldr	r3, [pc, #236]	@ (8003008 <HAL_RCC_OscConfig+0x274>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	691b      	ldr	r3, [r3, #16]
 8002f26:	00db      	lsls	r3, r3, #3
 8002f28:	4937      	ldr	r1, [pc, #220]	@ (8003008 <HAL_RCC_OscConfig+0x274>)
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f2e:	e03a      	b.n	8002fa6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d020      	beq.n	8002f7a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f38:	4b34      	ldr	r3, [pc, #208]	@ (800300c <HAL_RCC_OscConfig+0x278>)
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f3e:	f7fe fd3b 	bl	80019b8 <HAL_GetTick>
 8002f42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f44:	e008      	b.n	8002f58 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f46:	f7fe fd37 	bl	80019b8 <HAL_GetTick>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	1ad3      	subs	r3, r2, r3
 8002f50:	2b02      	cmp	r3, #2
 8002f52:	d901      	bls.n	8002f58 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002f54:	2303      	movs	r3, #3
 8002f56:	e1b4      	b.n	80032c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f58:	4b2b      	ldr	r3, [pc, #172]	@ (8003008 <HAL_RCC_OscConfig+0x274>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0302 	and.w	r3, r3, #2
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d0f0      	beq.n	8002f46 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f64:	4b28      	ldr	r3, [pc, #160]	@ (8003008 <HAL_RCC_OscConfig+0x274>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	691b      	ldr	r3, [r3, #16]
 8002f70:	00db      	lsls	r3, r3, #3
 8002f72:	4925      	ldr	r1, [pc, #148]	@ (8003008 <HAL_RCC_OscConfig+0x274>)
 8002f74:	4313      	orrs	r3, r2
 8002f76:	600b      	str	r3, [r1, #0]
 8002f78:	e015      	b.n	8002fa6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f7a:	4b24      	ldr	r3, [pc, #144]	@ (800300c <HAL_RCC_OscConfig+0x278>)
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f80:	f7fe fd1a 	bl	80019b8 <HAL_GetTick>
 8002f84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f86:	e008      	b.n	8002f9a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f88:	f7fe fd16 	bl	80019b8 <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	d901      	bls.n	8002f9a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e193      	b.n	80032c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f9a:	4b1b      	ldr	r3, [pc, #108]	@ (8003008 <HAL_RCC_OscConfig+0x274>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0302 	and.w	r3, r3, #2
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d1f0      	bne.n	8002f88 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0308 	and.w	r3, r3, #8
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d036      	beq.n	8003020 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	695b      	ldr	r3, [r3, #20]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d016      	beq.n	8002fe8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fba:	4b15      	ldr	r3, [pc, #84]	@ (8003010 <HAL_RCC_OscConfig+0x27c>)
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fc0:	f7fe fcfa 	bl	80019b8 <HAL_GetTick>
 8002fc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fc6:	e008      	b.n	8002fda <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fc8:	f7fe fcf6 	bl	80019b8 <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d901      	bls.n	8002fda <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e173      	b.n	80032c2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fda:	4b0b      	ldr	r3, [pc, #44]	@ (8003008 <HAL_RCC_OscConfig+0x274>)
 8002fdc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fde:	f003 0302 	and.w	r3, r3, #2
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d0f0      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x234>
 8002fe6:	e01b      	b.n	8003020 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fe8:	4b09      	ldr	r3, [pc, #36]	@ (8003010 <HAL_RCC_OscConfig+0x27c>)
 8002fea:	2200      	movs	r2, #0
 8002fec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fee:	f7fe fce3 	bl	80019b8 <HAL_GetTick>
 8002ff2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ff4:	e00e      	b.n	8003014 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ff6:	f7fe fcdf 	bl	80019b8 <HAL_GetTick>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	2b02      	cmp	r3, #2
 8003002:	d907      	bls.n	8003014 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003004:	2303      	movs	r3, #3
 8003006:	e15c      	b.n	80032c2 <HAL_RCC_OscConfig+0x52e>
 8003008:	40023800 	.word	0x40023800
 800300c:	42470000 	.word	0x42470000
 8003010:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003014:	4b8a      	ldr	r3, [pc, #552]	@ (8003240 <HAL_RCC_OscConfig+0x4ac>)
 8003016:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003018:	f003 0302 	and.w	r3, r3, #2
 800301c:	2b00      	cmp	r3, #0
 800301e:	d1ea      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 0304 	and.w	r3, r3, #4
 8003028:	2b00      	cmp	r3, #0
 800302a:	f000 8097 	beq.w	800315c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800302e:	2300      	movs	r3, #0
 8003030:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003032:	4b83      	ldr	r3, [pc, #524]	@ (8003240 <HAL_RCC_OscConfig+0x4ac>)
 8003034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003036:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d10f      	bne.n	800305e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800303e:	2300      	movs	r3, #0
 8003040:	60bb      	str	r3, [r7, #8]
 8003042:	4b7f      	ldr	r3, [pc, #508]	@ (8003240 <HAL_RCC_OscConfig+0x4ac>)
 8003044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003046:	4a7e      	ldr	r2, [pc, #504]	@ (8003240 <HAL_RCC_OscConfig+0x4ac>)
 8003048:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800304c:	6413      	str	r3, [r2, #64]	@ 0x40
 800304e:	4b7c      	ldr	r3, [pc, #496]	@ (8003240 <HAL_RCC_OscConfig+0x4ac>)
 8003050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003052:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003056:	60bb      	str	r3, [r7, #8]
 8003058:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800305a:	2301      	movs	r3, #1
 800305c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800305e:	4b79      	ldr	r3, [pc, #484]	@ (8003244 <HAL_RCC_OscConfig+0x4b0>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003066:	2b00      	cmp	r3, #0
 8003068:	d118      	bne.n	800309c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800306a:	4b76      	ldr	r3, [pc, #472]	@ (8003244 <HAL_RCC_OscConfig+0x4b0>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a75      	ldr	r2, [pc, #468]	@ (8003244 <HAL_RCC_OscConfig+0x4b0>)
 8003070:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003074:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003076:	f7fe fc9f 	bl	80019b8 <HAL_GetTick>
 800307a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800307c:	e008      	b.n	8003090 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800307e:	f7fe fc9b 	bl	80019b8 <HAL_GetTick>
 8003082:	4602      	mov	r2, r0
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	1ad3      	subs	r3, r2, r3
 8003088:	2b02      	cmp	r3, #2
 800308a:	d901      	bls.n	8003090 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800308c:	2303      	movs	r3, #3
 800308e:	e118      	b.n	80032c2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003090:	4b6c      	ldr	r3, [pc, #432]	@ (8003244 <HAL_RCC_OscConfig+0x4b0>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003098:	2b00      	cmp	r3, #0
 800309a:	d0f0      	beq.n	800307e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d106      	bne.n	80030b2 <HAL_RCC_OscConfig+0x31e>
 80030a4:	4b66      	ldr	r3, [pc, #408]	@ (8003240 <HAL_RCC_OscConfig+0x4ac>)
 80030a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030a8:	4a65      	ldr	r2, [pc, #404]	@ (8003240 <HAL_RCC_OscConfig+0x4ac>)
 80030aa:	f043 0301 	orr.w	r3, r3, #1
 80030ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80030b0:	e01c      	b.n	80030ec <HAL_RCC_OscConfig+0x358>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	2b05      	cmp	r3, #5
 80030b8:	d10c      	bne.n	80030d4 <HAL_RCC_OscConfig+0x340>
 80030ba:	4b61      	ldr	r3, [pc, #388]	@ (8003240 <HAL_RCC_OscConfig+0x4ac>)
 80030bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030be:	4a60      	ldr	r2, [pc, #384]	@ (8003240 <HAL_RCC_OscConfig+0x4ac>)
 80030c0:	f043 0304 	orr.w	r3, r3, #4
 80030c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80030c6:	4b5e      	ldr	r3, [pc, #376]	@ (8003240 <HAL_RCC_OscConfig+0x4ac>)
 80030c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030ca:	4a5d      	ldr	r2, [pc, #372]	@ (8003240 <HAL_RCC_OscConfig+0x4ac>)
 80030cc:	f043 0301 	orr.w	r3, r3, #1
 80030d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80030d2:	e00b      	b.n	80030ec <HAL_RCC_OscConfig+0x358>
 80030d4:	4b5a      	ldr	r3, [pc, #360]	@ (8003240 <HAL_RCC_OscConfig+0x4ac>)
 80030d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030d8:	4a59      	ldr	r2, [pc, #356]	@ (8003240 <HAL_RCC_OscConfig+0x4ac>)
 80030da:	f023 0301 	bic.w	r3, r3, #1
 80030de:	6713      	str	r3, [r2, #112]	@ 0x70
 80030e0:	4b57      	ldr	r3, [pc, #348]	@ (8003240 <HAL_RCC_OscConfig+0x4ac>)
 80030e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030e4:	4a56      	ldr	r2, [pc, #344]	@ (8003240 <HAL_RCC_OscConfig+0x4ac>)
 80030e6:	f023 0304 	bic.w	r3, r3, #4
 80030ea:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d015      	beq.n	8003120 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030f4:	f7fe fc60 	bl	80019b8 <HAL_GetTick>
 80030f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030fa:	e00a      	b.n	8003112 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030fc:	f7fe fc5c 	bl	80019b8 <HAL_GetTick>
 8003100:	4602      	mov	r2, r0
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	f241 3288 	movw	r2, #5000	@ 0x1388
 800310a:	4293      	cmp	r3, r2
 800310c:	d901      	bls.n	8003112 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	e0d7      	b.n	80032c2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003112:	4b4b      	ldr	r3, [pc, #300]	@ (8003240 <HAL_RCC_OscConfig+0x4ac>)
 8003114:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003116:	f003 0302 	and.w	r3, r3, #2
 800311a:	2b00      	cmp	r3, #0
 800311c:	d0ee      	beq.n	80030fc <HAL_RCC_OscConfig+0x368>
 800311e:	e014      	b.n	800314a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003120:	f7fe fc4a 	bl	80019b8 <HAL_GetTick>
 8003124:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003126:	e00a      	b.n	800313e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003128:	f7fe fc46 	bl	80019b8 <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003136:	4293      	cmp	r3, r2
 8003138:	d901      	bls.n	800313e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	e0c1      	b.n	80032c2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800313e:	4b40      	ldr	r3, [pc, #256]	@ (8003240 <HAL_RCC_OscConfig+0x4ac>)
 8003140:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003142:	f003 0302 	and.w	r3, r3, #2
 8003146:	2b00      	cmp	r3, #0
 8003148:	d1ee      	bne.n	8003128 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800314a:	7dfb      	ldrb	r3, [r7, #23]
 800314c:	2b01      	cmp	r3, #1
 800314e:	d105      	bne.n	800315c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003150:	4b3b      	ldr	r3, [pc, #236]	@ (8003240 <HAL_RCC_OscConfig+0x4ac>)
 8003152:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003154:	4a3a      	ldr	r2, [pc, #232]	@ (8003240 <HAL_RCC_OscConfig+0x4ac>)
 8003156:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800315a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	699b      	ldr	r3, [r3, #24]
 8003160:	2b00      	cmp	r3, #0
 8003162:	f000 80ad 	beq.w	80032c0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003166:	4b36      	ldr	r3, [pc, #216]	@ (8003240 <HAL_RCC_OscConfig+0x4ac>)
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	f003 030c 	and.w	r3, r3, #12
 800316e:	2b08      	cmp	r3, #8
 8003170:	d060      	beq.n	8003234 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	699b      	ldr	r3, [r3, #24]
 8003176:	2b02      	cmp	r3, #2
 8003178:	d145      	bne.n	8003206 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800317a:	4b33      	ldr	r3, [pc, #204]	@ (8003248 <HAL_RCC_OscConfig+0x4b4>)
 800317c:	2200      	movs	r2, #0
 800317e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003180:	f7fe fc1a 	bl	80019b8 <HAL_GetTick>
 8003184:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003186:	e008      	b.n	800319a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003188:	f7fe fc16 	bl	80019b8 <HAL_GetTick>
 800318c:	4602      	mov	r2, r0
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	2b02      	cmp	r3, #2
 8003194:	d901      	bls.n	800319a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e093      	b.n	80032c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800319a:	4b29      	ldr	r3, [pc, #164]	@ (8003240 <HAL_RCC_OscConfig+0x4ac>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d1f0      	bne.n	8003188 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	69da      	ldr	r2, [r3, #28]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6a1b      	ldr	r3, [r3, #32]
 80031ae:	431a      	orrs	r2, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031b4:	019b      	lsls	r3, r3, #6
 80031b6:	431a      	orrs	r2, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031bc:	085b      	lsrs	r3, r3, #1
 80031be:	3b01      	subs	r3, #1
 80031c0:	041b      	lsls	r3, r3, #16
 80031c2:	431a      	orrs	r2, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031c8:	061b      	lsls	r3, r3, #24
 80031ca:	431a      	orrs	r2, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031d0:	071b      	lsls	r3, r3, #28
 80031d2:	491b      	ldr	r1, [pc, #108]	@ (8003240 <HAL_RCC_OscConfig+0x4ac>)
 80031d4:	4313      	orrs	r3, r2
 80031d6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031d8:	4b1b      	ldr	r3, [pc, #108]	@ (8003248 <HAL_RCC_OscConfig+0x4b4>)
 80031da:	2201      	movs	r2, #1
 80031dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031de:	f7fe fbeb 	bl	80019b8 <HAL_GetTick>
 80031e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031e4:	e008      	b.n	80031f8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031e6:	f7fe fbe7 	bl	80019b8 <HAL_GetTick>
 80031ea:	4602      	mov	r2, r0
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	2b02      	cmp	r3, #2
 80031f2:	d901      	bls.n	80031f8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80031f4:	2303      	movs	r3, #3
 80031f6:	e064      	b.n	80032c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031f8:	4b11      	ldr	r3, [pc, #68]	@ (8003240 <HAL_RCC_OscConfig+0x4ac>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003200:	2b00      	cmp	r3, #0
 8003202:	d0f0      	beq.n	80031e6 <HAL_RCC_OscConfig+0x452>
 8003204:	e05c      	b.n	80032c0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003206:	4b10      	ldr	r3, [pc, #64]	@ (8003248 <HAL_RCC_OscConfig+0x4b4>)
 8003208:	2200      	movs	r2, #0
 800320a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800320c:	f7fe fbd4 	bl	80019b8 <HAL_GetTick>
 8003210:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003212:	e008      	b.n	8003226 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003214:	f7fe fbd0 	bl	80019b8 <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	2b02      	cmp	r3, #2
 8003220:	d901      	bls.n	8003226 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e04d      	b.n	80032c2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003226:	4b06      	ldr	r3, [pc, #24]	@ (8003240 <HAL_RCC_OscConfig+0x4ac>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d1f0      	bne.n	8003214 <HAL_RCC_OscConfig+0x480>
 8003232:	e045      	b.n	80032c0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	699b      	ldr	r3, [r3, #24]
 8003238:	2b01      	cmp	r3, #1
 800323a:	d107      	bne.n	800324c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e040      	b.n	80032c2 <HAL_RCC_OscConfig+0x52e>
 8003240:	40023800 	.word	0x40023800
 8003244:	40007000 	.word	0x40007000
 8003248:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800324c:	4b1f      	ldr	r3, [pc, #124]	@ (80032cc <HAL_RCC_OscConfig+0x538>)
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	699b      	ldr	r3, [r3, #24]
 8003256:	2b01      	cmp	r3, #1
 8003258:	d030      	beq.n	80032bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003264:	429a      	cmp	r2, r3
 8003266:	d129      	bne.n	80032bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003272:	429a      	cmp	r2, r3
 8003274:	d122      	bne.n	80032bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003276:	68fa      	ldr	r2, [r7, #12]
 8003278:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800327c:	4013      	ands	r3, r2
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003282:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003284:	4293      	cmp	r3, r2
 8003286:	d119      	bne.n	80032bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003292:	085b      	lsrs	r3, r3, #1
 8003294:	3b01      	subs	r3, #1
 8003296:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003298:	429a      	cmp	r2, r3
 800329a:	d10f      	bne.n	80032bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d107      	bne.n	80032bc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032b6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d001      	beq.n	80032c0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e000      	b.n	80032c2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80032c0:	2300      	movs	r3, #0
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3718      	adds	r7, #24
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	40023800 	.word	0x40023800

080032d0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b084      	sub	sp, #16
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d101      	bne.n	80032e6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e073      	b.n	80033ce <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	7f5b      	ldrb	r3, [r3, #29]
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d105      	bne.n	80032fc <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2200      	movs	r2, #0
 80032f4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f7fd fd78 	bl	8000dec <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2202      	movs	r2, #2
 8003300:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	f003 0310 	and.w	r3, r3, #16
 800330c:	2b10      	cmp	r3, #16
 800330e:	d055      	beq.n	80033bc <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	22ca      	movs	r2, #202	@ 0xca
 8003316:	625a      	str	r2, [r3, #36]	@ 0x24
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	2253      	movs	r2, #83	@ 0x53
 800331e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f000 fa49 	bl	80037b8 <RTC_EnterInitMode>
 8003326:	4603      	mov	r3, r0
 8003328:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800332a:	7bfb      	ldrb	r3, [r7, #15]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d12c      	bne.n	800338a <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	6812      	ldr	r2, [r2, #0]
 800333a:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800333e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003342:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	6899      	ldr	r1, [r3, #8]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	685a      	ldr	r2, [r3, #4]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	691b      	ldr	r3, [r3, #16]
 8003352:	431a      	orrs	r2, r3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	695b      	ldr	r3, [r3, #20]
 8003358:	431a      	orrs	r2, r3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	430a      	orrs	r2, r1
 8003360:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	68d2      	ldr	r2, [r2, #12]
 800336a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	6919      	ldr	r1, [r3, #16]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	041a      	lsls	r2, r3, #16
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	430a      	orrs	r2, r1
 800337e:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f000 fa50 	bl	8003826 <RTC_ExitInitMode>
 8003386:	4603      	mov	r3, r0
 8003388:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800338a:	7bfb      	ldrb	r3, [r7, #15]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d110      	bne.n	80033b2 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800339e:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	699a      	ldr	r2, [r3, #24]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	430a      	orrs	r2, r1
 80033b0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	22ff      	movs	r2, #255	@ 0xff
 80033b8:	625a      	str	r2, [r3, #36]	@ 0x24
 80033ba:	e001      	b.n	80033c0 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80033bc:	2300      	movs	r3, #0
 80033be:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80033c0:	7bfb      	ldrb	r3, [r7, #15]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d102      	bne.n	80033cc <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2201      	movs	r2, #1
 80033ca:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80033cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3710      	adds	r7, #16
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}

080033d6 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80033d6:	b590      	push	{r4, r7, lr}
 80033d8:	b087      	sub	sp, #28
 80033da:	af00      	add	r7, sp, #0
 80033dc:	60f8      	str	r0, [r7, #12]
 80033de:	60b9      	str	r1, [r7, #8]
 80033e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80033e2:	2300      	movs	r3, #0
 80033e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	7f1b      	ldrb	r3, [r3, #28]
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d101      	bne.n	80033f2 <HAL_RTC_SetTime+0x1c>
 80033ee:	2302      	movs	r3, #2
 80033f0:	e087      	b.n	8003502 <HAL_RTC_SetTime+0x12c>
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2201      	movs	r2, #1
 80033f6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2202      	movs	r2, #2
 80033fc:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d126      	bne.n	8003452 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800340e:	2b00      	cmp	r3, #0
 8003410:	d102      	bne.n	8003418 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	2200      	movs	r2, #0
 8003416:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	4618      	mov	r0, r3
 800341e:	f000 fa27 	bl	8003870 <RTC_ByteToBcd2>
 8003422:	4603      	mov	r3, r0
 8003424:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	785b      	ldrb	r3, [r3, #1]
 800342a:	4618      	mov	r0, r3
 800342c:	f000 fa20 	bl	8003870 <RTC_ByteToBcd2>
 8003430:	4603      	mov	r3, r0
 8003432:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003434:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	789b      	ldrb	r3, [r3, #2]
 800343a:	4618      	mov	r0, r3
 800343c:	f000 fa18 	bl	8003870 <RTC_ByteToBcd2>
 8003440:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003442:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	78db      	ldrb	r3, [r3, #3]
 800344a:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800344c:	4313      	orrs	r3, r2
 800344e:	617b      	str	r3, [r7, #20]
 8003450:	e018      	b.n	8003484 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800345c:	2b00      	cmp	r3, #0
 800345e:	d102      	bne.n	8003466 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	2200      	movs	r2, #0
 8003464:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	781b      	ldrb	r3, [r3, #0]
 800346a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	785b      	ldrb	r3, [r3, #1]
 8003470:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003472:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8003474:	68ba      	ldr	r2, [r7, #8]
 8003476:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003478:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	78db      	ldrb	r3, [r3, #3]
 800347e:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003480:	4313      	orrs	r3, r2
 8003482:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	22ca      	movs	r2, #202	@ 0xca
 800348a:	625a      	str	r2, [r3, #36]	@ 0x24
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	2253      	movs	r2, #83	@ 0x53
 8003492:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003494:	68f8      	ldr	r0, [r7, #12]
 8003496:	f000 f98f 	bl	80037b8 <RTC_EnterInitMode>
 800349a:	4603      	mov	r3, r0
 800349c:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800349e:	7cfb      	ldrb	r3, [r7, #19]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d120      	bne.n	80034e6 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80034ae:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80034b2:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	689a      	ldr	r2, [r3, #8]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80034c2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	6899      	ldr	r1, [r3, #8]
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	68da      	ldr	r2, [r3, #12]
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	691b      	ldr	r3, [r3, #16]
 80034d2:	431a      	orrs	r2, r3
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	430a      	orrs	r2, r1
 80034da:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80034dc:	68f8      	ldr	r0, [r7, #12]
 80034de:	f000 f9a2 	bl	8003826 <RTC_ExitInitMode>
 80034e2:	4603      	mov	r3, r0
 80034e4:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80034e6:	7cfb      	ldrb	r3, [r7, #19]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d102      	bne.n	80034f2 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2201      	movs	r2, #1
 80034f0:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	22ff      	movs	r2, #255	@ 0xff
 80034f8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2200      	movs	r2, #0
 80034fe:	771a      	strb	r2, [r3, #28]

  return status;
 8003500:	7cfb      	ldrb	r3, [r7, #19]
}
 8003502:	4618      	mov	r0, r3
 8003504:	371c      	adds	r7, #28
 8003506:	46bd      	mov	sp, r7
 8003508:	bd90      	pop	{r4, r7, pc}

0800350a <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800350a:	b580      	push	{r7, lr}
 800350c:	b086      	sub	sp, #24
 800350e:	af00      	add	r7, sp, #0
 8003510:	60f8      	str	r0, [r7, #12]
 8003512:	60b9      	str	r1, [r7, #8]
 8003514:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003516:	2300      	movs	r3, #0
 8003518:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	691b      	ldr	r3, [r3, #16]
 800352a:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800353c:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8003540:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	0c1b      	lsrs	r3, r3, #16
 8003546:	b2db      	uxtb	r3, r3
 8003548:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800354c:	b2da      	uxtb	r2, r3
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	0a1b      	lsrs	r3, r3, #8
 8003556:	b2db      	uxtb	r3, r3
 8003558:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800355c:	b2da      	uxtb	r2, r3
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	b2db      	uxtb	r3, r3
 8003566:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800356a:	b2da      	uxtb	r2, r3
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	0d9b      	lsrs	r3, r3, #22
 8003574:	b2db      	uxtb	r3, r3
 8003576:	f003 0301 	and.w	r3, r3, #1
 800357a:	b2da      	uxtb	r2, r3
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d11a      	bne.n	80035bc <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	781b      	ldrb	r3, [r3, #0]
 800358a:	4618      	mov	r0, r3
 800358c:	f000 f98e 	bl	80038ac <RTC_Bcd2ToByte>
 8003590:	4603      	mov	r3, r0
 8003592:	461a      	mov	r2, r3
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	785b      	ldrb	r3, [r3, #1]
 800359c:	4618      	mov	r0, r3
 800359e:	f000 f985 	bl	80038ac <RTC_Bcd2ToByte>
 80035a2:	4603      	mov	r3, r0
 80035a4:	461a      	mov	r2, r3
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	789b      	ldrb	r3, [r3, #2]
 80035ae:	4618      	mov	r0, r3
 80035b0:	f000 f97c 	bl	80038ac <RTC_Bcd2ToByte>
 80035b4:	4603      	mov	r3, r0
 80035b6:	461a      	mov	r2, r3
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80035bc:	2300      	movs	r3, #0
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3718      	adds	r7, #24
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}

080035c6 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80035c6:	b590      	push	{r4, r7, lr}
 80035c8:	b087      	sub	sp, #28
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	60f8      	str	r0, [r7, #12]
 80035ce:	60b9      	str	r1, [r7, #8]
 80035d0:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80035d2:	2300      	movs	r3, #0
 80035d4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	7f1b      	ldrb	r3, [r3, #28]
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d101      	bne.n	80035e2 <HAL_RTC_SetDate+0x1c>
 80035de:	2302      	movs	r3, #2
 80035e0:	e071      	b.n	80036c6 <HAL_RTC_SetDate+0x100>
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2201      	movs	r2, #1
 80035e6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2202      	movs	r2, #2
 80035ec:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d10e      	bne.n	8003612 <HAL_RTC_SetDate+0x4c>
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	785b      	ldrb	r3, [r3, #1]
 80035f8:	f003 0310 	and.w	r3, r3, #16
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d008      	beq.n	8003612 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	785b      	ldrb	r3, [r3, #1]
 8003604:	f023 0310 	bic.w	r3, r3, #16
 8003608:	b2db      	uxtb	r3, r3
 800360a:	330a      	adds	r3, #10
 800360c:	b2da      	uxtb	r2, r3
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d11c      	bne.n	8003652 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	78db      	ldrb	r3, [r3, #3]
 800361c:	4618      	mov	r0, r3
 800361e:	f000 f927 	bl	8003870 <RTC_ByteToBcd2>
 8003622:	4603      	mov	r3, r0
 8003624:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	785b      	ldrb	r3, [r3, #1]
 800362a:	4618      	mov	r0, r3
 800362c:	f000 f920 	bl	8003870 <RTC_ByteToBcd2>
 8003630:	4603      	mov	r3, r0
 8003632:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003634:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	789b      	ldrb	r3, [r3, #2]
 800363a:	4618      	mov	r0, r3
 800363c:	f000 f918 	bl	8003870 <RTC_ByteToBcd2>
 8003640:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003642:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	781b      	ldrb	r3, [r3, #0]
 800364a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800364c:	4313      	orrs	r3, r2
 800364e:	617b      	str	r3, [r7, #20]
 8003650:	e00e      	b.n	8003670 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	78db      	ldrb	r3, [r3, #3]
 8003656:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	785b      	ldrb	r3, [r3, #1]
 800365c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800365e:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8003660:	68ba      	ldr	r2, [r7, #8]
 8003662:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003664:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	781b      	ldrb	r3, [r3, #0]
 800366a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800366c:	4313      	orrs	r3, r2
 800366e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	22ca      	movs	r2, #202	@ 0xca
 8003676:	625a      	str	r2, [r3, #36]	@ 0x24
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	2253      	movs	r2, #83	@ 0x53
 800367e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003680:	68f8      	ldr	r0, [r7, #12]
 8003682:	f000 f899 	bl	80037b8 <RTC_EnterInitMode>
 8003686:	4603      	mov	r3, r0
 8003688:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800368a:	7cfb      	ldrb	r3, [r7, #19]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d10c      	bne.n	80036aa <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800369a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800369e:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80036a0:	68f8      	ldr	r0, [r7, #12]
 80036a2:	f000 f8c0 	bl	8003826 <RTC_ExitInitMode>
 80036a6:	4603      	mov	r3, r0
 80036a8:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80036aa:	7cfb      	ldrb	r3, [r7, #19]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d102      	bne.n	80036b6 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2201      	movs	r2, #1
 80036b4:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	22ff      	movs	r2, #255	@ 0xff
 80036bc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2200      	movs	r2, #0
 80036c2:	771a      	strb	r2, [r3, #28]

  return status;
 80036c4:	7cfb      	ldrb	r3, [r7, #19]
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	371c      	adds	r7, #28
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd90      	pop	{r4, r7, pc}

080036ce <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80036ce:	b580      	push	{r7, lr}
 80036d0:	b086      	sub	sp, #24
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	60f8      	str	r0, [r7, #12]
 80036d6:	60b9      	str	r1, [r7, #8]
 80036d8:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80036da:	2300      	movs	r3, #0
 80036dc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80036e8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80036ec:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	0c1b      	lsrs	r3, r3, #16
 80036f2:	b2da      	uxtb	r2, r3
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	0a1b      	lsrs	r3, r3, #8
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	f003 031f 	and.w	r3, r3, #31
 8003702:	b2da      	uxtb	r2, r3
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	b2db      	uxtb	r3, r3
 800370c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003710:	b2da      	uxtb	r2, r3
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	0b5b      	lsrs	r3, r3, #13
 800371a:	b2db      	uxtb	r3, r3
 800371c:	f003 0307 	and.w	r3, r3, #7
 8003720:	b2da      	uxtb	r2, r3
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d11a      	bne.n	8003762 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	78db      	ldrb	r3, [r3, #3]
 8003730:	4618      	mov	r0, r3
 8003732:	f000 f8bb 	bl	80038ac <RTC_Bcd2ToByte>
 8003736:	4603      	mov	r3, r0
 8003738:	461a      	mov	r2, r3
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	785b      	ldrb	r3, [r3, #1]
 8003742:	4618      	mov	r0, r3
 8003744:	f000 f8b2 	bl	80038ac <RTC_Bcd2ToByte>
 8003748:	4603      	mov	r3, r0
 800374a:	461a      	mov	r2, r3
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	789b      	ldrb	r3, [r3, #2]
 8003754:	4618      	mov	r0, r3
 8003756:	f000 f8a9 	bl	80038ac <RTC_Bcd2ToByte>
 800375a:	4603      	mov	r3, r0
 800375c:	461a      	mov	r2, r3
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003762:	2300      	movs	r3, #0
}
 8003764:	4618      	mov	r0, r3
 8003766:	3718      	adds	r7, #24
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}

0800376c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b084      	sub	sp, #16
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003774:	2300      	movs	r3, #0
 8003776:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a0d      	ldr	r2, [pc, #52]	@ (80037b4 <HAL_RTC_WaitForSynchro+0x48>)
 800377e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003780:	f7fe f91a 	bl	80019b8 <HAL_GetTick>
 8003784:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003786:	e009      	b.n	800379c <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003788:	f7fe f916 	bl	80019b8 <HAL_GetTick>
 800378c:	4602      	mov	r2, r0
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003796:	d901      	bls.n	800379c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8003798:	2303      	movs	r3, #3
 800379a:	e007      	b.n	80037ac <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	f003 0320 	and.w	r3, r3, #32
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d0ee      	beq.n	8003788 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80037aa:	2300      	movs	r3, #0
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3710      	adds	r7, #16
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}
 80037b4:	00017f5f 	.word	0x00017f5f

080037b8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b084      	sub	sp, #16
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80037c0:	2300      	movs	r3, #0
 80037c2:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80037c4:	2300      	movs	r3, #0
 80037c6:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	68db      	ldr	r3, [r3, #12]
 80037ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d122      	bne.n	800381c <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	68da      	ldr	r2, [r3, #12]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80037e4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80037e6:	f7fe f8e7 	bl	80019b8 <HAL_GetTick>
 80037ea:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80037ec:	e00c      	b.n	8003808 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80037ee:	f7fe f8e3 	bl	80019b8 <HAL_GetTick>
 80037f2:	4602      	mov	r2, r0
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	1ad3      	subs	r3, r2, r3
 80037f8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80037fc:	d904      	bls.n	8003808 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2204      	movs	r2, #4
 8003802:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	68db      	ldr	r3, [r3, #12]
 800380e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003812:	2b00      	cmp	r3, #0
 8003814:	d102      	bne.n	800381c <RTC_EnterInitMode+0x64>
 8003816:	7bfb      	ldrb	r3, [r7, #15]
 8003818:	2b01      	cmp	r3, #1
 800381a:	d1e8      	bne.n	80037ee <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800381c:	7bfb      	ldrb	r3, [r7, #15]
}
 800381e:	4618      	mov	r0, r3
 8003820:	3710      	adds	r7, #16
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}

08003826 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003826:	b580      	push	{r7, lr}
 8003828:	b084      	sub	sp, #16
 800382a:	af00      	add	r7, sp, #0
 800382c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800382e:	2300      	movs	r3, #0
 8003830:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	68da      	ldr	r2, [r3, #12]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003840:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	f003 0320 	and.w	r3, r3, #32
 800384c:	2b00      	cmp	r3, #0
 800384e:	d10a      	bne.n	8003866 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f7ff ff8b 	bl	800376c <HAL_RTC_WaitForSynchro>
 8003856:	4603      	mov	r3, r0
 8003858:	2b00      	cmp	r3, #0
 800385a:	d004      	beq.n	8003866 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2204      	movs	r2, #4
 8003860:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003866:	7bfb      	ldrb	r3, [r7, #15]
}
 8003868:	4618      	mov	r0, r3
 800386a:	3710      	adds	r7, #16
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}

08003870 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8003870:	b480      	push	{r7}
 8003872:	b085      	sub	sp, #20
 8003874:	af00      	add	r7, sp, #0
 8003876:	4603      	mov	r3, r0
 8003878:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800387a:	2300      	movs	r3, #0
 800387c:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800387e:	e005      	b.n	800388c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	3301      	adds	r3, #1
 8003884:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8003886:	79fb      	ldrb	r3, [r7, #7]
 8003888:	3b0a      	subs	r3, #10
 800388a:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800388c:	79fb      	ldrb	r3, [r7, #7]
 800388e:	2b09      	cmp	r3, #9
 8003890:	d8f6      	bhi.n	8003880 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	b2db      	uxtb	r3, r3
 8003896:	011b      	lsls	r3, r3, #4
 8003898:	b2da      	uxtb	r2, r3
 800389a:	79fb      	ldrb	r3, [r7, #7]
 800389c:	4313      	orrs	r3, r2
 800389e:	b2db      	uxtb	r3, r3
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	3714      	adds	r7, #20
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr

080038ac <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b085      	sub	sp, #20
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	4603      	mov	r3, r0
 80038b4:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 80038b6:	2300      	movs	r3, #0
 80038b8:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 80038ba:	79fb      	ldrb	r3, [r7, #7]
 80038bc:	091b      	lsrs	r3, r3, #4
 80038be:	b2db      	uxtb	r3, r3
 80038c0:	461a      	mov	r2, r3
 80038c2:	4613      	mov	r3, r2
 80038c4:	009b      	lsls	r3, r3, #2
 80038c6:	4413      	add	r3, r2
 80038c8:	005b      	lsls	r3, r3, #1
 80038ca:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	b2da      	uxtb	r2, r3
 80038d0:	79fb      	ldrb	r3, [r7, #7]
 80038d2:	f003 030f 	and.w	r3, r3, #15
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	4413      	add	r3, r2
 80038da:	b2db      	uxtb	r3, r3
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3714      	adds	r7, #20
 80038e0:	46bd      	mov	sp, r7
 80038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e6:	4770      	bx	lr

080038e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b082      	sub	sp, #8
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d101      	bne.n	80038fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e041      	b.n	800397e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003900:	b2db      	uxtb	r3, r3
 8003902:	2b00      	cmp	r3, #0
 8003904:	d106      	bne.n	8003914 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2200      	movs	r2, #0
 800390a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f000 f839 	bl	8003986 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2202      	movs	r2, #2
 8003918:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	3304      	adds	r3, #4
 8003924:	4619      	mov	r1, r3
 8003926:	4610      	mov	r0, r2
 8003928:	f000 f9c0 	bl	8003cac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2201      	movs	r2, #1
 8003930:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2201      	movs	r2, #1
 8003938:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2201      	movs	r2, #1
 8003940:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2201      	movs	r2, #1
 8003948:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2201      	movs	r2, #1
 8003950:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2201      	movs	r2, #1
 8003958:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2201      	movs	r2, #1
 8003960:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2201      	movs	r2, #1
 8003968:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2201      	movs	r2, #1
 8003970:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2201      	movs	r2, #1
 8003978:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800397c:	2300      	movs	r3, #0
}
 800397e:	4618      	mov	r0, r3
 8003980:	3708      	adds	r7, #8
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}

08003986 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003986:	b480      	push	{r7}
 8003988:	b083      	sub	sp, #12
 800398a:	af00      	add	r7, sp, #0
 800398c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800398e:	bf00      	nop
 8003990:	370c      	adds	r7, #12
 8003992:	46bd      	mov	sp, r7
 8003994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003998:	4770      	bx	lr
	...

0800399c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800399c:	b480      	push	{r7}
 800399e:	b085      	sub	sp, #20
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d001      	beq.n	80039b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	e04e      	b.n	8003a52 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2202      	movs	r2, #2
 80039b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	68da      	ldr	r2, [r3, #12]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f042 0201 	orr.w	r2, r2, #1
 80039ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a23      	ldr	r2, [pc, #140]	@ (8003a60 <HAL_TIM_Base_Start_IT+0xc4>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d022      	beq.n	8003a1c <HAL_TIM_Base_Start_IT+0x80>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039de:	d01d      	beq.n	8003a1c <HAL_TIM_Base_Start_IT+0x80>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a1f      	ldr	r2, [pc, #124]	@ (8003a64 <HAL_TIM_Base_Start_IT+0xc8>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d018      	beq.n	8003a1c <HAL_TIM_Base_Start_IT+0x80>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a1e      	ldr	r2, [pc, #120]	@ (8003a68 <HAL_TIM_Base_Start_IT+0xcc>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d013      	beq.n	8003a1c <HAL_TIM_Base_Start_IT+0x80>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a1c      	ldr	r2, [pc, #112]	@ (8003a6c <HAL_TIM_Base_Start_IT+0xd0>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d00e      	beq.n	8003a1c <HAL_TIM_Base_Start_IT+0x80>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a1b      	ldr	r2, [pc, #108]	@ (8003a70 <HAL_TIM_Base_Start_IT+0xd4>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d009      	beq.n	8003a1c <HAL_TIM_Base_Start_IT+0x80>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a19      	ldr	r2, [pc, #100]	@ (8003a74 <HAL_TIM_Base_Start_IT+0xd8>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d004      	beq.n	8003a1c <HAL_TIM_Base_Start_IT+0x80>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a18      	ldr	r2, [pc, #96]	@ (8003a78 <HAL_TIM_Base_Start_IT+0xdc>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d111      	bne.n	8003a40 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	f003 0307 	and.w	r3, r3, #7
 8003a26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2b06      	cmp	r3, #6
 8003a2c:	d010      	beq.n	8003a50 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f042 0201 	orr.w	r2, r2, #1
 8003a3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a3e:	e007      	b.n	8003a50 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f042 0201 	orr.w	r2, r2, #1
 8003a4e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a50:	2300      	movs	r3, #0
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3714      	adds	r7, #20
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr
 8003a5e:	bf00      	nop
 8003a60:	40010000 	.word	0x40010000
 8003a64:	40000400 	.word	0x40000400
 8003a68:	40000800 	.word	0x40000800
 8003a6c:	40000c00 	.word	0x40000c00
 8003a70:	40010400 	.word	0x40010400
 8003a74:	40014000 	.word	0x40014000
 8003a78:	40001800 	.word	0x40001800

08003a7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b084      	sub	sp, #16
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	68db      	ldr	r3, [r3, #12]
 8003a8a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	691b      	ldr	r3, [r3, #16]
 8003a92:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	f003 0302 	and.w	r3, r3, #2
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d020      	beq.n	8003ae0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	f003 0302 	and.w	r3, r3, #2
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d01b      	beq.n	8003ae0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f06f 0202 	mvn.w	r2, #2
 8003ab0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	699b      	ldr	r3, [r3, #24]
 8003abe:	f003 0303 	and.w	r3, r3, #3
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d003      	beq.n	8003ace <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f000 f8d2 	bl	8003c70 <HAL_TIM_IC_CaptureCallback>
 8003acc:	e005      	b.n	8003ada <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f000 f8c4 	bl	8003c5c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f000 f8d5 	bl	8003c84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2200      	movs	r2, #0
 8003ade:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	f003 0304 	and.w	r3, r3, #4
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d020      	beq.n	8003b2c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	f003 0304 	and.w	r3, r3, #4
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d01b      	beq.n	8003b2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f06f 0204 	mvn.w	r2, #4
 8003afc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2202      	movs	r2, #2
 8003b02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	699b      	ldr	r3, [r3, #24]
 8003b0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d003      	beq.n	8003b1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f000 f8ac 	bl	8003c70 <HAL_TIM_IC_CaptureCallback>
 8003b18:	e005      	b.n	8003b26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f000 f89e 	bl	8003c5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	f000 f8af 	bl	8003c84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	f003 0308 	and.w	r3, r3, #8
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d020      	beq.n	8003b78 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	f003 0308 	and.w	r3, r3, #8
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d01b      	beq.n	8003b78 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f06f 0208 	mvn.w	r2, #8
 8003b48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2204      	movs	r2, #4
 8003b4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	69db      	ldr	r3, [r3, #28]
 8003b56:	f003 0303 	and.w	r3, r3, #3
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d003      	beq.n	8003b66 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f000 f886 	bl	8003c70 <HAL_TIM_IC_CaptureCallback>
 8003b64:	e005      	b.n	8003b72 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f000 f878 	bl	8003c5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f000 f889 	bl	8003c84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2200      	movs	r2, #0
 8003b76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	f003 0310 	and.w	r3, r3, #16
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d020      	beq.n	8003bc4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	f003 0310 	and.w	r3, r3, #16
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d01b      	beq.n	8003bc4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f06f 0210 	mvn.w	r2, #16
 8003b94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2208      	movs	r2, #8
 8003b9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	69db      	ldr	r3, [r3, #28]
 8003ba2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d003      	beq.n	8003bb2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f000 f860 	bl	8003c70 <HAL_TIM_IC_CaptureCallback>
 8003bb0:	e005      	b.n	8003bbe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f000 f852 	bl	8003c5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	f000 f863 	bl	8003c84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	f003 0301 	and.w	r3, r3, #1
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d00c      	beq.n	8003be8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	f003 0301 	and.w	r3, r3, #1
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d007      	beq.n	8003be8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f06f 0201 	mvn.w	r2, #1
 8003be0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f7fd f818 	bl	8000c18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d00c      	beq.n	8003c0c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d007      	beq.n	8003c0c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003c04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f000 f906 	bl	8003e18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d00c      	beq.n	8003c30 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d007      	beq.n	8003c30 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003c28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f000 f834 	bl	8003c98 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	f003 0320 	and.w	r3, r3, #32
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d00c      	beq.n	8003c54 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	f003 0320 	and.w	r3, r3, #32
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d007      	beq.n	8003c54 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f06f 0220 	mvn.w	r2, #32
 8003c4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f000 f8d8 	bl	8003e04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c54:	bf00      	nop
 8003c56:	3710      	adds	r7, #16
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}

08003c5c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b083      	sub	sp, #12
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c64:	bf00      	nop
 8003c66:	370c      	adds	r7, #12
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr

08003c70 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b083      	sub	sp, #12
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c78:	bf00      	nop
 8003c7a:	370c      	adds	r7, #12
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr

08003c84 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c8c:	bf00      	nop
 8003c8e:	370c      	adds	r7, #12
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr

08003c98 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ca0:	bf00      	nop
 8003ca2:	370c      	adds	r7, #12
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr

08003cac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b085      	sub	sp, #20
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
 8003cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	4a46      	ldr	r2, [pc, #280]	@ (8003dd8 <TIM_Base_SetConfig+0x12c>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d013      	beq.n	8003cec <TIM_Base_SetConfig+0x40>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cca:	d00f      	beq.n	8003cec <TIM_Base_SetConfig+0x40>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	4a43      	ldr	r2, [pc, #268]	@ (8003ddc <TIM_Base_SetConfig+0x130>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d00b      	beq.n	8003cec <TIM_Base_SetConfig+0x40>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	4a42      	ldr	r2, [pc, #264]	@ (8003de0 <TIM_Base_SetConfig+0x134>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d007      	beq.n	8003cec <TIM_Base_SetConfig+0x40>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	4a41      	ldr	r2, [pc, #260]	@ (8003de4 <TIM_Base_SetConfig+0x138>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d003      	beq.n	8003cec <TIM_Base_SetConfig+0x40>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	4a40      	ldr	r2, [pc, #256]	@ (8003de8 <TIM_Base_SetConfig+0x13c>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d108      	bne.n	8003cfe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cf2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	68fa      	ldr	r2, [r7, #12]
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4a35      	ldr	r2, [pc, #212]	@ (8003dd8 <TIM_Base_SetConfig+0x12c>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d02b      	beq.n	8003d5e <TIM_Base_SetConfig+0xb2>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d0c:	d027      	beq.n	8003d5e <TIM_Base_SetConfig+0xb2>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4a32      	ldr	r2, [pc, #200]	@ (8003ddc <TIM_Base_SetConfig+0x130>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d023      	beq.n	8003d5e <TIM_Base_SetConfig+0xb2>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4a31      	ldr	r2, [pc, #196]	@ (8003de0 <TIM_Base_SetConfig+0x134>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d01f      	beq.n	8003d5e <TIM_Base_SetConfig+0xb2>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4a30      	ldr	r2, [pc, #192]	@ (8003de4 <TIM_Base_SetConfig+0x138>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d01b      	beq.n	8003d5e <TIM_Base_SetConfig+0xb2>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4a2f      	ldr	r2, [pc, #188]	@ (8003de8 <TIM_Base_SetConfig+0x13c>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d017      	beq.n	8003d5e <TIM_Base_SetConfig+0xb2>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	4a2e      	ldr	r2, [pc, #184]	@ (8003dec <TIM_Base_SetConfig+0x140>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d013      	beq.n	8003d5e <TIM_Base_SetConfig+0xb2>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4a2d      	ldr	r2, [pc, #180]	@ (8003df0 <TIM_Base_SetConfig+0x144>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d00f      	beq.n	8003d5e <TIM_Base_SetConfig+0xb2>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	4a2c      	ldr	r2, [pc, #176]	@ (8003df4 <TIM_Base_SetConfig+0x148>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d00b      	beq.n	8003d5e <TIM_Base_SetConfig+0xb2>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	4a2b      	ldr	r2, [pc, #172]	@ (8003df8 <TIM_Base_SetConfig+0x14c>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d007      	beq.n	8003d5e <TIM_Base_SetConfig+0xb2>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	4a2a      	ldr	r2, [pc, #168]	@ (8003dfc <TIM_Base_SetConfig+0x150>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d003      	beq.n	8003d5e <TIM_Base_SetConfig+0xb2>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	4a29      	ldr	r2, [pc, #164]	@ (8003e00 <TIM_Base_SetConfig+0x154>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d108      	bne.n	8003d70 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	68db      	ldr	r3, [r3, #12]
 8003d6a:	68fa      	ldr	r2, [r7, #12]
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	695b      	ldr	r3, [r3, #20]
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	68fa      	ldr	r2, [r7, #12]
 8003d82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	689a      	ldr	r2, [r3, #8]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	4a10      	ldr	r2, [pc, #64]	@ (8003dd8 <TIM_Base_SetConfig+0x12c>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d003      	beq.n	8003da4 <TIM_Base_SetConfig+0xf8>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	4a12      	ldr	r2, [pc, #72]	@ (8003de8 <TIM_Base_SetConfig+0x13c>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d103      	bne.n	8003dac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	691a      	ldr	r2, [r3, #16]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2201      	movs	r2, #1
 8003db0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	691b      	ldr	r3, [r3, #16]
 8003db6:	f003 0301 	and.w	r3, r3, #1
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d105      	bne.n	8003dca <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	691b      	ldr	r3, [r3, #16]
 8003dc2:	f023 0201 	bic.w	r2, r3, #1
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	611a      	str	r2, [r3, #16]
  }
}
 8003dca:	bf00      	nop
 8003dcc:	3714      	adds	r7, #20
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr
 8003dd6:	bf00      	nop
 8003dd8:	40010000 	.word	0x40010000
 8003ddc:	40000400 	.word	0x40000400
 8003de0:	40000800 	.word	0x40000800
 8003de4:	40000c00 	.word	0x40000c00
 8003de8:	40010400 	.word	0x40010400
 8003dec:	40014000 	.word	0x40014000
 8003df0:	40014400 	.word	0x40014400
 8003df4:	40014800 	.word	0x40014800
 8003df8:	40001800 	.word	0x40001800
 8003dfc:	40001c00 	.word	0x40001c00
 8003e00:	40002000 	.word	0x40002000

08003e04 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e0c:	bf00      	nop
 8003e0e:	370c      	adds	r7, #12
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr

08003e18 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b083      	sub	sp, #12
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e20:	bf00      	nop
 8003e22:	370c      	adds	r7, #12
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr

08003e2c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b082      	sub	sp, #8
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d101      	bne.n	8003e3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e042      	b.n	8003ec4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d106      	bne.n	8003e58 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f7fc fff4 	bl	8000e40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2224      	movs	r2, #36	@ 0x24
 8003e5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	68da      	ldr	r2, [r3, #12]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003e6e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f000 fdbd 	bl	80049f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	691a      	ldr	r2, [r3, #16]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003e84:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	695a      	ldr	r2, [r3, #20]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003e94:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	68da      	ldr	r2, [r3, #12]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003ea4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2220      	movs	r2, #32
 8003eb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2220      	movs	r2, #32
 8003eb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003ec2:	2300      	movs	r3, #0
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	3708      	adds	r7, #8
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}

08003ecc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b08a      	sub	sp, #40	@ 0x28
 8003ed0:	af02      	add	r7, sp, #8
 8003ed2:	60f8      	str	r0, [r7, #12]
 8003ed4:	60b9      	str	r1, [r7, #8]
 8003ed6:	603b      	str	r3, [r7, #0]
 8003ed8:	4613      	mov	r3, r2
 8003eda:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003edc:	2300      	movs	r3, #0
 8003ede:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	2b20      	cmp	r3, #32
 8003eea:	d175      	bne.n	8003fd8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d002      	beq.n	8003ef8 <HAL_UART_Transmit+0x2c>
 8003ef2:	88fb      	ldrh	r3, [r7, #6]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d101      	bne.n	8003efc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e06e      	b.n	8003fda <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2200      	movs	r2, #0
 8003f00:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2221      	movs	r2, #33	@ 0x21
 8003f06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f0a:	f7fd fd55 	bl	80019b8 <HAL_GetTick>
 8003f0e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	88fa      	ldrh	r2, [r7, #6]
 8003f14:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	88fa      	ldrh	r2, [r7, #6]
 8003f1a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f24:	d108      	bne.n	8003f38 <HAL_UART_Transmit+0x6c>
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	691b      	ldr	r3, [r3, #16]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d104      	bne.n	8003f38 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	61bb      	str	r3, [r7, #24]
 8003f36:	e003      	b.n	8003f40 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003f40:	e02e      	b.n	8003fa0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	9300      	str	r3, [sp, #0]
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	2180      	movs	r1, #128	@ 0x80
 8003f4c:	68f8      	ldr	r0, [r7, #12]
 8003f4e:	f000 fb1f 	bl	8004590 <UART_WaitOnFlagUntilTimeout>
 8003f52:	4603      	mov	r3, r0
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d005      	beq.n	8003f64 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2220      	movs	r2, #32
 8003f5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003f60:	2303      	movs	r3, #3
 8003f62:	e03a      	b.n	8003fda <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003f64:	69fb      	ldr	r3, [r7, #28]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d10b      	bne.n	8003f82 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f6a:	69bb      	ldr	r3, [r7, #24]
 8003f6c:	881b      	ldrh	r3, [r3, #0]
 8003f6e:	461a      	mov	r2, r3
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f78:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003f7a:	69bb      	ldr	r3, [r7, #24]
 8003f7c:	3302      	adds	r3, #2
 8003f7e:	61bb      	str	r3, [r7, #24]
 8003f80:	e007      	b.n	8003f92 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	781a      	ldrb	r2, [r3, #0]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003f8c:	69fb      	ldr	r3, [r7, #28]
 8003f8e:	3301      	adds	r3, #1
 8003f90:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	3b01      	subs	r3, #1
 8003f9a:	b29a      	uxth	r2, r3
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d1cb      	bne.n	8003f42 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	9300      	str	r3, [sp, #0]
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	2140      	movs	r1, #64	@ 0x40
 8003fb4:	68f8      	ldr	r0, [r7, #12]
 8003fb6:	f000 faeb 	bl	8004590 <UART_WaitOnFlagUntilTimeout>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d005      	beq.n	8003fcc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2220      	movs	r2, #32
 8003fc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003fc8:	2303      	movs	r3, #3
 8003fca:	e006      	b.n	8003fda <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2220      	movs	r2, #32
 8003fd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	e000      	b.n	8003fda <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003fd8:	2302      	movs	r3, #2
  }
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3720      	adds	r7, #32
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}

08003fe2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003fe2:	b580      	push	{r7, lr}
 8003fe4:	b084      	sub	sp, #16
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	60f8      	str	r0, [r7, #12]
 8003fea:	60b9      	str	r1, [r7, #8]
 8003fec:	4613      	mov	r3, r2
 8003fee:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	2b20      	cmp	r3, #32
 8003ffa:	d112      	bne.n	8004022 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d002      	beq.n	8004008 <HAL_UART_Receive_IT+0x26>
 8004002:	88fb      	ldrh	r3, [r7, #6]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d101      	bne.n	800400c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	e00b      	b.n	8004024 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2200      	movs	r2, #0
 8004010:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004012:	88fb      	ldrh	r3, [r7, #6]
 8004014:	461a      	mov	r2, r3
 8004016:	68b9      	ldr	r1, [r7, #8]
 8004018:	68f8      	ldr	r0, [r7, #12]
 800401a:	f000 fb12 	bl	8004642 <UART_Start_Receive_IT>
 800401e:	4603      	mov	r3, r0
 8004020:	e000      	b.n	8004024 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004022:	2302      	movs	r3, #2
  }
}
 8004024:	4618      	mov	r0, r3
 8004026:	3710      	adds	r7, #16
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}

0800402c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b0ba      	sub	sp, #232	@ 0xe8
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	695b      	ldr	r3, [r3, #20]
 800404e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004052:	2300      	movs	r3, #0
 8004054:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004058:	2300      	movs	r3, #0
 800405a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800405e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004062:	f003 030f 	and.w	r3, r3, #15
 8004066:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800406a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800406e:	2b00      	cmp	r3, #0
 8004070:	d10f      	bne.n	8004092 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004072:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004076:	f003 0320 	and.w	r3, r3, #32
 800407a:	2b00      	cmp	r3, #0
 800407c:	d009      	beq.n	8004092 <HAL_UART_IRQHandler+0x66>
 800407e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004082:	f003 0320 	and.w	r3, r3, #32
 8004086:	2b00      	cmp	r3, #0
 8004088:	d003      	beq.n	8004092 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f000 fbf2 	bl	8004874 <UART_Receive_IT>
      return;
 8004090:	e25b      	b.n	800454a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004092:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004096:	2b00      	cmp	r3, #0
 8004098:	f000 80de 	beq.w	8004258 <HAL_UART_IRQHandler+0x22c>
 800409c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80040a0:	f003 0301 	and.w	r3, r3, #1
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d106      	bne.n	80040b6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80040a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040ac:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	f000 80d1 	beq.w	8004258 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80040b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040ba:	f003 0301 	and.w	r3, r3, #1
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d00b      	beq.n	80040da <HAL_UART_IRQHandler+0xae>
 80040c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d005      	beq.n	80040da <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040d2:	f043 0201 	orr.w	r2, r3, #1
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80040da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040de:	f003 0304 	and.w	r3, r3, #4
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d00b      	beq.n	80040fe <HAL_UART_IRQHandler+0xd2>
 80040e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80040ea:	f003 0301 	and.w	r3, r3, #1
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d005      	beq.n	80040fe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040f6:	f043 0202 	orr.w	r2, r3, #2
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80040fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004102:	f003 0302 	and.w	r3, r3, #2
 8004106:	2b00      	cmp	r3, #0
 8004108:	d00b      	beq.n	8004122 <HAL_UART_IRQHandler+0xf6>
 800410a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800410e:	f003 0301 	and.w	r3, r3, #1
 8004112:	2b00      	cmp	r3, #0
 8004114:	d005      	beq.n	8004122 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800411a:	f043 0204 	orr.w	r2, r3, #4
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004122:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004126:	f003 0308 	and.w	r3, r3, #8
 800412a:	2b00      	cmp	r3, #0
 800412c:	d011      	beq.n	8004152 <HAL_UART_IRQHandler+0x126>
 800412e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004132:	f003 0320 	and.w	r3, r3, #32
 8004136:	2b00      	cmp	r3, #0
 8004138:	d105      	bne.n	8004146 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800413a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800413e:	f003 0301 	and.w	r3, r3, #1
 8004142:	2b00      	cmp	r3, #0
 8004144:	d005      	beq.n	8004152 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800414a:	f043 0208 	orr.w	r2, r3, #8
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004156:	2b00      	cmp	r3, #0
 8004158:	f000 81f2 	beq.w	8004540 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800415c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004160:	f003 0320 	and.w	r3, r3, #32
 8004164:	2b00      	cmp	r3, #0
 8004166:	d008      	beq.n	800417a <HAL_UART_IRQHandler+0x14e>
 8004168:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800416c:	f003 0320 	and.w	r3, r3, #32
 8004170:	2b00      	cmp	r3, #0
 8004172:	d002      	beq.n	800417a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	f000 fb7d 	bl	8004874 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	695b      	ldr	r3, [r3, #20]
 8004180:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004184:	2b40      	cmp	r3, #64	@ 0x40
 8004186:	bf0c      	ite	eq
 8004188:	2301      	moveq	r3, #1
 800418a:	2300      	movne	r3, #0
 800418c:	b2db      	uxtb	r3, r3
 800418e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004196:	f003 0308 	and.w	r3, r3, #8
 800419a:	2b00      	cmp	r3, #0
 800419c:	d103      	bne.n	80041a6 <HAL_UART_IRQHandler+0x17a>
 800419e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d04f      	beq.n	8004246 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f000 fa85 	bl	80046b6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	695b      	ldr	r3, [r3, #20]
 80041b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041b6:	2b40      	cmp	r3, #64	@ 0x40
 80041b8:	d141      	bne.n	800423e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	3314      	adds	r3, #20
 80041c0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80041c8:	e853 3f00 	ldrex	r3, [r3]
 80041cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80041d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80041d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80041d8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	3314      	adds	r3, #20
 80041e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80041e6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80041ea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80041f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80041f6:	e841 2300 	strex	r3, r2, [r1]
 80041fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80041fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004202:	2b00      	cmp	r3, #0
 8004204:	d1d9      	bne.n	80041ba <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800420a:	2b00      	cmp	r3, #0
 800420c:	d013      	beq.n	8004236 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004212:	4a7e      	ldr	r2, [pc, #504]	@ (800440c <HAL_UART_IRQHandler+0x3e0>)
 8004214:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800421a:	4618      	mov	r0, r3
 800421c:	f7fd fd2a 	bl	8001c74 <HAL_DMA_Abort_IT>
 8004220:	4603      	mov	r3, r0
 8004222:	2b00      	cmp	r3, #0
 8004224:	d016      	beq.n	8004254 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800422a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800422c:	687a      	ldr	r2, [r7, #4]
 800422e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004230:	4610      	mov	r0, r2
 8004232:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004234:	e00e      	b.n	8004254 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f000 f994 	bl	8004564 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800423c:	e00a      	b.n	8004254 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f000 f990 	bl	8004564 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004244:	e006      	b.n	8004254 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f000 f98c 	bl	8004564 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2200      	movs	r2, #0
 8004250:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004252:	e175      	b.n	8004540 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004254:	bf00      	nop
    return;
 8004256:	e173      	b.n	8004540 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800425c:	2b01      	cmp	r3, #1
 800425e:	f040 814f 	bne.w	8004500 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004262:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004266:	f003 0310 	and.w	r3, r3, #16
 800426a:	2b00      	cmp	r3, #0
 800426c:	f000 8148 	beq.w	8004500 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004270:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004274:	f003 0310 	and.w	r3, r3, #16
 8004278:	2b00      	cmp	r3, #0
 800427a:	f000 8141 	beq.w	8004500 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800427e:	2300      	movs	r3, #0
 8004280:	60bb      	str	r3, [r7, #8]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	60bb      	str	r3, [r7, #8]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	60bb      	str	r3, [r7, #8]
 8004292:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	695b      	ldr	r3, [r3, #20]
 800429a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800429e:	2b40      	cmp	r3, #64	@ 0x40
 80042a0:	f040 80b6 	bne.w	8004410 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80042b0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	f000 8145 	beq.w	8004544 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80042be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80042c2:	429a      	cmp	r2, r3
 80042c4:	f080 813e 	bcs.w	8004544 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80042ce:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042d4:	69db      	ldr	r3, [r3, #28]
 80042d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80042da:	f000 8088 	beq.w	80043ee <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	330c      	adds	r3, #12
 80042e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80042ec:	e853 3f00 	ldrex	r3, [r3]
 80042f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80042f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80042f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80042fc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	330c      	adds	r3, #12
 8004306:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800430a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800430e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004312:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004316:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800431a:	e841 2300 	strex	r3, r2, [r1]
 800431e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004322:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004326:	2b00      	cmp	r3, #0
 8004328:	d1d9      	bne.n	80042de <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	3314      	adds	r3, #20
 8004330:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004332:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004334:	e853 3f00 	ldrex	r3, [r3]
 8004338:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800433a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800433c:	f023 0301 	bic.w	r3, r3, #1
 8004340:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	3314      	adds	r3, #20
 800434a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800434e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004352:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004354:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004356:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800435a:	e841 2300 	strex	r3, r2, [r1]
 800435e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004360:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004362:	2b00      	cmp	r3, #0
 8004364:	d1e1      	bne.n	800432a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	3314      	adds	r3, #20
 800436c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800436e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004370:	e853 3f00 	ldrex	r3, [r3]
 8004374:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004376:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004378:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800437c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	3314      	adds	r3, #20
 8004386:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800438a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800438c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800438e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004390:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004392:	e841 2300 	strex	r3, r2, [r1]
 8004396:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004398:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800439a:	2b00      	cmp	r3, #0
 800439c:	d1e3      	bne.n	8004366 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2220      	movs	r2, #32
 80043a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	330c      	adds	r3, #12
 80043b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80043b6:	e853 3f00 	ldrex	r3, [r3]
 80043ba:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80043bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80043be:	f023 0310 	bic.w	r3, r3, #16
 80043c2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	330c      	adds	r3, #12
 80043cc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80043d0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80043d2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043d4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80043d6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80043d8:	e841 2300 	strex	r3, r2, [r1]
 80043dc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80043de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d1e3      	bne.n	80043ac <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043e8:	4618      	mov	r0, r3
 80043ea:	f7fd fbd3 	bl	8001b94 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2202      	movs	r2, #2
 80043f2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80043fc:	b29b      	uxth	r3, r3
 80043fe:	1ad3      	subs	r3, r2, r3
 8004400:	b29b      	uxth	r3, r3
 8004402:	4619      	mov	r1, r3
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	f000 f8b7 	bl	8004578 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800440a:	e09b      	b.n	8004544 <HAL_UART_IRQHandler+0x518>
 800440c:	0800477d 	.word	0x0800477d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004418:	b29b      	uxth	r3, r3
 800441a:	1ad3      	subs	r3, r2, r3
 800441c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004424:	b29b      	uxth	r3, r3
 8004426:	2b00      	cmp	r3, #0
 8004428:	f000 808e 	beq.w	8004548 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800442c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004430:	2b00      	cmp	r3, #0
 8004432:	f000 8089 	beq.w	8004548 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	330c      	adds	r3, #12
 800443c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800443e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004440:	e853 3f00 	ldrex	r3, [r3]
 8004444:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004446:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004448:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800444c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	330c      	adds	r3, #12
 8004456:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800445a:	647a      	str	r2, [r7, #68]	@ 0x44
 800445c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800445e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004460:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004462:	e841 2300 	strex	r3, r2, [r1]
 8004466:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004468:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800446a:	2b00      	cmp	r3, #0
 800446c:	d1e3      	bne.n	8004436 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	3314      	adds	r3, #20
 8004474:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004478:	e853 3f00 	ldrex	r3, [r3]
 800447c:	623b      	str	r3, [r7, #32]
   return(result);
 800447e:	6a3b      	ldr	r3, [r7, #32]
 8004480:	f023 0301 	bic.w	r3, r3, #1
 8004484:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	3314      	adds	r3, #20
 800448e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004492:	633a      	str	r2, [r7, #48]	@ 0x30
 8004494:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004496:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004498:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800449a:	e841 2300 	strex	r3, r2, [r1]
 800449e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80044a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d1e3      	bne.n	800446e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2220      	movs	r2, #32
 80044aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2200      	movs	r2, #0
 80044b2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	330c      	adds	r3, #12
 80044ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	e853 3f00 	ldrex	r3, [r3]
 80044c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f023 0310 	bic.w	r3, r3, #16
 80044ca:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	330c      	adds	r3, #12
 80044d4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80044d8:	61fa      	str	r2, [r7, #28]
 80044da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044dc:	69b9      	ldr	r1, [r7, #24]
 80044de:	69fa      	ldr	r2, [r7, #28]
 80044e0:	e841 2300 	strex	r3, r2, [r1]
 80044e4:	617b      	str	r3, [r7, #20]
   return(result);
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d1e3      	bne.n	80044b4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2202      	movs	r2, #2
 80044f0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80044f2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80044f6:	4619      	mov	r1, r3
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	f000 f83d 	bl	8004578 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80044fe:	e023      	b.n	8004548 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004500:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004504:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004508:	2b00      	cmp	r3, #0
 800450a:	d009      	beq.n	8004520 <HAL_UART_IRQHandler+0x4f4>
 800450c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004510:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004514:	2b00      	cmp	r3, #0
 8004516:	d003      	beq.n	8004520 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	f000 f943 	bl	80047a4 <UART_Transmit_IT>
    return;
 800451e:	e014      	b.n	800454a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004520:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004524:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004528:	2b00      	cmp	r3, #0
 800452a:	d00e      	beq.n	800454a <HAL_UART_IRQHandler+0x51e>
 800452c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004530:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004534:	2b00      	cmp	r3, #0
 8004536:	d008      	beq.n	800454a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	f000 f983 	bl	8004844 <UART_EndTransmit_IT>
    return;
 800453e:	e004      	b.n	800454a <HAL_UART_IRQHandler+0x51e>
    return;
 8004540:	bf00      	nop
 8004542:	e002      	b.n	800454a <HAL_UART_IRQHandler+0x51e>
      return;
 8004544:	bf00      	nop
 8004546:	e000      	b.n	800454a <HAL_UART_IRQHandler+0x51e>
      return;
 8004548:	bf00      	nop
  }
}
 800454a:	37e8      	adds	r7, #232	@ 0xe8
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}

08004550 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004550:	b480      	push	{r7}
 8004552:	b083      	sub	sp, #12
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004558:	bf00      	nop
 800455a:	370c      	adds	r7, #12
 800455c:	46bd      	mov	sp, r7
 800455e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004562:	4770      	bx	lr

08004564 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004564:	b480      	push	{r7}
 8004566:	b083      	sub	sp, #12
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800456c:	bf00      	nop
 800456e:	370c      	adds	r7, #12
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr

08004578 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004578:	b480      	push	{r7}
 800457a:	b083      	sub	sp, #12
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
 8004580:	460b      	mov	r3, r1
 8004582:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004584:	bf00      	nop
 8004586:	370c      	adds	r7, #12
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr

08004590 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b086      	sub	sp, #24
 8004594:	af00      	add	r7, sp, #0
 8004596:	60f8      	str	r0, [r7, #12]
 8004598:	60b9      	str	r1, [r7, #8]
 800459a:	603b      	str	r3, [r7, #0]
 800459c:	4613      	mov	r3, r2
 800459e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045a0:	e03b      	b.n	800461a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045a2:	6a3b      	ldr	r3, [r7, #32]
 80045a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045a8:	d037      	beq.n	800461a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045aa:	f7fd fa05 	bl	80019b8 <HAL_GetTick>
 80045ae:	4602      	mov	r2, r0
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	1ad3      	subs	r3, r2, r3
 80045b4:	6a3a      	ldr	r2, [r7, #32]
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d302      	bcc.n	80045c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80045ba:	6a3b      	ldr	r3, [r7, #32]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d101      	bne.n	80045c4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80045c0:	2303      	movs	r3, #3
 80045c2:	e03a      	b.n	800463a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	68db      	ldr	r3, [r3, #12]
 80045ca:	f003 0304 	and.w	r3, r3, #4
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d023      	beq.n	800461a <UART_WaitOnFlagUntilTimeout+0x8a>
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	2b80      	cmp	r3, #128	@ 0x80
 80045d6:	d020      	beq.n	800461a <UART_WaitOnFlagUntilTimeout+0x8a>
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	2b40      	cmp	r3, #64	@ 0x40
 80045dc:	d01d      	beq.n	800461a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f003 0308 	and.w	r3, r3, #8
 80045e8:	2b08      	cmp	r3, #8
 80045ea:	d116      	bne.n	800461a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80045ec:	2300      	movs	r3, #0
 80045ee:	617b      	str	r3, [r7, #20]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	617b      	str	r3, [r7, #20]
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	617b      	str	r3, [r7, #20]
 8004600:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004602:	68f8      	ldr	r0, [r7, #12]
 8004604:	f000 f857 	bl	80046b6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2208      	movs	r2, #8
 800460c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2200      	movs	r2, #0
 8004612:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e00f      	b.n	800463a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	4013      	ands	r3, r2
 8004624:	68ba      	ldr	r2, [r7, #8]
 8004626:	429a      	cmp	r2, r3
 8004628:	bf0c      	ite	eq
 800462a:	2301      	moveq	r3, #1
 800462c:	2300      	movne	r3, #0
 800462e:	b2db      	uxtb	r3, r3
 8004630:	461a      	mov	r2, r3
 8004632:	79fb      	ldrb	r3, [r7, #7]
 8004634:	429a      	cmp	r2, r3
 8004636:	d0b4      	beq.n	80045a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004638:	2300      	movs	r3, #0
}
 800463a:	4618      	mov	r0, r3
 800463c:	3718      	adds	r7, #24
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}

08004642 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004642:	b480      	push	{r7}
 8004644:	b085      	sub	sp, #20
 8004646:	af00      	add	r7, sp, #0
 8004648:	60f8      	str	r0, [r7, #12]
 800464a:	60b9      	str	r1, [r7, #8]
 800464c:	4613      	mov	r3, r2
 800464e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	68ba      	ldr	r2, [r7, #8]
 8004654:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	88fa      	ldrh	r2, [r7, #6]
 800465a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	88fa      	ldrh	r2, [r7, #6]
 8004660:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2200      	movs	r2, #0
 8004666:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2222      	movs	r2, #34	@ 0x22
 800466c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	691b      	ldr	r3, [r3, #16]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d007      	beq.n	8004688 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	68da      	ldr	r2, [r3, #12]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004686:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	695a      	ldr	r2, [r3, #20]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f042 0201 	orr.w	r2, r2, #1
 8004696:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	68da      	ldr	r2, [r3, #12]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f042 0220 	orr.w	r2, r2, #32
 80046a6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80046a8:	2300      	movs	r3, #0
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	3714      	adds	r7, #20
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr

080046b6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80046b6:	b480      	push	{r7}
 80046b8:	b095      	sub	sp, #84	@ 0x54
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	330c      	adds	r3, #12
 80046c4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046c8:	e853 3f00 	ldrex	r3, [r3]
 80046cc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80046ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80046d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	330c      	adds	r3, #12
 80046dc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80046de:	643a      	str	r2, [r7, #64]	@ 0x40
 80046e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046e2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80046e4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80046e6:	e841 2300 	strex	r3, r2, [r1]
 80046ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80046ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d1e5      	bne.n	80046be <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	3314      	adds	r3, #20
 80046f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046fa:	6a3b      	ldr	r3, [r7, #32]
 80046fc:	e853 3f00 	ldrex	r3, [r3]
 8004700:	61fb      	str	r3, [r7, #28]
   return(result);
 8004702:	69fb      	ldr	r3, [r7, #28]
 8004704:	f023 0301 	bic.w	r3, r3, #1
 8004708:	64bb      	str	r3, [r7, #72]	@ 0x48
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	3314      	adds	r3, #20
 8004710:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004712:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004714:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004716:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004718:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800471a:	e841 2300 	strex	r3, r2, [r1]
 800471e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004722:	2b00      	cmp	r3, #0
 8004724:	d1e5      	bne.n	80046f2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800472a:	2b01      	cmp	r3, #1
 800472c:	d119      	bne.n	8004762 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	330c      	adds	r3, #12
 8004734:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	e853 3f00 	ldrex	r3, [r3]
 800473c:	60bb      	str	r3, [r7, #8]
   return(result);
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	f023 0310 	bic.w	r3, r3, #16
 8004744:	647b      	str	r3, [r7, #68]	@ 0x44
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	330c      	adds	r3, #12
 800474c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800474e:	61ba      	str	r2, [r7, #24]
 8004750:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004752:	6979      	ldr	r1, [r7, #20]
 8004754:	69ba      	ldr	r2, [r7, #24]
 8004756:	e841 2300 	strex	r3, r2, [r1]
 800475a:	613b      	str	r3, [r7, #16]
   return(result);
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d1e5      	bne.n	800472e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2220      	movs	r2, #32
 8004766:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2200      	movs	r2, #0
 800476e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004770:	bf00      	nop
 8004772:	3754      	adds	r7, #84	@ 0x54
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr

0800477c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b084      	sub	sp, #16
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004788:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2200      	movs	r2, #0
 800478e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2200      	movs	r2, #0
 8004794:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004796:	68f8      	ldr	r0, [r7, #12]
 8004798:	f7ff fee4 	bl	8004564 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800479c:	bf00      	nop
 800479e:	3710      	adds	r7, #16
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}

080047a4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b085      	sub	sp, #20
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	2b21      	cmp	r3, #33	@ 0x21
 80047b6:	d13e      	bne.n	8004836 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047c0:	d114      	bne.n	80047ec <UART_Transmit_IT+0x48>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	691b      	ldr	r3, [r3, #16]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d110      	bne.n	80047ec <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6a1b      	ldr	r3, [r3, #32]
 80047ce:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	881b      	ldrh	r3, [r3, #0]
 80047d4:	461a      	mov	r2, r3
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047de:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6a1b      	ldr	r3, [r3, #32]
 80047e4:	1c9a      	adds	r2, r3, #2
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	621a      	str	r2, [r3, #32]
 80047ea:	e008      	b.n	80047fe <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6a1b      	ldr	r3, [r3, #32]
 80047f0:	1c59      	adds	r1, r3, #1
 80047f2:	687a      	ldr	r2, [r7, #4]
 80047f4:	6211      	str	r1, [r2, #32]
 80047f6:	781a      	ldrb	r2, [r3, #0]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004802:	b29b      	uxth	r3, r3
 8004804:	3b01      	subs	r3, #1
 8004806:	b29b      	uxth	r3, r3
 8004808:	687a      	ldr	r2, [r7, #4]
 800480a:	4619      	mov	r1, r3
 800480c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800480e:	2b00      	cmp	r3, #0
 8004810:	d10f      	bne.n	8004832 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	68da      	ldr	r2, [r3, #12]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004820:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	68da      	ldr	r2, [r3, #12]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004830:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004832:	2300      	movs	r3, #0
 8004834:	e000      	b.n	8004838 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004836:	2302      	movs	r3, #2
  }
}
 8004838:	4618      	mov	r0, r3
 800483a:	3714      	adds	r7, #20
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr

08004844 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b082      	sub	sp, #8
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	68da      	ldr	r2, [r3, #12]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800485a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2220      	movs	r2, #32
 8004860:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	f7ff fe73 	bl	8004550 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800486a:	2300      	movs	r3, #0
}
 800486c:	4618      	mov	r0, r3
 800486e:	3708      	adds	r7, #8
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}

08004874 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b08c      	sub	sp, #48	@ 0x30
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004882:	b2db      	uxtb	r3, r3
 8004884:	2b22      	cmp	r3, #34	@ 0x22
 8004886:	f040 80ae 	bne.w	80049e6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004892:	d117      	bne.n	80048c4 <UART_Receive_IT+0x50>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	691b      	ldr	r3, [r3, #16]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d113      	bne.n	80048c4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800489c:	2300      	movs	r3, #0
 800489e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048a4:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	b29b      	uxth	r3, r3
 80048ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048b2:	b29a      	uxth	r2, r3
 80048b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048b6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048bc:	1c9a      	adds	r2, r3, #2
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	629a      	str	r2, [r3, #40]	@ 0x28
 80048c2:	e026      	b.n	8004912 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80048ca:	2300      	movs	r3, #0
 80048cc:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048d6:	d007      	beq.n	80048e8 <UART_Receive_IT+0x74>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d10a      	bne.n	80048f6 <UART_Receive_IT+0x82>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	691b      	ldr	r3, [r3, #16]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d106      	bne.n	80048f6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	b2da      	uxtb	r2, r3
 80048f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048f2:	701a      	strb	r2, [r3, #0]
 80048f4:	e008      	b.n	8004908 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004902:	b2da      	uxtb	r2, r3
 8004904:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004906:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800490c:	1c5a      	adds	r2, r3, #1
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004916:	b29b      	uxth	r3, r3
 8004918:	3b01      	subs	r3, #1
 800491a:	b29b      	uxth	r3, r3
 800491c:	687a      	ldr	r2, [r7, #4]
 800491e:	4619      	mov	r1, r3
 8004920:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004922:	2b00      	cmp	r3, #0
 8004924:	d15d      	bne.n	80049e2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	68da      	ldr	r2, [r3, #12]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f022 0220 	bic.w	r2, r2, #32
 8004934:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	68da      	ldr	r2, [r3, #12]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004944:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	695a      	ldr	r2, [r3, #20]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f022 0201 	bic.w	r2, r2, #1
 8004954:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2220      	movs	r2, #32
 800495a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2200      	movs	r2, #0
 8004962:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004968:	2b01      	cmp	r3, #1
 800496a:	d135      	bne.n	80049d8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2200      	movs	r2, #0
 8004970:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	330c      	adds	r3, #12
 8004978:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	e853 3f00 	ldrex	r3, [r3]
 8004980:	613b      	str	r3, [r7, #16]
   return(result);
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	f023 0310 	bic.w	r3, r3, #16
 8004988:	627b      	str	r3, [r7, #36]	@ 0x24
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	330c      	adds	r3, #12
 8004990:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004992:	623a      	str	r2, [r7, #32]
 8004994:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004996:	69f9      	ldr	r1, [r7, #28]
 8004998:	6a3a      	ldr	r2, [r7, #32]
 800499a:	e841 2300 	strex	r3, r2, [r1]
 800499e:	61bb      	str	r3, [r7, #24]
   return(result);
 80049a0:	69bb      	ldr	r3, [r7, #24]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d1e5      	bne.n	8004972 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f003 0310 	and.w	r3, r3, #16
 80049b0:	2b10      	cmp	r3, #16
 80049b2:	d10a      	bne.n	80049ca <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80049b4:	2300      	movs	r3, #0
 80049b6:	60fb      	str	r3, [r7, #12]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	60fb      	str	r3, [r7, #12]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	60fb      	str	r3, [r7, #12]
 80049c8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80049ce:	4619      	mov	r1, r3
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	f7ff fdd1 	bl	8004578 <HAL_UARTEx_RxEventCallback>
 80049d6:	e002      	b.n	80049de <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f7fc f8ab 	bl	8000b34 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80049de:	2300      	movs	r3, #0
 80049e0:	e002      	b.n	80049e8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80049e2:	2300      	movs	r3, #0
 80049e4:	e000      	b.n	80049e8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80049e6:	2302      	movs	r3, #2
  }
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3730      	adds	r7, #48	@ 0x30
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}

080049f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049f4:	b0c0      	sub	sp, #256	@ 0x100
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	691b      	ldr	r3, [r3, #16]
 8004a04:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a0c:	68d9      	ldr	r1, [r3, #12]
 8004a0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	ea40 0301 	orr.w	r3, r0, r1
 8004a18:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004a1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a1e:	689a      	ldr	r2, [r3, #8]
 8004a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a24:	691b      	ldr	r3, [r3, #16]
 8004a26:	431a      	orrs	r2, r3
 8004a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a2c:	695b      	ldr	r3, [r3, #20]
 8004a2e:	431a      	orrs	r2, r3
 8004a30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a34:	69db      	ldr	r3, [r3, #28]
 8004a36:	4313      	orrs	r3, r2
 8004a38:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004a48:	f021 010c 	bic.w	r1, r1, #12
 8004a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004a56:	430b      	orrs	r3, r1
 8004a58:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	695b      	ldr	r3, [r3, #20]
 8004a62:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004a66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a6a:	6999      	ldr	r1, [r3, #24]
 8004a6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	ea40 0301 	orr.w	r3, r0, r1
 8004a76:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	4b8f      	ldr	r3, [pc, #572]	@ (8004cbc <UART_SetConfig+0x2cc>)
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d005      	beq.n	8004a90 <UART_SetConfig+0xa0>
 8004a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	4b8d      	ldr	r3, [pc, #564]	@ (8004cc0 <UART_SetConfig+0x2d0>)
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d104      	bne.n	8004a9a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004a90:	f7fd fbe0 	bl	8002254 <HAL_RCC_GetPCLK2Freq>
 8004a94:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004a98:	e003      	b.n	8004aa2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004a9a:	f7fd fbc7 	bl	800222c <HAL_RCC_GetPCLK1Freq>
 8004a9e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004aa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004aa6:	69db      	ldr	r3, [r3, #28]
 8004aa8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004aac:	f040 810c 	bne.w	8004cc8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004ab0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004aba:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004abe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004ac2:	4622      	mov	r2, r4
 8004ac4:	462b      	mov	r3, r5
 8004ac6:	1891      	adds	r1, r2, r2
 8004ac8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004aca:	415b      	adcs	r3, r3
 8004acc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004ace:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004ad2:	4621      	mov	r1, r4
 8004ad4:	eb12 0801 	adds.w	r8, r2, r1
 8004ad8:	4629      	mov	r1, r5
 8004ada:	eb43 0901 	adc.w	r9, r3, r1
 8004ade:	f04f 0200 	mov.w	r2, #0
 8004ae2:	f04f 0300 	mov.w	r3, #0
 8004ae6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004aea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004aee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004af2:	4690      	mov	r8, r2
 8004af4:	4699      	mov	r9, r3
 8004af6:	4623      	mov	r3, r4
 8004af8:	eb18 0303 	adds.w	r3, r8, r3
 8004afc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004b00:	462b      	mov	r3, r5
 8004b02:	eb49 0303 	adc.w	r3, r9, r3
 8004b06:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004b0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	2200      	movs	r2, #0
 8004b12:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004b16:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004b1a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004b1e:	460b      	mov	r3, r1
 8004b20:	18db      	adds	r3, r3, r3
 8004b22:	653b      	str	r3, [r7, #80]	@ 0x50
 8004b24:	4613      	mov	r3, r2
 8004b26:	eb42 0303 	adc.w	r3, r2, r3
 8004b2a:	657b      	str	r3, [r7, #84]	@ 0x54
 8004b2c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004b30:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004b34:	f7fb fbd4 	bl	80002e0 <__aeabi_uldivmod>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	460b      	mov	r3, r1
 8004b3c:	4b61      	ldr	r3, [pc, #388]	@ (8004cc4 <UART_SetConfig+0x2d4>)
 8004b3e:	fba3 2302 	umull	r2, r3, r3, r2
 8004b42:	095b      	lsrs	r3, r3, #5
 8004b44:	011c      	lsls	r4, r3, #4
 8004b46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004b50:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004b54:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004b58:	4642      	mov	r2, r8
 8004b5a:	464b      	mov	r3, r9
 8004b5c:	1891      	adds	r1, r2, r2
 8004b5e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004b60:	415b      	adcs	r3, r3
 8004b62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b64:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004b68:	4641      	mov	r1, r8
 8004b6a:	eb12 0a01 	adds.w	sl, r2, r1
 8004b6e:	4649      	mov	r1, r9
 8004b70:	eb43 0b01 	adc.w	fp, r3, r1
 8004b74:	f04f 0200 	mov.w	r2, #0
 8004b78:	f04f 0300 	mov.w	r3, #0
 8004b7c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004b80:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004b84:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b88:	4692      	mov	sl, r2
 8004b8a:	469b      	mov	fp, r3
 8004b8c:	4643      	mov	r3, r8
 8004b8e:	eb1a 0303 	adds.w	r3, sl, r3
 8004b92:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004b96:	464b      	mov	r3, r9
 8004b98:	eb4b 0303 	adc.w	r3, fp, r3
 8004b9c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004bac:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004bb0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004bb4:	460b      	mov	r3, r1
 8004bb6:	18db      	adds	r3, r3, r3
 8004bb8:	643b      	str	r3, [r7, #64]	@ 0x40
 8004bba:	4613      	mov	r3, r2
 8004bbc:	eb42 0303 	adc.w	r3, r2, r3
 8004bc0:	647b      	str	r3, [r7, #68]	@ 0x44
 8004bc2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004bc6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004bca:	f7fb fb89 	bl	80002e0 <__aeabi_uldivmod>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	460b      	mov	r3, r1
 8004bd2:	4611      	mov	r1, r2
 8004bd4:	4b3b      	ldr	r3, [pc, #236]	@ (8004cc4 <UART_SetConfig+0x2d4>)
 8004bd6:	fba3 2301 	umull	r2, r3, r3, r1
 8004bda:	095b      	lsrs	r3, r3, #5
 8004bdc:	2264      	movs	r2, #100	@ 0x64
 8004bde:	fb02 f303 	mul.w	r3, r2, r3
 8004be2:	1acb      	subs	r3, r1, r3
 8004be4:	00db      	lsls	r3, r3, #3
 8004be6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004bea:	4b36      	ldr	r3, [pc, #216]	@ (8004cc4 <UART_SetConfig+0x2d4>)
 8004bec:	fba3 2302 	umull	r2, r3, r3, r2
 8004bf0:	095b      	lsrs	r3, r3, #5
 8004bf2:	005b      	lsls	r3, r3, #1
 8004bf4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004bf8:	441c      	add	r4, r3
 8004bfa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004bfe:	2200      	movs	r2, #0
 8004c00:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004c04:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004c08:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004c0c:	4642      	mov	r2, r8
 8004c0e:	464b      	mov	r3, r9
 8004c10:	1891      	adds	r1, r2, r2
 8004c12:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004c14:	415b      	adcs	r3, r3
 8004c16:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004c18:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004c1c:	4641      	mov	r1, r8
 8004c1e:	1851      	adds	r1, r2, r1
 8004c20:	6339      	str	r1, [r7, #48]	@ 0x30
 8004c22:	4649      	mov	r1, r9
 8004c24:	414b      	adcs	r3, r1
 8004c26:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c28:	f04f 0200 	mov.w	r2, #0
 8004c2c:	f04f 0300 	mov.w	r3, #0
 8004c30:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004c34:	4659      	mov	r1, fp
 8004c36:	00cb      	lsls	r3, r1, #3
 8004c38:	4651      	mov	r1, sl
 8004c3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c3e:	4651      	mov	r1, sl
 8004c40:	00ca      	lsls	r2, r1, #3
 8004c42:	4610      	mov	r0, r2
 8004c44:	4619      	mov	r1, r3
 8004c46:	4603      	mov	r3, r0
 8004c48:	4642      	mov	r2, r8
 8004c4a:	189b      	adds	r3, r3, r2
 8004c4c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004c50:	464b      	mov	r3, r9
 8004c52:	460a      	mov	r2, r1
 8004c54:	eb42 0303 	adc.w	r3, r2, r3
 8004c58:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	2200      	movs	r2, #0
 8004c64:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004c68:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004c6c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004c70:	460b      	mov	r3, r1
 8004c72:	18db      	adds	r3, r3, r3
 8004c74:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c76:	4613      	mov	r3, r2
 8004c78:	eb42 0303 	adc.w	r3, r2, r3
 8004c7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c7e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004c82:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004c86:	f7fb fb2b 	bl	80002e0 <__aeabi_uldivmod>
 8004c8a:	4602      	mov	r2, r0
 8004c8c:	460b      	mov	r3, r1
 8004c8e:	4b0d      	ldr	r3, [pc, #52]	@ (8004cc4 <UART_SetConfig+0x2d4>)
 8004c90:	fba3 1302 	umull	r1, r3, r3, r2
 8004c94:	095b      	lsrs	r3, r3, #5
 8004c96:	2164      	movs	r1, #100	@ 0x64
 8004c98:	fb01 f303 	mul.w	r3, r1, r3
 8004c9c:	1ad3      	subs	r3, r2, r3
 8004c9e:	00db      	lsls	r3, r3, #3
 8004ca0:	3332      	adds	r3, #50	@ 0x32
 8004ca2:	4a08      	ldr	r2, [pc, #32]	@ (8004cc4 <UART_SetConfig+0x2d4>)
 8004ca4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ca8:	095b      	lsrs	r3, r3, #5
 8004caa:	f003 0207 	and.w	r2, r3, #7
 8004cae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4422      	add	r2, r4
 8004cb6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004cb8:	e106      	b.n	8004ec8 <UART_SetConfig+0x4d8>
 8004cba:	bf00      	nop
 8004cbc:	40011000 	.word	0x40011000
 8004cc0:	40011400 	.word	0x40011400
 8004cc4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004cc8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ccc:	2200      	movs	r2, #0
 8004cce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004cd2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004cd6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004cda:	4642      	mov	r2, r8
 8004cdc:	464b      	mov	r3, r9
 8004cde:	1891      	adds	r1, r2, r2
 8004ce0:	6239      	str	r1, [r7, #32]
 8004ce2:	415b      	adcs	r3, r3
 8004ce4:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ce6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004cea:	4641      	mov	r1, r8
 8004cec:	1854      	adds	r4, r2, r1
 8004cee:	4649      	mov	r1, r9
 8004cf0:	eb43 0501 	adc.w	r5, r3, r1
 8004cf4:	f04f 0200 	mov.w	r2, #0
 8004cf8:	f04f 0300 	mov.w	r3, #0
 8004cfc:	00eb      	lsls	r3, r5, #3
 8004cfe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d02:	00e2      	lsls	r2, r4, #3
 8004d04:	4614      	mov	r4, r2
 8004d06:	461d      	mov	r5, r3
 8004d08:	4643      	mov	r3, r8
 8004d0a:	18e3      	adds	r3, r4, r3
 8004d0c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004d10:	464b      	mov	r3, r9
 8004d12:	eb45 0303 	adc.w	r3, r5, r3
 8004d16:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004d1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	2200      	movs	r2, #0
 8004d22:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004d26:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004d2a:	f04f 0200 	mov.w	r2, #0
 8004d2e:	f04f 0300 	mov.w	r3, #0
 8004d32:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004d36:	4629      	mov	r1, r5
 8004d38:	008b      	lsls	r3, r1, #2
 8004d3a:	4621      	mov	r1, r4
 8004d3c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d40:	4621      	mov	r1, r4
 8004d42:	008a      	lsls	r2, r1, #2
 8004d44:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004d48:	f7fb faca 	bl	80002e0 <__aeabi_uldivmod>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	460b      	mov	r3, r1
 8004d50:	4b60      	ldr	r3, [pc, #384]	@ (8004ed4 <UART_SetConfig+0x4e4>)
 8004d52:	fba3 2302 	umull	r2, r3, r3, r2
 8004d56:	095b      	lsrs	r3, r3, #5
 8004d58:	011c      	lsls	r4, r3, #4
 8004d5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d5e:	2200      	movs	r2, #0
 8004d60:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004d64:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004d68:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004d6c:	4642      	mov	r2, r8
 8004d6e:	464b      	mov	r3, r9
 8004d70:	1891      	adds	r1, r2, r2
 8004d72:	61b9      	str	r1, [r7, #24]
 8004d74:	415b      	adcs	r3, r3
 8004d76:	61fb      	str	r3, [r7, #28]
 8004d78:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d7c:	4641      	mov	r1, r8
 8004d7e:	1851      	adds	r1, r2, r1
 8004d80:	6139      	str	r1, [r7, #16]
 8004d82:	4649      	mov	r1, r9
 8004d84:	414b      	adcs	r3, r1
 8004d86:	617b      	str	r3, [r7, #20]
 8004d88:	f04f 0200 	mov.w	r2, #0
 8004d8c:	f04f 0300 	mov.w	r3, #0
 8004d90:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d94:	4659      	mov	r1, fp
 8004d96:	00cb      	lsls	r3, r1, #3
 8004d98:	4651      	mov	r1, sl
 8004d9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d9e:	4651      	mov	r1, sl
 8004da0:	00ca      	lsls	r2, r1, #3
 8004da2:	4610      	mov	r0, r2
 8004da4:	4619      	mov	r1, r3
 8004da6:	4603      	mov	r3, r0
 8004da8:	4642      	mov	r2, r8
 8004daa:	189b      	adds	r3, r3, r2
 8004dac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004db0:	464b      	mov	r3, r9
 8004db2:	460a      	mov	r2, r1
 8004db4:	eb42 0303 	adc.w	r3, r2, r3
 8004db8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004dc6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004dc8:	f04f 0200 	mov.w	r2, #0
 8004dcc:	f04f 0300 	mov.w	r3, #0
 8004dd0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004dd4:	4649      	mov	r1, r9
 8004dd6:	008b      	lsls	r3, r1, #2
 8004dd8:	4641      	mov	r1, r8
 8004dda:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004dde:	4641      	mov	r1, r8
 8004de0:	008a      	lsls	r2, r1, #2
 8004de2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004de6:	f7fb fa7b 	bl	80002e0 <__aeabi_uldivmod>
 8004dea:	4602      	mov	r2, r0
 8004dec:	460b      	mov	r3, r1
 8004dee:	4611      	mov	r1, r2
 8004df0:	4b38      	ldr	r3, [pc, #224]	@ (8004ed4 <UART_SetConfig+0x4e4>)
 8004df2:	fba3 2301 	umull	r2, r3, r3, r1
 8004df6:	095b      	lsrs	r3, r3, #5
 8004df8:	2264      	movs	r2, #100	@ 0x64
 8004dfa:	fb02 f303 	mul.w	r3, r2, r3
 8004dfe:	1acb      	subs	r3, r1, r3
 8004e00:	011b      	lsls	r3, r3, #4
 8004e02:	3332      	adds	r3, #50	@ 0x32
 8004e04:	4a33      	ldr	r2, [pc, #204]	@ (8004ed4 <UART_SetConfig+0x4e4>)
 8004e06:	fba2 2303 	umull	r2, r3, r2, r3
 8004e0a:	095b      	lsrs	r3, r3, #5
 8004e0c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004e10:	441c      	add	r4, r3
 8004e12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e16:	2200      	movs	r2, #0
 8004e18:	673b      	str	r3, [r7, #112]	@ 0x70
 8004e1a:	677a      	str	r2, [r7, #116]	@ 0x74
 8004e1c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004e20:	4642      	mov	r2, r8
 8004e22:	464b      	mov	r3, r9
 8004e24:	1891      	adds	r1, r2, r2
 8004e26:	60b9      	str	r1, [r7, #8]
 8004e28:	415b      	adcs	r3, r3
 8004e2a:	60fb      	str	r3, [r7, #12]
 8004e2c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e30:	4641      	mov	r1, r8
 8004e32:	1851      	adds	r1, r2, r1
 8004e34:	6039      	str	r1, [r7, #0]
 8004e36:	4649      	mov	r1, r9
 8004e38:	414b      	adcs	r3, r1
 8004e3a:	607b      	str	r3, [r7, #4]
 8004e3c:	f04f 0200 	mov.w	r2, #0
 8004e40:	f04f 0300 	mov.w	r3, #0
 8004e44:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004e48:	4659      	mov	r1, fp
 8004e4a:	00cb      	lsls	r3, r1, #3
 8004e4c:	4651      	mov	r1, sl
 8004e4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e52:	4651      	mov	r1, sl
 8004e54:	00ca      	lsls	r2, r1, #3
 8004e56:	4610      	mov	r0, r2
 8004e58:	4619      	mov	r1, r3
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	4642      	mov	r2, r8
 8004e5e:	189b      	adds	r3, r3, r2
 8004e60:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004e62:	464b      	mov	r3, r9
 8004e64:	460a      	mov	r2, r1
 8004e66:	eb42 0303 	adc.w	r3, r2, r3
 8004e6a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	663b      	str	r3, [r7, #96]	@ 0x60
 8004e76:	667a      	str	r2, [r7, #100]	@ 0x64
 8004e78:	f04f 0200 	mov.w	r2, #0
 8004e7c:	f04f 0300 	mov.w	r3, #0
 8004e80:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004e84:	4649      	mov	r1, r9
 8004e86:	008b      	lsls	r3, r1, #2
 8004e88:	4641      	mov	r1, r8
 8004e8a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e8e:	4641      	mov	r1, r8
 8004e90:	008a      	lsls	r2, r1, #2
 8004e92:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004e96:	f7fb fa23 	bl	80002e0 <__aeabi_uldivmod>
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	460b      	mov	r3, r1
 8004e9e:	4b0d      	ldr	r3, [pc, #52]	@ (8004ed4 <UART_SetConfig+0x4e4>)
 8004ea0:	fba3 1302 	umull	r1, r3, r3, r2
 8004ea4:	095b      	lsrs	r3, r3, #5
 8004ea6:	2164      	movs	r1, #100	@ 0x64
 8004ea8:	fb01 f303 	mul.w	r3, r1, r3
 8004eac:	1ad3      	subs	r3, r2, r3
 8004eae:	011b      	lsls	r3, r3, #4
 8004eb0:	3332      	adds	r3, #50	@ 0x32
 8004eb2:	4a08      	ldr	r2, [pc, #32]	@ (8004ed4 <UART_SetConfig+0x4e4>)
 8004eb4:	fba2 2303 	umull	r2, r3, r2, r3
 8004eb8:	095b      	lsrs	r3, r3, #5
 8004eba:	f003 020f 	and.w	r2, r3, #15
 8004ebe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4422      	add	r2, r4
 8004ec6:	609a      	str	r2, [r3, #8]
}
 8004ec8:	bf00      	nop
 8004eca:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ed4:	51eb851f 	.word	0x51eb851f

08004ed8 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b083      	sub	sp, #12
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	f103 0208 	add.w	r2, r3, #8
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f04f 32ff 	mov.w	r2, #4294967295
 8004ef0:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	f103 0208 	add.w	r2, r3, #8
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f103 0208 	add.w	r2, r3, #8
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004f0c:	bf00      	nop
 8004f0e:	370c      	adds	r7, #12
 8004f10:	46bd      	mov	sp, r7
 8004f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f16:	4770      	bx	lr

08004f18 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b083      	sub	sp, #12
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2200      	movs	r2, #0
 8004f24:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004f26:	bf00      	nop
 8004f28:	370c      	adds	r7, #12
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f30:	4770      	bx	lr

08004f32 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8004f32:	b480      	push	{r7}
 8004f34:	b085      	sub	sp, #20
 8004f36:	af00      	add	r7, sp, #0
 8004f38:	6078      	str	r0, [r7, #4]
 8004f3a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f48:	d103      	bne.n	8004f52 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	691b      	ldr	r3, [r3, #16]
 8004f4e:	60fb      	str	r3, [r7, #12]
 8004f50:	e00c      	b.n	8004f6c <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	3308      	adds	r3, #8
 8004f56:	60fb      	str	r3, [r7, #12]
 8004f58:	e002      	b.n	8004f60 <vListInsert+0x2e>
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	60fb      	str	r3, [r7, #12]
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	68ba      	ldr	r2, [r7, #8]
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d2f6      	bcs.n	8004f5a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	685a      	ldr	r2, [r3, #4]
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	683a      	ldr	r2, [r7, #0]
 8004f7a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	68fa      	ldr	r2, [r7, #12]
 8004f80:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	683a      	ldr	r2, [r7, #0]
 8004f86:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	687a      	ldr	r2, [r7, #4]
 8004f8c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	1c5a      	adds	r2, r3, #1
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	601a      	str	r2, [r3, #0]
}
 8004f98:	bf00      	nop
 8004f9a:	3714      	adds	r7, #20
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr

08004fa4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b085      	sub	sp, #20
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	691b      	ldr	r3, [r3, #16]
 8004fb0:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	687a      	ldr	r2, [r7, #4]
 8004fb8:	6892      	ldr	r2, [r2, #8]
 8004fba:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	687a      	ldr	r2, [r7, #4]
 8004fc2:	6852      	ldr	r2, [r2, #4]
 8004fc4:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	687a      	ldr	r2, [r7, #4]
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d103      	bne.n	8004fd8 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	689a      	ldr	r2, [r3, #8]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	1e5a      	subs	r2, r3, #1
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	3714      	adds	r7, #20
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr

08004ff8 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b086      	sub	sp, #24
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8005002:	2301      	movs	r3, #1
 8005004:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d10b      	bne.n	8005028 <xQueueGenericReset+0x30>
        __asm volatile
 8005010:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005014:	f383 8811 	msr	BASEPRI, r3
 8005018:	f3bf 8f6f 	isb	sy
 800501c:	f3bf 8f4f 	dsb	sy
 8005020:	60fb      	str	r3, [r7, #12]
    }
 8005022:	bf00      	nop
 8005024:	bf00      	nop
 8005026:	e7fd      	b.n	8005024 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d05d      	beq.n	80050ea <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 8005032:	2b00      	cmp	r3, #0
 8005034:	d059      	beq.n	80050ea <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800503e:	2100      	movs	r1, #0
 8005040:	fba3 2302 	umull	r2, r3, r3, r2
 8005044:	2b00      	cmp	r3, #0
 8005046:	d000      	beq.n	800504a <xQueueGenericReset+0x52>
 8005048:	2101      	movs	r1, #1
 800504a:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 800504c:	2b00      	cmp	r3, #0
 800504e:	d14c      	bne.n	80050ea <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
 8005050:	f002 fdec 	bl	8007c2c <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800505c:	6939      	ldr	r1, [r7, #16]
 800505e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005060:	fb01 f303 	mul.w	r3, r1, r3
 8005064:	441a      	add	r2, r3
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	2200      	movs	r2, #0
 800506e:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005080:	3b01      	subs	r3, #1
 8005082:	6939      	ldr	r1, [r7, #16]
 8005084:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005086:	fb01 f303 	mul.w	r3, r1, r3
 800508a:	441a      	add	r2, r3
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	22ff      	movs	r2, #255	@ 0xff
 8005094:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	22ff      	movs	r2, #255	@ 0xff
 800509c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d114      	bne.n	80050d0 <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	691b      	ldr	r3, [r3, #16]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d01a      	beq.n	80050e4 <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	3310      	adds	r3, #16
 80050b2:	4618      	mov	r0, r3
 80050b4:	f001 faac 	bl	8006610 <xTaskRemoveFromEventList>
 80050b8:	4603      	mov	r3, r0
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d012      	beq.n	80050e4 <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80050be:	4b16      	ldr	r3, [pc, #88]	@ (8005118 <xQueueGenericReset+0x120>)
 80050c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80050c4:	601a      	str	r2, [r3, #0]
 80050c6:	f3bf 8f4f 	dsb	sy
 80050ca:	f3bf 8f6f 	isb	sy
 80050ce:	e009      	b.n	80050e4 <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	3310      	adds	r3, #16
 80050d4:	4618      	mov	r0, r3
 80050d6:	f7ff feff 	bl	8004ed8 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	3324      	adds	r3, #36	@ 0x24
 80050de:	4618      	mov	r0, r3
 80050e0:	f7ff fefa 	bl	8004ed8 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80050e4:	f002 fdd4 	bl	8007c90 <vPortExitCritical>
 80050e8:	e001      	b.n	80050ee <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
 80050ea:	2300      	movs	r3, #0
 80050ec:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d10b      	bne.n	800510c <xQueueGenericReset+0x114>
        __asm volatile
 80050f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050f8:	f383 8811 	msr	BASEPRI, r3
 80050fc:	f3bf 8f6f 	isb	sy
 8005100:	f3bf 8f4f 	dsb	sy
 8005104:	60bb      	str	r3, [r7, #8]
    }
 8005106:	bf00      	nop
 8005108:	bf00      	nop
 800510a:	e7fd      	b.n	8005108 <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 800510c:	697b      	ldr	r3, [r7, #20]
}
 800510e:	4618      	mov	r0, r3
 8005110:	3718      	adds	r7, #24
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}
 8005116:	bf00      	nop
 8005118:	e000ed04 	.word	0xe000ed04

0800511c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 800511c:	b580      	push	{r7, lr}
 800511e:	b08a      	sub	sp, #40	@ 0x28
 8005120:	af02      	add	r7, sp, #8
 8005122:	60f8      	str	r0, [r7, #12]
 8005124:	60b9      	str	r1, [r7, #8]
 8005126:	4613      	mov	r3, r2
 8005128:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 800512a:	2300      	movs	r3, #0
 800512c:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d02e      	beq.n	8005192 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8005134:	2100      	movs	r1, #0
 8005136:	68ba      	ldr	r2, [r7, #8]
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	fba3 2302 	umull	r2, r3, r3, r2
 800513e:	2b00      	cmp	r3, #0
 8005140:	d000      	beq.n	8005144 <xQueueGenericCreate+0x28>
 8005142:	2101      	movs	r1, #1
 8005144:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8005146:	2b00      	cmp	r3, #0
 8005148:	d123      	bne.n	8005192 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	68ba      	ldr	r2, [r7, #8]
 800514e:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8005152:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8005156:	d81c      	bhi.n	8005192 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	68ba      	ldr	r2, [r7, #8]
 800515c:	fb02 f303 	mul.w	r3, r2, r3
 8005160:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005162:	69bb      	ldr	r3, [r7, #24]
 8005164:	3350      	adds	r3, #80	@ 0x50
 8005166:	4618      	mov	r0, r3
 8005168:	f002 fe8a 	bl	8007e80 <pvPortMalloc>
 800516c:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800516e:	69fb      	ldr	r3, [r7, #28]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d01d      	beq.n	80051b0 <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005174:	69fb      	ldr	r3, [r7, #28]
 8005176:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	3350      	adds	r3, #80	@ 0x50
 800517c:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800517e:	79fa      	ldrb	r2, [r7, #7]
 8005180:	69fb      	ldr	r3, [r7, #28]
 8005182:	9300      	str	r3, [sp, #0]
 8005184:	4613      	mov	r3, r2
 8005186:	697a      	ldr	r2, [r7, #20]
 8005188:	68b9      	ldr	r1, [r7, #8]
 800518a:	68f8      	ldr	r0, [r7, #12]
 800518c:	f000 f815 	bl	80051ba <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8005190:	e00e      	b.n	80051b0 <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8005192:	69fb      	ldr	r3, [r7, #28]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d10b      	bne.n	80051b0 <xQueueGenericCreate+0x94>
        __asm volatile
 8005198:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800519c:	f383 8811 	msr	BASEPRI, r3
 80051a0:	f3bf 8f6f 	isb	sy
 80051a4:	f3bf 8f4f 	dsb	sy
 80051a8:	613b      	str	r3, [r7, #16]
    }
 80051aa:	bf00      	nop
 80051ac:	bf00      	nop
 80051ae:	e7fd      	b.n	80051ac <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80051b0:	69fb      	ldr	r3, [r7, #28]
    }
 80051b2:	4618      	mov	r0, r3
 80051b4:	3720      	adds	r7, #32
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}

080051ba <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80051ba:	b580      	push	{r7, lr}
 80051bc:	b084      	sub	sp, #16
 80051be:	af00      	add	r7, sp, #0
 80051c0:	60f8      	str	r0, [r7, #12]
 80051c2:	60b9      	str	r1, [r7, #8]
 80051c4:	607a      	str	r2, [r7, #4]
 80051c6:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d103      	bne.n	80051d6 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80051ce:	69bb      	ldr	r3, [r7, #24]
 80051d0:	69ba      	ldr	r2, [r7, #24]
 80051d2:	601a      	str	r2, [r3, #0]
 80051d4:	e002      	b.n	80051dc <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80051d6:	69bb      	ldr	r3, [r7, #24]
 80051d8:	687a      	ldr	r2, [r7, #4]
 80051da:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80051dc:	69bb      	ldr	r3, [r7, #24]
 80051de:	68fa      	ldr	r2, [r7, #12]
 80051e0:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80051e2:	69bb      	ldr	r3, [r7, #24]
 80051e4:	68ba      	ldr	r2, [r7, #8]
 80051e6:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80051e8:	2101      	movs	r1, #1
 80051ea:	69b8      	ldr	r0, [r7, #24]
 80051ec:	f7ff ff04 	bl	8004ff8 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 80051f0:	69bb      	ldr	r3, [r7, #24]
 80051f2:	78fa      	ldrb	r2, [r7, #3]
 80051f4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80051f8:	bf00      	nop
 80051fa:	3710      	adds	r7, #16
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}

08005200 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b08e      	sub	sp, #56	@ 0x38
 8005204:	af00      	add	r7, sp, #0
 8005206:	60f8      	str	r0, [r7, #12]
 8005208:	60b9      	str	r1, [r7, #8]
 800520a:	607a      	str	r2, [r7, #4]
 800520c:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800520e:	2300      	movs	r3, #0
 8005210:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	633b      	str	r3, [r7, #48]	@ 0x30

    configASSERT( pxQueue );
 8005216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005218:	2b00      	cmp	r3, #0
 800521a:	d10b      	bne.n	8005234 <xQueueGenericSend+0x34>
        __asm volatile
 800521c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005220:	f383 8811 	msr	BASEPRI, r3
 8005224:	f3bf 8f6f 	isb	sy
 8005228:	f3bf 8f4f 	dsb	sy
 800522c:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 800522e:	bf00      	nop
 8005230:	bf00      	nop
 8005232:	e7fd      	b.n	8005230 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d103      	bne.n	8005242 <xQueueGenericSend+0x42>
 800523a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800523c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800523e:	2b00      	cmp	r3, #0
 8005240:	d101      	bne.n	8005246 <xQueueGenericSend+0x46>
 8005242:	2301      	movs	r3, #1
 8005244:	e000      	b.n	8005248 <xQueueGenericSend+0x48>
 8005246:	2300      	movs	r3, #0
 8005248:	2b00      	cmp	r3, #0
 800524a:	d10b      	bne.n	8005264 <xQueueGenericSend+0x64>
        __asm volatile
 800524c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005250:	f383 8811 	msr	BASEPRI, r3
 8005254:	f3bf 8f6f 	isb	sy
 8005258:	f3bf 8f4f 	dsb	sy
 800525c:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 800525e:	bf00      	nop
 8005260:	bf00      	nop
 8005262:	e7fd      	b.n	8005260 <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	2b02      	cmp	r3, #2
 8005268:	d103      	bne.n	8005272 <xQueueGenericSend+0x72>
 800526a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800526c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800526e:	2b01      	cmp	r3, #1
 8005270:	d101      	bne.n	8005276 <xQueueGenericSend+0x76>
 8005272:	2301      	movs	r3, #1
 8005274:	e000      	b.n	8005278 <xQueueGenericSend+0x78>
 8005276:	2300      	movs	r3, #0
 8005278:	2b00      	cmp	r3, #0
 800527a:	d10b      	bne.n	8005294 <xQueueGenericSend+0x94>
        __asm volatile
 800527c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005280:	f383 8811 	msr	BASEPRI, r3
 8005284:	f3bf 8f6f 	isb	sy
 8005288:	f3bf 8f4f 	dsb	sy
 800528c:	623b      	str	r3, [r7, #32]
    }
 800528e:	bf00      	nop
 8005290:	bf00      	nop
 8005292:	e7fd      	b.n	8005290 <xQueueGenericSend+0x90>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005294:	f001 fbd0 	bl	8006a38 <xTaskGetSchedulerState>
 8005298:	4603      	mov	r3, r0
 800529a:	2b00      	cmp	r3, #0
 800529c:	d102      	bne.n	80052a4 <xQueueGenericSend+0xa4>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d101      	bne.n	80052a8 <xQueueGenericSend+0xa8>
 80052a4:	2301      	movs	r3, #1
 80052a6:	e000      	b.n	80052aa <xQueueGenericSend+0xaa>
 80052a8:	2300      	movs	r3, #0
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d10b      	bne.n	80052c6 <xQueueGenericSend+0xc6>
        __asm volatile
 80052ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052b2:	f383 8811 	msr	BASEPRI, r3
 80052b6:	f3bf 8f6f 	isb	sy
 80052ba:	f3bf 8f4f 	dsb	sy
 80052be:	61fb      	str	r3, [r7, #28]
    }
 80052c0:	bf00      	nop
 80052c2:	bf00      	nop
 80052c4:	e7fd      	b.n	80052c2 <xQueueGenericSend+0xc2>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80052c6:	f002 fcb1 	bl	8007c2c <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80052ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80052ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052d2:	429a      	cmp	r2, r3
 80052d4:	d302      	bcc.n	80052dc <xQueueGenericSend+0xdc>
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	2b02      	cmp	r3, #2
 80052da:	d129      	bne.n	8005330 <xQueueGenericSend+0x130>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80052dc:	683a      	ldr	r2, [r7, #0]
 80052de:	68b9      	ldr	r1, [r7, #8]
 80052e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80052e2:	f000 fae0 	bl	80058a6 <prvCopyDataToQueue>
 80052e6:	62f8      	str	r0, [r7, #44]	@ 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80052e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d010      	beq.n	8005312 <xQueueGenericSend+0x112>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80052f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052f2:	3324      	adds	r3, #36	@ 0x24
 80052f4:	4618      	mov	r0, r3
 80052f6:	f001 f98b 	bl	8006610 <xTaskRemoveFromEventList>
 80052fa:	4603      	mov	r3, r0
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d013      	beq.n	8005328 <xQueueGenericSend+0x128>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 8005300:	4b3f      	ldr	r3, [pc, #252]	@ (8005400 <xQueueGenericSend+0x200>)
 8005302:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005306:	601a      	str	r2, [r3, #0]
 8005308:	f3bf 8f4f 	dsb	sy
 800530c:	f3bf 8f6f 	isb	sy
 8005310:	e00a      	b.n	8005328 <xQueueGenericSend+0x128>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 8005312:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005314:	2b00      	cmp	r3, #0
 8005316:	d007      	beq.n	8005328 <xQueueGenericSend+0x128>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8005318:	4b39      	ldr	r3, [pc, #228]	@ (8005400 <xQueueGenericSend+0x200>)
 800531a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800531e:	601a      	str	r2, [r3, #0]
 8005320:	f3bf 8f4f 	dsb	sy
 8005324:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8005328:	f002 fcb2 	bl	8007c90 <vPortExitCritical>
                return pdPASS;
 800532c:	2301      	movs	r3, #1
 800532e:	e063      	b.n	80053f8 <xQueueGenericSend+0x1f8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d103      	bne.n	800533e <xQueueGenericSend+0x13e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8005336:	f002 fcab 	bl	8007c90 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 800533a:	2300      	movs	r3, #0
 800533c:	e05c      	b.n	80053f8 <xQueueGenericSend+0x1f8>
                }
                else if( xEntryTimeSet == pdFALSE )
 800533e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005340:	2b00      	cmp	r3, #0
 8005342:	d106      	bne.n	8005352 <xQueueGenericSend+0x152>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8005344:	f107 0314 	add.w	r3, r7, #20
 8005348:	4618      	mov	r0, r3
 800534a:	f001 fa39 	bl	80067c0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800534e:	2301      	movs	r3, #1
 8005350:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8005352:	f002 fc9d 	bl	8007c90 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8005356:	f000 fe55 	bl	8006004 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800535a:	f002 fc67 	bl	8007c2c <vPortEnterCritical>
 800535e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005360:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005364:	b25b      	sxtb	r3, r3
 8005366:	f1b3 3fff 	cmp.w	r3, #4294967295
 800536a:	d103      	bne.n	8005374 <xQueueGenericSend+0x174>
 800536c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800536e:	2200      	movs	r2, #0
 8005370:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005376:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800537a:	b25b      	sxtb	r3, r3
 800537c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005380:	d103      	bne.n	800538a <xQueueGenericSend+0x18a>
 8005382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005384:	2200      	movs	r2, #0
 8005386:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800538a:	f002 fc81 	bl	8007c90 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800538e:	1d3a      	adds	r2, r7, #4
 8005390:	f107 0314 	add.w	r3, r7, #20
 8005394:	4611      	mov	r1, r2
 8005396:	4618      	mov	r0, r3
 8005398:	f001 fa28 	bl	80067ec <xTaskCheckForTimeOut>
 800539c:	4603      	mov	r3, r0
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d124      	bne.n	80053ec <xQueueGenericSend+0x1ec>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80053a2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80053a4:	f000 fb77 	bl	8005a96 <prvIsQueueFull>
 80053a8:	4603      	mov	r3, r0
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d018      	beq.n	80053e0 <xQueueGenericSend+0x1e0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80053ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053b0:	3310      	adds	r3, #16
 80053b2:	687a      	ldr	r2, [r7, #4]
 80053b4:	4611      	mov	r1, r2
 80053b6:	4618      	mov	r0, r3
 80053b8:	f001 f8be 	bl	8006538 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80053bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80053be:	f000 fb02 	bl	80059c6 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80053c2:	f000 fe2d 	bl	8006020 <xTaskResumeAll>
 80053c6:	4603      	mov	r3, r0
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	f47f af7c 	bne.w	80052c6 <xQueueGenericSend+0xc6>
                {
                    portYIELD_WITHIN_API();
 80053ce:	4b0c      	ldr	r3, [pc, #48]	@ (8005400 <xQueueGenericSend+0x200>)
 80053d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80053d4:	601a      	str	r2, [r3, #0]
 80053d6:	f3bf 8f4f 	dsb	sy
 80053da:	f3bf 8f6f 	isb	sy
 80053de:	e772      	b.n	80052c6 <xQueueGenericSend+0xc6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80053e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80053e2:	f000 faf0 	bl	80059c6 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80053e6:	f000 fe1b 	bl	8006020 <xTaskResumeAll>
 80053ea:	e76c      	b.n	80052c6 <xQueueGenericSend+0xc6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80053ec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80053ee:	f000 faea 	bl	80059c6 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80053f2:	f000 fe15 	bl	8006020 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 80053f6:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	3738      	adds	r7, #56	@ 0x38
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}
 8005400:	e000ed04 	.word	0xe000ed04

08005404 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b092      	sub	sp, #72	@ 0x48
 8005408:	af00      	add	r7, sp, #0
 800540a:	60f8      	str	r0, [r7, #12]
 800540c:	60b9      	str	r1, [r7, #8]
 800540e:	607a      	str	r2, [r7, #4]
 8005410:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	643b      	str	r3, [r7, #64]	@ 0x40

    configASSERT( pxQueue );
 8005416:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005418:	2b00      	cmp	r3, #0
 800541a:	d10b      	bne.n	8005434 <xQueueGenericSendFromISR+0x30>
        __asm volatile
 800541c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005420:	f383 8811 	msr	BASEPRI, r3
 8005424:	f3bf 8f6f 	isb	sy
 8005428:	f3bf 8f4f 	dsb	sy
 800542c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
 800542e:	bf00      	nop
 8005430:	bf00      	nop
 8005432:	e7fd      	b.n	8005430 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d103      	bne.n	8005442 <xQueueGenericSendFromISR+0x3e>
 800543a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800543c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800543e:	2b00      	cmp	r3, #0
 8005440:	d101      	bne.n	8005446 <xQueueGenericSendFromISR+0x42>
 8005442:	2301      	movs	r3, #1
 8005444:	e000      	b.n	8005448 <xQueueGenericSendFromISR+0x44>
 8005446:	2300      	movs	r3, #0
 8005448:	2b00      	cmp	r3, #0
 800544a:	d10b      	bne.n	8005464 <xQueueGenericSendFromISR+0x60>
        __asm volatile
 800544c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005450:	f383 8811 	msr	BASEPRI, r3
 8005454:	f3bf 8f6f 	isb	sy
 8005458:	f3bf 8f4f 	dsb	sy
 800545c:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 800545e:	bf00      	nop
 8005460:	bf00      	nop
 8005462:	e7fd      	b.n	8005460 <xQueueGenericSendFromISR+0x5c>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	2b02      	cmp	r3, #2
 8005468:	d103      	bne.n	8005472 <xQueueGenericSendFromISR+0x6e>
 800546a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800546c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800546e:	2b01      	cmp	r3, #1
 8005470:	d101      	bne.n	8005476 <xQueueGenericSendFromISR+0x72>
 8005472:	2301      	movs	r3, #1
 8005474:	e000      	b.n	8005478 <xQueueGenericSendFromISR+0x74>
 8005476:	2300      	movs	r3, #0
 8005478:	2b00      	cmp	r3, #0
 800547a:	d10b      	bne.n	8005494 <xQueueGenericSendFromISR+0x90>
        __asm volatile
 800547c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005480:	f383 8811 	msr	BASEPRI, r3
 8005484:	f3bf 8f6f 	isb	sy
 8005488:	f3bf 8f4f 	dsb	sy
 800548c:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 800548e:	bf00      	nop
 8005490:	bf00      	nop
 8005492:	e7fd      	b.n	8005490 <xQueueGenericSendFromISR+0x8c>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005494:	f002 fcb2 	bl	8007dfc <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8005498:	f3ef 8211 	mrs	r2, BASEPRI
 800549c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054a0:	f383 8811 	msr	BASEPRI, r3
 80054a4:	f3bf 8f6f 	isb	sy
 80054a8:	f3bf 8f4f 	dsb	sy
 80054ac:	623a      	str	r2, [r7, #32]
 80054ae:	61fb      	str	r3, [r7, #28]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 80054b0:	6a3b      	ldr	r3, [r7, #32]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80054b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80054b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80054b6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80054b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80054ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054bc:	429a      	cmp	r2, r3
 80054be:	d302      	bcc.n	80054c6 <xQueueGenericSendFromISR+0xc2>
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	2b02      	cmp	r3, #2
 80054c4:	d147      	bne.n	8005556 <xQueueGenericSendFromISR+0x152>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80054c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80054c8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80054cc:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80054d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80054d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054d4:	637b      	str	r3, [r7, #52]	@ 0x34
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80054d6:	683a      	ldr	r2, [r7, #0]
 80054d8:	68b9      	ldr	r1, [r7, #8]
 80054da:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80054dc:	f000 f9e3 	bl	80058a6 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 80054e0:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 80054e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054e8:	d112      	bne.n	8005510 <xQueueGenericSendFromISR+0x10c>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80054ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80054ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d02e      	beq.n	8005550 <xQueueGenericSendFromISR+0x14c>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80054f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80054f4:	3324      	adds	r3, #36	@ 0x24
 80054f6:	4618      	mov	r0, r3
 80054f8:	f001 f88a 	bl	8006610 <xTaskRemoveFromEventList>
 80054fc:	4603      	mov	r3, r0
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d026      	beq.n	8005550 <xQueueGenericSendFromISR+0x14c>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d023      	beq.n	8005550 <xQueueGenericSendFromISR+0x14c>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2201      	movs	r2, #1
 800550c:	601a      	str	r2, [r3, #0]
 800550e:	e01f      	b.n	8005550 <xQueueGenericSendFromISR+0x14c>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 8005510:	f000 fe92 	bl	8006238 <uxTaskGetNumberOfTasks>
 8005514:	6338      	str	r0, [r7, #48]	@ 0x30
 8005516:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 800551a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800551c:	429a      	cmp	r2, r3
 800551e:	d917      	bls.n	8005550 <xQueueGenericSendFromISR+0x14c>
 8005520:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8005524:	2b7f      	cmp	r3, #127	@ 0x7f
 8005526:	d10b      	bne.n	8005540 <xQueueGenericSendFromISR+0x13c>
        __asm volatile
 8005528:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800552c:	f383 8811 	msr	BASEPRI, r3
 8005530:	f3bf 8f6f 	isb	sy
 8005534:	f3bf 8f4f 	dsb	sy
 8005538:	61bb      	str	r3, [r7, #24]
    }
 800553a:	bf00      	nop
 800553c:	bf00      	nop
 800553e:	e7fd      	b.n	800553c <xQueueGenericSendFromISR+0x138>
 8005540:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8005544:	3301      	adds	r3, #1
 8005546:	b2db      	uxtb	r3, r3
 8005548:	b25a      	sxtb	r2, r3
 800554a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800554c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 8005550:	2301      	movs	r3, #1
 8005552:	647b      	str	r3, [r7, #68]	@ 0x44
        {
 8005554:	e001      	b.n	800555a <xQueueGenericSendFromISR+0x156>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8005556:	2300      	movs	r3, #0
 8005558:	647b      	str	r3, [r7, #68]	@ 0x44
 800555a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800555c:	617b      	str	r3, [r7, #20]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8005564:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8005566:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 8005568:	4618      	mov	r0, r3
 800556a:	3748      	adds	r7, #72	@ 0x48
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}

08005570 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b08c      	sub	sp, #48	@ 0x30
 8005574:	af00      	add	r7, sp, #0
 8005576:	60f8      	str	r0, [r7, #12]
 8005578:	60b9      	str	r1, [r7, #8]
 800557a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800557c:	2300      	movs	r3, #0
 800557e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8005584:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005586:	2b00      	cmp	r3, #0
 8005588:	d10b      	bne.n	80055a2 <xQueueReceive+0x32>
        __asm volatile
 800558a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800558e:	f383 8811 	msr	BASEPRI, r3
 8005592:	f3bf 8f6f 	isb	sy
 8005596:	f3bf 8f4f 	dsb	sy
 800559a:	623b      	str	r3, [r7, #32]
    }
 800559c:	bf00      	nop
 800559e:	bf00      	nop
 80055a0:	e7fd      	b.n	800559e <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d103      	bne.n	80055b0 <xQueueReceive+0x40>
 80055a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d101      	bne.n	80055b4 <xQueueReceive+0x44>
 80055b0:	2301      	movs	r3, #1
 80055b2:	e000      	b.n	80055b6 <xQueueReceive+0x46>
 80055b4:	2300      	movs	r3, #0
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d10b      	bne.n	80055d2 <xQueueReceive+0x62>
        __asm volatile
 80055ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055be:	f383 8811 	msr	BASEPRI, r3
 80055c2:	f3bf 8f6f 	isb	sy
 80055c6:	f3bf 8f4f 	dsb	sy
 80055ca:	61fb      	str	r3, [r7, #28]
    }
 80055cc:	bf00      	nop
 80055ce:	bf00      	nop
 80055d0:	e7fd      	b.n	80055ce <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80055d2:	f001 fa31 	bl	8006a38 <xTaskGetSchedulerState>
 80055d6:	4603      	mov	r3, r0
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d102      	bne.n	80055e2 <xQueueReceive+0x72>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d101      	bne.n	80055e6 <xQueueReceive+0x76>
 80055e2:	2301      	movs	r3, #1
 80055e4:	e000      	b.n	80055e8 <xQueueReceive+0x78>
 80055e6:	2300      	movs	r3, #0
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d10b      	bne.n	8005604 <xQueueReceive+0x94>
        __asm volatile
 80055ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055f0:	f383 8811 	msr	BASEPRI, r3
 80055f4:	f3bf 8f6f 	isb	sy
 80055f8:	f3bf 8f4f 	dsb	sy
 80055fc:	61bb      	str	r3, [r7, #24]
    }
 80055fe:	bf00      	nop
 8005600:	bf00      	nop
 8005602:	e7fd      	b.n	8005600 <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8005604:	f002 fb12 	bl	8007c2c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005608:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800560a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800560c:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800560e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005610:	2b00      	cmp	r3, #0
 8005612:	d01f      	beq.n	8005654 <xQueueReceive+0xe4>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005614:	68b9      	ldr	r1, [r7, #8]
 8005616:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005618:	f000 f9af 	bl	800597a <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800561c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800561e:	1e5a      	subs	r2, r3, #1
 8005620:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005622:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005624:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005626:	691b      	ldr	r3, [r3, #16]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d00f      	beq.n	800564c <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800562c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800562e:	3310      	adds	r3, #16
 8005630:	4618      	mov	r0, r3
 8005632:	f000 ffed 	bl	8006610 <xTaskRemoveFromEventList>
 8005636:	4603      	mov	r3, r0
 8005638:	2b00      	cmp	r3, #0
 800563a:	d007      	beq.n	800564c <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800563c:	4b3c      	ldr	r3, [pc, #240]	@ (8005730 <xQueueReceive+0x1c0>)
 800563e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005642:	601a      	str	r2, [r3, #0]
 8005644:	f3bf 8f4f 	dsb	sy
 8005648:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800564c:	f002 fb20 	bl	8007c90 <vPortExitCritical>
                return pdPASS;
 8005650:	2301      	movs	r3, #1
 8005652:	e069      	b.n	8005728 <xQueueReceive+0x1b8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d103      	bne.n	8005662 <xQueueReceive+0xf2>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800565a:	f002 fb19 	bl	8007c90 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 800565e:	2300      	movs	r3, #0
 8005660:	e062      	b.n	8005728 <xQueueReceive+0x1b8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8005662:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005664:	2b00      	cmp	r3, #0
 8005666:	d106      	bne.n	8005676 <xQueueReceive+0x106>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8005668:	f107 0310 	add.w	r3, r7, #16
 800566c:	4618      	mov	r0, r3
 800566e:	f001 f8a7 	bl	80067c0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8005672:	2301      	movs	r3, #1
 8005674:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8005676:	f002 fb0b 	bl	8007c90 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800567a:	f000 fcc3 	bl	8006004 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800567e:	f002 fad5 	bl	8007c2c <vPortEnterCritical>
 8005682:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005684:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005688:	b25b      	sxtb	r3, r3
 800568a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800568e:	d103      	bne.n	8005698 <xQueueReceive+0x128>
 8005690:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005692:	2200      	movs	r2, #0
 8005694:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005698:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800569a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800569e:	b25b      	sxtb	r3, r3
 80056a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056a4:	d103      	bne.n	80056ae <xQueueReceive+0x13e>
 80056a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056a8:	2200      	movs	r2, #0
 80056aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80056ae:	f002 faef 	bl	8007c90 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80056b2:	1d3a      	adds	r2, r7, #4
 80056b4:	f107 0310 	add.w	r3, r7, #16
 80056b8:	4611      	mov	r1, r2
 80056ba:	4618      	mov	r0, r3
 80056bc:	f001 f896 	bl	80067ec <xTaskCheckForTimeOut>
 80056c0:	4603      	mov	r3, r0
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d123      	bne.n	800570e <xQueueReceive+0x19e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80056c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80056c8:	f000 f9cf 	bl	8005a6a <prvIsQueueEmpty>
 80056cc:	4603      	mov	r3, r0
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d017      	beq.n	8005702 <xQueueReceive+0x192>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80056d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056d4:	3324      	adds	r3, #36	@ 0x24
 80056d6:	687a      	ldr	r2, [r7, #4]
 80056d8:	4611      	mov	r1, r2
 80056da:	4618      	mov	r0, r3
 80056dc:	f000 ff2c 	bl	8006538 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80056e0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80056e2:	f000 f970 	bl	80059c6 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80056e6:	f000 fc9b 	bl	8006020 <xTaskResumeAll>
 80056ea:	4603      	mov	r3, r0
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d189      	bne.n	8005604 <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 80056f0:	4b0f      	ldr	r3, [pc, #60]	@ (8005730 <xQueueReceive+0x1c0>)
 80056f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80056f6:	601a      	str	r2, [r3, #0]
 80056f8:	f3bf 8f4f 	dsb	sy
 80056fc:	f3bf 8f6f 	isb	sy
 8005700:	e780      	b.n	8005604 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8005702:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005704:	f000 f95f 	bl	80059c6 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8005708:	f000 fc8a 	bl	8006020 <xTaskResumeAll>
 800570c:	e77a      	b.n	8005604 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800570e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005710:	f000 f959 	bl	80059c6 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8005714:	f000 fc84 	bl	8006020 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005718:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800571a:	f000 f9a6 	bl	8005a6a <prvIsQueueEmpty>
 800571e:	4603      	mov	r3, r0
 8005720:	2b00      	cmp	r3, #0
 8005722:	f43f af6f 	beq.w	8005604 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8005726:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8005728:	4618      	mov	r0, r3
 800572a:	3730      	adds	r7, #48	@ 0x30
 800572c:	46bd      	mov	sp, r7
 800572e:	bd80      	pop	{r7, pc}
 8005730:	e000ed04 	.word	0xe000ed04

08005734 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b090      	sub	sp, #64	@ 0x40
 8005738:	af00      	add	r7, sp, #0
 800573a:	60f8      	str	r0, [r7, #12]
 800573c:	60b9      	str	r1, [r7, #8]
 800573e:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	63bb      	str	r3, [r7, #56]	@ 0x38

    configASSERT( pxQueue );
 8005744:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005746:	2b00      	cmp	r3, #0
 8005748:	d10b      	bne.n	8005762 <xQueueReceiveFromISR+0x2e>
        __asm volatile
 800574a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800574e:	f383 8811 	msr	BASEPRI, r3
 8005752:	f3bf 8f6f 	isb	sy
 8005756:	f3bf 8f4f 	dsb	sy
 800575a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 800575c:	bf00      	nop
 800575e:	bf00      	nop
 8005760:	e7fd      	b.n	800575e <xQueueReceiveFromISR+0x2a>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d103      	bne.n	8005770 <xQueueReceiveFromISR+0x3c>
 8005768:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800576a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800576c:	2b00      	cmp	r3, #0
 800576e:	d101      	bne.n	8005774 <xQueueReceiveFromISR+0x40>
 8005770:	2301      	movs	r3, #1
 8005772:	e000      	b.n	8005776 <xQueueReceiveFromISR+0x42>
 8005774:	2300      	movs	r3, #0
 8005776:	2b00      	cmp	r3, #0
 8005778:	d10b      	bne.n	8005792 <xQueueReceiveFromISR+0x5e>
        __asm volatile
 800577a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800577e:	f383 8811 	msr	BASEPRI, r3
 8005782:	f3bf 8f6f 	isb	sy
 8005786:	f3bf 8f4f 	dsb	sy
 800578a:	623b      	str	r3, [r7, #32]
    }
 800578c:	bf00      	nop
 800578e:	bf00      	nop
 8005790:	e7fd      	b.n	800578e <xQueueReceiveFromISR+0x5a>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005792:	f002 fb33 	bl	8007dfc <vPortValidateInterruptPriority>
        __asm volatile
 8005796:	f3ef 8211 	mrs	r2, BASEPRI
 800579a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800579e:	f383 8811 	msr	BASEPRI, r3
 80057a2:	f3bf 8f6f 	isb	sy
 80057a6:	f3bf 8f4f 	dsb	sy
 80057aa:	61fa      	str	r2, [r7, #28]
 80057ac:	61bb      	str	r3, [r7, #24]
        return ulOriginalBASEPRI;
 80057ae:	69fb      	ldr	r3, [r7, #28]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80057b0:	637b      	str	r3, [r7, #52]	@ 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80057b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057b6:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80057b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d047      	beq.n	800584e <xQueueReceiveFromISR+0x11a>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 80057be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057c0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80057c4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 80057c8:	68b9      	ldr	r1, [r7, #8]
 80057ca:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80057cc:	f000 f8d5 	bl	800597a <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80057d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057d2:	1e5a      	subs	r2, r3, #1
 80057d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057d6:	639a      	str	r2, [r3, #56]	@ 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 80057d8:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80057dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057e0:	d112      	bne.n	8005808 <xQueueReceiveFromISR+0xd4>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80057e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057e4:	691b      	ldr	r3, [r3, #16]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d02e      	beq.n	8005848 <xQueueReceiveFromISR+0x114>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80057ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057ec:	3310      	adds	r3, #16
 80057ee:	4618      	mov	r0, r3
 80057f0:	f000 ff0e 	bl	8006610 <xTaskRemoveFromEventList>
 80057f4:	4603      	mov	r3, r0
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d026      	beq.n	8005848 <xQueueReceiveFromISR+0x114>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d023      	beq.n	8005848 <xQueueReceiveFromISR+0x114>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2201      	movs	r2, #1
 8005804:	601a      	str	r2, [r3, #0]
 8005806:	e01f      	b.n	8005848 <xQueueReceiveFromISR+0x114>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                prvIncrementQueueRxLock( pxQueue, cRxLock );
 8005808:	f000 fd16 	bl	8006238 <uxTaskGetNumberOfTasks>
 800580c:	62b8      	str	r0, [r7, #40]	@ 0x28
 800580e:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8005812:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005814:	429a      	cmp	r2, r3
 8005816:	d917      	bls.n	8005848 <xQueueReceiveFromISR+0x114>
 8005818:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800581c:	2b7f      	cmp	r3, #127	@ 0x7f
 800581e:	d10b      	bne.n	8005838 <xQueueReceiveFromISR+0x104>
        __asm volatile
 8005820:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005824:	f383 8811 	msr	BASEPRI, r3
 8005828:	f3bf 8f6f 	isb	sy
 800582c:	f3bf 8f4f 	dsb	sy
 8005830:	617b      	str	r3, [r7, #20]
    }
 8005832:	bf00      	nop
 8005834:	bf00      	nop
 8005836:	e7fd      	b.n	8005834 <xQueueReceiveFromISR+0x100>
 8005838:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800583c:	3301      	adds	r3, #1
 800583e:	b2db      	uxtb	r3, r3
 8005840:	b25a      	sxtb	r2, r3
 8005842:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005844:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            }

            xReturn = pdPASS;
 8005848:	2301      	movs	r3, #1
 800584a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800584c:	e001      	b.n	8005852 <xQueueReceiveFromISR+0x11e>
        }
        else
        {
            xReturn = pdFAIL;
 800584e:	2300      	movs	r3, #0
 8005850:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005852:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005854:	613b      	str	r3, [r7, #16]
        __asm volatile
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	f383 8811 	msr	BASEPRI, r3
    }
 800585c:	bf00      	nop
            traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800585e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005860:	4618      	mov	r0, r3
 8005862:	3740      	adds	r7, #64	@ 0x40
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}

08005868 <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b084      	sub	sp, #16
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    configASSERT( xQueue );
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d10b      	bne.n	800588e <uxQueueMessagesWaiting+0x26>
        __asm volatile
 8005876:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800587a:	f383 8811 	msr	BASEPRI, r3
 800587e:	f3bf 8f6f 	isb	sy
 8005882:	f3bf 8f4f 	dsb	sy
 8005886:	60bb      	str	r3, [r7, #8]
    }
 8005888:	bf00      	nop
 800588a:	bf00      	nop
 800588c:	e7fd      	b.n	800588a <uxQueueMessagesWaiting+0x22>

    taskENTER_CRITICAL();
 800588e:	f002 f9cd 	bl	8007c2c <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005896:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 8005898:	f002 f9fa 	bl	8007c90 <vPortExitCritical>

    return uxReturn;
 800589c:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800589e:	4618      	mov	r0, r3
 80058a0:	3710      	adds	r7, #16
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}

080058a6 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80058a6:	b580      	push	{r7, lr}
 80058a8:	b086      	sub	sp, #24
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	60f8      	str	r0, [r7, #12]
 80058ae:	60b9      	str	r1, [r7, #8]
 80058b0:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80058b2:	2300      	movs	r3, #0
 80058b4:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058ba:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d10d      	bne.n	80058e0 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d14d      	bne.n	8005968 <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	689b      	ldr	r3, [r3, #8]
 80058d0:	4618      	mov	r0, r3
 80058d2:	f001 f8cf 	bl	8006a74 <xTaskPriorityDisinherit>
 80058d6:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2200      	movs	r2, #0
 80058dc:	609a      	str	r2, [r3, #8]
 80058de:	e043      	b.n	8005968 <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d119      	bne.n	800591a <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	6858      	ldr	r0, [r3, #4]
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058ee:	461a      	mov	r2, r3
 80058f0:	68b9      	ldr	r1, [r7, #8]
 80058f2:	f002 fce9 	bl	80082c8 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	685a      	ldr	r2, [r3, #4]
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058fe:	441a      	add	r2, r3
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	685a      	ldr	r2, [r3, #4]
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	689b      	ldr	r3, [r3, #8]
 800590c:	429a      	cmp	r2, r3
 800590e:	d32b      	bcc.n	8005968 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	605a      	str	r2, [r3, #4]
 8005918:	e026      	b.n	8005968 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	68d8      	ldr	r0, [r3, #12]
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005922:	461a      	mov	r2, r3
 8005924:	68b9      	ldr	r1, [r7, #8]
 8005926:	f002 fccf 	bl	80082c8 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	68da      	ldr	r2, [r3, #12]
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005932:	425b      	negs	r3, r3
 8005934:	441a      	add	r2, r3
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	68da      	ldr	r2, [r3, #12]
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	429a      	cmp	r2, r3
 8005944:	d207      	bcs.n	8005956 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	689a      	ldr	r2, [r3, #8]
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800594e:	425b      	negs	r3, r3
 8005950:	441a      	add	r2, r3
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2b02      	cmp	r3, #2
 800595a:	d105      	bne.n	8005968 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d002      	beq.n	8005968 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	3b01      	subs	r3, #1
 8005966:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	1c5a      	adds	r2, r3, #1
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8005970:	697b      	ldr	r3, [r7, #20]
}
 8005972:	4618      	mov	r0, r3
 8005974:	3718      	adds	r7, #24
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}

0800597a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800597a:	b580      	push	{r7, lr}
 800597c:	b082      	sub	sp, #8
 800597e:	af00      	add	r7, sp, #0
 8005980:	6078      	str	r0, [r7, #4]
 8005982:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005988:	2b00      	cmp	r3, #0
 800598a:	d018      	beq.n	80059be <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	68da      	ldr	r2, [r3, #12]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005994:	441a      	add	r2, r3
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	68da      	ldr	r2, [r3, #12]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	429a      	cmp	r2, r3
 80059a4:	d303      	bcc.n	80059ae <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681a      	ldr	r2, [r3, #0]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	68d9      	ldr	r1, [r3, #12]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059b6:	461a      	mov	r2, r3
 80059b8:	6838      	ldr	r0, [r7, #0]
 80059ba:	f002 fc85 	bl	80082c8 <memcpy>
    }
}
 80059be:	bf00      	nop
 80059c0:	3708      	adds	r7, #8
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}

080059c6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80059c6:	b580      	push	{r7, lr}
 80059c8:	b084      	sub	sp, #16
 80059ca:	af00      	add	r7, sp, #0
 80059cc:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80059ce:	f002 f92d 	bl	8007c2c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80059d8:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80059da:	e011      	b.n	8005a00 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d012      	beq.n	8005a0a <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	3324      	adds	r3, #36	@ 0x24
 80059e8:	4618      	mov	r0, r3
 80059ea:	f000 fe11 	bl	8006610 <xTaskRemoveFromEventList>
 80059ee:	4603      	mov	r3, r0
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d001      	beq.n	80059f8 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 80059f4:	f000 ff62 	bl	80068bc <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80059f8:	7bfb      	ldrb	r3, [r7, #15]
 80059fa:	3b01      	subs	r3, #1
 80059fc:	b2db      	uxtb	r3, r3
 80059fe:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8005a00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	dce9      	bgt.n	80059dc <prvUnlockQueue+0x16>
 8005a08:	e000      	b.n	8005a0c <prvUnlockQueue+0x46>
                    break;
 8005a0a:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	22ff      	movs	r2, #255	@ 0xff
 8005a10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8005a14:	f002 f93c 	bl	8007c90 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8005a18:	f002 f908 	bl	8007c2c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005a22:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8005a24:	e011      	b.n	8005a4a <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	691b      	ldr	r3, [r3, #16]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d012      	beq.n	8005a54 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	3310      	adds	r3, #16
 8005a32:	4618      	mov	r0, r3
 8005a34:	f000 fdec 	bl	8006610 <xTaskRemoveFromEventList>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d001      	beq.n	8005a42 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8005a3e:	f000 ff3d 	bl	80068bc <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8005a42:	7bbb      	ldrb	r3, [r7, #14]
 8005a44:	3b01      	subs	r3, #1
 8005a46:	b2db      	uxtb	r3, r3
 8005a48:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8005a4a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	dce9      	bgt.n	8005a26 <prvUnlockQueue+0x60>
 8005a52:	e000      	b.n	8005a56 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8005a54:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	22ff      	movs	r2, #255	@ 0xff
 8005a5a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8005a5e:	f002 f917 	bl	8007c90 <vPortExitCritical>
}
 8005a62:	bf00      	nop
 8005a64:	3710      	adds	r7, #16
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}

08005a6a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8005a6a:	b580      	push	{r7, lr}
 8005a6c:	b084      	sub	sp, #16
 8005a6e:	af00      	add	r7, sp, #0
 8005a70:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8005a72:	f002 f8db 	bl	8007c2c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d102      	bne.n	8005a84 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	60fb      	str	r3, [r7, #12]
 8005a82:	e001      	b.n	8005a88 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8005a84:	2300      	movs	r3, #0
 8005a86:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8005a88:	f002 f902 	bl	8007c90 <vPortExitCritical>

    return xReturn;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3710      	adds	r7, #16
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}

08005a96 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8005a96:	b580      	push	{r7, lr}
 8005a98:	b084      	sub	sp, #16
 8005a9a:	af00      	add	r7, sp, #0
 8005a9c:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8005a9e:	f002 f8c5 	bl	8007c2c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005aaa:	429a      	cmp	r2, r3
 8005aac:	d102      	bne.n	8005ab4 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	60fb      	str	r3, [r7, #12]
 8005ab2:	e001      	b.n	8005ab8 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8005ab8:	f002 f8ea 	bl	8007c90 <vPortExitCritical>

    return xReturn;
 8005abc:	68fb      	ldr	r3, [r7, #12]
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	3710      	adds	r7, #16
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}

08005ac6 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 8005ac6:	b480      	push	{r7}
 8005ac8:	b087      	sub	sp, #28
 8005aca:	af00      	add	r7, sp, #0
 8005acc:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d10b      	bne.n	8005af0 <xQueueIsQueueFullFromISR+0x2a>
        __asm volatile
 8005ad8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005adc:	f383 8811 	msr	BASEPRI, r3
 8005ae0:	f3bf 8f6f 	isb	sy
 8005ae4:	f3bf 8f4f 	dsb	sy
 8005ae8:	60fb      	str	r3, [r7, #12]
    }
 8005aea:	bf00      	nop
 8005aec:	bf00      	nop
 8005aee:	e7fd      	b.n	8005aec <xQueueIsQueueFullFromISR+0x26>

    if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005af8:	429a      	cmp	r2, r3
 8005afa:	d102      	bne.n	8005b02 <xQueueIsQueueFullFromISR+0x3c>
    {
        xReturn = pdTRUE;
 8005afc:	2301      	movs	r3, #1
 8005afe:	617b      	str	r3, [r7, #20]
 8005b00:	e001      	b.n	8005b06 <xQueueIsQueueFullFromISR+0x40>
    }
    else
    {
        xReturn = pdFALSE;
 8005b02:	2300      	movs	r3, #0
 8005b04:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8005b06:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8005b08:	4618      	mov	r0, r3
 8005b0a:	371c      	adds	r7, #28
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b12:	4770      	bx	lr

08005b14 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8005b14:	b480      	push	{r7}
 8005b16:	b087      	sub	sp, #28
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
 8005b1c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d10b      	bne.n	8005b40 <vQueueAddToRegistry+0x2c>
        __asm volatile
 8005b28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b2c:	f383 8811 	msr	BASEPRI, r3
 8005b30:	f3bf 8f6f 	isb	sy
 8005b34:	f3bf 8f4f 	dsb	sy
 8005b38:	60fb      	str	r3, [r7, #12]
    }
 8005b3a:	bf00      	nop
 8005b3c:	bf00      	nop
 8005b3e:	e7fd      	b.n	8005b3c <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d024      	beq.n	8005b90 <vQueueAddToRegistry+0x7c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005b46:	2300      	movs	r3, #0
 8005b48:	617b      	str	r3, [r7, #20]
 8005b4a:	e01e      	b.n	8005b8a <vQueueAddToRegistry+0x76>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8005b4c:	4a18      	ldr	r2, [pc, #96]	@ (8005bb0 <vQueueAddToRegistry+0x9c>)
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	00db      	lsls	r3, r3, #3
 8005b52:	4413      	add	r3, r2
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	687a      	ldr	r2, [r7, #4]
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	d105      	bne.n	8005b68 <vQueueAddToRegistry+0x54>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	00db      	lsls	r3, r3, #3
 8005b60:	4a13      	ldr	r2, [pc, #76]	@ (8005bb0 <vQueueAddToRegistry+0x9c>)
 8005b62:	4413      	add	r3, r2
 8005b64:	613b      	str	r3, [r7, #16]
                    break;
 8005b66:	e013      	b.n	8005b90 <vQueueAddToRegistry+0x7c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d10a      	bne.n	8005b84 <vQueueAddToRegistry+0x70>
 8005b6e:	4a10      	ldr	r2, [pc, #64]	@ (8005bb0 <vQueueAddToRegistry+0x9c>)
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d104      	bne.n	8005b84 <vQueueAddToRegistry+0x70>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	00db      	lsls	r3, r3, #3
 8005b7e:	4a0c      	ldr	r2, [pc, #48]	@ (8005bb0 <vQueueAddToRegistry+0x9c>)
 8005b80:	4413      	add	r3, r2
 8005b82:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	3301      	adds	r3, #1
 8005b88:	617b      	str	r3, [r7, #20]
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	2b07      	cmp	r3, #7
 8005b8e:	d9dd      	bls.n	8005b4c <vQueueAddToRegistry+0x38>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d005      	beq.n	8005ba2 <vQueueAddToRegistry+0x8e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	683a      	ldr	r2, [r7, #0]
 8005b9a:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	687a      	ldr	r2, [r7, #4]
 8005ba0:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8005ba2:	bf00      	nop
 8005ba4:	371c      	adds	r7, #28
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bac:	4770      	bx	lr
 8005bae:	bf00      	nop
 8005bb0:	200001a0 	.word	0x200001a0

08005bb4 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b086      	sub	sp, #24
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	60f8      	str	r0, [r7, #12]
 8005bbc:	60b9      	str	r1, [r7, #8]
 8005bbe:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8005bc4:	f002 f832 	bl	8007c2c <vPortEnterCritical>
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005bce:	b25b      	sxtb	r3, r3
 8005bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bd4:	d103      	bne.n	8005bde <vQueueWaitForMessageRestricted+0x2a>
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005be4:	b25b      	sxtb	r3, r3
 8005be6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bea:	d103      	bne.n	8005bf4 <vQueueWaitForMessageRestricted+0x40>
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005bf4:	f002 f84c 	bl	8007c90 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d106      	bne.n	8005c0e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	3324      	adds	r3, #36	@ 0x24
 8005c04:	687a      	ldr	r2, [r7, #4]
 8005c06:	68b9      	ldr	r1, [r7, #8]
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f000 fcbb 	bl	8006584 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8005c0e:	6978      	ldr	r0, [r7, #20]
 8005c10:	f7ff fed9 	bl	80059c6 <prvUnlockQueue>
    }
 8005c14:	bf00      	nop
 8005c16:	3718      	adds	r7, #24
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bd80      	pop	{r7, pc}

08005c1c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b08c      	sub	sp, #48	@ 0x30
 8005c20:	af04      	add	r7, sp, #16
 8005c22:	60f8      	str	r0, [r7, #12]
 8005c24:	60b9      	str	r1, [r7, #8]
 8005c26:	603b      	str	r3, [r7, #0]
 8005c28:	4613      	mov	r3, r2
 8005c2a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005c2c:	88fb      	ldrh	r3, [r7, #6]
 8005c2e:	009b      	lsls	r3, r3, #2
 8005c30:	4618      	mov	r0, r3
 8005c32:	f002 f925 	bl	8007e80 <pvPortMalloc>
 8005c36:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d013      	beq.n	8005c66 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005c3e:	2058      	movs	r0, #88	@ 0x58
 8005c40:	f002 f91e 	bl	8007e80 <pvPortMalloc>
 8005c44:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8005c46:	69fb      	ldr	r3, [r7, #28]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d008      	beq.n	8005c5e <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8005c4c:	2258      	movs	r2, #88	@ 0x58
 8005c4e:	2100      	movs	r1, #0
 8005c50:	69f8      	ldr	r0, [r7, #28]
 8005c52:	f002 fb05 	bl	8008260 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8005c56:	69fb      	ldr	r3, [r7, #28]
 8005c58:	697a      	ldr	r2, [r7, #20]
 8005c5a:	631a      	str	r2, [r3, #48]	@ 0x30
 8005c5c:	e005      	b.n	8005c6a <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8005c5e:	6978      	ldr	r0, [r7, #20]
 8005c60:	f002 f9ca 	bl	8007ff8 <vPortFree>
 8005c64:	e001      	b.n	8005c6a <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8005c66:	2300      	movs	r3, #0
 8005c68:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8005c6a:	69fb      	ldr	r3, [r7, #28]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d013      	beq.n	8005c98 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005c70:	88fa      	ldrh	r2, [r7, #6]
 8005c72:	2300      	movs	r3, #0
 8005c74:	9303      	str	r3, [sp, #12]
 8005c76:	69fb      	ldr	r3, [r7, #28]
 8005c78:	9302      	str	r3, [sp, #8]
 8005c7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c7c:	9301      	str	r3, [sp, #4]
 8005c7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c80:	9300      	str	r3, [sp, #0]
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	68b9      	ldr	r1, [r7, #8]
 8005c86:	68f8      	ldr	r0, [r7, #12]
 8005c88:	f000 f80e 	bl	8005ca8 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8005c8c:	69f8      	ldr	r0, [r7, #28]
 8005c8e:	f000 f89b 	bl	8005dc8 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8005c92:	2301      	movs	r3, #1
 8005c94:	61bb      	str	r3, [r7, #24]
 8005c96:	e002      	b.n	8005c9e <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005c98:	f04f 33ff 	mov.w	r3, #4294967295
 8005c9c:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8005c9e:	69bb      	ldr	r3, [r7, #24]
    }
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	3720      	adds	r7, #32
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd80      	pop	{r7, pc}

08005ca8 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b088      	sub	sp, #32
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	60f8      	str	r0, [r7, #12]
 8005cb0:	60b9      	str	r1, [r7, #8]
 8005cb2:	607a      	str	r2, [r7, #4]
 8005cb4:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005cb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cb8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	009b      	lsls	r3, r3, #2
 8005cbe:	461a      	mov	r2, r3
 8005cc0:	21a5      	movs	r1, #165	@ 0xa5
 8005cc2:	f002 facd 	bl	8008260 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005cc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cc8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005cd0:	3b01      	subs	r3, #1
 8005cd2:	009b      	lsls	r3, r3, #2
 8005cd4:	4413      	add	r3, r2
 8005cd6:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005cd8:	69bb      	ldr	r3, [r7, #24]
 8005cda:	f023 0307 	bic.w	r3, r3, #7
 8005cde:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005ce0:	69bb      	ldr	r3, [r7, #24]
 8005ce2:	f003 0307 	and.w	r3, r3, #7
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d00b      	beq.n	8005d02 <prvInitialiseNewTask+0x5a>
        __asm volatile
 8005cea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cee:	f383 8811 	msr	BASEPRI, r3
 8005cf2:	f3bf 8f6f 	isb	sy
 8005cf6:	f3bf 8f4f 	dsb	sy
 8005cfa:	617b      	str	r3, [r7, #20]
    }
 8005cfc:	bf00      	nop
 8005cfe:	bf00      	nop
 8005d00:	e7fd      	b.n	8005cfe <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d01e      	beq.n	8005d46 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005d08:	2300      	movs	r3, #0
 8005d0a:	61fb      	str	r3, [r7, #28]
 8005d0c:	e012      	b.n	8005d34 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005d0e:	68ba      	ldr	r2, [r7, #8]
 8005d10:	69fb      	ldr	r3, [r7, #28]
 8005d12:	4413      	add	r3, r2
 8005d14:	7819      	ldrb	r1, [r3, #0]
 8005d16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d18:	69fb      	ldr	r3, [r7, #28]
 8005d1a:	4413      	add	r3, r2
 8005d1c:	3334      	adds	r3, #52	@ 0x34
 8005d1e:	460a      	mov	r2, r1
 8005d20:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8005d22:	68ba      	ldr	r2, [r7, #8]
 8005d24:	69fb      	ldr	r3, [r7, #28]
 8005d26:	4413      	add	r3, r2
 8005d28:	781b      	ldrb	r3, [r3, #0]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d006      	beq.n	8005d3c <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005d2e:	69fb      	ldr	r3, [r7, #28]
 8005d30:	3301      	adds	r3, #1
 8005d32:	61fb      	str	r3, [r7, #28]
 8005d34:	69fb      	ldr	r3, [r7, #28]
 8005d36:	2b09      	cmp	r3, #9
 8005d38:	d9e9      	bls.n	8005d0e <prvInitialiseNewTask+0x66>
 8005d3a:	e000      	b.n	8005d3e <prvInitialiseNewTask+0x96>
            {
                break;
 8005d3c:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005d3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d40:	2200      	movs	r2, #0
 8005d42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8005d46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d48:	2b04      	cmp	r3, #4
 8005d4a:	d90b      	bls.n	8005d64 <prvInitialiseNewTask+0xbc>
        __asm volatile
 8005d4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d50:	f383 8811 	msr	BASEPRI, r3
 8005d54:	f3bf 8f6f 	isb	sy
 8005d58:	f3bf 8f4f 	dsb	sy
 8005d5c:	613b      	str	r3, [r7, #16]
    }
 8005d5e:	bf00      	nop
 8005d60:	bf00      	nop
 8005d62:	e7fd      	b.n	8005d60 <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005d64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d66:	2b04      	cmp	r3, #4
 8005d68:	d901      	bls.n	8005d6e <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005d6a:	2304      	movs	r3, #4
 8005d6c:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8005d6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d70:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005d72:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8005d74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d76:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005d78:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005d7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d7c:	3304      	adds	r3, #4
 8005d7e:	4618      	mov	r0, r3
 8005d80:	f7ff f8ca 	bl	8004f18 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005d84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d86:	3318      	adds	r3, #24
 8005d88:	4618      	mov	r0, r3
 8005d8a:	f7ff f8c5 	bl	8004f18 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005d8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d92:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d96:	f1c3 0205 	rsb	r2, r3, #5
 8005d9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d9c:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005d9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005da0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005da2:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005da4:	683a      	ldr	r2, [r7, #0]
 8005da6:	68f9      	ldr	r1, [r7, #12]
 8005da8:	69b8      	ldr	r0, [r7, #24]
 8005daa:	f001 fe0f 	bl	80079cc <pxPortInitialiseStack>
 8005dae:	4602      	mov	r2, r0
 8005db0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005db2:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8005db4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d002      	beq.n	8005dc0 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005dba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dbc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005dbe:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005dc0:	bf00      	nop
 8005dc2:	3720      	adds	r7, #32
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}

08005dc8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b084      	sub	sp, #16
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8005dd0:	f001 ff2c 	bl	8007c2c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8005dd4:	4b40      	ldr	r3, [pc, #256]	@ (8005ed8 <prvAddNewTaskToReadyList+0x110>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	3301      	adds	r3, #1
 8005dda:	4a3f      	ldr	r2, [pc, #252]	@ (8005ed8 <prvAddNewTaskToReadyList+0x110>)
 8005ddc:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8005dde:	4b3f      	ldr	r3, [pc, #252]	@ (8005edc <prvAddNewTaskToReadyList+0x114>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d109      	bne.n	8005dfa <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8005de6:	4a3d      	ldr	r2, [pc, #244]	@ (8005edc <prvAddNewTaskToReadyList+0x114>)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005dec:	4b3a      	ldr	r3, [pc, #232]	@ (8005ed8 <prvAddNewTaskToReadyList+0x110>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	2b01      	cmp	r3, #1
 8005df2:	d110      	bne.n	8005e16 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8005df4:	f000 fd86 	bl	8006904 <prvInitialiseTaskLists>
 8005df8:	e00d      	b.n	8005e16 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8005dfa:	4b39      	ldr	r3, [pc, #228]	@ (8005ee0 <prvAddNewTaskToReadyList+0x118>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d109      	bne.n	8005e16 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005e02:	4b36      	ldr	r3, [pc, #216]	@ (8005edc <prvAddNewTaskToReadyList+0x114>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e0c:	429a      	cmp	r2, r3
 8005e0e:	d802      	bhi.n	8005e16 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8005e10:	4a32      	ldr	r2, [pc, #200]	@ (8005edc <prvAddNewTaskToReadyList+0x114>)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8005e16:	4b33      	ldr	r3, [pc, #204]	@ (8005ee4 <prvAddNewTaskToReadyList+0x11c>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	3301      	adds	r3, #1
 8005e1c:	4a31      	ldr	r2, [pc, #196]	@ (8005ee4 <prvAddNewTaskToReadyList+0x11c>)
 8005e1e:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005e20:	4b30      	ldr	r3, [pc, #192]	@ (8005ee4 <prvAddNewTaskToReadyList+0x11c>)
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e2c:	2201      	movs	r2, #1
 8005e2e:	409a      	lsls	r2, r3
 8005e30:	4b2d      	ldr	r3, [pc, #180]	@ (8005ee8 <prvAddNewTaskToReadyList+0x120>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4313      	orrs	r3, r2
 8005e36:	4a2c      	ldr	r2, [pc, #176]	@ (8005ee8 <prvAddNewTaskToReadyList+0x120>)
 8005e38:	6013      	str	r3, [r2, #0]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e3e:	492b      	ldr	r1, [pc, #172]	@ (8005eec <prvAddNewTaskToReadyList+0x124>)
 8005e40:	4613      	mov	r3, r2
 8005e42:	009b      	lsls	r3, r3, #2
 8005e44:	4413      	add	r3, r2
 8005e46:	009b      	lsls	r3, r3, #2
 8005e48:	440b      	add	r3, r1
 8005e4a:	3304      	adds	r3, #4
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	60fb      	str	r3, [r7, #12]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	68fa      	ldr	r2, [r7, #12]
 8005e54:	609a      	str	r2, [r3, #8]
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	689a      	ldr	r2, [r3, #8]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	60da      	str	r2, [r3, #12]
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	689b      	ldr	r3, [r3, #8]
 8005e62:	687a      	ldr	r2, [r7, #4]
 8005e64:	3204      	adds	r2, #4
 8005e66:	605a      	str	r2, [r3, #4]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	1d1a      	adds	r2, r3, #4
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	609a      	str	r2, [r3, #8]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e74:	4613      	mov	r3, r2
 8005e76:	009b      	lsls	r3, r3, #2
 8005e78:	4413      	add	r3, r2
 8005e7a:	009b      	lsls	r3, r3, #2
 8005e7c:	4a1b      	ldr	r2, [pc, #108]	@ (8005eec <prvAddNewTaskToReadyList+0x124>)
 8005e7e:	441a      	add	r2, r3
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	615a      	str	r2, [r3, #20]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e88:	4918      	ldr	r1, [pc, #96]	@ (8005eec <prvAddNewTaskToReadyList+0x124>)
 8005e8a:	4613      	mov	r3, r2
 8005e8c:	009b      	lsls	r3, r3, #2
 8005e8e:	4413      	add	r3, r2
 8005e90:	009b      	lsls	r3, r3, #2
 8005e92:	440b      	add	r3, r1
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	1c59      	adds	r1, r3, #1
 8005e98:	4814      	ldr	r0, [pc, #80]	@ (8005eec <prvAddNewTaskToReadyList+0x124>)
 8005e9a:	4613      	mov	r3, r2
 8005e9c:	009b      	lsls	r3, r3, #2
 8005e9e:	4413      	add	r3, r2
 8005ea0:	009b      	lsls	r3, r3, #2
 8005ea2:	4403      	add	r3, r0
 8005ea4:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8005ea6:	f001 fef3 	bl	8007c90 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8005eaa:	4b0d      	ldr	r3, [pc, #52]	@ (8005ee0 <prvAddNewTaskToReadyList+0x118>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d00e      	beq.n	8005ed0 <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005eb2:	4b0a      	ldr	r3, [pc, #40]	@ (8005edc <prvAddNewTaskToReadyList+0x114>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ebc:	429a      	cmp	r2, r3
 8005ebe:	d207      	bcs.n	8005ed0 <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8005ec0:	4b0b      	ldr	r3, [pc, #44]	@ (8005ef0 <prvAddNewTaskToReadyList+0x128>)
 8005ec2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ec6:	601a      	str	r2, [r3, #0]
 8005ec8:	f3bf 8f4f 	dsb	sy
 8005ecc:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005ed0:	bf00      	nop
 8005ed2:	3710      	adds	r7, #16
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}
 8005ed8:	200002b8 	.word	0x200002b8
 8005edc:	200001e0 	.word	0x200001e0
 8005ee0:	200002c4 	.word	0x200002c4
 8005ee4:	200002d4 	.word	0x200002d4
 8005ee8:	200002c0 	.word	0x200002c0
 8005eec:	200001e4 	.word	0x200001e4
 8005ef0:	e000ed04 	.word	0xe000ed04

08005ef4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b084      	sub	sp, #16
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8005efc:	2300      	movs	r3, #0
 8005efe:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d018      	beq.n	8005f38 <vTaskDelay+0x44>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8005f06:	4b14      	ldr	r3, [pc, #80]	@ (8005f58 <vTaskDelay+0x64>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d00b      	beq.n	8005f26 <vTaskDelay+0x32>
        __asm volatile
 8005f0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f12:	f383 8811 	msr	BASEPRI, r3
 8005f16:	f3bf 8f6f 	isb	sy
 8005f1a:	f3bf 8f4f 	dsb	sy
 8005f1e:	60bb      	str	r3, [r7, #8]
    }
 8005f20:	bf00      	nop
 8005f22:	bf00      	nop
 8005f24:	e7fd      	b.n	8005f22 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8005f26:	f000 f86d 	bl	8006004 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005f2a:	2100      	movs	r1, #0
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f001 f94d 	bl	80071cc <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8005f32:	f000 f875 	bl	8006020 <xTaskResumeAll>
 8005f36:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d107      	bne.n	8005f4e <vTaskDelay+0x5a>
        {
            portYIELD_WITHIN_API();
 8005f3e:	4b07      	ldr	r3, [pc, #28]	@ (8005f5c <vTaskDelay+0x68>)
 8005f40:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f44:	601a      	str	r2, [r3, #0]
 8005f46:	f3bf 8f4f 	dsb	sy
 8005f4a:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8005f4e:	bf00      	nop
 8005f50:	3710      	adds	r7, #16
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}
 8005f56:	bf00      	nop
 8005f58:	200002e0 	.word	0x200002e0
 8005f5c:	e000ed04 	.word	0xe000ed04

08005f60 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b086      	sub	sp, #24
 8005f64:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8005f66:	4b20      	ldr	r3, [pc, #128]	@ (8005fe8 <vTaskStartScheduler+0x88>)
 8005f68:	9301      	str	r3, [sp, #4]
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	9300      	str	r3, [sp, #0]
 8005f6e:	2300      	movs	r3, #0
 8005f70:	2282      	movs	r2, #130	@ 0x82
 8005f72:	491e      	ldr	r1, [pc, #120]	@ (8005fec <vTaskStartScheduler+0x8c>)
 8005f74:	481e      	ldr	r0, [pc, #120]	@ (8005ff0 <vTaskStartScheduler+0x90>)
 8005f76:	f7ff fe51 	bl	8005c1c <xTaskCreate>
 8005f7a:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	2b01      	cmp	r3, #1
 8005f80:	d102      	bne.n	8005f88 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8005f82:	f001 f9a3 	bl	80072cc <xTimerCreateTimerTask>
 8005f86:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2b01      	cmp	r3, #1
 8005f8c:	d116      	bne.n	8005fbc <vTaskStartScheduler+0x5c>
        __asm volatile
 8005f8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f92:	f383 8811 	msr	BASEPRI, r3
 8005f96:	f3bf 8f6f 	isb	sy
 8005f9a:	f3bf 8f4f 	dsb	sy
 8005f9e:	60bb      	str	r3, [r7, #8]
    }
 8005fa0:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8005fa2:	4b14      	ldr	r3, [pc, #80]	@ (8005ff4 <vTaskStartScheduler+0x94>)
 8005fa4:	f04f 32ff 	mov.w	r2, #4294967295
 8005fa8:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8005faa:	4b13      	ldr	r3, [pc, #76]	@ (8005ff8 <vTaskStartScheduler+0x98>)
 8005fac:	2201      	movs	r2, #1
 8005fae:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005fb0:	4b12      	ldr	r3, [pc, #72]	@ (8005ffc <vTaskStartScheduler+0x9c>)
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8005fb6:	f001 fd95 	bl	8007ae4 <xPortStartScheduler>
 8005fba:	e00f      	b.n	8005fdc <vTaskStartScheduler+0x7c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fc2:	d10b      	bne.n	8005fdc <vTaskStartScheduler+0x7c>
        __asm volatile
 8005fc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fc8:	f383 8811 	msr	BASEPRI, r3
 8005fcc:	f3bf 8f6f 	isb	sy
 8005fd0:	f3bf 8f4f 	dsb	sy
 8005fd4:	607b      	str	r3, [r7, #4]
    }
 8005fd6:	bf00      	nop
 8005fd8:	bf00      	nop
 8005fda:	e7fd      	b.n	8005fd8 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8005fdc:	4b08      	ldr	r3, [pc, #32]	@ (8006000 <vTaskStartScheduler+0xa0>)
 8005fde:	681b      	ldr	r3, [r3, #0]
}
 8005fe0:	bf00      	nop
 8005fe2:	3710      	adds	r7, #16
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}
 8005fe8:	200002dc 	.word	0x200002dc
 8005fec:	08008f54 	.word	0x08008f54
 8005ff0:	080068d5 	.word	0x080068d5
 8005ff4:	200002d8 	.word	0x200002d8
 8005ff8:	200002c4 	.word	0x200002c4
 8005ffc:	200002bc 	.word	0x200002bc
 8006000:	20000014 	.word	0x20000014

08006004 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006004:	b480      	push	{r7}
 8006006:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8006008:	4b04      	ldr	r3, [pc, #16]	@ (800601c <vTaskSuspendAll+0x18>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	3301      	adds	r3, #1
 800600e:	4a03      	ldr	r2, [pc, #12]	@ (800601c <vTaskSuspendAll+0x18>)
 8006010:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8006012:	bf00      	nop
 8006014:	46bd      	mov	sp, r7
 8006016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601a:	4770      	bx	lr
 800601c:	200002e0 	.word	0x200002e0

08006020 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b088      	sub	sp, #32
 8006024:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8006026:	2300      	movs	r3, #0
 8006028:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 800602a:	2300      	movs	r3, #0
 800602c:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800602e:	4b71      	ldr	r3, [pc, #452]	@ (80061f4 <xTaskResumeAll+0x1d4>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d10b      	bne.n	800604e <xTaskResumeAll+0x2e>
        __asm volatile
 8006036:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800603a:	f383 8811 	msr	BASEPRI, r3
 800603e:	f3bf 8f6f 	isb	sy
 8006042:	f3bf 8f4f 	dsb	sy
 8006046:	607b      	str	r3, [r7, #4]
    }
 8006048:	bf00      	nop
 800604a:	bf00      	nop
 800604c:	e7fd      	b.n	800604a <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800604e:	f001 fded 	bl	8007c2c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8006052:	4b68      	ldr	r3, [pc, #416]	@ (80061f4 <xTaskResumeAll+0x1d4>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	3b01      	subs	r3, #1
 8006058:	4a66      	ldr	r2, [pc, #408]	@ (80061f4 <xTaskResumeAll+0x1d4>)
 800605a:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800605c:	4b65      	ldr	r3, [pc, #404]	@ (80061f4 <xTaskResumeAll+0x1d4>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	2b00      	cmp	r3, #0
 8006062:	f040 80c0 	bne.w	80061e6 <xTaskResumeAll+0x1c6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006066:	4b64      	ldr	r3, [pc, #400]	@ (80061f8 <xTaskResumeAll+0x1d8>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	2b00      	cmp	r3, #0
 800606c:	f000 80bb 	beq.w	80061e6 <xTaskResumeAll+0x1c6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006070:	e08a      	b.n	8006188 <xTaskResumeAll+0x168>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006072:	4b62      	ldr	r3, [pc, #392]	@ (80061fc <xTaskResumeAll+0x1dc>)
 8006074:	68db      	ldr	r3, [r3, #12]
 8006076:	68db      	ldr	r3, [r3, #12]
 8006078:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800607a:	69fb      	ldr	r3, [r7, #28]
 800607c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800607e:	613b      	str	r3, [r7, #16]
 8006080:	69fb      	ldr	r3, [r7, #28]
 8006082:	69db      	ldr	r3, [r3, #28]
 8006084:	69fa      	ldr	r2, [r7, #28]
 8006086:	6a12      	ldr	r2, [r2, #32]
 8006088:	609a      	str	r2, [r3, #8]
 800608a:	69fb      	ldr	r3, [r7, #28]
 800608c:	6a1b      	ldr	r3, [r3, #32]
 800608e:	69fa      	ldr	r2, [r7, #28]
 8006090:	69d2      	ldr	r2, [r2, #28]
 8006092:	605a      	str	r2, [r3, #4]
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	685a      	ldr	r2, [r3, #4]
 8006098:	69fb      	ldr	r3, [r7, #28]
 800609a:	3318      	adds	r3, #24
 800609c:	429a      	cmp	r2, r3
 800609e:	d103      	bne.n	80060a8 <xTaskResumeAll+0x88>
 80060a0:	69fb      	ldr	r3, [r7, #28]
 80060a2:	6a1a      	ldr	r2, [r3, #32]
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	605a      	str	r2, [r3, #4]
 80060a8:	69fb      	ldr	r3, [r7, #28]
 80060aa:	2200      	movs	r2, #0
 80060ac:	629a      	str	r2, [r3, #40]	@ 0x28
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	1e5a      	subs	r2, r3, #1
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80060b8:	69fb      	ldr	r3, [r7, #28]
 80060ba:	695b      	ldr	r3, [r3, #20]
 80060bc:	60fb      	str	r3, [r7, #12]
 80060be:	69fb      	ldr	r3, [r7, #28]
 80060c0:	689b      	ldr	r3, [r3, #8]
 80060c2:	69fa      	ldr	r2, [r7, #28]
 80060c4:	68d2      	ldr	r2, [r2, #12]
 80060c6:	609a      	str	r2, [r3, #8]
 80060c8:	69fb      	ldr	r3, [r7, #28]
 80060ca:	68db      	ldr	r3, [r3, #12]
 80060cc:	69fa      	ldr	r2, [r7, #28]
 80060ce:	6892      	ldr	r2, [r2, #8]
 80060d0:	605a      	str	r2, [r3, #4]
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	685a      	ldr	r2, [r3, #4]
 80060d6:	69fb      	ldr	r3, [r7, #28]
 80060d8:	3304      	adds	r3, #4
 80060da:	429a      	cmp	r2, r3
 80060dc:	d103      	bne.n	80060e6 <xTaskResumeAll+0xc6>
 80060de:	69fb      	ldr	r3, [r7, #28]
 80060e0:	68da      	ldr	r2, [r3, #12]
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	605a      	str	r2, [r3, #4]
 80060e6:	69fb      	ldr	r3, [r7, #28]
 80060e8:	2200      	movs	r2, #0
 80060ea:	615a      	str	r2, [r3, #20]
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	1e5a      	subs	r2, r3, #1
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80060f6:	69fb      	ldr	r3, [r7, #28]
 80060f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060fa:	2201      	movs	r2, #1
 80060fc:	409a      	lsls	r2, r3
 80060fe:	4b40      	ldr	r3, [pc, #256]	@ (8006200 <xTaskResumeAll+0x1e0>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4313      	orrs	r3, r2
 8006104:	4a3e      	ldr	r2, [pc, #248]	@ (8006200 <xTaskResumeAll+0x1e0>)
 8006106:	6013      	str	r3, [r2, #0]
 8006108:	69fb      	ldr	r3, [r7, #28]
 800610a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800610c:	493d      	ldr	r1, [pc, #244]	@ (8006204 <xTaskResumeAll+0x1e4>)
 800610e:	4613      	mov	r3, r2
 8006110:	009b      	lsls	r3, r3, #2
 8006112:	4413      	add	r3, r2
 8006114:	009b      	lsls	r3, r3, #2
 8006116:	440b      	add	r3, r1
 8006118:	3304      	adds	r3, #4
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	60bb      	str	r3, [r7, #8]
 800611e:	69fb      	ldr	r3, [r7, #28]
 8006120:	68ba      	ldr	r2, [r7, #8]
 8006122:	609a      	str	r2, [r3, #8]
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	689a      	ldr	r2, [r3, #8]
 8006128:	69fb      	ldr	r3, [r7, #28]
 800612a:	60da      	str	r2, [r3, #12]
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	689b      	ldr	r3, [r3, #8]
 8006130:	69fa      	ldr	r2, [r7, #28]
 8006132:	3204      	adds	r2, #4
 8006134:	605a      	str	r2, [r3, #4]
 8006136:	69fb      	ldr	r3, [r7, #28]
 8006138:	1d1a      	adds	r2, r3, #4
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	609a      	str	r2, [r3, #8]
 800613e:	69fb      	ldr	r3, [r7, #28]
 8006140:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006142:	4613      	mov	r3, r2
 8006144:	009b      	lsls	r3, r3, #2
 8006146:	4413      	add	r3, r2
 8006148:	009b      	lsls	r3, r3, #2
 800614a:	4a2e      	ldr	r2, [pc, #184]	@ (8006204 <xTaskResumeAll+0x1e4>)
 800614c:	441a      	add	r2, r3
 800614e:	69fb      	ldr	r3, [r7, #28]
 8006150:	615a      	str	r2, [r3, #20]
 8006152:	69fb      	ldr	r3, [r7, #28]
 8006154:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006156:	492b      	ldr	r1, [pc, #172]	@ (8006204 <xTaskResumeAll+0x1e4>)
 8006158:	4613      	mov	r3, r2
 800615a:	009b      	lsls	r3, r3, #2
 800615c:	4413      	add	r3, r2
 800615e:	009b      	lsls	r3, r3, #2
 8006160:	440b      	add	r3, r1
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	1c59      	adds	r1, r3, #1
 8006166:	4827      	ldr	r0, [pc, #156]	@ (8006204 <xTaskResumeAll+0x1e4>)
 8006168:	4613      	mov	r3, r2
 800616a:	009b      	lsls	r3, r3, #2
 800616c:	4413      	add	r3, r2
 800616e:	009b      	lsls	r3, r3, #2
 8006170:	4403      	add	r3, r0
 8006172:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006174:	69fb      	ldr	r3, [r7, #28]
 8006176:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006178:	4b23      	ldr	r3, [pc, #140]	@ (8006208 <xTaskResumeAll+0x1e8>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800617e:	429a      	cmp	r2, r3
 8006180:	d302      	bcc.n	8006188 <xTaskResumeAll+0x168>
                    {
                        xYieldPending = pdTRUE;
 8006182:	4b22      	ldr	r3, [pc, #136]	@ (800620c <xTaskResumeAll+0x1ec>)
 8006184:	2201      	movs	r2, #1
 8006186:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006188:	4b1c      	ldr	r3, [pc, #112]	@ (80061fc <xTaskResumeAll+0x1dc>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	2b00      	cmp	r3, #0
 800618e:	f47f af70 	bne.w	8006072 <xTaskResumeAll+0x52>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8006192:	69fb      	ldr	r3, [r7, #28]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d001      	beq.n	800619c <xTaskResumeAll+0x17c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8006198:	f000 fc32 	bl	8006a00 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800619c:	4b1c      	ldr	r3, [pc, #112]	@ (8006210 <xTaskResumeAll+0x1f0>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d010      	beq.n	80061ca <xTaskResumeAll+0x1aa>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80061a8:	f000 f852 	bl	8006250 <xTaskIncrementTick>
 80061ac:	4603      	mov	r3, r0
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d002      	beq.n	80061b8 <xTaskResumeAll+0x198>
                            {
                                xYieldPending = pdTRUE;
 80061b2:	4b16      	ldr	r3, [pc, #88]	@ (800620c <xTaskResumeAll+0x1ec>)
 80061b4:	2201      	movs	r2, #1
 80061b6:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	3b01      	subs	r3, #1
 80061bc:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d1f1      	bne.n	80061a8 <xTaskResumeAll+0x188>

                        xPendedTicks = 0;
 80061c4:	4b12      	ldr	r3, [pc, #72]	@ (8006210 <xTaskResumeAll+0x1f0>)
 80061c6:	2200      	movs	r2, #0
 80061c8:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80061ca:	4b10      	ldr	r3, [pc, #64]	@ (800620c <xTaskResumeAll+0x1ec>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d009      	beq.n	80061e6 <xTaskResumeAll+0x1c6>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 80061d2:	2301      	movs	r3, #1
 80061d4:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80061d6:	4b0f      	ldr	r3, [pc, #60]	@ (8006214 <xTaskResumeAll+0x1f4>)
 80061d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80061dc:	601a      	str	r2, [r3, #0]
 80061de:	f3bf 8f4f 	dsb	sy
 80061e2:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80061e6:	f001 fd53 	bl	8007c90 <vPortExitCritical>

    return xAlreadyYielded;
 80061ea:	69bb      	ldr	r3, [r7, #24]
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	3720      	adds	r7, #32
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}
 80061f4:	200002e0 	.word	0x200002e0
 80061f8:	200002b8 	.word	0x200002b8
 80061fc:	20000278 	.word	0x20000278
 8006200:	200002c0 	.word	0x200002c0
 8006204:	200001e4 	.word	0x200001e4
 8006208:	200001e0 	.word	0x200001e0
 800620c:	200002cc 	.word	0x200002cc
 8006210:	200002c8 	.word	0x200002c8
 8006214:	e000ed04 	.word	0xe000ed04

08006218 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006218:	b480      	push	{r7}
 800621a:	b083      	sub	sp, #12
 800621c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800621e:	4b05      	ldr	r3, [pc, #20]	@ (8006234 <xTaskGetTickCount+0x1c>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8006224:	687b      	ldr	r3, [r7, #4]
}
 8006226:	4618      	mov	r0, r3
 8006228:	370c      	adds	r7, #12
 800622a:	46bd      	mov	sp, r7
 800622c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006230:	4770      	bx	lr
 8006232:	bf00      	nop
 8006234:	200002bc 	.word	0x200002bc

08006238 <uxTaskGetNumberOfTasks>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 8006238:	b480      	push	{r7}
 800623a:	af00      	add	r7, sp, #0
    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    return uxCurrentNumberOfTasks;
 800623c:	4b03      	ldr	r3, [pc, #12]	@ (800624c <uxTaskGetNumberOfTasks+0x14>)
 800623e:	681b      	ldr	r3, [r3, #0]
}
 8006240:	4618      	mov	r0, r3
 8006242:	46bd      	mov	sp, r7
 8006244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006248:	4770      	bx	lr
 800624a:	bf00      	nop
 800624c:	200002b8 	.word	0x200002b8

08006250 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b08a      	sub	sp, #40	@ 0x28
 8006254:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8006256:	2300      	movs	r3, #0
 8006258:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800625a:	4b7e      	ldr	r3, [pc, #504]	@ (8006454 <xTaskIncrementTick+0x204>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	2b00      	cmp	r3, #0
 8006260:	f040 80ed 	bne.w	800643e <xTaskIncrementTick+0x1ee>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006264:	4b7c      	ldr	r3, [pc, #496]	@ (8006458 <xTaskIncrementTick+0x208>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	3301      	adds	r3, #1
 800626a:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800626c:	4a7a      	ldr	r2, [pc, #488]	@ (8006458 <xTaskIncrementTick+0x208>)
 800626e:	6a3b      	ldr	r3, [r7, #32]
 8006270:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006272:	6a3b      	ldr	r3, [r7, #32]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d121      	bne.n	80062bc <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8006278:	4b78      	ldr	r3, [pc, #480]	@ (800645c <xTaskIncrementTick+0x20c>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d00b      	beq.n	800629a <xTaskIncrementTick+0x4a>
        __asm volatile
 8006282:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006286:	f383 8811 	msr	BASEPRI, r3
 800628a:	f3bf 8f6f 	isb	sy
 800628e:	f3bf 8f4f 	dsb	sy
 8006292:	607b      	str	r3, [r7, #4]
    }
 8006294:	bf00      	nop
 8006296:	bf00      	nop
 8006298:	e7fd      	b.n	8006296 <xTaskIncrementTick+0x46>
 800629a:	4b70      	ldr	r3, [pc, #448]	@ (800645c <xTaskIncrementTick+0x20c>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	61fb      	str	r3, [r7, #28]
 80062a0:	4b6f      	ldr	r3, [pc, #444]	@ (8006460 <xTaskIncrementTick+0x210>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a6d      	ldr	r2, [pc, #436]	@ (800645c <xTaskIncrementTick+0x20c>)
 80062a6:	6013      	str	r3, [r2, #0]
 80062a8:	4a6d      	ldr	r2, [pc, #436]	@ (8006460 <xTaskIncrementTick+0x210>)
 80062aa:	69fb      	ldr	r3, [r7, #28]
 80062ac:	6013      	str	r3, [r2, #0]
 80062ae:	4b6d      	ldr	r3, [pc, #436]	@ (8006464 <xTaskIncrementTick+0x214>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	3301      	adds	r3, #1
 80062b4:	4a6b      	ldr	r2, [pc, #428]	@ (8006464 <xTaskIncrementTick+0x214>)
 80062b6:	6013      	str	r3, [r2, #0]
 80062b8:	f000 fba2 	bl	8006a00 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80062bc:	4b6a      	ldr	r3, [pc, #424]	@ (8006468 <xTaskIncrementTick+0x218>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	6a3a      	ldr	r2, [r7, #32]
 80062c2:	429a      	cmp	r2, r3
 80062c4:	f0c0 80a6 	bcc.w	8006414 <xTaskIncrementTick+0x1c4>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80062c8:	4b64      	ldr	r3, [pc, #400]	@ (800645c <xTaskIncrementTick+0x20c>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d104      	bne.n	80062dc <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80062d2:	4b65      	ldr	r3, [pc, #404]	@ (8006468 <xTaskIncrementTick+0x218>)
 80062d4:	f04f 32ff 	mov.w	r2, #4294967295
 80062d8:	601a      	str	r2, [r3, #0]
                    break;
 80062da:	e09b      	b.n	8006414 <xTaskIncrementTick+0x1c4>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062dc:	4b5f      	ldr	r3, [pc, #380]	@ (800645c <xTaskIncrementTick+0x20c>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	68db      	ldr	r3, [r3, #12]
 80062e2:	68db      	ldr	r3, [r3, #12]
 80062e4:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80062e6:	69bb      	ldr	r3, [r7, #24]
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80062ec:	6a3a      	ldr	r2, [r7, #32]
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	429a      	cmp	r2, r3
 80062f2:	d203      	bcs.n	80062fc <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80062f4:	4a5c      	ldr	r2, [pc, #368]	@ (8006468 <xTaskIncrementTick+0x218>)
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80062fa:	e08b      	b.n	8006414 <xTaskIncrementTick+0x1c4>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80062fc:	69bb      	ldr	r3, [r7, #24]
 80062fe:	695b      	ldr	r3, [r3, #20]
 8006300:	613b      	str	r3, [r7, #16]
 8006302:	69bb      	ldr	r3, [r7, #24]
 8006304:	689b      	ldr	r3, [r3, #8]
 8006306:	69ba      	ldr	r2, [r7, #24]
 8006308:	68d2      	ldr	r2, [r2, #12]
 800630a:	609a      	str	r2, [r3, #8]
 800630c:	69bb      	ldr	r3, [r7, #24]
 800630e:	68db      	ldr	r3, [r3, #12]
 8006310:	69ba      	ldr	r2, [r7, #24]
 8006312:	6892      	ldr	r2, [r2, #8]
 8006314:	605a      	str	r2, [r3, #4]
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	685a      	ldr	r2, [r3, #4]
 800631a:	69bb      	ldr	r3, [r7, #24]
 800631c:	3304      	adds	r3, #4
 800631e:	429a      	cmp	r2, r3
 8006320:	d103      	bne.n	800632a <xTaskIncrementTick+0xda>
 8006322:	69bb      	ldr	r3, [r7, #24]
 8006324:	68da      	ldr	r2, [r3, #12]
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	605a      	str	r2, [r3, #4]
 800632a:	69bb      	ldr	r3, [r7, #24]
 800632c:	2200      	movs	r2, #0
 800632e:	615a      	str	r2, [r3, #20]
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	1e5a      	subs	r2, r3, #1
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800633a:	69bb      	ldr	r3, [r7, #24]
 800633c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800633e:	2b00      	cmp	r3, #0
 8006340:	d01e      	beq.n	8006380 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8006342:	69bb      	ldr	r3, [r7, #24]
 8006344:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006346:	60fb      	str	r3, [r7, #12]
 8006348:	69bb      	ldr	r3, [r7, #24]
 800634a:	69db      	ldr	r3, [r3, #28]
 800634c:	69ba      	ldr	r2, [r7, #24]
 800634e:	6a12      	ldr	r2, [r2, #32]
 8006350:	609a      	str	r2, [r3, #8]
 8006352:	69bb      	ldr	r3, [r7, #24]
 8006354:	6a1b      	ldr	r3, [r3, #32]
 8006356:	69ba      	ldr	r2, [r7, #24]
 8006358:	69d2      	ldr	r2, [r2, #28]
 800635a:	605a      	str	r2, [r3, #4]
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	685a      	ldr	r2, [r3, #4]
 8006360:	69bb      	ldr	r3, [r7, #24]
 8006362:	3318      	adds	r3, #24
 8006364:	429a      	cmp	r2, r3
 8006366:	d103      	bne.n	8006370 <xTaskIncrementTick+0x120>
 8006368:	69bb      	ldr	r3, [r7, #24]
 800636a:	6a1a      	ldr	r2, [r3, #32]
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	605a      	str	r2, [r3, #4]
 8006370:	69bb      	ldr	r3, [r7, #24]
 8006372:	2200      	movs	r2, #0
 8006374:	629a      	str	r2, [r3, #40]	@ 0x28
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	1e5a      	subs	r2, r3, #1
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8006380:	69bb      	ldr	r3, [r7, #24]
 8006382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006384:	2201      	movs	r2, #1
 8006386:	409a      	lsls	r2, r3
 8006388:	4b38      	ldr	r3, [pc, #224]	@ (800646c <xTaskIncrementTick+0x21c>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4313      	orrs	r3, r2
 800638e:	4a37      	ldr	r2, [pc, #220]	@ (800646c <xTaskIncrementTick+0x21c>)
 8006390:	6013      	str	r3, [r2, #0]
 8006392:	69bb      	ldr	r3, [r7, #24]
 8006394:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006396:	4936      	ldr	r1, [pc, #216]	@ (8006470 <xTaskIncrementTick+0x220>)
 8006398:	4613      	mov	r3, r2
 800639a:	009b      	lsls	r3, r3, #2
 800639c:	4413      	add	r3, r2
 800639e:	009b      	lsls	r3, r3, #2
 80063a0:	440b      	add	r3, r1
 80063a2:	3304      	adds	r3, #4
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	60bb      	str	r3, [r7, #8]
 80063a8:	69bb      	ldr	r3, [r7, #24]
 80063aa:	68ba      	ldr	r2, [r7, #8]
 80063ac:	609a      	str	r2, [r3, #8]
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	689a      	ldr	r2, [r3, #8]
 80063b2:	69bb      	ldr	r3, [r7, #24]
 80063b4:	60da      	str	r2, [r3, #12]
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	689b      	ldr	r3, [r3, #8]
 80063ba:	69ba      	ldr	r2, [r7, #24]
 80063bc:	3204      	adds	r2, #4
 80063be:	605a      	str	r2, [r3, #4]
 80063c0:	69bb      	ldr	r3, [r7, #24]
 80063c2:	1d1a      	adds	r2, r3, #4
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	609a      	str	r2, [r3, #8]
 80063c8:	69bb      	ldr	r3, [r7, #24]
 80063ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063cc:	4613      	mov	r3, r2
 80063ce:	009b      	lsls	r3, r3, #2
 80063d0:	4413      	add	r3, r2
 80063d2:	009b      	lsls	r3, r3, #2
 80063d4:	4a26      	ldr	r2, [pc, #152]	@ (8006470 <xTaskIncrementTick+0x220>)
 80063d6:	441a      	add	r2, r3
 80063d8:	69bb      	ldr	r3, [r7, #24]
 80063da:	615a      	str	r2, [r3, #20]
 80063dc:	69bb      	ldr	r3, [r7, #24]
 80063de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063e0:	4923      	ldr	r1, [pc, #140]	@ (8006470 <xTaskIncrementTick+0x220>)
 80063e2:	4613      	mov	r3, r2
 80063e4:	009b      	lsls	r3, r3, #2
 80063e6:	4413      	add	r3, r2
 80063e8:	009b      	lsls	r3, r3, #2
 80063ea:	440b      	add	r3, r1
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	1c59      	adds	r1, r3, #1
 80063f0:	481f      	ldr	r0, [pc, #124]	@ (8006470 <xTaskIncrementTick+0x220>)
 80063f2:	4613      	mov	r3, r2
 80063f4:	009b      	lsls	r3, r3, #2
 80063f6:	4413      	add	r3, r2
 80063f8:	009b      	lsls	r3, r3, #2
 80063fa:	4403      	add	r3, r0
 80063fc:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80063fe:	69bb      	ldr	r3, [r7, #24]
 8006400:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006402:	4b1c      	ldr	r3, [pc, #112]	@ (8006474 <xTaskIncrementTick+0x224>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006408:	429a      	cmp	r2, r3
 800640a:	f67f af5d 	bls.w	80062c8 <xTaskIncrementTick+0x78>
                        {
                            xSwitchRequired = pdTRUE;
 800640e:	2301      	movs	r3, #1
 8006410:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006412:	e759      	b.n	80062c8 <xTaskIncrementTick+0x78>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006414:	4b17      	ldr	r3, [pc, #92]	@ (8006474 <xTaskIncrementTick+0x224>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800641a:	4915      	ldr	r1, [pc, #84]	@ (8006470 <xTaskIncrementTick+0x220>)
 800641c:	4613      	mov	r3, r2
 800641e:	009b      	lsls	r3, r3, #2
 8006420:	4413      	add	r3, r2
 8006422:	009b      	lsls	r3, r3, #2
 8006424:	440b      	add	r3, r1
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	2b01      	cmp	r3, #1
 800642a:	d901      	bls.n	8006430 <xTaskIncrementTick+0x1e0>
            {
                xSwitchRequired = pdTRUE;
 800642c:	2301      	movs	r3, #1
 800642e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8006430:	4b11      	ldr	r3, [pc, #68]	@ (8006478 <xTaskIncrementTick+0x228>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d007      	beq.n	8006448 <xTaskIncrementTick+0x1f8>
            {
                xSwitchRequired = pdTRUE;
 8006438:	2301      	movs	r3, #1
 800643a:	627b      	str	r3, [r7, #36]	@ 0x24
 800643c:	e004      	b.n	8006448 <xTaskIncrementTick+0x1f8>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800643e:	4b0f      	ldr	r3, [pc, #60]	@ (800647c <xTaskIncrementTick+0x22c>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	3301      	adds	r3, #1
 8006444:	4a0d      	ldr	r2, [pc, #52]	@ (800647c <xTaskIncrementTick+0x22c>)
 8006446:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8006448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800644a:	4618      	mov	r0, r3
 800644c:	3728      	adds	r7, #40	@ 0x28
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}
 8006452:	bf00      	nop
 8006454:	200002e0 	.word	0x200002e0
 8006458:	200002bc 	.word	0x200002bc
 800645c:	20000270 	.word	0x20000270
 8006460:	20000274 	.word	0x20000274
 8006464:	200002d0 	.word	0x200002d0
 8006468:	200002d8 	.word	0x200002d8
 800646c:	200002c0 	.word	0x200002c0
 8006470:	200001e4 	.word	0x200001e4
 8006474:	200001e0 	.word	0x200001e0
 8006478:	200002cc 	.word	0x200002cc
 800647c:	200002c8 	.word	0x200002c8

08006480 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006480:	b480      	push	{r7}
 8006482:	b087      	sub	sp, #28
 8006484:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006486:	4b27      	ldr	r3, [pc, #156]	@ (8006524 <vTaskSwitchContext+0xa4>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d003      	beq.n	8006496 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800648e:	4b26      	ldr	r3, [pc, #152]	@ (8006528 <vTaskSwitchContext+0xa8>)
 8006490:	2201      	movs	r2, #1
 8006492:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8006494:	e040      	b.n	8006518 <vTaskSwitchContext+0x98>
        xYieldPending = pdFALSE;
 8006496:	4b24      	ldr	r3, [pc, #144]	@ (8006528 <vTaskSwitchContext+0xa8>)
 8006498:	2200      	movs	r2, #0
 800649a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800649c:	4b23      	ldr	r3, [pc, #140]	@ (800652c <vTaskSwitchContext+0xac>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	fab3 f383 	clz	r3, r3
 80064a8:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80064aa:	7afb      	ldrb	r3, [r7, #11]
 80064ac:	f1c3 031f 	rsb	r3, r3, #31
 80064b0:	617b      	str	r3, [r7, #20]
 80064b2:	491f      	ldr	r1, [pc, #124]	@ (8006530 <vTaskSwitchContext+0xb0>)
 80064b4:	697a      	ldr	r2, [r7, #20]
 80064b6:	4613      	mov	r3, r2
 80064b8:	009b      	lsls	r3, r3, #2
 80064ba:	4413      	add	r3, r2
 80064bc:	009b      	lsls	r3, r3, #2
 80064be:	440b      	add	r3, r1
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d10b      	bne.n	80064de <vTaskSwitchContext+0x5e>
        __asm volatile
 80064c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064ca:	f383 8811 	msr	BASEPRI, r3
 80064ce:	f3bf 8f6f 	isb	sy
 80064d2:	f3bf 8f4f 	dsb	sy
 80064d6:	607b      	str	r3, [r7, #4]
    }
 80064d8:	bf00      	nop
 80064da:	bf00      	nop
 80064dc:	e7fd      	b.n	80064da <vTaskSwitchContext+0x5a>
 80064de:	697a      	ldr	r2, [r7, #20]
 80064e0:	4613      	mov	r3, r2
 80064e2:	009b      	lsls	r3, r3, #2
 80064e4:	4413      	add	r3, r2
 80064e6:	009b      	lsls	r3, r3, #2
 80064e8:	4a11      	ldr	r2, [pc, #68]	@ (8006530 <vTaskSwitchContext+0xb0>)
 80064ea:	4413      	add	r3, r2
 80064ec:	613b      	str	r3, [r7, #16]
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	685a      	ldr	r2, [r3, #4]
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	605a      	str	r2, [r3, #4]
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	685a      	ldr	r2, [r3, #4]
 80064fc:	693b      	ldr	r3, [r7, #16]
 80064fe:	3308      	adds	r3, #8
 8006500:	429a      	cmp	r2, r3
 8006502:	d104      	bne.n	800650e <vTaskSwitchContext+0x8e>
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	685b      	ldr	r3, [r3, #4]
 8006508:	685a      	ldr	r2, [r3, #4]
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	605a      	str	r2, [r3, #4]
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	685b      	ldr	r3, [r3, #4]
 8006512:	68db      	ldr	r3, [r3, #12]
 8006514:	4a07      	ldr	r2, [pc, #28]	@ (8006534 <vTaskSwitchContext+0xb4>)
 8006516:	6013      	str	r3, [r2, #0]
}
 8006518:	bf00      	nop
 800651a:	371c      	adds	r7, #28
 800651c:	46bd      	mov	sp, r7
 800651e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006522:	4770      	bx	lr
 8006524:	200002e0 	.word	0x200002e0
 8006528:	200002cc 	.word	0x200002cc
 800652c:	200002c0 	.word	0x200002c0
 8006530:	200001e4 	.word	0x200001e4
 8006534:	200001e0 	.word	0x200001e0

08006538 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b084      	sub	sp, #16
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
 8006540:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d10b      	bne.n	8006560 <vTaskPlaceOnEventList+0x28>
        __asm volatile
 8006548:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800654c:	f383 8811 	msr	BASEPRI, r3
 8006550:	f3bf 8f6f 	isb	sy
 8006554:	f3bf 8f4f 	dsb	sy
 8006558:	60fb      	str	r3, [r7, #12]
    }
 800655a:	bf00      	nop
 800655c:	bf00      	nop
 800655e:	e7fd      	b.n	800655c <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006560:	4b07      	ldr	r3, [pc, #28]	@ (8006580 <vTaskPlaceOnEventList+0x48>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	3318      	adds	r3, #24
 8006566:	4619      	mov	r1, r3
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f7fe fce2 	bl	8004f32 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800656e:	2101      	movs	r1, #1
 8006570:	6838      	ldr	r0, [r7, #0]
 8006572:	f000 fe2b 	bl	80071cc <prvAddCurrentTaskToDelayedList>
}
 8006576:	bf00      	nop
 8006578:	3710      	adds	r7, #16
 800657a:	46bd      	mov	sp, r7
 800657c:	bd80      	pop	{r7, pc}
 800657e:	bf00      	nop
 8006580:	200001e0 	.word	0x200001e0

08006584 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8006584:	b580      	push	{r7, lr}
 8006586:	b086      	sub	sp, #24
 8006588:	af00      	add	r7, sp, #0
 800658a:	60f8      	str	r0, [r7, #12]
 800658c:	60b9      	str	r1, [r7, #8]
 800658e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d10b      	bne.n	80065ae <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 8006596:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800659a:	f383 8811 	msr	BASEPRI, r3
 800659e:	f3bf 8f6f 	isb	sy
 80065a2:	f3bf 8f4f 	dsb	sy
 80065a6:	613b      	str	r3, [r7, #16]
    }
 80065a8:	bf00      	nop
 80065aa:	bf00      	nop
 80065ac:	e7fd      	b.n	80065aa <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	617b      	str	r3, [r7, #20]
 80065b4:	4b15      	ldr	r3, [pc, #84]	@ (800660c <vTaskPlaceOnEventListRestricted+0x88>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	697a      	ldr	r2, [r7, #20]
 80065ba:	61da      	str	r2, [r3, #28]
 80065bc:	4b13      	ldr	r3, [pc, #76]	@ (800660c <vTaskPlaceOnEventListRestricted+0x88>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	697a      	ldr	r2, [r7, #20]
 80065c2:	6892      	ldr	r2, [r2, #8]
 80065c4:	621a      	str	r2, [r3, #32]
 80065c6:	4b11      	ldr	r3, [pc, #68]	@ (800660c <vTaskPlaceOnEventListRestricted+0x88>)
 80065c8:	681a      	ldr	r2, [r3, #0]
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	689b      	ldr	r3, [r3, #8]
 80065ce:	3218      	adds	r2, #24
 80065d0:	605a      	str	r2, [r3, #4]
 80065d2:	4b0e      	ldr	r3, [pc, #56]	@ (800660c <vTaskPlaceOnEventListRestricted+0x88>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f103 0218 	add.w	r2, r3, #24
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	609a      	str	r2, [r3, #8]
 80065de:	4b0b      	ldr	r3, [pc, #44]	@ (800660c <vTaskPlaceOnEventListRestricted+0x88>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	68fa      	ldr	r2, [r7, #12]
 80065e4:	629a      	str	r2, [r3, #40]	@ 0x28
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	1c5a      	adds	r2, r3, #1
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d002      	beq.n	80065fc <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 80065f6:	f04f 33ff 	mov.w	r3, #4294967295
 80065fa:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80065fc:	6879      	ldr	r1, [r7, #4]
 80065fe:	68b8      	ldr	r0, [r7, #8]
 8006600:	f000 fde4 	bl	80071cc <prvAddCurrentTaskToDelayedList>
    }
 8006604:	bf00      	nop
 8006606:	3718      	adds	r7, #24
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}
 800660c:	200001e0 	.word	0x200001e0

08006610 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006610:	b480      	push	{r7}
 8006612:	b08b      	sub	sp, #44	@ 0x2c
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	68db      	ldr	r3, [r3, #12]
 800661c:	68db      	ldr	r3, [r3, #12]
 800661e:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8006620:	6a3b      	ldr	r3, [r7, #32]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d10b      	bne.n	800663e <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 8006626:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800662a:	f383 8811 	msr	BASEPRI, r3
 800662e:	f3bf 8f6f 	isb	sy
 8006632:	f3bf 8f4f 	dsb	sy
 8006636:	60fb      	str	r3, [r7, #12]
    }
 8006638:	bf00      	nop
 800663a:	bf00      	nop
 800663c:	e7fd      	b.n	800663a <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800663e:	6a3b      	ldr	r3, [r7, #32]
 8006640:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006642:	61fb      	str	r3, [r7, #28]
 8006644:	6a3b      	ldr	r3, [r7, #32]
 8006646:	69db      	ldr	r3, [r3, #28]
 8006648:	6a3a      	ldr	r2, [r7, #32]
 800664a:	6a12      	ldr	r2, [r2, #32]
 800664c:	609a      	str	r2, [r3, #8]
 800664e:	6a3b      	ldr	r3, [r7, #32]
 8006650:	6a1b      	ldr	r3, [r3, #32]
 8006652:	6a3a      	ldr	r2, [r7, #32]
 8006654:	69d2      	ldr	r2, [r2, #28]
 8006656:	605a      	str	r2, [r3, #4]
 8006658:	69fb      	ldr	r3, [r7, #28]
 800665a:	685a      	ldr	r2, [r3, #4]
 800665c:	6a3b      	ldr	r3, [r7, #32]
 800665e:	3318      	adds	r3, #24
 8006660:	429a      	cmp	r2, r3
 8006662:	d103      	bne.n	800666c <xTaskRemoveFromEventList+0x5c>
 8006664:	6a3b      	ldr	r3, [r7, #32]
 8006666:	6a1a      	ldr	r2, [r3, #32]
 8006668:	69fb      	ldr	r3, [r7, #28]
 800666a:	605a      	str	r2, [r3, #4]
 800666c:	6a3b      	ldr	r3, [r7, #32]
 800666e:	2200      	movs	r2, #0
 8006670:	629a      	str	r2, [r3, #40]	@ 0x28
 8006672:	69fb      	ldr	r3, [r7, #28]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	1e5a      	subs	r2, r3, #1
 8006678:	69fb      	ldr	r3, [r7, #28]
 800667a:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800667c:	4b4a      	ldr	r3, [pc, #296]	@ (80067a8 <xTaskRemoveFromEventList+0x198>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d15e      	bne.n	8006742 <xTaskRemoveFromEventList+0x132>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8006684:	6a3b      	ldr	r3, [r7, #32]
 8006686:	695b      	ldr	r3, [r3, #20]
 8006688:	617b      	str	r3, [r7, #20]
 800668a:	6a3b      	ldr	r3, [r7, #32]
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	6a3a      	ldr	r2, [r7, #32]
 8006690:	68d2      	ldr	r2, [r2, #12]
 8006692:	609a      	str	r2, [r3, #8]
 8006694:	6a3b      	ldr	r3, [r7, #32]
 8006696:	68db      	ldr	r3, [r3, #12]
 8006698:	6a3a      	ldr	r2, [r7, #32]
 800669a:	6892      	ldr	r2, [r2, #8]
 800669c:	605a      	str	r2, [r3, #4]
 800669e:	697b      	ldr	r3, [r7, #20]
 80066a0:	685a      	ldr	r2, [r3, #4]
 80066a2:	6a3b      	ldr	r3, [r7, #32]
 80066a4:	3304      	adds	r3, #4
 80066a6:	429a      	cmp	r2, r3
 80066a8:	d103      	bne.n	80066b2 <xTaskRemoveFromEventList+0xa2>
 80066aa:	6a3b      	ldr	r3, [r7, #32]
 80066ac:	68da      	ldr	r2, [r3, #12]
 80066ae:	697b      	ldr	r3, [r7, #20]
 80066b0:	605a      	str	r2, [r3, #4]
 80066b2:	6a3b      	ldr	r3, [r7, #32]
 80066b4:	2200      	movs	r2, #0
 80066b6:	615a      	str	r2, [r3, #20]
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	1e5a      	subs	r2, r3, #1
 80066be:	697b      	ldr	r3, [r7, #20]
 80066c0:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80066c2:	6a3b      	ldr	r3, [r7, #32]
 80066c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066c6:	2201      	movs	r2, #1
 80066c8:	409a      	lsls	r2, r3
 80066ca:	4b38      	ldr	r3, [pc, #224]	@ (80067ac <xTaskRemoveFromEventList+0x19c>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4313      	orrs	r3, r2
 80066d0:	4a36      	ldr	r2, [pc, #216]	@ (80067ac <xTaskRemoveFromEventList+0x19c>)
 80066d2:	6013      	str	r3, [r2, #0]
 80066d4:	6a3b      	ldr	r3, [r7, #32]
 80066d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066d8:	4935      	ldr	r1, [pc, #212]	@ (80067b0 <xTaskRemoveFromEventList+0x1a0>)
 80066da:	4613      	mov	r3, r2
 80066dc:	009b      	lsls	r3, r3, #2
 80066de:	4413      	add	r3, r2
 80066e0:	009b      	lsls	r3, r3, #2
 80066e2:	440b      	add	r3, r1
 80066e4:	3304      	adds	r3, #4
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	613b      	str	r3, [r7, #16]
 80066ea:	6a3b      	ldr	r3, [r7, #32]
 80066ec:	693a      	ldr	r2, [r7, #16]
 80066ee:	609a      	str	r2, [r3, #8]
 80066f0:	693b      	ldr	r3, [r7, #16]
 80066f2:	689a      	ldr	r2, [r3, #8]
 80066f4:	6a3b      	ldr	r3, [r7, #32]
 80066f6:	60da      	str	r2, [r3, #12]
 80066f8:	693b      	ldr	r3, [r7, #16]
 80066fa:	689b      	ldr	r3, [r3, #8]
 80066fc:	6a3a      	ldr	r2, [r7, #32]
 80066fe:	3204      	adds	r2, #4
 8006700:	605a      	str	r2, [r3, #4]
 8006702:	6a3b      	ldr	r3, [r7, #32]
 8006704:	1d1a      	adds	r2, r3, #4
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	609a      	str	r2, [r3, #8]
 800670a:	6a3b      	ldr	r3, [r7, #32]
 800670c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800670e:	4613      	mov	r3, r2
 8006710:	009b      	lsls	r3, r3, #2
 8006712:	4413      	add	r3, r2
 8006714:	009b      	lsls	r3, r3, #2
 8006716:	4a26      	ldr	r2, [pc, #152]	@ (80067b0 <xTaskRemoveFromEventList+0x1a0>)
 8006718:	441a      	add	r2, r3
 800671a:	6a3b      	ldr	r3, [r7, #32]
 800671c:	615a      	str	r2, [r3, #20]
 800671e:	6a3b      	ldr	r3, [r7, #32]
 8006720:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006722:	4923      	ldr	r1, [pc, #140]	@ (80067b0 <xTaskRemoveFromEventList+0x1a0>)
 8006724:	4613      	mov	r3, r2
 8006726:	009b      	lsls	r3, r3, #2
 8006728:	4413      	add	r3, r2
 800672a:	009b      	lsls	r3, r3, #2
 800672c:	440b      	add	r3, r1
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	1c59      	adds	r1, r3, #1
 8006732:	481f      	ldr	r0, [pc, #124]	@ (80067b0 <xTaskRemoveFromEventList+0x1a0>)
 8006734:	4613      	mov	r3, r2
 8006736:	009b      	lsls	r3, r3, #2
 8006738:	4413      	add	r3, r2
 800673a:	009b      	lsls	r3, r3, #2
 800673c:	4403      	add	r3, r0
 800673e:	6019      	str	r1, [r3, #0]
 8006740:	e01b      	b.n	800677a <xTaskRemoveFromEventList+0x16a>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006742:	4b1c      	ldr	r3, [pc, #112]	@ (80067b4 <xTaskRemoveFromEventList+0x1a4>)
 8006744:	685b      	ldr	r3, [r3, #4]
 8006746:	61bb      	str	r3, [r7, #24]
 8006748:	6a3b      	ldr	r3, [r7, #32]
 800674a:	69ba      	ldr	r2, [r7, #24]
 800674c:	61da      	str	r2, [r3, #28]
 800674e:	69bb      	ldr	r3, [r7, #24]
 8006750:	689a      	ldr	r2, [r3, #8]
 8006752:	6a3b      	ldr	r3, [r7, #32]
 8006754:	621a      	str	r2, [r3, #32]
 8006756:	69bb      	ldr	r3, [r7, #24]
 8006758:	689b      	ldr	r3, [r3, #8]
 800675a:	6a3a      	ldr	r2, [r7, #32]
 800675c:	3218      	adds	r2, #24
 800675e:	605a      	str	r2, [r3, #4]
 8006760:	6a3b      	ldr	r3, [r7, #32]
 8006762:	f103 0218 	add.w	r2, r3, #24
 8006766:	69bb      	ldr	r3, [r7, #24]
 8006768:	609a      	str	r2, [r3, #8]
 800676a:	6a3b      	ldr	r3, [r7, #32]
 800676c:	4a11      	ldr	r2, [pc, #68]	@ (80067b4 <xTaskRemoveFromEventList+0x1a4>)
 800676e:	629a      	str	r2, [r3, #40]	@ 0x28
 8006770:	4b10      	ldr	r3, [pc, #64]	@ (80067b4 <xTaskRemoveFromEventList+0x1a4>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	3301      	adds	r3, #1
 8006776:	4a0f      	ldr	r2, [pc, #60]	@ (80067b4 <xTaskRemoveFromEventList+0x1a4>)
 8006778:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800677a:	6a3b      	ldr	r3, [r7, #32]
 800677c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800677e:	4b0e      	ldr	r3, [pc, #56]	@ (80067b8 <xTaskRemoveFromEventList+0x1a8>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006784:	429a      	cmp	r2, r3
 8006786:	d905      	bls.n	8006794 <xTaskRemoveFromEventList+0x184>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8006788:	2301      	movs	r3, #1
 800678a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800678c:	4b0b      	ldr	r3, [pc, #44]	@ (80067bc <xTaskRemoveFromEventList+0x1ac>)
 800678e:	2201      	movs	r2, #1
 8006790:	601a      	str	r2, [r3, #0]
 8006792:	e001      	b.n	8006798 <xTaskRemoveFromEventList+0x188>
    }
    else
    {
        xReturn = pdFALSE;
 8006794:	2300      	movs	r3, #0
 8006796:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    return xReturn;
 8006798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800679a:	4618      	mov	r0, r3
 800679c:	372c      	adds	r7, #44	@ 0x2c
 800679e:	46bd      	mov	sp, r7
 80067a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a4:	4770      	bx	lr
 80067a6:	bf00      	nop
 80067a8:	200002e0 	.word	0x200002e0
 80067ac:	200002c0 	.word	0x200002c0
 80067b0:	200001e4 	.word	0x200001e4
 80067b4:	20000278 	.word	0x20000278
 80067b8:	200001e0 	.word	0x200001e0
 80067bc:	200002cc 	.word	0x200002cc

080067c0 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80067c0:	b480      	push	{r7}
 80067c2:	b083      	sub	sp, #12
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80067c8:	4b06      	ldr	r3, [pc, #24]	@ (80067e4 <vTaskInternalSetTimeOutState+0x24>)
 80067ca:	681a      	ldr	r2, [r3, #0]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80067d0:	4b05      	ldr	r3, [pc, #20]	@ (80067e8 <vTaskInternalSetTimeOutState+0x28>)
 80067d2:	681a      	ldr	r2, [r3, #0]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	605a      	str	r2, [r3, #4]
}
 80067d8:	bf00      	nop
 80067da:	370c      	adds	r7, #12
 80067dc:	46bd      	mov	sp, r7
 80067de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e2:	4770      	bx	lr
 80067e4:	200002d0 	.word	0x200002d0
 80067e8:	200002bc 	.word	0x200002bc

080067ec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b088      	sub	sp, #32
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
 80067f4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d10b      	bne.n	8006814 <xTaskCheckForTimeOut+0x28>
        __asm volatile
 80067fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006800:	f383 8811 	msr	BASEPRI, r3
 8006804:	f3bf 8f6f 	isb	sy
 8006808:	f3bf 8f4f 	dsb	sy
 800680c:	613b      	str	r3, [r7, #16]
    }
 800680e:	bf00      	nop
 8006810:	bf00      	nop
 8006812:	e7fd      	b.n	8006810 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d10b      	bne.n	8006832 <xTaskCheckForTimeOut+0x46>
        __asm volatile
 800681a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800681e:	f383 8811 	msr	BASEPRI, r3
 8006822:	f3bf 8f6f 	isb	sy
 8006826:	f3bf 8f4f 	dsb	sy
 800682a:	60fb      	str	r3, [r7, #12]
    }
 800682c:	bf00      	nop
 800682e:	bf00      	nop
 8006830:	e7fd      	b.n	800682e <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 8006832:	f001 f9fb 	bl	8007c2c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8006836:	4b1f      	ldr	r3, [pc, #124]	@ (80068b4 <xTaskCheckForTimeOut+0xc8>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	69ba      	ldr	r2, [r7, #24]
 8006842:	1ad3      	subs	r3, r2, r3
 8006844:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800684e:	d102      	bne.n	8006856 <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8006850:	2300      	movs	r3, #0
 8006852:	61fb      	str	r3, [r7, #28]
 8006854:	e026      	b.n	80068a4 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681a      	ldr	r2, [r3, #0]
 800685a:	4b17      	ldr	r3, [pc, #92]	@ (80068b8 <xTaskCheckForTimeOut+0xcc>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	429a      	cmp	r2, r3
 8006860:	d00a      	beq.n	8006878 <xTaskCheckForTimeOut+0x8c>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	685b      	ldr	r3, [r3, #4]
 8006866:	69ba      	ldr	r2, [r7, #24]
 8006868:	429a      	cmp	r2, r3
 800686a:	d305      	bcc.n	8006878 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800686c:	2301      	movs	r3, #1
 800686e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	2200      	movs	r2, #0
 8006874:	601a      	str	r2, [r3, #0]
 8006876:	e015      	b.n	80068a4 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	697a      	ldr	r2, [r7, #20]
 800687e:	429a      	cmp	r2, r3
 8006880:	d20b      	bcs.n	800689a <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	681a      	ldr	r2, [r3, #0]
 8006886:	697b      	ldr	r3, [r7, #20]
 8006888:	1ad2      	subs	r2, r2, r3
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f7ff ff96 	bl	80067c0 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8006894:	2300      	movs	r3, #0
 8006896:	61fb      	str	r3, [r7, #28]
 8006898:	e004      	b.n	80068a4 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	2200      	movs	r2, #0
 800689e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80068a0:	2301      	movs	r3, #1
 80068a2:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80068a4:	f001 f9f4 	bl	8007c90 <vPortExitCritical>

    return xReturn;
 80068a8:	69fb      	ldr	r3, [r7, #28]
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3720      	adds	r7, #32
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}
 80068b2:	bf00      	nop
 80068b4:	200002bc 	.word	0x200002bc
 80068b8:	200002d0 	.word	0x200002d0

080068bc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80068bc:	b480      	push	{r7}
 80068be:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80068c0:	4b03      	ldr	r3, [pc, #12]	@ (80068d0 <vTaskMissedYield+0x14>)
 80068c2:	2201      	movs	r2, #1
 80068c4:	601a      	str	r2, [r3, #0]
}
 80068c6:	bf00      	nop
 80068c8:	46bd      	mov	sp, r7
 80068ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ce:	4770      	bx	lr
 80068d0:	200002cc 	.word	0x200002cc

080068d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b082      	sub	sp, #8
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80068dc:	f000 f852 	bl	8006984 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80068e0:	4b06      	ldr	r3, [pc, #24]	@ (80068fc <prvIdleTask+0x28>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	2b01      	cmp	r3, #1
 80068e6:	d9f9      	bls.n	80068dc <prvIdleTask+0x8>
            {
                taskYIELD();
 80068e8:	4b05      	ldr	r3, [pc, #20]	@ (8006900 <prvIdleTask+0x2c>)
 80068ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80068ee:	601a      	str	r2, [r3, #0]
 80068f0:	f3bf 8f4f 	dsb	sy
 80068f4:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80068f8:	e7f0      	b.n	80068dc <prvIdleTask+0x8>
 80068fa:	bf00      	nop
 80068fc:	200001e4 	.word	0x200001e4
 8006900:	e000ed04 	.word	0xe000ed04

08006904 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b082      	sub	sp, #8
 8006908:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800690a:	2300      	movs	r3, #0
 800690c:	607b      	str	r3, [r7, #4]
 800690e:	e00c      	b.n	800692a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006910:	687a      	ldr	r2, [r7, #4]
 8006912:	4613      	mov	r3, r2
 8006914:	009b      	lsls	r3, r3, #2
 8006916:	4413      	add	r3, r2
 8006918:	009b      	lsls	r3, r3, #2
 800691a:	4a12      	ldr	r2, [pc, #72]	@ (8006964 <prvInitialiseTaskLists+0x60>)
 800691c:	4413      	add	r3, r2
 800691e:	4618      	mov	r0, r3
 8006920:	f7fe fada 	bl	8004ed8 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	3301      	adds	r3, #1
 8006928:	607b      	str	r3, [r7, #4]
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2b04      	cmp	r3, #4
 800692e:	d9ef      	bls.n	8006910 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8006930:	480d      	ldr	r0, [pc, #52]	@ (8006968 <prvInitialiseTaskLists+0x64>)
 8006932:	f7fe fad1 	bl	8004ed8 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8006936:	480d      	ldr	r0, [pc, #52]	@ (800696c <prvInitialiseTaskLists+0x68>)
 8006938:	f7fe face 	bl	8004ed8 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800693c:	480c      	ldr	r0, [pc, #48]	@ (8006970 <prvInitialiseTaskLists+0x6c>)
 800693e:	f7fe facb 	bl	8004ed8 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8006942:	480c      	ldr	r0, [pc, #48]	@ (8006974 <prvInitialiseTaskLists+0x70>)
 8006944:	f7fe fac8 	bl	8004ed8 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8006948:	480b      	ldr	r0, [pc, #44]	@ (8006978 <prvInitialiseTaskLists+0x74>)
 800694a:	f7fe fac5 	bl	8004ed8 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800694e:	4b0b      	ldr	r3, [pc, #44]	@ (800697c <prvInitialiseTaskLists+0x78>)
 8006950:	4a05      	ldr	r2, [pc, #20]	@ (8006968 <prvInitialiseTaskLists+0x64>)
 8006952:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006954:	4b0a      	ldr	r3, [pc, #40]	@ (8006980 <prvInitialiseTaskLists+0x7c>)
 8006956:	4a05      	ldr	r2, [pc, #20]	@ (800696c <prvInitialiseTaskLists+0x68>)
 8006958:	601a      	str	r2, [r3, #0]
}
 800695a:	bf00      	nop
 800695c:	3708      	adds	r7, #8
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}
 8006962:	bf00      	nop
 8006964:	200001e4 	.word	0x200001e4
 8006968:	20000248 	.word	0x20000248
 800696c:	2000025c 	.word	0x2000025c
 8006970:	20000278 	.word	0x20000278
 8006974:	2000028c 	.word	0x2000028c
 8006978:	200002a4 	.word	0x200002a4
 800697c:	20000270 	.word	0x20000270
 8006980:	20000274 	.word	0x20000274

08006984 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b082      	sub	sp, #8
 8006988:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800698a:	e019      	b.n	80069c0 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 800698c:	f001 f94e 	bl	8007c2c <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006990:	4b10      	ldr	r3, [pc, #64]	@ (80069d4 <prvCheckTasksWaitingTermination+0x50>)
 8006992:	68db      	ldr	r3, [r3, #12]
 8006994:	68db      	ldr	r3, [r3, #12]
 8006996:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	3304      	adds	r3, #4
 800699c:	4618      	mov	r0, r3
 800699e:	f7fe fb01 	bl	8004fa4 <uxListRemove>
                --uxCurrentNumberOfTasks;
 80069a2:	4b0d      	ldr	r3, [pc, #52]	@ (80069d8 <prvCheckTasksWaitingTermination+0x54>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	3b01      	subs	r3, #1
 80069a8:	4a0b      	ldr	r2, [pc, #44]	@ (80069d8 <prvCheckTasksWaitingTermination+0x54>)
 80069aa:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 80069ac:	4b0b      	ldr	r3, [pc, #44]	@ (80069dc <prvCheckTasksWaitingTermination+0x58>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	3b01      	subs	r3, #1
 80069b2:	4a0a      	ldr	r2, [pc, #40]	@ (80069dc <prvCheckTasksWaitingTermination+0x58>)
 80069b4:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 80069b6:	f001 f96b 	bl	8007c90 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f000 f810 	bl	80069e0 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80069c0:	4b06      	ldr	r3, [pc, #24]	@ (80069dc <prvCheckTasksWaitingTermination+0x58>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d1e1      	bne.n	800698c <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 80069c8:	bf00      	nop
 80069ca:	bf00      	nop
 80069cc:	3708      	adds	r7, #8
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}
 80069d2:	bf00      	nop
 80069d4:	2000028c 	.word	0x2000028c
 80069d8:	200002b8 	.word	0x200002b8
 80069dc:	200002a0 	.word	0x200002a0

080069e0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b082      	sub	sp, #8
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069ec:	4618      	mov	r0, r3
 80069ee:	f001 fb03 	bl	8007ff8 <vPortFree>
            vPortFree( pxTCB );
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f001 fb00 	bl	8007ff8 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80069f8:	bf00      	nop
 80069fa:	3708      	adds	r7, #8
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}

08006a00 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006a00:	b480      	push	{r7}
 8006a02:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a04:	4b0a      	ldr	r3, [pc, #40]	@ (8006a30 <prvResetNextTaskUnblockTime+0x30>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d104      	bne.n	8006a18 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8006a0e:	4b09      	ldr	r3, [pc, #36]	@ (8006a34 <prvResetNextTaskUnblockTime+0x34>)
 8006a10:	f04f 32ff 	mov.w	r2, #4294967295
 8006a14:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8006a16:	e005      	b.n	8006a24 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006a18:	4b05      	ldr	r3, [pc, #20]	@ (8006a30 <prvResetNextTaskUnblockTime+0x30>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	68db      	ldr	r3, [r3, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a04      	ldr	r2, [pc, #16]	@ (8006a34 <prvResetNextTaskUnblockTime+0x34>)
 8006a22:	6013      	str	r3, [r2, #0]
}
 8006a24:	bf00      	nop
 8006a26:	46bd      	mov	sp, r7
 8006a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2c:	4770      	bx	lr
 8006a2e:	bf00      	nop
 8006a30:	20000270 	.word	0x20000270
 8006a34:	200002d8 	.word	0x200002d8

08006a38 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8006a38:	b480      	push	{r7}
 8006a3a:	b083      	sub	sp, #12
 8006a3c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8006a3e:	4b0b      	ldr	r3, [pc, #44]	@ (8006a6c <xTaskGetSchedulerState+0x34>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d102      	bne.n	8006a4c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8006a46:	2301      	movs	r3, #1
 8006a48:	607b      	str	r3, [r7, #4]
 8006a4a:	e008      	b.n	8006a5e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a4c:	4b08      	ldr	r3, [pc, #32]	@ (8006a70 <xTaskGetSchedulerState+0x38>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d102      	bne.n	8006a5a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8006a54:	2302      	movs	r3, #2
 8006a56:	607b      	str	r3, [r7, #4]
 8006a58:	e001      	b.n	8006a5e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8006a5e:	687b      	ldr	r3, [r7, #4]
    }
 8006a60:	4618      	mov	r0, r3
 8006a62:	370c      	adds	r7, #12
 8006a64:	46bd      	mov	sp, r7
 8006a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6a:	4770      	bx	lr
 8006a6c:	200002c4 	.word	0x200002c4
 8006a70:	200002e0 	.word	0x200002e0

08006a74 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b088      	sub	sp, #32
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 8006a80:	2300      	movs	r3, #0
 8006a82:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	f000 808e 	beq.w	8006ba8 <xTaskPriorityDisinherit+0x134>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8006a8c:	4b49      	ldr	r3, [pc, #292]	@ (8006bb4 <xTaskPriorityDisinherit+0x140>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	69ba      	ldr	r2, [r7, #24]
 8006a92:	429a      	cmp	r2, r3
 8006a94:	d00b      	beq.n	8006aae <xTaskPriorityDisinherit+0x3a>
        __asm volatile
 8006a96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a9a:	f383 8811 	msr	BASEPRI, r3
 8006a9e:	f3bf 8f6f 	isb	sy
 8006aa2:	f3bf 8f4f 	dsb	sy
 8006aa6:	613b      	str	r3, [r7, #16]
    }
 8006aa8:	bf00      	nop
 8006aaa:	bf00      	nop
 8006aac:	e7fd      	b.n	8006aaa <xTaskPriorityDisinherit+0x36>
            configASSERT( pxTCB->uxMutexesHeld );
 8006aae:	69bb      	ldr	r3, [r7, #24]
 8006ab0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d10b      	bne.n	8006ace <xTaskPriorityDisinherit+0x5a>
        __asm volatile
 8006ab6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006aba:	f383 8811 	msr	BASEPRI, r3
 8006abe:	f3bf 8f6f 	isb	sy
 8006ac2:	f3bf 8f4f 	dsb	sy
 8006ac6:	60fb      	str	r3, [r7, #12]
    }
 8006ac8:	bf00      	nop
 8006aca:	bf00      	nop
 8006acc:	e7fd      	b.n	8006aca <xTaskPriorityDisinherit+0x56>
            ( pxTCB->uxMutexesHeld )--;
 8006ace:	69bb      	ldr	r3, [r7, #24]
 8006ad0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ad2:	1e5a      	subs	r2, r3, #1
 8006ad4:	69bb      	ldr	r3, [r7, #24]
 8006ad6:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006ad8:	69bb      	ldr	r3, [r7, #24]
 8006ada:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006adc:	69bb      	ldr	r3, [r7, #24]
 8006ade:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006ae0:	429a      	cmp	r2, r3
 8006ae2:	d061      	beq.n	8006ba8 <xTaskPriorityDisinherit+0x134>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006ae4:	69bb      	ldr	r3, [r7, #24]
 8006ae6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d15d      	bne.n	8006ba8 <xTaskPriorityDisinherit+0x134>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006aec:	69bb      	ldr	r3, [r7, #24]
 8006aee:	3304      	adds	r3, #4
 8006af0:	4618      	mov	r0, r3
 8006af2:	f7fe fa57 	bl	8004fa4 <uxListRemove>
 8006af6:	4603      	mov	r3, r0
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d10a      	bne.n	8006b12 <xTaskPriorityDisinherit+0x9e>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8006afc:	69bb      	ldr	r3, [r7, #24]
 8006afe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b00:	2201      	movs	r2, #1
 8006b02:	fa02 f303 	lsl.w	r3, r2, r3
 8006b06:	43da      	mvns	r2, r3
 8006b08:	4b2b      	ldr	r3, [pc, #172]	@ (8006bb8 <xTaskPriorityDisinherit+0x144>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4013      	ands	r3, r2
 8006b0e:	4a2a      	ldr	r2, [pc, #168]	@ (8006bb8 <xTaskPriorityDisinherit+0x144>)
 8006b10:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006b12:	69bb      	ldr	r3, [r7, #24]
 8006b14:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006b16:	69bb      	ldr	r3, [r7, #24]
 8006b18:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b1a:	69bb      	ldr	r3, [r7, #24]
 8006b1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b1e:	f1c3 0205 	rsb	r2, r3, #5
 8006b22:	69bb      	ldr	r3, [r7, #24]
 8006b24:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8006b26:	69bb      	ldr	r3, [r7, #24]
 8006b28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	409a      	lsls	r2, r3
 8006b2e:	4b22      	ldr	r3, [pc, #136]	@ (8006bb8 <xTaskPriorityDisinherit+0x144>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4313      	orrs	r3, r2
 8006b34:	4a20      	ldr	r2, [pc, #128]	@ (8006bb8 <xTaskPriorityDisinherit+0x144>)
 8006b36:	6013      	str	r3, [r2, #0]
 8006b38:	69bb      	ldr	r3, [r7, #24]
 8006b3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b3c:	491f      	ldr	r1, [pc, #124]	@ (8006bbc <xTaskPriorityDisinherit+0x148>)
 8006b3e:	4613      	mov	r3, r2
 8006b40:	009b      	lsls	r3, r3, #2
 8006b42:	4413      	add	r3, r2
 8006b44:	009b      	lsls	r3, r3, #2
 8006b46:	440b      	add	r3, r1
 8006b48:	3304      	adds	r3, #4
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	617b      	str	r3, [r7, #20]
 8006b4e:	69bb      	ldr	r3, [r7, #24]
 8006b50:	697a      	ldr	r2, [r7, #20]
 8006b52:	609a      	str	r2, [r3, #8]
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	689a      	ldr	r2, [r3, #8]
 8006b58:	69bb      	ldr	r3, [r7, #24]
 8006b5a:	60da      	str	r2, [r3, #12]
 8006b5c:	697b      	ldr	r3, [r7, #20]
 8006b5e:	689b      	ldr	r3, [r3, #8]
 8006b60:	69ba      	ldr	r2, [r7, #24]
 8006b62:	3204      	adds	r2, #4
 8006b64:	605a      	str	r2, [r3, #4]
 8006b66:	69bb      	ldr	r3, [r7, #24]
 8006b68:	1d1a      	adds	r2, r3, #4
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	609a      	str	r2, [r3, #8]
 8006b6e:	69bb      	ldr	r3, [r7, #24]
 8006b70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b72:	4613      	mov	r3, r2
 8006b74:	009b      	lsls	r3, r3, #2
 8006b76:	4413      	add	r3, r2
 8006b78:	009b      	lsls	r3, r3, #2
 8006b7a:	4a10      	ldr	r2, [pc, #64]	@ (8006bbc <xTaskPriorityDisinherit+0x148>)
 8006b7c:	441a      	add	r2, r3
 8006b7e:	69bb      	ldr	r3, [r7, #24]
 8006b80:	615a      	str	r2, [r3, #20]
 8006b82:	69bb      	ldr	r3, [r7, #24]
 8006b84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b86:	490d      	ldr	r1, [pc, #52]	@ (8006bbc <xTaskPriorityDisinherit+0x148>)
 8006b88:	4613      	mov	r3, r2
 8006b8a:	009b      	lsls	r3, r3, #2
 8006b8c:	4413      	add	r3, r2
 8006b8e:	009b      	lsls	r3, r3, #2
 8006b90:	440b      	add	r3, r1
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	1c59      	adds	r1, r3, #1
 8006b96:	4809      	ldr	r0, [pc, #36]	@ (8006bbc <xTaskPriorityDisinherit+0x148>)
 8006b98:	4613      	mov	r3, r2
 8006b9a:	009b      	lsls	r3, r3, #2
 8006b9c:	4413      	add	r3, r2
 8006b9e:	009b      	lsls	r3, r3, #2
 8006ba0:	4403      	add	r3, r0
 8006ba2:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8006ba8:	69fb      	ldr	r3, [r7, #28]
    }
 8006baa:	4618      	mov	r0, r3
 8006bac:	3720      	adds	r7, #32
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bd80      	pop	{r7, pc}
 8006bb2:	bf00      	nop
 8006bb4:	200001e0 	.word	0x200001e0
 8006bb8:	200002c0 	.word	0x200002c0
 8006bbc:	200001e4 	.word	0x200001e4

08006bc0 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b086      	sub	sp, #24
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	60f8      	str	r0, [r7, #12]
 8006bc8:	60b9      	str	r1, [r7, #8]
 8006bca:	607a      	str	r2, [r7, #4]
 8006bcc:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d00b      	beq.n	8006bec <xTaskGenericNotifyWait+0x2c>
        __asm volatile
 8006bd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bd8:	f383 8811 	msr	BASEPRI, r3
 8006bdc:	f3bf 8f6f 	isb	sy
 8006be0:	f3bf 8f4f 	dsb	sy
 8006be4:	613b      	str	r3, [r7, #16]
    }
 8006be6:	bf00      	nop
 8006be8:	bf00      	nop
 8006bea:	e7fd      	b.n	8006be8 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8006bec:	f001 f81e 	bl	8007c2c <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8006bf0:	4b31      	ldr	r3, [pc, #196]	@ (8006cb8 <xTaskGenericNotifyWait+0xf8>)
 8006bf2:	681a      	ldr	r2, [r3, #0]
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	4413      	add	r3, r2
 8006bf8:	3354      	adds	r3, #84	@ 0x54
 8006bfa:	781b      	ldrb	r3, [r3, #0]
 8006bfc:	b2db      	uxtb	r3, r3
 8006bfe:	2b02      	cmp	r3, #2
 8006c00:	d022      	beq.n	8006c48 <xTaskGenericNotifyWait+0x88>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8006c02:	4b2d      	ldr	r3, [pc, #180]	@ (8006cb8 <xTaskGenericNotifyWait+0xf8>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	68fa      	ldr	r2, [r7, #12]
 8006c08:	3214      	adds	r2, #20
 8006c0a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006c0e:	68ba      	ldr	r2, [r7, #8]
 8006c10:	43d2      	mvns	r2, r2
 8006c12:	4011      	ands	r1, r2
 8006c14:	68fa      	ldr	r2, [r7, #12]
 8006c16:	3214      	adds	r2, #20
 8006c18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8006c1c:	4b26      	ldr	r3, [pc, #152]	@ (8006cb8 <xTaskGenericNotifyWait+0xf8>)
 8006c1e:	681a      	ldr	r2, [r3, #0]
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	4413      	add	r3, r2
 8006c24:	3354      	adds	r3, #84	@ 0x54
 8006c26:	2201      	movs	r2, #1
 8006c28:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8006c2a:	6a3b      	ldr	r3, [r7, #32]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d00b      	beq.n	8006c48 <xTaskGenericNotifyWait+0x88>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006c30:	2101      	movs	r1, #1
 8006c32:	6a38      	ldr	r0, [r7, #32]
 8006c34:	f000 faca 	bl	80071cc <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8006c38:	4b20      	ldr	r3, [pc, #128]	@ (8006cbc <xTaskGenericNotifyWait+0xfc>)
 8006c3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c3e:	601a      	str	r2, [r3, #0]
 8006c40:	f3bf 8f4f 	dsb	sy
 8006c44:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8006c48:	f001 f822 	bl	8007c90 <vPortExitCritical>

        taskENTER_CRITICAL();
 8006c4c:	f000 ffee 	bl	8007c2c <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );

            if( pulNotificationValue != NULL )
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d007      	beq.n	8006c66 <xTaskGenericNotifyWait+0xa6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8006c56:	4b18      	ldr	r3, [pc, #96]	@ (8006cb8 <xTaskGenericNotifyWait+0xf8>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	68fa      	ldr	r2, [r7, #12]
 8006c5c:	3214      	adds	r2, #20
 8006c5e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8006c66:	4b14      	ldr	r3, [pc, #80]	@ (8006cb8 <xTaskGenericNotifyWait+0xf8>)
 8006c68:	681a      	ldr	r2, [r3, #0]
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	4413      	add	r3, r2
 8006c6e:	3354      	adds	r3, #84	@ 0x54
 8006c70:	781b      	ldrb	r3, [r3, #0]
 8006c72:	b2db      	uxtb	r3, r3
 8006c74:	2b02      	cmp	r3, #2
 8006c76:	d002      	beq.n	8006c7e <xTaskGenericNotifyWait+0xbe>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8006c78:	2300      	movs	r3, #0
 8006c7a:	617b      	str	r3, [r7, #20]
 8006c7c:	e00e      	b.n	8006c9c <xTaskGenericNotifyWait+0xdc>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8006c7e:	4b0e      	ldr	r3, [pc, #56]	@ (8006cb8 <xTaskGenericNotifyWait+0xf8>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	68fa      	ldr	r2, [r7, #12]
 8006c84:	3214      	adds	r2, #20
 8006c86:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006c8a:	687a      	ldr	r2, [r7, #4]
 8006c8c:	43d2      	mvns	r2, r2
 8006c8e:	4011      	ands	r1, r2
 8006c90:	68fa      	ldr	r2, [r7, #12]
 8006c92:	3214      	adds	r2, #20
 8006c94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8006c98:	2301      	movs	r3, #1
 8006c9a:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8006c9c:	4b06      	ldr	r3, [pc, #24]	@ (8006cb8 <xTaskGenericNotifyWait+0xf8>)
 8006c9e:	681a      	ldr	r2, [r3, #0]
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	4413      	add	r3, r2
 8006ca4:	3354      	adds	r3, #84	@ 0x54
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8006caa:	f000 fff1 	bl	8007c90 <vPortExitCritical>

        return xReturn;
 8006cae:	697b      	ldr	r3, [r7, #20]
    }
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	3718      	adds	r7, #24
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bd80      	pop	{r7, pc}
 8006cb8:	200001e0 	.word	0x200001e0
 8006cbc:	e000ed04 	.word	0xe000ed04

08006cc0 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b08e      	sub	sp, #56	@ 0x38
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	60f8      	str	r0, [r7, #12]
 8006cc8:	60b9      	str	r1, [r7, #8]
 8006cca:	607a      	str	r2, [r7, #4]
 8006ccc:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8006cce:	2301      	movs	r3, #1
 8006cd0:	637b      	str	r3, [r7, #52]	@ 0x34
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d00b      	beq.n	8006cf0 <xTaskGenericNotify+0x30>
        __asm volatile
 8006cd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cdc:	f383 8811 	msr	BASEPRI, r3
 8006ce0:	f3bf 8f6f 	isb	sy
 8006ce4:	f3bf 8f4f 	dsb	sy
 8006ce8:	623b      	str	r3, [r7, #32]
    }
 8006cea:	bf00      	nop
 8006cec:	bf00      	nop
 8006cee:	e7fd      	b.n	8006cec <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d10b      	bne.n	8006d0e <xTaskGenericNotify+0x4e>
        __asm volatile
 8006cf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cfa:	f383 8811 	msr	BASEPRI, r3
 8006cfe:	f3bf 8f6f 	isb	sy
 8006d02:	f3bf 8f4f 	dsb	sy
 8006d06:	61fb      	str	r3, [r7, #28]
    }
 8006d08:	bf00      	nop
 8006d0a:	bf00      	nop
 8006d0c:	e7fd      	b.n	8006d0a <xTaskGenericNotify+0x4a>
        pxTCB = xTaskToNotify;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	633b      	str	r3, [r7, #48]	@ 0x30

        taskENTER_CRITICAL();
 8006d12:	f000 ff8b 	bl	8007c2c <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8006d16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d006      	beq.n	8006d2a <xTaskGenericNotify+0x6a>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8006d1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d1e:	68ba      	ldr	r2, [r7, #8]
 8006d20:	3214      	adds	r2, #20
 8006d22:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006d26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d28:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8006d2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	4413      	add	r3, r2
 8006d30:	3354      	adds	r3, #84	@ 0x54
 8006d32:	781b      	ldrb	r3, [r3, #0]
 8006d34:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8006d38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	4413      	add	r3, r2
 8006d3e:	3354      	adds	r3, #84	@ 0x54
 8006d40:	2202      	movs	r2, #2
 8006d42:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8006d44:	78fb      	ldrb	r3, [r7, #3]
 8006d46:	2b04      	cmp	r3, #4
 8006d48:	d83b      	bhi.n	8006dc2 <xTaskGenericNotify+0x102>
 8006d4a:	a201      	add	r2, pc, #4	@ (adr r2, 8006d50 <xTaskGenericNotify+0x90>)
 8006d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d50:	08006de3 	.word	0x08006de3
 8006d54:	08006d65 	.word	0x08006d65
 8006d58:	08006d81 	.word	0x08006d81
 8006d5c:	08006d99 	.word	0x08006d99
 8006d60:	08006da7 	.word	0x08006da7
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8006d64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d66:	68ba      	ldr	r2, [r7, #8]
 8006d68:	3214      	adds	r2, #20
 8006d6a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	ea42 0103 	orr.w	r1, r2, r3
 8006d74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d76:	68ba      	ldr	r2, [r7, #8]
 8006d78:	3214      	adds	r2, #20
 8006d7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006d7e:	e033      	b.n	8006de8 <xTaskGenericNotify+0x128>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8006d80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d82:	68ba      	ldr	r2, [r7, #8]
 8006d84:	3214      	adds	r2, #20
 8006d86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d8a:	1c59      	adds	r1, r3, #1
 8006d8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d8e:	68ba      	ldr	r2, [r7, #8]
 8006d90:	3214      	adds	r2, #20
 8006d92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006d96:	e027      	b.n	8006de8 <xTaskGenericNotify+0x128>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8006d98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d9a:	68ba      	ldr	r2, [r7, #8]
 8006d9c:	3214      	adds	r2, #20
 8006d9e:	6879      	ldr	r1, [r7, #4]
 8006da0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006da4:	e020      	b.n	8006de8 <xTaskGenericNotify+0x128>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8006da6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006daa:	2b02      	cmp	r3, #2
 8006dac:	d006      	beq.n	8006dbc <xTaskGenericNotify+0xfc>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8006dae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006db0:	68ba      	ldr	r2, [r7, #8]
 8006db2:	3214      	adds	r2, #20
 8006db4:	6879      	ldr	r1, [r7, #4]
 8006db6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8006dba:	e015      	b.n	8006de8 <xTaskGenericNotify+0x128>
                        xReturn = pdFAIL;
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	637b      	str	r3, [r7, #52]	@ 0x34
                    break;
 8006dc0:	e012      	b.n	8006de8 <xTaskGenericNotify+0x128>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8006dc2:	4b4d      	ldr	r3, [pc, #308]	@ (8006ef8 <xTaskGenericNotify+0x238>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d00d      	beq.n	8006de6 <xTaskGenericNotify+0x126>
        __asm volatile
 8006dca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dce:	f383 8811 	msr	BASEPRI, r3
 8006dd2:	f3bf 8f6f 	isb	sy
 8006dd6:	f3bf 8f4f 	dsb	sy
 8006dda:	61bb      	str	r3, [r7, #24]
    }
 8006ddc:	bf00      	nop
 8006dde:	bf00      	nop
 8006de0:	e7fd      	b.n	8006dde <xTaskGenericNotify+0x11e>
                    break;
 8006de2:	bf00      	nop
 8006de4:	e000      	b.n	8006de8 <xTaskGenericNotify+0x128>

                    break;
 8006de6:	bf00      	nop

            traceTASK_NOTIFY(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006de8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006dec:	2b01      	cmp	r3, #1
 8006dee:	d17c      	bne.n	8006eea <xTaskGenericNotify+0x22a>
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8006df0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006df2:	695b      	ldr	r3, [r3, #20]
 8006df4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006df6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006df8:	689b      	ldr	r3, [r3, #8]
 8006dfa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006dfc:	68d2      	ldr	r2, [r2, #12]
 8006dfe:	609a      	str	r2, [r3, #8]
 8006e00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e02:	68db      	ldr	r3, [r3, #12]
 8006e04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e06:	6892      	ldr	r2, [r2, #8]
 8006e08:	605a      	str	r2, [r3, #4]
 8006e0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e0c:	685a      	ldr	r2, [r3, #4]
 8006e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e10:	3304      	adds	r3, #4
 8006e12:	429a      	cmp	r2, r3
 8006e14:	d103      	bne.n	8006e1e <xTaskGenericNotify+0x15e>
 8006e16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e18:	68da      	ldr	r2, [r3, #12]
 8006e1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e1c:	605a      	str	r2, [r3, #4]
 8006e1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e20:	2200      	movs	r2, #0
 8006e22:	615a      	str	r2, [r3, #20]
 8006e24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	1e5a      	subs	r2, r3, #1
 8006e2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e2c:	601a      	str	r2, [r3, #0]
                prvAddTaskToReadyList( pxTCB );
 8006e2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e32:	2201      	movs	r2, #1
 8006e34:	409a      	lsls	r2, r3
 8006e36:	4b31      	ldr	r3, [pc, #196]	@ (8006efc <xTaskGenericNotify+0x23c>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	4a2f      	ldr	r2, [pc, #188]	@ (8006efc <xTaskGenericNotify+0x23c>)
 8006e3e:	6013      	str	r3, [r2, #0]
 8006e40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e44:	492e      	ldr	r1, [pc, #184]	@ (8006f00 <xTaskGenericNotify+0x240>)
 8006e46:	4613      	mov	r3, r2
 8006e48:	009b      	lsls	r3, r3, #2
 8006e4a:	4413      	add	r3, r2
 8006e4c:	009b      	lsls	r3, r3, #2
 8006e4e:	440b      	add	r3, r1
 8006e50:	3304      	adds	r3, #4
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e5a:	609a      	str	r2, [r3, #8]
 8006e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e5e:	689a      	ldr	r2, [r3, #8]
 8006e60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e62:	60da      	str	r2, [r3, #12]
 8006e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e66:	689b      	ldr	r3, [r3, #8]
 8006e68:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e6a:	3204      	adds	r2, #4
 8006e6c:	605a      	str	r2, [r3, #4]
 8006e6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e70:	1d1a      	adds	r2, r3, #4
 8006e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e74:	609a      	str	r2, [r3, #8]
 8006e76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e7a:	4613      	mov	r3, r2
 8006e7c:	009b      	lsls	r3, r3, #2
 8006e7e:	4413      	add	r3, r2
 8006e80:	009b      	lsls	r3, r3, #2
 8006e82:	4a1f      	ldr	r2, [pc, #124]	@ (8006f00 <xTaskGenericNotify+0x240>)
 8006e84:	441a      	add	r2, r3
 8006e86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e88:	615a      	str	r2, [r3, #20]
 8006e8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e8e:	491c      	ldr	r1, [pc, #112]	@ (8006f00 <xTaskGenericNotify+0x240>)
 8006e90:	4613      	mov	r3, r2
 8006e92:	009b      	lsls	r3, r3, #2
 8006e94:	4413      	add	r3, r2
 8006e96:	009b      	lsls	r3, r3, #2
 8006e98:	440b      	add	r3, r1
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	1c59      	adds	r1, r3, #1
 8006e9e:	4818      	ldr	r0, [pc, #96]	@ (8006f00 <xTaskGenericNotify+0x240>)
 8006ea0:	4613      	mov	r3, r2
 8006ea2:	009b      	lsls	r3, r3, #2
 8006ea4:	4413      	add	r3, r2
 8006ea6:	009b      	lsls	r3, r3, #2
 8006ea8:	4403      	add	r3, r0
 8006eaa:	6019      	str	r1, [r3, #0]

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006eac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d00b      	beq.n	8006ecc <xTaskGenericNotify+0x20c>
        __asm volatile
 8006eb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eb8:	f383 8811 	msr	BASEPRI, r3
 8006ebc:	f3bf 8f6f 	isb	sy
 8006ec0:	f3bf 8f4f 	dsb	sy
 8006ec4:	617b      	str	r3, [r7, #20]
    }
 8006ec6:	bf00      	nop
 8006ec8:	bf00      	nop
 8006eca:	e7fd      	b.n	8006ec8 <xTaskGenericNotify+0x208>
                     * earliest possible time. */
                    prvResetNextTaskUnblockTime();
                }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006ecc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ece:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ed0:	4b0c      	ldr	r3, [pc, #48]	@ (8006f04 <xTaskGenericNotify+0x244>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ed6:	429a      	cmp	r2, r3
 8006ed8:	d907      	bls.n	8006eea <xTaskGenericNotify+0x22a>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 8006eda:	4b0b      	ldr	r3, [pc, #44]	@ (8006f08 <xTaskGenericNotify+0x248>)
 8006edc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ee0:	601a      	str	r2, [r3, #0]
 8006ee2:	f3bf 8f4f 	dsb	sy
 8006ee6:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8006eea:	f000 fed1 	bl	8007c90 <vPortExitCritical>

        return xReturn;
 8006eee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	3738      	adds	r7, #56	@ 0x38
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bd80      	pop	{r7, pc}
 8006ef8:	200002bc 	.word	0x200002bc
 8006efc:	200002c0 	.word	0x200002c0
 8006f00:	200001e4 	.word	0x200001e4
 8006f04:	200001e0 	.word	0x200001e0
 8006f08:	e000ed04 	.word	0xe000ed04

08006f0c <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b092      	sub	sp, #72	@ 0x48
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	60f8      	str	r0, [r7, #12]
 8006f14:	60b9      	str	r1, [r7, #8]
 8006f16:	607a      	str	r2, [r7, #4]
 8006f18:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	647b      	str	r3, [r7, #68]	@ 0x44
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d10b      	bne.n	8006f3c <xTaskGenericNotifyFromISR+0x30>
        __asm volatile
 8006f24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f28:	f383 8811 	msr	BASEPRI, r3
 8006f2c:	f3bf 8f6f 	isb	sy
 8006f30:	f3bf 8f4f 	dsb	sy
 8006f34:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8006f36:	bf00      	nop
 8006f38:	bf00      	nop
 8006f3a:	e7fd      	b.n	8006f38 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d00b      	beq.n	8006f5a <xTaskGenericNotifyFromISR+0x4e>
        __asm volatile
 8006f42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f46:	f383 8811 	msr	BASEPRI, r3
 8006f4a:	f3bf 8f6f 	isb	sy
 8006f4e:	f3bf 8f4f 	dsb	sy
 8006f52:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8006f54:	bf00      	nop
 8006f56:	bf00      	nop
 8006f58:	e7fd      	b.n	8006f56 <xTaskGenericNotifyFromISR+0x4a>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006f5a:	f000 ff4f 	bl	8007dfc <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	643b      	str	r3, [r7, #64]	@ 0x40
        __asm volatile
 8006f62:	f3ef 8211 	mrs	r2, BASEPRI
 8006f66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f6a:	f383 8811 	msr	BASEPRI, r3
 8006f6e:	f3bf 8f6f 	isb	sy
 8006f72:	f3bf 8f4f 	dsb	sy
 8006f76:	623a      	str	r2, [r7, #32]
 8006f78:	61fb      	str	r3, [r7, #28]
        return ulOriginalBASEPRI;
 8006f7a:	6a3b      	ldr	r3, [r7, #32]

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006f7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        {
            if( pulPreviousNotificationValue != NULL )
 8006f7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d006      	beq.n	8006f92 <xTaskGenericNotifyFromISR+0x86>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8006f84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f86:	68ba      	ldr	r2, [r7, #8]
 8006f88:	3214      	adds	r2, #20
 8006f8a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006f8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006f90:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8006f92:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	4413      	add	r3, r2
 8006f98:	3354      	adds	r3, #84	@ 0x54
 8006f9a:	781b      	ldrb	r3, [r3, #0]
 8006f9c:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8006fa0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	4413      	add	r3, r2
 8006fa6:	3354      	adds	r3, #84	@ 0x54
 8006fa8:	2202      	movs	r2, #2
 8006faa:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8006fac:	78fb      	ldrb	r3, [r7, #3]
 8006fae:	2b04      	cmp	r3, #4
 8006fb0:	d83b      	bhi.n	800702a <xTaskGenericNotifyFromISR+0x11e>
 8006fb2:	a201      	add	r2, pc, #4	@ (adr r2, 8006fb8 <xTaskGenericNotifyFromISR+0xac>)
 8006fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fb8:	0800704b 	.word	0x0800704b
 8006fbc:	08006fcd 	.word	0x08006fcd
 8006fc0:	08006fe9 	.word	0x08006fe9
 8006fc4:	08007001 	.word	0x08007001
 8006fc8:	0800700f 	.word	0x0800700f
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8006fcc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006fce:	68ba      	ldr	r2, [r7, #8]
 8006fd0:	3214      	adds	r2, #20
 8006fd2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	ea42 0103 	orr.w	r1, r2, r3
 8006fdc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006fde:	68ba      	ldr	r2, [r7, #8]
 8006fe0:	3214      	adds	r2, #20
 8006fe2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006fe6:	e033      	b.n	8007050 <xTaskGenericNotifyFromISR+0x144>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8006fe8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006fea:	68ba      	ldr	r2, [r7, #8]
 8006fec:	3214      	adds	r2, #20
 8006fee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ff2:	1c59      	adds	r1, r3, #1
 8006ff4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ff6:	68ba      	ldr	r2, [r7, #8]
 8006ff8:	3214      	adds	r2, #20
 8006ffa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006ffe:	e027      	b.n	8007050 <xTaskGenericNotifyFromISR+0x144>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8007000:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007002:	68ba      	ldr	r2, [r7, #8]
 8007004:	3214      	adds	r2, #20
 8007006:	6879      	ldr	r1, [r7, #4]
 8007008:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800700c:	e020      	b.n	8007050 <xTaskGenericNotifyFromISR+0x144>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800700e:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8007012:	2b02      	cmp	r3, #2
 8007014:	d006      	beq.n	8007024 <xTaskGenericNotifyFromISR+0x118>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8007016:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007018:	68ba      	ldr	r2, [r7, #8]
 800701a:	3214      	adds	r2, #20
 800701c:	6879      	ldr	r1, [r7, #4]
 800701e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8007022:	e015      	b.n	8007050 <xTaskGenericNotifyFromISR+0x144>
                        xReturn = pdFAIL;
 8007024:	2300      	movs	r3, #0
 8007026:	647b      	str	r3, [r7, #68]	@ 0x44
                    break;
 8007028:	e012      	b.n	8007050 <xTaskGenericNotifyFromISR+0x144>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 800702a:	4b61      	ldr	r3, [pc, #388]	@ (80071b0 <xTaskGenericNotifyFromISR+0x2a4>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d00d      	beq.n	800704e <xTaskGenericNotifyFromISR+0x142>
        __asm volatile
 8007032:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007036:	f383 8811 	msr	BASEPRI, r3
 800703a:	f3bf 8f6f 	isb	sy
 800703e:	f3bf 8f4f 	dsb	sy
 8007042:	61bb      	str	r3, [r7, #24]
    }
 8007044:	bf00      	nop
 8007046:	bf00      	nop
 8007048:	e7fd      	b.n	8007046 <xTaskGenericNotifyFromISR+0x13a>
                    break;
 800704a:	bf00      	nop
 800704c:	e000      	b.n	8007050 <xTaskGenericNotifyFromISR+0x144>
                    break;
 800704e:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8007050:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8007054:	2b01      	cmp	r3, #1
 8007056:	f040 809f 	bne.w	8007198 <xTaskGenericNotifyFromISR+0x28c>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800705a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800705c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800705e:	2b00      	cmp	r3, #0
 8007060:	d00b      	beq.n	800707a <xTaskGenericNotifyFromISR+0x16e>
        __asm volatile
 8007062:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007066:	f383 8811 	msr	BASEPRI, r3
 800706a:	f3bf 8f6f 	isb	sy
 800706e:	f3bf 8f4f 	dsb	sy
 8007072:	617b      	str	r3, [r7, #20]
    }
 8007074:	bf00      	nop
 8007076:	bf00      	nop
 8007078:	e7fd      	b.n	8007076 <xTaskGenericNotifyFromISR+0x16a>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800707a:	4b4e      	ldr	r3, [pc, #312]	@ (80071b4 <xTaskGenericNotifyFromISR+0x2a8>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d15e      	bne.n	8007140 <xTaskGenericNotifyFromISR+0x234>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8007082:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007084:	695b      	ldr	r3, [r3, #20]
 8007086:	633b      	str	r3, [r7, #48]	@ 0x30
 8007088:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800708a:	689b      	ldr	r3, [r3, #8]
 800708c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800708e:	68d2      	ldr	r2, [r2, #12]
 8007090:	609a      	str	r2, [r3, #8]
 8007092:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007094:	68db      	ldr	r3, [r3, #12]
 8007096:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007098:	6892      	ldr	r2, [r2, #8]
 800709a:	605a      	str	r2, [r3, #4]
 800709c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800709e:	685a      	ldr	r2, [r3, #4]
 80070a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80070a2:	3304      	adds	r3, #4
 80070a4:	429a      	cmp	r2, r3
 80070a6:	d103      	bne.n	80070b0 <xTaskGenericNotifyFromISR+0x1a4>
 80070a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80070aa:	68da      	ldr	r2, [r3, #12]
 80070ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070ae:	605a      	str	r2, [r3, #4]
 80070b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80070b2:	2200      	movs	r2, #0
 80070b4:	615a      	str	r2, [r3, #20]
 80070b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	1e5a      	subs	r2, r3, #1
 80070bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070be:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80070c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80070c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070c4:	2201      	movs	r2, #1
 80070c6:	409a      	lsls	r2, r3
 80070c8:	4b3b      	ldr	r3, [pc, #236]	@ (80071b8 <xTaskGenericNotifyFromISR+0x2ac>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4313      	orrs	r3, r2
 80070ce:	4a3a      	ldr	r2, [pc, #232]	@ (80071b8 <xTaskGenericNotifyFromISR+0x2ac>)
 80070d0:	6013      	str	r3, [r2, #0]
 80070d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80070d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070d6:	4939      	ldr	r1, [pc, #228]	@ (80071bc <xTaskGenericNotifyFromISR+0x2b0>)
 80070d8:	4613      	mov	r3, r2
 80070da:	009b      	lsls	r3, r3, #2
 80070dc:	4413      	add	r3, r2
 80070de:	009b      	lsls	r3, r3, #2
 80070e0:	440b      	add	r3, r1
 80070e2:	3304      	adds	r3, #4
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80070e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80070ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80070ec:	609a      	str	r2, [r3, #8]
 80070ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070f0:	689a      	ldr	r2, [r3, #8]
 80070f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80070f4:	60da      	str	r2, [r3, #12]
 80070f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070f8:	689b      	ldr	r3, [r3, #8]
 80070fa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80070fc:	3204      	adds	r2, #4
 80070fe:	605a      	str	r2, [r3, #4]
 8007100:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007102:	1d1a      	adds	r2, r3, #4
 8007104:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007106:	609a      	str	r2, [r3, #8]
 8007108:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800710a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800710c:	4613      	mov	r3, r2
 800710e:	009b      	lsls	r3, r3, #2
 8007110:	4413      	add	r3, r2
 8007112:	009b      	lsls	r3, r3, #2
 8007114:	4a29      	ldr	r2, [pc, #164]	@ (80071bc <xTaskGenericNotifyFromISR+0x2b0>)
 8007116:	441a      	add	r2, r3
 8007118:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800711a:	615a      	str	r2, [r3, #20]
 800711c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800711e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007120:	4926      	ldr	r1, [pc, #152]	@ (80071bc <xTaskGenericNotifyFromISR+0x2b0>)
 8007122:	4613      	mov	r3, r2
 8007124:	009b      	lsls	r3, r3, #2
 8007126:	4413      	add	r3, r2
 8007128:	009b      	lsls	r3, r3, #2
 800712a:	440b      	add	r3, r1
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	1c59      	adds	r1, r3, #1
 8007130:	4822      	ldr	r0, [pc, #136]	@ (80071bc <xTaskGenericNotifyFromISR+0x2b0>)
 8007132:	4613      	mov	r3, r2
 8007134:	009b      	lsls	r3, r3, #2
 8007136:	4413      	add	r3, r2
 8007138:	009b      	lsls	r3, r3, #2
 800713a:	4403      	add	r3, r0
 800713c:	6019      	str	r1, [r3, #0]
 800713e:	e01b      	b.n	8007178 <xTaskGenericNotifyFromISR+0x26c>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8007140:	4b1f      	ldr	r3, [pc, #124]	@ (80071c0 <xTaskGenericNotifyFromISR+0x2b4>)
 8007142:	685b      	ldr	r3, [r3, #4]
 8007144:	637b      	str	r3, [r7, #52]	@ 0x34
 8007146:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007148:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800714a:	61da      	str	r2, [r3, #28]
 800714c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800714e:	689a      	ldr	r2, [r3, #8]
 8007150:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007152:	621a      	str	r2, [r3, #32]
 8007154:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007156:	689b      	ldr	r3, [r3, #8]
 8007158:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800715a:	3218      	adds	r2, #24
 800715c:	605a      	str	r2, [r3, #4]
 800715e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007160:	f103 0218 	add.w	r2, r3, #24
 8007164:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007166:	609a      	str	r2, [r3, #8]
 8007168:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800716a:	4a15      	ldr	r2, [pc, #84]	@ (80071c0 <xTaskGenericNotifyFromISR+0x2b4>)
 800716c:	629a      	str	r2, [r3, #40]	@ 0x28
 800716e:	4b14      	ldr	r3, [pc, #80]	@ (80071c0 <xTaskGenericNotifyFromISR+0x2b4>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	3301      	adds	r3, #1
 8007174:	4a12      	ldr	r2, [pc, #72]	@ (80071c0 <xTaskGenericNotifyFromISR+0x2b4>)
 8007176:	6013      	str	r3, [r2, #0]
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007178:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800717a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800717c:	4b11      	ldr	r3, [pc, #68]	@ (80071c4 <xTaskGenericNotifyFromISR+0x2b8>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007182:	429a      	cmp	r2, r3
 8007184:	d908      	bls.n	8007198 <xTaskGenericNotifyFromISR+0x28c>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 8007186:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007188:	2b00      	cmp	r3, #0
 800718a:	d002      	beq.n	8007192 <xTaskGenericNotifyFromISR+0x286>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 800718c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800718e:	2201      	movs	r2, #1
 8007190:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 8007192:	4b0d      	ldr	r3, [pc, #52]	@ (80071c8 <xTaskGenericNotifyFromISR+0x2bc>)
 8007194:	2201      	movs	r2, #1
 8007196:	601a      	str	r2, [r3, #0]
 8007198:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800719a:	613b      	str	r3, [r7, #16]
        __asm volatile
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	f383 8811 	msr	BASEPRI, r3
    }
 80071a2:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 80071a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
    }
 80071a6:	4618      	mov	r0, r3
 80071a8:	3748      	adds	r7, #72	@ 0x48
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bd80      	pop	{r7, pc}
 80071ae:	bf00      	nop
 80071b0:	200002bc 	.word	0x200002bc
 80071b4:	200002e0 	.word	0x200002e0
 80071b8:	200002c0 	.word	0x200002c0
 80071bc:	200001e4 	.word	0x200001e4
 80071c0:	20000278 	.word	0x20000278
 80071c4:	200001e0 	.word	0x200001e0
 80071c8:	200002cc 	.word	0x200002cc

080071cc <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b086      	sub	sp, #24
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
 80071d4:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80071d6:	4b36      	ldr	r3, [pc, #216]	@ (80072b0 <prvAddCurrentTaskToDelayedList+0xe4>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80071dc:	4b35      	ldr	r3, [pc, #212]	@ (80072b4 <prvAddCurrentTaskToDelayedList+0xe8>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	3304      	adds	r3, #4
 80071e2:	4618      	mov	r0, r3
 80071e4:	f7fd fede 	bl	8004fa4 <uxListRemove>
 80071e8:	4603      	mov	r3, r0
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d10b      	bne.n	8007206 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80071ee:	4b31      	ldr	r3, [pc, #196]	@ (80072b4 <prvAddCurrentTaskToDelayedList+0xe8>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071f4:	2201      	movs	r2, #1
 80071f6:	fa02 f303 	lsl.w	r3, r2, r3
 80071fa:	43da      	mvns	r2, r3
 80071fc:	4b2e      	ldr	r3, [pc, #184]	@ (80072b8 <prvAddCurrentTaskToDelayedList+0xec>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4013      	ands	r3, r2
 8007202:	4a2d      	ldr	r2, [pc, #180]	@ (80072b8 <prvAddCurrentTaskToDelayedList+0xec>)
 8007204:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800720c:	d124      	bne.n	8007258 <prvAddCurrentTaskToDelayedList+0x8c>
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d021      	beq.n	8007258 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007214:	4b29      	ldr	r3, [pc, #164]	@ (80072bc <prvAddCurrentTaskToDelayedList+0xf0>)
 8007216:	685b      	ldr	r3, [r3, #4]
 8007218:	613b      	str	r3, [r7, #16]
 800721a:	4b26      	ldr	r3, [pc, #152]	@ (80072b4 <prvAddCurrentTaskToDelayedList+0xe8>)
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	693a      	ldr	r2, [r7, #16]
 8007220:	609a      	str	r2, [r3, #8]
 8007222:	4b24      	ldr	r3, [pc, #144]	@ (80072b4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	693a      	ldr	r2, [r7, #16]
 8007228:	6892      	ldr	r2, [r2, #8]
 800722a:	60da      	str	r2, [r3, #12]
 800722c:	4b21      	ldr	r3, [pc, #132]	@ (80072b4 <prvAddCurrentTaskToDelayedList+0xe8>)
 800722e:	681a      	ldr	r2, [r3, #0]
 8007230:	693b      	ldr	r3, [r7, #16]
 8007232:	689b      	ldr	r3, [r3, #8]
 8007234:	3204      	adds	r2, #4
 8007236:	605a      	str	r2, [r3, #4]
 8007238:	4b1e      	ldr	r3, [pc, #120]	@ (80072b4 <prvAddCurrentTaskToDelayedList+0xe8>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	1d1a      	adds	r2, r3, #4
 800723e:	693b      	ldr	r3, [r7, #16]
 8007240:	609a      	str	r2, [r3, #8]
 8007242:	4b1c      	ldr	r3, [pc, #112]	@ (80072b4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	4a1d      	ldr	r2, [pc, #116]	@ (80072bc <prvAddCurrentTaskToDelayedList+0xf0>)
 8007248:	615a      	str	r2, [r3, #20]
 800724a:	4b1c      	ldr	r3, [pc, #112]	@ (80072bc <prvAddCurrentTaskToDelayedList+0xf0>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	3301      	adds	r3, #1
 8007250:	4a1a      	ldr	r2, [pc, #104]	@ (80072bc <prvAddCurrentTaskToDelayedList+0xf0>)
 8007252:	6013      	str	r3, [r2, #0]
 8007254:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8007256:	e026      	b.n	80072a6 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8007258:	697a      	ldr	r2, [r7, #20]
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	4413      	add	r3, r2
 800725e:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007260:	4b14      	ldr	r3, [pc, #80]	@ (80072b4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	68fa      	ldr	r2, [r7, #12]
 8007266:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8007268:	68fa      	ldr	r2, [r7, #12]
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	429a      	cmp	r2, r3
 800726e:	d209      	bcs.n	8007284 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007270:	4b13      	ldr	r3, [pc, #76]	@ (80072c0 <prvAddCurrentTaskToDelayedList+0xf4>)
 8007272:	681a      	ldr	r2, [r3, #0]
 8007274:	4b0f      	ldr	r3, [pc, #60]	@ (80072b4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	3304      	adds	r3, #4
 800727a:	4619      	mov	r1, r3
 800727c:	4610      	mov	r0, r2
 800727e:	f7fd fe58 	bl	8004f32 <vListInsert>
}
 8007282:	e010      	b.n	80072a6 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007284:	4b0f      	ldr	r3, [pc, #60]	@ (80072c4 <prvAddCurrentTaskToDelayedList+0xf8>)
 8007286:	681a      	ldr	r2, [r3, #0]
 8007288:	4b0a      	ldr	r3, [pc, #40]	@ (80072b4 <prvAddCurrentTaskToDelayedList+0xe8>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	3304      	adds	r3, #4
 800728e:	4619      	mov	r1, r3
 8007290:	4610      	mov	r0, r2
 8007292:	f7fd fe4e 	bl	8004f32 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8007296:	4b0c      	ldr	r3, [pc, #48]	@ (80072c8 <prvAddCurrentTaskToDelayedList+0xfc>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	68fa      	ldr	r2, [r7, #12]
 800729c:	429a      	cmp	r2, r3
 800729e:	d202      	bcs.n	80072a6 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 80072a0:	4a09      	ldr	r2, [pc, #36]	@ (80072c8 <prvAddCurrentTaskToDelayedList+0xfc>)
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	6013      	str	r3, [r2, #0]
}
 80072a6:	bf00      	nop
 80072a8:	3718      	adds	r7, #24
 80072aa:	46bd      	mov	sp, r7
 80072ac:	bd80      	pop	{r7, pc}
 80072ae:	bf00      	nop
 80072b0:	200002bc 	.word	0x200002bc
 80072b4:	200001e0 	.word	0x200001e0
 80072b8:	200002c0 	.word	0x200002c0
 80072bc:	200002a4 	.word	0x200002a4
 80072c0:	20000274 	.word	0x20000274
 80072c4:	20000270 	.word	0x20000270
 80072c8:	200002d8 	.word	0x200002d8

080072cc <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b084      	sub	sp, #16
 80072d0:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80072d2:	2300      	movs	r3, #0
 80072d4:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80072d6:	f000 faf7 	bl	80078c8 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80072da:	4b12      	ldr	r3, [pc, #72]	@ (8007324 <xTimerCreateTimerTask+0x58>)
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d00b      	beq.n	80072fa <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 80072e2:	4b11      	ldr	r3, [pc, #68]	@ (8007328 <xTimerCreateTimerTask+0x5c>)
 80072e4:	9301      	str	r3, [sp, #4]
 80072e6:	2302      	movs	r3, #2
 80072e8:	9300      	str	r3, [sp, #0]
 80072ea:	2300      	movs	r3, #0
 80072ec:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80072f0:	490e      	ldr	r1, [pc, #56]	@ (800732c <xTimerCreateTimerTask+0x60>)
 80072f2:	480f      	ldr	r0, [pc, #60]	@ (8007330 <xTimerCreateTimerTask+0x64>)
 80072f4:	f7fe fc92 	bl	8005c1c <xTaskCreate>
 80072f8:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d10b      	bne.n	8007318 <xTimerCreateTimerTask+0x4c>
        __asm volatile
 8007300:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007304:	f383 8811 	msr	BASEPRI, r3
 8007308:	f3bf 8f6f 	isb	sy
 800730c:	f3bf 8f4f 	dsb	sy
 8007310:	603b      	str	r3, [r7, #0]
    }
 8007312:	bf00      	nop
 8007314:	bf00      	nop
 8007316:	e7fd      	b.n	8007314 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8007318:	687b      	ldr	r3, [r7, #4]
    }
 800731a:	4618      	mov	r0, r3
 800731c:	3708      	adds	r7, #8
 800731e:	46bd      	mov	sp, r7
 8007320:	bd80      	pop	{r7, pc}
 8007322:	bf00      	nop
 8007324:	20000314 	.word	0x20000314
 8007328:	20000318 	.word	0x20000318
 800732c:	08008f5c 	.word	0x08008f5c
 8007330:	08007529 	.word	0x08007529

08007334 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const BaseType_t xAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 8007334:	b580      	push	{r7, lr}
 8007336:	b088      	sub	sp, #32
 8007338:	af02      	add	r7, sp, #8
 800733a:	60f8      	str	r0, [r7, #12]
 800733c:	60b9      	str	r1, [r7, #8]
 800733e:	607a      	str	r2, [r7, #4]
 8007340:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8007342:	202c      	movs	r0, #44	@ 0x2c
 8007344:	f000 fd9c 	bl	8007e80 <pvPortMalloc>
 8007348:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d00d      	beq.n	800736c <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 8007350:	697b      	ldr	r3, [r7, #20]
 8007352:	2200      	movs	r2, #0
 8007354:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, xAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	9301      	str	r3, [sp, #4]
 800735c:	6a3b      	ldr	r3, [r7, #32]
 800735e:	9300      	str	r3, [sp, #0]
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	687a      	ldr	r2, [r7, #4]
 8007364:	68b9      	ldr	r1, [r7, #8]
 8007366:	68f8      	ldr	r0, [r7, #12]
 8007368:	f000 f805 	bl	8007376 <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 800736c:	697b      	ldr	r3, [r7, #20]
        }
 800736e:	4618      	mov	r0, r3
 8007370:	3718      	adds	r7, #24
 8007372:	46bd      	mov	sp, r7
 8007374:	bd80      	pop	{r7, pc}

08007376 <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const BaseType_t xAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 8007376:	b580      	push	{r7, lr}
 8007378:	b086      	sub	sp, #24
 800737a:	af00      	add	r7, sp, #0
 800737c:	60f8      	str	r0, [r7, #12]
 800737e:	60b9      	str	r1, [r7, #8]
 8007380:	607a      	str	r2, [r7, #4]
 8007382:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d10b      	bne.n	80073a2 <prvInitialiseNewTimer+0x2c>
        __asm volatile
 800738a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800738e:	f383 8811 	msr	BASEPRI, r3
 8007392:	f3bf 8f6f 	isb	sy
 8007396:	f3bf 8f4f 	dsb	sy
 800739a:	617b      	str	r3, [r7, #20]
    }
 800739c:	bf00      	nop
 800739e:	bf00      	nop
 80073a0:	e7fd      	b.n	800739e <prvInitialiseNewTimer+0x28>

        /* Ensure the infrastructure used by the timer service task has been
         * created/initialised. */
        prvCheckForValidListAndQueue();
 80073a2:	f000 fa91 	bl	80078c8 <prvCheckForValidListAndQueue>

        /* Initialise the timer structure members using the function
         * parameters. */
        pxNewTimer->pcTimerName = pcTimerName;
 80073a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073a8:	68fa      	ldr	r2, [r7, #12]
 80073aa:	601a      	str	r2, [r3, #0]
        pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80073ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073ae:	68ba      	ldr	r2, [r7, #8]
 80073b0:	619a      	str	r2, [r3, #24]
        pxNewTimer->pvTimerID = pvTimerID;
 80073b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073b4:	683a      	ldr	r2, [r7, #0]
 80073b6:	61da      	str	r2, [r3, #28]
        pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80073b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073ba:	6a3a      	ldr	r2, [r7, #32]
 80073bc:	621a      	str	r2, [r3, #32]
        vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80073be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073c0:	3304      	adds	r3, #4
 80073c2:	4618      	mov	r0, r3
 80073c4:	f7fd fda8 	bl	8004f18 <vListInitialiseItem>

        if( xAutoReload != pdFALSE )
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d008      	beq.n	80073e0 <prvInitialiseNewTimer+0x6a>
        {
            pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80073ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80073d4:	f043 0304 	orr.w	r3, r3, #4
 80073d8:	b2da      	uxtb	r2, r3
 80073da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073dc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        traceTIMER_CREATE( pxNewTimer );
    }
 80073e0:	bf00      	nop
 80073e2:	3718      	adds	r7, #24
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}

080073e8 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b08a      	sub	sp, #40	@ 0x28
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	60f8      	str	r0, [r7, #12]
 80073f0:	60b9      	str	r1, [r7, #8]
 80073f2:	607a      	str	r2, [r7, #4]
 80073f4:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 80073f6:	2300      	movs	r3, #0
 80073f8:	627b      	str	r3, [r7, #36]	@ 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d10b      	bne.n	8007418 <xTimerGenericCommand+0x30>
        __asm volatile
 8007400:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007404:	f383 8811 	msr	BASEPRI, r3
 8007408:	f3bf 8f6f 	isb	sy
 800740c:	f3bf 8f4f 	dsb	sy
 8007410:	623b      	str	r3, [r7, #32]
    }
 8007412:	bf00      	nop
 8007414:	bf00      	nop
 8007416:	e7fd      	b.n	8007414 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8007418:	4b19      	ldr	r3, [pc, #100]	@ (8007480 <xTimerGenericCommand+0x98>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d02a      	beq.n	8007476 <xTimerGenericCommand+0x8e>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	2b05      	cmp	r3, #5
 8007430:	dc18      	bgt.n	8007464 <xTimerGenericCommand+0x7c>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007432:	f7ff fb01 	bl	8006a38 <xTaskGetSchedulerState>
 8007436:	4603      	mov	r3, r0
 8007438:	2b02      	cmp	r3, #2
 800743a:	d109      	bne.n	8007450 <xTimerGenericCommand+0x68>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800743c:	4b10      	ldr	r3, [pc, #64]	@ (8007480 <xTimerGenericCommand+0x98>)
 800743e:	6818      	ldr	r0, [r3, #0]
 8007440:	f107 0114 	add.w	r1, r7, #20
 8007444:	2300      	movs	r3, #0
 8007446:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007448:	f7fd feda 	bl	8005200 <xQueueGenericSend>
 800744c:	6278      	str	r0, [r7, #36]	@ 0x24
 800744e:	e012      	b.n	8007476 <xTimerGenericCommand+0x8e>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007450:	4b0b      	ldr	r3, [pc, #44]	@ (8007480 <xTimerGenericCommand+0x98>)
 8007452:	6818      	ldr	r0, [r3, #0]
 8007454:	f107 0114 	add.w	r1, r7, #20
 8007458:	2300      	movs	r3, #0
 800745a:	2200      	movs	r2, #0
 800745c:	f7fd fed0 	bl	8005200 <xQueueGenericSend>
 8007460:	6278      	str	r0, [r7, #36]	@ 0x24
 8007462:	e008      	b.n	8007476 <xTimerGenericCommand+0x8e>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007464:	4b06      	ldr	r3, [pc, #24]	@ (8007480 <xTimerGenericCommand+0x98>)
 8007466:	6818      	ldr	r0, [r3, #0]
 8007468:	f107 0114 	add.w	r1, r7, #20
 800746c:	2300      	movs	r3, #0
 800746e:	683a      	ldr	r2, [r7, #0]
 8007470:	f7fd ffc8 	bl	8005404 <xQueueGenericSendFromISR>
 8007474:	6278      	str	r0, [r7, #36]	@ 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8007476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8007478:	4618      	mov	r0, r3
 800747a:	3728      	adds	r7, #40	@ 0x28
 800747c:	46bd      	mov	sp, r7
 800747e:	bd80      	pop	{r7, pc}
 8007480:	20000314 	.word	0x20000314

08007484 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8007484:	b580      	push	{r7, lr}
 8007486:	b084      	sub	sp, #16
 8007488:	af00      	add	r7, sp, #0
 800748a:	60f8      	str	r0, [r7, #12]
 800748c:	60b9      	str	r1, [r7, #8]
 800748e:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8007490:	e008      	b.n	80074a4 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	699b      	ldr	r3, [r3, #24]
 8007496:	68ba      	ldr	r2, [r7, #8]
 8007498:	4413      	add	r3, r2
 800749a:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	6a1b      	ldr	r3, [r3, #32]
 80074a0:	68f8      	ldr	r0, [r7, #12]
 80074a2:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	699a      	ldr	r2, [r3, #24]
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	18d1      	adds	r1, r2, r3
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	687a      	ldr	r2, [r7, #4]
 80074b0:	68f8      	ldr	r0, [r7, #12]
 80074b2:	f000 f8df 	bl	8007674 <prvInsertTimerInActiveList>
 80074b6:	4603      	mov	r3, r0
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d1ea      	bne.n	8007492 <prvReloadTimer+0xe>
        }
    }
 80074bc:	bf00      	nop
 80074be:	bf00      	nop
 80074c0:	3710      	adds	r7, #16
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}
	...

080074c8 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b084      	sub	sp, #16
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
 80074d0:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074d2:	4b14      	ldr	r3, [pc, #80]	@ (8007524 <prvProcessExpiredTimer+0x5c>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	68db      	ldr	r3, [r3, #12]
 80074d8:	68db      	ldr	r3, [r3, #12]
 80074da:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	3304      	adds	r3, #4
 80074e0:	4618      	mov	r0, r3
 80074e2:	f7fd fd5f 	bl	8004fa4 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80074ec:	f003 0304 	and.w	r3, r3, #4
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d005      	beq.n	8007500 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 80074f4:	683a      	ldr	r2, [r7, #0]
 80074f6:	6879      	ldr	r1, [r7, #4]
 80074f8:	68f8      	ldr	r0, [r7, #12]
 80074fa:	f7ff ffc3 	bl	8007484 <prvReloadTimer>
 80074fe:	e008      	b.n	8007512 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007506:	f023 0301 	bic.w	r3, r3, #1
 800750a:	b2da      	uxtb	r2, r3
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	6a1b      	ldr	r3, [r3, #32]
 8007516:	68f8      	ldr	r0, [r7, #12]
 8007518:	4798      	blx	r3
    }
 800751a:	bf00      	nop
 800751c:	3710      	adds	r7, #16
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}
 8007522:	bf00      	nop
 8007524:	2000030c 	.word	0x2000030c

08007528 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8007528:	b580      	push	{r7, lr}
 800752a:	b084      	sub	sp, #16
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007530:	f107 0308 	add.w	r3, r7, #8
 8007534:	4618      	mov	r0, r3
 8007536:	f000 f859 	bl	80075ec <prvGetNextExpireTime>
 800753a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	4619      	mov	r1, r3
 8007540:	68f8      	ldr	r0, [r7, #12]
 8007542:	f000 f805 	bl	8007550 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8007546:	f000 f8d7 	bl	80076f8 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800754a:	bf00      	nop
 800754c:	e7f0      	b.n	8007530 <prvTimerTask+0x8>
	...

08007550 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8007550:	b580      	push	{r7, lr}
 8007552:	b084      	sub	sp, #16
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
 8007558:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800755a:	f7fe fd53 	bl	8006004 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800755e:	f107 0308 	add.w	r3, r7, #8
 8007562:	4618      	mov	r0, r3
 8007564:	f000 f866 	bl	8007634 <prvSampleTimeNow>
 8007568:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d130      	bne.n	80075d2 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d10a      	bne.n	800758c <prvProcessTimerOrBlockTask+0x3c>
 8007576:	687a      	ldr	r2, [r7, #4]
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	429a      	cmp	r2, r3
 800757c:	d806      	bhi.n	800758c <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800757e:	f7fe fd4f 	bl	8006020 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007582:	68f9      	ldr	r1, [r7, #12]
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	f7ff ff9f 	bl	80074c8 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800758a:	e024      	b.n	80075d6 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d008      	beq.n	80075a4 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007592:	4b13      	ldr	r3, [pc, #76]	@ (80075e0 <prvProcessTimerOrBlockTask+0x90>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d101      	bne.n	80075a0 <prvProcessTimerOrBlockTask+0x50>
 800759c:	2301      	movs	r3, #1
 800759e:	e000      	b.n	80075a2 <prvProcessTimerOrBlockTask+0x52>
 80075a0:	2300      	movs	r3, #0
 80075a2:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80075a4:	4b0f      	ldr	r3, [pc, #60]	@ (80075e4 <prvProcessTimerOrBlockTask+0x94>)
 80075a6:	6818      	ldr	r0, [r3, #0]
 80075a8:	687a      	ldr	r2, [r7, #4]
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	1ad3      	subs	r3, r2, r3
 80075ae:	683a      	ldr	r2, [r7, #0]
 80075b0:	4619      	mov	r1, r3
 80075b2:	f7fe faff 	bl	8005bb4 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80075b6:	f7fe fd33 	bl	8006020 <xTaskResumeAll>
 80075ba:	4603      	mov	r3, r0
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d10a      	bne.n	80075d6 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80075c0:	4b09      	ldr	r3, [pc, #36]	@ (80075e8 <prvProcessTimerOrBlockTask+0x98>)
 80075c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80075c6:	601a      	str	r2, [r3, #0]
 80075c8:	f3bf 8f4f 	dsb	sy
 80075cc:	f3bf 8f6f 	isb	sy
    }
 80075d0:	e001      	b.n	80075d6 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80075d2:	f7fe fd25 	bl	8006020 <xTaskResumeAll>
    }
 80075d6:	bf00      	nop
 80075d8:	3710      	adds	r7, #16
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}
 80075de:	bf00      	nop
 80075e0:	20000310 	.word	0x20000310
 80075e4:	20000314 	.word	0x20000314
 80075e8:	e000ed04 	.word	0xe000ed04

080075ec <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80075ec:	b480      	push	{r7}
 80075ee:	b085      	sub	sp, #20
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80075f4:	4b0e      	ldr	r3, [pc, #56]	@ (8007630 <prvGetNextExpireTime+0x44>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d101      	bne.n	8007602 <prvGetNextExpireTime+0x16>
 80075fe:	2201      	movs	r2, #1
 8007600:	e000      	b.n	8007604 <prvGetNextExpireTime+0x18>
 8007602:	2200      	movs	r2, #0
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d105      	bne.n	800761c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007610:	4b07      	ldr	r3, [pc, #28]	@ (8007630 <prvGetNextExpireTime+0x44>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	68db      	ldr	r3, [r3, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	60fb      	str	r3, [r7, #12]
 800761a:	e001      	b.n	8007620 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800761c:	2300      	movs	r3, #0
 800761e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8007620:	68fb      	ldr	r3, [r7, #12]
    }
 8007622:	4618      	mov	r0, r3
 8007624:	3714      	adds	r7, #20
 8007626:	46bd      	mov	sp, r7
 8007628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762c:	4770      	bx	lr
 800762e:	bf00      	nop
 8007630:	2000030c 	.word	0x2000030c

08007634 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8007634:	b580      	push	{r7, lr}
 8007636:	b084      	sub	sp, #16
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800763c:	f7fe fdec 	bl	8006218 <xTaskGetTickCount>
 8007640:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8007642:	4b0b      	ldr	r3, [pc, #44]	@ (8007670 <prvSampleTimeNow+0x3c>)
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	68fa      	ldr	r2, [r7, #12]
 8007648:	429a      	cmp	r2, r3
 800764a:	d205      	bcs.n	8007658 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800764c:	f000 f916 	bl	800787c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2201      	movs	r2, #1
 8007654:	601a      	str	r2, [r3, #0]
 8007656:	e002      	b.n	800765e <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2200      	movs	r2, #0
 800765c:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800765e:	4a04      	ldr	r2, [pc, #16]	@ (8007670 <prvSampleTimeNow+0x3c>)
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8007664:	68fb      	ldr	r3, [r7, #12]
    }
 8007666:	4618      	mov	r0, r3
 8007668:	3710      	adds	r7, #16
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}
 800766e:	bf00      	nop
 8007670:	2000031c 	.word	0x2000031c

08007674 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8007674:	b580      	push	{r7, lr}
 8007676:	b086      	sub	sp, #24
 8007678:	af00      	add	r7, sp, #0
 800767a:	60f8      	str	r0, [r7, #12]
 800767c:	60b9      	str	r1, [r7, #8]
 800767e:	607a      	str	r2, [r7, #4]
 8007680:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8007682:	2300      	movs	r3, #0
 8007684:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	68ba      	ldr	r2, [r7, #8]
 800768a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	68fa      	ldr	r2, [r7, #12]
 8007690:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8007692:	68ba      	ldr	r2, [r7, #8]
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	429a      	cmp	r2, r3
 8007698:	d812      	bhi.n	80076c0 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800769a:	687a      	ldr	r2, [r7, #4]
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	1ad2      	subs	r2, r2, r3
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	699b      	ldr	r3, [r3, #24]
 80076a4:	429a      	cmp	r2, r3
 80076a6:	d302      	bcc.n	80076ae <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80076a8:	2301      	movs	r3, #1
 80076aa:	617b      	str	r3, [r7, #20]
 80076ac:	e01b      	b.n	80076e6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80076ae:	4b10      	ldr	r3, [pc, #64]	@ (80076f0 <prvInsertTimerInActiveList+0x7c>)
 80076b0:	681a      	ldr	r2, [r3, #0]
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	3304      	adds	r3, #4
 80076b6:	4619      	mov	r1, r3
 80076b8:	4610      	mov	r0, r2
 80076ba:	f7fd fc3a 	bl	8004f32 <vListInsert>
 80076be:	e012      	b.n	80076e6 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80076c0:	687a      	ldr	r2, [r7, #4]
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	429a      	cmp	r2, r3
 80076c6:	d206      	bcs.n	80076d6 <prvInsertTimerInActiveList+0x62>
 80076c8:	68ba      	ldr	r2, [r7, #8]
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	429a      	cmp	r2, r3
 80076ce:	d302      	bcc.n	80076d6 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80076d0:	2301      	movs	r3, #1
 80076d2:	617b      	str	r3, [r7, #20]
 80076d4:	e007      	b.n	80076e6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80076d6:	4b07      	ldr	r3, [pc, #28]	@ (80076f4 <prvInsertTimerInActiveList+0x80>)
 80076d8:	681a      	ldr	r2, [r3, #0]
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	3304      	adds	r3, #4
 80076de:	4619      	mov	r1, r3
 80076e0:	4610      	mov	r0, r2
 80076e2:	f7fd fc26 	bl	8004f32 <vListInsert>
            }
        }

        return xProcessTimerNow;
 80076e6:	697b      	ldr	r3, [r7, #20]
    }
 80076e8:	4618      	mov	r0, r3
 80076ea:	3718      	adds	r7, #24
 80076ec:	46bd      	mov	sp, r7
 80076ee:	bd80      	pop	{r7, pc}
 80076f0:	20000310 	.word	0x20000310
 80076f4:	2000030c 	.word	0x2000030c

080076f8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b088      	sub	sp, #32
 80076fc:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80076fe:	e0a9      	b.n	8007854 <prvProcessReceivedCommands+0x15c>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	2b00      	cmp	r3, #0
 8007704:	f2c0 80a6 	blt.w	8007854 <prvProcessReceivedCommands+0x15c>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007708:	693b      	ldr	r3, [r7, #16]
 800770a:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800770c:	69fb      	ldr	r3, [r7, #28]
 800770e:	695b      	ldr	r3, [r3, #20]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d004      	beq.n	800771e <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007714:	69fb      	ldr	r3, [r7, #28]
 8007716:	3304      	adds	r3, #4
 8007718:	4618      	mov	r0, r3
 800771a:	f7fd fc43 	bl	8004fa4 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800771e:	1d3b      	adds	r3, r7, #4
 8007720:	4618      	mov	r0, r3
 8007722:	f7ff ff87 	bl	8007634 <prvSampleTimeNow>
 8007726:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	3b01      	subs	r3, #1
 800772c:	2b08      	cmp	r3, #8
 800772e:	f200 808e 	bhi.w	800784e <prvProcessReceivedCommands+0x156>
 8007732:	a201      	add	r2, pc, #4	@ (adr r2, 8007738 <prvProcessReceivedCommands+0x40>)
 8007734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007738:	0800775d 	.word	0x0800775d
 800773c:	0800775d 	.word	0x0800775d
 8007740:	080077c5 	.word	0x080077c5
 8007744:	080077d9 	.word	0x080077d9
 8007748:	08007825 	.word	0x08007825
 800774c:	0800775d 	.word	0x0800775d
 8007750:	0800775d 	.word	0x0800775d
 8007754:	080077c5 	.word	0x080077c5
 8007758:	080077d9 	.word	0x080077d9
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800775c:	69fb      	ldr	r3, [r7, #28]
 800775e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007762:	f043 0301 	orr.w	r3, r3, #1
 8007766:	b2da      	uxtb	r2, r3
 8007768:	69fb      	ldr	r3, [r7, #28]
 800776a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800776e:	68fa      	ldr	r2, [r7, #12]
 8007770:	69fb      	ldr	r3, [r7, #28]
 8007772:	699b      	ldr	r3, [r3, #24]
 8007774:	18d1      	adds	r1, r2, r3
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	69ba      	ldr	r2, [r7, #24]
 800777a:	69f8      	ldr	r0, [r7, #28]
 800777c:	f7ff ff7a 	bl	8007674 <prvInsertTimerInActiveList>
 8007780:	4603      	mov	r3, r0
 8007782:	2b00      	cmp	r3, #0
 8007784:	d065      	beq.n	8007852 <prvProcessReceivedCommands+0x15a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007786:	69fb      	ldr	r3, [r7, #28]
 8007788:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800778c:	f003 0304 	and.w	r3, r3, #4
 8007790:	2b00      	cmp	r3, #0
 8007792:	d009      	beq.n	80077a8 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8007794:	68fa      	ldr	r2, [r7, #12]
 8007796:	69fb      	ldr	r3, [r7, #28]
 8007798:	699b      	ldr	r3, [r3, #24]
 800779a:	4413      	add	r3, r2
 800779c:	69ba      	ldr	r2, [r7, #24]
 800779e:	4619      	mov	r1, r3
 80077a0:	69f8      	ldr	r0, [r7, #28]
 80077a2:	f7ff fe6f 	bl	8007484 <prvReloadTimer>
 80077a6:	e008      	b.n	80077ba <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80077a8:	69fb      	ldr	r3, [r7, #28]
 80077aa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80077ae:	f023 0301 	bic.w	r3, r3, #1
 80077b2:	b2da      	uxtb	r2, r3
 80077b4:	69fb      	ldr	r3, [r7, #28]
 80077b6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80077ba:	69fb      	ldr	r3, [r7, #28]
 80077bc:	6a1b      	ldr	r3, [r3, #32]
 80077be:	69f8      	ldr	r0, [r7, #28]
 80077c0:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 80077c2:	e046      	b.n	8007852 <prvProcessReceivedCommands+0x15a>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80077c4:	69fb      	ldr	r3, [r7, #28]
 80077c6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80077ca:	f023 0301 	bic.w	r3, r3, #1
 80077ce:	b2da      	uxtb	r2, r3
 80077d0:	69fb      	ldr	r3, [r7, #28]
 80077d2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 80077d6:	e03d      	b.n	8007854 <prvProcessReceivedCommands+0x15c>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80077d8:	69fb      	ldr	r3, [r7, #28]
 80077da:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80077de:	f043 0301 	orr.w	r3, r3, #1
 80077e2:	b2da      	uxtb	r2, r3
 80077e4:	69fb      	ldr	r3, [r7, #28]
 80077e6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80077ea:	68fa      	ldr	r2, [r7, #12]
 80077ec:	69fb      	ldr	r3, [r7, #28]
 80077ee:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80077f0:	69fb      	ldr	r3, [r7, #28]
 80077f2:	699b      	ldr	r3, [r3, #24]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d10b      	bne.n	8007810 <prvProcessReceivedCommands+0x118>
        __asm volatile
 80077f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077fc:	f383 8811 	msr	BASEPRI, r3
 8007800:	f3bf 8f6f 	isb	sy
 8007804:	f3bf 8f4f 	dsb	sy
 8007808:	617b      	str	r3, [r7, #20]
    }
 800780a:	bf00      	nop
 800780c:	bf00      	nop
 800780e:	e7fd      	b.n	800780c <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007810:	69fb      	ldr	r3, [r7, #28]
 8007812:	699a      	ldr	r2, [r3, #24]
 8007814:	69bb      	ldr	r3, [r7, #24]
 8007816:	18d1      	adds	r1, r2, r3
 8007818:	69bb      	ldr	r3, [r7, #24]
 800781a:	69ba      	ldr	r2, [r7, #24]
 800781c:	69f8      	ldr	r0, [r7, #28]
 800781e:	f7ff ff29 	bl	8007674 <prvInsertTimerInActiveList>
                        break;
 8007822:	e017      	b.n	8007854 <prvProcessReceivedCommands+0x15c>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007824:	69fb      	ldr	r3, [r7, #28]
 8007826:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800782a:	f003 0302 	and.w	r3, r3, #2
 800782e:	2b00      	cmp	r3, #0
 8007830:	d103      	bne.n	800783a <prvProcessReceivedCommands+0x142>
                            {
                                vPortFree( pxTimer );
 8007832:	69f8      	ldr	r0, [r7, #28]
 8007834:	f000 fbe0 	bl	8007ff8 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8007838:	e00c      	b.n	8007854 <prvProcessReceivedCommands+0x15c>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800783a:	69fb      	ldr	r3, [r7, #28]
 800783c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007840:	f023 0301 	bic.w	r3, r3, #1
 8007844:	b2da      	uxtb	r2, r3
 8007846:	69fb      	ldr	r3, [r7, #28]
 8007848:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800784c:	e002      	b.n	8007854 <prvProcessReceivedCommands+0x15c>

                    default:
                        /* Don't expect to get here. */
                        break;
 800784e:	bf00      	nop
 8007850:	e000      	b.n	8007854 <prvProcessReceivedCommands+0x15c>
                        break;
 8007852:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007854:	4b08      	ldr	r3, [pc, #32]	@ (8007878 <prvProcessReceivedCommands+0x180>)
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f107 0108 	add.w	r1, r7, #8
 800785c:	2200      	movs	r2, #0
 800785e:	4618      	mov	r0, r3
 8007860:	f7fd fe86 	bl	8005570 <xQueueReceive>
 8007864:	4603      	mov	r3, r0
 8007866:	2b00      	cmp	r3, #0
 8007868:	f47f af4a 	bne.w	8007700 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 800786c:	bf00      	nop
 800786e:	bf00      	nop
 8007870:	3720      	adds	r7, #32
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}
 8007876:	bf00      	nop
 8007878:	20000314 	.word	0x20000314

0800787c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800787c:	b580      	push	{r7, lr}
 800787e:	b082      	sub	sp, #8
 8007880:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007882:	e009      	b.n	8007898 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007884:	4b0e      	ldr	r3, [pc, #56]	@ (80078c0 <prvSwitchTimerLists+0x44>)
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	68db      	ldr	r3, [r3, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800788e:	f04f 31ff 	mov.w	r1, #4294967295
 8007892:	6838      	ldr	r0, [r7, #0]
 8007894:	f7ff fe18 	bl	80074c8 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007898:	4b09      	ldr	r3, [pc, #36]	@ (80078c0 <prvSwitchTimerLists+0x44>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d1f0      	bne.n	8007884 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 80078a2:	4b07      	ldr	r3, [pc, #28]	@ (80078c0 <prvSwitchTimerLists+0x44>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 80078a8:	4b06      	ldr	r3, [pc, #24]	@ (80078c4 <prvSwitchTimerLists+0x48>)
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	4a04      	ldr	r2, [pc, #16]	@ (80078c0 <prvSwitchTimerLists+0x44>)
 80078ae:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80078b0:	4a04      	ldr	r2, [pc, #16]	@ (80078c4 <prvSwitchTimerLists+0x48>)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6013      	str	r3, [r2, #0]
    }
 80078b6:	bf00      	nop
 80078b8:	3708      	adds	r7, #8
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd80      	pop	{r7, pc}
 80078be:	bf00      	nop
 80078c0:	2000030c 	.word	0x2000030c
 80078c4:	20000310 	.word	0x20000310

080078c8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80078c8:	b580      	push	{r7, lr}
 80078ca:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80078cc:	f000 f9ae 	bl	8007c2c <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80078d0:	4b12      	ldr	r3, [pc, #72]	@ (800791c <prvCheckForValidListAndQueue+0x54>)
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d11d      	bne.n	8007914 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80078d8:	4811      	ldr	r0, [pc, #68]	@ (8007920 <prvCheckForValidListAndQueue+0x58>)
 80078da:	f7fd fafd 	bl	8004ed8 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80078de:	4811      	ldr	r0, [pc, #68]	@ (8007924 <prvCheckForValidListAndQueue+0x5c>)
 80078e0:	f7fd fafa 	bl	8004ed8 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80078e4:	4b10      	ldr	r3, [pc, #64]	@ (8007928 <prvCheckForValidListAndQueue+0x60>)
 80078e6:	4a0e      	ldr	r2, [pc, #56]	@ (8007920 <prvCheckForValidListAndQueue+0x58>)
 80078e8:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80078ea:	4b10      	ldr	r3, [pc, #64]	@ (800792c <prvCheckForValidListAndQueue+0x64>)
 80078ec:	4a0d      	ldr	r2, [pc, #52]	@ (8007924 <prvCheckForValidListAndQueue+0x5c>)
 80078ee:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80078f0:	2200      	movs	r2, #0
 80078f2:	210c      	movs	r1, #12
 80078f4:	200a      	movs	r0, #10
 80078f6:	f7fd fc11 	bl	800511c <xQueueGenericCreate>
 80078fa:	4603      	mov	r3, r0
 80078fc:	4a07      	ldr	r2, [pc, #28]	@ (800791c <prvCheckForValidListAndQueue+0x54>)
 80078fe:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8007900:	4b06      	ldr	r3, [pc, #24]	@ (800791c <prvCheckForValidListAndQueue+0x54>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d005      	beq.n	8007914 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007908:	4b04      	ldr	r3, [pc, #16]	@ (800791c <prvCheckForValidListAndQueue+0x54>)
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	4908      	ldr	r1, [pc, #32]	@ (8007930 <prvCheckForValidListAndQueue+0x68>)
 800790e:	4618      	mov	r0, r3
 8007910:	f7fe f900 	bl	8005b14 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8007914:	f000 f9bc 	bl	8007c90 <vPortExitCritical>
    }
 8007918:	bf00      	nop
 800791a:	bd80      	pop	{r7, pc}
 800791c:	20000314 	.word	0x20000314
 8007920:	200002e4 	.word	0x200002e4
 8007924:	200002f8 	.word	0x200002f8
 8007928:	2000030c 	.word	0x2000030c
 800792c:	20000310 	.word	0x20000310
 8007930:	08008f64 	.word	0x08008f64

08007934 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

    BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
    {
 8007934:	b580      	push	{r7, lr}
 8007936:	b086      	sub	sp, #24
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn;
        Timer_t * pxTimer = xTimer;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	613b      	str	r3, [r7, #16]

        configASSERT( xTimer );
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d10b      	bne.n	800795e <xTimerIsTimerActive+0x2a>
        __asm volatile
 8007946:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800794a:	f383 8811 	msr	BASEPRI, r3
 800794e:	f3bf 8f6f 	isb	sy
 8007952:	f3bf 8f4f 	dsb	sy
 8007956:	60fb      	str	r3, [r7, #12]
    }
 8007958:	bf00      	nop
 800795a:	bf00      	nop
 800795c:	e7fd      	b.n	800795a <xTimerIsTimerActive+0x26>

        /* Is the timer in the list of active timers? */
        taskENTER_CRITICAL();
 800795e:	f000 f965 	bl	8007c2c <vPortEnterCritical>
        {
            if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 8007962:	693b      	ldr	r3, [r7, #16]
 8007964:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007968:	f003 0301 	and.w	r3, r3, #1
 800796c:	2b00      	cmp	r3, #0
 800796e:	d102      	bne.n	8007976 <xTimerIsTimerActive+0x42>
            {
                xReturn = pdFALSE;
 8007970:	2300      	movs	r3, #0
 8007972:	617b      	str	r3, [r7, #20]
 8007974:	e001      	b.n	800797a <xTimerIsTimerActive+0x46>
            }
            else
            {
                xReturn = pdTRUE;
 8007976:	2301      	movs	r3, #1
 8007978:	617b      	str	r3, [r7, #20]
            }
        }
        taskEXIT_CRITICAL();
 800797a:	f000 f989 	bl	8007c90 <vPortExitCritical>

        return xReturn;
 800797e:	697b      	ldr	r3, [r7, #20]
    } /*lint !e818 Can't be pointer to const due to the typedef. */
 8007980:	4618      	mov	r0, r3
 8007982:	3718      	adds	r7, #24
 8007984:	46bd      	mov	sp, r7
 8007986:	bd80      	pop	{r7, pc}

08007988 <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

    void * pvTimerGetTimerID( const TimerHandle_t xTimer )
    {
 8007988:	b580      	push	{r7, lr}
 800798a:	b086      	sub	sp, #24
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
        Timer_t * const pxTimer = xTimer;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	617b      	str	r3, [r7, #20]
        void * pvReturn;

        configASSERT( xTimer );
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d10b      	bne.n	80079b2 <pvTimerGetTimerID+0x2a>
        __asm volatile
 800799a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800799e:	f383 8811 	msr	BASEPRI, r3
 80079a2:	f3bf 8f6f 	isb	sy
 80079a6:	f3bf 8f4f 	dsb	sy
 80079aa:	60fb      	str	r3, [r7, #12]
    }
 80079ac:	bf00      	nop
 80079ae:	bf00      	nop
 80079b0:	e7fd      	b.n	80079ae <pvTimerGetTimerID+0x26>

        taskENTER_CRITICAL();
 80079b2:	f000 f93b 	bl	8007c2c <vPortEnterCritical>
        {
            pvReturn = pxTimer->pvTimerID;
 80079b6:	697b      	ldr	r3, [r7, #20]
 80079b8:	69db      	ldr	r3, [r3, #28]
 80079ba:	613b      	str	r3, [r7, #16]
        }
        taskEXIT_CRITICAL();
 80079bc:	f000 f968 	bl	8007c90 <vPortExitCritical>

        return pvReturn;
 80079c0:	693b      	ldr	r3, [r7, #16]
    }
 80079c2:	4618      	mov	r0, r3
 80079c4:	3718      	adds	r7, #24
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}
	...

080079cc <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80079cc:	b480      	push	{r7}
 80079ce:	b085      	sub	sp, #20
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	60f8      	str	r0, [r7, #12]
 80079d4:	60b9      	str	r1, [r7, #8]
 80079d6:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	3b04      	subs	r3, #4
 80079dc:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80079e4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	3b04      	subs	r3, #4
 80079ea:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	f023 0201 	bic.w	r2, r3, #1
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	3b04      	subs	r3, #4
 80079fa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80079fc:	4a0c      	ldr	r2, [pc, #48]	@ (8007a30 <pxPortInitialiseStack+0x64>)
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	3b14      	subs	r3, #20
 8007a06:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8007a08:	687a      	ldr	r2, [r7, #4]
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	3b04      	subs	r3, #4
 8007a12:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	f06f 0202 	mvn.w	r2, #2
 8007a1a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	3b20      	subs	r3, #32
 8007a20:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8007a22:	68fb      	ldr	r3, [r7, #12]
}
 8007a24:	4618      	mov	r0, r3
 8007a26:	3714      	adds	r7, #20
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2e:	4770      	bx	lr
 8007a30:	08007a35 	.word	0x08007a35

08007a34 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007a34:	b480      	push	{r7}
 8007a36:	b085      	sub	sp, #20
 8007a38:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8007a3e:	4b13      	ldr	r3, [pc, #76]	@ (8007a8c <prvTaskExitError+0x58>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a46:	d00b      	beq.n	8007a60 <prvTaskExitError+0x2c>
        __asm volatile
 8007a48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a4c:	f383 8811 	msr	BASEPRI, r3
 8007a50:	f3bf 8f6f 	isb	sy
 8007a54:	f3bf 8f4f 	dsb	sy
 8007a58:	60fb      	str	r3, [r7, #12]
    }
 8007a5a:	bf00      	nop
 8007a5c:	bf00      	nop
 8007a5e:	e7fd      	b.n	8007a5c <prvTaskExitError+0x28>
        __asm volatile
 8007a60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a64:	f383 8811 	msr	BASEPRI, r3
 8007a68:	f3bf 8f6f 	isb	sy
 8007a6c:	f3bf 8f4f 	dsb	sy
 8007a70:	60bb      	str	r3, [r7, #8]
    }
 8007a72:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8007a74:	bf00      	nop
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d0fc      	beq.n	8007a76 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8007a7c:	bf00      	nop
 8007a7e:	bf00      	nop
 8007a80:	3714      	adds	r7, #20
 8007a82:	46bd      	mov	sp, r7
 8007a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a88:	4770      	bx	lr
 8007a8a:	bf00      	nop
 8007a8c:	20000018 	.word	0x20000018

08007a90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8007a90:	4b07      	ldr	r3, [pc, #28]	@ (8007ab0 <pxCurrentTCBConst2>)
 8007a92:	6819      	ldr	r1, [r3, #0]
 8007a94:	6808      	ldr	r0, [r1, #0]
 8007a96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a9a:	f380 8809 	msr	PSP, r0
 8007a9e:	f3bf 8f6f 	isb	sy
 8007aa2:	f04f 0000 	mov.w	r0, #0
 8007aa6:	f380 8811 	msr	BASEPRI, r0
 8007aaa:	4770      	bx	lr
 8007aac:	f3af 8000 	nop.w

08007ab0 <pxCurrentTCBConst2>:
 8007ab0:	200001e0 	.word	0x200001e0
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8007ab4:	bf00      	nop
 8007ab6:	bf00      	nop

08007ab8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8007ab8:	4808      	ldr	r0, [pc, #32]	@ (8007adc <prvPortStartFirstTask+0x24>)
 8007aba:	6800      	ldr	r0, [r0, #0]
 8007abc:	6800      	ldr	r0, [r0, #0]
 8007abe:	f380 8808 	msr	MSP, r0
 8007ac2:	f04f 0000 	mov.w	r0, #0
 8007ac6:	f380 8814 	msr	CONTROL, r0
 8007aca:	b662      	cpsie	i
 8007acc:	b661      	cpsie	f
 8007ace:	f3bf 8f4f 	dsb	sy
 8007ad2:	f3bf 8f6f 	isb	sy
 8007ad6:	df00      	svc	0
 8007ad8:	bf00      	nop
 8007ada:	0000      	.short	0x0000
 8007adc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8007ae0:	bf00      	nop
 8007ae2:	bf00      	nop

08007ae4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b086      	sub	sp, #24
 8007ae8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007aea:	4b47      	ldr	r3, [pc, #284]	@ (8007c08 <xPortStartScheduler+0x124>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	4a47      	ldr	r2, [pc, #284]	@ (8007c0c <xPortStartScheduler+0x128>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d10b      	bne.n	8007b0c <xPortStartScheduler+0x28>
        __asm volatile
 8007af4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007af8:	f383 8811 	msr	BASEPRI, r3
 8007afc:	f3bf 8f6f 	isb	sy
 8007b00:	f3bf 8f4f 	dsb	sy
 8007b04:	613b      	str	r3, [r7, #16]
    }
 8007b06:	bf00      	nop
 8007b08:	bf00      	nop
 8007b0a:	e7fd      	b.n	8007b08 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007b0c:	4b3e      	ldr	r3, [pc, #248]	@ (8007c08 <xPortStartScheduler+0x124>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	4a3f      	ldr	r2, [pc, #252]	@ (8007c10 <xPortStartScheduler+0x12c>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d10b      	bne.n	8007b2e <xPortStartScheduler+0x4a>
        __asm volatile
 8007b16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b1a:	f383 8811 	msr	BASEPRI, r3
 8007b1e:	f3bf 8f6f 	isb	sy
 8007b22:	f3bf 8f4f 	dsb	sy
 8007b26:	60fb      	str	r3, [r7, #12]
    }
 8007b28:	bf00      	nop
 8007b2a:	bf00      	nop
 8007b2c:	e7fd      	b.n	8007b2a <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007b2e:	4b39      	ldr	r3, [pc, #228]	@ (8007c14 <xPortStartScheduler+0x130>)
 8007b30:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007b32:	697b      	ldr	r3, [r7, #20]
 8007b34:	781b      	ldrb	r3, [r3, #0]
 8007b36:	b2db      	uxtb	r3, r3
 8007b38:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007b3a:	697b      	ldr	r3, [r7, #20]
 8007b3c:	22ff      	movs	r2, #255	@ 0xff
 8007b3e:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007b40:	697b      	ldr	r3, [r7, #20]
 8007b42:	781b      	ldrb	r3, [r3, #0]
 8007b44:	b2db      	uxtb	r3, r3
 8007b46:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007b48:	78fb      	ldrb	r3, [r7, #3]
 8007b4a:	b2db      	uxtb	r3, r3
 8007b4c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007b50:	b2da      	uxtb	r2, r3
 8007b52:	4b31      	ldr	r3, [pc, #196]	@ (8007c18 <xPortStartScheduler+0x134>)
 8007b54:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007b56:	4b31      	ldr	r3, [pc, #196]	@ (8007c1c <xPortStartScheduler+0x138>)
 8007b58:	2207      	movs	r2, #7
 8007b5a:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007b5c:	e009      	b.n	8007b72 <xPortStartScheduler+0x8e>
        {
            ulMaxPRIGROUPValue--;
 8007b5e:	4b2f      	ldr	r3, [pc, #188]	@ (8007c1c <xPortStartScheduler+0x138>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	3b01      	subs	r3, #1
 8007b64:	4a2d      	ldr	r2, [pc, #180]	@ (8007c1c <xPortStartScheduler+0x138>)
 8007b66:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007b68:	78fb      	ldrb	r3, [r7, #3]
 8007b6a:	b2db      	uxtb	r3, r3
 8007b6c:	005b      	lsls	r3, r3, #1
 8007b6e:	b2db      	uxtb	r3, r3
 8007b70:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007b72:	78fb      	ldrb	r3, [r7, #3]
 8007b74:	b2db      	uxtb	r3, r3
 8007b76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b7a:	2b80      	cmp	r3, #128	@ 0x80
 8007b7c:	d0ef      	beq.n	8007b5e <xPortStartScheduler+0x7a>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007b7e:	4b27      	ldr	r3, [pc, #156]	@ (8007c1c <xPortStartScheduler+0x138>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f1c3 0307 	rsb	r3, r3, #7
 8007b86:	2b04      	cmp	r3, #4
 8007b88:	d00b      	beq.n	8007ba2 <xPortStartScheduler+0xbe>
        __asm volatile
 8007b8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b8e:	f383 8811 	msr	BASEPRI, r3
 8007b92:	f3bf 8f6f 	isb	sy
 8007b96:	f3bf 8f4f 	dsb	sy
 8007b9a:	60bb      	str	r3, [r7, #8]
    }
 8007b9c:	bf00      	nop
 8007b9e:	bf00      	nop
 8007ba0:	e7fd      	b.n	8007b9e <xPortStartScheduler+0xba>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007ba2:	4b1e      	ldr	r3, [pc, #120]	@ (8007c1c <xPortStartScheduler+0x138>)
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	021b      	lsls	r3, r3, #8
 8007ba8:	4a1c      	ldr	r2, [pc, #112]	@ (8007c1c <xPortStartScheduler+0x138>)
 8007baa:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007bac:	4b1b      	ldr	r3, [pc, #108]	@ (8007c1c <xPortStartScheduler+0x138>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007bb4:	4a19      	ldr	r2, [pc, #100]	@ (8007c1c <xPortStartScheduler+0x138>)
 8007bb6:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	b2da      	uxtb	r2, r3
 8007bbc:	697b      	ldr	r3, [r7, #20]
 8007bbe:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8007bc0:	4b17      	ldr	r3, [pc, #92]	@ (8007c20 <xPortStartScheduler+0x13c>)
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	4a16      	ldr	r2, [pc, #88]	@ (8007c20 <xPortStartScheduler+0x13c>)
 8007bc6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007bca:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8007bcc:	4b14      	ldr	r3, [pc, #80]	@ (8007c20 <xPortStartScheduler+0x13c>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	4a13      	ldr	r2, [pc, #76]	@ (8007c20 <xPortStartScheduler+0x13c>)
 8007bd2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007bd6:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8007bd8:	f000 f8e0 	bl	8007d9c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8007bdc:	4b11      	ldr	r3, [pc, #68]	@ (8007c24 <xPortStartScheduler+0x140>)
 8007bde:	2200      	movs	r2, #0
 8007be0:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8007be2:	f000 f8ff 	bl	8007de4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007be6:	4b10      	ldr	r3, [pc, #64]	@ (8007c28 <xPortStartScheduler+0x144>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	4a0f      	ldr	r2, [pc, #60]	@ (8007c28 <xPortStartScheduler+0x144>)
 8007bec:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8007bf0:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8007bf2:	f7ff ff61 	bl	8007ab8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8007bf6:	f7fe fc43 	bl	8006480 <vTaskSwitchContext>
    prvTaskExitError();
 8007bfa:	f7ff ff1b 	bl	8007a34 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8007bfe:	2300      	movs	r3, #0
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	3718      	adds	r7, #24
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bd80      	pop	{r7, pc}
 8007c08:	e000ed00 	.word	0xe000ed00
 8007c0c:	410fc271 	.word	0x410fc271
 8007c10:	410fc270 	.word	0x410fc270
 8007c14:	e000e400 	.word	0xe000e400
 8007c18:	20000320 	.word	0x20000320
 8007c1c:	20000324 	.word	0x20000324
 8007c20:	e000ed20 	.word	0xe000ed20
 8007c24:	20000018 	.word	0x20000018
 8007c28:	e000ef34 	.word	0xe000ef34

08007c2c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	b083      	sub	sp, #12
 8007c30:	af00      	add	r7, sp, #0
        __asm volatile
 8007c32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c36:	f383 8811 	msr	BASEPRI, r3
 8007c3a:	f3bf 8f6f 	isb	sy
 8007c3e:	f3bf 8f4f 	dsb	sy
 8007c42:	607b      	str	r3, [r7, #4]
    }
 8007c44:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8007c46:	4b10      	ldr	r3, [pc, #64]	@ (8007c88 <vPortEnterCritical+0x5c>)
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	3301      	adds	r3, #1
 8007c4c:	4a0e      	ldr	r2, [pc, #56]	@ (8007c88 <vPortEnterCritical+0x5c>)
 8007c4e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8007c50:	4b0d      	ldr	r3, [pc, #52]	@ (8007c88 <vPortEnterCritical+0x5c>)
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	2b01      	cmp	r3, #1
 8007c56:	d110      	bne.n	8007c7a <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007c58:	4b0c      	ldr	r3, [pc, #48]	@ (8007c8c <vPortEnterCritical+0x60>)
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	b2db      	uxtb	r3, r3
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d00b      	beq.n	8007c7a <vPortEnterCritical+0x4e>
        __asm volatile
 8007c62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c66:	f383 8811 	msr	BASEPRI, r3
 8007c6a:	f3bf 8f6f 	isb	sy
 8007c6e:	f3bf 8f4f 	dsb	sy
 8007c72:	603b      	str	r3, [r7, #0]
    }
 8007c74:	bf00      	nop
 8007c76:	bf00      	nop
 8007c78:	e7fd      	b.n	8007c76 <vPortEnterCritical+0x4a>
    }
}
 8007c7a:	bf00      	nop
 8007c7c:	370c      	adds	r7, #12
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c84:	4770      	bx	lr
 8007c86:	bf00      	nop
 8007c88:	20000018 	.word	0x20000018
 8007c8c:	e000ed04 	.word	0xe000ed04

08007c90 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007c90:	b480      	push	{r7}
 8007c92:	b083      	sub	sp, #12
 8007c94:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8007c96:	4b12      	ldr	r3, [pc, #72]	@ (8007ce0 <vPortExitCritical+0x50>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d10b      	bne.n	8007cb6 <vPortExitCritical+0x26>
        __asm volatile
 8007c9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ca2:	f383 8811 	msr	BASEPRI, r3
 8007ca6:	f3bf 8f6f 	isb	sy
 8007caa:	f3bf 8f4f 	dsb	sy
 8007cae:	607b      	str	r3, [r7, #4]
    }
 8007cb0:	bf00      	nop
 8007cb2:	bf00      	nop
 8007cb4:	e7fd      	b.n	8007cb2 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8007cb6:	4b0a      	ldr	r3, [pc, #40]	@ (8007ce0 <vPortExitCritical+0x50>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	3b01      	subs	r3, #1
 8007cbc:	4a08      	ldr	r2, [pc, #32]	@ (8007ce0 <vPortExitCritical+0x50>)
 8007cbe:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8007cc0:	4b07      	ldr	r3, [pc, #28]	@ (8007ce0 <vPortExitCritical+0x50>)
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d105      	bne.n	8007cd4 <vPortExitCritical+0x44>
 8007cc8:	2300      	movs	r3, #0
 8007cca:	603b      	str	r3, [r7, #0]
        __asm volatile
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	f383 8811 	msr	BASEPRI, r3
    }
 8007cd2:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8007cd4:	bf00      	nop
 8007cd6:	370c      	adds	r7, #12
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cde:	4770      	bx	lr
 8007ce0:	20000018 	.word	0x20000018
	...

08007cf0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8007cf0:	f3ef 8009 	mrs	r0, PSP
 8007cf4:	f3bf 8f6f 	isb	sy
 8007cf8:	4b15      	ldr	r3, [pc, #84]	@ (8007d50 <pxCurrentTCBConst>)
 8007cfa:	681a      	ldr	r2, [r3, #0]
 8007cfc:	f01e 0f10 	tst.w	lr, #16
 8007d00:	bf08      	it	eq
 8007d02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007d06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d0a:	6010      	str	r0, [r2, #0]
 8007d0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007d10:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007d14:	f380 8811 	msr	BASEPRI, r0
 8007d18:	f3bf 8f4f 	dsb	sy
 8007d1c:	f3bf 8f6f 	isb	sy
 8007d20:	f7fe fbae 	bl	8006480 <vTaskSwitchContext>
 8007d24:	f04f 0000 	mov.w	r0, #0
 8007d28:	f380 8811 	msr	BASEPRI, r0
 8007d2c:	bc09      	pop	{r0, r3}
 8007d2e:	6819      	ldr	r1, [r3, #0]
 8007d30:	6808      	ldr	r0, [r1, #0]
 8007d32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d36:	f01e 0f10 	tst.w	lr, #16
 8007d3a:	bf08      	it	eq
 8007d3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007d40:	f380 8809 	msr	PSP, r0
 8007d44:	f3bf 8f6f 	isb	sy
 8007d48:	4770      	bx	lr
 8007d4a:	bf00      	nop
 8007d4c:	f3af 8000 	nop.w

08007d50 <pxCurrentTCBConst>:
 8007d50:	200001e0 	.word	0x200001e0
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8007d54:	bf00      	nop
 8007d56:	bf00      	nop

08007d58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b082      	sub	sp, #8
 8007d5c:	af00      	add	r7, sp, #0
        __asm volatile
 8007d5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d62:	f383 8811 	msr	BASEPRI, r3
 8007d66:	f3bf 8f6f 	isb	sy
 8007d6a:	f3bf 8f4f 	dsb	sy
 8007d6e:	607b      	str	r3, [r7, #4]
    }
 8007d70:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8007d72:	f7fe fa6d 	bl	8006250 <xTaskIncrementTick>
 8007d76:	4603      	mov	r3, r0
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d003      	beq.n	8007d84 <SysTick_Handler+0x2c>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007d7c:	4b06      	ldr	r3, [pc, #24]	@ (8007d98 <SysTick_Handler+0x40>)
 8007d7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d82:	601a      	str	r2, [r3, #0]
 8007d84:	2300      	movs	r3, #0
 8007d86:	603b      	str	r3, [r7, #0]
        __asm volatile
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	f383 8811 	msr	BASEPRI, r3
    }
 8007d8e:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 8007d90:	bf00      	nop
 8007d92:	3708      	adds	r7, #8
 8007d94:	46bd      	mov	sp, r7
 8007d96:	bd80      	pop	{r7, pc}
 8007d98:	e000ed04 	.word	0xe000ed04

08007d9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8007d9c:	b480      	push	{r7}
 8007d9e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007da0:	4b0b      	ldr	r3, [pc, #44]	@ (8007dd0 <vPortSetupTimerInterrupt+0x34>)
 8007da2:	2200      	movs	r2, #0
 8007da4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007da6:	4b0b      	ldr	r3, [pc, #44]	@ (8007dd4 <vPortSetupTimerInterrupt+0x38>)
 8007da8:	2200      	movs	r2, #0
 8007daa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007dac:	4b0a      	ldr	r3, [pc, #40]	@ (8007dd8 <vPortSetupTimerInterrupt+0x3c>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	4a0a      	ldr	r2, [pc, #40]	@ (8007ddc <vPortSetupTimerInterrupt+0x40>)
 8007db2:	fba2 2303 	umull	r2, r3, r2, r3
 8007db6:	099b      	lsrs	r3, r3, #6
 8007db8:	4a09      	ldr	r2, [pc, #36]	@ (8007de0 <vPortSetupTimerInterrupt+0x44>)
 8007dba:	3b01      	subs	r3, #1
 8007dbc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007dbe:	4b04      	ldr	r3, [pc, #16]	@ (8007dd0 <vPortSetupTimerInterrupt+0x34>)
 8007dc0:	2207      	movs	r2, #7
 8007dc2:	601a      	str	r2, [r3, #0]
}
 8007dc4:	bf00      	nop
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dcc:	4770      	bx	lr
 8007dce:	bf00      	nop
 8007dd0:	e000e010 	.word	0xe000e010
 8007dd4:	e000e018 	.word	0xe000e018
 8007dd8:	20000004 	.word	0x20000004
 8007ddc:	10624dd3 	.word	0x10624dd3
 8007de0:	e000e014 	.word	0xe000e014

08007de4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8007de4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007df4 <vPortEnableVFP+0x10>
 8007de8:	6801      	ldr	r1, [r0, #0]
 8007dea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007dee:	6001      	str	r1, [r0, #0]
 8007df0:	4770      	bx	lr
 8007df2:	0000      	.short	0x0000
 8007df4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8007df8:	bf00      	nop
 8007dfa:	bf00      	nop

08007dfc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8007dfc:	b480      	push	{r7}
 8007dfe:	b085      	sub	sp, #20
 8007e00:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8007e02:	f3ef 8305 	mrs	r3, IPSR
 8007e06:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	2b0f      	cmp	r3, #15
 8007e0c:	d915      	bls.n	8007e3a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007e0e:	4a18      	ldr	r2, [pc, #96]	@ (8007e70 <vPortValidateInterruptPriority+0x74>)
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	4413      	add	r3, r2
 8007e14:	781b      	ldrb	r3, [r3, #0]
 8007e16:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007e18:	4b16      	ldr	r3, [pc, #88]	@ (8007e74 <vPortValidateInterruptPriority+0x78>)
 8007e1a:	781b      	ldrb	r3, [r3, #0]
 8007e1c:	7afa      	ldrb	r2, [r7, #11]
 8007e1e:	429a      	cmp	r2, r3
 8007e20:	d20b      	bcs.n	8007e3a <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 8007e22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e26:	f383 8811 	msr	BASEPRI, r3
 8007e2a:	f3bf 8f6f 	isb	sy
 8007e2e:	f3bf 8f4f 	dsb	sy
 8007e32:	607b      	str	r3, [r7, #4]
    }
 8007e34:	bf00      	nop
 8007e36:	bf00      	nop
 8007e38:	e7fd      	b.n	8007e36 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007e3a:	4b0f      	ldr	r3, [pc, #60]	@ (8007e78 <vPortValidateInterruptPriority+0x7c>)
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007e42:	4b0e      	ldr	r3, [pc, #56]	@ (8007e7c <vPortValidateInterruptPriority+0x80>)
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	429a      	cmp	r2, r3
 8007e48:	d90b      	bls.n	8007e62 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 8007e4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e4e:	f383 8811 	msr	BASEPRI, r3
 8007e52:	f3bf 8f6f 	isb	sy
 8007e56:	f3bf 8f4f 	dsb	sy
 8007e5a:	603b      	str	r3, [r7, #0]
    }
 8007e5c:	bf00      	nop
 8007e5e:	bf00      	nop
 8007e60:	e7fd      	b.n	8007e5e <vPortValidateInterruptPriority+0x62>
    }
 8007e62:	bf00      	nop
 8007e64:	3714      	adds	r7, #20
 8007e66:	46bd      	mov	sp, r7
 8007e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6c:	4770      	bx	lr
 8007e6e:	bf00      	nop
 8007e70:	e000e3f0 	.word	0xe000e3f0
 8007e74:	20000320 	.word	0x20000320
 8007e78:	e000ed0c 	.word	0xe000ed0c
 8007e7c:	20000324 	.word	0x20000324

08007e80 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b08a      	sub	sp, #40	@ 0x28
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8007e88:	2300      	movs	r3, #0
 8007e8a:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8007e8c:	f7fe f8ba 	bl	8006004 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8007e90:	4b54      	ldr	r3, [pc, #336]	@ (8007fe4 <pvPortMalloc+0x164>)
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d101      	bne.n	8007e9c <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8007e98:	f000 f90c 	bl	80080b4 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d012      	beq.n	8007ec8 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8007ea2:	2208      	movs	r2, #8
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f003 0307 	and.w	r3, r3, #7
 8007eaa:	1ad3      	subs	r3, r2, r3
 8007eac:	3308      	adds	r3, #8
 8007eae:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8007eb0:	69bb      	ldr	r3, [r7, #24]
 8007eb2:	43db      	mvns	r3, r3
 8007eb4:	687a      	ldr	r2, [r7, #4]
 8007eb6:	429a      	cmp	r2, r3
 8007eb8:	d804      	bhi.n	8007ec4 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8007eba:	687a      	ldr	r2, [r7, #4]
 8007ebc:	69bb      	ldr	r3, [r7, #24]
 8007ebe:	4413      	add	r3, r2
 8007ec0:	607b      	str	r3, [r7, #4]
 8007ec2:	e001      	b.n	8007ec8 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	db71      	blt.n	8007fb2 <pvPortMalloc+0x132>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d06e      	beq.n	8007fb2 <pvPortMalloc+0x132>
 8007ed4:	4b44      	ldr	r3, [pc, #272]	@ (8007fe8 <pvPortMalloc+0x168>)
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	687a      	ldr	r2, [r7, #4]
 8007eda:	429a      	cmp	r2, r3
 8007edc:	d869      	bhi.n	8007fb2 <pvPortMalloc+0x132>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8007ede:	4b43      	ldr	r3, [pc, #268]	@ (8007fec <pvPortMalloc+0x16c>)
 8007ee0:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8007ee2:	4b42      	ldr	r3, [pc, #264]	@ (8007fec <pvPortMalloc+0x16c>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007ee8:	e004      	b.n	8007ef4 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8007eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eec:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8007eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ef6:	685b      	ldr	r3, [r3, #4]
 8007ef8:	687a      	ldr	r2, [r7, #4]
 8007efa:	429a      	cmp	r2, r3
 8007efc:	d903      	bls.n	8007f06 <pvPortMalloc+0x86>
 8007efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d1f1      	bne.n	8007eea <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8007f06:	4b37      	ldr	r3, [pc, #220]	@ (8007fe4 <pvPortMalloc+0x164>)
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f0c:	429a      	cmp	r2, r3
 8007f0e:	d050      	beq.n	8007fb2 <pvPortMalloc+0x132>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007f10:	6a3b      	ldr	r3, [r7, #32]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	2208      	movs	r2, #8
 8007f16:	4413      	add	r3, r2
 8007f18:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f1c:	681a      	ldr	r2, [r3, #0]
 8007f1e:	6a3b      	ldr	r3, [r7, #32]
 8007f20:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f24:	685a      	ldr	r2, [r3, #4]
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	1ad2      	subs	r2, r2, r3
 8007f2a:	2308      	movs	r3, #8
 8007f2c:	005b      	lsls	r3, r3, #1
 8007f2e:	429a      	cmp	r2, r3
 8007f30:	d920      	bls.n	8007f74 <pvPortMalloc+0xf4>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007f32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	4413      	add	r3, r2
 8007f38:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f3a:	697b      	ldr	r3, [r7, #20]
 8007f3c:	f003 0307 	and.w	r3, r3, #7
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d00b      	beq.n	8007f5c <pvPortMalloc+0xdc>
        __asm volatile
 8007f44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f48:	f383 8811 	msr	BASEPRI, r3
 8007f4c:	f3bf 8f6f 	isb	sy
 8007f50:	f3bf 8f4f 	dsb	sy
 8007f54:	613b      	str	r3, [r7, #16]
    }
 8007f56:	bf00      	nop
 8007f58:	bf00      	nop
 8007f5a:	e7fd      	b.n	8007f58 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f5e:	685a      	ldr	r2, [r3, #4]
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	1ad2      	subs	r2, r2, r3
 8007f64:	697b      	ldr	r3, [r7, #20]
 8007f66:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8007f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f6a:	687a      	ldr	r2, [r7, #4]
 8007f6c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007f6e:	6978      	ldr	r0, [r7, #20]
 8007f70:	f000 f8fc 	bl	800816c <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007f74:	4b1c      	ldr	r3, [pc, #112]	@ (8007fe8 <pvPortMalloc+0x168>)
 8007f76:	681a      	ldr	r2, [r3, #0]
 8007f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f7a:	685b      	ldr	r3, [r3, #4]
 8007f7c:	1ad3      	subs	r3, r2, r3
 8007f7e:	4a1a      	ldr	r2, [pc, #104]	@ (8007fe8 <pvPortMalloc+0x168>)
 8007f80:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007f82:	4b19      	ldr	r3, [pc, #100]	@ (8007fe8 <pvPortMalloc+0x168>)
 8007f84:	681a      	ldr	r2, [r3, #0]
 8007f86:	4b1a      	ldr	r3, [pc, #104]	@ (8007ff0 <pvPortMalloc+0x170>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	429a      	cmp	r2, r3
 8007f8c:	d203      	bcs.n	8007f96 <pvPortMalloc+0x116>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007f8e:	4b16      	ldr	r3, [pc, #88]	@ (8007fe8 <pvPortMalloc+0x168>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	4a17      	ldr	r2, [pc, #92]	@ (8007ff0 <pvPortMalloc+0x170>)
 8007f94:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8007f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f98:	685b      	ldr	r3, [r3, #4]
 8007f9a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8007f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fa0:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8007fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8007fa8:	4b12      	ldr	r3, [pc, #72]	@ (8007ff4 <pvPortMalloc+0x174>)
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	3301      	adds	r3, #1
 8007fae:	4a11      	ldr	r2, [pc, #68]	@ (8007ff4 <pvPortMalloc+0x174>)
 8007fb0:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8007fb2:	f7fe f835 	bl	8006020 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007fb6:	69fb      	ldr	r3, [r7, #28]
 8007fb8:	f003 0307 	and.w	r3, r3, #7
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d00b      	beq.n	8007fd8 <pvPortMalloc+0x158>
        __asm volatile
 8007fc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fc4:	f383 8811 	msr	BASEPRI, r3
 8007fc8:	f3bf 8f6f 	isb	sy
 8007fcc:	f3bf 8f4f 	dsb	sy
 8007fd0:	60fb      	str	r3, [r7, #12]
    }
 8007fd2:	bf00      	nop
 8007fd4:	bf00      	nop
 8007fd6:	e7fd      	b.n	8007fd4 <pvPortMalloc+0x154>
    return pvReturn;
 8007fd8:	69fb      	ldr	r3, [r7, #28]
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	3728      	adds	r7, #40	@ 0x28
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bd80      	pop	{r7, pc}
 8007fe2:	bf00      	nop
 8007fe4:	20012f30 	.word	0x20012f30
 8007fe8:	20012f34 	.word	0x20012f34
 8007fec:	20012f28 	.word	0x20012f28
 8007ff0:	20012f38 	.word	0x20012f38
 8007ff4:	20012f3c 	.word	0x20012f3c

08007ff8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b086      	sub	sp, #24
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d04b      	beq.n	80080a2 <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800800a:	2308      	movs	r3, #8
 800800c:	425b      	negs	r3, r3
 800800e:	697a      	ldr	r2, [r7, #20]
 8008010:	4413      	add	r3, r2
 8008012:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8008014:	697b      	ldr	r3, [r7, #20]
 8008016:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8008018:	693b      	ldr	r3, [r7, #16]
 800801a:	685b      	ldr	r3, [r3, #4]
 800801c:	2b00      	cmp	r3, #0
 800801e:	db0b      	blt.n	8008038 <vPortFree+0x40>
        __asm volatile
 8008020:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008024:	f383 8811 	msr	BASEPRI, r3
 8008028:	f3bf 8f6f 	isb	sy
 800802c:	f3bf 8f4f 	dsb	sy
 8008030:	60fb      	str	r3, [r7, #12]
    }
 8008032:	bf00      	nop
 8008034:	bf00      	nop
 8008036:	e7fd      	b.n	8008034 <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008038:	693b      	ldr	r3, [r7, #16]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d00b      	beq.n	8008058 <vPortFree+0x60>
        __asm volatile
 8008040:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008044:	f383 8811 	msr	BASEPRI, r3
 8008048:	f3bf 8f6f 	isb	sy
 800804c:	f3bf 8f4f 	dsb	sy
 8008050:	60bb      	str	r3, [r7, #8]
    }
 8008052:	bf00      	nop
 8008054:	bf00      	nop
 8008056:	e7fd      	b.n	8008054 <vPortFree+0x5c>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8008058:	693b      	ldr	r3, [r7, #16]
 800805a:	685b      	ldr	r3, [r3, #4]
 800805c:	0fdb      	lsrs	r3, r3, #31
 800805e:	f003 0301 	and.w	r3, r3, #1
 8008062:	b2db      	uxtb	r3, r3
 8008064:	2b00      	cmp	r3, #0
 8008066:	d01c      	beq.n	80080a2 <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8008068:	693b      	ldr	r3, [r7, #16]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d118      	bne.n	80080a2 <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8008070:	693b      	ldr	r3, [r7, #16]
 8008072:	685b      	ldr	r3, [r3, #4]
 8008074:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8008078:	693b      	ldr	r3, [r7, #16]
 800807a:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 800807c:	f7fd ffc2 	bl	8006004 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8008080:	693b      	ldr	r3, [r7, #16]
 8008082:	685a      	ldr	r2, [r3, #4]
 8008084:	4b09      	ldr	r3, [pc, #36]	@ (80080ac <vPortFree+0xb4>)
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	4413      	add	r3, r2
 800808a:	4a08      	ldr	r2, [pc, #32]	@ (80080ac <vPortFree+0xb4>)
 800808c:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800808e:	6938      	ldr	r0, [r7, #16]
 8008090:	f000 f86c 	bl	800816c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8008094:	4b06      	ldr	r3, [pc, #24]	@ (80080b0 <vPortFree+0xb8>)
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	3301      	adds	r3, #1
 800809a:	4a05      	ldr	r2, [pc, #20]	@ (80080b0 <vPortFree+0xb8>)
 800809c:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800809e:	f7fd ffbf 	bl	8006020 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80080a2:	bf00      	nop
 80080a4:	3718      	adds	r7, #24
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}
 80080aa:	bf00      	nop
 80080ac:	20012f34 	.word	0x20012f34
 80080b0:	20012f40 	.word	0x20012f40

080080b4 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80080b4:	b480      	push	{r7}
 80080b6:	b085      	sub	sp, #20
 80080b8:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80080ba:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 80080be:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 80080c0:	4b25      	ldr	r3, [pc, #148]	@ (8008158 <prvHeapInit+0xa4>)
 80080c2:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	f003 0307 	and.w	r3, r3, #7
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d00c      	beq.n	80080e8 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	3307      	adds	r3, #7
 80080d2:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	f023 0307 	bic.w	r3, r3, #7
 80080da:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 80080dc:	68ba      	ldr	r2, [r7, #8]
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	1ad3      	subs	r3, r2, r3
 80080e2:	4a1d      	ldr	r2, [pc, #116]	@ (8008158 <prvHeapInit+0xa4>)
 80080e4:	4413      	add	r3, r2
 80080e6:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80080ec:	4a1b      	ldr	r2, [pc, #108]	@ (800815c <prvHeapInit+0xa8>)
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80080f2:	4b1a      	ldr	r3, [pc, #104]	@ (800815c <prvHeapInit+0xa8>)
 80080f4:	2200      	movs	r2, #0
 80080f6:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	68ba      	ldr	r2, [r7, #8]
 80080fc:	4413      	add	r3, r2
 80080fe:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8008100:	2208      	movs	r2, #8
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	1a9b      	subs	r3, r3, r2
 8008106:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	f023 0307 	bic.w	r3, r3, #7
 800810e:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	4a13      	ldr	r2, [pc, #76]	@ (8008160 <prvHeapInit+0xac>)
 8008114:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8008116:	4b12      	ldr	r3, [pc, #72]	@ (8008160 <prvHeapInit+0xac>)
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	2200      	movs	r2, #0
 800811c:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800811e:	4b10      	ldr	r3, [pc, #64]	@ (8008160 <prvHeapInit+0xac>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	2200      	movs	r2, #0
 8008124:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	68fa      	ldr	r2, [r7, #12]
 800812e:	1ad2      	subs	r2, r2, r3
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008134:	4b0a      	ldr	r3, [pc, #40]	@ (8008160 <prvHeapInit+0xac>)
 8008136:	681a      	ldr	r2, [r3, #0]
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	685b      	ldr	r3, [r3, #4]
 8008140:	4a08      	ldr	r2, [pc, #32]	@ (8008164 <prvHeapInit+0xb0>)
 8008142:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	685b      	ldr	r3, [r3, #4]
 8008148:	4a07      	ldr	r2, [pc, #28]	@ (8008168 <prvHeapInit+0xb4>)
 800814a:	6013      	str	r3, [r2, #0]
}
 800814c:	bf00      	nop
 800814e:	3714      	adds	r7, #20
 8008150:	46bd      	mov	sp, r7
 8008152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008156:	4770      	bx	lr
 8008158:	20000328 	.word	0x20000328
 800815c:	20012f28 	.word	0x20012f28
 8008160:	20012f30 	.word	0x20012f30
 8008164:	20012f38 	.word	0x20012f38
 8008168:	20012f34 	.word	0x20012f34

0800816c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800816c:	b480      	push	{r7}
 800816e:	b085      	sub	sp, #20
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008174:	4b28      	ldr	r3, [pc, #160]	@ (8008218 <prvInsertBlockIntoFreeList+0xac>)
 8008176:	60fb      	str	r3, [r7, #12]
 8008178:	e002      	b.n	8008180 <prvInsertBlockIntoFreeList+0x14>
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	60fb      	str	r3, [r7, #12]
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	687a      	ldr	r2, [r7, #4]
 8008186:	429a      	cmp	r2, r3
 8008188:	d8f7      	bhi.n	800817a <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	685b      	ldr	r3, [r3, #4]
 8008192:	68ba      	ldr	r2, [r7, #8]
 8008194:	4413      	add	r3, r2
 8008196:	687a      	ldr	r2, [r7, #4]
 8008198:	429a      	cmp	r2, r3
 800819a:	d108      	bne.n	80081ae <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	685a      	ldr	r2, [r3, #4]
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	685b      	ldr	r3, [r3, #4]
 80081a4:	441a      	add	r2, r3
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	685b      	ldr	r3, [r3, #4]
 80081b6:	68ba      	ldr	r2, [r7, #8]
 80081b8:	441a      	add	r2, r3
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	429a      	cmp	r2, r3
 80081c0:	d118      	bne.n	80081f4 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681a      	ldr	r2, [r3, #0]
 80081c6:	4b15      	ldr	r3, [pc, #84]	@ (800821c <prvInsertBlockIntoFreeList+0xb0>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	429a      	cmp	r2, r3
 80081cc:	d00d      	beq.n	80081ea <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	685a      	ldr	r2, [r3, #4]
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	685b      	ldr	r3, [r3, #4]
 80081d8:	441a      	add	r2, r3
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	681a      	ldr	r2, [r3, #0]
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	601a      	str	r2, [r3, #0]
 80081e8:	e008      	b.n	80081fc <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80081ea:	4b0c      	ldr	r3, [pc, #48]	@ (800821c <prvInsertBlockIntoFreeList+0xb0>)
 80081ec:	681a      	ldr	r2, [r3, #0]
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	601a      	str	r2, [r3, #0]
 80081f2:	e003      	b.n	80081fc <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	681a      	ldr	r2, [r3, #0]
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80081fc:	68fa      	ldr	r2, [r7, #12]
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	429a      	cmp	r2, r3
 8008202:	d002      	beq.n	800820a <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	687a      	ldr	r2, [r7, #4]
 8008208:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800820a:	bf00      	nop
 800820c:	3714      	adds	r7, #20
 800820e:	46bd      	mov	sp, r7
 8008210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008214:	4770      	bx	lr
 8008216:	bf00      	nop
 8008218:	20012f28 	.word	0x20012f28
 800821c:	20012f30 	.word	0x20012f30

08008220 <siprintf>:
 8008220:	b40e      	push	{r1, r2, r3}
 8008222:	b500      	push	{lr}
 8008224:	b09c      	sub	sp, #112	@ 0x70
 8008226:	ab1d      	add	r3, sp, #116	@ 0x74
 8008228:	9002      	str	r0, [sp, #8]
 800822a:	9006      	str	r0, [sp, #24]
 800822c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008230:	4809      	ldr	r0, [pc, #36]	@ (8008258 <siprintf+0x38>)
 8008232:	9107      	str	r1, [sp, #28]
 8008234:	9104      	str	r1, [sp, #16]
 8008236:	4909      	ldr	r1, [pc, #36]	@ (800825c <siprintf+0x3c>)
 8008238:	f853 2b04 	ldr.w	r2, [r3], #4
 800823c:	9105      	str	r1, [sp, #20]
 800823e:	6800      	ldr	r0, [r0, #0]
 8008240:	9301      	str	r3, [sp, #4]
 8008242:	a902      	add	r1, sp, #8
 8008244:	f000 f9a2 	bl	800858c <_svfiprintf_r>
 8008248:	9b02      	ldr	r3, [sp, #8]
 800824a:	2200      	movs	r2, #0
 800824c:	701a      	strb	r2, [r3, #0]
 800824e:	b01c      	add	sp, #112	@ 0x70
 8008250:	f85d eb04 	ldr.w	lr, [sp], #4
 8008254:	b003      	add	sp, #12
 8008256:	4770      	bx	lr
 8008258:	2000001c 	.word	0x2000001c
 800825c:	ffff0208 	.word	0xffff0208

08008260 <memset>:
 8008260:	4402      	add	r2, r0
 8008262:	4603      	mov	r3, r0
 8008264:	4293      	cmp	r3, r2
 8008266:	d100      	bne.n	800826a <memset+0xa>
 8008268:	4770      	bx	lr
 800826a:	f803 1b01 	strb.w	r1, [r3], #1
 800826e:	e7f9      	b.n	8008264 <memset+0x4>

08008270 <__errno>:
 8008270:	4b01      	ldr	r3, [pc, #4]	@ (8008278 <__errno+0x8>)
 8008272:	6818      	ldr	r0, [r3, #0]
 8008274:	4770      	bx	lr
 8008276:	bf00      	nop
 8008278:	2000001c 	.word	0x2000001c

0800827c <__libc_init_array>:
 800827c:	b570      	push	{r4, r5, r6, lr}
 800827e:	4d0d      	ldr	r5, [pc, #52]	@ (80082b4 <__libc_init_array+0x38>)
 8008280:	4c0d      	ldr	r4, [pc, #52]	@ (80082b8 <__libc_init_array+0x3c>)
 8008282:	1b64      	subs	r4, r4, r5
 8008284:	10a4      	asrs	r4, r4, #2
 8008286:	2600      	movs	r6, #0
 8008288:	42a6      	cmp	r6, r4
 800828a:	d109      	bne.n	80082a0 <__libc_init_array+0x24>
 800828c:	4d0b      	ldr	r5, [pc, #44]	@ (80082bc <__libc_init_array+0x40>)
 800828e:	4c0c      	ldr	r4, [pc, #48]	@ (80082c0 <__libc_init_array+0x44>)
 8008290:	f000 fc66 	bl	8008b60 <_init>
 8008294:	1b64      	subs	r4, r4, r5
 8008296:	10a4      	asrs	r4, r4, #2
 8008298:	2600      	movs	r6, #0
 800829a:	42a6      	cmp	r6, r4
 800829c:	d105      	bne.n	80082aa <__libc_init_array+0x2e>
 800829e:	bd70      	pop	{r4, r5, r6, pc}
 80082a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80082a4:	4798      	blx	r3
 80082a6:	3601      	adds	r6, #1
 80082a8:	e7ee      	b.n	8008288 <__libc_init_array+0xc>
 80082aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80082ae:	4798      	blx	r3
 80082b0:	3601      	adds	r6, #1
 80082b2:	e7f2      	b.n	800829a <__libc_init_array+0x1e>
 80082b4:	08008fc0 	.word	0x08008fc0
 80082b8:	08008fc0 	.word	0x08008fc0
 80082bc:	08008fc0 	.word	0x08008fc0
 80082c0:	08008fc4 	.word	0x08008fc4

080082c4 <__retarget_lock_acquire_recursive>:
 80082c4:	4770      	bx	lr

080082c6 <__retarget_lock_release_recursive>:
 80082c6:	4770      	bx	lr

080082c8 <memcpy>:
 80082c8:	440a      	add	r2, r1
 80082ca:	4291      	cmp	r1, r2
 80082cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80082d0:	d100      	bne.n	80082d4 <memcpy+0xc>
 80082d2:	4770      	bx	lr
 80082d4:	b510      	push	{r4, lr}
 80082d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80082da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80082de:	4291      	cmp	r1, r2
 80082e0:	d1f9      	bne.n	80082d6 <memcpy+0xe>
 80082e2:	bd10      	pop	{r4, pc}

080082e4 <_free_r>:
 80082e4:	b538      	push	{r3, r4, r5, lr}
 80082e6:	4605      	mov	r5, r0
 80082e8:	2900      	cmp	r1, #0
 80082ea:	d041      	beq.n	8008370 <_free_r+0x8c>
 80082ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80082f0:	1f0c      	subs	r4, r1, #4
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	bfb8      	it	lt
 80082f6:	18e4      	addlt	r4, r4, r3
 80082f8:	f000 f8e0 	bl	80084bc <__malloc_lock>
 80082fc:	4a1d      	ldr	r2, [pc, #116]	@ (8008374 <_free_r+0x90>)
 80082fe:	6813      	ldr	r3, [r2, #0]
 8008300:	b933      	cbnz	r3, 8008310 <_free_r+0x2c>
 8008302:	6063      	str	r3, [r4, #4]
 8008304:	6014      	str	r4, [r2, #0]
 8008306:	4628      	mov	r0, r5
 8008308:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800830c:	f000 b8dc 	b.w	80084c8 <__malloc_unlock>
 8008310:	42a3      	cmp	r3, r4
 8008312:	d908      	bls.n	8008326 <_free_r+0x42>
 8008314:	6820      	ldr	r0, [r4, #0]
 8008316:	1821      	adds	r1, r4, r0
 8008318:	428b      	cmp	r3, r1
 800831a:	bf01      	itttt	eq
 800831c:	6819      	ldreq	r1, [r3, #0]
 800831e:	685b      	ldreq	r3, [r3, #4]
 8008320:	1809      	addeq	r1, r1, r0
 8008322:	6021      	streq	r1, [r4, #0]
 8008324:	e7ed      	b.n	8008302 <_free_r+0x1e>
 8008326:	461a      	mov	r2, r3
 8008328:	685b      	ldr	r3, [r3, #4]
 800832a:	b10b      	cbz	r3, 8008330 <_free_r+0x4c>
 800832c:	42a3      	cmp	r3, r4
 800832e:	d9fa      	bls.n	8008326 <_free_r+0x42>
 8008330:	6811      	ldr	r1, [r2, #0]
 8008332:	1850      	adds	r0, r2, r1
 8008334:	42a0      	cmp	r0, r4
 8008336:	d10b      	bne.n	8008350 <_free_r+0x6c>
 8008338:	6820      	ldr	r0, [r4, #0]
 800833a:	4401      	add	r1, r0
 800833c:	1850      	adds	r0, r2, r1
 800833e:	4283      	cmp	r3, r0
 8008340:	6011      	str	r1, [r2, #0]
 8008342:	d1e0      	bne.n	8008306 <_free_r+0x22>
 8008344:	6818      	ldr	r0, [r3, #0]
 8008346:	685b      	ldr	r3, [r3, #4]
 8008348:	6053      	str	r3, [r2, #4]
 800834a:	4408      	add	r0, r1
 800834c:	6010      	str	r0, [r2, #0]
 800834e:	e7da      	b.n	8008306 <_free_r+0x22>
 8008350:	d902      	bls.n	8008358 <_free_r+0x74>
 8008352:	230c      	movs	r3, #12
 8008354:	602b      	str	r3, [r5, #0]
 8008356:	e7d6      	b.n	8008306 <_free_r+0x22>
 8008358:	6820      	ldr	r0, [r4, #0]
 800835a:	1821      	adds	r1, r4, r0
 800835c:	428b      	cmp	r3, r1
 800835e:	bf04      	itt	eq
 8008360:	6819      	ldreq	r1, [r3, #0]
 8008362:	685b      	ldreq	r3, [r3, #4]
 8008364:	6063      	str	r3, [r4, #4]
 8008366:	bf04      	itt	eq
 8008368:	1809      	addeq	r1, r1, r0
 800836a:	6021      	streq	r1, [r4, #0]
 800836c:	6054      	str	r4, [r2, #4]
 800836e:	e7ca      	b.n	8008306 <_free_r+0x22>
 8008370:	bd38      	pop	{r3, r4, r5, pc}
 8008372:	bf00      	nop
 8008374:	20013088 	.word	0x20013088

08008378 <sbrk_aligned>:
 8008378:	b570      	push	{r4, r5, r6, lr}
 800837a:	4e0f      	ldr	r6, [pc, #60]	@ (80083b8 <sbrk_aligned+0x40>)
 800837c:	460c      	mov	r4, r1
 800837e:	6831      	ldr	r1, [r6, #0]
 8008380:	4605      	mov	r5, r0
 8008382:	b911      	cbnz	r1, 800838a <sbrk_aligned+0x12>
 8008384:	f000 fba6 	bl	8008ad4 <_sbrk_r>
 8008388:	6030      	str	r0, [r6, #0]
 800838a:	4621      	mov	r1, r4
 800838c:	4628      	mov	r0, r5
 800838e:	f000 fba1 	bl	8008ad4 <_sbrk_r>
 8008392:	1c43      	adds	r3, r0, #1
 8008394:	d103      	bne.n	800839e <sbrk_aligned+0x26>
 8008396:	f04f 34ff 	mov.w	r4, #4294967295
 800839a:	4620      	mov	r0, r4
 800839c:	bd70      	pop	{r4, r5, r6, pc}
 800839e:	1cc4      	adds	r4, r0, #3
 80083a0:	f024 0403 	bic.w	r4, r4, #3
 80083a4:	42a0      	cmp	r0, r4
 80083a6:	d0f8      	beq.n	800839a <sbrk_aligned+0x22>
 80083a8:	1a21      	subs	r1, r4, r0
 80083aa:	4628      	mov	r0, r5
 80083ac:	f000 fb92 	bl	8008ad4 <_sbrk_r>
 80083b0:	3001      	adds	r0, #1
 80083b2:	d1f2      	bne.n	800839a <sbrk_aligned+0x22>
 80083b4:	e7ef      	b.n	8008396 <sbrk_aligned+0x1e>
 80083b6:	bf00      	nop
 80083b8:	20013084 	.word	0x20013084

080083bc <_malloc_r>:
 80083bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083c0:	1ccd      	adds	r5, r1, #3
 80083c2:	f025 0503 	bic.w	r5, r5, #3
 80083c6:	3508      	adds	r5, #8
 80083c8:	2d0c      	cmp	r5, #12
 80083ca:	bf38      	it	cc
 80083cc:	250c      	movcc	r5, #12
 80083ce:	2d00      	cmp	r5, #0
 80083d0:	4606      	mov	r6, r0
 80083d2:	db01      	blt.n	80083d8 <_malloc_r+0x1c>
 80083d4:	42a9      	cmp	r1, r5
 80083d6:	d904      	bls.n	80083e2 <_malloc_r+0x26>
 80083d8:	230c      	movs	r3, #12
 80083da:	6033      	str	r3, [r6, #0]
 80083dc:	2000      	movs	r0, #0
 80083de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083e2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80084b8 <_malloc_r+0xfc>
 80083e6:	f000 f869 	bl	80084bc <__malloc_lock>
 80083ea:	f8d8 3000 	ldr.w	r3, [r8]
 80083ee:	461c      	mov	r4, r3
 80083f0:	bb44      	cbnz	r4, 8008444 <_malloc_r+0x88>
 80083f2:	4629      	mov	r1, r5
 80083f4:	4630      	mov	r0, r6
 80083f6:	f7ff ffbf 	bl	8008378 <sbrk_aligned>
 80083fa:	1c43      	adds	r3, r0, #1
 80083fc:	4604      	mov	r4, r0
 80083fe:	d158      	bne.n	80084b2 <_malloc_r+0xf6>
 8008400:	f8d8 4000 	ldr.w	r4, [r8]
 8008404:	4627      	mov	r7, r4
 8008406:	2f00      	cmp	r7, #0
 8008408:	d143      	bne.n	8008492 <_malloc_r+0xd6>
 800840a:	2c00      	cmp	r4, #0
 800840c:	d04b      	beq.n	80084a6 <_malloc_r+0xea>
 800840e:	6823      	ldr	r3, [r4, #0]
 8008410:	4639      	mov	r1, r7
 8008412:	4630      	mov	r0, r6
 8008414:	eb04 0903 	add.w	r9, r4, r3
 8008418:	f000 fb5c 	bl	8008ad4 <_sbrk_r>
 800841c:	4581      	cmp	r9, r0
 800841e:	d142      	bne.n	80084a6 <_malloc_r+0xea>
 8008420:	6821      	ldr	r1, [r4, #0]
 8008422:	1a6d      	subs	r5, r5, r1
 8008424:	4629      	mov	r1, r5
 8008426:	4630      	mov	r0, r6
 8008428:	f7ff ffa6 	bl	8008378 <sbrk_aligned>
 800842c:	3001      	adds	r0, #1
 800842e:	d03a      	beq.n	80084a6 <_malloc_r+0xea>
 8008430:	6823      	ldr	r3, [r4, #0]
 8008432:	442b      	add	r3, r5
 8008434:	6023      	str	r3, [r4, #0]
 8008436:	f8d8 3000 	ldr.w	r3, [r8]
 800843a:	685a      	ldr	r2, [r3, #4]
 800843c:	bb62      	cbnz	r2, 8008498 <_malloc_r+0xdc>
 800843e:	f8c8 7000 	str.w	r7, [r8]
 8008442:	e00f      	b.n	8008464 <_malloc_r+0xa8>
 8008444:	6822      	ldr	r2, [r4, #0]
 8008446:	1b52      	subs	r2, r2, r5
 8008448:	d420      	bmi.n	800848c <_malloc_r+0xd0>
 800844a:	2a0b      	cmp	r2, #11
 800844c:	d917      	bls.n	800847e <_malloc_r+0xc2>
 800844e:	1961      	adds	r1, r4, r5
 8008450:	42a3      	cmp	r3, r4
 8008452:	6025      	str	r5, [r4, #0]
 8008454:	bf18      	it	ne
 8008456:	6059      	strne	r1, [r3, #4]
 8008458:	6863      	ldr	r3, [r4, #4]
 800845a:	bf08      	it	eq
 800845c:	f8c8 1000 	streq.w	r1, [r8]
 8008460:	5162      	str	r2, [r4, r5]
 8008462:	604b      	str	r3, [r1, #4]
 8008464:	4630      	mov	r0, r6
 8008466:	f000 f82f 	bl	80084c8 <__malloc_unlock>
 800846a:	f104 000b 	add.w	r0, r4, #11
 800846e:	1d23      	adds	r3, r4, #4
 8008470:	f020 0007 	bic.w	r0, r0, #7
 8008474:	1ac2      	subs	r2, r0, r3
 8008476:	bf1c      	itt	ne
 8008478:	1a1b      	subne	r3, r3, r0
 800847a:	50a3      	strne	r3, [r4, r2]
 800847c:	e7af      	b.n	80083de <_malloc_r+0x22>
 800847e:	6862      	ldr	r2, [r4, #4]
 8008480:	42a3      	cmp	r3, r4
 8008482:	bf0c      	ite	eq
 8008484:	f8c8 2000 	streq.w	r2, [r8]
 8008488:	605a      	strne	r2, [r3, #4]
 800848a:	e7eb      	b.n	8008464 <_malloc_r+0xa8>
 800848c:	4623      	mov	r3, r4
 800848e:	6864      	ldr	r4, [r4, #4]
 8008490:	e7ae      	b.n	80083f0 <_malloc_r+0x34>
 8008492:	463c      	mov	r4, r7
 8008494:	687f      	ldr	r7, [r7, #4]
 8008496:	e7b6      	b.n	8008406 <_malloc_r+0x4a>
 8008498:	461a      	mov	r2, r3
 800849a:	685b      	ldr	r3, [r3, #4]
 800849c:	42a3      	cmp	r3, r4
 800849e:	d1fb      	bne.n	8008498 <_malloc_r+0xdc>
 80084a0:	2300      	movs	r3, #0
 80084a2:	6053      	str	r3, [r2, #4]
 80084a4:	e7de      	b.n	8008464 <_malloc_r+0xa8>
 80084a6:	230c      	movs	r3, #12
 80084a8:	6033      	str	r3, [r6, #0]
 80084aa:	4630      	mov	r0, r6
 80084ac:	f000 f80c 	bl	80084c8 <__malloc_unlock>
 80084b0:	e794      	b.n	80083dc <_malloc_r+0x20>
 80084b2:	6005      	str	r5, [r0, #0]
 80084b4:	e7d6      	b.n	8008464 <_malloc_r+0xa8>
 80084b6:	bf00      	nop
 80084b8:	20013088 	.word	0x20013088

080084bc <__malloc_lock>:
 80084bc:	4801      	ldr	r0, [pc, #4]	@ (80084c4 <__malloc_lock+0x8>)
 80084be:	f7ff bf01 	b.w	80082c4 <__retarget_lock_acquire_recursive>
 80084c2:	bf00      	nop
 80084c4:	20013080 	.word	0x20013080

080084c8 <__malloc_unlock>:
 80084c8:	4801      	ldr	r0, [pc, #4]	@ (80084d0 <__malloc_unlock+0x8>)
 80084ca:	f7ff befc 	b.w	80082c6 <__retarget_lock_release_recursive>
 80084ce:	bf00      	nop
 80084d0:	20013080 	.word	0x20013080

080084d4 <__ssputs_r>:
 80084d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084d8:	688e      	ldr	r6, [r1, #8]
 80084da:	461f      	mov	r7, r3
 80084dc:	42be      	cmp	r6, r7
 80084de:	680b      	ldr	r3, [r1, #0]
 80084e0:	4682      	mov	sl, r0
 80084e2:	460c      	mov	r4, r1
 80084e4:	4690      	mov	r8, r2
 80084e6:	d82d      	bhi.n	8008544 <__ssputs_r+0x70>
 80084e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80084ec:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80084f0:	d026      	beq.n	8008540 <__ssputs_r+0x6c>
 80084f2:	6965      	ldr	r5, [r4, #20]
 80084f4:	6909      	ldr	r1, [r1, #16]
 80084f6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80084fa:	eba3 0901 	sub.w	r9, r3, r1
 80084fe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008502:	1c7b      	adds	r3, r7, #1
 8008504:	444b      	add	r3, r9
 8008506:	106d      	asrs	r5, r5, #1
 8008508:	429d      	cmp	r5, r3
 800850a:	bf38      	it	cc
 800850c:	461d      	movcc	r5, r3
 800850e:	0553      	lsls	r3, r2, #21
 8008510:	d527      	bpl.n	8008562 <__ssputs_r+0x8e>
 8008512:	4629      	mov	r1, r5
 8008514:	f7ff ff52 	bl	80083bc <_malloc_r>
 8008518:	4606      	mov	r6, r0
 800851a:	b360      	cbz	r0, 8008576 <__ssputs_r+0xa2>
 800851c:	6921      	ldr	r1, [r4, #16]
 800851e:	464a      	mov	r2, r9
 8008520:	f7ff fed2 	bl	80082c8 <memcpy>
 8008524:	89a3      	ldrh	r3, [r4, #12]
 8008526:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800852a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800852e:	81a3      	strh	r3, [r4, #12]
 8008530:	6126      	str	r6, [r4, #16]
 8008532:	6165      	str	r5, [r4, #20]
 8008534:	444e      	add	r6, r9
 8008536:	eba5 0509 	sub.w	r5, r5, r9
 800853a:	6026      	str	r6, [r4, #0]
 800853c:	60a5      	str	r5, [r4, #8]
 800853e:	463e      	mov	r6, r7
 8008540:	42be      	cmp	r6, r7
 8008542:	d900      	bls.n	8008546 <__ssputs_r+0x72>
 8008544:	463e      	mov	r6, r7
 8008546:	6820      	ldr	r0, [r4, #0]
 8008548:	4632      	mov	r2, r6
 800854a:	4641      	mov	r1, r8
 800854c:	f000 faa8 	bl	8008aa0 <memmove>
 8008550:	68a3      	ldr	r3, [r4, #8]
 8008552:	1b9b      	subs	r3, r3, r6
 8008554:	60a3      	str	r3, [r4, #8]
 8008556:	6823      	ldr	r3, [r4, #0]
 8008558:	4433      	add	r3, r6
 800855a:	6023      	str	r3, [r4, #0]
 800855c:	2000      	movs	r0, #0
 800855e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008562:	462a      	mov	r2, r5
 8008564:	f000 fac6 	bl	8008af4 <_realloc_r>
 8008568:	4606      	mov	r6, r0
 800856a:	2800      	cmp	r0, #0
 800856c:	d1e0      	bne.n	8008530 <__ssputs_r+0x5c>
 800856e:	6921      	ldr	r1, [r4, #16]
 8008570:	4650      	mov	r0, sl
 8008572:	f7ff feb7 	bl	80082e4 <_free_r>
 8008576:	230c      	movs	r3, #12
 8008578:	f8ca 3000 	str.w	r3, [sl]
 800857c:	89a3      	ldrh	r3, [r4, #12]
 800857e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008582:	81a3      	strh	r3, [r4, #12]
 8008584:	f04f 30ff 	mov.w	r0, #4294967295
 8008588:	e7e9      	b.n	800855e <__ssputs_r+0x8a>
	...

0800858c <_svfiprintf_r>:
 800858c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008590:	4698      	mov	r8, r3
 8008592:	898b      	ldrh	r3, [r1, #12]
 8008594:	061b      	lsls	r3, r3, #24
 8008596:	b09d      	sub	sp, #116	@ 0x74
 8008598:	4607      	mov	r7, r0
 800859a:	460d      	mov	r5, r1
 800859c:	4614      	mov	r4, r2
 800859e:	d510      	bpl.n	80085c2 <_svfiprintf_r+0x36>
 80085a0:	690b      	ldr	r3, [r1, #16]
 80085a2:	b973      	cbnz	r3, 80085c2 <_svfiprintf_r+0x36>
 80085a4:	2140      	movs	r1, #64	@ 0x40
 80085a6:	f7ff ff09 	bl	80083bc <_malloc_r>
 80085aa:	6028      	str	r0, [r5, #0]
 80085ac:	6128      	str	r0, [r5, #16]
 80085ae:	b930      	cbnz	r0, 80085be <_svfiprintf_r+0x32>
 80085b0:	230c      	movs	r3, #12
 80085b2:	603b      	str	r3, [r7, #0]
 80085b4:	f04f 30ff 	mov.w	r0, #4294967295
 80085b8:	b01d      	add	sp, #116	@ 0x74
 80085ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085be:	2340      	movs	r3, #64	@ 0x40
 80085c0:	616b      	str	r3, [r5, #20]
 80085c2:	2300      	movs	r3, #0
 80085c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80085c6:	2320      	movs	r3, #32
 80085c8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80085cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80085d0:	2330      	movs	r3, #48	@ 0x30
 80085d2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008770 <_svfiprintf_r+0x1e4>
 80085d6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80085da:	f04f 0901 	mov.w	r9, #1
 80085de:	4623      	mov	r3, r4
 80085e0:	469a      	mov	sl, r3
 80085e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80085e6:	b10a      	cbz	r2, 80085ec <_svfiprintf_r+0x60>
 80085e8:	2a25      	cmp	r2, #37	@ 0x25
 80085ea:	d1f9      	bne.n	80085e0 <_svfiprintf_r+0x54>
 80085ec:	ebba 0b04 	subs.w	fp, sl, r4
 80085f0:	d00b      	beq.n	800860a <_svfiprintf_r+0x7e>
 80085f2:	465b      	mov	r3, fp
 80085f4:	4622      	mov	r2, r4
 80085f6:	4629      	mov	r1, r5
 80085f8:	4638      	mov	r0, r7
 80085fa:	f7ff ff6b 	bl	80084d4 <__ssputs_r>
 80085fe:	3001      	adds	r0, #1
 8008600:	f000 80a7 	beq.w	8008752 <_svfiprintf_r+0x1c6>
 8008604:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008606:	445a      	add	r2, fp
 8008608:	9209      	str	r2, [sp, #36]	@ 0x24
 800860a:	f89a 3000 	ldrb.w	r3, [sl]
 800860e:	2b00      	cmp	r3, #0
 8008610:	f000 809f 	beq.w	8008752 <_svfiprintf_r+0x1c6>
 8008614:	2300      	movs	r3, #0
 8008616:	f04f 32ff 	mov.w	r2, #4294967295
 800861a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800861e:	f10a 0a01 	add.w	sl, sl, #1
 8008622:	9304      	str	r3, [sp, #16]
 8008624:	9307      	str	r3, [sp, #28]
 8008626:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800862a:	931a      	str	r3, [sp, #104]	@ 0x68
 800862c:	4654      	mov	r4, sl
 800862e:	2205      	movs	r2, #5
 8008630:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008634:	484e      	ldr	r0, [pc, #312]	@ (8008770 <_svfiprintf_r+0x1e4>)
 8008636:	f7f7 fe03 	bl	8000240 <memchr>
 800863a:	9a04      	ldr	r2, [sp, #16]
 800863c:	b9d8      	cbnz	r0, 8008676 <_svfiprintf_r+0xea>
 800863e:	06d0      	lsls	r0, r2, #27
 8008640:	bf44      	itt	mi
 8008642:	2320      	movmi	r3, #32
 8008644:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008648:	0711      	lsls	r1, r2, #28
 800864a:	bf44      	itt	mi
 800864c:	232b      	movmi	r3, #43	@ 0x2b
 800864e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008652:	f89a 3000 	ldrb.w	r3, [sl]
 8008656:	2b2a      	cmp	r3, #42	@ 0x2a
 8008658:	d015      	beq.n	8008686 <_svfiprintf_r+0xfa>
 800865a:	9a07      	ldr	r2, [sp, #28]
 800865c:	4654      	mov	r4, sl
 800865e:	2000      	movs	r0, #0
 8008660:	f04f 0c0a 	mov.w	ip, #10
 8008664:	4621      	mov	r1, r4
 8008666:	f811 3b01 	ldrb.w	r3, [r1], #1
 800866a:	3b30      	subs	r3, #48	@ 0x30
 800866c:	2b09      	cmp	r3, #9
 800866e:	d94b      	bls.n	8008708 <_svfiprintf_r+0x17c>
 8008670:	b1b0      	cbz	r0, 80086a0 <_svfiprintf_r+0x114>
 8008672:	9207      	str	r2, [sp, #28]
 8008674:	e014      	b.n	80086a0 <_svfiprintf_r+0x114>
 8008676:	eba0 0308 	sub.w	r3, r0, r8
 800867a:	fa09 f303 	lsl.w	r3, r9, r3
 800867e:	4313      	orrs	r3, r2
 8008680:	9304      	str	r3, [sp, #16]
 8008682:	46a2      	mov	sl, r4
 8008684:	e7d2      	b.n	800862c <_svfiprintf_r+0xa0>
 8008686:	9b03      	ldr	r3, [sp, #12]
 8008688:	1d19      	adds	r1, r3, #4
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	9103      	str	r1, [sp, #12]
 800868e:	2b00      	cmp	r3, #0
 8008690:	bfbb      	ittet	lt
 8008692:	425b      	neglt	r3, r3
 8008694:	f042 0202 	orrlt.w	r2, r2, #2
 8008698:	9307      	strge	r3, [sp, #28]
 800869a:	9307      	strlt	r3, [sp, #28]
 800869c:	bfb8      	it	lt
 800869e:	9204      	strlt	r2, [sp, #16]
 80086a0:	7823      	ldrb	r3, [r4, #0]
 80086a2:	2b2e      	cmp	r3, #46	@ 0x2e
 80086a4:	d10a      	bne.n	80086bc <_svfiprintf_r+0x130>
 80086a6:	7863      	ldrb	r3, [r4, #1]
 80086a8:	2b2a      	cmp	r3, #42	@ 0x2a
 80086aa:	d132      	bne.n	8008712 <_svfiprintf_r+0x186>
 80086ac:	9b03      	ldr	r3, [sp, #12]
 80086ae:	1d1a      	adds	r2, r3, #4
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	9203      	str	r2, [sp, #12]
 80086b4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80086b8:	3402      	adds	r4, #2
 80086ba:	9305      	str	r3, [sp, #20]
 80086bc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008780 <_svfiprintf_r+0x1f4>
 80086c0:	7821      	ldrb	r1, [r4, #0]
 80086c2:	2203      	movs	r2, #3
 80086c4:	4650      	mov	r0, sl
 80086c6:	f7f7 fdbb 	bl	8000240 <memchr>
 80086ca:	b138      	cbz	r0, 80086dc <_svfiprintf_r+0x150>
 80086cc:	9b04      	ldr	r3, [sp, #16]
 80086ce:	eba0 000a 	sub.w	r0, r0, sl
 80086d2:	2240      	movs	r2, #64	@ 0x40
 80086d4:	4082      	lsls	r2, r0
 80086d6:	4313      	orrs	r3, r2
 80086d8:	3401      	adds	r4, #1
 80086da:	9304      	str	r3, [sp, #16]
 80086dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086e0:	4824      	ldr	r0, [pc, #144]	@ (8008774 <_svfiprintf_r+0x1e8>)
 80086e2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80086e6:	2206      	movs	r2, #6
 80086e8:	f7f7 fdaa 	bl	8000240 <memchr>
 80086ec:	2800      	cmp	r0, #0
 80086ee:	d036      	beq.n	800875e <_svfiprintf_r+0x1d2>
 80086f0:	4b21      	ldr	r3, [pc, #132]	@ (8008778 <_svfiprintf_r+0x1ec>)
 80086f2:	bb1b      	cbnz	r3, 800873c <_svfiprintf_r+0x1b0>
 80086f4:	9b03      	ldr	r3, [sp, #12]
 80086f6:	3307      	adds	r3, #7
 80086f8:	f023 0307 	bic.w	r3, r3, #7
 80086fc:	3308      	adds	r3, #8
 80086fe:	9303      	str	r3, [sp, #12]
 8008700:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008702:	4433      	add	r3, r6
 8008704:	9309      	str	r3, [sp, #36]	@ 0x24
 8008706:	e76a      	b.n	80085de <_svfiprintf_r+0x52>
 8008708:	fb0c 3202 	mla	r2, ip, r2, r3
 800870c:	460c      	mov	r4, r1
 800870e:	2001      	movs	r0, #1
 8008710:	e7a8      	b.n	8008664 <_svfiprintf_r+0xd8>
 8008712:	2300      	movs	r3, #0
 8008714:	3401      	adds	r4, #1
 8008716:	9305      	str	r3, [sp, #20]
 8008718:	4619      	mov	r1, r3
 800871a:	f04f 0c0a 	mov.w	ip, #10
 800871e:	4620      	mov	r0, r4
 8008720:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008724:	3a30      	subs	r2, #48	@ 0x30
 8008726:	2a09      	cmp	r2, #9
 8008728:	d903      	bls.n	8008732 <_svfiprintf_r+0x1a6>
 800872a:	2b00      	cmp	r3, #0
 800872c:	d0c6      	beq.n	80086bc <_svfiprintf_r+0x130>
 800872e:	9105      	str	r1, [sp, #20]
 8008730:	e7c4      	b.n	80086bc <_svfiprintf_r+0x130>
 8008732:	fb0c 2101 	mla	r1, ip, r1, r2
 8008736:	4604      	mov	r4, r0
 8008738:	2301      	movs	r3, #1
 800873a:	e7f0      	b.n	800871e <_svfiprintf_r+0x192>
 800873c:	ab03      	add	r3, sp, #12
 800873e:	9300      	str	r3, [sp, #0]
 8008740:	462a      	mov	r2, r5
 8008742:	4b0e      	ldr	r3, [pc, #56]	@ (800877c <_svfiprintf_r+0x1f0>)
 8008744:	a904      	add	r1, sp, #16
 8008746:	4638      	mov	r0, r7
 8008748:	f3af 8000 	nop.w
 800874c:	1c42      	adds	r2, r0, #1
 800874e:	4606      	mov	r6, r0
 8008750:	d1d6      	bne.n	8008700 <_svfiprintf_r+0x174>
 8008752:	89ab      	ldrh	r3, [r5, #12]
 8008754:	065b      	lsls	r3, r3, #25
 8008756:	f53f af2d 	bmi.w	80085b4 <_svfiprintf_r+0x28>
 800875a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800875c:	e72c      	b.n	80085b8 <_svfiprintf_r+0x2c>
 800875e:	ab03      	add	r3, sp, #12
 8008760:	9300      	str	r3, [sp, #0]
 8008762:	462a      	mov	r2, r5
 8008764:	4b05      	ldr	r3, [pc, #20]	@ (800877c <_svfiprintf_r+0x1f0>)
 8008766:	a904      	add	r1, sp, #16
 8008768:	4638      	mov	r0, r7
 800876a:	f000 f879 	bl	8008860 <_printf_i>
 800876e:	e7ed      	b.n	800874c <_svfiprintf_r+0x1c0>
 8008770:	08008f84 	.word	0x08008f84
 8008774:	08008f8e 	.word	0x08008f8e
 8008778:	00000000 	.word	0x00000000
 800877c:	080084d5 	.word	0x080084d5
 8008780:	08008f8a 	.word	0x08008f8a

08008784 <_printf_common>:
 8008784:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008788:	4616      	mov	r6, r2
 800878a:	4698      	mov	r8, r3
 800878c:	688a      	ldr	r2, [r1, #8]
 800878e:	690b      	ldr	r3, [r1, #16]
 8008790:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008794:	4293      	cmp	r3, r2
 8008796:	bfb8      	it	lt
 8008798:	4613      	movlt	r3, r2
 800879a:	6033      	str	r3, [r6, #0]
 800879c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80087a0:	4607      	mov	r7, r0
 80087a2:	460c      	mov	r4, r1
 80087a4:	b10a      	cbz	r2, 80087aa <_printf_common+0x26>
 80087a6:	3301      	adds	r3, #1
 80087a8:	6033      	str	r3, [r6, #0]
 80087aa:	6823      	ldr	r3, [r4, #0]
 80087ac:	0699      	lsls	r1, r3, #26
 80087ae:	bf42      	ittt	mi
 80087b0:	6833      	ldrmi	r3, [r6, #0]
 80087b2:	3302      	addmi	r3, #2
 80087b4:	6033      	strmi	r3, [r6, #0]
 80087b6:	6825      	ldr	r5, [r4, #0]
 80087b8:	f015 0506 	ands.w	r5, r5, #6
 80087bc:	d106      	bne.n	80087cc <_printf_common+0x48>
 80087be:	f104 0a19 	add.w	sl, r4, #25
 80087c2:	68e3      	ldr	r3, [r4, #12]
 80087c4:	6832      	ldr	r2, [r6, #0]
 80087c6:	1a9b      	subs	r3, r3, r2
 80087c8:	42ab      	cmp	r3, r5
 80087ca:	dc26      	bgt.n	800881a <_printf_common+0x96>
 80087cc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80087d0:	6822      	ldr	r2, [r4, #0]
 80087d2:	3b00      	subs	r3, #0
 80087d4:	bf18      	it	ne
 80087d6:	2301      	movne	r3, #1
 80087d8:	0692      	lsls	r2, r2, #26
 80087da:	d42b      	bmi.n	8008834 <_printf_common+0xb0>
 80087dc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80087e0:	4641      	mov	r1, r8
 80087e2:	4638      	mov	r0, r7
 80087e4:	47c8      	blx	r9
 80087e6:	3001      	adds	r0, #1
 80087e8:	d01e      	beq.n	8008828 <_printf_common+0xa4>
 80087ea:	6823      	ldr	r3, [r4, #0]
 80087ec:	6922      	ldr	r2, [r4, #16]
 80087ee:	f003 0306 	and.w	r3, r3, #6
 80087f2:	2b04      	cmp	r3, #4
 80087f4:	bf02      	ittt	eq
 80087f6:	68e5      	ldreq	r5, [r4, #12]
 80087f8:	6833      	ldreq	r3, [r6, #0]
 80087fa:	1aed      	subeq	r5, r5, r3
 80087fc:	68a3      	ldr	r3, [r4, #8]
 80087fe:	bf0c      	ite	eq
 8008800:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008804:	2500      	movne	r5, #0
 8008806:	4293      	cmp	r3, r2
 8008808:	bfc4      	itt	gt
 800880a:	1a9b      	subgt	r3, r3, r2
 800880c:	18ed      	addgt	r5, r5, r3
 800880e:	2600      	movs	r6, #0
 8008810:	341a      	adds	r4, #26
 8008812:	42b5      	cmp	r5, r6
 8008814:	d11a      	bne.n	800884c <_printf_common+0xc8>
 8008816:	2000      	movs	r0, #0
 8008818:	e008      	b.n	800882c <_printf_common+0xa8>
 800881a:	2301      	movs	r3, #1
 800881c:	4652      	mov	r2, sl
 800881e:	4641      	mov	r1, r8
 8008820:	4638      	mov	r0, r7
 8008822:	47c8      	blx	r9
 8008824:	3001      	adds	r0, #1
 8008826:	d103      	bne.n	8008830 <_printf_common+0xac>
 8008828:	f04f 30ff 	mov.w	r0, #4294967295
 800882c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008830:	3501      	adds	r5, #1
 8008832:	e7c6      	b.n	80087c2 <_printf_common+0x3e>
 8008834:	18e1      	adds	r1, r4, r3
 8008836:	1c5a      	adds	r2, r3, #1
 8008838:	2030      	movs	r0, #48	@ 0x30
 800883a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800883e:	4422      	add	r2, r4
 8008840:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008844:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008848:	3302      	adds	r3, #2
 800884a:	e7c7      	b.n	80087dc <_printf_common+0x58>
 800884c:	2301      	movs	r3, #1
 800884e:	4622      	mov	r2, r4
 8008850:	4641      	mov	r1, r8
 8008852:	4638      	mov	r0, r7
 8008854:	47c8      	blx	r9
 8008856:	3001      	adds	r0, #1
 8008858:	d0e6      	beq.n	8008828 <_printf_common+0xa4>
 800885a:	3601      	adds	r6, #1
 800885c:	e7d9      	b.n	8008812 <_printf_common+0x8e>
	...

08008860 <_printf_i>:
 8008860:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008864:	7e0f      	ldrb	r7, [r1, #24]
 8008866:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008868:	2f78      	cmp	r7, #120	@ 0x78
 800886a:	4691      	mov	r9, r2
 800886c:	4680      	mov	r8, r0
 800886e:	460c      	mov	r4, r1
 8008870:	469a      	mov	sl, r3
 8008872:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008876:	d807      	bhi.n	8008888 <_printf_i+0x28>
 8008878:	2f62      	cmp	r7, #98	@ 0x62
 800887a:	d80a      	bhi.n	8008892 <_printf_i+0x32>
 800887c:	2f00      	cmp	r7, #0
 800887e:	f000 80d2 	beq.w	8008a26 <_printf_i+0x1c6>
 8008882:	2f58      	cmp	r7, #88	@ 0x58
 8008884:	f000 80b9 	beq.w	80089fa <_printf_i+0x19a>
 8008888:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800888c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008890:	e03a      	b.n	8008908 <_printf_i+0xa8>
 8008892:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008896:	2b15      	cmp	r3, #21
 8008898:	d8f6      	bhi.n	8008888 <_printf_i+0x28>
 800889a:	a101      	add	r1, pc, #4	@ (adr r1, 80088a0 <_printf_i+0x40>)
 800889c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80088a0:	080088f9 	.word	0x080088f9
 80088a4:	0800890d 	.word	0x0800890d
 80088a8:	08008889 	.word	0x08008889
 80088ac:	08008889 	.word	0x08008889
 80088b0:	08008889 	.word	0x08008889
 80088b4:	08008889 	.word	0x08008889
 80088b8:	0800890d 	.word	0x0800890d
 80088bc:	08008889 	.word	0x08008889
 80088c0:	08008889 	.word	0x08008889
 80088c4:	08008889 	.word	0x08008889
 80088c8:	08008889 	.word	0x08008889
 80088cc:	08008a0d 	.word	0x08008a0d
 80088d0:	08008937 	.word	0x08008937
 80088d4:	080089c7 	.word	0x080089c7
 80088d8:	08008889 	.word	0x08008889
 80088dc:	08008889 	.word	0x08008889
 80088e0:	08008a2f 	.word	0x08008a2f
 80088e4:	08008889 	.word	0x08008889
 80088e8:	08008937 	.word	0x08008937
 80088ec:	08008889 	.word	0x08008889
 80088f0:	08008889 	.word	0x08008889
 80088f4:	080089cf 	.word	0x080089cf
 80088f8:	6833      	ldr	r3, [r6, #0]
 80088fa:	1d1a      	adds	r2, r3, #4
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	6032      	str	r2, [r6, #0]
 8008900:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008904:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008908:	2301      	movs	r3, #1
 800890a:	e09d      	b.n	8008a48 <_printf_i+0x1e8>
 800890c:	6833      	ldr	r3, [r6, #0]
 800890e:	6820      	ldr	r0, [r4, #0]
 8008910:	1d19      	adds	r1, r3, #4
 8008912:	6031      	str	r1, [r6, #0]
 8008914:	0606      	lsls	r6, r0, #24
 8008916:	d501      	bpl.n	800891c <_printf_i+0xbc>
 8008918:	681d      	ldr	r5, [r3, #0]
 800891a:	e003      	b.n	8008924 <_printf_i+0xc4>
 800891c:	0645      	lsls	r5, r0, #25
 800891e:	d5fb      	bpl.n	8008918 <_printf_i+0xb8>
 8008920:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008924:	2d00      	cmp	r5, #0
 8008926:	da03      	bge.n	8008930 <_printf_i+0xd0>
 8008928:	232d      	movs	r3, #45	@ 0x2d
 800892a:	426d      	negs	r5, r5
 800892c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008930:	4859      	ldr	r0, [pc, #356]	@ (8008a98 <_printf_i+0x238>)
 8008932:	230a      	movs	r3, #10
 8008934:	e011      	b.n	800895a <_printf_i+0xfa>
 8008936:	6821      	ldr	r1, [r4, #0]
 8008938:	6833      	ldr	r3, [r6, #0]
 800893a:	0608      	lsls	r0, r1, #24
 800893c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008940:	d402      	bmi.n	8008948 <_printf_i+0xe8>
 8008942:	0649      	lsls	r1, r1, #25
 8008944:	bf48      	it	mi
 8008946:	b2ad      	uxthmi	r5, r5
 8008948:	2f6f      	cmp	r7, #111	@ 0x6f
 800894a:	4853      	ldr	r0, [pc, #332]	@ (8008a98 <_printf_i+0x238>)
 800894c:	6033      	str	r3, [r6, #0]
 800894e:	bf14      	ite	ne
 8008950:	230a      	movne	r3, #10
 8008952:	2308      	moveq	r3, #8
 8008954:	2100      	movs	r1, #0
 8008956:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800895a:	6866      	ldr	r6, [r4, #4]
 800895c:	60a6      	str	r6, [r4, #8]
 800895e:	2e00      	cmp	r6, #0
 8008960:	bfa2      	ittt	ge
 8008962:	6821      	ldrge	r1, [r4, #0]
 8008964:	f021 0104 	bicge.w	r1, r1, #4
 8008968:	6021      	strge	r1, [r4, #0]
 800896a:	b90d      	cbnz	r5, 8008970 <_printf_i+0x110>
 800896c:	2e00      	cmp	r6, #0
 800896e:	d04b      	beq.n	8008a08 <_printf_i+0x1a8>
 8008970:	4616      	mov	r6, r2
 8008972:	fbb5 f1f3 	udiv	r1, r5, r3
 8008976:	fb03 5711 	mls	r7, r3, r1, r5
 800897a:	5dc7      	ldrb	r7, [r0, r7]
 800897c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008980:	462f      	mov	r7, r5
 8008982:	42bb      	cmp	r3, r7
 8008984:	460d      	mov	r5, r1
 8008986:	d9f4      	bls.n	8008972 <_printf_i+0x112>
 8008988:	2b08      	cmp	r3, #8
 800898a:	d10b      	bne.n	80089a4 <_printf_i+0x144>
 800898c:	6823      	ldr	r3, [r4, #0]
 800898e:	07df      	lsls	r7, r3, #31
 8008990:	d508      	bpl.n	80089a4 <_printf_i+0x144>
 8008992:	6923      	ldr	r3, [r4, #16]
 8008994:	6861      	ldr	r1, [r4, #4]
 8008996:	4299      	cmp	r1, r3
 8008998:	bfde      	ittt	le
 800899a:	2330      	movle	r3, #48	@ 0x30
 800899c:	f806 3c01 	strble.w	r3, [r6, #-1]
 80089a0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80089a4:	1b92      	subs	r2, r2, r6
 80089a6:	6122      	str	r2, [r4, #16]
 80089a8:	f8cd a000 	str.w	sl, [sp]
 80089ac:	464b      	mov	r3, r9
 80089ae:	aa03      	add	r2, sp, #12
 80089b0:	4621      	mov	r1, r4
 80089b2:	4640      	mov	r0, r8
 80089b4:	f7ff fee6 	bl	8008784 <_printf_common>
 80089b8:	3001      	adds	r0, #1
 80089ba:	d14a      	bne.n	8008a52 <_printf_i+0x1f2>
 80089bc:	f04f 30ff 	mov.w	r0, #4294967295
 80089c0:	b004      	add	sp, #16
 80089c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089c6:	6823      	ldr	r3, [r4, #0]
 80089c8:	f043 0320 	orr.w	r3, r3, #32
 80089cc:	6023      	str	r3, [r4, #0]
 80089ce:	4833      	ldr	r0, [pc, #204]	@ (8008a9c <_printf_i+0x23c>)
 80089d0:	2778      	movs	r7, #120	@ 0x78
 80089d2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80089d6:	6823      	ldr	r3, [r4, #0]
 80089d8:	6831      	ldr	r1, [r6, #0]
 80089da:	061f      	lsls	r7, r3, #24
 80089dc:	f851 5b04 	ldr.w	r5, [r1], #4
 80089e0:	d402      	bmi.n	80089e8 <_printf_i+0x188>
 80089e2:	065f      	lsls	r7, r3, #25
 80089e4:	bf48      	it	mi
 80089e6:	b2ad      	uxthmi	r5, r5
 80089e8:	6031      	str	r1, [r6, #0]
 80089ea:	07d9      	lsls	r1, r3, #31
 80089ec:	bf44      	itt	mi
 80089ee:	f043 0320 	orrmi.w	r3, r3, #32
 80089f2:	6023      	strmi	r3, [r4, #0]
 80089f4:	b11d      	cbz	r5, 80089fe <_printf_i+0x19e>
 80089f6:	2310      	movs	r3, #16
 80089f8:	e7ac      	b.n	8008954 <_printf_i+0xf4>
 80089fa:	4827      	ldr	r0, [pc, #156]	@ (8008a98 <_printf_i+0x238>)
 80089fc:	e7e9      	b.n	80089d2 <_printf_i+0x172>
 80089fe:	6823      	ldr	r3, [r4, #0]
 8008a00:	f023 0320 	bic.w	r3, r3, #32
 8008a04:	6023      	str	r3, [r4, #0]
 8008a06:	e7f6      	b.n	80089f6 <_printf_i+0x196>
 8008a08:	4616      	mov	r6, r2
 8008a0a:	e7bd      	b.n	8008988 <_printf_i+0x128>
 8008a0c:	6833      	ldr	r3, [r6, #0]
 8008a0e:	6825      	ldr	r5, [r4, #0]
 8008a10:	6961      	ldr	r1, [r4, #20]
 8008a12:	1d18      	adds	r0, r3, #4
 8008a14:	6030      	str	r0, [r6, #0]
 8008a16:	062e      	lsls	r6, r5, #24
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	d501      	bpl.n	8008a20 <_printf_i+0x1c0>
 8008a1c:	6019      	str	r1, [r3, #0]
 8008a1e:	e002      	b.n	8008a26 <_printf_i+0x1c6>
 8008a20:	0668      	lsls	r0, r5, #25
 8008a22:	d5fb      	bpl.n	8008a1c <_printf_i+0x1bc>
 8008a24:	8019      	strh	r1, [r3, #0]
 8008a26:	2300      	movs	r3, #0
 8008a28:	6123      	str	r3, [r4, #16]
 8008a2a:	4616      	mov	r6, r2
 8008a2c:	e7bc      	b.n	80089a8 <_printf_i+0x148>
 8008a2e:	6833      	ldr	r3, [r6, #0]
 8008a30:	1d1a      	adds	r2, r3, #4
 8008a32:	6032      	str	r2, [r6, #0]
 8008a34:	681e      	ldr	r6, [r3, #0]
 8008a36:	6862      	ldr	r2, [r4, #4]
 8008a38:	2100      	movs	r1, #0
 8008a3a:	4630      	mov	r0, r6
 8008a3c:	f7f7 fc00 	bl	8000240 <memchr>
 8008a40:	b108      	cbz	r0, 8008a46 <_printf_i+0x1e6>
 8008a42:	1b80      	subs	r0, r0, r6
 8008a44:	6060      	str	r0, [r4, #4]
 8008a46:	6863      	ldr	r3, [r4, #4]
 8008a48:	6123      	str	r3, [r4, #16]
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008a50:	e7aa      	b.n	80089a8 <_printf_i+0x148>
 8008a52:	6923      	ldr	r3, [r4, #16]
 8008a54:	4632      	mov	r2, r6
 8008a56:	4649      	mov	r1, r9
 8008a58:	4640      	mov	r0, r8
 8008a5a:	47d0      	blx	sl
 8008a5c:	3001      	adds	r0, #1
 8008a5e:	d0ad      	beq.n	80089bc <_printf_i+0x15c>
 8008a60:	6823      	ldr	r3, [r4, #0]
 8008a62:	079b      	lsls	r3, r3, #30
 8008a64:	d413      	bmi.n	8008a8e <_printf_i+0x22e>
 8008a66:	68e0      	ldr	r0, [r4, #12]
 8008a68:	9b03      	ldr	r3, [sp, #12]
 8008a6a:	4298      	cmp	r0, r3
 8008a6c:	bfb8      	it	lt
 8008a6e:	4618      	movlt	r0, r3
 8008a70:	e7a6      	b.n	80089c0 <_printf_i+0x160>
 8008a72:	2301      	movs	r3, #1
 8008a74:	4632      	mov	r2, r6
 8008a76:	4649      	mov	r1, r9
 8008a78:	4640      	mov	r0, r8
 8008a7a:	47d0      	blx	sl
 8008a7c:	3001      	adds	r0, #1
 8008a7e:	d09d      	beq.n	80089bc <_printf_i+0x15c>
 8008a80:	3501      	adds	r5, #1
 8008a82:	68e3      	ldr	r3, [r4, #12]
 8008a84:	9903      	ldr	r1, [sp, #12]
 8008a86:	1a5b      	subs	r3, r3, r1
 8008a88:	42ab      	cmp	r3, r5
 8008a8a:	dcf2      	bgt.n	8008a72 <_printf_i+0x212>
 8008a8c:	e7eb      	b.n	8008a66 <_printf_i+0x206>
 8008a8e:	2500      	movs	r5, #0
 8008a90:	f104 0619 	add.w	r6, r4, #25
 8008a94:	e7f5      	b.n	8008a82 <_printf_i+0x222>
 8008a96:	bf00      	nop
 8008a98:	08008f95 	.word	0x08008f95
 8008a9c:	08008fa6 	.word	0x08008fa6

08008aa0 <memmove>:
 8008aa0:	4288      	cmp	r0, r1
 8008aa2:	b510      	push	{r4, lr}
 8008aa4:	eb01 0402 	add.w	r4, r1, r2
 8008aa8:	d902      	bls.n	8008ab0 <memmove+0x10>
 8008aaa:	4284      	cmp	r4, r0
 8008aac:	4623      	mov	r3, r4
 8008aae:	d807      	bhi.n	8008ac0 <memmove+0x20>
 8008ab0:	1e43      	subs	r3, r0, #1
 8008ab2:	42a1      	cmp	r1, r4
 8008ab4:	d008      	beq.n	8008ac8 <memmove+0x28>
 8008ab6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008aba:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008abe:	e7f8      	b.n	8008ab2 <memmove+0x12>
 8008ac0:	4402      	add	r2, r0
 8008ac2:	4601      	mov	r1, r0
 8008ac4:	428a      	cmp	r2, r1
 8008ac6:	d100      	bne.n	8008aca <memmove+0x2a>
 8008ac8:	bd10      	pop	{r4, pc}
 8008aca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008ace:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008ad2:	e7f7      	b.n	8008ac4 <memmove+0x24>

08008ad4 <_sbrk_r>:
 8008ad4:	b538      	push	{r3, r4, r5, lr}
 8008ad6:	4d06      	ldr	r5, [pc, #24]	@ (8008af0 <_sbrk_r+0x1c>)
 8008ad8:	2300      	movs	r3, #0
 8008ada:	4604      	mov	r4, r0
 8008adc:	4608      	mov	r0, r1
 8008ade:	602b      	str	r3, [r5, #0]
 8008ae0:	f7f8 faaa 	bl	8001038 <_sbrk>
 8008ae4:	1c43      	adds	r3, r0, #1
 8008ae6:	d102      	bne.n	8008aee <_sbrk_r+0x1a>
 8008ae8:	682b      	ldr	r3, [r5, #0]
 8008aea:	b103      	cbz	r3, 8008aee <_sbrk_r+0x1a>
 8008aec:	6023      	str	r3, [r4, #0]
 8008aee:	bd38      	pop	{r3, r4, r5, pc}
 8008af0:	2001307c 	.word	0x2001307c

08008af4 <_realloc_r>:
 8008af4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008af8:	4680      	mov	r8, r0
 8008afa:	4615      	mov	r5, r2
 8008afc:	460c      	mov	r4, r1
 8008afe:	b921      	cbnz	r1, 8008b0a <_realloc_r+0x16>
 8008b00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b04:	4611      	mov	r1, r2
 8008b06:	f7ff bc59 	b.w	80083bc <_malloc_r>
 8008b0a:	b92a      	cbnz	r2, 8008b18 <_realloc_r+0x24>
 8008b0c:	f7ff fbea 	bl	80082e4 <_free_r>
 8008b10:	2400      	movs	r4, #0
 8008b12:	4620      	mov	r0, r4
 8008b14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b18:	f000 f81a 	bl	8008b50 <_malloc_usable_size_r>
 8008b1c:	4285      	cmp	r5, r0
 8008b1e:	4606      	mov	r6, r0
 8008b20:	d802      	bhi.n	8008b28 <_realloc_r+0x34>
 8008b22:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008b26:	d8f4      	bhi.n	8008b12 <_realloc_r+0x1e>
 8008b28:	4629      	mov	r1, r5
 8008b2a:	4640      	mov	r0, r8
 8008b2c:	f7ff fc46 	bl	80083bc <_malloc_r>
 8008b30:	4607      	mov	r7, r0
 8008b32:	2800      	cmp	r0, #0
 8008b34:	d0ec      	beq.n	8008b10 <_realloc_r+0x1c>
 8008b36:	42b5      	cmp	r5, r6
 8008b38:	462a      	mov	r2, r5
 8008b3a:	4621      	mov	r1, r4
 8008b3c:	bf28      	it	cs
 8008b3e:	4632      	movcs	r2, r6
 8008b40:	f7ff fbc2 	bl	80082c8 <memcpy>
 8008b44:	4621      	mov	r1, r4
 8008b46:	4640      	mov	r0, r8
 8008b48:	f7ff fbcc 	bl	80082e4 <_free_r>
 8008b4c:	463c      	mov	r4, r7
 8008b4e:	e7e0      	b.n	8008b12 <_realloc_r+0x1e>

08008b50 <_malloc_usable_size_r>:
 8008b50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b54:	1f18      	subs	r0, r3, #4
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	bfbc      	itt	lt
 8008b5a:	580b      	ldrlt	r3, [r1, r0]
 8008b5c:	18c0      	addlt	r0, r0, r3
 8008b5e:	4770      	bx	lr

08008b60 <_init>:
 8008b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b62:	bf00      	nop
 8008b64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b66:	bc08      	pop	{r3}
 8008b68:	469e      	mov	lr, r3
 8008b6a:	4770      	bx	lr

08008b6c <_fini>:
 8008b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b6e:	bf00      	nop
 8008b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b72:	bc08      	pop	{r3}
 8008b74:	469e      	mov	lr, r3
 8008b76:	4770      	bx	lr
