
Queues.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000768c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000208  0800785c  0800785c  0000885c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a64  08007a64  00009014  2**0
                  CONTENTS
  4 .ARM          00000008  08007a64  08007a64  00008a64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a6c  08007a6c  00009014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a6c  08007a6c  00008a6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007a70  08007a70  00008a70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08007a74  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012ea4  20000014  08007a88  00009014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20012eb8  08007a88  00009eb8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015d0d  00000000  00000000  00009044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035cd  00000000  00000000  0001ed51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001370  00000000  00000000  00022320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f1d  00000000  00000000  00023690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024bd8  00000000  00000000  000245ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018d95  00000000  00000000  00049185  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e02e1  00000000  00000000  00061f1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001421fb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005108  00000000  00000000  00142240  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  00147348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000014 	.word	0x20000014
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007844 	.word	0x08007844

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000018 	.word	0x20000018
 800020c:	08007844 	.word	0x08007844

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <__aeabi_uldivmod>:
 8000234:	b953      	cbnz	r3, 800024c <__aeabi_uldivmod+0x18>
 8000236:	b94a      	cbnz	r2, 800024c <__aeabi_uldivmod+0x18>
 8000238:	2900      	cmp	r1, #0
 800023a:	bf08      	it	eq
 800023c:	2800      	cmpeq	r0, #0
 800023e:	bf1c      	itt	ne
 8000240:	f04f 31ff 	movne.w	r1, #4294967295
 8000244:	f04f 30ff 	movne.w	r0, #4294967295
 8000248:	f000 b96a 	b.w	8000520 <__aeabi_idiv0>
 800024c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000250:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000254:	f000 f806 	bl	8000264 <__udivmoddi4>
 8000258:	f8dd e004 	ldr.w	lr, [sp, #4]
 800025c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000260:	b004      	add	sp, #16
 8000262:	4770      	bx	lr

08000264 <__udivmoddi4>:
 8000264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000268:	9d08      	ldr	r5, [sp, #32]
 800026a:	460c      	mov	r4, r1
 800026c:	2b00      	cmp	r3, #0
 800026e:	d14e      	bne.n	800030e <__udivmoddi4+0xaa>
 8000270:	4694      	mov	ip, r2
 8000272:	458c      	cmp	ip, r1
 8000274:	4686      	mov	lr, r0
 8000276:	fab2 f282 	clz	r2, r2
 800027a:	d962      	bls.n	8000342 <__udivmoddi4+0xde>
 800027c:	b14a      	cbz	r2, 8000292 <__udivmoddi4+0x2e>
 800027e:	f1c2 0320 	rsb	r3, r2, #32
 8000282:	4091      	lsls	r1, r2
 8000284:	fa20 f303 	lsr.w	r3, r0, r3
 8000288:	fa0c fc02 	lsl.w	ip, ip, r2
 800028c:	4319      	orrs	r1, r3
 800028e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000292:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000296:	fa1f f68c 	uxth.w	r6, ip
 800029a:	fbb1 f4f7 	udiv	r4, r1, r7
 800029e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002a2:	fb07 1114 	mls	r1, r7, r4, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb04 f106 	mul.w	r1, r4, r6
 80002ae:	4299      	cmp	r1, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x64>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f104 30ff 	add.w	r0, r4, #4294967295
 80002ba:	f080 8112 	bcs.w	80004e2 <__udivmoddi4+0x27e>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 810f 	bls.w	80004e2 <__udivmoddi4+0x27e>
 80002c4:	3c02      	subs	r4, #2
 80002c6:	4463      	add	r3, ip
 80002c8:	1a59      	subs	r1, r3, r1
 80002ca:	fa1f f38e 	uxth.w	r3, lr
 80002ce:	fbb1 f0f7 	udiv	r0, r1, r7
 80002d2:	fb07 1110 	mls	r1, r7, r0, r1
 80002d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002da:	fb00 f606 	mul.w	r6, r0, r6
 80002de:	429e      	cmp	r6, r3
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x94>
 80002e2:	eb1c 0303 	adds.w	r3, ip, r3
 80002e6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ea:	f080 80fc 	bcs.w	80004e6 <__udivmoddi4+0x282>
 80002ee:	429e      	cmp	r6, r3
 80002f0:	f240 80f9 	bls.w	80004e6 <__udivmoddi4+0x282>
 80002f4:	4463      	add	r3, ip
 80002f6:	3802      	subs	r0, #2
 80002f8:	1b9b      	subs	r3, r3, r6
 80002fa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002fe:	2100      	movs	r1, #0
 8000300:	b11d      	cbz	r5, 800030a <__udivmoddi4+0xa6>
 8000302:	40d3      	lsrs	r3, r2
 8000304:	2200      	movs	r2, #0
 8000306:	e9c5 3200 	strd	r3, r2, [r5]
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d905      	bls.n	800031e <__udivmoddi4+0xba>
 8000312:	b10d      	cbz	r5, 8000318 <__udivmoddi4+0xb4>
 8000314:	e9c5 0100 	strd	r0, r1, [r5]
 8000318:	2100      	movs	r1, #0
 800031a:	4608      	mov	r0, r1
 800031c:	e7f5      	b.n	800030a <__udivmoddi4+0xa6>
 800031e:	fab3 f183 	clz	r1, r3
 8000322:	2900      	cmp	r1, #0
 8000324:	d146      	bne.n	80003b4 <__udivmoddi4+0x150>
 8000326:	42a3      	cmp	r3, r4
 8000328:	d302      	bcc.n	8000330 <__udivmoddi4+0xcc>
 800032a:	4290      	cmp	r0, r2
 800032c:	f0c0 80f0 	bcc.w	8000510 <__udivmoddi4+0x2ac>
 8000330:	1a86      	subs	r6, r0, r2
 8000332:	eb64 0303 	sbc.w	r3, r4, r3
 8000336:	2001      	movs	r0, #1
 8000338:	2d00      	cmp	r5, #0
 800033a:	d0e6      	beq.n	800030a <__udivmoddi4+0xa6>
 800033c:	e9c5 6300 	strd	r6, r3, [r5]
 8000340:	e7e3      	b.n	800030a <__udivmoddi4+0xa6>
 8000342:	2a00      	cmp	r2, #0
 8000344:	f040 8090 	bne.w	8000468 <__udivmoddi4+0x204>
 8000348:	eba1 040c 	sub.w	r4, r1, ip
 800034c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000350:	fa1f f78c 	uxth.w	r7, ip
 8000354:	2101      	movs	r1, #1
 8000356:	fbb4 f6f8 	udiv	r6, r4, r8
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb08 4416 	mls	r4, r8, r6, r4
 8000362:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000366:	fb07 f006 	mul.w	r0, r7, r6
 800036a:	4298      	cmp	r0, r3
 800036c:	d908      	bls.n	8000380 <__udivmoddi4+0x11c>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 34ff 	add.w	r4, r6, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x11a>
 8000378:	4298      	cmp	r0, r3
 800037a:	f200 80cd 	bhi.w	8000518 <__udivmoddi4+0x2b4>
 800037e:	4626      	mov	r6, r4
 8000380:	1a1c      	subs	r4, r3, r0
 8000382:	fa1f f38e 	uxth.w	r3, lr
 8000386:	fbb4 f0f8 	udiv	r0, r4, r8
 800038a:	fb08 4410 	mls	r4, r8, r0, r4
 800038e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000392:	fb00 f707 	mul.w	r7, r0, r7
 8000396:	429f      	cmp	r7, r3
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0x148>
 800039a:	eb1c 0303 	adds.w	r3, ip, r3
 800039e:	f100 34ff 	add.w	r4, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x146>
 80003a4:	429f      	cmp	r7, r3
 80003a6:	f200 80b0 	bhi.w	800050a <__udivmoddi4+0x2a6>
 80003aa:	4620      	mov	r0, r4
 80003ac:	1bdb      	subs	r3, r3, r7
 80003ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b2:	e7a5      	b.n	8000300 <__udivmoddi4+0x9c>
 80003b4:	f1c1 0620 	rsb	r6, r1, #32
 80003b8:	408b      	lsls	r3, r1
 80003ba:	fa22 f706 	lsr.w	r7, r2, r6
 80003be:	431f      	orrs	r7, r3
 80003c0:	fa20 fc06 	lsr.w	ip, r0, r6
 80003c4:	fa04 f301 	lsl.w	r3, r4, r1
 80003c8:	ea43 030c 	orr.w	r3, r3, ip
 80003cc:	40f4      	lsrs	r4, r6
 80003ce:	fa00 f801 	lsl.w	r8, r0, r1
 80003d2:	0c38      	lsrs	r0, r7, #16
 80003d4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003d8:	fbb4 fef0 	udiv	lr, r4, r0
 80003dc:	fa1f fc87 	uxth.w	ip, r7
 80003e0:	fb00 441e 	mls	r4, r0, lr, r4
 80003e4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003e8:	fb0e f90c 	mul.w	r9, lr, ip
 80003ec:	45a1      	cmp	r9, r4
 80003ee:	fa02 f201 	lsl.w	r2, r2, r1
 80003f2:	d90a      	bls.n	800040a <__udivmoddi4+0x1a6>
 80003f4:	193c      	adds	r4, r7, r4
 80003f6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003fa:	f080 8084 	bcs.w	8000506 <__udivmoddi4+0x2a2>
 80003fe:	45a1      	cmp	r9, r4
 8000400:	f240 8081 	bls.w	8000506 <__udivmoddi4+0x2a2>
 8000404:	f1ae 0e02 	sub.w	lr, lr, #2
 8000408:	443c      	add	r4, r7
 800040a:	eba4 0409 	sub.w	r4, r4, r9
 800040e:	fa1f f983 	uxth.w	r9, r3
 8000412:	fbb4 f3f0 	udiv	r3, r4, r0
 8000416:	fb00 4413 	mls	r4, r0, r3, r4
 800041a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800041e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000422:	45a4      	cmp	ip, r4
 8000424:	d907      	bls.n	8000436 <__udivmoddi4+0x1d2>
 8000426:	193c      	adds	r4, r7, r4
 8000428:	f103 30ff 	add.w	r0, r3, #4294967295
 800042c:	d267      	bcs.n	80004fe <__udivmoddi4+0x29a>
 800042e:	45a4      	cmp	ip, r4
 8000430:	d965      	bls.n	80004fe <__udivmoddi4+0x29a>
 8000432:	3b02      	subs	r3, #2
 8000434:	443c      	add	r4, r7
 8000436:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800043a:	fba0 9302 	umull	r9, r3, r0, r2
 800043e:	eba4 040c 	sub.w	r4, r4, ip
 8000442:	429c      	cmp	r4, r3
 8000444:	46ce      	mov	lr, r9
 8000446:	469c      	mov	ip, r3
 8000448:	d351      	bcc.n	80004ee <__udivmoddi4+0x28a>
 800044a:	d04e      	beq.n	80004ea <__udivmoddi4+0x286>
 800044c:	b155      	cbz	r5, 8000464 <__udivmoddi4+0x200>
 800044e:	ebb8 030e 	subs.w	r3, r8, lr
 8000452:	eb64 040c 	sbc.w	r4, r4, ip
 8000456:	fa04 f606 	lsl.w	r6, r4, r6
 800045a:	40cb      	lsrs	r3, r1
 800045c:	431e      	orrs	r6, r3
 800045e:	40cc      	lsrs	r4, r1
 8000460:	e9c5 6400 	strd	r6, r4, [r5]
 8000464:	2100      	movs	r1, #0
 8000466:	e750      	b.n	800030a <__udivmoddi4+0xa6>
 8000468:	f1c2 0320 	rsb	r3, r2, #32
 800046c:	fa20 f103 	lsr.w	r1, r0, r3
 8000470:	fa0c fc02 	lsl.w	ip, ip, r2
 8000474:	fa24 f303 	lsr.w	r3, r4, r3
 8000478:	4094      	lsls	r4, r2
 800047a:	430c      	orrs	r4, r1
 800047c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000480:	fa00 fe02 	lsl.w	lr, r0, r2
 8000484:	fa1f f78c 	uxth.w	r7, ip
 8000488:	fbb3 f0f8 	udiv	r0, r3, r8
 800048c:	fb08 3110 	mls	r1, r8, r0, r3
 8000490:	0c23      	lsrs	r3, r4, #16
 8000492:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000496:	fb00 f107 	mul.w	r1, r0, r7
 800049a:	4299      	cmp	r1, r3
 800049c:	d908      	bls.n	80004b0 <__udivmoddi4+0x24c>
 800049e:	eb1c 0303 	adds.w	r3, ip, r3
 80004a2:	f100 36ff 	add.w	r6, r0, #4294967295
 80004a6:	d22c      	bcs.n	8000502 <__udivmoddi4+0x29e>
 80004a8:	4299      	cmp	r1, r3
 80004aa:	d92a      	bls.n	8000502 <__udivmoddi4+0x29e>
 80004ac:	3802      	subs	r0, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	1a5b      	subs	r3, r3, r1
 80004b2:	b2a4      	uxth	r4, r4
 80004b4:	fbb3 f1f8 	udiv	r1, r3, r8
 80004b8:	fb08 3311 	mls	r3, r8, r1, r3
 80004bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004c0:	fb01 f307 	mul.w	r3, r1, r7
 80004c4:	42a3      	cmp	r3, r4
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x276>
 80004c8:	eb1c 0404 	adds.w	r4, ip, r4
 80004cc:	f101 36ff 	add.w	r6, r1, #4294967295
 80004d0:	d213      	bcs.n	80004fa <__udivmoddi4+0x296>
 80004d2:	42a3      	cmp	r3, r4
 80004d4:	d911      	bls.n	80004fa <__udivmoddi4+0x296>
 80004d6:	3902      	subs	r1, #2
 80004d8:	4464      	add	r4, ip
 80004da:	1ae4      	subs	r4, r4, r3
 80004dc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004e0:	e739      	b.n	8000356 <__udivmoddi4+0xf2>
 80004e2:	4604      	mov	r4, r0
 80004e4:	e6f0      	b.n	80002c8 <__udivmoddi4+0x64>
 80004e6:	4608      	mov	r0, r1
 80004e8:	e706      	b.n	80002f8 <__udivmoddi4+0x94>
 80004ea:	45c8      	cmp	r8, r9
 80004ec:	d2ae      	bcs.n	800044c <__udivmoddi4+0x1e8>
 80004ee:	ebb9 0e02 	subs.w	lr, r9, r2
 80004f2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004f6:	3801      	subs	r0, #1
 80004f8:	e7a8      	b.n	800044c <__udivmoddi4+0x1e8>
 80004fa:	4631      	mov	r1, r6
 80004fc:	e7ed      	b.n	80004da <__udivmoddi4+0x276>
 80004fe:	4603      	mov	r3, r0
 8000500:	e799      	b.n	8000436 <__udivmoddi4+0x1d2>
 8000502:	4630      	mov	r0, r6
 8000504:	e7d4      	b.n	80004b0 <__udivmoddi4+0x24c>
 8000506:	46d6      	mov	lr, sl
 8000508:	e77f      	b.n	800040a <__udivmoddi4+0x1a6>
 800050a:	4463      	add	r3, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e74d      	b.n	80003ac <__udivmoddi4+0x148>
 8000510:	4606      	mov	r6, r0
 8000512:	4623      	mov	r3, r4
 8000514:	4608      	mov	r0, r1
 8000516:	e70f      	b.n	8000338 <__udivmoddi4+0xd4>
 8000518:	3e02      	subs	r6, #2
 800051a:	4463      	add	r3, ip
 800051c:	e730      	b.n	8000380 <__udivmoddi4+0x11c>
 800051e:	bf00      	nop

08000520 <__aeabi_idiv0>:
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop

08000524 <led_effect_stop>:


#include "main.h"

void led_effect_stop(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b084      	sub	sp, #16
 8000528:	af02      	add	r7, sp, #8
	for(int i = 0 ; i < 4 ; i++)
 800052a:	2300      	movs	r3, #0
 800052c:	607b      	str	r3, [r7, #4]
 800052e:	e00e      	b.n	800054e <led_effect_stop+0x2a>
		xTimerStop(led_timer_handle[i],portMAX_DELAY);
 8000530:	4a0b      	ldr	r2, [pc, #44]	@ (8000560 <led_effect_stop+0x3c>)
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000538:	f04f 33ff 	mov.w	r3, #4294967295
 800053c:	9300      	str	r3, [sp, #0]
 800053e:	2300      	movs	r3, #0
 8000540:	2200      	movs	r2, #0
 8000542:	2103      	movs	r1, #3
 8000544:	f006 fa4e 	bl	80069e4 <xTimerGenericCommand>
	for(int i = 0 ; i < 4 ; i++)
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	3301      	adds	r3, #1
 800054c:	607b      	str	r3, [r7, #4]
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	2b03      	cmp	r3, #3
 8000552:	dded      	ble.n	8000530 <led_effect_stop+0xc>
}
 8000554:	bf00      	nop
 8000556:	bf00      	nop
 8000558:	3708      	adds	r7, #8
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	200000b4 	.word	0x200000b4

08000564 <led_effect>:

void led_effect(int n )
{
 8000564:	b590      	push	{r4, r7, lr}
 8000566:	b085      	sub	sp, #20
 8000568:	af02      	add	r7, sp, #8
 800056a:	6078      	str	r0, [r7, #4]
	led_effect_stop();
 800056c:	f7ff ffda 	bl	8000524 <led_effect_stop>
	xTimerStart(led_timer_handle[n-1], portMAX_DELAY);
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	3b01      	subs	r3, #1
 8000574:	4a08      	ldr	r2, [pc, #32]	@ (8000598 <led_effect+0x34>)
 8000576:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800057a:	f005 f94b 	bl	8005814 <xTaskGetTickCount>
 800057e:	4602      	mov	r2, r0
 8000580:	f04f 33ff 	mov.w	r3, #4294967295
 8000584:	9300      	str	r3, [sp, #0]
 8000586:	2300      	movs	r3, #0
 8000588:	2101      	movs	r1, #1
 800058a:	4620      	mov	r0, r4
 800058c:	f006 fa2a 	bl	80069e4 <xTimerGenericCommand>

}
 8000590:	bf00      	nop
 8000592:	370c      	adds	r7, #12
 8000594:	46bd      	mov	sp, r7
 8000596:	bd90      	pop	{r4, r7, pc}
 8000598:	200000b4 	.word	0x200000b4

0800059c <LED_effect1>:


void LED_effect1(){
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
	// LED2 toggle at 1s
	HAL_GPIO_TogglePin(GPIOA, LED_GREEN_PIN);
 80005a0:	2120      	movs	r1, #32
 80005a2:	4804      	ldr	r0, [pc, #16]	@ (80005b4 <LED_effect1+0x18>)
 80005a4:	f001 f9b7 	bl	8001916 <HAL_GPIO_TogglePin>
	vTaskDelay(pdMS_TO_TICKS(1000));
 80005a8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005ac:	f004 ffa0 	bl	80054f0 <vTaskDelay>
}
 80005b0:	bf00      	nop
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	40020000 	.word	0x40020000

080005b8 <LED_effect2>:


void LED_effect2(){
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
	// LED2 toggle at 2s
	HAL_GPIO_TogglePin(GPIOA, LED_GREEN_PIN);
 80005bc:	2120      	movs	r1, #32
 80005be:	4804      	ldr	r0, [pc, #16]	@ (80005d0 <LED_effect2+0x18>)
 80005c0:	f001 f9a9 	bl	8001916 <HAL_GPIO_TogglePin>
	vTaskDelay(pdMS_TO_TICKS(2000));
 80005c4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80005c8:	f004 ff92 	bl	80054f0 <vTaskDelay>
}
 80005cc:	bf00      	nop
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	40020000 	.word	0x40020000

080005d4 <LED_effect3>:

void LED_effect3(){
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
	// LED2 toggle at 3s
	HAL_GPIO_TogglePin(GPIOA, LED_GREEN_PIN);
 80005d8:	2120      	movs	r1, #32
 80005da:	4804      	ldr	r0, [pc, #16]	@ (80005ec <LED_effect3+0x18>)
 80005dc:	f001 f99b 	bl	8001916 <HAL_GPIO_TogglePin>
	vTaskDelay(pdMS_TO_TICKS(3000));
 80005e0:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80005e4:	f004 ff84 	bl	80054f0 <vTaskDelay>
}
 80005e8:	bf00      	nop
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	40020000 	.word	0x40020000

080005f0 <LED_effect4>:

void LED_effect4(){
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
	// LED2 toggle at 4s
	HAL_GPIO_TogglePin(GPIOA, LED_GREEN_PIN);
 80005f4:	2120      	movs	r1, #32
 80005f6:	4804      	ldr	r0, [pc, #16]	@ (8000608 <LED_effect4+0x18>)
 80005f8:	f001 f98d 	bl	8001916 <HAL_GPIO_TogglePin>
	vTaskDelay(pdMS_TO_TICKS(400));
 80005fc:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8000600:	f004 ff76 	bl	80054f0 <vTaskDelay>
}
 8000604:	bf00      	nop
 8000606:	bd80      	pop	{r7, pc}
 8000608:	40020000 	.word	0x40020000

0800060c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b08c      	sub	sp, #48	@ 0x30
 8000610:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000612:	f000 fe1d 	bl	8001250 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000616:	f000 f907 	bl	8000828 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800061a:	f000 f9c7 	bl	80009ac <MX_GPIO_Init>
  MX_RTC_Init();
 800061e:	f000 f975 	bl	800090c <MX_RTC_Init>
  MX_USART2_UART_Init();
 8000622:	f000 f999 	bl	8000958 <MX_USART2_UART_Init>
  // Start segger recording:
  //SEGGER_SYSVIEW_Conf();

  //SEGGER_SYSVIEW_Start();		// When using Segger UART, SYSView Start occurs within the init funciton.

  status = xTaskCreate(menu_task_handler, "menu_task", 200, NULL, 2, &menu_task_handle );
 8000626:	4b6a      	ldr	r3, [pc, #424]	@ (80007d0 <main+0x1c4>)
 8000628:	9301      	str	r3, [sp, #4]
 800062a:	2302      	movs	r3, #2
 800062c:	9300      	str	r3, [sp, #0]
 800062e:	2300      	movs	r3, #0
 8000630:	22c8      	movs	r2, #200	@ 0xc8
 8000632:	4968      	ldr	r1, [pc, #416]	@ (80007d4 <main+0x1c8>)
 8000634:	4868      	ldr	r0, [pc, #416]	@ (80007d8 <main+0x1cc>)
 8000636:	f004 fd6d 	bl	8005114 <xTaskCreate>
 800063a:	6238      	str	r0, [r7, #32]
  configASSERT(status == pdPASS);
 800063c:	6a3b      	ldr	r3, [r7, #32]
 800063e:	2b01      	cmp	r3, #1
 8000640:	d00b      	beq.n	800065a <main+0x4e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000642:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000646:	f383 8811 	msr	BASEPRI, r3
 800064a:	f3bf 8f6f 	isb	sy
 800064e:	f3bf 8f4f 	dsb	sy
 8000652:	61fb      	str	r3, [r7, #28]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000654:	bf00      	nop
 8000656:	bf00      	nop
 8000658:	e7fd      	b.n	8000656 <main+0x4a>

  status = xTaskCreate(cmd_task_handler, "cmd_task", 200, NULL, 2, &cmd_task_handle );
 800065a:	4b60      	ldr	r3, [pc, #384]	@ (80007dc <main+0x1d0>)
 800065c:	9301      	str	r3, [sp, #4]
 800065e:	2302      	movs	r3, #2
 8000660:	9300      	str	r3, [sp, #0]
 8000662:	2300      	movs	r3, #0
 8000664:	22c8      	movs	r2, #200	@ 0xc8
 8000666:	495e      	ldr	r1, [pc, #376]	@ (80007e0 <main+0x1d4>)
 8000668:	485e      	ldr	r0, [pc, #376]	@ (80007e4 <main+0x1d8>)
 800066a:	f004 fd53 	bl	8005114 <xTaskCreate>
 800066e:	6238      	str	r0, [r7, #32]
  configASSERT(status == pdPASS);
 8000670:	6a3b      	ldr	r3, [r7, #32]
 8000672:	2b01      	cmp	r3, #1
 8000674:	d00b      	beq.n	800068e <main+0x82>
        __asm volatile
 8000676:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800067a:	f383 8811 	msr	BASEPRI, r3
 800067e:	f3bf 8f6f 	isb	sy
 8000682:	f3bf 8f4f 	dsb	sy
 8000686:	61bb      	str	r3, [r7, #24]
    }
 8000688:	bf00      	nop
 800068a:	bf00      	nop
 800068c:	e7fd      	b.n	800068a <main+0x7e>

  status = xTaskCreate(print_task_handler, "print_task", 200, NULL, 2, &print_task_handle);
 800068e:	4b56      	ldr	r3, [pc, #344]	@ (80007e8 <main+0x1dc>)
 8000690:	9301      	str	r3, [sp, #4]
 8000692:	2302      	movs	r3, #2
 8000694:	9300      	str	r3, [sp, #0]
 8000696:	2300      	movs	r3, #0
 8000698:	22c8      	movs	r2, #200	@ 0xc8
 800069a:	4954      	ldr	r1, [pc, #336]	@ (80007ec <main+0x1e0>)
 800069c:	4854      	ldr	r0, [pc, #336]	@ (80007f0 <main+0x1e4>)
 800069e:	f004 fd39 	bl	8005114 <xTaskCreate>
 80006a2:	6238      	str	r0, [r7, #32]
  configASSERT(status == pdPASS);
 80006a4:	6a3b      	ldr	r3, [r7, #32]
 80006a6:	2b01      	cmp	r3, #1
 80006a8:	d00b      	beq.n	80006c2 <main+0xb6>
        __asm volatile
 80006aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80006ae:	f383 8811 	msr	BASEPRI, r3
 80006b2:	f3bf 8f6f 	isb	sy
 80006b6:	f3bf 8f4f 	dsb	sy
 80006ba:	617b      	str	r3, [r7, #20]
    }
 80006bc:	bf00      	nop
 80006be:	bf00      	nop
 80006c0:	e7fd      	b.n	80006be <main+0xb2>

  status = xTaskCreate(led_task_handler, "led_task", 200, NULL,2, &led_task_handle);
 80006c2:	4b4c      	ldr	r3, [pc, #304]	@ (80007f4 <main+0x1e8>)
 80006c4:	9301      	str	r3, [sp, #4]
 80006c6:	2302      	movs	r3, #2
 80006c8:	9300      	str	r3, [sp, #0]
 80006ca:	2300      	movs	r3, #0
 80006cc:	22c8      	movs	r2, #200	@ 0xc8
 80006ce:	494a      	ldr	r1, [pc, #296]	@ (80007f8 <main+0x1ec>)
 80006d0:	484a      	ldr	r0, [pc, #296]	@ (80007fc <main+0x1f0>)
 80006d2:	f004 fd1f 	bl	8005114 <xTaskCreate>
 80006d6:	6238      	str	r0, [r7, #32]
  configASSERT(status == pdPASS);
 80006d8:	6a3b      	ldr	r3, [r7, #32]
 80006da:	2b01      	cmp	r3, #1
 80006dc:	d00b      	beq.n	80006f6 <main+0xea>
        __asm volatile
 80006de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80006e2:	f383 8811 	msr	BASEPRI, r3
 80006e6:	f3bf 8f6f 	isb	sy
 80006ea:	f3bf 8f4f 	dsb	sy
 80006ee:	613b      	str	r3, [r7, #16]
    }
 80006f0:	bf00      	nop
 80006f2:	bf00      	nop
 80006f4:	e7fd      	b.n	80006f2 <main+0xe6>

  status = xTaskCreate(rtc_task_handler, "rtc_task", 200, NULL,2, &rtc_task_handle);
 80006f6:	4b42      	ldr	r3, [pc, #264]	@ (8000800 <main+0x1f4>)
 80006f8:	9301      	str	r3, [sp, #4]
 80006fa:	2302      	movs	r3, #2
 80006fc:	9300      	str	r3, [sp, #0]
 80006fe:	2300      	movs	r3, #0
 8000700:	22c8      	movs	r2, #200	@ 0xc8
 8000702:	4940      	ldr	r1, [pc, #256]	@ (8000804 <main+0x1f8>)
 8000704:	4840      	ldr	r0, [pc, #256]	@ (8000808 <main+0x1fc>)
 8000706:	f004 fd05 	bl	8005114 <xTaskCreate>
 800070a:	6238      	str	r0, [r7, #32]
  configASSERT(status == pdPASS);
 800070c:	6a3b      	ldr	r3, [r7, #32]
 800070e:	2b01      	cmp	r3, #1
 8000710:	d00b      	beq.n	800072a <main+0x11e>
        __asm volatile
 8000712:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000716:	f383 8811 	msr	BASEPRI, r3
 800071a:	f3bf 8f6f 	isb	sy
 800071e:	f3bf 8f4f 	dsb	sy
 8000722:	60fb      	str	r3, [r7, #12]
    }
 8000724:	bf00      	nop
 8000726:	bf00      	nop
 8000728:	e7fd      	b.n	8000726 <main+0x11a>


  //  Queue Creation

  q_data =xQueueCreate(10, sizeof(char));
 800072a:	2200      	movs	r2, #0
 800072c:	2101      	movs	r1, #1
 800072e:	200a      	movs	r0, #10
 8000730:	f003 ff70 	bl	8004614 <xQueueGenericCreate>
 8000734:	4603      	mov	r3, r0
 8000736:	4a35      	ldr	r2, [pc, #212]	@ (800080c <main+0x200>)
 8000738:	6013      	str	r3, [r2, #0]
  configASSERT(q_data != NULL);	//Check if queue was created
 800073a:	4b34      	ldr	r3, [pc, #208]	@ (800080c <main+0x200>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	2b00      	cmp	r3, #0
 8000740:	d10b      	bne.n	800075a <main+0x14e>
        __asm volatile
 8000742:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000746:	f383 8811 	msr	BASEPRI, r3
 800074a:	f3bf 8f6f 	isb	sy
 800074e:	f3bf 8f4f 	dsb	sy
 8000752:	60bb      	str	r3, [r7, #8]
    }
 8000754:	bf00      	nop
 8000756:	bf00      	nop
 8000758:	e7fd      	b.n	8000756 <main+0x14a>

  q_print = xQueueCreate(10, sizeof(size_t));
 800075a:	2200      	movs	r2, #0
 800075c:	2104      	movs	r1, #4
 800075e:	200a      	movs	r0, #10
 8000760:	f003 ff58 	bl	8004614 <xQueueGenericCreate>
 8000764:	4603      	mov	r3, r0
 8000766:	4a2a      	ldr	r2, [pc, #168]	@ (8000810 <main+0x204>)
 8000768:	6013      	str	r3, [r2, #0]
  configASSERT(q_print != NULL);
 800076a:	4b29      	ldr	r3, [pc, #164]	@ (8000810 <main+0x204>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	2b00      	cmp	r3, #0
 8000770:	d10b      	bne.n	800078a <main+0x17e>
        __asm volatile
 8000772:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000776:	f383 8811 	msr	BASEPRI, r3
 800077a:	f3bf 8f6f 	isb	sy
 800077e:	f3bf 8f4f 	dsb	sy
 8000782:	607b      	str	r3, [r7, #4]
    }
 8000784:	bf00      	nop
 8000786:	bf00      	nop
 8000788:	e7fd      	b.n	8000786 <main+0x17a>

  /* Create software timer for LED effects */


  for(int i = 0; i < 4; i++){
 800078a:	2300      	movs	r3, #0
 800078c:	627b      	str	r3, [r7, #36]	@ 0x24
 800078e:	e013      	b.n	80007b8 <main+0x1ac>
	  led_timer_handle[i] = xTimerCreate("led_timer", pdMS_TO_TICKS(500), pdTRUE, (void *)(i+1), fn_led_effect_callback);
 8000790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000792:	3301      	adds	r3, #1
 8000794:	461a      	mov	r2, r3
 8000796:	4b1f      	ldr	r3, [pc, #124]	@ (8000814 <main+0x208>)
 8000798:	9300      	str	r3, [sp, #0]
 800079a:	4613      	mov	r3, r2
 800079c:	2201      	movs	r2, #1
 800079e:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80007a2:	481d      	ldr	r0, [pc, #116]	@ (8000818 <main+0x20c>)
 80007a4:	f006 f8c4 	bl	8006930 <xTimerCreate>
 80007a8:	4602      	mov	r2, r0
 80007aa:	491c      	ldr	r1, [pc, #112]	@ (800081c <main+0x210>)
 80007ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for(int i = 0; i < 4; i++){
 80007b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007b4:	3301      	adds	r3, #1
 80007b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80007b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007ba:	2b03      	cmp	r3, #3
 80007bc:	dde8      	ble.n	8000790 <main+0x184>
  }


  // Enable uart receive interrupt
  HAL_UART_Receive_IT(&huart2, (uint8_t*) &user_data, 1);
 80007be:	2201      	movs	r2, #1
 80007c0:	4917      	ldr	r1, [pc, #92]	@ (8000820 <main+0x214>)
 80007c2:	4818      	ldr	r0, [pc, #96]	@ (8000824 <main+0x218>)
 80007c4:	f002 fe89 	bl	80034da <HAL_UART_Receive_IT>

  // start FreeRTOS scheduler
  vTaskStartScheduler();
 80007c8:	f004 fec8 	bl	800555c <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007cc:	bf00      	nop
 80007ce:	e7fd      	b.n	80007cc <main+0x1c0>
 80007d0:	20000098 	.word	0x20000098
 80007d4:	0800785c 	.word	0x0800785c
 80007d8:	08000e5d 	.word	0x08000e5d
 80007dc:	2000009c 	.word	0x2000009c
 80007e0:	08007868 	.word	0x08007868
 80007e4:	08000f4d 	.word	0x08000f4d
 80007e8:	200000a0 	.word	0x200000a0
 80007ec:	08007874 	.word	0x08007874
 80007f0:	08001069 	.word	0x08001069
 80007f4:	200000a4 	.word	0x200000a4
 80007f8:	08007880 	.word	0x08007880
 80007fc:	080010a9 	.word	0x080010a9
 8000800:	200000a8 	.word	0x200000a8
 8000804:	0800788c 	.word	0x0800788c
 8000808:	080011dd 	.word	0x080011dd
 800080c:	200000ac 	.word	0x200000ac
 8000810:	200000b0 	.word	0x200000b0
 8000814:	08000b1d 	.word	0x08000b1d
 8000818:	08007898 	.word	0x08007898
 800081c:	200000b4 	.word	0x200000b4
 8000820:	200000c5 	.word	0x200000c5
 8000824:	20000050 	.word	0x20000050

08000828 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b094      	sub	sp, #80	@ 0x50
 800082c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800082e:	f107 031c 	add.w	r3, r7, #28
 8000832:	2234      	movs	r2, #52	@ 0x34
 8000834:	2100      	movs	r1, #0
 8000836:	4618      	mov	r0, r3
 8000838:	f006 ffca 	bl	80077d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800083c:	f107 0308 	add.w	r3, r7, #8
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
 8000844:	605a      	str	r2, [r3, #4]
 8000846:	609a      	str	r2, [r3, #8]
 8000848:	60da      	str	r2, [r3, #12]
 800084a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800084c:	2300      	movs	r3, #0
 800084e:	607b      	str	r3, [r7, #4]
 8000850:	4b2c      	ldr	r3, [pc, #176]	@ (8000904 <SystemClock_Config+0xdc>)
 8000852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000854:	4a2b      	ldr	r2, [pc, #172]	@ (8000904 <SystemClock_Config+0xdc>)
 8000856:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800085a:	6413      	str	r3, [r2, #64]	@ 0x40
 800085c:	4b29      	ldr	r3, [pc, #164]	@ (8000904 <SystemClock_Config+0xdc>)
 800085e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000860:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000864:	607b      	str	r3, [r7, #4]
 8000866:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000868:	2300      	movs	r3, #0
 800086a:	603b      	str	r3, [r7, #0]
 800086c:	4b26      	ldr	r3, [pc, #152]	@ (8000908 <SystemClock_Config+0xe0>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000874:	4a24      	ldr	r2, [pc, #144]	@ (8000908 <SystemClock_Config+0xe0>)
 8000876:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800087a:	6013      	str	r3, [r2, #0]
 800087c:	4b22      	ldr	r3, [pc, #136]	@ (8000908 <SystemClock_Config+0xe0>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000884:	603b      	str	r3, [r7, #0]
 8000886:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000888:	230a      	movs	r3, #10
 800088a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 800088c:	2300      	movs	r3, #0
 800088e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000890:	2301      	movs	r3, #1
 8000892:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000894:	2310      	movs	r3, #16
 8000896:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000898:	2301      	movs	r3, #1
 800089a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800089c:	2302      	movs	r3, #2
 800089e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008a0:	2300      	movs	r3, #0
 80008a2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80008a4:	2310      	movs	r3, #16
 80008a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80008a8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80008ac:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80008ae:	2304      	movs	r3, #4
 80008b0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80008b2:	2302      	movs	r3, #2
 80008b4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008b6:	2302      	movs	r3, #2
 80008b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ba:	f107 031c 	add.w	r3, r7, #28
 80008be:	4618      	mov	r0, r3
 80008c0:	f001 feea 	bl	8002698 <HAL_RCC_OscConfig>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80008ca:	f000 f961 	bl	8000b90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ce:	230f      	movs	r3, #15
 80008d0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008d2:	2302      	movs	r3, #2
 80008d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008d6:	2300      	movs	r3, #0
 80008d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008e0:	2300      	movs	r3, #0
 80008e2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008e4:	f107 0308 	add.w	r3, r7, #8
 80008e8:	2102      	movs	r1, #2
 80008ea:	4618      	mov	r0, r3
 80008ec:	f001 f82e 	bl	800194c <HAL_RCC_ClockConfig>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80008f6:	f000 f94b 	bl	8000b90 <Error_Handler>
  }
}
 80008fa:	bf00      	nop
 80008fc:	3750      	adds	r7, #80	@ 0x50
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	40023800 	.word	0x40023800
 8000908:	40007000 	.word	0x40007000

0800090c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000910:	4b0f      	ldr	r3, [pc, #60]	@ (8000950 <MX_RTC_Init+0x44>)
 8000912:	4a10      	ldr	r2, [pc, #64]	@ (8000954 <MX_RTC_Init+0x48>)
 8000914:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8000916:	4b0e      	ldr	r3, [pc, #56]	@ (8000950 <MX_RTC_Init+0x44>)
 8000918:	2240      	movs	r2, #64	@ 0x40
 800091a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800091c:	4b0c      	ldr	r3, [pc, #48]	@ (8000950 <MX_RTC_Init+0x44>)
 800091e:	227f      	movs	r2, #127	@ 0x7f
 8000920:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000922:	4b0b      	ldr	r3, [pc, #44]	@ (8000950 <MX_RTC_Init+0x44>)
 8000924:	22ff      	movs	r2, #255	@ 0xff
 8000926:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000928:	4b09      	ldr	r3, [pc, #36]	@ (8000950 <MX_RTC_Init+0x44>)
 800092a:	2200      	movs	r2, #0
 800092c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800092e:	4b08      	ldr	r3, [pc, #32]	@ (8000950 <MX_RTC_Init+0x44>)
 8000930:	2200      	movs	r2, #0
 8000932:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000934:	4b06      	ldr	r3, [pc, #24]	@ (8000950 <MX_RTC_Init+0x44>)
 8000936:	2200      	movs	r2, #0
 8000938:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800093a:	4805      	ldr	r0, [pc, #20]	@ (8000950 <MX_RTC_Init+0x44>)
 800093c:	f002 f94a 	bl	8002bd4 <HAL_RTC_Init>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000946:	f000 f923 	bl	8000b90 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800094a:	bf00      	nop
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	20000030 	.word	0x20000030
 8000954:	40002800 	.word	0x40002800

08000958 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800095c:	4b11      	ldr	r3, [pc, #68]	@ (80009a4 <MX_USART2_UART_Init+0x4c>)
 800095e:	4a12      	ldr	r2, [pc, #72]	@ (80009a8 <MX_USART2_UART_Init+0x50>)
 8000960:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000962:	4b10      	ldr	r3, [pc, #64]	@ (80009a4 <MX_USART2_UART_Init+0x4c>)
 8000964:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000968:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800096a:	4b0e      	ldr	r3, [pc, #56]	@ (80009a4 <MX_USART2_UART_Init+0x4c>)
 800096c:	2200      	movs	r2, #0
 800096e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000970:	4b0c      	ldr	r3, [pc, #48]	@ (80009a4 <MX_USART2_UART_Init+0x4c>)
 8000972:	2200      	movs	r2, #0
 8000974:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000976:	4b0b      	ldr	r3, [pc, #44]	@ (80009a4 <MX_USART2_UART_Init+0x4c>)
 8000978:	2200      	movs	r2, #0
 800097a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800097c:	4b09      	ldr	r3, [pc, #36]	@ (80009a4 <MX_USART2_UART_Init+0x4c>)
 800097e:	220c      	movs	r2, #12
 8000980:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000982:	4b08      	ldr	r3, [pc, #32]	@ (80009a4 <MX_USART2_UART_Init+0x4c>)
 8000984:	2200      	movs	r2, #0
 8000986:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000988:	4b06      	ldr	r3, [pc, #24]	@ (80009a4 <MX_USART2_UART_Init+0x4c>)
 800098a:	2200      	movs	r2, #0
 800098c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800098e:	4805      	ldr	r0, [pc, #20]	@ (80009a4 <MX_USART2_UART_Init+0x4c>)
 8000990:	f002 fcc8 	bl	8003324 <HAL_UART_Init>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800099a:	f000 f8f9 	bl	8000b90 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800099e:	bf00      	nop
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	20000050 	.word	0x20000050
 80009a8:	40004400 	.word	0x40004400

080009ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b08a      	sub	sp, #40	@ 0x28
 80009b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b2:	f107 0314 	add.w	r3, r7, #20
 80009b6:	2200      	movs	r2, #0
 80009b8:	601a      	str	r2, [r3, #0]
 80009ba:	605a      	str	r2, [r3, #4]
 80009bc:	609a      	str	r2, [r3, #8]
 80009be:	60da      	str	r2, [r3, #12]
 80009c0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	613b      	str	r3, [r7, #16]
 80009c6:	4b2d      	ldr	r3, [pc, #180]	@ (8000a7c <MX_GPIO_Init+0xd0>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ca:	4a2c      	ldr	r2, [pc, #176]	@ (8000a7c <MX_GPIO_Init+0xd0>)
 80009cc:	f043 0304 	orr.w	r3, r3, #4
 80009d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009d2:	4b2a      	ldr	r3, [pc, #168]	@ (8000a7c <MX_GPIO_Init+0xd0>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d6:	f003 0304 	and.w	r3, r3, #4
 80009da:	613b      	str	r3, [r7, #16]
 80009dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	60fb      	str	r3, [r7, #12]
 80009e2:	4b26      	ldr	r3, [pc, #152]	@ (8000a7c <MX_GPIO_Init+0xd0>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e6:	4a25      	ldr	r2, [pc, #148]	@ (8000a7c <MX_GPIO_Init+0xd0>)
 80009e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ee:	4b23      	ldr	r3, [pc, #140]	@ (8000a7c <MX_GPIO_Init+0xd0>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009f6:	60fb      	str	r3, [r7, #12]
 80009f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	60bb      	str	r3, [r7, #8]
 80009fe:	4b1f      	ldr	r3, [pc, #124]	@ (8000a7c <MX_GPIO_Init+0xd0>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a02:	4a1e      	ldr	r2, [pc, #120]	@ (8000a7c <MX_GPIO_Init+0xd0>)
 8000a04:	f043 0301 	orr.w	r3, r3, #1
 8000a08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a0a:	4b1c      	ldr	r3, [pc, #112]	@ (8000a7c <MX_GPIO_Init+0xd0>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a0e:	f003 0301 	and.w	r3, r3, #1
 8000a12:	60bb      	str	r3, [r7, #8]
 8000a14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a16:	2300      	movs	r3, #0
 8000a18:	607b      	str	r3, [r7, #4]
 8000a1a:	4b18      	ldr	r3, [pc, #96]	@ (8000a7c <MX_GPIO_Init+0xd0>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1e:	4a17      	ldr	r2, [pc, #92]	@ (8000a7c <MX_GPIO_Init+0xd0>)
 8000a20:	f043 0302 	orr.w	r3, r3, #2
 8000a24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a26:	4b15      	ldr	r3, [pc, #84]	@ (8000a7c <MX_GPIO_Init+0xd0>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2a:	f003 0302 	and.w	r3, r3, #2
 8000a2e:	607b      	str	r3, [r7, #4]
 8000a30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a32:	2200      	movs	r2, #0
 8000a34:	2120      	movs	r1, #32
 8000a36:	4812      	ldr	r0, [pc, #72]	@ (8000a80 <MX_GPIO_Init+0xd4>)
 8000a38:	f000 ff54 	bl	80018e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a3c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a42:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000a46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a4c:	f107 0314 	add.w	r3, r7, #20
 8000a50:	4619      	mov	r1, r3
 8000a52:	480c      	ldr	r0, [pc, #48]	@ (8000a84 <MX_GPIO_Init+0xd8>)
 8000a54:	f000 fdb2 	bl	80015bc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a58:	2320      	movs	r3, #32
 8000a5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a60:	2300      	movs	r3, #0
 8000a62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a64:	2300      	movs	r3, #0
 8000a66:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a68:	f107 0314 	add.w	r3, r7, #20
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	4804      	ldr	r0, [pc, #16]	@ (8000a80 <MX_GPIO_Init+0xd4>)
 8000a70:	f000 fda4 	bl	80015bc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a74:	bf00      	nop
 8000a76:	3728      	adds	r7, #40	@ 0x28
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	40023800 	.word	0x40023800
 8000a80:	40020000 	.word	0x40020000
 8000a84:	40020800 	.word	0x40020800

08000a88 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b086      	sub	sp, #24
 8000a8c:	af02      	add	r7, sp, #8
 8000a8e:	6078      	str	r0, [r7, #4]
	uint8_t dummy;
	if(!xQueueIsQueueFullFromISR(q_data))
 8000a90:	4b1e      	ldr	r3, [pc, #120]	@ (8000b0c <HAL_UART_RxCpltCallback+0x84>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4618      	mov	r0, r3
 8000a96:	f004 fa92 	bl	8004fbe <xQueueIsQueueFullFromISR>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d107      	bne.n	8000ab0 <HAL_UART_RxCpltCallback+0x28>
	{
		/*Queue is not full */

		/*TODO: Enqueue data byte */
		xQueueSendToBackFromISR( q_data, (void*)&user_data, NULL);
 8000aa0:	4b1a      	ldr	r3, [pc, #104]	@ (8000b0c <HAL_UART_RxCpltCallback+0x84>)
 8000aa2:	6818      	ldr	r0, [r3, #0]
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	4919      	ldr	r1, [pc, #100]	@ (8000b10 <HAL_UART_RxCpltCallback+0x88>)
 8000aaa:	f003 ff27 	bl	80048fc <xQueueGenericSendFromISR>
 8000aae:	e013      	b.n	8000ad8 <HAL_UART_RxCpltCallback+0x50>

	}else{
		/*Queue is full */
		//check, is user_data '\n'? */
		if(user_data == '\n' )
 8000ab0:	4b17      	ldr	r3, [pc, #92]	@ (8000b10 <HAL_UART_RxCpltCallback+0x88>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	b2db      	uxtb	r3, r3
 8000ab6:	2b0a      	cmp	r3, #10
 8000ab8:	d10e      	bne.n	8000ad8 <HAL_UART_RxCpltCallback+0x50>
		{
			/*user_data = '\n' */

			/*TODO: make sure that last data byte of the queue is '\n' */
			xQueueReceiveFromISR(q_data,(void*)&dummy,NULL);	// Delete the last element on the queue to make space for \n
 8000aba:	4b14      	ldr	r3, [pc, #80]	@ (8000b0c <HAL_UART_RxCpltCallback+0x84>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	f107 010f 	add.w	r1, r7, #15
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f004 f8b1 	bl	8004c2c <xQueueReceiveFromISR>
			xQueueSendFromISR(q_data,(void*)&user_data,NULL);
 8000aca:	4b10      	ldr	r3, [pc, #64]	@ (8000b0c <HAL_UART_RxCpltCallback+0x84>)
 8000acc:	6818      	ldr	r0, [r3, #0]
 8000ace:	2300      	movs	r3, #0
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	490f      	ldr	r1, [pc, #60]	@ (8000b10 <HAL_UART_RxCpltCallback+0x88>)
 8000ad4:	f003 ff12 	bl	80048fc <xQueueGenericSendFromISR>
		}
	}



	if(user_data == '\n'){
 8000ad8:	4b0d      	ldr	r3, [pc, #52]	@ (8000b10 <HAL_UART_RxCpltCallback+0x88>)
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	2b0a      	cmp	r3, #10
 8000ae0:	d10a      	bne.n	8000af8 <HAL_UART_RxCpltCallback+0x70>
		/*send notification to command handling task if user_data = '\n' */
		xTaskNotifyFromISR(cmd_task_handle, 0, eNoAction, NULL);
 8000ae2:	4b0c      	ldr	r3, [pc, #48]	@ (8000b14 <HAL_UART_RxCpltCallback+0x8c>)
 8000ae4:	6818      	ldr	r0, [r3, #0]
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	9301      	str	r3, [sp, #4]
 8000aea:	2300      	movs	r3, #0
 8000aec:	9300      	str	r3, [sp, #0]
 8000aee:	2300      	movs	r3, #0
 8000af0:	2200      	movs	r2, #0
 8000af2:	2100      	movs	r1, #0
 8000af4:	f005 fd08 	bl	8006508 <xTaskGenericNotifyFromISR>

	}

	/* Enable UART data byte reception again in IT mode */
	 HAL_UART_Receive_IT(&huart2, (uint8_t*)&user_data, 1);
 8000af8:	2201      	movs	r2, #1
 8000afa:	4905      	ldr	r1, [pc, #20]	@ (8000b10 <HAL_UART_RxCpltCallback+0x88>)
 8000afc:	4806      	ldr	r0, [pc, #24]	@ (8000b18 <HAL_UART_RxCpltCallback+0x90>)
 8000afe:	f002 fcec 	bl	80034da <HAL_UART_Receive_IT>
}
 8000b02:	bf00      	nop
 8000b04:	3710      	adds	r7, #16
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	200000ac 	.word	0x200000ac
 8000b10:	200000c5 	.word	0x200000c5
 8000b14:	2000009c 	.word	0x2000009c
 8000b18:	20000050 	.word	0x20000050

08000b1c <fn_led_effect_callback>:

void fn_led_effect_callback(TimerHandle_t xTimer){
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b084      	sub	sp, #16
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
	int id;
	id = (uint32_t)pvTimerGetTimerID(xTimer);
 8000b24:	6878      	ldr	r0, [r7, #4]
 8000b26:	f006 fa03 	bl	8006f30 <pvTimerGetTimerID>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	60fb      	str	r3, [r7, #12]

	switch(id){
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	3b01      	subs	r3, #1
 8000b32:	2b03      	cmp	r3, #3
 8000b34:	d816      	bhi.n	8000b64 <fn_led_effect_callback+0x48>
 8000b36:	a201      	add	r2, pc, #4	@ (adr r2, 8000b3c <fn_led_effect_callback+0x20>)
 8000b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b3c:	08000b4d 	.word	0x08000b4d
 8000b40:	08000b53 	.word	0x08000b53
 8000b44:	08000b59 	.word	0x08000b59
 8000b48:	08000b5f 	.word	0x08000b5f
	case 1:
		LED_effect1();
 8000b4c:	f7ff fd26 	bl	800059c <LED_effect1>
		break;
 8000b50:	e008      	b.n	8000b64 <fn_led_effect_callback+0x48>
	case 2:
		LED_effect2();
 8000b52:	f7ff fd31 	bl	80005b8 <LED_effect2>
		break;
 8000b56:	e005      	b.n	8000b64 <fn_led_effect_callback+0x48>
	case 3:
		LED_effect3();
 8000b58:	f7ff fd3c 	bl	80005d4 <LED_effect3>
		break;
 8000b5c:	e002      	b.n	8000b64 <fn_led_effect_callback+0x48>
	case 4:
		LED_effect4();
 8000b5e:	f7ff fd47 	bl	80005f0 <LED_effect4>
		break;
 8000b62:	bf00      	nop
	}

}
 8000b64:	bf00      	nop
 8000b66:	3710      	adds	r7, #16
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}

08000b6c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a04      	ldr	r2, [pc, #16]	@ (8000b8c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d101      	bne.n	8000b82 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b7e:	f000 fb89 	bl	8001294 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b82:	bf00      	nop
 8000b84:	3708      	adds	r7, #8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40001000 	.word	0x40001000

08000b90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b94:	b672      	cpsid	i
}
 8000b96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b98:	bf00      	nop
 8000b9a:	e7fd      	b.n	8000b98 <Error_Handler+0x8>

08000b9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	607b      	str	r3, [r7, #4]
 8000ba6:	4b10      	ldr	r3, [pc, #64]	@ (8000be8 <HAL_MspInit+0x4c>)
 8000ba8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000baa:	4a0f      	ldr	r2, [pc, #60]	@ (8000be8 <HAL_MspInit+0x4c>)
 8000bac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bb0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bb2:	4b0d      	ldr	r3, [pc, #52]	@ (8000be8 <HAL_MspInit+0x4c>)
 8000bb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bb6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bba:	607b      	str	r3, [r7, #4]
 8000bbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	603b      	str	r3, [r7, #0]
 8000bc2:	4b09      	ldr	r3, [pc, #36]	@ (8000be8 <HAL_MspInit+0x4c>)
 8000bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bc6:	4a08      	ldr	r2, [pc, #32]	@ (8000be8 <HAL_MspInit+0x4c>)
 8000bc8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bcc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bce:	4b06      	ldr	r3, [pc, #24]	@ (8000be8 <HAL_MspInit+0x4c>)
 8000bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bd6:	603b      	str	r3, [r7, #0]
 8000bd8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	370c      	adds	r7, #12
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	40023800 	.word	0x40023800

08000bec <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b09a      	sub	sp, #104	@ 0x68
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bf4:	f107 030c 	add.w	r3, r7, #12
 8000bf8:	225c      	movs	r2, #92	@ 0x5c
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f006 fde7 	bl	80077d0 <memset>
  if(hrtc->Instance==RTC)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4a0c      	ldr	r2, [pc, #48]	@ (8000c38 <HAL_RTC_MspInit+0x4c>)
 8000c08:	4293      	cmp	r3, r2
 8000c0a:	d111      	bne.n	8000c30 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000c0c:	2320      	movs	r3, #32
 8000c0e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000c10:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c14:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c16:	f107 030c 	add.w	r3, r7, #12
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f000 ffe2 	bl	8001be4 <HAL_RCCEx_PeriphCLKConfig>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8000c26:	f7ff ffb3 	bl	8000b90 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000c2a:	4b04      	ldr	r3, [pc, #16]	@ (8000c3c <HAL_RTC_MspInit+0x50>)
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8000c30:	bf00      	nop
 8000c32:	3768      	adds	r7, #104	@ 0x68
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	40002800 	.word	0x40002800
 8000c3c:	42470e3c 	.word	0x42470e3c

08000c40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b08a      	sub	sp, #40	@ 0x28
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c48:	f107 0314 	add.w	r3, r7, #20
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	601a      	str	r2, [r3, #0]
 8000c50:	605a      	str	r2, [r3, #4]
 8000c52:	609a      	str	r2, [r3, #8]
 8000c54:	60da      	str	r2, [r3, #12]
 8000c56:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a1d      	ldr	r2, [pc, #116]	@ (8000cd4 <HAL_UART_MspInit+0x94>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d133      	bne.n	8000cca <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	613b      	str	r3, [r7, #16]
 8000c66:	4b1c      	ldr	r3, [pc, #112]	@ (8000cd8 <HAL_UART_MspInit+0x98>)
 8000c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c6a:	4a1b      	ldr	r2, [pc, #108]	@ (8000cd8 <HAL_UART_MspInit+0x98>)
 8000c6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c70:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c72:	4b19      	ldr	r3, [pc, #100]	@ (8000cd8 <HAL_UART_MspInit+0x98>)
 8000c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c7a:	613b      	str	r3, [r7, #16]
 8000c7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7e:	2300      	movs	r3, #0
 8000c80:	60fb      	str	r3, [r7, #12]
 8000c82:	4b15      	ldr	r3, [pc, #84]	@ (8000cd8 <HAL_UART_MspInit+0x98>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c86:	4a14      	ldr	r2, [pc, #80]	@ (8000cd8 <HAL_UART_MspInit+0x98>)
 8000c88:	f043 0301 	orr.w	r3, r3, #1
 8000c8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c8e:	4b12      	ldr	r3, [pc, #72]	@ (8000cd8 <HAL_UART_MspInit+0x98>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c92:	f003 0301 	and.w	r3, r3, #1
 8000c96:	60fb      	str	r3, [r7, #12]
 8000c98:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c9a:	230c      	movs	r3, #12
 8000c9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9e:	2302      	movs	r3, #2
 8000ca0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca6:	2303      	movs	r3, #3
 8000ca8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000caa:	2307      	movs	r3, #7
 8000cac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cae:	f107 0314 	add.w	r3, r7, #20
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4809      	ldr	r0, [pc, #36]	@ (8000cdc <HAL_UART_MspInit+0x9c>)
 8000cb6:	f000 fc81 	bl	80015bc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2106      	movs	r1, #6
 8000cbe:	2026      	movs	r0, #38	@ 0x26
 8000cc0:	f000 fbc0 	bl	8001444 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000cc4:	2026      	movs	r0, #38	@ 0x26
 8000cc6:	f000 fbd9 	bl	800147c <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000cca:	bf00      	nop
 8000ccc:	3728      	adds	r7, #40	@ 0x28
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40004400 	.word	0x40004400
 8000cd8:	40023800 	.word	0x40023800
 8000cdc:	40020000 	.word	0x40020000

08000ce0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b08e      	sub	sp, #56	@ 0x38
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000cec:	2300      	movs	r3, #0
 8000cee:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	60fb      	str	r3, [r7, #12]
 8000cf4:	4b33      	ldr	r3, [pc, #204]	@ (8000dc4 <HAL_InitTick+0xe4>)
 8000cf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cf8:	4a32      	ldr	r2, [pc, #200]	@ (8000dc4 <HAL_InitTick+0xe4>)
 8000cfa:	f043 0310 	orr.w	r3, r3, #16
 8000cfe:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d00:	4b30      	ldr	r3, [pc, #192]	@ (8000dc4 <HAL_InitTick+0xe4>)
 8000d02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d04:	f003 0310 	and.w	r3, r3, #16
 8000d08:	60fb      	str	r3, [r7, #12]
 8000d0a:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d0c:	f107 0210 	add.w	r2, r7, #16
 8000d10:	f107 0314 	add.w	r3, r7, #20
 8000d14:	4611      	mov	r1, r2
 8000d16:	4618      	mov	r0, r3
 8000d18:	f000 ff32 	bl	8001b80 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000d1c:	6a3b      	ldr	r3, [r7, #32]
 8000d1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000d20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d103      	bne.n	8000d2e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000d26:	f000 ff03 	bl	8001b30 <HAL_RCC_GetPCLK1Freq>
 8000d2a:	6378      	str	r0, [r7, #52]	@ 0x34
 8000d2c:	e004      	b.n	8000d38 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000d2e:	f000 feff 	bl	8001b30 <HAL_RCC_GetPCLK1Freq>
 8000d32:	4603      	mov	r3, r0
 8000d34:	005b      	lsls	r3, r3, #1
 8000d36:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d3a:	4a23      	ldr	r2, [pc, #140]	@ (8000dc8 <HAL_InitTick+0xe8>)
 8000d3c:	fba2 2303 	umull	r2, r3, r2, r3
 8000d40:	0c9b      	lsrs	r3, r3, #18
 8000d42:	3b01      	subs	r3, #1
 8000d44:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000d46:	4b21      	ldr	r3, [pc, #132]	@ (8000dcc <HAL_InitTick+0xec>)
 8000d48:	4a21      	ldr	r2, [pc, #132]	@ (8000dd0 <HAL_InitTick+0xf0>)
 8000d4a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000d4c:	4b1f      	ldr	r3, [pc, #124]	@ (8000dcc <HAL_InitTick+0xec>)
 8000d4e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000d52:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000d54:	4a1d      	ldr	r2, [pc, #116]	@ (8000dcc <HAL_InitTick+0xec>)
 8000d56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d58:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000d5a:	4b1c      	ldr	r3, [pc, #112]	@ (8000dcc <HAL_InitTick+0xec>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d60:	4b1a      	ldr	r3, [pc, #104]	@ (8000dcc <HAL_InitTick+0xec>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d66:	4b19      	ldr	r3, [pc, #100]	@ (8000dcc <HAL_InitTick+0xec>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000d6c:	4817      	ldr	r0, [pc, #92]	@ (8000dcc <HAL_InitTick+0xec>)
 8000d6e:	f002 f837 	bl	8002de0 <HAL_TIM_Base_Init>
 8000d72:	4603      	mov	r3, r0
 8000d74:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000d78:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d11b      	bne.n	8000db8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000d80:	4812      	ldr	r0, [pc, #72]	@ (8000dcc <HAL_InitTick+0xec>)
 8000d82:	f002 f887 	bl	8002e94 <HAL_TIM_Base_Start_IT>
 8000d86:	4603      	mov	r3, r0
 8000d88:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000d8c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d111      	bne.n	8000db8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d94:	2036      	movs	r0, #54	@ 0x36
 8000d96:	f000 fb71 	bl	800147c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	2b0f      	cmp	r3, #15
 8000d9e:	d808      	bhi.n	8000db2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000da0:	2200      	movs	r2, #0
 8000da2:	6879      	ldr	r1, [r7, #4]
 8000da4:	2036      	movs	r0, #54	@ 0x36
 8000da6:	f000 fb4d 	bl	8001444 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000daa:	4a0a      	ldr	r2, [pc, #40]	@ (8000dd4 <HAL_InitTick+0xf4>)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	6013      	str	r3, [r2, #0]
 8000db0:	e002      	b.n	8000db8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000db2:	2301      	movs	r3, #1
 8000db4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000db8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	3738      	adds	r7, #56	@ 0x38
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	40023800 	.word	0x40023800
 8000dc8:	431bde83 	.word	0x431bde83
 8000dcc:	200000c8 	.word	0x200000c8
 8000dd0:	40001000 	.word	0x40001000
 8000dd4:	20000004 	.word	0x20000004

08000dd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ddc:	bf00      	nop
 8000dde:	e7fd      	b.n	8000ddc <NMI_Handler+0x4>

08000de0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000de4:	bf00      	nop
 8000de6:	e7fd      	b.n	8000de4 <HardFault_Handler+0x4>

08000de8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dec:	bf00      	nop
 8000dee:	e7fd      	b.n	8000dec <MemManage_Handler+0x4>

08000df0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000df4:	bf00      	nop
 8000df6:	e7fd      	b.n	8000df4 <BusFault_Handler+0x4>

08000df8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dfc:	bf00      	nop
 8000dfe:	e7fd      	b.n	8000dfc <UsageFault_Handler+0x4>

08000e00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e04:	bf00      	nop
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
	...

08000e10 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e14:	4802      	ldr	r0, [pc, #8]	@ (8000e20 <USART2_IRQHandler+0x10>)
 8000e16:	f002 fb85 	bl	8003524 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000e1a:	bf00      	nop
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	20000050 	.word	0x20000050

08000e24 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e28:	4802      	ldr	r0, [pc, #8]	@ (8000e34 <TIM6_DAC_IRQHandler+0x10>)
 8000e2a:	f002 f8a3 	bl	8002f74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000e2e:	bf00      	nop
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	200000c8 	.word	0x200000c8

08000e38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e3c:	4b06      	ldr	r3, [pc, #24]	@ (8000e58 <SystemInit+0x20>)
 8000e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e42:	4a05      	ldr	r2, [pc, #20]	@ (8000e58 <SystemInit+0x20>)
 8000e44:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e48:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e4c:	bf00      	nop
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	e000ed00 	.word	0xe000ed00

08000e5c <menu_task_handler>:





void menu_task_handler(void* parameters){
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b08a      	sub	sp, #40	@ 0x28
 8000e60:	af02      	add	r7, sp, #8
 8000e62:	6078      	str	r0, [r7, #4]
	uint32_t cmd_addr;
	command_t *cmd;

	int option;

	const char* menu_msg =
 8000e64:	4b33      	ldr	r3, [pc, #204]	@ (8000f34 <menu_task_handler+0xd8>)
 8000e66:	613b      	str	r3, [r7, #16]
			"**********************************\n"
			"LED EFFECT                  ---> 0\n"
			"Date & Time                 ---> 1\n"
			"EXIT                        ---> 2\n"
			"Enter your choice here: ";
	const char* inv_msg = "Invalid Message \n";
 8000e68:	4b33      	ldr	r3, [pc, #204]	@ (8000f38 <menu_task_handler+0xdc>)
 8000e6a:	60fb      	str	r3, [r7, #12]



	while(1){

		xQueueSend(q_print, &menu_msg, portMAX_DELAY);
 8000e6c:	4b33      	ldr	r3, [pc, #204]	@ (8000f3c <menu_task_handler+0xe0>)
 8000e6e:	6818      	ldr	r0, [r3, #0]
 8000e70:	f107 0110 	add.w	r1, r7, #16
 8000e74:	2300      	movs	r3, #0
 8000e76:	f04f 32ff 	mov.w	r2, #4294967295
 8000e7a:	f003 fc3d 	bl	80046f8 <xQueueGenericSend>
		// wait for menu commands
		xTaskNotifyWait(0, 0, &cmd_addr, portMAX_DELAY );
 8000e7e:	f107 0314 	add.w	r3, r7, #20
 8000e82:	f04f 32ff 	mov.w	r2, #4294967295
 8000e86:	9200      	str	r2, [sp, #0]
 8000e88:	2200      	movs	r2, #0
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	2000      	movs	r0, #0
 8000e8e:	f005 f995 	bl	80061bc <xTaskGenericNotifyWait>
		cmd = (command_t*)cmd_addr;
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	61fb      	str	r3, [r7, #28]

		if(cmd->len == 1){
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	7a9b      	ldrb	r3, [r3, #10]
 8000e9a:	2b01      	cmp	r3, #1
 8000e9c:	d134      	bne.n	8000f08 <menu_task_handler+0xac>
			// Valid command
			option = cmd->payload[0] - 48;	// ASCII to int conversion
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	3b30      	subs	r3, #48	@ 0x30
 8000ea4:	61bb      	str	r3, [r7, #24]
			switch(option){
 8000ea6:	69bb      	ldr	r3, [r7, #24]
 8000ea8:	2b02      	cmp	r3, #2
 8000eaa:	d037      	beq.n	8000f1c <menu_task_handler+0xc0>
 8000eac:	69bb      	ldr	r3, [r7, #24]
 8000eae:	2b02      	cmp	r3, #2
 8000eb0:	dc20      	bgt.n	8000ef4 <menu_task_handler+0x98>
 8000eb2:	69bb      	ldr	r3, [r7, #24]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d003      	beq.n	8000ec0 <menu_task_handler+0x64>
 8000eb8:	69bb      	ldr	r3, [r7, #24]
 8000eba:	2b01      	cmp	r3, #1
 8000ebc:	d00d      	beq.n	8000eda <menu_task_handler+0x7e>
 8000ebe:	e019      	b.n	8000ef4 <menu_task_handler+0x98>
				case 0:
					curr_state = sLEDEffect;
 8000ec0:	4b1f      	ldr	r3, [pc, #124]	@ (8000f40 <menu_task_handler+0xe4>)
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	701a      	strb	r2, [r3, #0]
					xTaskNotify(led_task_handle,0,eNoAction);
 8000ec6:	4b1f      	ldr	r3, [pc, #124]	@ (8000f44 <menu_task_handler+0xe8>)
 8000ec8:	6818      	ldr	r0, [r3, #0]
 8000eca:	2300      	movs	r3, #0
 8000ecc:	9300      	str	r3, [sp, #0]
 8000ece:	2300      	movs	r3, #0
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	f005 f9f2 	bl	80062bc <xTaskGenericNotify>
					break;
 8000ed8:	e021      	b.n	8000f1e <menu_task_handler+0xc2>
				case 1:
					curr_state = sRTCMenu;
 8000eda:	4b19      	ldr	r3, [pc, #100]	@ (8000f40 <menu_task_handler+0xe4>)
 8000edc:	2202      	movs	r2, #2
 8000ede:	701a      	strb	r2, [r3, #0]
					xTaskNotify(rtc_task_handle,0,eNoAction);
 8000ee0:	4b19      	ldr	r3, [pc, #100]	@ (8000f48 <menu_task_handler+0xec>)
 8000ee2:	6818      	ldr	r0, [r3, #0]
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	9300      	str	r3, [sp, #0]
 8000ee8:	2300      	movs	r3, #0
 8000eea:	2200      	movs	r2, #0
 8000eec:	2100      	movs	r1, #0
 8000eee:	f005 f9e5 	bl	80062bc <xTaskGenericNotify>
					break;
 8000ef2:	e014      	b.n	8000f1e <menu_task_handler+0xc2>
				case 2:
					break;
				default:
					xQueueSend(q_print,&inv_msg,portMAX_DELAY);
 8000ef4:	4b11      	ldr	r3, [pc, #68]	@ (8000f3c <menu_task_handler+0xe0>)
 8000ef6:	6818      	ldr	r0, [r3, #0]
 8000ef8:	f107 010c 	add.w	r1, r7, #12
 8000efc:	2300      	movs	r3, #0
 8000efe:	f04f 32ff 	mov.w	r2, #4294967295
 8000f02:	f003 fbf9 	bl	80046f8 <xQueueGenericSend>
					continue;
 8000f06:	e013      	b.n	8000f30 <menu_task_handler+0xd4>
			}
		}
		else{
			//invalid entry
			xQueueSend(q_print, &inv_msg, portMAX_DELAY);
 8000f08:	4b0c      	ldr	r3, [pc, #48]	@ (8000f3c <menu_task_handler+0xe0>)
 8000f0a:	6818      	ldr	r0, [r3, #0]
 8000f0c:	f107 010c 	add.w	r1, r7, #12
 8000f10:	2300      	movs	r3, #0
 8000f12:	f04f 32ff 	mov.w	r2, #4294967295
 8000f16:	f003 fbef 	bl	80046f8 <xQueueGenericSend>
 8000f1a:	e000      	b.n	8000f1e <menu_task_handler+0xc2>
					break;
 8000f1c:	bf00      	nop
		}
		// Wait to run again when some other task notifies
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY );
 8000f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f22:	9300      	str	r3, [sp, #0]
 8000f24:	2300      	movs	r3, #0
 8000f26:	2200      	movs	r2, #0
 8000f28:	2100      	movs	r1, #0
 8000f2a:	2000      	movs	r0, #0
 8000f2c:	f005 f946 	bl	80061bc <xTaskGenericNotifyWait>
		xQueueSend(q_print, &menu_msg, portMAX_DELAY);
 8000f30:	e79c      	b.n	8000e6c <menu_task_handler+0x10>
 8000f32:	bf00      	nop
 8000f34:	080078a4 	.word	0x080078a4
 8000f38:	08007990 	.word	0x08007990
 8000f3c:	200000b0 	.word	0x200000b0
 8000f40:	200000c4 	.word	0x200000c4
 8000f44:	200000a4 	.word	0x200000a4
 8000f48:	200000a8 	.word	0x200000a8

08000f4c <cmd_task_handler>:
	} // while super loop end
}


void cmd_task_handler(void* parameters){
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b088      	sub	sp, #32
 8000f50:	af02      	add	r7, sp, #8
 8000f52:	6078      	str	r0, [r7, #4]

	BaseType_t ret;
	command_t cmd;
		while(1){
			/* Notify Wait */
			ret = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8000f54:	f04f 33ff 	mov.w	r3, #4294967295
 8000f58:	9300      	str	r3, [sp, #0]
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	2100      	movs	r1, #0
 8000f60:	2000      	movs	r0, #0
 8000f62:	f005 f92b 	bl	80061bc <xTaskGenericNotifyWait>
 8000f66:	6178      	str	r0, [r7, #20]

			if(ret == pdTRUE){
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	2b01      	cmp	r3, #1
 8000f6c:	d1f2      	bne.n	8000f54 <cmd_task_handler+0x8>
				/* process the user data (command) stored in input data queue */
				process_command(&cmd);
 8000f6e:	f107 0308 	add.w	r3, r7, #8
 8000f72:	4618      	mov	r0, r3
 8000f74:	f000 f83c 	bl	8000ff0 <process_command>
			ret = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8000f78:	e7ec      	b.n	8000f54 <cmd_task_handler+0x8>
	...

08000f7c <extract_command>:
	}
}



int extract_command(command_t *cmd){
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b086      	sub	sp, #24
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
	uint8_t item;
	BaseType_t status;

	/* Check if there are any messages waiting in the queue	 */
	status = uxQueueMessagesWaiting(q_data);
 8000f84:	4b19      	ldr	r3, [pc, #100]	@ (8000fec <extract_command+0x70>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f003 fee9 	bl	8004d60 <uxQueueMessagesWaiting>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	613b      	str	r3, [r7, #16]
	if(!status) return -1;	// Return since there are no messages in the queue
 8000f92:	693b      	ldr	r3, [r7, #16]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d102      	bne.n	8000f9e <extract_command+0x22>
 8000f98:	f04f 33ff 	mov.w	r3, #4294967295
 8000f9c:	e022      	b.n	8000fe4 <extract_command+0x68>

	uint8_t i = 0;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	75fb      	strb	r3, [r7, #23]

	do{
		status = xQueueReceive(q_data, &item, 0);
 8000fa2:	4b12      	ldr	r3, [pc, #72]	@ (8000fec <extract_command+0x70>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f107 010f 	add.w	r1, r7, #15
 8000faa:	2200      	movs	r2, #0
 8000fac:	4618      	mov	r0, r3
 8000fae:	f003 fd5b 	bl	8004a68 <xQueueReceive>
 8000fb2:	6138      	str	r0, [r7, #16]
		if(status == pdTRUE) cmd->payload[i++] = item;
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	d106      	bne.n	8000fc8 <extract_command+0x4c>
 8000fba:	7dfb      	ldrb	r3, [r7, #23]
 8000fbc:	1c5a      	adds	r2, r3, #1
 8000fbe:	75fa      	strb	r2, [r7, #23]
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	7bf9      	ldrb	r1, [r7, #15]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	5499      	strb	r1, [r3, r2]
	}while(item != '\n');
 8000fc8:	7bfb      	ldrb	r3, [r7, #15]
 8000fca:	2b0a      	cmp	r3, #10
 8000fcc:	d1e9      	bne.n	8000fa2 <extract_command+0x26>

	/* When \n is received 	 */

	cmd->payload[i-1] = '\0';
 8000fce:	7dfb      	ldrb	r3, [r7, #23]
 8000fd0:	3b01      	subs	r3, #1
 8000fd2:	687a      	ldr	r2, [r7, #4]
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	54d1      	strb	r1, [r2, r3]
	cmd->len = i-1;
 8000fd8:	7dfb      	ldrb	r3, [r7, #23]
 8000fda:	3b01      	subs	r3, #1
 8000fdc:	b2da      	uxtb	r2, r3
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	729a      	strb	r2, [r3, #10]
	return 0;
 8000fe2:	2300      	movs	r3, #0
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	3718      	adds	r7, #24
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	200000ac 	.word	0x200000ac

08000ff0 <process_command>:

void process_command(command_t *cmd){
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af02      	add	r7, sp, #8
 8000ff6:	6078      	str	r0, [r7, #4]
	// Extract the data bytes from the input data queue and create a command

	extract_command(cmd);
 8000ff8:	6878      	ldr	r0, [r7, #4]
 8000ffa:	f7ff ffbf 	bl	8000f7c <extract_command>

	switch(curr_state){
 8000ffe:	4b16      	ldr	r3, [pc, #88]	@ (8001058 <process_command+0x68>)
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	2b05      	cmp	r3, #5
 8001004:	dc24      	bgt.n	8001050 <process_command+0x60>
 8001006:	2b02      	cmp	r3, #2
 8001008:	da18      	bge.n	800103c <process_command+0x4c>
 800100a:	2b00      	cmp	r3, #0
 800100c:	d002      	beq.n	8001014 <process_command+0x24>
 800100e:	2b01      	cmp	r3, #1
 8001010:	d00a      	beq.n	8001028 <process_command+0x38>

	case sRTCReport:
		xTaskNotify(rtc_task_handle, (uint32_t)cmd, eSetValueWithOverwrite);
		break;
	}
}
 8001012:	e01d      	b.n	8001050 <process_command+0x60>
		xTaskNotify(menu_task_handle, (uint32_t)cmd, eSetValueWithOverwrite);
 8001014:	4b11      	ldr	r3, [pc, #68]	@ (800105c <process_command+0x6c>)
 8001016:	6818      	ldr	r0, [r3, #0]
 8001018:	687a      	ldr	r2, [r7, #4]
 800101a:	2300      	movs	r3, #0
 800101c:	9300      	str	r3, [sp, #0]
 800101e:	2303      	movs	r3, #3
 8001020:	2100      	movs	r1, #0
 8001022:	f005 f94b 	bl	80062bc <xTaskGenericNotify>
		break;
 8001026:	e013      	b.n	8001050 <process_command+0x60>
		xTaskNotify(led_task_handle, (uint32_t)cmd, eSetValueWithOverwrite);
 8001028:	4b0d      	ldr	r3, [pc, #52]	@ (8001060 <process_command+0x70>)
 800102a:	6818      	ldr	r0, [r3, #0]
 800102c:	687a      	ldr	r2, [r7, #4]
 800102e:	2300      	movs	r3, #0
 8001030:	9300      	str	r3, [sp, #0]
 8001032:	2303      	movs	r3, #3
 8001034:	2100      	movs	r1, #0
 8001036:	f005 f941 	bl	80062bc <xTaskGenericNotify>
		break;
 800103a:	e009      	b.n	8001050 <process_command+0x60>
		xTaskNotify(rtc_task_handle, (uint32_t)cmd, eSetValueWithOverwrite);
 800103c:	4b09      	ldr	r3, [pc, #36]	@ (8001064 <process_command+0x74>)
 800103e:	6818      	ldr	r0, [r3, #0]
 8001040:	687a      	ldr	r2, [r7, #4]
 8001042:	2300      	movs	r3, #0
 8001044:	9300      	str	r3, [sp, #0]
 8001046:	2303      	movs	r3, #3
 8001048:	2100      	movs	r1, #0
 800104a:	f005 f937 	bl	80062bc <xTaskGenericNotify>
		break;
 800104e:	bf00      	nop
}
 8001050:	bf00      	nop
 8001052:	3708      	adds	r7, #8
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	200000c4 	.word	0x200000c4
 800105c:	20000098 	.word	0x20000098
 8001060:	200000a4 	.word	0x200000a4
 8001064:	200000a8 	.word	0x200000a8

08001068 <print_task_handler>:

void print_task_handler(void* parameters){
 8001068:	b590      	push	{r4, r7, lr}
 800106a:	b085      	sub	sp, #20
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
	uint32_t *msg;
	while(1){
		xQueueReceive(q_print, &msg, portMAX_DELAY);
 8001070:	4b0b      	ldr	r3, [pc, #44]	@ (80010a0 <print_task_handler+0x38>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f107 010c 	add.w	r1, r7, #12
 8001078:	f04f 32ff 	mov.w	r2, #4294967295
 800107c:	4618      	mov	r0, r3
 800107e:	f003 fcf3 	bl	8004a68 <xQueueReceive>
		HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen((char*)msg), HAL_MAX_DELAY);
 8001082:	68fc      	ldr	r4, [r7, #12]
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff f8cc 	bl	8000224 <strlen>
 800108c:	4603      	mov	r3, r0
 800108e:	b29a      	uxth	r2, r3
 8001090:	f04f 33ff 	mov.w	r3, #4294967295
 8001094:	4621      	mov	r1, r4
 8001096:	4803      	ldr	r0, [pc, #12]	@ (80010a4 <print_task_handler+0x3c>)
 8001098:	f002 f994 	bl	80033c4 <HAL_UART_Transmit>
		xQueueReceive(q_print, &msg, portMAX_DELAY);
 800109c:	bf00      	nop
 800109e:	e7e7      	b.n	8001070 <print_task_handler+0x8>
 80010a0:	200000b0 	.word	0x200000b0
 80010a4:	20000050 	.word	0x20000050

080010a8 <led_task_handler>:
	}
}
/*
 * Displays LED Menu
 */
void led_task_handler(void* parameters){
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b088      	sub	sp, #32
 80010ac:	af02      	add	r7, sp, #8
 80010ae:	6078      	str	r0, [r7, #4]
	uint32_t cmd_addr;
		command_t *cmd;
		const char* msg_led = "========================\n"
 80010b0:	4b40      	ldr	r3, [pc, #256]	@ (80011b4 <led_task_handler+0x10c>)
 80010b2:	60fb      	str	r3, [r7, #12]
							  "|      LED Effect     |\n"
							  "========================\n"
							  "(none,e1,e2,e3,e4)\n"
							  "Enter your choice here : ";
		const char* inv_msg = "Invalid Message \n";
 80010b4:	4b40      	ldr	r3, [pc, #256]	@ (80011b8 <led_task_handler+0x110>)
 80010b6:	60bb      	str	r3, [r7, #8]
		while(1){
			/*Wait for notification (Notify wait) */
			xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 80010b8:	f04f 33ff 	mov.w	r3, #4294967295
 80010bc:	9300      	str	r3, [sp, #0]
 80010be:	2300      	movs	r3, #0
 80010c0:	2200      	movs	r2, #0
 80010c2:	2100      	movs	r1, #0
 80010c4:	2000      	movs	r0, #0
 80010c6:	f005 f879 	bl	80061bc <xTaskGenericNotifyWait>

			/*Print LED menu */
			xQueueSend(q_print,&msg_led,portMAX_DELAY);
 80010ca:	4b3c      	ldr	r3, [pc, #240]	@ (80011bc <led_task_handler+0x114>)
 80010cc:	6818      	ldr	r0, [r3, #0]
 80010ce:	f107 010c 	add.w	r1, r7, #12
 80010d2:	2300      	movs	r3, #0
 80010d4:	f04f 32ff 	mov.w	r2, #4294967295
 80010d8:	f003 fb0e 	bl	80046f8 <xQueueGenericSend>

			/*wait for LED command (Notify wait) */
			xTaskNotifyWait(0,0,&cmd_addr,portMAX_DELAY);
 80010dc:	f107 0310 	add.w	r3, r7, #16
 80010e0:	f04f 32ff 	mov.w	r2, #4294967295
 80010e4:	9200      	str	r2, [sp, #0]
 80010e6:	2200      	movs	r2, #0
 80010e8:	2100      	movs	r1, #0
 80010ea:	2000      	movs	r0, #0
 80010ec:	f005 f866 	bl	80061bc <xTaskGenericNotifyWait>
			cmd = (command_t*)cmd_addr;
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	617b      	str	r3, [r7, #20]

			if(cmd->len <= 4)
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	7a9b      	ldrb	r3, [r3, #10]
 80010f8:	2b04      	cmp	r3, #4
 80010fa:	d844      	bhi.n	8001186 <led_task_handler+0xde>
			{
				if(! strcmp((char*)cmd->payload,"none"))
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	4930      	ldr	r1, [pc, #192]	@ (80011c0 <led_task_handler+0x118>)
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff f885 	bl	8000210 <strcmp>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d102      	bne.n	8001112 <led_task_handler+0x6a>
					led_effect_stop();
 800110c:	f7ff fa0a 	bl	8000524 <led_effect_stop>
 8001110:	e042      	b.n	8001198 <led_task_handler+0xf0>
				else if (! strcmp((char*)cmd->payload,"e1"))
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	492b      	ldr	r1, [pc, #172]	@ (80011c4 <led_task_handler+0x11c>)
 8001116:	4618      	mov	r0, r3
 8001118:	f7ff f87a 	bl	8000210 <strcmp>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d103      	bne.n	800112a <led_task_handler+0x82>
					led_effect(1);
 8001122:	2001      	movs	r0, #1
 8001124:	f7ff fa1e 	bl	8000564 <led_effect>
 8001128:	e036      	b.n	8001198 <led_task_handler+0xf0>
				else if (! strcmp((char*)cmd->payload,"e2"))
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	4926      	ldr	r1, [pc, #152]	@ (80011c8 <led_task_handler+0x120>)
 800112e:	4618      	mov	r0, r3
 8001130:	f7ff f86e 	bl	8000210 <strcmp>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d103      	bne.n	8001142 <led_task_handler+0x9a>
					led_effect(2);
 800113a:	2002      	movs	r0, #2
 800113c:	f7ff fa12 	bl	8000564 <led_effect>
 8001140:	e02a      	b.n	8001198 <led_task_handler+0xf0>
				else if (! strcmp((char*)cmd->payload,"e3"))
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	4921      	ldr	r1, [pc, #132]	@ (80011cc <led_task_handler+0x124>)
 8001146:	4618      	mov	r0, r3
 8001148:	f7ff f862 	bl	8000210 <strcmp>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d103      	bne.n	800115a <led_task_handler+0xb2>
					led_effect(3);
 8001152:	2003      	movs	r0, #3
 8001154:	f7ff fa06 	bl	8000564 <led_effect>
 8001158:	e01e      	b.n	8001198 <led_task_handler+0xf0>
				else if (! strcmp((char*)cmd->payload,"e4"))
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	491c      	ldr	r1, [pc, #112]	@ (80011d0 <led_task_handler+0x128>)
 800115e:	4618      	mov	r0, r3
 8001160:	f7ff f856 	bl	8000210 <strcmp>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d103      	bne.n	8001172 <led_task_handler+0xca>
					led_effect(4);
 800116a:	2004      	movs	r0, #4
 800116c:	f7ff f9fa 	bl	8000564 <led_effect>
 8001170:	e012      	b.n	8001198 <led_task_handler+0xf0>
				else
					xQueueSend(q_print,&inv_msg,portMAX_DELAY); /*print invalid message */
 8001172:	4b12      	ldr	r3, [pc, #72]	@ (80011bc <led_task_handler+0x114>)
 8001174:	6818      	ldr	r0, [r3, #0]
 8001176:	f107 0108 	add.w	r1, r7, #8
 800117a:	2300      	movs	r3, #0
 800117c:	f04f 32ff 	mov.w	r2, #4294967295
 8001180:	f003 faba 	bl	80046f8 <xQueueGenericSend>
 8001184:	e008      	b.n	8001198 <led_task_handler+0xf0>
			}else
				xQueueSend(q_print,&inv_msg,portMAX_DELAY);
 8001186:	4b0d      	ldr	r3, [pc, #52]	@ (80011bc <led_task_handler+0x114>)
 8001188:	6818      	ldr	r0, [r3, #0]
 800118a:	f107 0108 	add.w	r1, r7, #8
 800118e:	2300      	movs	r3, #0
 8001190:	f04f 32ff 	mov.w	r2, #4294967295
 8001194:	f003 fab0 	bl	80046f8 <xQueueGenericSend>

			/* update state variable */
			curr_state = sMainMenu;
 8001198:	4b0e      	ldr	r3, [pc, #56]	@ (80011d4 <led_task_handler+0x12c>)
 800119a:	2200      	movs	r2, #0
 800119c:	701a      	strb	r2, [r3, #0]

			/*Notify menu task */
			xTaskNotify(menu_task_handle,0,eNoAction);
 800119e:	4b0e      	ldr	r3, [pc, #56]	@ (80011d8 <led_task_handler+0x130>)
 80011a0:	6818      	ldr	r0, [r3, #0]
 80011a2:	2300      	movs	r3, #0
 80011a4:	9300      	str	r3, [sp, #0]
 80011a6:	2300      	movs	r3, #0
 80011a8:	2200      	movs	r2, #0
 80011aa:	2100      	movs	r1, #0
 80011ac:	f005 f886 	bl	80062bc <xTaskGenericNotify>
			xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 80011b0:	e782      	b.n	80010b8 <led_task_handler+0x10>
 80011b2:	bf00      	nop
 80011b4:	080079a4 	.word	0x080079a4
 80011b8:	08007990 	.word	0x08007990
 80011bc:	200000b0 	.word	0x200000b0
 80011c0:	08007a1c 	.word	0x08007a1c
 80011c4:	08007a24 	.word	0x08007a24
 80011c8:	08007a28 	.word	0x08007a28
 80011cc:	08007a2c 	.word	0x08007a2c
 80011d0:	08007a30 	.word	0x08007a30
 80011d4:	200000c4 	.word	0x200000c4
 80011d8:	20000098 	.word	0x20000098

080011dc <rtc_task_handler>:
}

/*
 * Displays RTC Task Menu
 */
void rtc_task_handler(void* parameters){
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
	TickType_t last_wakeup_time;
	last_wakeup_time = xTaskGetTickCount();
 80011e4:	f004 fb16 	bl	8005814 <xTaskGetTickCount>
 80011e8:	4603      	mov	r3, r0
 80011ea:	60fb      	str	r3, [r7, #12]
	while(1){

		vTaskDelayUntil(&last_wakeup_time, pdMS_TO_TICKS(1000)); // Making all our tasks periodic
 80011ec:	f107 030c 	add.w	r3, r7, #12
 80011f0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80011f4:	4618      	mov	r0, r3
 80011f6:	f004 f8f9 	bl	80053ec <xTaskDelayUntil>
 80011fa:	e7f7      	b.n	80011ec <rtc_task_handler+0x10>

080011fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80011fc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001234 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001200:	f7ff fe1a 	bl	8000e38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001204:	480c      	ldr	r0, [pc, #48]	@ (8001238 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001206:	490d      	ldr	r1, [pc, #52]	@ (800123c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001208:	4a0d      	ldr	r2, [pc, #52]	@ (8001240 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800120a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800120c:	e002      	b.n	8001214 <LoopCopyDataInit>

0800120e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800120e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001210:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001212:	3304      	adds	r3, #4

08001214 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001214:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001216:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001218:	d3f9      	bcc.n	800120e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800121a:	4a0a      	ldr	r2, [pc, #40]	@ (8001244 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800121c:	4c0a      	ldr	r4, [pc, #40]	@ (8001248 <LoopFillZerobss+0x22>)
  movs r3, #0
 800121e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001220:	e001      	b.n	8001226 <LoopFillZerobss>

08001222 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001222:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001224:	3204      	adds	r2, #4

08001226 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001226:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001228:	d3fb      	bcc.n	8001222 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800122a:	f006 fad9 	bl	80077e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800122e:	f7ff f9ed 	bl	800060c <main>
  bx  lr    
 8001232:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001234:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001238:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800123c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001240:	08007a74 	.word	0x08007a74
  ldr r2, =_sbss
 8001244:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001248:	20012eb8 	.word	0x20012eb8

0800124c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800124c:	e7fe      	b.n	800124c <ADC_IRQHandler>
	...

08001250 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001254:	4b0e      	ldr	r3, [pc, #56]	@ (8001290 <HAL_Init+0x40>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a0d      	ldr	r2, [pc, #52]	@ (8001290 <HAL_Init+0x40>)
 800125a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800125e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001260:	4b0b      	ldr	r3, [pc, #44]	@ (8001290 <HAL_Init+0x40>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a0a      	ldr	r2, [pc, #40]	@ (8001290 <HAL_Init+0x40>)
 8001266:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800126a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800126c:	4b08      	ldr	r3, [pc, #32]	@ (8001290 <HAL_Init+0x40>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a07      	ldr	r2, [pc, #28]	@ (8001290 <HAL_Init+0x40>)
 8001272:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001276:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001278:	2003      	movs	r0, #3
 800127a:	f000 f8d8 	bl	800142e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800127e:	2000      	movs	r0, #0
 8001280:	f7ff fd2e 	bl	8000ce0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001284:	f7ff fc8a 	bl	8000b9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001288:	2300      	movs	r3, #0
}
 800128a:	4618      	mov	r0, r3
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	40023c00 	.word	0x40023c00

08001294 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001298:	4b06      	ldr	r3, [pc, #24]	@ (80012b4 <HAL_IncTick+0x20>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	461a      	mov	r2, r3
 800129e:	4b06      	ldr	r3, [pc, #24]	@ (80012b8 <HAL_IncTick+0x24>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4413      	add	r3, r2
 80012a4:	4a04      	ldr	r2, [pc, #16]	@ (80012b8 <HAL_IncTick+0x24>)
 80012a6:	6013      	str	r3, [r2, #0]
}
 80012a8:	bf00      	nop
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	20000008 	.word	0x20000008
 80012b8:	20000110 	.word	0x20000110

080012bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  return uwTick;
 80012c0:	4b03      	ldr	r3, [pc, #12]	@ (80012d0 <HAL_GetTick+0x14>)
 80012c2:	681b      	ldr	r3, [r3, #0]
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	20000110 	.word	0x20000110

080012d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b085      	sub	sp, #20
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	f003 0307 	and.w	r3, r3, #7
 80012e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001318 <__NVIC_SetPriorityGrouping+0x44>)
 80012e6:	68db      	ldr	r3, [r3, #12]
 80012e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012ea:	68ba      	ldr	r2, [r7, #8]
 80012ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012f0:	4013      	ands	r3, r2
 80012f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001300:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001304:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001306:	4a04      	ldr	r2, [pc, #16]	@ (8001318 <__NVIC_SetPriorityGrouping+0x44>)
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	60d3      	str	r3, [r2, #12]
}
 800130c:	bf00      	nop
 800130e:	3714      	adds	r7, #20
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr
 8001318:	e000ed00 	.word	0xe000ed00

0800131c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001320:	4b04      	ldr	r3, [pc, #16]	@ (8001334 <__NVIC_GetPriorityGrouping+0x18>)
 8001322:	68db      	ldr	r3, [r3, #12]
 8001324:	0a1b      	lsrs	r3, r3, #8
 8001326:	f003 0307 	and.w	r3, r3, #7
}
 800132a:	4618      	mov	r0, r3
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr
 8001334:	e000ed00 	.word	0xe000ed00

08001338 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	4603      	mov	r3, r0
 8001340:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001346:	2b00      	cmp	r3, #0
 8001348:	db0b      	blt.n	8001362 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800134a:	79fb      	ldrb	r3, [r7, #7]
 800134c:	f003 021f 	and.w	r2, r3, #31
 8001350:	4907      	ldr	r1, [pc, #28]	@ (8001370 <__NVIC_EnableIRQ+0x38>)
 8001352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001356:	095b      	lsrs	r3, r3, #5
 8001358:	2001      	movs	r0, #1
 800135a:	fa00 f202 	lsl.w	r2, r0, r2
 800135e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001362:	bf00      	nop
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	e000e100 	.word	0xe000e100

08001374 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	4603      	mov	r3, r0
 800137c:	6039      	str	r1, [r7, #0]
 800137e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001380:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001384:	2b00      	cmp	r3, #0
 8001386:	db0a      	blt.n	800139e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	b2da      	uxtb	r2, r3
 800138c:	490c      	ldr	r1, [pc, #48]	@ (80013c0 <__NVIC_SetPriority+0x4c>)
 800138e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001392:	0112      	lsls	r2, r2, #4
 8001394:	b2d2      	uxtb	r2, r2
 8001396:	440b      	add	r3, r1
 8001398:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800139c:	e00a      	b.n	80013b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	b2da      	uxtb	r2, r3
 80013a2:	4908      	ldr	r1, [pc, #32]	@ (80013c4 <__NVIC_SetPriority+0x50>)
 80013a4:	79fb      	ldrb	r3, [r7, #7]
 80013a6:	f003 030f 	and.w	r3, r3, #15
 80013aa:	3b04      	subs	r3, #4
 80013ac:	0112      	lsls	r2, r2, #4
 80013ae:	b2d2      	uxtb	r2, r2
 80013b0:	440b      	add	r3, r1
 80013b2:	761a      	strb	r2, [r3, #24]
}
 80013b4:	bf00      	nop
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	e000e100 	.word	0xe000e100
 80013c4:	e000ed00 	.word	0xe000ed00

080013c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b089      	sub	sp, #36	@ 0x24
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	60f8      	str	r0, [r7, #12]
 80013d0:	60b9      	str	r1, [r7, #8]
 80013d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	f003 0307 	and.w	r3, r3, #7
 80013da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013dc:	69fb      	ldr	r3, [r7, #28]
 80013de:	f1c3 0307 	rsb	r3, r3, #7
 80013e2:	2b04      	cmp	r3, #4
 80013e4:	bf28      	it	cs
 80013e6:	2304      	movcs	r3, #4
 80013e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	3304      	adds	r3, #4
 80013ee:	2b06      	cmp	r3, #6
 80013f0:	d902      	bls.n	80013f8 <NVIC_EncodePriority+0x30>
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	3b03      	subs	r3, #3
 80013f6:	e000      	b.n	80013fa <NVIC_EncodePriority+0x32>
 80013f8:	2300      	movs	r3, #0
 80013fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001400:	69bb      	ldr	r3, [r7, #24]
 8001402:	fa02 f303 	lsl.w	r3, r2, r3
 8001406:	43da      	mvns	r2, r3
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	401a      	ands	r2, r3
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001410:	f04f 31ff 	mov.w	r1, #4294967295
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	fa01 f303 	lsl.w	r3, r1, r3
 800141a:	43d9      	mvns	r1, r3
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001420:	4313      	orrs	r3, r2
         );
}
 8001422:	4618      	mov	r0, r3
 8001424:	3724      	adds	r7, #36	@ 0x24
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr

0800142e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800142e:	b580      	push	{r7, lr}
 8001430:	b082      	sub	sp, #8
 8001432:	af00      	add	r7, sp, #0
 8001434:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	f7ff ff4c 	bl	80012d4 <__NVIC_SetPriorityGrouping>
}
 800143c:	bf00      	nop
 800143e:	3708      	adds	r7, #8
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}

08001444 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001444:	b580      	push	{r7, lr}
 8001446:	b086      	sub	sp, #24
 8001448:	af00      	add	r7, sp, #0
 800144a:	4603      	mov	r3, r0
 800144c:	60b9      	str	r1, [r7, #8]
 800144e:	607a      	str	r2, [r7, #4]
 8001450:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001452:	2300      	movs	r3, #0
 8001454:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001456:	f7ff ff61 	bl	800131c <__NVIC_GetPriorityGrouping>
 800145a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800145c:	687a      	ldr	r2, [r7, #4]
 800145e:	68b9      	ldr	r1, [r7, #8]
 8001460:	6978      	ldr	r0, [r7, #20]
 8001462:	f7ff ffb1 	bl	80013c8 <NVIC_EncodePriority>
 8001466:	4602      	mov	r2, r0
 8001468:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800146c:	4611      	mov	r1, r2
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff ff80 	bl	8001374 <__NVIC_SetPriority>
}
 8001474:	bf00      	nop
 8001476:	3718      	adds	r7, #24
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}

0800147c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	4603      	mov	r3, r0
 8001484:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff ff54 	bl	8001338 <__NVIC_EnableIRQ>
}
 8001490:	bf00      	nop
 8001492:	3708      	adds	r7, #8
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}

08001498 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014a4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80014a6:	f7ff ff09 	bl	80012bc <HAL_GetTick>
 80014aa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	2b02      	cmp	r3, #2
 80014b6:	d008      	beq.n	80014ca <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2280      	movs	r2, #128	@ 0x80
 80014bc:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2200      	movs	r2, #0
 80014c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e052      	b.n	8001570 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f022 0216 	bic.w	r2, r2, #22
 80014d8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	695a      	ldr	r2, [r3, #20]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80014e8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d103      	bne.n	80014fa <HAL_DMA_Abort+0x62>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d007      	beq.n	800150a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f022 0208 	bic.w	r2, r2, #8
 8001508:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f022 0201 	bic.w	r2, r2, #1
 8001518:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800151a:	e013      	b.n	8001544 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800151c:	f7ff fece 	bl	80012bc <HAL_GetTick>
 8001520:	4602      	mov	r2, r0
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	2b05      	cmp	r3, #5
 8001528:	d90c      	bls.n	8001544 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2220      	movs	r2, #32
 800152e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2203      	movs	r2, #3
 8001534:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2200      	movs	r2, #0
 800153c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001540:	2303      	movs	r3, #3
 8001542:	e015      	b.n	8001570 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 0301 	and.w	r3, r3, #1
 800154e:	2b00      	cmp	r3, #0
 8001550:	d1e4      	bne.n	800151c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001556:	223f      	movs	r2, #63	@ 0x3f
 8001558:	409a      	lsls	r2, r3
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2201      	movs	r2, #1
 8001562:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2200      	movs	r2, #0
 800156a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800156e:	2300      	movs	r3, #0
}
 8001570:	4618      	mov	r0, r3
 8001572:	3710      	adds	r7, #16
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}

08001578 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001586:	b2db      	uxtb	r3, r3
 8001588:	2b02      	cmp	r3, #2
 800158a:	d004      	beq.n	8001596 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2280      	movs	r2, #128	@ 0x80
 8001590:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e00c      	b.n	80015b0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2205      	movs	r2, #5
 800159a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f022 0201 	bic.w	r2, r2, #1
 80015ac:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80015ae:	2300      	movs	r3, #0
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	370c      	adds	r7, #12
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr

080015bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015bc:	b480      	push	{r7}
 80015be:	b089      	sub	sp, #36	@ 0x24
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015c6:	2300      	movs	r3, #0
 80015c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015ca:	2300      	movs	r3, #0
 80015cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015ce:	2300      	movs	r3, #0
 80015d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015d2:	2300      	movs	r3, #0
 80015d4:	61fb      	str	r3, [r7, #28]
 80015d6:	e165      	b.n	80018a4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015d8:	2201      	movs	r2, #1
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	fa02 f303 	lsl.w	r3, r2, r3
 80015e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	697a      	ldr	r2, [r7, #20]
 80015e8:	4013      	ands	r3, r2
 80015ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015ec:	693a      	ldr	r2, [r7, #16]
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	f040 8154 	bne.w	800189e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f003 0303 	and.w	r3, r3, #3
 80015fe:	2b01      	cmp	r3, #1
 8001600:	d005      	beq.n	800160e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800160a:	2b02      	cmp	r3, #2
 800160c:	d130      	bne.n	8001670 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001614:	69fb      	ldr	r3, [r7, #28]
 8001616:	005b      	lsls	r3, r3, #1
 8001618:	2203      	movs	r2, #3
 800161a:	fa02 f303 	lsl.w	r3, r2, r3
 800161e:	43db      	mvns	r3, r3
 8001620:	69ba      	ldr	r2, [r7, #24]
 8001622:	4013      	ands	r3, r2
 8001624:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	68da      	ldr	r2, [r3, #12]
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	005b      	lsls	r3, r3, #1
 800162e:	fa02 f303 	lsl.w	r3, r2, r3
 8001632:	69ba      	ldr	r2, [r7, #24]
 8001634:	4313      	orrs	r3, r2
 8001636:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	69ba      	ldr	r2, [r7, #24]
 800163c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001644:	2201      	movs	r2, #1
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	fa02 f303 	lsl.w	r3, r2, r3
 800164c:	43db      	mvns	r3, r3
 800164e:	69ba      	ldr	r2, [r7, #24]
 8001650:	4013      	ands	r3, r2
 8001652:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	091b      	lsrs	r3, r3, #4
 800165a:	f003 0201 	and.w	r2, r3, #1
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	fa02 f303 	lsl.w	r3, r2, r3
 8001664:	69ba      	ldr	r2, [r7, #24]
 8001666:	4313      	orrs	r3, r2
 8001668:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	69ba      	ldr	r2, [r7, #24]
 800166e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f003 0303 	and.w	r3, r3, #3
 8001678:	2b03      	cmp	r3, #3
 800167a:	d017      	beq.n	80016ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	005b      	lsls	r3, r3, #1
 8001686:	2203      	movs	r2, #3
 8001688:	fa02 f303 	lsl.w	r3, r2, r3
 800168c:	43db      	mvns	r3, r3
 800168e:	69ba      	ldr	r2, [r7, #24]
 8001690:	4013      	ands	r3, r2
 8001692:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	689a      	ldr	r2, [r3, #8]
 8001698:	69fb      	ldr	r3, [r7, #28]
 800169a:	005b      	lsls	r3, r3, #1
 800169c:	fa02 f303 	lsl.w	r3, r2, r3
 80016a0:	69ba      	ldr	r2, [r7, #24]
 80016a2:	4313      	orrs	r3, r2
 80016a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	69ba      	ldr	r2, [r7, #24]
 80016aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f003 0303 	and.w	r3, r3, #3
 80016b4:	2b02      	cmp	r3, #2
 80016b6:	d123      	bne.n	8001700 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	08da      	lsrs	r2, r3, #3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	3208      	adds	r2, #8
 80016c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	f003 0307 	and.w	r3, r3, #7
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	220f      	movs	r2, #15
 80016d0:	fa02 f303 	lsl.w	r3, r2, r3
 80016d4:	43db      	mvns	r3, r3
 80016d6:	69ba      	ldr	r2, [r7, #24]
 80016d8:	4013      	ands	r3, r2
 80016da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	691a      	ldr	r2, [r3, #16]
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	f003 0307 	and.w	r3, r3, #7
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ec:	69ba      	ldr	r2, [r7, #24]
 80016ee:	4313      	orrs	r3, r2
 80016f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	08da      	lsrs	r2, r3, #3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	3208      	adds	r2, #8
 80016fa:	69b9      	ldr	r1, [r7, #24]
 80016fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	2203      	movs	r2, #3
 800170c:	fa02 f303 	lsl.w	r3, r2, r3
 8001710:	43db      	mvns	r3, r3
 8001712:	69ba      	ldr	r2, [r7, #24]
 8001714:	4013      	ands	r3, r2
 8001716:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f003 0203 	and.w	r2, r3, #3
 8001720:	69fb      	ldr	r3, [r7, #28]
 8001722:	005b      	lsls	r3, r3, #1
 8001724:	fa02 f303 	lsl.w	r3, r2, r3
 8001728:	69ba      	ldr	r2, [r7, #24]
 800172a:	4313      	orrs	r3, r2
 800172c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	69ba      	ldr	r2, [r7, #24]
 8001732:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800173c:	2b00      	cmp	r3, #0
 800173e:	f000 80ae 	beq.w	800189e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001742:	2300      	movs	r3, #0
 8001744:	60fb      	str	r3, [r7, #12]
 8001746:	4b5d      	ldr	r3, [pc, #372]	@ (80018bc <HAL_GPIO_Init+0x300>)
 8001748:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800174a:	4a5c      	ldr	r2, [pc, #368]	@ (80018bc <HAL_GPIO_Init+0x300>)
 800174c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001750:	6453      	str	r3, [r2, #68]	@ 0x44
 8001752:	4b5a      	ldr	r3, [pc, #360]	@ (80018bc <HAL_GPIO_Init+0x300>)
 8001754:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001756:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800175a:	60fb      	str	r3, [r7, #12]
 800175c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800175e:	4a58      	ldr	r2, [pc, #352]	@ (80018c0 <HAL_GPIO_Init+0x304>)
 8001760:	69fb      	ldr	r3, [r7, #28]
 8001762:	089b      	lsrs	r3, r3, #2
 8001764:	3302      	adds	r3, #2
 8001766:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800176a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800176c:	69fb      	ldr	r3, [r7, #28]
 800176e:	f003 0303 	and.w	r3, r3, #3
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	220f      	movs	r2, #15
 8001776:	fa02 f303 	lsl.w	r3, r2, r3
 800177a:	43db      	mvns	r3, r3
 800177c:	69ba      	ldr	r2, [r7, #24]
 800177e:	4013      	ands	r3, r2
 8001780:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4a4f      	ldr	r2, [pc, #316]	@ (80018c4 <HAL_GPIO_Init+0x308>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d025      	beq.n	80017d6 <HAL_GPIO_Init+0x21a>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4a4e      	ldr	r2, [pc, #312]	@ (80018c8 <HAL_GPIO_Init+0x30c>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d01f      	beq.n	80017d2 <HAL_GPIO_Init+0x216>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4a4d      	ldr	r2, [pc, #308]	@ (80018cc <HAL_GPIO_Init+0x310>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d019      	beq.n	80017ce <HAL_GPIO_Init+0x212>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4a4c      	ldr	r2, [pc, #304]	@ (80018d0 <HAL_GPIO_Init+0x314>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d013      	beq.n	80017ca <HAL_GPIO_Init+0x20e>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4a4b      	ldr	r2, [pc, #300]	@ (80018d4 <HAL_GPIO_Init+0x318>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d00d      	beq.n	80017c6 <HAL_GPIO_Init+0x20a>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4a4a      	ldr	r2, [pc, #296]	@ (80018d8 <HAL_GPIO_Init+0x31c>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d007      	beq.n	80017c2 <HAL_GPIO_Init+0x206>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4a49      	ldr	r2, [pc, #292]	@ (80018dc <HAL_GPIO_Init+0x320>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d101      	bne.n	80017be <HAL_GPIO_Init+0x202>
 80017ba:	2306      	movs	r3, #6
 80017bc:	e00c      	b.n	80017d8 <HAL_GPIO_Init+0x21c>
 80017be:	2307      	movs	r3, #7
 80017c0:	e00a      	b.n	80017d8 <HAL_GPIO_Init+0x21c>
 80017c2:	2305      	movs	r3, #5
 80017c4:	e008      	b.n	80017d8 <HAL_GPIO_Init+0x21c>
 80017c6:	2304      	movs	r3, #4
 80017c8:	e006      	b.n	80017d8 <HAL_GPIO_Init+0x21c>
 80017ca:	2303      	movs	r3, #3
 80017cc:	e004      	b.n	80017d8 <HAL_GPIO_Init+0x21c>
 80017ce:	2302      	movs	r3, #2
 80017d0:	e002      	b.n	80017d8 <HAL_GPIO_Init+0x21c>
 80017d2:	2301      	movs	r3, #1
 80017d4:	e000      	b.n	80017d8 <HAL_GPIO_Init+0x21c>
 80017d6:	2300      	movs	r3, #0
 80017d8:	69fa      	ldr	r2, [r7, #28]
 80017da:	f002 0203 	and.w	r2, r2, #3
 80017de:	0092      	lsls	r2, r2, #2
 80017e0:	4093      	lsls	r3, r2
 80017e2:	69ba      	ldr	r2, [r7, #24]
 80017e4:	4313      	orrs	r3, r2
 80017e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017e8:	4935      	ldr	r1, [pc, #212]	@ (80018c0 <HAL_GPIO_Init+0x304>)
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	089b      	lsrs	r3, r3, #2
 80017ee:	3302      	adds	r3, #2
 80017f0:	69ba      	ldr	r2, [r7, #24]
 80017f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017f6:	4b3a      	ldr	r3, [pc, #232]	@ (80018e0 <HAL_GPIO_Init+0x324>)
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	43db      	mvns	r3, r3
 8001800:	69ba      	ldr	r2, [r7, #24]
 8001802:	4013      	ands	r3, r2
 8001804:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d003      	beq.n	800181a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001812:	69ba      	ldr	r2, [r7, #24]
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	4313      	orrs	r3, r2
 8001818:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800181a:	4a31      	ldr	r2, [pc, #196]	@ (80018e0 <HAL_GPIO_Init+0x324>)
 800181c:	69bb      	ldr	r3, [r7, #24]
 800181e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001820:	4b2f      	ldr	r3, [pc, #188]	@ (80018e0 <HAL_GPIO_Init+0x324>)
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	43db      	mvns	r3, r3
 800182a:	69ba      	ldr	r2, [r7, #24]
 800182c:	4013      	ands	r3, r2
 800182e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001838:	2b00      	cmp	r3, #0
 800183a:	d003      	beq.n	8001844 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800183c:	69ba      	ldr	r2, [r7, #24]
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	4313      	orrs	r3, r2
 8001842:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001844:	4a26      	ldr	r2, [pc, #152]	@ (80018e0 <HAL_GPIO_Init+0x324>)
 8001846:	69bb      	ldr	r3, [r7, #24]
 8001848:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800184a:	4b25      	ldr	r3, [pc, #148]	@ (80018e0 <HAL_GPIO_Init+0x324>)
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	43db      	mvns	r3, r3
 8001854:	69ba      	ldr	r2, [r7, #24]
 8001856:	4013      	ands	r3, r2
 8001858:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d003      	beq.n	800186e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001866:	69ba      	ldr	r2, [r7, #24]
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	4313      	orrs	r3, r2
 800186c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800186e:	4a1c      	ldr	r2, [pc, #112]	@ (80018e0 <HAL_GPIO_Init+0x324>)
 8001870:	69bb      	ldr	r3, [r7, #24]
 8001872:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001874:	4b1a      	ldr	r3, [pc, #104]	@ (80018e0 <HAL_GPIO_Init+0x324>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	43db      	mvns	r3, r3
 800187e:	69ba      	ldr	r2, [r7, #24]
 8001880:	4013      	ands	r3, r2
 8001882:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800188c:	2b00      	cmp	r3, #0
 800188e:	d003      	beq.n	8001898 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001890:	69ba      	ldr	r2, [r7, #24]
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	4313      	orrs	r3, r2
 8001896:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001898:	4a11      	ldr	r2, [pc, #68]	@ (80018e0 <HAL_GPIO_Init+0x324>)
 800189a:	69bb      	ldr	r3, [r7, #24]
 800189c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	3301      	adds	r3, #1
 80018a2:	61fb      	str	r3, [r7, #28]
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	2b0f      	cmp	r3, #15
 80018a8:	f67f ae96 	bls.w	80015d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018ac:	bf00      	nop
 80018ae:	bf00      	nop
 80018b0:	3724      	adds	r7, #36	@ 0x24
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	40023800 	.word	0x40023800
 80018c0:	40013800 	.word	0x40013800
 80018c4:	40020000 	.word	0x40020000
 80018c8:	40020400 	.word	0x40020400
 80018cc:	40020800 	.word	0x40020800
 80018d0:	40020c00 	.word	0x40020c00
 80018d4:	40021000 	.word	0x40021000
 80018d8:	40021400 	.word	0x40021400
 80018dc:	40021800 	.word	0x40021800
 80018e0:	40013c00 	.word	0x40013c00

080018e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	460b      	mov	r3, r1
 80018ee:	807b      	strh	r3, [r7, #2]
 80018f0:	4613      	mov	r3, r2
 80018f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018f4:	787b      	ldrb	r3, [r7, #1]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d003      	beq.n	8001902 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018fa:	887a      	ldrh	r2, [r7, #2]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001900:	e003      	b.n	800190a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001902:	887b      	ldrh	r3, [r7, #2]
 8001904:	041a      	lsls	r2, r3, #16
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	619a      	str	r2, [r3, #24]
}
 800190a:	bf00      	nop
 800190c:	370c      	adds	r7, #12
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr

08001916 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001916:	b480      	push	{r7}
 8001918:	b085      	sub	sp, #20
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
 800191e:	460b      	mov	r3, r1
 8001920:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	695b      	ldr	r3, [r3, #20]
 8001926:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001928:	887a      	ldrh	r2, [r7, #2]
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	4013      	ands	r3, r2
 800192e:	041a      	lsls	r2, r3, #16
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	43d9      	mvns	r1, r3
 8001934:	887b      	ldrh	r3, [r7, #2]
 8001936:	400b      	ands	r3, r1
 8001938:	431a      	orrs	r2, r3
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	619a      	str	r2, [r3, #24]
}
 800193e:	bf00      	nop
 8001940:	3714      	adds	r7, #20
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
	...

0800194c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d101      	bne.n	8001960 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	e0cc      	b.n	8001afa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001960:	4b68      	ldr	r3, [pc, #416]	@ (8001b04 <HAL_RCC_ClockConfig+0x1b8>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 030f 	and.w	r3, r3, #15
 8001968:	683a      	ldr	r2, [r7, #0]
 800196a:	429a      	cmp	r2, r3
 800196c:	d90c      	bls.n	8001988 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800196e:	4b65      	ldr	r3, [pc, #404]	@ (8001b04 <HAL_RCC_ClockConfig+0x1b8>)
 8001970:	683a      	ldr	r2, [r7, #0]
 8001972:	b2d2      	uxtb	r2, r2
 8001974:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001976:	4b63      	ldr	r3, [pc, #396]	@ (8001b04 <HAL_RCC_ClockConfig+0x1b8>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 030f 	and.w	r3, r3, #15
 800197e:	683a      	ldr	r2, [r7, #0]
 8001980:	429a      	cmp	r2, r3
 8001982:	d001      	beq.n	8001988 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e0b8      	b.n	8001afa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 0302 	and.w	r3, r3, #2
 8001990:	2b00      	cmp	r3, #0
 8001992:	d020      	beq.n	80019d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 0304 	and.w	r3, r3, #4
 800199c:	2b00      	cmp	r3, #0
 800199e:	d005      	beq.n	80019ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019a0:	4b59      	ldr	r3, [pc, #356]	@ (8001b08 <HAL_RCC_ClockConfig+0x1bc>)
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	4a58      	ldr	r2, [pc, #352]	@ (8001b08 <HAL_RCC_ClockConfig+0x1bc>)
 80019a6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80019aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 0308 	and.w	r3, r3, #8
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d005      	beq.n	80019c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019b8:	4b53      	ldr	r3, [pc, #332]	@ (8001b08 <HAL_RCC_ClockConfig+0x1bc>)
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	4a52      	ldr	r2, [pc, #328]	@ (8001b08 <HAL_RCC_ClockConfig+0x1bc>)
 80019be:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80019c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019c4:	4b50      	ldr	r3, [pc, #320]	@ (8001b08 <HAL_RCC_ClockConfig+0x1bc>)
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	494d      	ldr	r1, [pc, #308]	@ (8001b08 <HAL_RCC_ClockConfig+0x1bc>)
 80019d2:	4313      	orrs	r3, r2
 80019d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0301 	and.w	r3, r3, #1
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d044      	beq.n	8001a6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d107      	bne.n	80019fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ea:	4b47      	ldr	r3, [pc, #284]	@ (8001b08 <HAL_RCC_ClockConfig+0x1bc>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d119      	bne.n	8001a2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e07f      	b.n	8001afa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d003      	beq.n	8001a0a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a06:	2b03      	cmp	r3, #3
 8001a08:	d107      	bne.n	8001a1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a0a:	4b3f      	ldr	r3, [pc, #252]	@ (8001b08 <HAL_RCC_ClockConfig+0x1bc>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d109      	bne.n	8001a2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e06f      	b.n	8001afa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a1a:	4b3b      	ldr	r3, [pc, #236]	@ (8001b08 <HAL_RCC_ClockConfig+0x1bc>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0302 	and.w	r3, r3, #2
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d101      	bne.n	8001a2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e067      	b.n	8001afa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a2a:	4b37      	ldr	r3, [pc, #220]	@ (8001b08 <HAL_RCC_ClockConfig+0x1bc>)
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	f023 0203 	bic.w	r2, r3, #3
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	4934      	ldr	r1, [pc, #208]	@ (8001b08 <HAL_RCC_ClockConfig+0x1bc>)
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a3c:	f7ff fc3e 	bl	80012bc <HAL_GetTick>
 8001a40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a42:	e00a      	b.n	8001a5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a44:	f7ff fc3a 	bl	80012bc <HAL_GetTick>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d901      	bls.n	8001a5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a56:	2303      	movs	r3, #3
 8001a58:	e04f      	b.n	8001afa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a5a:	4b2b      	ldr	r3, [pc, #172]	@ (8001b08 <HAL_RCC_ClockConfig+0x1bc>)
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	f003 020c 	and.w	r2, r3, #12
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d1eb      	bne.n	8001a44 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a6c:	4b25      	ldr	r3, [pc, #148]	@ (8001b04 <HAL_RCC_ClockConfig+0x1b8>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 030f 	and.w	r3, r3, #15
 8001a74:	683a      	ldr	r2, [r7, #0]
 8001a76:	429a      	cmp	r2, r3
 8001a78:	d20c      	bcs.n	8001a94 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a7a:	4b22      	ldr	r3, [pc, #136]	@ (8001b04 <HAL_RCC_ClockConfig+0x1b8>)
 8001a7c:	683a      	ldr	r2, [r7, #0]
 8001a7e:	b2d2      	uxtb	r2, r2
 8001a80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a82:	4b20      	ldr	r3, [pc, #128]	@ (8001b04 <HAL_RCC_ClockConfig+0x1b8>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 030f 	and.w	r3, r3, #15
 8001a8a:	683a      	ldr	r2, [r7, #0]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d001      	beq.n	8001a94 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e032      	b.n	8001afa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 0304 	and.w	r3, r3, #4
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d008      	beq.n	8001ab2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001aa0:	4b19      	ldr	r3, [pc, #100]	@ (8001b08 <HAL_RCC_ClockConfig+0x1bc>)
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	4916      	ldr	r1, [pc, #88]	@ (8001b08 <HAL_RCC_ClockConfig+0x1bc>)
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 0308 	and.w	r3, r3, #8
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d009      	beq.n	8001ad2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001abe:	4b12      	ldr	r3, [pc, #72]	@ (8001b08 <HAL_RCC_ClockConfig+0x1bc>)
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	691b      	ldr	r3, [r3, #16]
 8001aca:	00db      	lsls	r3, r3, #3
 8001acc:	490e      	ldr	r1, [pc, #56]	@ (8001b08 <HAL_RCC_ClockConfig+0x1bc>)
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ad2:	f000 fbb1 	bl	8002238 <HAL_RCC_GetSysClockFreq>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	4b0b      	ldr	r3, [pc, #44]	@ (8001b08 <HAL_RCC_ClockConfig+0x1bc>)
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	091b      	lsrs	r3, r3, #4
 8001ade:	f003 030f 	and.w	r3, r3, #15
 8001ae2:	490a      	ldr	r1, [pc, #40]	@ (8001b0c <HAL_RCC_ClockConfig+0x1c0>)
 8001ae4:	5ccb      	ldrb	r3, [r1, r3]
 8001ae6:	fa22 f303 	lsr.w	r3, r2, r3
 8001aea:	4a09      	ldr	r2, [pc, #36]	@ (8001b10 <HAL_RCC_ClockConfig+0x1c4>)
 8001aec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001aee:	4b09      	ldr	r3, [pc, #36]	@ (8001b14 <HAL_RCC_ClockConfig+0x1c8>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7ff f8f4 	bl	8000ce0 <HAL_InitTick>

  return HAL_OK;
 8001af8:	2300      	movs	r3, #0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3710      	adds	r7, #16
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	40023c00 	.word	0x40023c00
 8001b08:	40023800 	.word	0x40023800
 8001b0c:	08007a4c 	.word	0x08007a4c
 8001b10:	20000000 	.word	0x20000000
 8001b14:	20000004 	.word	0x20000004

08001b18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b1c:	4b03      	ldr	r3, [pc, #12]	@ (8001b2c <HAL_RCC_GetHCLKFreq+0x14>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	20000000 	.word	0x20000000

08001b30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b34:	f7ff fff0 	bl	8001b18 <HAL_RCC_GetHCLKFreq>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	4b05      	ldr	r3, [pc, #20]	@ (8001b50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	0a9b      	lsrs	r3, r3, #10
 8001b40:	f003 0307 	and.w	r3, r3, #7
 8001b44:	4903      	ldr	r1, [pc, #12]	@ (8001b54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b46:	5ccb      	ldrb	r3, [r1, r3]
 8001b48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	40023800 	.word	0x40023800
 8001b54:	08007a5c 	.word	0x08007a5c

08001b58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b5c:	f7ff ffdc 	bl	8001b18 <HAL_RCC_GetHCLKFreq>
 8001b60:	4602      	mov	r2, r0
 8001b62:	4b05      	ldr	r3, [pc, #20]	@ (8001b78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	0b5b      	lsrs	r3, r3, #13
 8001b68:	f003 0307 	and.w	r3, r3, #7
 8001b6c:	4903      	ldr	r1, [pc, #12]	@ (8001b7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b6e:	5ccb      	ldrb	r3, [r1, r3]
 8001b70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	40023800 	.word	0x40023800
 8001b7c:	08007a5c 	.word	0x08007a5c

08001b80 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	220f      	movs	r2, #15
 8001b8e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b90:	4b12      	ldr	r3, [pc, #72]	@ (8001bdc <HAL_RCC_GetClockConfig+0x5c>)
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	f003 0203 	and.w	r2, r3, #3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b9c:	4b0f      	ldr	r3, [pc, #60]	@ (8001bdc <HAL_RCC_GetClockConfig+0x5c>)
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001ba8:	4b0c      	ldr	r3, [pc, #48]	@ (8001bdc <HAL_RCC_GetClockConfig+0x5c>)
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001bb4:	4b09      	ldr	r3, [pc, #36]	@ (8001bdc <HAL_RCC_GetClockConfig+0x5c>)
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	08db      	lsrs	r3, r3, #3
 8001bba:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001bc2:	4b07      	ldr	r3, [pc, #28]	@ (8001be0 <HAL_RCC_GetClockConfig+0x60>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 020f 	and.w	r2, r3, #15
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	601a      	str	r2, [r3, #0]
}
 8001bce:	bf00      	nop
 8001bd0:	370c      	adds	r7, #12
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	40023800 	.word	0x40023800
 8001be0:	40023c00 	.word	0x40023c00

08001be4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b08c      	sub	sp, #48	@ 0x30
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001bec:	2300      	movs	r3, #0
 8001bee:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8001c00:	2300      	movs	r3, #0
 8001c02:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8001c04:	2300      	movs	r3, #0
 8001c06:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 0301 	and.w	r3, r3, #1
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d010      	beq.n	8001c3e <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8001c1c:	4b6f      	ldr	r3, [pc, #444]	@ (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001c1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c22:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c2a:	496c      	ldr	r1, [pc, #432]	@ (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d101      	bne.n	8001c3e <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 0302 	and.w	r3, r3, #2
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d010      	beq.n	8001c6c <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8001c4a:	4b64      	ldr	r3, [pc, #400]	@ (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001c4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c50:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c58:	4960      	ldr	r1, [pc, #384]	@ (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d101      	bne.n	8001c6c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 0304 	and.w	r3, r3, #4
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d017      	beq.n	8001ca8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001c78:	4b58      	ldr	r3, [pc, #352]	@ (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001c7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c7e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c86:	4955      	ldr	r1, [pc, #340]	@ (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c92:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001c96:	d101      	bne.n	8001c9c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d101      	bne.n	8001ca8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 0308 	and.w	r3, r3, #8
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d017      	beq.n	8001ce4 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001cb4:	4b49      	ldr	r3, [pc, #292]	@ (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001cb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001cba:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cc2:	4946      	ldr	r1, [pc, #280]	@ (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001cd2:	d101      	bne.n	8001cd8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d101      	bne.n	8001ce4 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0320 	and.w	r3, r3, #32
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	f000 808a 	beq.w	8001e06 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	60bb      	str	r3, [r7, #8]
 8001cf6:	4b39      	ldr	r3, [pc, #228]	@ (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cfa:	4a38      	ldr	r2, [pc, #224]	@ (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001cfc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d00:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d02:	4b36      	ldr	r3, [pc, #216]	@ (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d0a:	60bb      	str	r3, [r7, #8]
 8001d0c:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001d0e:	4b34      	ldr	r3, [pc, #208]	@ (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a33      	ldr	r2, [pc, #204]	@ (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001d14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d18:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001d1a:	f7ff facf 	bl	80012bc <HAL_GetTick>
 8001d1e:	6278      	str	r0, [r7, #36]	@ 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001d20:	e008      	b.n	8001d34 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001d22:	f7ff facb 	bl	80012bc <HAL_GetTick>
 8001d26:	4602      	mov	r2, r0
 8001d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d2a:	1ad3      	subs	r3, r2, r3
 8001d2c:	2b02      	cmp	r3, #2
 8001d2e:	d901      	bls.n	8001d34 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8001d30:	2303      	movs	r3, #3
 8001d32:	e278      	b.n	8002226 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001d34:	4b2a      	ldr	r3, [pc, #168]	@ (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d0f0      	beq.n	8001d22 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001d40:	4b26      	ldr	r3, [pc, #152]	@ (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001d42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d44:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001d48:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001d4a:	6a3b      	ldr	r3, [r7, #32]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d02f      	beq.n	8001db0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d54:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001d58:	6a3a      	ldr	r2, [r7, #32]
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	d028      	beq.n	8001db0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001d5e:	4b1f      	ldr	r3, [pc, #124]	@ (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001d60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d62:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001d66:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001d68:	4b1e      	ldr	r3, [pc, #120]	@ (8001de4 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001d6e:	4b1d      	ldr	r3, [pc, #116]	@ (8001de4 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001d74:	4a19      	ldr	r2, [pc, #100]	@ (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001d76:	6a3b      	ldr	r3, [r7, #32]
 8001d78:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001d7a:	4b18      	ldr	r3, [pc, #96]	@ (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001d7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d7e:	f003 0301 	and.w	r3, r3, #1
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d114      	bne.n	8001db0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001d86:	f7ff fa99 	bl	80012bc <HAL_GetTick>
 8001d8a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d8c:	e00a      	b.n	8001da4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d8e:	f7ff fa95 	bl	80012bc <HAL_GetTick>
 8001d92:	4602      	mov	r2, r0
 8001d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d901      	bls.n	8001da4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8001da0:	2303      	movs	r3, #3
 8001da2:	e240      	b.n	8002226 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001da4:	4b0d      	ldr	r3, [pc, #52]	@ (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001da6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001da8:	f003 0302 	and.w	r3, r3, #2
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d0ee      	beq.n	8001d8e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001db8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001dbc:	d114      	bne.n	8001de8 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8001dbe:	4b07      	ldr	r3, [pc, #28]	@ (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dca:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8001dce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001dd2:	4902      	ldr	r1, [pc, #8]	@ (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	608b      	str	r3, [r1, #8]
 8001dd8:	e00c      	b.n	8001df4 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8001dda:	bf00      	nop
 8001ddc:	40023800 	.word	0x40023800
 8001de0:	40007000 	.word	0x40007000
 8001de4:	42470e40 	.word	0x42470e40
 8001de8:	4b4a      	ldr	r3, [pc, #296]	@ (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	4a49      	ldr	r2, [pc, #292]	@ (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001dee:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8001df2:	6093      	str	r3, [r2, #8]
 8001df4:	4b47      	ldr	r3, [pc, #284]	@ (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001df6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e00:	4944      	ldr	r1, [pc, #272]	@ (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001e02:	4313      	orrs	r3, r2
 8001e04:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 0310 	and.w	r3, r3, #16
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d004      	beq.n	8001e1c <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8001e18:	4b3f      	ldr	r3, [pc, #252]	@ (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8001e1a:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d00a      	beq.n	8001e3e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8001e28:	4b3a      	ldr	r3, [pc, #232]	@ (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001e2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e2e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e36:	4937      	ldr	r1, [pc, #220]	@ (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d00a      	beq.n	8001e60 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001e4a:	4b32      	ldr	r3, [pc, #200]	@ (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001e4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e50:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e58:	492e      	ldr	r1, [pc, #184]	@ (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d011      	beq.n	8001e90 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001e6c:	4b29      	ldr	r3, [pc, #164]	@ (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001e6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e72:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e7a:	4926      	ldr	r1, [pc, #152]	@ (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e86:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001e8a:	d101      	bne.n	8001e90 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d00a      	beq.n	8001eb2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8001e9c:	4b1d      	ldr	r3, [pc, #116]	@ (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001e9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ea2:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eaa:	491a      	ldr	r1, [pc, #104]	@ (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001eac:	4313      	orrs	r3, r2
 8001eae:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d011      	beq.n	8001ee2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8001ebe:	4b15      	ldr	r3, [pc, #84]	@ (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001ec0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ec4:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ecc:	4911      	ldr	r1, [pc, #68]	@ (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ed8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001edc:	d101      	bne.n	8001ee2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001ee2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d005      	beq.n	8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001ef0:	f040 80ff 	bne.w	80020f2 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001ef4:	4b09      	ldr	r3, [pc, #36]	@ (8001f1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001efa:	f7ff f9df 	bl	80012bc <HAL_GetTick>
 8001efe:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001f00:	e00e      	b.n	8001f20 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001f02:	f7ff f9db 	bl	80012bc <HAL_GetTick>
 8001f06:	4602      	mov	r2, r0
 8001f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f0a:	1ad3      	subs	r3, r2, r3
 8001f0c:	2b02      	cmp	r3, #2
 8001f0e:	d907      	bls.n	8001f20 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001f10:	2303      	movs	r3, #3
 8001f12:	e188      	b.n	8002226 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001f14:	40023800 	.word	0x40023800
 8001f18:	424711e0 	.word	0x424711e0
 8001f1c:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001f20:	4b7e      	ldr	r3, [pc, #504]	@ (800211c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d1ea      	bne.n	8001f02 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0301 	and.w	r3, r3, #1
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d003      	beq.n	8001f40 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d009      	beq.n	8001f54 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d028      	beq.n	8001f9e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d124      	bne.n	8001f9e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001f54:	4b71      	ldr	r3, [pc, #452]	@ (800211c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001f56:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001f5a:	0c1b      	lsrs	r3, r3, #16
 8001f5c:	f003 0303 	and.w	r3, r3, #3
 8001f60:	3301      	adds	r3, #1
 8001f62:	005b      	lsls	r3, r3, #1
 8001f64:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001f66:	4b6d      	ldr	r3, [pc, #436]	@ (800211c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001f68:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001f6c:	0e1b      	lsrs	r3, r3, #24
 8001f6e:	f003 030f 	and.w	r3, r3, #15
 8001f72:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	685a      	ldr	r2, [r3, #4]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	019b      	lsls	r3, r3, #6
 8001f7e:	431a      	orrs	r2, r3
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	085b      	lsrs	r3, r3, #1
 8001f84:	3b01      	subs	r3, #1
 8001f86:	041b      	lsls	r3, r3, #16
 8001f88:	431a      	orrs	r2, r3
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	061b      	lsls	r3, r3, #24
 8001f8e:	431a      	orrs	r2, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	695b      	ldr	r3, [r3, #20]
 8001f94:	071b      	lsls	r3, r3, #28
 8001f96:	4961      	ldr	r1, [pc, #388]	@ (800211c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0304 	and.w	r3, r3, #4
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d004      	beq.n	8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001fb2:	d00a      	beq.n	8001fca <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d035      	beq.n	800202c <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fc4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001fc8:	d130      	bne.n	800202c <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001fca:	4b54      	ldr	r3, [pc, #336]	@ (800211c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001fcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001fd0:	0c1b      	lsrs	r3, r3, #16
 8001fd2:	f003 0303 	and.w	r3, r3, #3
 8001fd6:	3301      	adds	r3, #1
 8001fd8:	005b      	lsls	r3, r3, #1
 8001fda:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001fdc:	4b4f      	ldr	r3, [pc, #316]	@ (800211c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001fde:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001fe2:	0f1b      	lsrs	r3, r3, #28
 8001fe4:	f003 0307 	and.w	r3, r3, #7
 8001fe8:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	685a      	ldr	r2, [r3, #4]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	019b      	lsls	r3, r3, #6
 8001ff4:	431a      	orrs	r2, r3
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	085b      	lsrs	r3, r3, #1
 8001ffa:	3b01      	subs	r3, #1
 8001ffc:	041b      	lsls	r3, r3, #16
 8001ffe:	431a      	orrs	r2, r3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	691b      	ldr	r3, [r3, #16]
 8002004:	061b      	lsls	r3, r3, #24
 8002006:	431a      	orrs	r2, r3
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	071b      	lsls	r3, r3, #28
 800200c:	4943      	ldr	r1, [pc, #268]	@ (800211c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800200e:	4313      	orrs	r3, r2
 8002010:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002014:	4b41      	ldr	r3, [pc, #260]	@ (800211c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002016:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800201a:	f023 021f 	bic.w	r2, r3, #31
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002022:	3b01      	subs	r3, #1
 8002024:	493d      	ldr	r1, [pc, #244]	@ (800211c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002026:	4313      	orrs	r3, r2
 8002028:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002034:	2b00      	cmp	r3, #0
 8002036:	d029      	beq.n	800208c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800203c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002040:	d124      	bne.n	800208c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002042:	4b36      	ldr	r3, [pc, #216]	@ (800211c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002044:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002048:	0c1b      	lsrs	r3, r3, #16
 800204a:	f003 0303 	and.w	r3, r3, #3
 800204e:	3301      	adds	r3, #1
 8002050:	005b      	lsls	r3, r3, #1
 8002052:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002054:	4b31      	ldr	r3, [pc, #196]	@ (800211c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002056:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800205a:	0f1b      	lsrs	r3, r3, #28
 800205c:	f003 0307 	and.w	r3, r3, #7
 8002060:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	685a      	ldr	r2, [r3, #4]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	019b      	lsls	r3, r3, #6
 800206c:	431a      	orrs	r2, r3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	68db      	ldr	r3, [r3, #12]
 8002072:	085b      	lsrs	r3, r3, #1
 8002074:	3b01      	subs	r3, #1
 8002076:	041b      	lsls	r3, r3, #16
 8002078:	431a      	orrs	r2, r3
 800207a:	69bb      	ldr	r3, [r7, #24]
 800207c:	061b      	lsls	r3, r3, #24
 800207e:	431a      	orrs	r2, r3
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	071b      	lsls	r3, r3, #28
 8002084:	4925      	ldr	r1, [pc, #148]	@ (800211c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002086:	4313      	orrs	r3, r2
 8002088:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002094:	2b00      	cmp	r3, #0
 8002096:	d016      	beq.n	80020c6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	685a      	ldr	r2, [r3, #4]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	019b      	lsls	r3, r3, #6
 80020a2:	431a      	orrs	r2, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	085b      	lsrs	r3, r3, #1
 80020aa:	3b01      	subs	r3, #1
 80020ac:	041b      	lsls	r3, r3, #16
 80020ae:	431a      	orrs	r2, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	691b      	ldr	r3, [r3, #16]
 80020b4:	061b      	lsls	r3, r3, #24
 80020b6:	431a      	orrs	r2, r3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	695b      	ldr	r3, [r3, #20]
 80020bc:	071b      	lsls	r3, r3, #28
 80020be:	4917      	ldr	r1, [pc, #92]	@ (800211c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80020c0:	4313      	orrs	r3, r2
 80020c2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80020c6:	4b16      	ldr	r3, [pc, #88]	@ (8002120 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80020c8:	2201      	movs	r2, #1
 80020ca:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80020cc:	f7ff f8f6 	bl	80012bc <HAL_GetTick>
 80020d0:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80020d2:	e008      	b.n	80020e6 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80020d4:	f7ff f8f2 	bl	80012bc <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d901      	bls.n	80020e6 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e09f      	b.n	8002226 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80020e6:	4b0d      	ldr	r3, [pc, #52]	@ (800211c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d0f0      	beq.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 80020f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	f040 8095 	bne.w	8002224 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80020fa:	4b0a      	ldr	r3, [pc, #40]	@ (8002124 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002100:	f7ff f8dc 	bl	80012bc <HAL_GetTick>
 8002104:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002106:	e00f      	b.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002108:	f7ff f8d8 	bl	80012bc <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	2b02      	cmp	r3, #2
 8002114:	d908      	bls.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e085      	b.n	8002226 <HAL_RCCEx_PeriphCLKConfig+0x642>
 800211a:	bf00      	nop
 800211c:	40023800 	.word	0x40023800
 8002120:	42470068 	.word	0x42470068
 8002124:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002128:	4b41      	ldr	r3, [pc, #260]	@ (8002230 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002130:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002134:	d0e8      	beq.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0304 	and.w	r3, r3, #4
 800213e:	2b00      	cmp	r3, #0
 8002140:	d003      	beq.n	800214a <HAL_RCCEx_PeriphCLKConfig+0x566>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002146:	2b00      	cmp	r3, #0
 8002148:	d009      	beq.n	800215e <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002152:	2b00      	cmp	r3, #0
 8002154:	d02b      	beq.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800215a:	2b00      	cmp	r3, #0
 800215c:	d127      	bne.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800215e:	4b34      	ldr	r3, [pc, #208]	@ (8002230 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002160:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002164:	0c1b      	lsrs	r3, r3, #16
 8002166:	f003 0303 	and.w	r3, r3, #3
 800216a:	3301      	adds	r3, #1
 800216c:	005b      	lsls	r3, r3, #1
 800216e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	699a      	ldr	r2, [r3, #24]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	69db      	ldr	r3, [r3, #28]
 8002178:	019b      	lsls	r3, r3, #6
 800217a:	431a      	orrs	r2, r3
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	085b      	lsrs	r3, r3, #1
 8002180:	3b01      	subs	r3, #1
 8002182:	041b      	lsls	r3, r3, #16
 8002184:	431a      	orrs	r2, r3
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800218a:	061b      	lsls	r3, r3, #24
 800218c:	4928      	ldr	r1, [pc, #160]	@ (8002230 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800218e:	4313      	orrs	r3, r2
 8002190:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002194:	4b26      	ldr	r3, [pc, #152]	@ (8002230 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002196:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800219a:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021a2:	3b01      	subs	r3, #1
 80021a4:	021b      	lsls	r3, r3, #8
 80021a6:	4922      	ldr	r1, [pc, #136]	@ (8002230 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80021a8:	4313      	orrs	r3, r2
 80021aa:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d01d      	beq.n	80021f6 <HAL_RCCEx_PeriphCLKConfig+0x612>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021be:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80021c2:	d118      	bne.n	80021f6 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80021c4:	4b1a      	ldr	r3, [pc, #104]	@ (8002230 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80021c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021ca:	0e1b      	lsrs	r3, r3, #24
 80021cc:	f003 030f 	and.w	r3, r3, #15
 80021d0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	699a      	ldr	r2, [r3, #24]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	69db      	ldr	r3, [r3, #28]
 80021da:	019b      	lsls	r3, r3, #6
 80021dc:	431a      	orrs	r2, r3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6a1b      	ldr	r3, [r3, #32]
 80021e2:	085b      	lsrs	r3, r3, #1
 80021e4:	3b01      	subs	r3, #1
 80021e6:	041b      	lsls	r3, r3, #16
 80021e8:	431a      	orrs	r2, r3
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	061b      	lsls	r3, r3, #24
 80021ee:	4910      	ldr	r1, [pc, #64]	@ (8002230 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80021f0:	4313      	orrs	r3, r2
 80021f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80021f6:	4b0f      	ldr	r3, [pc, #60]	@ (8002234 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 80021f8:	2201      	movs	r2, #1
 80021fa:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80021fc:	f7ff f85e 	bl	80012bc <HAL_GetTick>
 8002200:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002202:	e008      	b.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002204:	f7ff f85a 	bl	80012bc <HAL_GetTick>
 8002208:	4602      	mov	r2, r0
 800220a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	2b02      	cmp	r3, #2
 8002210:	d901      	bls.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002212:	2303      	movs	r3, #3
 8002214:	e007      	b.n	8002226 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002216:	4b06      	ldr	r3, [pc, #24]	@ (8002230 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800221e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002222:	d1ef      	bne.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8002224:	2300      	movs	r3, #0
}
 8002226:	4618      	mov	r0, r3
 8002228:	3730      	adds	r7, #48	@ 0x30
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	40023800 	.word	0x40023800
 8002234:	42470070 	.word	0x42470070

08002238 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002238:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800223c:	b0ae      	sub	sp, #184	@ 0xb8
 800223e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002240:	2300      	movs	r3, #0
 8002242:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002246:	2300      	movs	r3, #0
 8002248:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 800224c:	2300      	movs	r3, #0
 800224e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002252:	2300      	movs	r3, #0
 8002254:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002258:	2300      	movs	r3, #0
 800225a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800225e:	4bcb      	ldr	r3, [pc, #812]	@ (800258c <HAL_RCC_GetSysClockFreq+0x354>)
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	f003 030c 	and.w	r3, r3, #12
 8002266:	2b0c      	cmp	r3, #12
 8002268:	f200 8206 	bhi.w	8002678 <HAL_RCC_GetSysClockFreq+0x440>
 800226c:	a201      	add	r2, pc, #4	@ (adr r2, 8002274 <HAL_RCC_GetSysClockFreq+0x3c>)
 800226e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002272:	bf00      	nop
 8002274:	080022a9 	.word	0x080022a9
 8002278:	08002679 	.word	0x08002679
 800227c:	08002679 	.word	0x08002679
 8002280:	08002679 	.word	0x08002679
 8002284:	080022b1 	.word	0x080022b1
 8002288:	08002679 	.word	0x08002679
 800228c:	08002679 	.word	0x08002679
 8002290:	08002679 	.word	0x08002679
 8002294:	080022b9 	.word	0x080022b9
 8002298:	08002679 	.word	0x08002679
 800229c:	08002679 	.word	0x08002679
 80022a0:	08002679 	.word	0x08002679
 80022a4:	080024a9 	.word	0x080024a9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80022a8:	4bb9      	ldr	r3, [pc, #740]	@ (8002590 <HAL_RCC_GetSysClockFreq+0x358>)
 80022aa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 80022ae:	e1e7      	b.n	8002680 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80022b0:	4bb8      	ldr	r3, [pc, #736]	@ (8002594 <HAL_RCC_GetSysClockFreq+0x35c>)
 80022b2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80022b6:	e1e3      	b.n	8002680 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022b8:	4bb4      	ldr	r3, [pc, #720]	@ (800258c <HAL_RCC_GetSysClockFreq+0x354>)
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80022c0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022c4:	4bb1      	ldr	r3, [pc, #708]	@ (800258c <HAL_RCC_GetSysClockFreq+0x354>)
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d071      	beq.n	80023b4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022d0:	4bae      	ldr	r3, [pc, #696]	@ (800258c <HAL_RCC_GetSysClockFreq+0x354>)
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	099b      	lsrs	r3, r3, #6
 80022d6:	2200      	movs	r2, #0
 80022d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80022dc:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80022e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80022e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022e8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80022ec:	2300      	movs	r3, #0
 80022ee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80022f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80022f6:	4622      	mov	r2, r4
 80022f8:	462b      	mov	r3, r5
 80022fa:	f04f 0000 	mov.w	r0, #0
 80022fe:	f04f 0100 	mov.w	r1, #0
 8002302:	0159      	lsls	r1, r3, #5
 8002304:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002308:	0150      	lsls	r0, r2, #5
 800230a:	4602      	mov	r2, r0
 800230c:	460b      	mov	r3, r1
 800230e:	4621      	mov	r1, r4
 8002310:	1a51      	subs	r1, r2, r1
 8002312:	6439      	str	r1, [r7, #64]	@ 0x40
 8002314:	4629      	mov	r1, r5
 8002316:	eb63 0301 	sbc.w	r3, r3, r1
 800231a:	647b      	str	r3, [r7, #68]	@ 0x44
 800231c:	f04f 0200 	mov.w	r2, #0
 8002320:	f04f 0300 	mov.w	r3, #0
 8002324:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002328:	4649      	mov	r1, r9
 800232a:	018b      	lsls	r3, r1, #6
 800232c:	4641      	mov	r1, r8
 800232e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002332:	4641      	mov	r1, r8
 8002334:	018a      	lsls	r2, r1, #6
 8002336:	4641      	mov	r1, r8
 8002338:	1a51      	subs	r1, r2, r1
 800233a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800233c:	4649      	mov	r1, r9
 800233e:	eb63 0301 	sbc.w	r3, r3, r1
 8002342:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002344:	f04f 0200 	mov.w	r2, #0
 8002348:	f04f 0300 	mov.w	r3, #0
 800234c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002350:	4649      	mov	r1, r9
 8002352:	00cb      	lsls	r3, r1, #3
 8002354:	4641      	mov	r1, r8
 8002356:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800235a:	4641      	mov	r1, r8
 800235c:	00ca      	lsls	r2, r1, #3
 800235e:	4610      	mov	r0, r2
 8002360:	4619      	mov	r1, r3
 8002362:	4603      	mov	r3, r0
 8002364:	4622      	mov	r2, r4
 8002366:	189b      	adds	r3, r3, r2
 8002368:	633b      	str	r3, [r7, #48]	@ 0x30
 800236a:	462b      	mov	r3, r5
 800236c:	460a      	mov	r2, r1
 800236e:	eb42 0303 	adc.w	r3, r2, r3
 8002372:	637b      	str	r3, [r7, #52]	@ 0x34
 8002374:	f04f 0200 	mov.w	r2, #0
 8002378:	f04f 0300 	mov.w	r3, #0
 800237c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002380:	4629      	mov	r1, r5
 8002382:	024b      	lsls	r3, r1, #9
 8002384:	4621      	mov	r1, r4
 8002386:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800238a:	4621      	mov	r1, r4
 800238c:	024a      	lsls	r2, r1, #9
 800238e:	4610      	mov	r0, r2
 8002390:	4619      	mov	r1, r3
 8002392:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002396:	2200      	movs	r2, #0
 8002398:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800239c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80023a0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80023a4:	f7fd ff46 	bl	8000234 <__aeabi_uldivmod>
 80023a8:	4602      	mov	r2, r0
 80023aa:	460b      	mov	r3, r1
 80023ac:	4613      	mov	r3, r2
 80023ae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80023b2:	e067      	b.n	8002484 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023b4:	4b75      	ldr	r3, [pc, #468]	@ (800258c <HAL_RCC_GetSysClockFreq+0x354>)
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	099b      	lsrs	r3, r3, #6
 80023ba:	2200      	movs	r2, #0
 80023bc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80023c0:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80023c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80023c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023cc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80023ce:	2300      	movs	r3, #0
 80023d0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80023d2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80023d6:	4622      	mov	r2, r4
 80023d8:	462b      	mov	r3, r5
 80023da:	f04f 0000 	mov.w	r0, #0
 80023de:	f04f 0100 	mov.w	r1, #0
 80023e2:	0159      	lsls	r1, r3, #5
 80023e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80023e8:	0150      	lsls	r0, r2, #5
 80023ea:	4602      	mov	r2, r0
 80023ec:	460b      	mov	r3, r1
 80023ee:	4621      	mov	r1, r4
 80023f0:	1a51      	subs	r1, r2, r1
 80023f2:	62b9      	str	r1, [r7, #40]	@ 0x28
 80023f4:	4629      	mov	r1, r5
 80023f6:	eb63 0301 	sbc.w	r3, r3, r1
 80023fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80023fc:	f04f 0200 	mov.w	r2, #0
 8002400:	f04f 0300 	mov.w	r3, #0
 8002404:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002408:	4649      	mov	r1, r9
 800240a:	018b      	lsls	r3, r1, #6
 800240c:	4641      	mov	r1, r8
 800240e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002412:	4641      	mov	r1, r8
 8002414:	018a      	lsls	r2, r1, #6
 8002416:	4641      	mov	r1, r8
 8002418:	ebb2 0a01 	subs.w	sl, r2, r1
 800241c:	4649      	mov	r1, r9
 800241e:	eb63 0b01 	sbc.w	fp, r3, r1
 8002422:	f04f 0200 	mov.w	r2, #0
 8002426:	f04f 0300 	mov.w	r3, #0
 800242a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800242e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002432:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002436:	4692      	mov	sl, r2
 8002438:	469b      	mov	fp, r3
 800243a:	4623      	mov	r3, r4
 800243c:	eb1a 0303 	adds.w	r3, sl, r3
 8002440:	623b      	str	r3, [r7, #32]
 8002442:	462b      	mov	r3, r5
 8002444:	eb4b 0303 	adc.w	r3, fp, r3
 8002448:	627b      	str	r3, [r7, #36]	@ 0x24
 800244a:	f04f 0200 	mov.w	r2, #0
 800244e:	f04f 0300 	mov.w	r3, #0
 8002452:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002456:	4629      	mov	r1, r5
 8002458:	028b      	lsls	r3, r1, #10
 800245a:	4621      	mov	r1, r4
 800245c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002460:	4621      	mov	r1, r4
 8002462:	028a      	lsls	r2, r1, #10
 8002464:	4610      	mov	r0, r2
 8002466:	4619      	mov	r1, r3
 8002468:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800246c:	2200      	movs	r2, #0
 800246e:	673b      	str	r3, [r7, #112]	@ 0x70
 8002470:	677a      	str	r2, [r7, #116]	@ 0x74
 8002472:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002476:	f7fd fedd 	bl	8000234 <__aeabi_uldivmod>
 800247a:	4602      	mov	r2, r0
 800247c:	460b      	mov	r3, r1
 800247e:	4613      	mov	r3, r2
 8002480:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002484:	4b41      	ldr	r3, [pc, #260]	@ (800258c <HAL_RCC_GetSysClockFreq+0x354>)
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	0c1b      	lsrs	r3, r3, #16
 800248a:	f003 0303 	and.w	r3, r3, #3
 800248e:	3301      	adds	r3, #1
 8002490:	005b      	lsls	r3, r3, #1
 8002492:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8002496:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800249a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800249e:	fbb2 f3f3 	udiv	r3, r2, r3
 80024a2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80024a6:	e0eb      	b.n	8002680 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024a8:	4b38      	ldr	r3, [pc, #224]	@ (800258c <HAL_RCC_GetSysClockFreq+0x354>)
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80024b0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024b4:	4b35      	ldr	r3, [pc, #212]	@ (800258c <HAL_RCC_GetSysClockFreq+0x354>)
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d06b      	beq.n	8002598 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024c0:	4b32      	ldr	r3, [pc, #200]	@ (800258c <HAL_RCC_GetSysClockFreq+0x354>)
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	099b      	lsrs	r3, r3, #6
 80024c6:	2200      	movs	r2, #0
 80024c8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80024ca:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80024cc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80024ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024d2:	663b      	str	r3, [r7, #96]	@ 0x60
 80024d4:	2300      	movs	r3, #0
 80024d6:	667b      	str	r3, [r7, #100]	@ 0x64
 80024d8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80024dc:	4622      	mov	r2, r4
 80024de:	462b      	mov	r3, r5
 80024e0:	f04f 0000 	mov.w	r0, #0
 80024e4:	f04f 0100 	mov.w	r1, #0
 80024e8:	0159      	lsls	r1, r3, #5
 80024ea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024ee:	0150      	lsls	r0, r2, #5
 80024f0:	4602      	mov	r2, r0
 80024f2:	460b      	mov	r3, r1
 80024f4:	4621      	mov	r1, r4
 80024f6:	1a51      	subs	r1, r2, r1
 80024f8:	61b9      	str	r1, [r7, #24]
 80024fa:	4629      	mov	r1, r5
 80024fc:	eb63 0301 	sbc.w	r3, r3, r1
 8002500:	61fb      	str	r3, [r7, #28]
 8002502:	f04f 0200 	mov.w	r2, #0
 8002506:	f04f 0300 	mov.w	r3, #0
 800250a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800250e:	4659      	mov	r1, fp
 8002510:	018b      	lsls	r3, r1, #6
 8002512:	4651      	mov	r1, sl
 8002514:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002518:	4651      	mov	r1, sl
 800251a:	018a      	lsls	r2, r1, #6
 800251c:	4651      	mov	r1, sl
 800251e:	ebb2 0801 	subs.w	r8, r2, r1
 8002522:	4659      	mov	r1, fp
 8002524:	eb63 0901 	sbc.w	r9, r3, r1
 8002528:	f04f 0200 	mov.w	r2, #0
 800252c:	f04f 0300 	mov.w	r3, #0
 8002530:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002534:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002538:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800253c:	4690      	mov	r8, r2
 800253e:	4699      	mov	r9, r3
 8002540:	4623      	mov	r3, r4
 8002542:	eb18 0303 	adds.w	r3, r8, r3
 8002546:	613b      	str	r3, [r7, #16]
 8002548:	462b      	mov	r3, r5
 800254a:	eb49 0303 	adc.w	r3, r9, r3
 800254e:	617b      	str	r3, [r7, #20]
 8002550:	f04f 0200 	mov.w	r2, #0
 8002554:	f04f 0300 	mov.w	r3, #0
 8002558:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800255c:	4629      	mov	r1, r5
 800255e:	024b      	lsls	r3, r1, #9
 8002560:	4621      	mov	r1, r4
 8002562:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002566:	4621      	mov	r1, r4
 8002568:	024a      	lsls	r2, r1, #9
 800256a:	4610      	mov	r0, r2
 800256c:	4619      	mov	r1, r3
 800256e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002572:	2200      	movs	r2, #0
 8002574:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002576:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002578:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800257c:	f7fd fe5a 	bl	8000234 <__aeabi_uldivmod>
 8002580:	4602      	mov	r2, r0
 8002582:	460b      	mov	r3, r1
 8002584:	4613      	mov	r3, r2
 8002586:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800258a:	e065      	b.n	8002658 <HAL_RCC_GetSysClockFreq+0x420>
 800258c:	40023800 	.word	0x40023800
 8002590:	00f42400 	.word	0x00f42400
 8002594:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002598:	4b3d      	ldr	r3, [pc, #244]	@ (8002690 <HAL_RCC_GetSysClockFreq+0x458>)
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	099b      	lsrs	r3, r3, #6
 800259e:	2200      	movs	r2, #0
 80025a0:	4618      	mov	r0, r3
 80025a2:	4611      	mov	r1, r2
 80025a4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80025a8:	653b      	str	r3, [r7, #80]	@ 0x50
 80025aa:	2300      	movs	r3, #0
 80025ac:	657b      	str	r3, [r7, #84]	@ 0x54
 80025ae:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80025b2:	4642      	mov	r2, r8
 80025b4:	464b      	mov	r3, r9
 80025b6:	f04f 0000 	mov.w	r0, #0
 80025ba:	f04f 0100 	mov.w	r1, #0
 80025be:	0159      	lsls	r1, r3, #5
 80025c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025c4:	0150      	lsls	r0, r2, #5
 80025c6:	4602      	mov	r2, r0
 80025c8:	460b      	mov	r3, r1
 80025ca:	4641      	mov	r1, r8
 80025cc:	1a51      	subs	r1, r2, r1
 80025ce:	60b9      	str	r1, [r7, #8]
 80025d0:	4649      	mov	r1, r9
 80025d2:	eb63 0301 	sbc.w	r3, r3, r1
 80025d6:	60fb      	str	r3, [r7, #12]
 80025d8:	f04f 0200 	mov.w	r2, #0
 80025dc:	f04f 0300 	mov.w	r3, #0
 80025e0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80025e4:	4659      	mov	r1, fp
 80025e6:	018b      	lsls	r3, r1, #6
 80025e8:	4651      	mov	r1, sl
 80025ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80025ee:	4651      	mov	r1, sl
 80025f0:	018a      	lsls	r2, r1, #6
 80025f2:	4651      	mov	r1, sl
 80025f4:	1a54      	subs	r4, r2, r1
 80025f6:	4659      	mov	r1, fp
 80025f8:	eb63 0501 	sbc.w	r5, r3, r1
 80025fc:	f04f 0200 	mov.w	r2, #0
 8002600:	f04f 0300 	mov.w	r3, #0
 8002604:	00eb      	lsls	r3, r5, #3
 8002606:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800260a:	00e2      	lsls	r2, r4, #3
 800260c:	4614      	mov	r4, r2
 800260e:	461d      	mov	r5, r3
 8002610:	4643      	mov	r3, r8
 8002612:	18e3      	adds	r3, r4, r3
 8002614:	603b      	str	r3, [r7, #0]
 8002616:	464b      	mov	r3, r9
 8002618:	eb45 0303 	adc.w	r3, r5, r3
 800261c:	607b      	str	r3, [r7, #4]
 800261e:	f04f 0200 	mov.w	r2, #0
 8002622:	f04f 0300 	mov.w	r3, #0
 8002626:	e9d7 4500 	ldrd	r4, r5, [r7]
 800262a:	4629      	mov	r1, r5
 800262c:	028b      	lsls	r3, r1, #10
 800262e:	4621      	mov	r1, r4
 8002630:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002634:	4621      	mov	r1, r4
 8002636:	028a      	lsls	r2, r1, #10
 8002638:	4610      	mov	r0, r2
 800263a:	4619      	mov	r1, r3
 800263c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002640:	2200      	movs	r2, #0
 8002642:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002644:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002646:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800264a:	f7fd fdf3 	bl	8000234 <__aeabi_uldivmod>
 800264e:	4602      	mov	r2, r0
 8002650:	460b      	mov	r3, r1
 8002652:	4613      	mov	r3, r2
 8002654:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002658:	4b0d      	ldr	r3, [pc, #52]	@ (8002690 <HAL_RCC_GetSysClockFreq+0x458>)
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	0f1b      	lsrs	r3, r3, #28
 800265e:	f003 0307 	and.w	r3, r3, #7
 8002662:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8002666:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800266a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800266e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002672:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002676:	e003      	b.n	8002680 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002678:	4b06      	ldr	r3, [pc, #24]	@ (8002694 <HAL_RCC_GetSysClockFreq+0x45c>)
 800267a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800267e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002680:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002684:	4618      	mov	r0, r3
 8002686:	37b8      	adds	r7, #184	@ 0xb8
 8002688:	46bd      	mov	sp, r7
 800268a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800268e:	bf00      	nop
 8002690:	40023800 	.word	0x40023800
 8002694:	00f42400 	.word	0x00f42400

08002698 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b086      	sub	sp, #24
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d101      	bne.n	80026aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e28d      	b.n	8002bc6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0301 	and.w	r3, r3, #1
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	f000 8083 	beq.w	80027be <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80026b8:	4b94      	ldr	r3, [pc, #592]	@ (800290c <HAL_RCC_OscConfig+0x274>)
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	f003 030c 	and.w	r3, r3, #12
 80026c0:	2b04      	cmp	r3, #4
 80026c2:	d019      	beq.n	80026f8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80026c4:	4b91      	ldr	r3, [pc, #580]	@ (800290c <HAL_RCC_OscConfig+0x274>)
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80026cc:	2b08      	cmp	r3, #8
 80026ce:	d106      	bne.n	80026de <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80026d0:	4b8e      	ldr	r3, [pc, #568]	@ (800290c <HAL_RCC_OscConfig+0x274>)
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026d8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80026dc:	d00c      	beq.n	80026f8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026de:	4b8b      	ldr	r3, [pc, #556]	@ (800290c <HAL_RCC_OscConfig+0x274>)
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80026e6:	2b0c      	cmp	r3, #12
 80026e8:	d112      	bne.n	8002710 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026ea:	4b88      	ldr	r3, [pc, #544]	@ (800290c <HAL_RCC_OscConfig+0x274>)
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026f2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80026f6:	d10b      	bne.n	8002710 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026f8:	4b84      	ldr	r3, [pc, #528]	@ (800290c <HAL_RCC_OscConfig+0x274>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d05b      	beq.n	80027bc <HAL_RCC_OscConfig+0x124>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d157      	bne.n	80027bc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e25a      	b.n	8002bc6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002718:	d106      	bne.n	8002728 <HAL_RCC_OscConfig+0x90>
 800271a:	4b7c      	ldr	r3, [pc, #496]	@ (800290c <HAL_RCC_OscConfig+0x274>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a7b      	ldr	r2, [pc, #492]	@ (800290c <HAL_RCC_OscConfig+0x274>)
 8002720:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002724:	6013      	str	r3, [r2, #0]
 8002726:	e01d      	b.n	8002764 <HAL_RCC_OscConfig+0xcc>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002730:	d10c      	bne.n	800274c <HAL_RCC_OscConfig+0xb4>
 8002732:	4b76      	ldr	r3, [pc, #472]	@ (800290c <HAL_RCC_OscConfig+0x274>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a75      	ldr	r2, [pc, #468]	@ (800290c <HAL_RCC_OscConfig+0x274>)
 8002738:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800273c:	6013      	str	r3, [r2, #0]
 800273e:	4b73      	ldr	r3, [pc, #460]	@ (800290c <HAL_RCC_OscConfig+0x274>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a72      	ldr	r2, [pc, #456]	@ (800290c <HAL_RCC_OscConfig+0x274>)
 8002744:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002748:	6013      	str	r3, [r2, #0]
 800274a:	e00b      	b.n	8002764 <HAL_RCC_OscConfig+0xcc>
 800274c:	4b6f      	ldr	r3, [pc, #444]	@ (800290c <HAL_RCC_OscConfig+0x274>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a6e      	ldr	r2, [pc, #440]	@ (800290c <HAL_RCC_OscConfig+0x274>)
 8002752:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002756:	6013      	str	r3, [r2, #0]
 8002758:	4b6c      	ldr	r3, [pc, #432]	@ (800290c <HAL_RCC_OscConfig+0x274>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a6b      	ldr	r2, [pc, #428]	@ (800290c <HAL_RCC_OscConfig+0x274>)
 800275e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002762:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d013      	beq.n	8002794 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800276c:	f7fe fda6 	bl	80012bc <HAL_GetTick>
 8002770:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002772:	e008      	b.n	8002786 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002774:	f7fe fda2 	bl	80012bc <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	2b64      	cmp	r3, #100	@ 0x64
 8002780:	d901      	bls.n	8002786 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e21f      	b.n	8002bc6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002786:	4b61      	ldr	r3, [pc, #388]	@ (800290c <HAL_RCC_OscConfig+0x274>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d0f0      	beq.n	8002774 <HAL_RCC_OscConfig+0xdc>
 8002792:	e014      	b.n	80027be <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002794:	f7fe fd92 	bl	80012bc <HAL_GetTick>
 8002798:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800279a:	e008      	b.n	80027ae <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800279c:	f7fe fd8e 	bl	80012bc <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	2b64      	cmp	r3, #100	@ 0x64
 80027a8:	d901      	bls.n	80027ae <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e20b      	b.n	8002bc6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027ae:	4b57      	ldr	r3, [pc, #348]	@ (800290c <HAL_RCC_OscConfig+0x274>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d1f0      	bne.n	800279c <HAL_RCC_OscConfig+0x104>
 80027ba:	e000      	b.n	80027be <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0302 	and.w	r3, r3, #2
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d06f      	beq.n	80028aa <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80027ca:	4b50      	ldr	r3, [pc, #320]	@ (800290c <HAL_RCC_OscConfig+0x274>)
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	f003 030c 	and.w	r3, r3, #12
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d017      	beq.n	8002806 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80027d6:	4b4d      	ldr	r3, [pc, #308]	@ (800290c <HAL_RCC_OscConfig+0x274>)
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80027de:	2b08      	cmp	r3, #8
 80027e0:	d105      	bne.n	80027ee <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80027e2:	4b4a      	ldr	r3, [pc, #296]	@ (800290c <HAL_RCC_OscConfig+0x274>)
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d00b      	beq.n	8002806 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027ee:	4b47      	ldr	r3, [pc, #284]	@ (800290c <HAL_RCC_OscConfig+0x274>)
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80027f6:	2b0c      	cmp	r3, #12
 80027f8:	d11c      	bne.n	8002834 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027fa:	4b44      	ldr	r3, [pc, #272]	@ (800290c <HAL_RCC_OscConfig+0x274>)
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d116      	bne.n	8002834 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002806:	4b41      	ldr	r3, [pc, #260]	@ (800290c <HAL_RCC_OscConfig+0x274>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0302 	and.w	r3, r3, #2
 800280e:	2b00      	cmp	r3, #0
 8002810:	d005      	beq.n	800281e <HAL_RCC_OscConfig+0x186>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	2b01      	cmp	r3, #1
 8002818:	d001      	beq.n	800281e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e1d3      	b.n	8002bc6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800281e:	4b3b      	ldr	r3, [pc, #236]	@ (800290c <HAL_RCC_OscConfig+0x274>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	691b      	ldr	r3, [r3, #16]
 800282a:	00db      	lsls	r3, r3, #3
 800282c:	4937      	ldr	r1, [pc, #220]	@ (800290c <HAL_RCC_OscConfig+0x274>)
 800282e:	4313      	orrs	r3, r2
 8002830:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002832:	e03a      	b.n	80028aa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d020      	beq.n	800287e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800283c:	4b34      	ldr	r3, [pc, #208]	@ (8002910 <HAL_RCC_OscConfig+0x278>)
 800283e:	2201      	movs	r2, #1
 8002840:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002842:	f7fe fd3b 	bl	80012bc <HAL_GetTick>
 8002846:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002848:	e008      	b.n	800285c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800284a:	f7fe fd37 	bl	80012bc <HAL_GetTick>
 800284e:	4602      	mov	r2, r0
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	1ad3      	subs	r3, r2, r3
 8002854:	2b02      	cmp	r3, #2
 8002856:	d901      	bls.n	800285c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002858:	2303      	movs	r3, #3
 800285a:	e1b4      	b.n	8002bc6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800285c:	4b2b      	ldr	r3, [pc, #172]	@ (800290c <HAL_RCC_OscConfig+0x274>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 0302 	and.w	r3, r3, #2
 8002864:	2b00      	cmp	r3, #0
 8002866:	d0f0      	beq.n	800284a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002868:	4b28      	ldr	r3, [pc, #160]	@ (800290c <HAL_RCC_OscConfig+0x274>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	691b      	ldr	r3, [r3, #16]
 8002874:	00db      	lsls	r3, r3, #3
 8002876:	4925      	ldr	r1, [pc, #148]	@ (800290c <HAL_RCC_OscConfig+0x274>)
 8002878:	4313      	orrs	r3, r2
 800287a:	600b      	str	r3, [r1, #0]
 800287c:	e015      	b.n	80028aa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800287e:	4b24      	ldr	r3, [pc, #144]	@ (8002910 <HAL_RCC_OscConfig+0x278>)
 8002880:	2200      	movs	r2, #0
 8002882:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002884:	f7fe fd1a 	bl	80012bc <HAL_GetTick>
 8002888:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800288a:	e008      	b.n	800289e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800288c:	f7fe fd16 	bl	80012bc <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	2b02      	cmp	r3, #2
 8002898:	d901      	bls.n	800289e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	e193      	b.n	8002bc6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800289e:	4b1b      	ldr	r3, [pc, #108]	@ (800290c <HAL_RCC_OscConfig+0x274>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0302 	and.w	r3, r3, #2
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d1f0      	bne.n	800288c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0308 	and.w	r3, r3, #8
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d036      	beq.n	8002924 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	695b      	ldr	r3, [r3, #20]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d016      	beq.n	80028ec <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028be:	4b15      	ldr	r3, [pc, #84]	@ (8002914 <HAL_RCC_OscConfig+0x27c>)
 80028c0:	2201      	movs	r2, #1
 80028c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028c4:	f7fe fcfa 	bl	80012bc <HAL_GetTick>
 80028c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028ca:	e008      	b.n	80028de <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028cc:	f7fe fcf6 	bl	80012bc <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	d901      	bls.n	80028de <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e173      	b.n	8002bc6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028de:	4b0b      	ldr	r3, [pc, #44]	@ (800290c <HAL_RCC_OscConfig+0x274>)
 80028e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028e2:	f003 0302 	and.w	r3, r3, #2
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d0f0      	beq.n	80028cc <HAL_RCC_OscConfig+0x234>
 80028ea:	e01b      	b.n	8002924 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028ec:	4b09      	ldr	r3, [pc, #36]	@ (8002914 <HAL_RCC_OscConfig+0x27c>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028f2:	f7fe fce3 	bl	80012bc <HAL_GetTick>
 80028f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028f8:	e00e      	b.n	8002918 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028fa:	f7fe fcdf 	bl	80012bc <HAL_GetTick>
 80028fe:	4602      	mov	r2, r0
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	2b02      	cmp	r3, #2
 8002906:	d907      	bls.n	8002918 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002908:	2303      	movs	r3, #3
 800290a:	e15c      	b.n	8002bc6 <HAL_RCC_OscConfig+0x52e>
 800290c:	40023800 	.word	0x40023800
 8002910:	42470000 	.word	0x42470000
 8002914:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002918:	4b8a      	ldr	r3, [pc, #552]	@ (8002b44 <HAL_RCC_OscConfig+0x4ac>)
 800291a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800291c:	f003 0302 	and.w	r3, r3, #2
 8002920:	2b00      	cmp	r3, #0
 8002922:	d1ea      	bne.n	80028fa <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0304 	and.w	r3, r3, #4
 800292c:	2b00      	cmp	r3, #0
 800292e:	f000 8097 	beq.w	8002a60 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002932:	2300      	movs	r3, #0
 8002934:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002936:	4b83      	ldr	r3, [pc, #524]	@ (8002b44 <HAL_RCC_OscConfig+0x4ac>)
 8002938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800293a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d10f      	bne.n	8002962 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002942:	2300      	movs	r3, #0
 8002944:	60bb      	str	r3, [r7, #8]
 8002946:	4b7f      	ldr	r3, [pc, #508]	@ (8002b44 <HAL_RCC_OscConfig+0x4ac>)
 8002948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800294a:	4a7e      	ldr	r2, [pc, #504]	@ (8002b44 <HAL_RCC_OscConfig+0x4ac>)
 800294c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002950:	6413      	str	r3, [r2, #64]	@ 0x40
 8002952:	4b7c      	ldr	r3, [pc, #496]	@ (8002b44 <HAL_RCC_OscConfig+0x4ac>)
 8002954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002956:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800295a:	60bb      	str	r3, [r7, #8]
 800295c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800295e:	2301      	movs	r3, #1
 8002960:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002962:	4b79      	ldr	r3, [pc, #484]	@ (8002b48 <HAL_RCC_OscConfig+0x4b0>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800296a:	2b00      	cmp	r3, #0
 800296c:	d118      	bne.n	80029a0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800296e:	4b76      	ldr	r3, [pc, #472]	@ (8002b48 <HAL_RCC_OscConfig+0x4b0>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a75      	ldr	r2, [pc, #468]	@ (8002b48 <HAL_RCC_OscConfig+0x4b0>)
 8002974:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002978:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800297a:	f7fe fc9f 	bl	80012bc <HAL_GetTick>
 800297e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002980:	e008      	b.n	8002994 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002982:	f7fe fc9b 	bl	80012bc <HAL_GetTick>
 8002986:	4602      	mov	r2, r0
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	2b02      	cmp	r3, #2
 800298e:	d901      	bls.n	8002994 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002990:	2303      	movs	r3, #3
 8002992:	e118      	b.n	8002bc6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002994:	4b6c      	ldr	r3, [pc, #432]	@ (8002b48 <HAL_RCC_OscConfig+0x4b0>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800299c:	2b00      	cmp	r3, #0
 800299e:	d0f0      	beq.n	8002982 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d106      	bne.n	80029b6 <HAL_RCC_OscConfig+0x31e>
 80029a8:	4b66      	ldr	r3, [pc, #408]	@ (8002b44 <HAL_RCC_OscConfig+0x4ac>)
 80029aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029ac:	4a65      	ldr	r2, [pc, #404]	@ (8002b44 <HAL_RCC_OscConfig+0x4ac>)
 80029ae:	f043 0301 	orr.w	r3, r3, #1
 80029b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80029b4:	e01c      	b.n	80029f0 <HAL_RCC_OscConfig+0x358>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	2b05      	cmp	r3, #5
 80029bc:	d10c      	bne.n	80029d8 <HAL_RCC_OscConfig+0x340>
 80029be:	4b61      	ldr	r3, [pc, #388]	@ (8002b44 <HAL_RCC_OscConfig+0x4ac>)
 80029c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029c2:	4a60      	ldr	r2, [pc, #384]	@ (8002b44 <HAL_RCC_OscConfig+0x4ac>)
 80029c4:	f043 0304 	orr.w	r3, r3, #4
 80029c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80029ca:	4b5e      	ldr	r3, [pc, #376]	@ (8002b44 <HAL_RCC_OscConfig+0x4ac>)
 80029cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029ce:	4a5d      	ldr	r2, [pc, #372]	@ (8002b44 <HAL_RCC_OscConfig+0x4ac>)
 80029d0:	f043 0301 	orr.w	r3, r3, #1
 80029d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80029d6:	e00b      	b.n	80029f0 <HAL_RCC_OscConfig+0x358>
 80029d8:	4b5a      	ldr	r3, [pc, #360]	@ (8002b44 <HAL_RCC_OscConfig+0x4ac>)
 80029da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029dc:	4a59      	ldr	r2, [pc, #356]	@ (8002b44 <HAL_RCC_OscConfig+0x4ac>)
 80029de:	f023 0301 	bic.w	r3, r3, #1
 80029e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80029e4:	4b57      	ldr	r3, [pc, #348]	@ (8002b44 <HAL_RCC_OscConfig+0x4ac>)
 80029e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029e8:	4a56      	ldr	r2, [pc, #344]	@ (8002b44 <HAL_RCC_OscConfig+0x4ac>)
 80029ea:	f023 0304 	bic.w	r3, r3, #4
 80029ee:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d015      	beq.n	8002a24 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029f8:	f7fe fc60 	bl	80012bc <HAL_GetTick>
 80029fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029fe:	e00a      	b.n	8002a16 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a00:	f7fe fc5c 	bl	80012bc <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d901      	bls.n	8002a16 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e0d7      	b.n	8002bc6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a16:	4b4b      	ldr	r3, [pc, #300]	@ (8002b44 <HAL_RCC_OscConfig+0x4ac>)
 8002a18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a1a:	f003 0302 	and.w	r3, r3, #2
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d0ee      	beq.n	8002a00 <HAL_RCC_OscConfig+0x368>
 8002a22:	e014      	b.n	8002a4e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a24:	f7fe fc4a 	bl	80012bc <HAL_GetTick>
 8002a28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a2a:	e00a      	b.n	8002a42 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a2c:	f7fe fc46 	bl	80012bc <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d901      	bls.n	8002a42 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	e0c1      	b.n	8002bc6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a42:	4b40      	ldr	r3, [pc, #256]	@ (8002b44 <HAL_RCC_OscConfig+0x4ac>)
 8002a44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a46:	f003 0302 	and.w	r3, r3, #2
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d1ee      	bne.n	8002a2c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a4e:	7dfb      	ldrb	r3, [r7, #23]
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d105      	bne.n	8002a60 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a54:	4b3b      	ldr	r3, [pc, #236]	@ (8002b44 <HAL_RCC_OscConfig+0x4ac>)
 8002a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a58:	4a3a      	ldr	r2, [pc, #232]	@ (8002b44 <HAL_RCC_OscConfig+0x4ac>)
 8002a5a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a5e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	699b      	ldr	r3, [r3, #24]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	f000 80ad 	beq.w	8002bc4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a6a:	4b36      	ldr	r3, [pc, #216]	@ (8002b44 <HAL_RCC_OscConfig+0x4ac>)
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	f003 030c 	and.w	r3, r3, #12
 8002a72:	2b08      	cmp	r3, #8
 8002a74:	d060      	beq.n	8002b38 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	699b      	ldr	r3, [r3, #24]
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	d145      	bne.n	8002b0a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a7e:	4b33      	ldr	r3, [pc, #204]	@ (8002b4c <HAL_RCC_OscConfig+0x4b4>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a84:	f7fe fc1a 	bl	80012bc <HAL_GetTick>
 8002a88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a8a:	e008      	b.n	8002a9e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a8c:	f7fe fc16 	bl	80012bc <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d901      	bls.n	8002a9e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e093      	b.n	8002bc6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a9e:	4b29      	ldr	r3, [pc, #164]	@ (8002b44 <HAL_RCC_OscConfig+0x4ac>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d1f0      	bne.n	8002a8c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	69da      	ldr	r2, [r3, #28]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6a1b      	ldr	r3, [r3, #32]
 8002ab2:	431a      	orrs	r2, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ab8:	019b      	lsls	r3, r3, #6
 8002aba:	431a      	orrs	r2, r3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ac0:	085b      	lsrs	r3, r3, #1
 8002ac2:	3b01      	subs	r3, #1
 8002ac4:	041b      	lsls	r3, r3, #16
 8002ac6:	431a      	orrs	r2, r3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002acc:	061b      	lsls	r3, r3, #24
 8002ace:	431a      	orrs	r2, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ad4:	071b      	lsls	r3, r3, #28
 8002ad6:	491b      	ldr	r1, [pc, #108]	@ (8002b44 <HAL_RCC_OscConfig+0x4ac>)
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002adc:	4b1b      	ldr	r3, [pc, #108]	@ (8002b4c <HAL_RCC_OscConfig+0x4b4>)
 8002ade:	2201      	movs	r2, #1
 8002ae0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ae2:	f7fe fbeb 	bl	80012bc <HAL_GetTick>
 8002ae6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ae8:	e008      	b.n	8002afc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002aea:	f7fe fbe7 	bl	80012bc <HAL_GetTick>
 8002aee:	4602      	mov	r2, r0
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d901      	bls.n	8002afc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002af8:	2303      	movs	r3, #3
 8002afa:	e064      	b.n	8002bc6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002afc:	4b11      	ldr	r3, [pc, #68]	@ (8002b44 <HAL_RCC_OscConfig+0x4ac>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d0f0      	beq.n	8002aea <HAL_RCC_OscConfig+0x452>
 8002b08:	e05c      	b.n	8002bc4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b0a:	4b10      	ldr	r3, [pc, #64]	@ (8002b4c <HAL_RCC_OscConfig+0x4b4>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b10:	f7fe fbd4 	bl	80012bc <HAL_GetTick>
 8002b14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b16:	e008      	b.n	8002b2a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b18:	f7fe fbd0 	bl	80012bc <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d901      	bls.n	8002b2a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	e04d      	b.n	8002bc6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b2a:	4b06      	ldr	r3, [pc, #24]	@ (8002b44 <HAL_RCC_OscConfig+0x4ac>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d1f0      	bne.n	8002b18 <HAL_RCC_OscConfig+0x480>
 8002b36:	e045      	b.n	8002bc4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	699b      	ldr	r3, [r3, #24]
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d107      	bne.n	8002b50 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e040      	b.n	8002bc6 <HAL_RCC_OscConfig+0x52e>
 8002b44:	40023800 	.word	0x40023800
 8002b48:	40007000 	.word	0x40007000
 8002b4c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b50:	4b1f      	ldr	r3, [pc, #124]	@ (8002bd0 <HAL_RCC_OscConfig+0x538>)
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	699b      	ldr	r3, [r3, #24]
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d030      	beq.n	8002bc0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d129      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d122      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b7a:	68fa      	ldr	r2, [r7, #12]
 8002b7c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002b80:	4013      	ands	r3, r2
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002b86:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d119      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b96:	085b      	lsrs	r3, r3, #1
 8002b98:	3b01      	subs	r3, #1
 8002b9a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d10f      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002baa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d107      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bba:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d001      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e000      	b.n	8002bc6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002bc4:	2300      	movs	r3, #0
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3718      	adds	r7, #24
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	40023800 	.word	0x40023800

08002bd4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d101      	bne.n	8002bea <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e073      	b.n	8002cd2 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	7f5b      	ldrb	r3, [r3, #29]
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d105      	bne.n	8002c00 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f7fd fff6 	bl	8000bec <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2202      	movs	r2, #2
 8002c04:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	f003 0310 	and.w	r3, r3, #16
 8002c10:	2b10      	cmp	r3, #16
 8002c12:	d055      	beq.n	8002cc0 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	22ca      	movs	r2, #202	@ 0xca
 8002c1a:	625a      	str	r2, [r3, #36]	@ 0x24
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	2253      	movs	r2, #83	@ 0x53
 8002c22:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f000 f87f 	bl	8002d28 <RTC_EnterInitMode>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8002c2e:	7bfb      	ldrb	r3, [r7, #15]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d12c      	bne.n	8002c8e <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	6812      	ldr	r2, [r2, #0]
 8002c3e:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8002c42:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002c46:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	6899      	ldr	r1, [r3, #8]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	685a      	ldr	r2, [r3, #4]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	691b      	ldr	r3, [r3, #16]
 8002c56:	431a      	orrs	r2, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	695b      	ldr	r3, [r3, #20]
 8002c5c:	431a      	orrs	r2, r3
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	430a      	orrs	r2, r1
 8002c64:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	68d2      	ldr	r2, [r2, #12]
 8002c6e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	6919      	ldr	r1, [r3, #16]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	041a      	lsls	r2, r3, #16
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	430a      	orrs	r2, r1
 8002c82:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f000 f886 	bl	8002d96 <RTC_ExitInitMode>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8002c8e:	7bfb      	ldrb	r3, [r7, #15]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d110      	bne.n	8002cb6 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002ca2:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	699a      	ldr	r2, [r3, #24]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	430a      	orrs	r2, r1
 8002cb4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	22ff      	movs	r2, #255	@ 0xff
 8002cbc:	625a      	str	r2, [r3, #36]	@ 0x24
 8002cbe:	e001      	b.n	8002cc4 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8002cc4:	7bfb      	ldrb	r3, [r7, #15]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d102      	bne.n	8002cd0 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2201      	movs	r2, #1
 8002cce:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8002cd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3710      	adds	r7, #16
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
	...

08002cdc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b084      	sub	sp, #16
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a0d      	ldr	r2, [pc, #52]	@ (8002d24 <HAL_RTC_WaitForSynchro+0x48>)
 8002cee:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002cf0:	f7fe fae4 	bl	80012bc <HAL_GetTick>
 8002cf4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002cf6:	e009      	b.n	8002d0c <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002cf8:	f7fe fae0 	bl	80012bc <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002d06:	d901      	bls.n	8002d0c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8002d08:	2303      	movs	r3, #3
 8002d0a:	e007      	b.n	8002d1c <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	f003 0320 	and.w	r3, r3, #32
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d0ee      	beq.n	8002cf8 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8002d1a:	2300      	movs	r3, #0
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3710      	adds	r7, #16
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	00017f5f 	.word	0x00017f5f

08002d28 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d30:	2300      	movs	r3, #0
 8002d32:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002d34:	2300      	movs	r3, #0
 8002d36:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d122      	bne.n	8002d8c <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	68da      	ldr	r2, [r3, #12]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002d54:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002d56:	f7fe fab1 	bl	80012bc <HAL_GetTick>
 8002d5a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002d5c:	e00c      	b.n	8002d78 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002d5e:	f7fe faad 	bl	80012bc <HAL_GetTick>
 8002d62:	4602      	mov	r2, r0
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002d6c:	d904      	bls.n	8002d78 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2204      	movs	r2, #4
 8002d72:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d102      	bne.n	8002d8c <RTC_EnterInitMode+0x64>
 8002d86:	7bfb      	ldrb	r3, [r7, #15]
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d1e8      	bne.n	8002d5e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3710      	adds	r7, #16
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}

08002d96 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002d96:	b580      	push	{r7, lr}
 8002d98:	b084      	sub	sp, #16
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	68da      	ldr	r2, [r3, #12]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002db0:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	f003 0320 	and.w	r3, r3, #32
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d10a      	bne.n	8002dd6 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	f7ff ff8b 	bl	8002cdc <HAL_RTC_WaitForSynchro>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d004      	beq.n	8002dd6 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2204      	movs	r2, #4
 8002dd0:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002dd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3710      	adds	r7, #16
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}

08002de0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b082      	sub	sp, #8
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d101      	bne.n	8002df2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e041      	b.n	8002e76 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d106      	bne.n	8002e0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f000 f839 	bl	8002e7e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2202      	movs	r2, #2
 8002e10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	3304      	adds	r3, #4
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	4610      	mov	r0, r2
 8002e20:	f000 f9c0 	bl	80031a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2201      	movs	r2, #1
 8002e28:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2201      	movs	r2, #1
 8002e38:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2201      	movs	r2, #1
 8002e48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2201      	movs	r2, #1
 8002e58:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2201      	movs	r2, #1
 8002e68:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002e74:	2300      	movs	r3, #0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3708      	adds	r7, #8
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}

08002e7e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002e7e:	b480      	push	{r7}
 8002e80:	b083      	sub	sp, #12
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002e86:	bf00      	nop
 8002e88:	370c      	adds	r7, #12
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr
	...

08002e94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b085      	sub	sp, #20
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d001      	beq.n	8002eac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e04e      	b.n	8002f4a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2202      	movs	r2, #2
 8002eb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	68da      	ldr	r2, [r3, #12]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f042 0201 	orr.w	r2, r2, #1
 8002ec2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a23      	ldr	r2, [pc, #140]	@ (8002f58 <HAL_TIM_Base_Start_IT+0xc4>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d022      	beq.n	8002f14 <HAL_TIM_Base_Start_IT+0x80>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ed6:	d01d      	beq.n	8002f14 <HAL_TIM_Base_Start_IT+0x80>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a1f      	ldr	r2, [pc, #124]	@ (8002f5c <HAL_TIM_Base_Start_IT+0xc8>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d018      	beq.n	8002f14 <HAL_TIM_Base_Start_IT+0x80>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a1e      	ldr	r2, [pc, #120]	@ (8002f60 <HAL_TIM_Base_Start_IT+0xcc>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d013      	beq.n	8002f14 <HAL_TIM_Base_Start_IT+0x80>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a1c      	ldr	r2, [pc, #112]	@ (8002f64 <HAL_TIM_Base_Start_IT+0xd0>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d00e      	beq.n	8002f14 <HAL_TIM_Base_Start_IT+0x80>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a1b      	ldr	r2, [pc, #108]	@ (8002f68 <HAL_TIM_Base_Start_IT+0xd4>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d009      	beq.n	8002f14 <HAL_TIM_Base_Start_IT+0x80>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a19      	ldr	r2, [pc, #100]	@ (8002f6c <HAL_TIM_Base_Start_IT+0xd8>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d004      	beq.n	8002f14 <HAL_TIM_Base_Start_IT+0x80>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a18      	ldr	r2, [pc, #96]	@ (8002f70 <HAL_TIM_Base_Start_IT+0xdc>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d111      	bne.n	8002f38 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	f003 0307 	and.w	r3, r3, #7
 8002f1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2b06      	cmp	r3, #6
 8002f24:	d010      	beq.n	8002f48 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f042 0201 	orr.w	r2, r2, #1
 8002f34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f36:	e007      	b.n	8002f48 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f042 0201 	orr.w	r2, r2, #1
 8002f46:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f48:	2300      	movs	r3, #0
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3714      	adds	r7, #20
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr
 8002f56:	bf00      	nop
 8002f58:	40010000 	.word	0x40010000
 8002f5c:	40000400 	.word	0x40000400
 8002f60:	40000800 	.word	0x40000800
 8002f64:	40000c00 	.word	0x40000c00
 8002f68:	40010400 	.word	0x40010400
 8002f6c:	40014000 	.word	0x40014000
 8002f70:	40001800 	.word	0x40001800

08002f74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b084      	sub	sp, #16
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	68db      	ldr	r3, [r3, #12]
 8002f82:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	f003 0302 	and.w	r3, r3, #2
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d020      	beq.n	8002fd8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	f003 0302 	and.w	r3, r3, #2
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d01b      	beq.n	8002fd8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f06f 0202 	mvn.w	r2, #2
 8002fa8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2201      	movs	r2, #1
 8002fae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	699b      	ldr	r3, [r3, #24]
 8002fb6:	f003 0303 	and.w	r3, r3, #3
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d003      	beq.n	8002fc6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f000 f8d2 	bl	8003168 <HAL_TIM_IC_CaptureCallback>
 8002fc4:	e005      	b.n	8002fd2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f000 f8c4 	bl	8003154 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fcc:	6878      	ldr	r0, [r7, #4]
 8002fce:	f000 f8d5 	bl	800317c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	f003 0304 	and.w	r3, r3, #4
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d020      	beq.n	8003024 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	f003 0304 	and.w	r3, r3, #4
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d01b      	beq.n	8003024 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f06f 0204 	mvn.w	r2, #4
 8002ff4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2202      	movs	r2, #2
 8002ffa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	699b      	ldr	r3, [r3, #24]
 8003002:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003006:	2b00      	cmp	r3, #0
 8003008:	d003      	beq.n	8003012 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f000 f8ac 	bl	8003168 <HAL_TIM_IC_CaptureCallback>
 8003010:	e005      	b.n	800301e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f000 f89e 	bl	8003154 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f000 f8af 	bl	800317c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	f003 0308 	and.w	r3, r3, #8
 800302a:	2b00      	cmp	r3, #0
 800302c:	d020      	beq.n	8003070 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	f003 0308 	and.w	r3, r3, #8
 8003034:	2b00      	cmp	r3, #0
 8003036:	d01b      	beq.n	8003070 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f06f 0208 	mvn.w	r2, #8
 8003040:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2204      	movs	r2, #4
 8003046:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	69db      	ldr	r3, [r3, #28]
 800304e:	f003 0303 	and.w	r3, r3, #3
 8003052:	2b00      	cmp	r3, #0
 8003054:	d003      	beq.n	800305e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f000 f886 	bl	8003168 <HAL_TIM_IC_CaptureCallback>
 800305c:	e005      	b.n	800306a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f000 f878 	bl	8003154 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f000 f889 	bl	800317c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	f003 0310 	and.w	r3, r3, #16
 8003076:	2b00      	cmp	r3, #0
 8003078:	d020      	beq.n	80030bc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	f003 0310 	and.w	r3, r3, #16
 8003080:	2b00      	cmp	r3, #0
 8003082:	d01b      	beq.n	80030bc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f06f 0210 	mvn.w	r2, #16
 800308c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2208      	movs	r2, #8
 8003092:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	69db      	ldr	r3, [r3, #28]
 800309a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d003      	beq.n	80030aa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f000 f860 	bl	8003168 <HAL_TIM_IC_CaptureCallback>
 80030a8:	e005      	b.n	80030b6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f000 f852 	bl	8003154 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f000 f863 	bl	800317c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	f003 0301 	and.w	r3, r3, #1
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d00c      	beq.n	80030e0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	f003 0301 	and.w	r3, r3, #1
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d007      	beq.n	80030e0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f06f 0201 	mvn.w	r2, #1
 80030d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f7fd fd46 	bl	8000b6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d00c      	beq.n	8003104 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d007      	beq.n	8003104 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80030fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f000 f906 	bl	8003310 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800310a:	2b00      	cmp	r3, #0
 800310c:	d00c      	beq.n	8003128 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003114:	2b00      	cmp	r3, #0
 8003116:	d007      	beq.n	8003128 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003120:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f000 f834 	bl	8003190 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	f003 0320 	and.w	r3, r3, #32
 800312e:	2b00      	cmp	r3, #0
 8003130:	d00c      	beq.n	800314c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	f003 0320 	and.w	r3, r3, #32
 8003138:	2b00      	cmp	r3, #0
 800313a:	d007      	beq.n	800314c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f06f 0220 	mvn.w	r2, #32
 8003144:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f000 f8d8 	bl	80032fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800314c:	bf00      	nop
 800314e:	3710      	adds	r7, #16
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}

08003154 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003154:	b480      	push	{r7}
 8003156:	b083      	sub	sp, #12
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800315c:	bf00      	nop
 800315e:	370c      	adds	r7, #12
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr

08003168 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003168:	b480      	push	{r7}
 800316a:	b083      	sub	sp, #12
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003170:	bf00      	nop
 8003172:	370c      	adds	r7, #12
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr

0800317c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800317c:	b480      	push	{r7}
 800317e:	b083      	sub	sp, #12
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003184:	bf00      	nop
 8003186:	370c      	adds	r7, #12
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr

08003190 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003190:	b480      	push	{r7}
 8003192:	b083      	sub	sp, #12
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003198:	bf00      	nop
 800319a:	370c      	adds	r7, #12
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr

080031a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b085      	sub	sp, #20
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	4a46      	ldr	r2, [pc, #280]	@ (80032d0 <TIM_Base_SetConfig+0x12c>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d013      	beq.n	80031e4 <TIM_Base_SetConfig+0x40>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031c2:	d00f      	beq.n	80031e4 <TIM_Base_SetConfig+0x40>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	4a43      	ldr	r2, [pc, #268]	@ (80032d4 <TIM_Base_SetConfig+0x130>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d00b      	beq.n	80031e4 <TIM_Base_SetConfig+0x40>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	4a42      	ldr	r2, [pc, #264]	@ (80032d8 <TIM_Base_SetConfig+0x134>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d007      	beq.n	80031e4 <TIM_Base_SetConfig+0x40>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	4a41      	ldr	r2, [pc, #260]	@ (80032dc <TIM_Base_SetConfig+0x138>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d003      	beq.n	80031e4 <TIM_Base_SetConfig+0x40>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	4a40      	ldr	r2, [pc, #256]	@ (80032e0 <TIM_Base_SetConfig+0x13c>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d108      	bne.n	80031f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	68fa      	ldr	r2, [r7, #12]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4a35      	ldr	r2, [pc, #212]	@ (80032d0 <TIM_Base_SetConfig+0x12c>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d02b      	beq.n	8003256 <TIM_Base_SetConfig+0xb2>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003204:	d027      	beq.n	8003256 <TIM_Base_SetConfig+0xb2>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	4a32      	ldr	r2, [pc, #200]	@ (80032d4 <TIM_Base_SetConfig+0x130>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d023      	beq.n	8003256 <TIM_Base_SetConfig+0xb2>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4a31      	ldr	r2, [pc, #196]	@ (80032d8 <TIM_Base_SetConfig+0x134>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d01f      	beq.n	8003256 <TIM_Base_SetConfig+0xb2>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4a30      	ldr	r2, [pc, #192]	@ (80032dc <TIM_Base_SetConfig+0x138>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d01b      	beq.n	8003256 <TIM_Base_SetConfig+0xb2>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4a2f      	ldr	r2, [pc, #188]	@ (80032e0 <TIM_Base_SetConfig+0x13c>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d017      	beq.n	8003256 <TIM_Base_SetConfig+0xb2>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4a2e      	ldr	r2, [pc, #184]	@ (80032e4 <TIM_Base_SetConfig+0x140>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d013      	beq.n	8003256 <TIM_Base_SetConfig+0xb2>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	4a2d      	ldr	r2, [pc, #180]	@ (80032e8 <TIM_Base_SetConfig+0x144>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d00f      	beq.n	8003256 <TIM_Base_SetConfig+0xb2>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4a2c      	ldr	r2, [pc, #176]	@ (80032ec <TIM_Base_SetConfig+0x148>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d00b      	beq.n	8003256 <TIM_Base_SetConfig+0xb2>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	4a2b      	ldr	r2, [pc, #172]	@ (80032f0 <TIM_Base_SetConfig+0x14c>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d007      	beq.n	8003256 <TIM_Base_SetConfig+0xb2>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	4a2a      	ldr	r2, [pc, #168]	@ (80032f4 <TIM_Base_SetConfig+0x150>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d003      	beq.n	8003256 <TIM_Base_SetConfig+0xb2>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	4a29      	ldr	r2, [pc, #164]	@ (80032f8 <TIM_Base_SetConfig+0x154>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d108      	bne.n	8003268 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800325c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	68db      	ldr	r3, [r3, #12]
 8003262:	68fa      	ldr	r2, [r7, #12]
 8003264:	4313      	orrs	r3, r2
 8003266:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	695b      	ldr	r3, [r3, #20]
 8003272:	4313      	orrs	r3, r2
 8003274:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	68fa      	ldr	r2, [r7, #12]
 800327a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	689a      	ldr	r2, [r3, #8]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	4a10      	ldr	r2, [pc, #64]	@ (80032d0 <TIM_Base_SetConfig+0x12c>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d003      	beq.n	800329c <TIM_Base_SetConfig+0xf8>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	4a12      	ldr	r2, [pc, #72]	@ (80032e0 <TIM_Base_SetConfig+0x13c>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d103      	bne.n	80032a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	691a      	ldr	r2, [r3, #16]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2201      	movs	r2, #1
 80032a8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	691b      	ldr	r3, [r3, #16]
 80032ae:	f003 0301 	and.w	r3, r3, #1
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d105      	bne.n	80032c2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	691b      	ldr	r3, [r3, #16]
 80032ba:	f023 0201 	bic.w	r2, r3, #1
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	611a      	str	r2, [r3, #16]
  }
}
 80032c2:	bf00      	nop
 80032c4:	3714      	adds	r7, #20
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr
 80032ce:	bf00      	nop
 80032d0:	40010000 	.word	0x40010000
 80032d4:	40000400 	.word	0x40000400
 80032d8:	40000800 	.word	0x40000800
 80032dc:	40000c00 	.word	0x40000c00
 80032e0:	40010400 	.word	0x40010400
 80032e4:	40014000 	.word	0x40014000
 80032e8:	40014400 	.word	0x40014400
 80032ec:	40014800 	.word	0x40014800
 80032f0:	40001800 	.word	0x40001800
 80032f4:	40001c00 	.word	0x40001c00
 80032f8:	40002000 	.word	0x40002000

080032fc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b083      	sub	sp, #12
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003304:	bf00      	nop
 8003306:	370c      	adds	r7, #12
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr

08003310 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003318:	bf00      	nop
 800331a:	370c      	adds	r7, #12
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr

08003324 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b082      	sub	sp, #8
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d101      	bne.n	8003336 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e042      	b.n	80033bc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800333c:	b2db      	uxtb	r3, r3
 800333e:	2b00      	cmp	r3, #0
 8003340:	d106      	bne.n	8003350 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f7fd fc78 	bl	8000c40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2224      	movs	r2, #36	@ 0x24
 8003354:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	68da      	ldr	r2, [r3, #12]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003366:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	f000 fdbd 	bl	8003ee8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	691a      	ldr	r2, [r3, #16]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800337c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	695a      	ldr	r2, [r3, #20]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800338c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	68da      	ldr	r2, [r3, #12]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800339c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2220      	movs	r2, #32
 80033a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2220      	movs	r2, #32
 80033b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2200      	movs	r2, #0
 80033b8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80033ba:	2300      	movs	r3, #0
}
 80033bc:	4618      	mov	r0, r3
 80033be:	3708      	adds	r7, #8
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}

080033c4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b08a      	sub	sp, #40	@ 0x28
 80033c8:	af02      	add	r7, sp, #8
 80033ca:	60f8      	str	r0, [r7, #12]
 80033cc:	60b9      	str	r1, [r7, #8]
 80033ce:	603b      	str	r3, [r7, #0]
 80033d0:	4613      	mov	r3, r2
 80033d2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80033d4:	2300      	movs	r3, #0
 80033d6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	2b20      	cmp	r3, #32
 80033e2:	d175      	bne.n	80034d0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d002      	beq.n	80033f0 <HAL_UART_Transmit+0x2c>
 80033ea:	88fb      	ldrh	r3, [r7, #6]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d101      	bne.n	80033f4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e06e      	b.n	80034d2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2200      	movs	r2, #0
 80033f8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2221      	movs	r2, #33	@ 0x21
 80033fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003402:	f7fd ff5b 	bl	80012bc <HAL_GetTick>
 8003406:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	88fa      	ldrh	r2, [r7, #6]
 800340c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	88fa      	ldrh	r2, [r7, #6]
 8003412:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800341c:	d108      	bne.n	8003430 <HAL_UART_Transmit+0x6c>
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	691b      	ldr	r3, [r3, #16]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d104      	bne.n	8003430 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003426:	2300      	movs	r3, #0
 8003428:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	61bb      	str	r3, [r7, #24]
 800342e:	e003      	b.n	8003438 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003434:	2300      	movs	r3, #0
 8003436:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003438:	e02e      	b.n	8003498 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	9300      	str	r3, [sp, #0]
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	2200      	movs	r2, #0
 8003442:	2180      	movs	r1, #128	@ 0x80
 8003444:	68f8      	ldr	r0, [r7, #12]
 8003446:	f000 fb1f 	bl	8003a88 <UART_WaitOnFlagUntilTimeout>
 800344a:	4603      	mov	r3, r0
 800344c:	2b00      	cmp	r3, #0
 800344e:	d005      	beq.n	800345c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2220      	movs	r2, #32
 8003454:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003458:	2303      	movs	r3, #3
 800345a:	e03a      	b.n	80034d2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d10b      	bne.n	800347a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003462:	69bb      	ldr	r3, [r7, #24]
 8003464:	881b      	ldrh	r3, [r3, #0]
 8003466:	461a      	mov	r2, r3
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003470:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003472:	69bb      	ldr	r3, [r7, #24]
 8003474:	3302      	adds	r3, #2
 8003476:	61bb      	str	r3, [r7, #24]
 8003478:	e007      	b.n	800348a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	781a      	ldrb	r2, [r3, #0]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003484:	69fb      	ldr	r3, [r7, #28]
 8003486:	3301      	adds	r3, #1
 8003488:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800348e:	b29b      	uxth	r3, r3
 8003490:	3b01      	subs	r3, #1
 8003492:	b29a      	uxth	r2, r3
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800349c:	b29b      	uxth	r3, r3
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d1cb      	bne.n	800343a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	9300      	str	r3, [sp, #0]
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	2200      	movs	r2, #0
 80034aa:	2140      	movs	r1, #64	@ 0x40
 80034ac:	68f8      	ldr	r0, [r7, #12]
 80034ae:	f000 faeb 	bl	8003a88 <UART_WaitOnFlagUntilTimeout>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d005      	beq.n	80034c4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2220      	movs	r2, #32
 80034bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80034c0:	2303      	movs	r3, #3
 80034c2:	e006      	b.n	80034d2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2220      	movs	r2, #32
 80034c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80034cc:	2300      	movs	r3, #0
 80034ce:	e000      	b.n	80034d2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80034d0:	2302      	movs	r3, #2
  }
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3720      	adds	r7, #32
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}

080034da <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80034da:	b580      	push	{r7, lr}
 80034dc:	b084      	sub	sp, #16
 80034de:	af00      	add	r7, sp, #0
 80034e0:	60f8      	str	r0, [r7, #12]
 80034e2:	60b9      	str	r1, [r7, #8]
 80034e4:	4613      	mov	r3, r2
 80034e6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	2b20      	cmp	r3, #32
 80034f2:	d112      	bne.n	800351a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d002      	beq.n	8003500 <HAL_UART_Receive_IT+0x26>
 80034fa:	88fb      	ldrh	r3, [r7, #6]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d101      	bne.n	8003504 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e00b      	b.n	800351c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2200      	movs	r2, #0
 8003508:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800350a:	88fb      	ldrh	r3, [r7, #6]
 800350c:	461a      	mov	r2, r3
 800350e:	68b9      	ldr	r1, [r7, #8]
 8003510:	68f8      	ldr	r0, [r7, #12]
 8003512:	f000 fb12 	bl	8003b3a <UART_Start_Receive_IT>
 8003516:	4603      	mov	r3, r0
 8003518:	e000      	b.n	800351c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800351a:	2302      	movs	r3, #2
  }
}
 800351c:	4618      	mov	r0, r3
 800351e:	3710      	adds	r7, #16
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}

08003524 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b0ba      	sub	sp, #232	@ 0xe8
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	695b      	ldr	r3, [r3, #20]
 8003546:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800354a:	2300      	movs	r3, #0
 800354c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003550:	2300      	movs	r3, #0
 8003552:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003556:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800355a:	f003 030f 	and.w	r3, r3, #15
 800355e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003562:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003566:	2b00      	cmp	r3, #0
 8003568:	d10f      	bne.n	800358a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800356a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800356e:	f003 0320 	and.w	r3, r3, #32
 8003572:	2b00      	cmp	r3, #0
 8003574:	d009      	beq.n	800358a <HAL_UART_IRQHandler+0x66>
 8003576:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800357a:	f003 0320 	and.w	r3, r3, #32
 800357e:	2b00      	cmp	r3, #0
 8003580:	d003      	beq.n	800358a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f000 fbf2 	bl	8003d6c <UART_Receive_IT>
      return;
 8003588:	e25b      	b.n	8003a42 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800358a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800358e:	2b00      	cmp	r3, #0
 8003590:	f000 80de 	beq.w	8003750 <HAL_UART_IRQHandler+0x22c>
 8003594:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003598:	f003 0301 	and.w	r3, r3, #1
 800359c:	2b00      	cmp	r3, #0
 800359e:	d106      	bne.n	80035ae <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80035a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035a4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	f000 80d1 	beq.w	8003750 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80035ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035b2:	f003 0301 	and.w	r3, r3, #1
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d00b      	beq.n	80035d2 <HAL_UART_IRQHandler+0xae>
 80035ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d005      	beq.n	80035d2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035ca:	f043 0201 	orr.w	r2, r3, #1
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80035d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035d6:	f003 0304 	and.w	r3, r3, #4
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d00b      	beq.n	80035f6 <HAL_UART_IRQHandler+0xd2>
 80035de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80035e2:	f003 0301 	and.w	r3, r3, #1
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d005      	beq.n	80035f6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035ee:	f043 0202 	orr.w	r2, r3, #2
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80035f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035fa:	f003 0302 	and.w	r3, r3, #2
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d00b      	beq.n	800361a <HAL_UART_IRQHandler+0xf6>
 8003602:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003606:	f003 0301 	and.w	r3, r3, #1
 800360a:	2b00      	cmp	r3, #0
 800360c:	d005      	beq.n	800361a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003612:	f043 0204 	orr.w	r2, r3, #4
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800361a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800361e:	f003 0308 	and.w	r3, r3, #8
 8003622:	2b00      	cmp	r3, #0
 8003624:	d011      	beq.n	800364a <HAL_UART_IRQHandler+0x126>
 8003626:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800362a:	f003 0320 	and.w	r3, r3, #32
 800362e:	2b00      	cmp	r3, #0
 8003630:	d105      	bne.n	800363e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003632:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003636:	f003 0301 	and.w	r3, r3, #1
 800363a:	2b00      	cmp	r3, #0
 800363c:	d005      	beq.n	800364a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003642:	f043 0208 	orr.w	r2, r3, #8
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800364e:	2b00      	cmp	r3, #0
 8003650:	f000 81f2 	beq.w	8003a38 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003654:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003658:	f003 0320 	and.w	r3, r3, #32
 800365c:	2b00      	cmp	r3, #0
 800365e:	d008      	beq.n	8003672 <HAL_UART_IRQHandler+0x14e>
 8003660:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003664:	f003 0320 	and.w	r3, r3, #32
 8003668:	2b00      	cmp	r3, #0
 800366a:	d002      	beq.n	8003672 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f000 fb7d 	bl	8003d6c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	695b      	ldr	r3, [r3, #20]
 8003678:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800367c:	2b40      	cmp	r3, #64	@ 0x40
 800367e:	bf0c      	ite	eq
 8003680:	2301      	moveq	r3, #1
 8003682:	2300      	movne	r3, #0
 8003684:	b2db      	uxtb	r3, r3
 8003686:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800368e:	f003 0308 	and.w	r3, r3, #8
 8003692:	2b00      	cmp	r3, #0
 8003694:	d103      	bne.n	800369e <HAL_UART_IRQHandler+0x17a>
 8003696:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800369a:	2b00      	cmp	r3, #0
 800369c:	d04f      	beq.n	800373e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f000 fa85 	bl	8003bae <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	695b      	ldr	r3, [r3, #20]
 80036aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036ae:	2b40      	cmp	r3, #64	@ 0x40
 80036b0:	d141      	bne.n	8003736 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	3314      	adds	r3, #20
 80036b8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80036c0:	e853 3f00 	ldrex	r3, [r3]
 80036c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80036c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80036cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80036d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	3314      	adds	r3, #20
 80036da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80036de:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80036e2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80036ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80036ee:	e841 2300 	strex	r3, r2, [r1]
 80036f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80036f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d1d9      	bne.n	80036b2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003702:	2b00      	cmp	r3, #0
 8003704:	d013      	beq.n	800372e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800370a:	4a7e      	ldr	r2, [pc, #504]	@ (8003904 <HAL_UART_IRQHandler+0x3e0>)
 800370c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003712:	4618      	mov	r0, r3
 8003714:	f7fd ff30 	bl	8001578 <HAL_DMA_Abort_IT>
 8003718:	4603      	mov	r3, r0
 800371a:	2b00      	cmp	r3, #0
 800371c:	d016      	beq.n	800374c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003722:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003728:	4610      	mov	r0, r2
 800372a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800372c:	e00e      	b.n	800374c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f000 f994 	bl	8003a5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003734:	e00a      	b.n	800374c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f000 f990 	bl	8003a5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800373c:	e006      	b.n	800374c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f000 f98c 	bl	8003a5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2200      	movs	r2, #0
 8003748:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800374a:	e175      	b.n	8003a38 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800374c:	bf00      	nop
    return;
 800374e:	e173      	b.n	8003a38 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003754:	2b01      	cmp	r3, #1
 8003756:	f040 814f 	bne.w	80039f8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800375a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800375e:	f003 0310 	and.w	r3, r3, #16
 8003762:	2b00      	cmp	r3, #0
 8003764:	f000 8148 	beq.w	80039f8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003768:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800376c:	f003 0310 	and.w	r3, r3, #16
 8003770:	2b00      	cmp	r3, #0
 8003772:	f000 8141 	beq.w	80039f8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003776:	2300      	movs	r3, #0
 8003778:	60bb      	str	r3, [r7, #8]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	60bb      	str	r3, [r7, #8]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	60bb      	str	r3, [r7, #8]
 800378a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	695b      	ldr	r3, [r3, #20]
 8003792:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003796:	2b40      	cmp	r3, #64	@ 0x40
 8003798:	f040 80b6 	bne.w	8003908 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80037a8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	f000 8145 	beq.w	8003a3c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80037b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80037ba:	429a      	cmp	r2, r3
 80037bc:	f080 813e 	bcs.w	8003a3c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80037c6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037cc:	69db      	ldr	r3, [r3, #28]
 80037ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80037d2:	f000 8088 	beq.w	80038e6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	330c      	adds	r3, #12
 80037dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80037e4:	e853 3f00 	ldrex	r3, [r3]
 80037e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80037ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80037f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80037f4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	330c      	adds	r3, #12
 80037fe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003802:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003806:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800380a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800380e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003812:	e841 2300 	strex	r3, r2, [r1]
 8003816:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800381a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800381e:	2b00      	cmp	r3, #0
 8003820:	d1d9      	bne.n	80037d6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	3314      	adds	r3, #20
 8003828:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800382a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800382c:	e853 3f00 	ldrex	r3, [r3]
 8003830:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003832:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003834:	f023 0301 	bic.w	r3, r3, #1
 8003838:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	3314      	adds	r3, #20
 8003842:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003846:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800384a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800384c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800384e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003852:	e841 2300 	strex	r3, r2, [r1]
 8003856:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003858:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800385a:	2b00      	cmp	r3, #0
 800385c:	d1e1      	bne.n	8003822 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	3314      	adds	r3, #20
 8003864:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003866:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003868:	e853 3f00 	ldrex	r3, [r3]
 800386c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800386e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003870:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003874:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	3314      	adds	r3, #20
 800387e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003882:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003884:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003886:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003888:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800388a:	e841 2300 	strex	r3, r2, [r1]
 800388e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003890:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003892:	2b00      	cmp	r3, #0
 8003894:	d1e3      	bne.n	800385e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2220      	movs	r2, #32
 800389a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2200      	movs	r2, #0
 80038a2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	330c      	adds	r3, #12
 80038aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80038ae:	e853 3f00 	ldrex	r3, [r3]
 80038b2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80038b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80038b6:	f023 0310 	bic.w	r3, r3, #16
 80038ba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	330c      	adds	r3, #12
 80038c4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80038c8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80038ca:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038cc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80038ce:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80038d0:	e841 2300 	strex	r3, r2, [r1]
 80038d4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80038d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d1e3      	bne.n	80038a4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038e0:	4618      	mov	r0, r3
 80038e2:	f7fd fdd9 	bl	8001498 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2202      	movs	r2, #2
 80038ea:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	1ad3      	subs	r3, r2, r3
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	4619      	mov	r1, r3
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f000 f8b7 	bl	8003a70 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003902:	e09b      	b.n	8003a3c <HAL_UART_IRQHandler+0x518>
 8003904:	08003c75 	.word	0x08003c75
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003910:	b29b      	uxth	r3, r3
 8003912:	1ad3      	subs	r3, r2, r3
 8003914:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800391c:	b29b      	uxth	r3, r3
 800391e:	2b00      	cmp	r3, #0
 8003920:	f000 808e 	beq.w	8003a40 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003924:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003928:	2b00      	cmp	r3, #0
 800392a:	f000 8089 	beq.w	8003a40 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	330c      	adds	r3, #12
 8003934:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003936:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003938:	e853 3f00 	ldrex	r3, [r3]
 800393c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800393e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003940:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003944:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	330c      	adds	r3, #12
 800394e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003952:	647a      	str	r2, [r7, #68]	@ 0x44
 8003954:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003956:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003958:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800395a:	e841 2300 	strex	r3, r2, [r1]
 800395e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003960:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003962:	2b00      	cmp	r3, #0
 8003964:	d1e3      	bne.n	800392e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	3314      	adds	r3, #20
 800396c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800396e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003970:	e853 3f00 	ldrex	r3, [r3]
 8003974:	623b      	str	r3, [r7, #32]
   return(result);
 8003976:	6a3b      	ldr	r3, [r7, #32]
 8003978:	f023 0301 	bic.w	r3, r3, #1
 800397c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	3314      	adds	r3, #20
 8003986:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800398a:	633a      	str	r2, [r7, #48]	@ 0x30
 800398c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800398e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003990:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003992:	e841 2300 	strex	r3, r2, [r1]
 8003996:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003998:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800399a:	2b00      	cmp	r3, #0
 800399c:	d1e3      	bne.n	8003966 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2220      	movs	r2, #32
 80039a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	330c      	adds	r3, #12
 80039b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	e853 3f00 	ldrex	r3, [r3]
 80039ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f023 0310 	bic.w	r3, r3, #16
 80039c2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	330c      	adds	r3, #12
 80039cc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80039d0:	61fa      	str	r2, [r7, #28]
 80039d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039d4:	69b9      	ldr	r1, [r7, #24]
 80039d6:	69fa      	ldr	r2, [r7, #28]
 80039d8:	e841 2300 	strex	r3, r2, [r1]
 80039dc:	617b      	str	r3, [r7, #20]
   return(result);
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d1e3      	bne.n	80039ac <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2202      	movs	r2, #2
 80039e8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80039ea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80039ee:	4619      	mov	r1, r3
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	f000 f83d 	bl	8003a70 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80039f6:	e023      	b.n	8003a40 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80039f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d009      	beq.n	8003a18 <HAL_UART_IRQHandler+0x4f4>
 8003a04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d003      	beq.n	8003a18 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	f000 f943 	bl	8003c9c <UART_Transmit_IT>
    return;
 8003a16:	e014      	b.n	8003a42 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003a18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d00e      	beq.n	8003a42 <HAL_UART_IRQHandler+0x51e>
 8003a24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d008      	beq.n	8003a42 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f000 f983 	bl	8003d3c <UART_EndTransmit_IT>
    return;
 8003a36:	e004      	b.n	8003a42 <HAL_UART_IRQHandler+0x51e>
    return;
 8003a38:	bf00      	nop
 8003a3a:	e002      	b.n	8003a42 <HAL_UART_IRQHandler+0x51e>
      return;
 8003a3c:	bf00      	nop
 8003a3e:	e000      	b.n	8003a42 <HAL_UART_IRQHandler+0x51e>
      return;
 8003a40:	bf00      	nop
  }
}
 8003a42:	37e8      	adds	r7, #232	@ 0xe8
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}

08003a48 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003a50:	bf00      	nop
 8003a52:	370c      	adds	r7, #12
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr

08003a5c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b083      	sub	sp, #12
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003a64:	bf00      	nop
 8003a66:	370c      	adds	r7, #12
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr

08003a70 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	460b      	mov	r3, r1
 8003a7a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003a7c:	bf00      	nop
 8003a7e:	370c      	adds	r7, #12
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr

08003a88 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b086      	sub	sp, #24
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	60f8      	str	r0, [r7, #12]
 8003a90:	60b9      	str	r1, [r7, #8]
 8003a92:	603b      	str	r3, [r7, #0]
 8003a94:	4613      	mov	r3, r2
 8003a96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a98:	e03b      	b.n	8003b12 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a9a:	6a3b      	ldr	r3, [r7, #32]
 8003a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aa0:	d037      	beq.n	8003b12 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003aa2:	f7fd fc0b 	bl	80012bc <HAL_GetTick>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	1ad3      	subs	r3, r2, r3
 8003aac:	6a3a      	ldr	r2, [r7, #32]
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d302      	bcc.n	8003ab8 <UART_WaitOnFlagUntilTimeout+0x30>
 8003ab2:	6a3b      	ldr	r3, [r7, #32]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d101      	bne.n	8003abc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003ab8:	2303      	movs	r3, #3
 8003aba:	e03a      	b.n	8003b32 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	f003 0304 	and.w	r3, r3, #4
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d023      	beq.n	8003b12 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	2b80      	cmp	r3, #128	@ 0x80
 8003ace:	d020      	beq.n	8003b12 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	2b40      	cmp	r3, #64	@ 0x40
 8003ad4:	d01d      	beq.n	8003b12 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0308 	and.w	r3, r3, #8
 8003ae0:	2b08      	cmp	r3, #8
 8003ae2:	d116      	bne.n	8003b12 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	617b      	str	r3, [r7, #20]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	617b      	str	r3, [r7, #20]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	617b      	str	r3, [r7, #20]
 8003af8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003afa:	68f8      	ldr	r0, [r7, #12]
 8003afc:	f000 f857 	bl	8003bae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2208      	movs	r2, #8
 8003b04:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e00f      	b.n	8003b32 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	68ba      	ldr	r2, [r7, #8]
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	bf0c      	ite	eq
 8003b22:	2301      	moveq	r3, #1
 8003b24:	2300      	movne	r3, #0
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	461a      	mov	r2, r3
 8003b2a:	79fb      	ldrb	r3, [r7, #7]
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d0b4      	beq.n	8003a9a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b30:	2300      	movs	r3, #0
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3718      	adds	r7, #24
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}

08003b3a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b3a:	b480      	push	{r7}
 8003b3c:	b085      	sub	sp, #20
 8003b3e:	af00      	add	r7, sp, #0
 8003b40:	60f8      	str	r0, [r7, #12]
 8003b42:	60b9      	str	r1, [r7, #8]
 8003b44:	4613      	mov	r3, r2
 8003b46:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	68ba      	ldr	r2, [r7, #8]
 8003b4c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	88fa      	ldrh	r2, [r7, #6]
 8003b52:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	88fa      	ldrh	r2, [r7, #6]
 8003b58:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2222      	movs	r2, #34	@ 0x22
 8003b64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	691b      	ldr	r3, [r3, #16]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d007      	beq.n	8003b80 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	68da      	ldr	r2, [r3, #12]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b7e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	695a      	ldr	r2, [r3, #20]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f042 0201 	orr.w	r2, r2, #1
 8003b8e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	68da      	ldr	r2, [r3, #12]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f042 0220 	orr.w	r2, r2, #32
 8003b9e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003ba0:	2300      	movs	r3, #0
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3714      	adds	r7, #20
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr

08003bae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003bae:	b480      	push	{r7}
 8003bb0:	b095      	sub	sp, #84	@ 0x54
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	330c      	adds	r3, #12
 8003bbc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bc0:	e853 3f00 	ldrex	r3, [r3]
 8003bc4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003bc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bc8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003bcc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	330c      	adds	r3, #12
 8003bd4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003bd6:	643a      	str	r2, [r7, #64]	@ 0x40
 8003bd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bda:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003bdc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003bde:	e841 2300 	strex	r3, r2, [r1]
 8003be2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003be4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d1e5      	bne.n	8003bb6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	3314      	adds	r3, #20
 8003bf0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bf2:	6a3b      	ldr	r3, [r7, #32]
 8003bf4:	e853 3f00 	ldrex	r3, [r3]
 8003bf8:	61fb      	str	r3, [r7, #28]
   return(result);
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	f023 0301 	bic.w	r3, r3, #1
 8003c00:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	3314      	adds	r3, #20
 8003c08:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003c0a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003c0c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c0e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c10:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c12:	e841 2300 	strex	r3, r2, [r1]
 8003c16:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d1e5      	bne.n	8003bea <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d119      	bne.n	8003c5a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	330c      	adds	r3, #12
 8003c2c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	e853 3f00 	ldrex	r3, [r3]
 8003c34:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	f023 0310 	bic.w	r3, r3, #16
 8003c3c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	330c      	adds	r3, #12
 8003c44:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003c46:	61ba      	str	r2, [r7, #24]
 8003c48:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c4a:	6979      	ldr	r1, [r7, #20]
 8003c4c:	69ba      	ldr	r2, [r7, #24]
 8003c4e:	e841 2300 	strex	r3, r2, [r1]
 8003c52:	613b      	str	r3, [r7, #16]
   return(result);
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d1e5      	bne.n	8003c26 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2220      	movs	r2, #32
 8003c5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003c68:	bf00      	nop
 8003c6a:	3754      	adds	r7, #84	@ 0x54
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr

08003c74 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b084      	sub	sp, #16
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c80:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2200      	movs	r2, #0
 8003c86:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c8e:	68f8      	ldr	r0, [r7, #12]
 8003c90:	f7ff fee4 	bl	8003a5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c94:	bf00      	nop
 8003c96:	3710      	adds	r7, #16
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}

08003c9c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b085      	sub	sp, #20
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	2b21      	cmp	r3, #33	@ 0x21
 8003cae:	d13e      	bne.n	8003d2e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cb8:	d114      	bne.n	8003ce4 <UART_Transmit_IT+0x48>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	691b      	ldr	r3, [r3, #16]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d110      	bne.n	8003ce4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6a1b      	ldr	r3, [r3, #32]
 8003cc6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	881b      	ldrh	r3, [r3, #0]
 8003ccc:	461a      	mov	r2, r3
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cd6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6a1b      	ldr	r3, [r3, #32]
 8003cdc:	1c9a      	adds	r2, r3, #2
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	621a      	str	r2, [r3, #32]
 8003ce2:	e008      	b.n	8003cf6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6a1b      	ldr	r3, [r3, #32]
 8003ce8:	1c59      	adds	r1, r3, #1
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	6211      	str	r1, [r2, #32]
 8003cee:	781a      	ldrb	r2, [r3, #0]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	3b01      	subs	r3, #1
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	687a      	ldr	r2, [r7, #4]
 8003d02:	4619      	mov	r1, r3
 8003d04:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d10f      	bne.n	8003d2a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	68da      	ldr	r2, [r3, #12]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003d18:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	68da      	ldr	r2, [r3, #12]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003d28:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	e000      	b.n	8003d30 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003d2e:	2302      	movs	r3, #2
  }
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3714      	adds	r7, #20
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr

08003d3c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b082      	sub	sp, #8
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	68da      	ldr	r2, [r3, #12]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d52:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2220      	movs	r2, #32
 8003d58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003d5c:	6878      	ldr	r0, [r7, #4]
 8003d5e:	f7ff fe73 	bl	8003a48 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003d62:	2300      	movs	r3, #0
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	3708      	adds	r7, #8
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}

08003d6c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b08c      	sub	sp, #48	@ 0x30
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	2b22      	cmp	r3, #34	@ 0x22
 8003d7e:	f040 80ae 	bne.w	8003ede <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d8a:	d117      	bne.n	8003dbc <UART_Receive_IT+0x50>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	691b      	ldr	r3, [r3, #16]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d113      	bne.n	8003dbc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003d94:	2300      	movs	r3, #0
 8003d96:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d9c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003daa:	b29a      	uxth	r2, r3
 8003dac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dae:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003db4:	1c9a      	adds	r2, r3, #2
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	629a      	str	r2, [r3, #40]	@ 0x28
 8003dba:	e026      	b.n	8003e0a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003dce:	d007      	beq.n	8003de0 <UART_Receive_IT+0x74>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d10a      	bne.n	8003dee <UART_Receive_IT+0x82>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	691b      	ldr	r3, [r3, #16]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d106      	bne.n	8003dee <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	b2da      	uxtb	r2, r3
 8003de8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dea:	701a      	strb	r2, [r3, #0]
 8003dec:	e008      	b.n	8003e00 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003dfa:	b2da      	uxtb	r2, r3
 8003dfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dfe:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e04:	1c5a      	adds	r2, r3, #1
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003e0e:	b29b      	uxth	r3, r3
 8003e10:	3b01      	subs	r3, #1
 8003e12:	b29b      	uxth	r3, r3
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	4619      	mov	r1, r3
 8003e18:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d15d      	bne.n	8003eda <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	68da      	ldr	r2, [r3, #12]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f022 0220 	bic.w	r2, r2, #32
 8003e2c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	68da      	ldr	r2, [r3, #12]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003e3c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	695a      	ldr	r2, [r3, #20]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f022 0201 	bic.w	r2, r2, #1
 8003e4c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2220      	movs	r2, #32
 8003e52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d135      	bne.n	8003ed0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	330c      	adds	r3, #12
 8003e70:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	e853 3f00 	ldrex	r3, [r3]
 8003e78:	613b      	str	r3, [r7, #16]
   return(result);
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	f023 0310 	bic.w	r3, r3, #16
 8003e80:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	330c      	adds	r3, #12
 8003e88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e8a:	623a      	str	r2, [r7, #32]
 8003e8c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e8e:	69f9      	ldr	r1, [r7, #28]
 8003e90:	6a3a      	ldr	r2, [r7, #32]
 8003e92:	e841 2300 	strex	r3, r2, [r1]
 8003e96:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e98:	69bb      	ldr	r3, [r7, #24]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d1e5      	bne.n	8003e6a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 0310 	and.w	r3, r3, #16
 8003ea8:	2b10      	cmp	r3, #16
 8003eaa:	d10a      	bne.n	8003ec2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003eac:	2300      	movs	r3, #0
 8003eae:	60fb      	str	r3, [r7, #12]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	60fb      	str	r3, [r7, #12]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	60fb      	str	r3, [r7, #12]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003ec6:	4619      	mov	r1, r3
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	f7ff fdd1 	bl	8003a70 <HAL_UARTEx_RxEventCallback>
 8003ece:	e002      	b.n	8003ed6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003ed0:	6878      	ldr	r0, [r7, #4]
 8003ed2:	f7fc fdd9 	bl	8000a88 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	e002      	b.n	8003ee0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003eda:	2300      	movs	r3, #0
 8003edc:	e000      	b.n	8003ee0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003ede:	2302      	movs	r3, #2
  }
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3730      	adds	r7, #48	@ 0x30
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}

08003ee8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ee8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003eec:	b0c0      	sub	sp, #256	@ 0x100
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	691b      	ldr	r3, [r3, #16]
 8003efc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f04:	68d9      	ldr	r1, [r3, #12]
 8003f06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	ea40 0301 	orr.w	r3, r0, r1
 8003f10:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003f12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f16:	689a      	ldr	r2, [r3, #8]
 8003f18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f1c:	691b      	ldr	r3, [r3, #16]
 8003f1e:	431a      	orrs	r2, r3
 8003f20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f24:	695b      	ldr	r3, [r3, #20]
 8003f26:	431a      	orrs	r2, r3
 8003f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f2c:	69db      	ldr	r3, [r3, #28]
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003f34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003f40:	f021 010c 	bic.w	r1, r1, #12
 8003f44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003f4e:	430b      	orrs	r3, r1
 8003f50:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	695b      	ldr	r3, [r3, #20]
 8003f5a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003f5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f62:	6999      	ldr	r1, [r3, #24]
 8003f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	ea40 0301 	orr.w	r3, r0, r1
 8003f6e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	4b8f      	ldr	r3, [pc, #572]	@ (80041b4 <UART_SetConfig+0x2cc>)
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d005      	beq.n	8003f88 <UART_SetConfig+0xa0>
 8003f7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	4b8d      	ldr	r3, [pc, #564]	@ (80041b8 <UART_SetConfig+0x2d0>)
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d104      	bne.n	8003f92 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f88:	f7fd fde6 	bl	8001b58 <HAL_RCC_GetPCLK2Freq>
 8003f8c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003f90:	e003      	b.n	8003f9a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003f92:	f7fd fdcd 	bl	8001b30 <HAL_RCC_GetPCLK1Freq>
 8003f96:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f9e:	69db      	ldr	r3, [r3, #28]
 8003fa0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003fa4:	f040 810c 	bne.w	80041c0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003fa8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003fac:	2200      	movs	r2, #0
 8003fae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003fb2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003fb6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003fba:	4622      	mov	r2, r4
 8003fbc:	462b      	mov	r3, r5
 8003fbe:	1891      	adds	r1, r2, r2
 8003fc0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003fc2:	415b      	adcs	r3, r3
 8003fc4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003fc6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003fca:	4621      	mov	r1, r4
 8003fcc:	eb12 0801 	adds.w	r8, r2, r1
 8003fd0:	4629      	mov	r1, r5
 8003fd2:	eb43 0901 	adc.w	r9, r3, r1
 8003fd6:	f04f 0200 	mov.w	r2, #0
 8003fda:	f04f 0300 	mov.w	r3, #0
 8003fde:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003fe2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003fe6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003fea:	4690      	mov	r8, r2
 8003fec:	4699      	mov	r9, r3
 8003fee:	4623      	mov	r3, r4
 8003ff0:	eb18 0303 	adds.w	r3, r8, r3
 8003ff4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003ff8:	462b      	mov	r3, r5
 8003ffa:	eb49 0303 	adc.w	r3, r9, r3
 8003ffe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004002:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	2200      	movs	r2, #0
 800400a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800400e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004012:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004016:	460b      	mov	r3, r1
 8004018:	18db      	adds	r3, r3, r3
 800401a:	653b      	str	r3, [r7, #80]	@ 0x50
 800401c:	4613      	mov	r3, r2
 800401e:	eb42 0303 	adc.w	r3, r2, r3
 8004022:	657b      	str	r3, [r7, #84]	@ 0x54
 8004024:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004028:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800402c:	f7fc f902 	bl	8000234 <__aeabi_uldivmod>
 8004030:	4602      	mov	r2, r0
 8004032:	460b      	mov	r3, r1
 8004034:	4b61      	ldr	r3, [pc, #388]	@ (80041bc <UART_SetConfig+0x2d4>)
 8004036:	fba3 2302 	umull	r2, r3, r3, r2
 800403a:	095b      	lsrs	r3, r3, #5
 800403c:	011c      	lsls	r4, r3, #4
 800403e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004042:	2200      	movs	r2, #0
 8004044:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004048:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800404c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004050:	4642      	mov	r2, r8
 8004052:	464b      	mov	r3, r9
 8004054:	1891      	adds	r1, r2, r2
 8004056:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004058:	415b      	adcs	r3, r3
 800405a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800405c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004060:	4641      	mov	r1, r8
 8004062:	eb12 0a01 	adds.w	sl, r2, r1
 8004066:	4649      	mov	r1, r9
 8004068:	eb43 0b01 	adc.w	fp, r3, r1
 800406c:	f04f 0200 	mov.w	r2, #0
 8004070:	f04f 0300 	mov.w	r3, #0
 8004074:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004078:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800407c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004080:	4692      	mov	sl, r2
 8004082:	469b      	mov	fp, r3
 8004084:	4643      	mov	r3, r8
 8004086:	eb1a 0303 	adds.w	r3, sl, r3
 800408a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800408e:	464b      	mov	r3, r9
 8004090:	eb4b 0303 	adc.w	r3, fp, r3
 8004094:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80040a4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80040a8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80040ac:	460b      	mov	r3, r1
 80040ae:	18db      	adds	r3, r3, r3
 80040b0:	643b      	str	r3, [r7, #64]	@ 0x40
 80040b2:	4613      	mov	r3, r2
 80040b4:	eb42 0303 	adc.w	r3, r2, r3
 80040b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80040ba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80040be:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80040c2:	f7fc f8b7 	bl	8000234 <__aeabi_uldivmod>
 80040c6:	4602      	mov	r2, r0
 80040c8:	460b      	mov	r3, r1
 80040ca:	4611      	mov	r1, r2
 80040cc:	4b3b      	ldr	r3, [pc, #236]	@ (80041bc <UART_SetConfig+0x2d4>)
 80040ce:	fba3 2301 	umull	r2, r3, r3, r1
 80040d2:	095b      	lsrs	r3, r3, #5
 80040d4:	2264      	movs	r2, #100	@ 0x64
 80040d6:	fb02 f303 	mul.w	r3, r2, r3
 80040da:	1acb      	subs	r3, r1, r3
 80040dc:	00db      	lsls	r3, r3, #3
 80040de:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80040e2:	4b36      	ldr	r3, [pc, #216]	@ (80041bc <UART_SetConfig+0x2d4>)
 80040e4:	fba3 2302 	umull	r2, r3, r3, r2
 80040e8:	095b      	lsrs	r3, r3, #5
 80040ea:	005b      	lsls	r3, r3, #1
 80040ec:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80040f0:	441c      	add	r4, r3
 80040f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040f6:	2200      	movs	r2, #0
 80040f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80040fc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004100:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004104:	4642      	mov	r2, r8
 8004106:	464b      	mov	r3, r9
 8004108:	1891      	adds	r1, r2, r2
 800410a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800410c:	415b      	adcs	r3, r3
 800410e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004110:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004114:	4641      	mov	r1, r8
 8004116:	1851      	adds	r1, r2, r1
 8004118:	6339      	str	r1, [r7, #48]	@ 0x30
 800411a:	4649      	mov	r1, r9
 800411c:	414b      	adcs	r3, r1
 800411e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004120:	f04f 0200 	mov.w	r2, #0
 8004124:	f04f 0300 	mov.w	r3, #0
 8004128:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800412c:	4659      	mov	r1, fp
 800412e:	00cb      	lsls	r3, r1, #3
 8004130:	4651      	mov	r1, sl
 8004132:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004136:	4651      	mov	r1, sl
 8004138:	00ca      	lsls	r2, r1, #3
 800413a:	4610      	mov	r0, r2
 800413c:	4619      	mov	r1, r3
 800413e:	4603      	mov	r3, r0
 8004140:	4642      	mov	r2, r8
 8004142:	189b      	adds	r3, r3, r2
 8004144:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004148:	464b      	mov	r3, r9
 800414a:	460a      	mov	r2, r1
 800414c:	eb42 0303 	adc.w	r3, r2, r3
 8004150:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	2200      	movs	r2, #0
 800415c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004160:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004164:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004168:	460b      	mov	r3, r1
 800416a:	18db      	adds	r3, r3, r3
 800416c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800416e:	4613      	mov	r3, r2
 8004170:	eb42 0303 	adc.w	r3, r2, r3
 8004174:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004176:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800417a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800417e:	f7fc f859 	bl	8000234 <__aeabi_uldivmod>
 8004182:	4602      	mov	r2, r0
 8004184:	460b      	mov	r3, r1
 8004186:	4b0d      	ldr	r3, [pc, #52]	@ (80041bc <UART_SetConfig+0x2d4>)
 8004188:	fba3 1302 	umull	r1, r3, r3, r2
 800418c:	095b      	lsrs	r3, r3, #5
 800418e:	2164      	movs	r1, #100	@ 0x64
 8004190:	fb01 f303 	mul.w	r3, r1, r3
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	00db      	lsls	r3, r3, #3
 8004198:	3332      	adds	r3, #50	@ 0x32
 800419a:	4a08      	ldr	r2, [pc, #32]	@ (80041bc <UART_SetConfig+0x2d4>)
 800419c:	fba2 2303 	umull	r2, r3, r2, r3
 80041a0:	095b      	lsrs	r3, r3, #5
 80041a2:	f003 0207 	and.w	r2, r3, #7
 80041a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4422      	add	r2, r4
 80041ae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80041b0:	e106      	b.n	80043c0 <UART_SetConfig+0x4d8>
 80041b2:	bf00      	nop
 80041b4:	40011000 	.word	0x40011000
 80041b8:	40011400 	.word	0x40011400
 80041bc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80041c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80041c4:	2200      	movs	r2, #0
 80041c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80041ca:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80041ce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80041d2:	4642      	mov	r2, r8
 80041d4:	464b      	mov	r3, r9
 80041d6:	1891      	adds	r1, r2, r2
 80041d8:	6239      	str	r1, [r7, #32]
 80041da:	415b      	adcs	r3, r3
 80041dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80041de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80041e2:	4641      	mov	r1, r8
 80041e4:	1854      	adds	r4, r2, r1
 80041e6:	4649      	mov	r1, r9
 80041e8:	eb43 0501 	adc.w	r5, r3, r1
 80041ec:	f04f 0200 	mov.w	r2, #0
 80041f0:	f04f 0300 	mov.w	r3, #0
 80041f4:	00eb      	lsls	r3, r5, #3
 80041f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041fa:	00e2      	lsls	r2, r4, #3
 80041fc:	4614      	mov	r4, r2
 80041fe:	461d      	mov	r5, r3
 8004200:	4643      	mov	r3, r8
 8004202:	18e3      	adds	r3, r4, r3
 8004204:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004208:	464b      	mov	r3, r9
 800420a:	eb45 0303 	adc.w	r3, r5, r3
 800420e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004212:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800421e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004222:	f04f 0200 	mov.w	r2, #0
 8004226:	f04f 0300 	mov.w	r3, #0
 800422a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800422e:	4629      	mov	r1, r5
 8004230:	008b      	lsls	r3, r1, #2
 8004232:	4621      	mov	r1, r4
 8004234:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004238:	4621      	mov	r1, r4
 800423a:	008a      	lsls	r2, r1, #2
 800423c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004240:	f7fb fff8 	bl	8000234 <__aeabi_uldivmod>
 8004244:	4602      	mov	r2, r0
 8004246:	460b      	mov	r3, r1
 8004248:	4b60      	ldr	r3, [pc, #384]	@ (80043cc <UART_SetConfig+0x4e4>)
 800424a:	fba3 2302 	umull	r2, r3, r3, r2
 800424e:	095b      	lsrs	r3, r3, #5
 8004250:	011c      	lsls	r4, r3, #4
 8004252:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004256:	2200      	movs	r2, #0
 8004258:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800425c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004260:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004264:	4642      	mov	r2, r8
 8004266:	464b      	mov	r3, r9
 8004268:	1891      	adds	r1, r2, r2
 800426a:	61b9      	str	r1, [r7, #24]
 800426c:	415b      	adcs	r3, r3
 800426e:	61fb      	str	r3, [r7, #28]
 8004270:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004274:	4641      	mov	r1, r8
 8004276:	1851      	adds	r1, r2, r1
 8004278:	6139      	str	r1, [r7, #16]
 800427a:	4649      	mov	r1, r9
 800427c:	414b      	adcs	r3, r1
 800427e:	617b      	str	r3, [r7, #20]
 8004280:	f04f 0200 	mov.w	r2, #0
 8004284:	f04f 0300 	mov.w	r3, #0
 8004288:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800428c:	4659      	mov	r1, fp
 800428e:	00cb      	lsls	r3, r1, #3
 8004290:	4651      	mov	r1, sl
 8004292:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004296:	4651      	mov	r1, sl
 8004298:	00ca      	lsls	r2, r1, #3
 800429a:	4610      	mov	r0, r2
 800429c:	4619      	mov	r1, r3
 800429e:	4603      	mov	r3, r0
 80042a0:	4642      	mov	r2, r8
 80042a2:	189b      	adds	r3, r3, r2
 80042a4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80042a8:	464b      	mov	r3, r9
 80042aa:	460a      	mov	r2, r1
 80042ac:	eb42 0303 	adc.w	r3, r2, r3
 80042b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80042b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	2200      	movs	r2, #0
 80042bc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80042be:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80042c0:	f04f 0200 	mov.w	r2, #0
 80042c4:	f04f 0300 	mov.w	r3, #0
 80042c8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80042cc:	4649      	mov	r1, r9
 80042ce:	008b      	lsls	r3, r1, #2
 80042d0:	4641      	mov	r1, r8
 80042d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80042d6:	4641      	mov	r1, r8
 80042d8:	008a      	lsls	r2, r1, #2
 80042da:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80042de:	f7fb ffa9 	bl	8000234 <__aeabi_uldivmod>
 80042e2:	4602      	mov	r2, r0
 80042e4:	460b      	mov	r3, r1
 80042e6:	4611      	mov	r1, r2
 80042e8:	4b38      	ldr	r3, [pc, #224]	@ (80043cc <UART_SetConfig+0x4e4>)
 80042ea:	fba3 2301 	umull	r2, r3, r3, r1
 80042ee:	095b      	lsrs	r3, r3, #5
 80042f0:	2264      	movs	r2, #100	@ 0x64
 80042f2:	fb02 f303 	mul.w	r3, r2, r3
 80042f6:	1acb      	subs	r3, r1, r3
 80042f8:	011b      	lsls	r3, r3, #4
 80042fa:	3332      	adds	r3, #50	@ 0x32
 80042fc:	4a33      	ldr	r2, [pc, #204]	@ (80043cc <UART_SetConfig+0x4e4>)
 80042fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004302:	095b      	lsrs	r3, r3, #5
 8004304:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004308:	441c      	add	r4, r3
 800430a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800430e:	2200      	movs	r2, #0
 8004310:	673b      	str	r3, [r7, #112]	@ 0x70
 8004312:	677a      	str	r2, [r7, #116]	@ 0x74
 8004314:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004318:	4642      	mov	r2, r8
 800431a:	464b      	mov	r3, r9
 800431c:	1891      	adds	r1, r2, r2
 800431e:	60b9      	str	r1, [r7, #8]
 8004320:	415b      	adcs	r3, r3
 8004322:	60fb      	str	r3, [r7, #12]
 8004324:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004328:	4641      	mov	r1, r8
 800432a:	1851      	adds	r1, r2, r1
 800432c:	6039      	str	r1, [r7, #0]
 800432e:	4649      	mov	r1, r9
 8004330:	414b      	adcs	r3, r1
 8004332:	607b      	str	r3, [r7, #4]
 8004334:	f04f 0200 	mov.w	r2, #0
 8004338:	f04f 0300 	mov.w	r3, #0
 800433c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004340:	4659      	mov	r1, fp
 8004342:	00cb      	lsls	r3, r1, #3
 8004344:	4651      	mov	r1, sl
 8004346:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800434a:	4651      	mov	r1, sl
 800434c:	00ca      	lsls	r2, r1, #3
 800434e:	4610      	mov	r0, r2
 8004350:	4619      	mov	r1, r3
 8004352:	4603      	mov	r3, r0
 8004354:	4642      	mov	r2, r8
 8004356:	189b      	adds	r3, r3, r2
 8004358:	66bb      	str	r3, [r7, #104]	@ 0x68
 800435a:	464b      	mov	r3, r9
 800435c:	460a      	mov	r2, r1
 800435e:	eb42 0303 	adc.w	r3, r2, r3
 8004362:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	2200      	movs	r2, #0
 800436c:	663b      	str	r3, [r7, #96]	@ 0x60
 800436e:	667a      	str	r2, [r7, #100]	@ 0x64
 8004370:	f04f 0200 	mov.w	r2, #0
 8004374:	f04f 0300 	mov.w	r3, #0
 8004378:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800437c:	4649      	mov	r1, r9
 800437e:	008b      	lsls	r3, r1, #2
 8004380:	4641      	mov	r1, r8
 8004382:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004386:	4641      	mov	r1, r8
 8004388:	008a      	lsls	r2, r1, #2
 800438a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800438e:	f7fb ff51 	bl	8000234 <__aeabi_uldivmod>
 8004392:	4602      	mov	r2, r0
 8004394:	460b      	mov	r3, r1
 8004396:	4b0d      	ldr	r3, [pc, #52]	@ (80043cc <UART_SetConfig+0x4e4>)
 8004398:	fba3 1302 	umull	r1, r3, r3, r2
 800439c:	095b      	lsrs	r3, r3, #5
 800439e:	2164      	movs	r1, #100	@ 0x64
 80043a0:	fb01 f303 	mul.w	r3, r1, r3
 80043a4:	1ad3      	subs	r3, r2, r3
 80043a6:	011b      	lsls	r3, r3, #4
 80043a8:	3332      	adds	r3, #50	@ 0x32
 80043aa:	4a08      	ldr	r2, [pc, #32]	@ (80043cc <UART_SetConfig+0x4e4>)
 80043ac:	fba2 2303 	umull	r2, r3, r2, r3
 80043b0:	095b      	lsrs	r3, r3, #5
 80043b2:	f003 020f 	and.w	r2, r3, #15
 80043b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4422      	add	r2, r4
 80043be:	609a      	str	r2, [r3, #8]
}
 80043c0:	bf00      	nop
 80043c2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80043c6:	46bd      	mov	sp, r7
 80043c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043cc:	51eb851f 	.word	0x51eb851f

080043d0 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80043d0:	b480      	push	{r7}
 80043d2:	b083      	sub	sp, #12
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	f103 0208 	add.w	r2, r3, #8
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	f04f 32ff 	mov.w	r2, #4294967295
 80043e8:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	f103 0208 	add.w	r2, r3, #8
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	f103 0208 	add.w	r2, r3, #8
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004404:	bf00      	nop
 8004406:	370c      	adds	r7, #12
 8004408:	46bd      	mov	sp, r7
 800440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440e:	4770      	bx	lr

08004410 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004410:	b480      	push	{r7}
 8004412:	b083      	sub	sp, #12
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2200      	movs	r2, #0
 800441c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800441e:	bf00      	nop
 8004420:	370c      	adds	r7, #12
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr

0800442a <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800442a:	b480      	push	{r7}
 800442c:	b085      	sub	sp, #20
 800442e:	af00      	add	r7, sp, #0
 8004430:	6078      	str	r0, [r7, #4]
 8004432:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004440:	d103      	bne.n	800444a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	691b      	ldr	r3, [r3, #16]
 8004446:	60fb      	str	r3, [r7, #12]
 8004448:	e00c      	b.n	8004464 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	3308      	adds	r3, #8
 800444e:	60fb      	str	r3, [r7, #12]
 8004450:	e002      	b.n	8004458 <vListInsert+0x2e>
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	60fb      	str	r3, [r7, #12]
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	68ba      	ldr	r2, [r7, #8]
 8004460:	429a      	cmp	r2, r3
 8004462:	d2f6      	bcs.n	8004452 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	685a      	ldr	r2, [r3, #4]
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	683a      	ldr	r2, [r7, #0]
 8004472:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	68fa      	ldr	r2, [r7, #12]
 8004478:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	683a      	ldr	r2, [r7, #0]
 800447e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	1c5a      	adds	r2, r3, #1
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	601a      	str	r2, [r3, #0]
}
 8004490:	bf00      	nop
 8004492:	3714      	adds	r7, #20
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr

0800449c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800449c:	b480      	push	{r7}
 800449e:	b085      	sub	sp, #20
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	691b      	ldr	r3, [r3, #16]
 80044a8:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	6892      	ldr	r2, [r2, #8]
 80044b2:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	687a      	ldr	r2, [r7, #4]
 80044ba:	6852      	ldr	r2, [r2, #4]
 80044bc:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d103      	bne.n	80044d0 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	689a      	ldr	r2, [r3, #8]
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	1e5a      	subs	r2, r3, #1
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	3714      	adds	r7, #20
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	4770      	bx	lr

080044f0 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b086      	sub	sp, #24
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80044fa:	2301      	movs	r3, #1
 80044fc:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d10b      	bne.n	8004520 <xQueueGenericReset+0x30>
        __asm volatile
 8004508:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800450c:	f383 8811 	msr	BASEPRI, r3
 8004510:	f3bf 8f6f 	isb	sy
 8004514:	f3bf 8f4f 	dsb	sy
 8004518:	60fb      	str	r3, [r7, #12]
    }
 800451a:	bf00      	nop
 800451c:	bf00      	nop
 800451e:	e7fd      	b.n	800451c <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d05d      	beq.n	80045e2 <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 800452a:	2b00      	cmp	r3, #0
 800452c:	d059      	beq.n	80045e2 <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004536:	2100      	movs	r1, #0
 8004538:	fba3 2302 	umull	r2, r3, r3, r2
 800453c:	2b00      	cmp	r3, #0
 800453e:	d000      	beq.n	8004542 <xQueueGenericReset+0x52>
 8004540:	2101      	movs	r1, #1
 8004542:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8004544:	2b00      	cmp	r3, #0
 8004546:	d14c      	bne.n	80045e2 <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
 8004548:	f002 fe48 	bl	80071dc <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004554:	6939      	ldr	r1, [r7, #16]
 8004556:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004558:	fb01 f303 	mul.w	r3, r1, r3
 800455c:	441a      	add	r2, r3
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	2200      	movs	r2, #0
 8004566:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004578:	3b01      	subs	r3, #1
 800457a:	6939      	ldr	r1, [r7, #16]
 800457c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800457e:	fb01 f303 	mul.w	r3, r1, r3
 8004582:	441a      	add	r2, r3
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	22ff      	movs	r2, #255	@ 0xff
 800458c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	22ff      	movs	r2, #255	@ 0xff
 8004594:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d114      	bne.n	80045c8 <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	691b      	ldr	r3, [r3, #16]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d01a      	beq.n	80045dc <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	3310      	adds	r3, #16
 80045aa:	4618      	mov	r0, r3
 80045ac:	f001 fb2e 	bl	8005c0c <xTaskRemoveFromEventList>
 80045b0:	4603      	mov	r3, r0
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d012      	beq.n	80045dc <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80045b6:	4b16      	ldr	r3, [pc, #88]	@ (8004610 <xQueueGenericReset+0x120>)
 80045b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80045bc:	601a      	str	r2, [r3, #0]
 80045be:	f3bf 8f4f 	dsb	sy
 80045c2:	f3bf 8f6f 	isb	sy
 80045c6:	e009      	b.n	80045dc <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	3310      	adds	r3, #16
 80045cc:	4618      	mov	r0, r3
 80045ce:	f7ff feff 	bl	80043d0 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	3324      	adds	r3, #36	@ 0x24
 80045d6:	4618      	mov	r0, r3
 80045d8:	f7ff fefa 	bl	80043d0 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80045dc:	f002 fe30 	bl	8007240 <vPortExitCritical>
 80045e0:	e001      	b.n	80045e6 <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
 80045e2:	2300      	movs	r3, #0
 80045e4:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d10b      	bne.n	8004604 <xQueueGenericReset+0x114>
        __asm volatile
 80045ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045f0:	f383 8811 	msr	BASEPRI, r3
 80045f4:	f3bf 8f6f 	isb	sy
 80045f8:	f3bf 8f4f 	dsb	sy
 80045fc:	60bb      	str	r3, [r7, #8]
    }
 80045fe:	bf00      	nop
 8004600:	bf00      	nop
 8004602:	e7fd      	b.n	8004600 <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8004604:	697b      	ldr	r3, [r7, #20]
}
 8004606:	4618      	mov	r0, r3
 8004608:	3718      	adds	r7, #24
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}
 800460e:	bf00      	nop
 8004610:	e000ed04 	.word	0xe000ed04

08004614 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8004614:	b580      	push	{r7, lr}
 8004616:	b08a      	sub	sp, #40	@ 0x28
 8004618:	af02      	add	r7, sp, #8
 800461a:	60f8      	str	r0, [r7, #12]
 800461c:	60b9      	str	r1, [r7, #8]
 800461e:	4613      	mov	r3, r2
 8004620:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8004622:	2300      	movs	r3, #0
 8004624:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d02e      	beq.n	800468a <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800462c:	2100      	movs	r1, #0
 800462e:	68ba      	ldr	r2, [r7, #8]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	fba3 2302 	umull	r2, r3, r3, r2
 8004636:	2b00      	cmp	r3, #0
 8004638:	d000      	beq.n	800463c <xQueueGenericCreate+0x28>
 800463a:	2101      	movs	r1, #1
 800463c:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800463e:	2b00      	cmp	r3, #0
 8004640:	d123      	bne.n	800468a <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	68ba      	ldr	r2, [r7, #8]
 8004646:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800464a:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 800464e:	d81c      	bhi.n	800468a <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	68ba      	ldr	r2, [r7, #8]
 8004654:	fb02 f303 	mul.w	r3, r2, r3
 8004658:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800465a:	69bb      	ldr	r3, [r7, #24]
 800465c:	3350      	adds	r3, #80	@ 0x50
 800465e:	4618      	mov	r0, r3
 8004660:	f002 fee6 	bl	8007430 <pvPortMalloc>
 8004664:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8004666:	69fb      	ldr	r3, [r7, #28]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d01d      	beq.n	80046a8 <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800466c:	69fb      	ldr	r3, [r7, #28]
 800466e:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	3350      	adds	r3, #80	@ 0x50
 8004674:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004676:	79fa      	ldrb	r2, [r7, #7]
 8004678:	69fb      	ldr	r3, [r7, #28]
 800467a:	9300      	str	r3, [sp, #0]
 800467c:	4613      	mov	r3, r2
 800467e:	697a      	ldr	r2, [r7, #20]
 8004680:	68b9      	ldr	r1, [r7, #8]
 8004682:	68f8      	ldr	r0, [r7, #12]
 8004684:	f000 f815 	bl	80046b2 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8004688:	e00e      	b.n	80046a8 <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800468a:	69fb      	ldr	r3, [r7, #28]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d10b      	bne.n	80046a8 <xQueueGenericCreate+0x94>
        __asm volatile
 8004690:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004694:	f383 8811 	msr	BASEPRI, r3
 8004698:	f3bf 8f6f 	isb	sy
 800469c:	f3bf 8f4f 	dsb	sy
 80046a0:	613b      	str	r3, [r7, #16]
    }
 80046a2:	bf00      	nop
 80046a4:	bf00      	nop
 80046a6:	e7fd      	b.n	80046a4 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80046a8:	69fb      	ldr	r3, [r7, #28]
    }
 80046aa:	4618      	mov	r0, r3
 80046ac:	3720      	adds	r7, #32
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}

080046b2 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80046b2:	b580      	push	{r7, lr}
 80046b4:	b084      	sub	sp, #16
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	60f8      	str	r0, [r7, #12]
 80046ba:	60b9      	str	r1, [r7, #8]
 80046bc:	607a      	str	r2, [r7, #4]
 80046be:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d103      	bne.n	80046ce <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80046c6:	69bb      	ldr	r3, [r7, #24]
 80046c8:	69ba      	ldr	r2, [r7, #24]
 80046ca:	601a      	str	r2, [r3, #0]
 80046cc:	e002      	b.n	80046d4 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80046ce:	69bb      	ldr	r3, [r7, #24]
 80046d0:	687a      	ldr	r2, [r7, #4]
 80046d2:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80046d4:	69bb      	ldr	r3, [r7, #24]
 80046d6:	68fa      	ldr	r2, [r7, #12]
 80046d8:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80046da:	69bb      	ldr	r3, [r7, #24]
 80046dc:	68ba      	ldr	r2, [r7, #8]
 80046de:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80046e0:	2101      	movs	r1, #1
 80046e2:	69b8      	ldr	r0, [r7, #24]
 80046e4:	f7ff ff04 	bl	80044f0 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 80046e8:	69bb      	ldr	r3, [r7, #24]
 80046ea:	78fa      	ldrb	r2, [r7, #3]
 80046ec:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80046f0:	bf00      	nop
 80046f2:	3710      	adds	r7, #16
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}

080046f8 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b08e      	sub	sp, #56	@ 0x38
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	60f8      	str	r0, [r7, #12]
 8004700:	60b9      	str	r1, [r7, #8]
 8004702:	607a      	str	r2, [r7, #4]
 8004704:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004706:	2300      	movs	r3, #0
 8004708:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	633b      	str	r3, [r7, #48]	@ 0x30

    configASSERT( pxQueue );
 800470e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004710:	2b00      	cmp	r3, #0
 8004712:	d10b      	bne.n	800472c <xQueueGenericSend+0x34>
        __asm volatile
 8004714:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004718:	f383 8811 	msr	BASEPRI, r3
 800471c:	f3bf 8f6f 	isb	sy
 8004720:	f3bf 8f4f 	dsb	sy
 8004724:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8004726:	bf00      	nop
 8004728:	bf00      	nop
 800472a:	e7fd      	b.n	8004728 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d103      	bne.n	800473a <xQueueGenericSend+0x42>
 8004732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004736:	2b00      	cmp	r3, #0
 8004738:	d101      	bne.n	800473e <xQueueGenericSend+0x46>
 800473a:	2301      	movs	r3, #1
 800473c:	e000      	b.n	8004740 <xQueueGenericSend+0x48>
 800473e:	2300      	movs	r3, #0
 8004740:	2b00      	cmp	r3, #0
 8004742:	d10b      	bne.n	800475c <xQueueGenericSend+0x64>
        __asm volatile
 8004744:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004748:	f383 8811 	msr	BASEPRI, r3
 800474c:	f3bf 8f6f 	isb	sy
 8004750:	f3bf 8f4f 	dsb	sy
 8004754:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8004756:	bf00      	nop
 8004758:	bf00      	nop
 800475a:	e7fd      	b.n	8004758 <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	2b02      	cmp	r3, #2
 8004760:	d103      	bne.n	800476a <xQueueGenericSend+0x72>
 8004762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004764:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004766:	2b01      	cmp	r3, #1
 8004768:	d101      	bne.n	800476e <xQueueGenericSend+0x76>
 800476a:	2301      	movs	r3, #1
 800476c:	e000      	b.n	8004770 <xQueueGenericSend+0x78>
 800476e:	2300      	movs	r3, #0
 8004770:	2b00      	cmp	r3, #0
 8004772:	d10b      	bne.n	800478c <xQueueGenericSend+0x94>
        __asm volatile
 8004774:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004778:	f383 8811 	msr	BASEPRI, r3
 800477c:	f3bf 8f6f 	isb	sy
 8004780:	f3bf 8f4f 	dsb	sy
 8004784:	623b      	str	r3, [r7, #32]
    }
 8004786:	bf00      	nop
 8004788:	bf00      	nop
 800478a:	e7fd      	b.n	8004788 <xQueueGenericSend+0x90>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800478c:	f001 fc52 	bl	8006034 <xTaskGetSchedulerState>
 8004790:	4603      	mov	r3, r0
 8004792:	2b00      	cmp	r3, #0
 8004794:	d102      	bne.n	800479c <xQueueGenericSend+0xa4>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d101      	bne.n	80047a0 <xQueueGenericSend+0xa8>
 800479c:	2301      	movs	r3, #1
 800479e:	e000      	b.n	80047a2 <xQueueGenericSend+0xaa>
 80047a0:	2300      	movs	r3, #0
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d10b      	bne.n	80047be <xQueueGenericSend+0xc6>
        __asm volatile
 80047a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047aa:	f383 8811 	msr	BASEPRI, r3
 80047ae:	f3bf 8f6f 	isb	sy
 80047b2:	f3bf 8f4f 	dsb	sy
 80047b6:	61fb      	str	r3, [r7, #28]
    }
 80047b8:	bf00      	nop
 80047ba:	bf00      	nop
 80047bc:	e7fd      	b.n	80047ba <xQueueGenericSend+0xc2>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80047be:	f002 fd0d 	bl	80071dc <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80047c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80047c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047ca:	429a      	cmp	r2, r3
 80047cc:	d302      	bcc.n	80047d4 <xQueueGenericSend+0xdc>
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	2b02      	cmp	r3, #2
 80047d2:	d129      	bne.n	8004828 <xQueueGenericSend+0x130>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80047d4:	683a      	ldr	r2, [r7, #0]
 80047d6:	68b9      	ldr	r1, [r7, #8]
 80047d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80047da:	f000 fae0 	bl	8004d9e <prvCopyDataToQueue>
 80047de:	62f8      	str	r0, [r7, #44]	@ 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80047e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d010      	beq.n	800480a <xQueueGenericSend+0x112>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80047e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047ea:	3324      	adds	r3, #36	@ 0x24
 80047ec:	4618      	mov	r0, r3
 80047ee:	f001 fa0d 	bl	8005c0c <xTaskRemoveFromEventList>
 80047f2:	4603      	mov	r3, r0
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d013      	beq.n	8004820 <xQueueGenericSend+0x128>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 80047f8:	4b3f      	ldr	r3, [pc, #252]	@ (80048f8 <xQueueGenericSend+0x200>)
 80047fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80047fe:	601a      	str	r2, [r3, #0]
 8004800:	f3bf 8f4f 	dsb	sy
 8004804:	f3bf 8f6f 	isb	sy
 8004808:	e00a      	b.n	8004820 <xQueueGenericSend+0x128>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 800480a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800480c:	2b00      	cmp	r3, #0
 800480e:	d007      	beq.n	8004820 <xQueueGenericSend+0x128>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8004810:	4b39      	ldr	r3, [pc, #228]	@ (80048f8 <xQueueGenericSend+0x200>)
 8004812:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004816:	601a      	str	r2, [r3, #0]
 8004818:	f3bf 8f4f 	dsb	sy
 800481c:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8004820:	f002 fd0e 	bl	8007240 <vPortExitCritical>
                return pdPASS;
 8004824:	2301      	movs	r3, #1
 8004826:	e063      	b.n	80048f0 <xQueueGenericSend+0x1f8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d103      	bne.n	8004836 <xQueueGenericSend+0x13e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800482e:	f002 fd07 	bl	8007240 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8004832:	2300      	movs	r3, #0
 8004834:	e05c      	b.n	80048f0 <xQueueGenericSend+0x1f8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8004836:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004838:	2b00      	cmp	r3, #0
 800483a:	d106      	bne.n	800484a <xQueueGenericSend+0x152>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800483c:	f107 0314 	add.w	r3, r7, #20
 8004840:	4618      	mov	r0, r3
 8004842:	f001 fabb 	bl	8005dbc <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8004846:	2301      	movs	r3, #1
 8004848:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800484a:	f002 fcf9 	bl	8007240 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800484e:	f000 fed7 	bl	8005600 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8004852:	f002 fcc3 	bl	80071dc <vPortEnterCritical>
 8004856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004858:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800485c:	b25b      	sxtb	r3, r3
 800485e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004862:	d103      	bne.n	800486c <xQueueGenericSend+0x174>
 8004864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004866:	2200      	movs	r2, #0
 8004868:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800486c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800486e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004872:	b25b      	sxtb	r3, r3
 8004874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004878:	d103      	bne.n	8004882 <xQueueGenericSend+0x18a>
 800487a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800487c:	2200      	movs	r2, #0
 800487e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004882:	f002 fcdd 	bl	8007240 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004886:	1d3a      	adds	r2, r7, #4
 8004888:	f107 0314 	add.w	r3, r7, #20
 800488c:	4611      	mov	r1, r2
 800488e:	4618      	mov	r0, r3
 8004890:	f001 faaa 	bl	8005de8 <xTaskCheckForTimeOut>
 8004894:	4603      	mov	r3, r0
 8004896:	2b00      	cmp	r3, #0
 8004898:	d124      	bne.n	80048e4 <xQueueGenericSend+0x1ec>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800489a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800489c:	f000 fb77 	bl	8004f8e <prvIsQueueFull>
 80048a0:	4603      	mov	r3, r0
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d018      	beq.n	80048d8 <xQueueGenericSend+0x1e0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80048a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048a8:	3310      	adds	r3, #16
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	4611      	mov	r1, r2
 80048ae:	4618      	mov	r0, r3
 80048b0:	f001 f940 	bl	8005b34 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80048b4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80048b6:	f000 fb02 	bl	8004ebe <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80048ba:	f000 feaf 	bl	800561c <xTaskResumeAll>
 80048be:	4603      	mov	r3, r0
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	f47f af7c 	bne.w	80047be <xQueueGenericSend+0xc6>
                {
                    portYIELD_WITHIN_API();
 80048c6:	4b0c      	ldr	r3, [pc, #48]	@ (80048f8 <xQueueGenericSend+0x200>)
 80048c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80048cc:	601a      	str	r2, [r3, #0]
 80048ce:	f3bf 8f4f 	dsb	sy
 80048d2:	f3bf 8f6f 	isb	sy
 80048d6:	e772      	b.n	80047be <xQueueGenericSend+0xc6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80048d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80048da:	f000 faf0 	bl	8004ebe <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80048de:	f000 fe9d 	bl	800561c <xTaskResumeAll>
 80048e2:	e76c      	b.n	80047be <xQueueGenericSend+0xc6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80048e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80048e6:	f000 faea 	bl	8004ebe <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80048ea:	f000 fe97 	bl	800561c <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 80048ee:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3738      	adds	r7, #56	@ 0x38
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}
 80048f8:	e000ed04 	.word	0xe000ed04

080048fc <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b092      	sub	sp, #72	@ 0x48
 8004900:	af00      	add	r7, sp, #0
 8004902:	60f8      	str	r0, [r7, #12]
 8004904:	60b9      	str	r1, [r7, #8]
 8004906:	607a      	str	r2, [r7, #4]
 8004908:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	643b      	str	r3, [r7, #64]	@ 0x40

    configASSERT( pxQueue );
 800490e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004910:	2b00      	cmp	r3, #0
 8004912:	d10b      	bne.n	800492c <xQueueGenericSendFromISR+0x30>
        __asm volatile
 8004914:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004918:	f383 8811 	msr	BASEPRI, r3
 800491c:	f3bf 8f6f 	isb	sy
 8004920:	f3bf 8f4f 	dsb	sy
 8004924:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
 8004926:	bf00      	nop
 8004928:	bf00      	nop
 800492a:	e7fd      	b.n	8004928 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d103      	bne.n	800493a <xQueueGenericSendFromISR+0x3e>
 8004932:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004936:	2b00      	cmp	r3, #0
 8004938:	d101      	bne.n	800493e <xQueueGenericSendFromISR+0x42>
 800493a:	2301      	movs	r3, #1
 800493c:	e000      	b.n	8004940 <xQueueGenericSendFromISR+0x44>
 800493e:	2300      	movs	r3, #0
 8004940:	2b00      	cmp	r3, #0
 8004942:	d10b      	bne.n	800495c <xQueueGenericSendFromISR+0x60>
        __asm volatile
 8004944:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004948:	f383 8811 	msr	BASEPRI, r3
 800494c:	f3bf 8f6f 	isb	sy
 8004950:	f3bf 8f4f 	dsb	sy
 8004954:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8004956:	bf00      	nop
 8004958:	bf00      	nop
 800495a:	e7fd      	b.n	8004958 <xQueueGenericSendFromISR+0x5c>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	2b02      	cmp	r3, #2
 8004960:	d103      	bne.n	800496a <xQueueGenericSendFromISR+0x6e>
 8004962:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004964:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004966:	2b01      	cmp	r3, #1
 8004968:	d101      	bne.n	800496e <xQueueGenericSendFromISR+0x72>
 800496a:	2301      	movs	r3, #1
 800496c:	e000      	b.n	8004970 <xQueueGenericSendFromISR+0x74>
 800496e:	2300      	movs	r3, #0
 8004970:	2b00      	cmp	r3, #0
 8004972:	d10b      	bne.n	800498c <xQueueGenericSendFromISR+0x90>
        __asm volatile
 8004974:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004978:	f383 8811 	msr	BASEPRI, r3
 800497c:	f3bf 8f6f 	isb	sy
 8004980:	f3bf 8f4f 	dsb	sy
 8004984:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8004986:	bf00      	nop
 8004988:	bf00      	nop
 800498a:	e7fd      	b.n	8004988 <xQueueGenericSendFromISR+0x8c>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800498c:	f002 fd0e 	bl	80073ac <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8004990:	f3ef 8211 	mrs	r2, BASEPRI
 8004994:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004998:	f383 8811 	msr	BASEPRI, r3
 800499c:	f3bf 8f6f 	isb	sy
 80049a0:	f3bf 8f4f 	dsb	sy
 80049a4:	623a      	str	r2, [r7, #32]
 80049a6:	61fb      	str	r3, [r7, #28]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 80049a8:	6a3b      	ldr	r3, [r7, #32]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80049aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80049ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80049ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80049b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80049b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d302      	bcc.n	80049be <xQueueGenericSendFromISR+0xc2>
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	2b02      	cmp	r3, #2
 80049bc:	d147      	bne.n	8004a4e <xQueueGenericSendFromISR+0x152>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80049be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80049c0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80049c4:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80049c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80049ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049cc:	637b      	str	r3, [r7, #52]	@ 0x34
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80049ce:	683a      	ldr	r2, [r7, #0]
 80049d0:	68b9      	ldr	r1, [r7, #8]
 80049d2:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80049d4:	f000 f9e3 	bl	8004d9e <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 80049d8:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 80049dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049e0:	d112      	bne.n	8004a08 <xQueueGenericSendFromISR+0x10c>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80049e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80049e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d02e      	beq.n	8004a48 <xQueueGenericSendFromISR+0x14c>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80049ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80049ec:	3324      	adds	r3, #36	@ 0x24
 80049ee:	4618      	mov	r0, r3
 80049f0:	f001 f90c 	bl	8005c0c <xTaskRemoveFromEventList>
 80049f4:	4603      	mov	r3, r0
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d026      	beq.n	8004a48 <xQueueGenericSendFromISR+0x14c>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d023      	beq.n	8004a48 <xQueueGenericSendFromISR+0x14c>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2201      	movs	r2, #1
 8004a04:	601a      	str	r2, [r3, #0]
 8004a06:	e01f      	b.n	8004a48 <xQueueGenericSendFromISR+0x14c>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 8004a08:	f000 ff14 	bl	8005834 <uxTaskGetNumberOfTasks>
 8004a0c:	6338      	str	r0, [r7, #48]	@ 0x30
 8004a0e:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8004a12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d917      	bls.n	8004a48 <xQueueGenericSendFromISR+0x14c>
 8004a18:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8004a1c:	2b7f      	cmp	r3, #127	@ 0x7f
 8004a1e:	d10b      	bne.n	8004a38 <xQueueGenericSendFromISR+0x13c>
        __asm volatile
 8004a20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a24:	f383 8811 	msr	BASEPRI, r3
 8004a28:	f3bf 8f6f 	isb	sy
 8004a2c:	f3bf 8f4f 	dsb	sy
 8004a30:	61bb      	str	r3, [r7, #24]
    }
 8004a32:	bf00      	nop
 8004a34:	bf00      	nop
 8004a36:	e7fd      	b.n	8004a34 <xQueueGenericSendFromISR+0x138>
 8004a38:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8004a3c:	3301      	adds	r3, #1
 8004a3e:	b2db      	uxtb	r3, r3
 8004a40:	b25a      	sxtb	r2, r3
 8004a42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	647b      	str	r3, [r7, #68]	@ 0x44
        {
 8004a4c:	e001      	b.n	8004a52 <xQueueGenericSendFromISR+0x156>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a54:	617b      	str	r3, [r7, #20]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8004a5c:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8004a5e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	3748      	adds	r7, #72	@ 0x48
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}

08004a68 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b08c      	sub	sp, #48	@ 0x30
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	60f8      	str	r0, [r7, #12]
 8004a70:	60b9      	str	r1, [r7, #8]
 8004a72:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8004a74:	2300      	movs	r3, #0
 8004a76:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8004a7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d10b      	bne.n	8004a9a <xQueueReceive+0x32>
        __asm volatile
 8004a82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a86:	f383 8811 	msr	BASEPRI, r3
 8004a8a:	f3bf 8f6f 	isb	sy
 8004a8e:	f3bf 8f4f 	dsb	sy
 8004a92:	623b      	str	r3, [r7, #32]
    }
 8004a94:	bf00      	nop
 8004a96:	bf00      	nop
 8004a98:	e7fd      	b.n	8004a96 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d103      	bne.n	8004aa8 <xQueueReceive+0x40>
 8004aa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004aa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d101      	bne.n	8004aac <xQueueReceive+0x44>
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	e000      	b.n	8004aae <xQueueReceive+0x46>
 8004aac:	2300      	movs	r3, #0
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d10b      	bne.n	8004aca <xQueueReceive+0x62>
        __asm volatile
 8004ab2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ab6:	f383 8811 	msr	BASEPRI, r3
 8004aba:	f3bf 8f6f 	isb	sy
 8004abe:	f3bf 8f4f 	dsb	sy
 8004ac2:	61fb      	str	r3, [r7, #28]
    }
 8004ac4:	bf00      	nop
 8004ac6:	bf00      	nop
 8004ac8:	e7fd      	b.n	8004ac6 <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004aca:	f001 fab3 	bl	8006034 <xTaskGetSchedulerState>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d102      	bne.n	8004ada <xQueueReceive+0x72>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d101      	bne.n	8004ade <xQueueReceive+0x76>
 8004ada:	2301      	movs	r3, #1
 8004adc:	e000      	b.n	8004ae0 <xQueueReceive+0x78>
 8004ade:	2300      	movs	r3, #0
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d10b      	bne.n	8004afc <xQueueReceive+0x94>
        __asm volatile
 8004ae4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ae8:	f383 8811 	msr	BASEPRI, r3
 8004aec:	f3bf 8f6f 	isb	sy
 8004af0:	f3bf 8f4f 	dsb	sy
 8004af4:	61bb      	str	r3, [r7, #24]
    }
 8004af6:	bf00      	nop
 8004af8:	bf00      	nop
 8004afa:	e7fd      	b.n	8004af8 <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8004afc:	f002 fb6e 	bl	80071dc <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004b00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b04:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d01f      	beq.n	8004b4c <xQueueReceive+0xe4>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004b0c:	68b9      	ldr	r1, [r7, #8]
 8004b0e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004b10:	f000 f9af 	bl	8004e72 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b16:	1e5a      	subs	r2, r3, #1
 8004b18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b1a:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b1e:	691b      	ldr	r3, [r3, #16]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d00f      	beq.n	8004b44 <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b26:	3310      	adds	r3, #16
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f001 f86f 	bl	8005c0c <xTaskRemoveFromEventList>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d007      	beq.n	8004b44 <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8004b34:	4b3c      	ldr	r3, [pc, #240]	@ (8004c28 <xQueueReceive+0x1c0>)
 8004b36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b3a:	601a      	str	r2, [r3, #0]
 8004b3c:	f3bf 8f4f 	dsb	sy
 8004b40:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8004b44:	f002 fb7c 	bl	8007240 <vPortExitCritical>
                return pdPASS;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	e069      	b.n	8004c20 <xQueueReceive+0x1b8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d103      	bne.n	8004b5a <xQueueReceive+0xf2>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8004b52:	f002 fb75 	bl	8007240 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8004b56:	2300      	movs	r3, #0
 8004b58:	e062      	b.n	8004c20 <xQueueReceive+0x1b8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8004b5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d106      	bne.n	8004b6e <xQueueReceive+0x106>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8004b60:	f107 0310 	add.w	r3, r7, #16
 8004b64:	4618      	mov	r0, r3
 8004b66:	f001 f929 	bl	8005dbc <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8004b6e:	f002 fb67 	bl	8007240 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8004b72:	f000 fd45 	bl	8005600 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8004b76:	f002 fb31 	bl	80071dc <vPortEnterCritical>
 8004b7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b7c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004b80:	b25b      	sxtb	r3, r3
 8004b82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b86:	d103      	bne.n	8004b90 <xQueueReceive+0x128>
 8004b88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b92:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004b96:	b25b      	sxtb	r3, r3
 8004b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b9c:	d103      	bne.n	8004ba6 <xQueueReceive+0x13e>
 8004b9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004ba6:	f002 fb4b 	bl	8007240 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004baa:	1d3a      	adds	r2, r7, #4
 8004bac:	f107 0310 	add.w	r3, r7, #16
 8004bb0:	4611      	mov	r1, r2
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f001 f918 	bl	8005de8 <xTaskCheckForTimeOut>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d123      	bne.n	8004c06 <xQueueReceive+0x19e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004bbe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004bc0:	f000 f9cf 	bl	8004f62 <prvIsQueueEmpty>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d017      	beq.n	8004bfa <xQueueReceive+0x192>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004bca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bcc:	3324      	adds	r3, #36	@ 0x24
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	4611      	mov	r1, r2
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f000 ffae 	bl	8005b34 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8004bd8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004bda:	f000 f970 	bl	8004ebe <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8004bde:	f000 fd1d 	bl	800561c <xTaskResumeAll>
 8004be2:	4603      	mov	r3, r0
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d189      	bne.n	8004afc <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 8004be8:	4b0f      	ldr	r3, [pc, #60]	@ (8004c28 <xQueueReceive+0x1c0>)
 8004bea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004bee:	601a      	str	r2, [r3, #0]
 8004bf0:	f3bf 8f4f 	dsb	sy
 8004bf4:	f3bf 8f6f 	isb	sy
 8004bf8:	e780      	b.n	8004afc <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8004bfa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004bfc:	f000 f95f 	bl	8004ebe <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8004c00:	f000 fd0c 	bl	800561c <xTaskResumeAll>
 8004c04:	e77a      	b.n	8004afc <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8004c06:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004c08:	f000 f959 	bl	8004ebe <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8004c0c:	f000 fd06 	bl	800561c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004c10:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004c12:	f000 f9a6 	bl	8004f62 <prvIsQueueEmpty>
 8004c16:	4603      	mov	r3, r0
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	f43f af6f 	beq.w	8004afc <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8004c1e:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	3730      	adds	r7, #48	@ 0x30
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}
 8004c28:	e000ed04 	.word	0xe000ed04

08004c2c <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b090      	sub	sp, #64	@ 0x40
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	60f8      	str	r0, [r7, #12]
 8004c34:	60b9      	str	r1, [r7, #8]
 8004c36:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	63bb      	str	r3, [r7, #56]	@ 0x38

    configASSERT( pxQueue );
 8004c3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d10b      	bne.n	8004c5a <xQueueReceiveFromISR+0x2e>
        __asm volatile
 8004c42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c46:	f383 8811 	msr	BASEPRI, r3
 8004c4a:	f3bf 8f6f 	isb	sy
 8004c4e:	f3bf 8f4f 	dsb	sy
 8004c52:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8004c54:	bf00      	nop
 8004c56:	bf00      	nop
 8004c58:	e7fd      	b.n	8004c56 <xQueueReceiveFromISR+0x2a>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d103      	bne.n	8004c68 <xQueueReceiveFromISR+0x3c>
 8004c60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d101      	bne.n	8004c6c <xQueueReceiveFromISR+0x40>
 8004c68:	2301      	movs	r3, #1
 8004c6a:	e000      	b.n	8004c6e <xQueueReceiveFromISR+0x42>
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d10b      	bne.n	8004c8a <xQueueReceiveFromISR+0x5e>
        __asm volatile
 8004c72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c76:	f383 8811 	msr	BASEPRI, r3
 8004c7a:	f3bf 8f6f 	isb	sy
 8004c7e:	f3bf 8f4f 	dsb	sy
 8004c82:	623b      	str	r3, [r7, #32]
    }
 8004c84:	bf00      	nop
 8004c86:	bf00      	nop
 8004c88:	e7fd      	b.n	8004c86 <xQueueReceiveFromISR+0x5a>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004c8a:	f002 fb8f 	bl	80073ac <vPortValidateInterruptPriority>
        __asm volatile
 8004c8e:	f3ef 8211 	mrs	r2, BASEPRI
 8004c92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c96:	f383 8811 	msr	BASEPRI, r3
 8004c9a:	f3bf 8f6f 	isb	sy
 8004c9e:	f3bf 8f4f 	dsb	sy
 8004ca2:	61fa      	str	r2, [r7, #28]
 8004ca4:	61bb      	str	r3, [r7, #24]
        return ulOriginalBASEPRI;
 8004ca6:	69fb      	ldr	r3, [r7, #28]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004ca8:	637b      	str	r3, [r7, #52]	@ 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004caa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cae:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004cb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d047      	beq.n	8004d46 <xQueueReceiveFromISR+0x11a>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 8004cb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cb8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004cbc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004cc0:	68b9      	ldr	r1, [r7, #8]
 8004cc2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004cc4:	f000 f8d5 	bl	8004e72 <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004cc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cca:	1e5a      	subs	r2, r3, #1
 8004ccc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cce:	639a      	str	r2, [r3, #56]	@ 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 8004cd0:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8004cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cd8:	d112      	bne.n	8004d00 <xQueueReceiveFromISR+0xd4>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004cda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cdc:	691b      	ldr	r3, [r3, #16]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d02e      	beq.n	8004d40 <xQueueReceiveFromISR+0x114>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ce2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ce4:	3310      	adds	r3, #16
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f000 ff90 	bl	8005c0c <xTaskRemoveFromEventList>
 8004cec:	4603      	mov	r3, r0
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d026      	beq.n	8004d40 <xQueueReceiveFromISR+0x114>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d023      	beq.n	8004d40 <xQueueReceiveFromISR+0x114>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	601a      	str	r2, [r3, #0]
 8004cfe:	e01f      	b.n	8004d40 <xQueueReceiveFromISR+0x114>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                prvIncrementQueueRxLock( pxQueue, cRxLock );
 8004d00:	f000 fd98 	bl	8005834 <uxTaskGetNumberOfTasks>
 8004d04:	62b8      	str	r0, [r7, #40]	@ 0x28
 8004d06:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8004d0a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d917      	bls.n	8004d40 <xQueueReceiveFromISR+0x114>
 8004d10:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8004d14:	2b7f      	cmp	r3, #127	@ 0x7f
 8004d16:	d10b      	bne.n	8004d30 <xQueueReceiveFromISR+0x104>
        __asm volatile
 8004d18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d1c:	f383 8811 	msr	BASEPRI, r3
 8004d20:	f3bf 8f6f 	isb	sy
 8004d24:	f3bf 8f4f 	dsb	sy
 8004d28:	617b      	str	r3, [r7, #20]
    }
 8004d2a:	bf00      	nop
 8004d2c:	bf00      	nop
 8004d2e:	e7fd      	b.n	8004d2c <xQueueReceiveFromISR+0x100>
 8004d30:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004d34:	3301      	adds	r3, #1
 8004d36:	b2db      	uxtb	r3, r3
 8004d38:	b25a      	sxtb	r2, r3
 8004d3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            }

            xReturn = pdPASS;
 8004d40:	2301      	movs	r3, #1
 8004d42:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d44:	e001      	b.n	8004d4a <xQueueReceiveFromISR+0x11e>
        }
        else
        {
            xReturn = pdFAIL;
 8004d46:	2300      	movs	r3, #0
 8004d48:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d4c:	613b      	str	r3, [r7, #16]
        __asm volatile
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	f383 8811 	msr	BASEPRI, r3
    }
 8004d54:	bf00      	nop
            traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8004d56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	3740      	adds	r7, #64	@ 0x40
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}

08004d60 <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b084      	sub	sp, #16
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    configASSERT( xQueue );
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d10b      	bne.n	8004d86 <uxQueueMessagesWaiting+0x26>
        __asm volatile
 8004d6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d72:	f383 8811 	msr	BASEPRI, r3
 8004d76:	f3bf 8f6f 	isb	sy
 8004d7a:	f3bf 8f4f 	dsb	sy
 8004d7e:	60bb      	str	r3, [r7, #8]
    }
 8004d80:	bf00      	nop
 8004d82:	bf00      	nop
 8004d84:	e7fd      	b.n	8004d82 <uxQueueMessagesWaiting+0x22>

    taskENTER_CRITICAL();
 8004d86:	f002 fa29 	bl	80071dc <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d8e:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 8004d90:	f002 fa56 	bl	8007240 <vPortExitCritical>

    return uxReturn;
 8004d94:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8004d96:	4618      	mov	r0, r3
 8004d98:	3710      	adds	r7, #16
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}

08004d9e <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8004d9e:	b580      	push	{r7, lr}
 8004da0:	b086      	sub	sp, #24
 8004da2:	af00      	add	r7, sp, #0
 8004da4:	60f8      	str	r0, [r7, #12]
 8004da6:	60b9      	str	r1, [r7, #8]
 8004da8:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8004daa:	2300      	movs	r3, #0
 8004dac:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004db2:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d10d      	bne.n	8004dd8 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d14d      	bne.n	8004e60 <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f001 f951 	bl	8006070 <xTaskPriorityDisinherit>
 8004dce:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	609a      	str	r2, [r3, #8]
 8004dd6:	e043      	b.n	8004e60 <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d119      	bne.n	8004e12 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	6858      	ldr	r0, [r3, #4]
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004de6:	461a      	mov	r2, r3
 8004de8:	68b9      	ldr	r1, [r7, #8]
 8004dea:	f002 fd1d 	bl	8007828 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	685a      	ldr	r2, [r3, #4]
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004df6:	441a      	add	r2, r3
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	685a      	ldr	r2, [r3, #4]
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d32b      	bcc.n	8004e60 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	605a      	str	r2, [r3, #4]
 8004e10:	e026      	b.n	8004e60 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	68d8      	ldr	r0, [r3, #12]
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e1a:	461a      	mov	r2, r3
 8004e1c:	68b9      	ldr	r1, [r7, #8]
 8004e1e:	f002 fd03 	bl	8007828 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	68da      	ldr	r2, [r3, #12]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e2a:	425b      	negs	r3, r3
 8004e2c:	441a      	add	r2, r3
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	68da      	ldr	r2, [r3, #12]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	d207      	bcs.n	8004e4e <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	689a      	ldr	r2, [r3, #8]
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e46:	425b      	negs	r3, r3
 8004e48:	441a      	add	r2, r3
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2b02      	cmp	r3, #2
 8004e52:	d105      	bne.n	8004e60 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d002      	beq.n	8004e60 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	3b01      	subs	r3, #1
 8004e5e:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	1c5a      	adds	r2, r3, #1
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8004e68:	697b      	ldr	r3, [r7, #20]
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3718      	adds	r7, #24
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}

08004e72 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8004e72:	b580      	push	{r7, lr}
 8004e74:	b082      	sub	sp, #8
 8004e76:	af00      	add	r7, sp, #0
 8004e78:	6078      	str	r0, [r7, #4]
 8004e7a:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d018      	beq.n	8004eb6 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	68da      	ldr	r2, [r3, #12]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e8c:	441a      	add	r2, r3
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	68da      	ldr	r2, [r3, #12]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	d303      	bcc.n	8004ea6 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	68d9      	ldr	r1, [r3, #12]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eae:	461a      	mov	r2, r3
 8004eb0:	6838      	ldr	r0, [r7, #0]
 8004eb2:	f002 fcb9 	bl	8007828 <memcpy>
    }
}
 8004eb6:	bf00      	nop
 8004eb8:	3708      	adds	r7, #8
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}

08004ebe <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004ebe:	b580      	push	{r7, lr}
 8004ec0:	b084      	sub	sp, #16
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8004ec6:	f002 f989 	bl	80071dc <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004ed0:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8004ed2:	e011      	b.n	8004ef8 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d012      	beq.n	8004f02 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	3324      	adds	r3, #36	@ 0x24
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f000 fe93 	bl	8005c0c <xTaskRemoveFromEventList>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d001      	beq.n	8004ef0 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8004eec:	f000 ffe4 	bl	8005eb8 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8004ef0:	7bfb      	ldrb	r3, [r7, #15]
 8004ef2:	3b01      	subs	r3, #1
 8004ef4:	b2db      	uxtb	r3, r3
 8004ef6:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8004ef8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	dce9      	bgt.n	8004ed4 <prvUnlockQueue+0x16>
 8004f00:	e000      	b.n	8004f04 <prvUnlockQueue+0x46>
                    break;
 8004f02:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	22ff      	movs	r2, #255	@ 0xff
 8004f08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8004f0c:	f002 f998 	bl	8007240 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8004f10:	f002 f964 	bl	80071dc <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004f1a:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8004f1c:	e011      	b.n	8004f42 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	691b      	ldr	r3, [r3, #16]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d012      	beq.n	8004f4c <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	3310      	adds	r3, #16
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f000 fe6e 	bl	8005c0c <xTaskRemoveFromEventList>
 8004f30:	4603      	mov	r3, r0
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d001      	beq.n	8004f3a <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8004f36:	f000 ffbf 	bl	8005eb8 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8004f3a:	7bbb      	ldrb	r3, [r7, #14]
 8004f3c:	3b01      	subs	r3, #1
 8004f3e:	b2db      	uxtb	r3, r3
 8004f40:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8004f42:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	dce9      	bgt.n	8004f1e <prvUnlockQueue+0x60>
 8004f4a:	e000      	b.n	8004f4e <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8004f4c:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	22ff      	movs	r2, #255	@ 0xff
 8004f52:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8004f56:	f002 f973 	bl	8007240 <vPortExitCritical>
}
 8004f5a:	bf00      	nop
 8004f5c:	3710      	adds	r7, #16
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}

08004f62 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8004f62:	b580      	push	{r7, lr}
 8004f64:	b084      	sub	sp, #16
 8004f66:	af00      	add	r7, sp, #0
 8004f68:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8004f6a:	f002 f937 	bl	80071dc <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d102      	bne.n	8004f7c <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8004f76:	2301      	movs	r3, #1
 8004f78:	60fb      	str	r3, [r7, #12]
 8004f7a:	e001      	b.n	8004f80 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8004f80:	f002 f95e 	bl	8007240 <vPortExitCritical>

    return xReturn;
 8004f84:	68fb      	ldr	r3, [r7, #12]
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3710      	adds	r7, #16
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}

08004f8e <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8004f8e:	b580      	push	{r7, lr}
 8004f90:	b084      	sub	sp, #16
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8004f96:	f002 f921 	bl	80071dc <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d102      	bne.n	8004fac <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	60fb      	str	r3, [r7, #12]
 8004faa:	e001      	b.n	8004fb0 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8004fac:	2300      	movs	r3, #0
 8004fae:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8004fb0:	f002 f946 	bl	8007240 <vPortExitCritical>

    return xReturn;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3710      	adds	r7, #16
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}

08004fbe <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 8004fbe:	b480      	push	{r7}
 8004fc0:	b087      	sub	sp, #28
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d10b      	bne.n	8004fe8 <xQueueIsQueueFullFromISR+0x2a>
        __asm volatile
 8004fd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fd4:	f383 8811 	msr	BASEPRI, r3
 8004fd8:	f3bf 8f6f 	isb	sy
 8004fdc:	f3bf 8f4f 	dsb	sy
 8004fe0:	60fb      	str	r3, [r7, #12]
    }
 8004fe2:	bf00      	nop
 8004fe4:	bf00      	nop
 8004fe6:	e7fd      	b.n	8004fe4 <xQueueIsQueueFullFromISR+0x26>

    if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d102      	bne.n	8004ffa <xQueueIsQueueFullFromISR+0x3c>
    {
        xReturn = pdTRUE;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	617b      	str	r3, [r7, #20]
 8004ff8:	e001      	b.n	8004ffe <xQueueIsQueueFullFromISR+0x40>
    }
    else
    {
        xReturn = pdFALSE;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8004ffe:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8005000:	4618      	mov	r0, r3
 8005002:	371c      	adds	r7, #28
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr

0800500c <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 800500c:	b480      	push	{r7}
 800500e:	b087      	sub	sp, #28
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8005016:	2300      	movs	r3, #0
 8005018:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d10b      	bne.n	8005038 <vQueueAddToRegistry+0x2c>
        __asm volatile
 8005020:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005024:	f383 8811 	msr	BASEPRI, r3
 8005028:	f3bf 8f6f 	isb	sy
 800502c:	f3bf 8f4f 	dsb	sy
 8005030:	60fb      	str	r3, [r7, #12]
    }
 8005032:	bf00      	nop
 8005034:	bf00      	nop
 8005036:	e7fd      	b.n	8005034 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d024      	beq.n	8005088 <vQueueAddToRegistry+0x7c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800503e:	2300      	movs	r3, #0
 8005040:	617b      	str	r3, [r7, #20]
 8005042:	e01e      	b.n	8005082 <vQueueAddToRegistry+0x76>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8005044:	4a18      	ldr	r2, [pc, #96]	@ (80050a8 <vQueueAddToRegistry+0x9c>)
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	00db      	lsls	r3, r3, #3
 800504a:	4413      	add	r3, r2
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	687a      	ldr	r2, [r7, #4]
 8005050:	429a      	cmp	r2, r3
 8005052:	d105      	bne.n	8005060 <vQueueAddToRegistry+0x54>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	00db      	lsls	r3, r3, #3
 8005058:	4a13      	ldr	r2, [pc, #76]	@ (80050a8 <vQueueAddToRegistry+0x9c>)
 800505a:	4413      	add	r3, r2
 800505c:	613b      	str	r3, [r7, #16]
                    break;
 800505e:	e013      	b.n	8005088 <vQueueAddToRegistry+0x7c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d10a      	bne.n	800507c <vQueueAddToRegistry+0x70>
 8005066:	4a10      	ldr	r2, [pc, #64]	@ (80050a8 <vQueueAddToRegistry+0x9c>)
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d104      	bne.n	800507c <vQueueAddToRegistry+0x70>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	00db      	lsls	r3, r3, #3
 8005076:	4a0c      	ldr	r2, [pc, #48]	@ (80050a8 <vQueueAddToRegistry+0x9c>)
 8005078:	4413      	add	r3, r2
 800507a:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	3301      	adds	r3, #1
 8005080:	617b      	str	r3, [r7, #20]
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	2b07      	cmp	r3, #7
 8005086:	d9dd      	bls.n	8005044 <vQueueAddToRegistry+0x38>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8005088:	693b      	ldr	r3, [r7, #16]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d005      	beq.n	800509a <vQueueAddToRegistry+0x8e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	683a      	ldr	r2, [r7, #0]
 8005092:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	687a      	ldr	r2, [r7, #4]
 8005098:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 800509a:	bf00      	nop
 800509c:	371c      	adds	r7, #28
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr
 80050a6:	bf00      	nop
 80050a8:	20000114 	.word	0x20000114

080050ac <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b086      	sub	sp, #24
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	60f8      	str	r0, [r7, #12]
 80050b4:	60b9      	str	r1, [r7, #8]
 80050b6:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80050bc:	f002 f88e 	bl	80071dc <vPortEnterCritical>
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80050c6:	b25b      	sxtb	r3, r3
 80050c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050cc:	d103      	bne.n	80050d6 <vQueueWaitForMessageRestricted+0x2a>
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	2200      	movs	r2, #0
 80050d2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80050dc:	b25b      	sxtb	r3, r3
 80050de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050e2:	d103      	bne.n	80050ec <vQueueWaitForMessageRestricted+0x40>
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	2200      	movs	r2, #0
 80050e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80050ec:	f002 f8a8 	bl	8007240 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d106      	bne.n	8005106 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	3324      	adds	r3, #36	@ 0x24
 80050fc:	687a      	ldr	r2, [r7, #4]
 80050fe:	68b9      	ldr	r1, [r7, #8]
 8005100:	4618      	mov	r0, r3
 8005102:	f000 fd3d 	bl	8005b80 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8005106:	6978      	ldr	r0, [r7, #20]
 8005108:	f7ff fed9 	bl	8004ebe <prvUnlockQueue>
    }
 800510c:	bf00      	nop
 800510e:	3718      	adds	r7, #24
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}

08005114 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8005114:	b580      	push	{r7, lr}
 8005116:	b08c      	sub	sp, #48	@ 0x30
 8005118:	af04      	add	r7, sp, #16
 800511a:	60f8      	str	r0, [r7, #12]
 800511c:	60b9      	str	r1, [r7, #8]
 800511e:	603b      	str	r3, [r7, #0]
 8005120:	4613      	mov	r3, r2
 8005122:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005124:	88fb      	ldrh	r3, [r7, #6]
 8005126:	009b      	lsls	r3, r3, #2
 8005128:	4618      	mov	r0, r3
 800512a:	f002 f981 	bl	8007430 <pvPortMalloc>
 800512e:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d013      	beq.n	800515e <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005136:	2058      	movs	r0, #88	@ 0x58
 8005138:	f002 f97a 	bl	8007430 <pvPortMalloc>
 800513c:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 800513e:	69fb      	ldr	r3, [r7, #28]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d008      	beq.n	8005156 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8005144:	2258      	movs	r2, #88	@ 0x58
 8005146:	2100      	movs	r1, #0
 8005148:	69f8      	ldr	r0, [r7, #28]
 800514a:	f002 fb41 	bl	80077d0 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 800514e:	69fb      	ldr	r3, [r7, #28]
 8005150:	697a      	ldr	r2, [r7, #20]
 8005152:	631a      	str	r2, [r3, #48]	@ 0x30
 8005154:	e005      	b.n	8005162 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8005156:	6978      	ldr	r0, [r7, #20]
 8005158:	f002 fa26 	bl	80075a8 <vPortFree>
 800515c:	e001      	b.n	8005162 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 800515e:	2300      	movs	r3, #0
 8005160:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8005162:	69fb      	ldr	r3, [r7, #28]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d013      	beq.n	8005190 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005168:	88fa      	ldrh	r2, [r7, #6]
 800516a:	2300      	movs	r3, #0
 800516c:	9303      	str	r3, [sp, #12]
 800516e:	69fb      	ldr	r3, [r7, #28]
 8005170:	9302      	str	r3, [sp, #8]
 8005172:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005174:	9301      	str	r3, [sp, #4]
 8005176:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005178:	9300      	str	r3, [sp, #0]
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	68b9      	ldr	r1, [r7, #8]
 800517e:	68f8      	ldr	r0, [r7, #12]
 8005180:	f000 f80e 	bl	80051a0 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8005184:	69f8      	ldr	r0, [r7, #28]
 8005186:	f000 f89b 	bl	80052c0 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800518a:	2301      	movs	r3, #1
 800518c:	61bb      	str	r3, [r7, #24]
 800518e:	e002      	b.n	8005196 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005190:	f04f 33ff 	mov.w	r3, #4294967295
 8005194:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8005196:	69bb      	ldr	r3, [r7, #24]
    }
 8005198:	4618      	mov	r0, r3
 800519a:	3720      	adds	r7, #32
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}

080051a0 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b088      	sub	sp, #32
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	60f8      	str	r0, [r7, #12]
 80051a8:	60b9      	str	r1, [r7, #8]
 80051aa:	607a      	str	r2, [r7, #4]
 80051ac:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80051ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051b0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	009b      	lsls	r3, r3, #2
 80051b6:	461a      	mov	r2, r3
 80051b8:	21a5      	movs	r1, #165	@ 0xa5
 80051ba:	f002 fb09 	bl	80077d0 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80051be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80051c8:	3b01      	subs	r3, #1
 80051ca:	009b      	lsls	r3, r3, #2
 80051cc:	4413      	add	r3, r2
 80051ce:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80051d0:	69bb      	ldr	r3, [r7, #24]
 80051d2:	f023 0307 	bic.w	r3, r3, #7
 80051d6:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80051d8:	69bb      	ldr	r3, [r7, #24]
 80051da:	f003 0307 	and.w	r3, r3, #7
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d00b      	beq.n	80051fa <prvInitialiseNewTask+0x5a>
        __asm volatile
 80051e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051e6:	f383 8811 	msr	BASEPRI, r3
 80051ea:	f3bf 8f6f 	isb	sy
 80051ee:	f3bf 8f4f 	dsb	sy
 80051f2:	617b      	str	r3, [r7, #20]
    }
 80051f4:	bf00      	nop
 80051f6:	bf00      	nop
 80051f8:	e7fd      	b.n	80051f6 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d01e      	beq.n	800523e <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005200:	2300      	movs	r3, #0
 8005202:	61fb      	str	r3, [r7, #28]
 8005204:	e012      	b.n	800522c <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005206:	68ba      	ldr	r2, [r7, #8]
 8005208:	69fb      	ldr	r3, [r7, #28]
 800520a:	4413      	add	r3, r2
 800520c:	7819      	ldrb	r1, [r3, #0]
 800520e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005210:	69fb      	ldr	r3, [r7, #28]
 8005212:	4413      	add	r3, r2
 8005214:	3334      	adds	r3, #52	@ 0x34
 8005216:	460a      	mov	r2, r1
 8005218:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800521a:	68ba      	ldr	r2, [r7, #8]
 800521c:	69fb      	ldr	r3, [r7, #28]
 800521e:	4413      	add	r3, r2
 8005220:	781b      	ldrb	r3, [r3, #0]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d006      	beq.n	8005234 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005226:	69fb      	ldr	r3, [r7, #28]
 8005228:	3301      	adds	r3, #1
 800522a:	61fb      	str	r3, [r7, #28]
 800522c:	69fb      	ldr	r3, [r7, #28]
 800522e:	2b09      	cmp	r3, #9
 8005230:	d9e9      	bls.n	8005206 <prvInitialiseNewTask+0x66>
 8005232:	e000      	b.n	8005236 <prvInitialiseNewTask+0x96>
            {
                break;
 8005234:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005238:	2200      	movs	r2, #0
 800523a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 800523e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005240:	2b04      	cmp	r3, #4
 8005242:	d90b      	bls.n	800525c <prvInitialiseNewTask+0xbc>
        __asm volatile
 8005244:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005248:	f383 8811 	msr	BASEPRI, r3
 800524c:	f3bf 8f6f 	isb	sy
 8005250:	f3bf 8f4f 	dsb	sy
 8005254:	613b      	str	r3, [r7, #16]
    }
 8005256:	bf00      	nop
 8005258:	bf00      	nop
 800525a:	e7fd      	b.n	8005258 <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800525c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800525e:	2b04      	cmp	r3, #4
 8005260:	d901      	bls.n	8005266 <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005262:	2304      	movs	r3, #4
 8005264:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8005266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005268:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800526a:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 800526c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800526e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005270:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005274:	3304      	adds	r3, #4
 8005276:	4618      	mov	r0, r3
 8005278:	f7ff f8ca 	bl	8004410 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800527c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800527e:	3318      	adds	r3, #24
 8005280:	4618      	mov	r0, r3
 8005282:	f7ff f8c5 	bl	8004410 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005288:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800528a:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800528c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800528e:	f1c3 0205 	rsb	r2, r3, #5
 8005292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005294:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005298:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800529a:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800529c:	683a      	ldr	r2, [r7, #0]
 800529e:	68f9      	ldr	r1, [r7, #12]
 80052a0:	69b8      	ldr	r0, [r7, #24]
 80052a2:	f001 fe67 	bl	8006f74 <pxPortInitialiseStack>
 80052a6:	4602      	mov	r2, r0
 80052a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052aa:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80052ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d002      	beq.n	80052b8 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80052b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052b6:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80052b8:	bf00      	nop
 80052ba:	3720      	adds	r7, #32
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}

080052c0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b084      	sub	sp, #16
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80052c8:	f001 ff88 	bl	80071dc <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80052cc:	4b40      	ldr	r3, [pc, #256]	@ (80053d0 <prvAddNewTaskToReadyList+0x110>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	3301      	adds	r3, #1
 80052d2:	4a3f      	ldr	r2, [pc, #252]	@ (80053d0 <prvAddNewTaskToReadyList+0x110>)
 80052d4:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80052d6:	4b3f      	ldr	r3, [pc, #252]	@ (80053d4 <prvAddNewTaskToReadyList+0x114>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d109      	bne.n	80052f2 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80052de:	4a3d      	ldr	r2, [pc, #244]	@ (80053d4 <prvAddNewTaskToReadyList+0x114>)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80052e4:	4b3a      	ldr	r3, [pc, #232]	@ (80053d0 <prvAddNewTaskToReadyList+0x110>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	d110      	bne.n	800530e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80052ec:	f000 fe08 	bl	8005f00 <prvInitialiseTaskLists>
 80052f0:	e00d      	b.n	800530e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80052f2:	4b39      	ldr	r3, [pc, #228]	@ (80053d8 <prvAddNewTaskToReadyList+0x118>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d109      	bne.n	800530e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80052fa:	4b36      	ldr	r3, [pc, #216]	@ (80053d4 <prvAddNewTaskToReadyList+0x114>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005304:	429a      	cmp	r2, r3
 8005306:	d802      	bhi.n	800530e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8005308:	4a32      	ldr	r2, [pc, #200]	@ (80053d4 <prvAddNewTaskToReadyList+0x114>)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800530e:	4b33      	ldr	r3, [pc, #204]	@ (80053dc <prvAddNewTaskToReadyList+0x11c>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	3301      	adds	r3, #1
 8005314:	4a31      	ldr	r2, [pc, #196]	@ (80053dc <prvAddNewTaskToReadyList+0x11c>)
 8005316:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005318:	4b30      	ldr	r3, [pc, #192]	@ (80053dc <prvAddNewTaskToReadyList+0x11c>)
 800531a:	681a      	ldr	r2, [r3, #0]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005324:	2201      	movs	r2, #1
 8005326:	409a      	lsls	r2, r3
 8005328:	4b2d      	ldr	r3, [pc, #180]	@ (80053e0 <prvAddNewTaskToReadyList+0x120>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4313      	orrs	r3, r2
 800532e:	4a2c      	ldr	r2, [pc, #176]	@ (80053e0 <prvAddNewTaskToReadyList+0x120>)
 8005330:	6013      	str	r3, [r2, #0]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005336:	492b      	ldr	r1, [pc, #172]	@ (80053e4 <prvAddNewTaskToReadyList+0x124>)
 8005338:	4613      	mov	r3, r2
 800533a:	009b      	lsls	r3, r3, #2
 800533c:	4413      	add	r3, r2
 800533e:	009b      	lsls	r3, r3, #2
 8005340:	440b      	add	r3, r1
 8005342:	3304      	adds	r3, #4
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	60fb      	str	r3, [r7, #12]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	68fa      	ldr	r2, [r7, #12]
 800534c:	609a      	str	r2, [r3, #8]
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	689a      	ldr	r2, [r3, #8]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	60da      	str	r2, [r3, #12]
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	687a      	ldr	r2, [r7, #4]
 800535c:	3204      	adds	r2, #4
 800535e:	605a      	str	r2, [r3, #4]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	1d1a      	adds	r2, r3, #4
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	609a      	str	r2, [r3, #8]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800536c:	4613      	mov	r3, r2
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	4413      	add	r3, r2
 8005372:	009b      	lsls	r3, r3, #2
 8005374:	4a1b      	ldr	r2, [pc, #108]	@ (80053e4 <prvAddNewTaskToReadyList+0x124>)
 8005376:	441a      	add	r2, r3
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	615a      	str	r2, [r3, #20]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005380:	4918      	ldr	r1, [pc, #96]	@ (80053e4 <prvAddNewTaskToReadyList+0x124>)
 8005382:	4613      	mov	r3, r2
 8005384:	009b      	lsls	r3, r3, #2
 8005386:	4413      	add	r3, r2
 8005388:	009b      	lsls	r3, r3, #2
 800538a:	440b      	add	r3, r1
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	1c59      	adds	r1, r3, #1
 8005390:	4814      	ldr	r0, [pc, #80]	@ (80053e4 <prvAddNewTaskToReadyList+0x124>)
 8005392:	4613      	mov	r3, r2
 8005394:	009b      	lsls	r3, r3, #2
 8005396:	4413      	add	r3, r2
 8005398:	009b      	lsls	r3, r3, #2
 800539a:	4403      	add	r3, r0
 800539c:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800539e:	f001 ff4f 	bl	8007240 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80053a2:	4b0d      	ldr	r3, [pc, #52]	@ (80053d8 <prvAddNewTaskToReadyList+0x118>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d00e      	beq.n	80053c8 <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80053aa:	4b0a      	ldr	r3, [pc, #40]	@ (80053d4 <prvAddNewTaskToReadyList+0x114>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d207      	bcs.n	80053c8 <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80053b8:	4b0b      	ldr	r3, [pc, #44]	@ (80053e8 <prvAddNewTaskToReadyList+0x128>)
 80053ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80053be:	601a      	str	r2, [r3, #0]
 80053c0:	f3bf 8f4f 	dsb	sy
 80053c4:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80053c8:	bf00      	nop
 80053ca:	3710      	adds	r7, #16
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}
 80053d0:	2000022c 	.word	0x2000022c
 80053d4:	20000154 	.word	0x20000154
 80053d8:	20000238 	.word	0x20000238
 80053dc:	20000248 	.word	0x20000248
 80053e0:	20000234 	.word	0x20000234
 80053e4:	20000158 	.word	0x20000158
 80053e8:	e000ed04 	.word	0xe000ed04

080053ec <xTaskDelayUntil>:

#if ( INCLUDE_xTaskDelayUntil == 1 )

    BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                                const TickType_t xTimeIncrement )
    {
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b08a      	sub	sp, #40	@ 0x28
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
 80053f4:	6039      	str	r1, [r7, #0]
        TickType_t xTimeToWake;
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80053f6:	2300      	movs	r3, #0
 80053f8:	627b      	str	r3, [r7, #36]	@ 0x24

        configASSERT( pxPreviousWakeTime );
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d10b      	bne.n	8005418 <xTaskDelayUntil+0x2c>
        __asm volatile
 8005400:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005404:	f383 8811 	msr	BASEPRI, r3
 8005408:	f3bf 8f6f 	isb	sy
 800540c:	f3bf 8f4f 	dsb	sy
 8005410:	617b      	str	r3, [r7, #20]
    }
 8005412:	bf00      	nop
 8005414:	bf00      	nop
 8005416:	e7fd      	b.n	8005414 <xTaskDelayUntil+0x28>
        configASSERT( ( xTimeIncrement > 0U ) );
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d10b      	bne.n	8005436 <xTaskDelayUntil+0x4a>
        __asm volatile
 800541e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005422:	f383 8811 	msr	BASEPRI, r3
 8005426:	f3bf 8f6f 	isb	sy
 800542a:	f3bf 8f4f 	dsb	sy
 800542e:	613b      	str	r3, [r7, #16]
    }
 8005430:	bf00      	nop
 8005432:	bf00      	nop
 8005434:	e7fd      	b.n	8005432 <xTaskDelayUntil+0x46>
        configASSERT( uxSchedulerSuspended == 0 );
 8005436:	4b2b      	ldr	r3, [pc, #172]	@ (80054e4 <xTaskDelayUntil+0xf8>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d00b      	beq.n	8005456 <xTaskDelayUntil+0x6a>
        __asm volatile
 800543e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005442:	f383 8811 	msr	BASEPRI, r3
 8005446:	f3bf 8f6f 	isb	sy
 800544a:	f3bf 8f4f 	dsb	sy
 800544e:	60fb      	str	r3, [r7, #12]
    }
 8005450:	bf00      	nop
 8005452:	bf00      	nop
 8005454:	e7fd      	b.n	8005452 <xTaskDelayUntil+0x66>

        vTaskSuspendAll();
 8005456:	f000 f8d3 	bl	8005600 <vTaskSuspendAll>
        {
            /* Minor optimisation.  The tick count cannot change in this
             * block. */
            const TickType_t xConstTickCount = xTickCount;
 800545a:	4b23      	ldr	r3, [pc, #140]	@ (80054e8 <xTaskDelayUntil+0xfc>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	623b      	str	r3, [r7, #32]

            /* Generate the tick time at which the task wants to wake. */
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	683a      	ldr	r2, [r7, #0]
 8005466:	4413      	add	r3, r2
 8005468:	61fb      	str	r3, [r7, #28]

            if( xConstTickCount < *pxPreviousWakeTime )
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	6a3a      	ldr	r2, [r7, #32]
 8005470:	429a      	cmp	r2, r3
 8005472:	d20b      	bcs.n	800548c <xTaskDelayUntil+0xa0>
                /* The tick count has overflowed since this function was
                 * lasted called.  In this case the only time we should ever
                 * actually delay is if the wake time has also  overflowed,
                 * and the wake time is greater than the tick time.  When this
                 * is the case it is as if neither time had overflowed. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	69fa      	ldr	r2, [r7, #28]
 800547a:	429a      	cmp	r2, r3
 800547c:	d211      	bcs.n	80054a2 <xTaskDelayUntil+0xb6>
 800547e:	69fa      	ldr	r2, [r7, #28]
 8005480:	6a3b      	ldr	r3, [r7, #32]
 8005482:	429a      	cmp	r2, r3
 8005484:	d90d      	bls.n	80054a2 <xTaskDelayUntil+0xb6>
                {
                    xShouldDelay = pdTRUE;
 8005486:	2301      	movs	r3, #1
 8005488:	627b      	str	r3, [r7, #36]	@ 0x24
 800548a:	e00a      	b.n	80054a2 <xTaskDelayUntil+0xb6>
            else
            {
                /* The tick time has not overflowed.  In this case we will
                 * delay if either the wake time has overflowed, and/or the
                 * tick time is less than the wake time. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	69fa      	ldr	r2, [r7, #28]
 8005492:	429a      	cmp	r2, r3
 8005494:	d303      	bcc.n	800549e <xTaskDelayUntil+0xb2>
 8005496:	69fa      	ldr	r2, [r7, #28]
 8005498:	6a3b      	ldr	r3, [r7, #32]
 800549a:	429a      	cmp	r2, r3
 800549c:	d901      	bls.n	80054a2 <xTaskDelayUntil+0xb6>
                {
                    xShouldDelay = pdTRUE;
 800549e:	2301      	movs	r3, #1
 80054a0:	627b      	str	r3, [r7, #36]	@ 0x24
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            /* Update the wake time ready for the next call. */
            *pxPreviousWakeTime = xTimeToWake;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	69fa      	ldr	r2, [r7, #28]
 80054a6:	601a      	str	r2, [r3, #0]

            if( xShouldDelay != pdFALSE )
 80054a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d006      	beq.n	80054bc <xTaskDelayUntil+0xd0>
            {
                traceTASK_DELAY_UNTIL( xTimeToWake );

                /* prvAddCurrentTaskToDelayedList() needs the block time, not
                 * the time to wake, so subtract the current tick count. */
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80054ae:	69fa      	ldr	r2, [r7, #28]
 80054b0:	6a3b      	ldr	r3, [r7, #32]
 80054b2:	1ad3      	subs	r3, r2, r3
 80054b4:	2100      	movs	r1, #0
 80054b6:	4618      	mov	r0, r3
 80054b8:	f001 f986 	bl	80067c8 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 80054bc:	f000 f8ae 	bl	800561c <xTaskResumeAll>
 80054c0:	61b8      	str	r0, [r7, #24]

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80054c2:	69bb      	ldr	r3, [r7, #24]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d107      	bne.n	80054d8 <xTaskDelayUntil+0xec>
        {
            portYIELD_WITHIN_API();
 80054c8:	4b08      	ldr	r3, [pc, #32]	@ (80054ec <xTaskDelayUntil+0x100>)
 80054ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80054ce:	601a      	str	r2, [r3, #0]
 80054d0:	f3bf 8f4f 	dsb	sy
 80054d4:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xShouldDelay;
 80054d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 80054da:	4618      	mov	r0, r3
 80054dc:	3728      	adds	r7, #40	@ 0x28
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}
 80054e2:	bf00      	nop
 80054e4:	20000254 	.word	0x20000254
 80054e8:	20000230 	.word	0x20000230
 80054ec:	e000ed04 	.word	0xe000ed04

080054f0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b084      	sub	sp, #16
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80054f8:	2300      	movs	r3, #0
 80054fa:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d018      	beq.n	8005534 <vTaskDelay+0x44>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8005502:	4b14      	ldr	r3, [pc, #80]	@ (8005554 <vTaskDelay+0x64>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d00b      	beq.n	8005522 <vTaskDelay+0x32>
        __asm volatile
 800550a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800550e:	f383 8811 	msr	BASEPRI, r3
 8005512:	f3bf 8f6f 	isb	sy
 8005516:	f3bf 8f4f 	dsb	sy
 800551a:	60bb      	str	r3, [r7, #8]
    }
 800551c:	bf00      	nop
 800551e:	bf00      	nop
 8005520:	e7fd      	b.n	800551e <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8005522:	f000 f86d 	bl	8005600 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005526:	2100      	movs	r1, #0
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f001 f94d 	bl	80067c8 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 800552e:	f000 f875 	bl	800561c <xTaskResumeAll>
 8005532:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d107      	bne.n	800554a <vTaskDelay+0x5a>
        {
            portYIELD_WITHIN_API();
 800553a:	4b07      	ldr	r3, [pc, #28]	@ (8005558 <vTaskDelay+0x68>)
 800553c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005540:	601a      	str	r2, [r3, #0]
 8005542:	f3bf 8f4f 	dsb	sy
 8005546:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800554a:	bf00      	nop
 800554c:	3710      	adds	r7, #16
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}
 8005552:	bf00      	nop
 8005554:	20000254 	.word	0x20000254
 8005558:	e000ed04 	.word	0xe000ed04

0800555c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b086      	sub	sp, #24
 8005560:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8005562:	4b20      	ldr	r3, [pc, #128]	@ (80055e4 <vTaskStartScheduler+0x88>)
 8005564:	9301      	str	r3, [sp, #4]
 8005566:	2300      	movs	r3, #0
 8005568:	9300      	str	r3, [sp, #0]
 800556a:	2300      	movs	r3, #0
 800556c:	2282      	movs	r2, #130	@ 0x82
 800556e:	491e      	ldr	r1, [pc, #120]	@ (80055e8 <vTaskStartScheduler+0x8c>)
 8005570:	481e      	ldr	r0, [pc, #120]	@ (80055ec <vTaskStartScheduler+0x90>)
 8005572:	f7ff fdcf 	bl	8005114 <xTaskCreate>
 8005576:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2b01      	cmp	r3, #1
 800557c:	d102      	bne.n	8005584 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 800557e:	f001 f9a3 	bl	80068c8 <xTimerCreateTimerTask>
 8005582:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2b01      	cmp	r3, #1
 8005588:	d116      	bne.n	80055b8 <vTaskStartScheduler+0x5c>
        __asm volatile
 800558a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800558e:	f383 8811 	msr	BASEPRI, r3
 8005592:	f3bf 8f6f 	isb	sy
 8005596:	f3bf 8f4f 	dsb	sy
 800559a:	60bb      	str	r3, [r7, #8]
    }
 800559c:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 800559e:	4b14      	ldr	r3, [pc, #80]	@ (80055f0 <vTaskStartScheduler+0x94>)
 80055a0:	f04f 32ff 	mov.w	r2, #4294967295
 80055a4:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80055a6:	4b13      	ldr	r3, [pc, #76]	@ (80055f4 <vTaskStartScheduler+0x98>)
 80055a8:	2201      	movs	r2, #1
 80055aa:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80055ac:	4b12      	ldr	r3, [pc, #72]	@ (80055f8 <vTaskStartScheduler+0x9c>)
 80055ae:	2200      	movs	r2, #0
 80055b0:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 80055b2:	f001 fd6f 	bl	8007094 <xPortStartScheduler>
 80055b6:	e00f      	b.n	80055d8 <vTaskStartScheduler+0x7c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055be:	d10b      	bne.n	80055d8 <vTaskStartScheduler+0x7c>
        __asm volatile
 80055c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055c4:	f383 8811 	msr	BASEPRI, r3
 80055c8:	f3bf 8f6f 	isb	sy
 80055cc:	f3bf 8f4f 	dsb	sy
 80055d0:	607b      	str	r3, [r7, #4]
    }
 80055d2:	bf00      	nop
 80055d4:	bf00      	nop
 80055d6:	e7fd      	b.n	80055d4 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80055d8:	4b08      	ldr	r3, [pc, #32]	@ (80055fc <vTaskStartScheduler+0xa0>)
 80055da:	681b      	ldr	r3, [r3, #0]
}
 80055dc:	bf00      	nop
 80055de:	3710      	adds	r7, #16
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}
 80055e4:	20000250 	.word	0x20000250
 80055e8:	08007a34 	.word	0x08007a34
 80055ec:	08005ed1 	.word	0x08005ed1
 80055f0:	2000024c 	.word	0x2000024c
 80055f4:	20000238 	.word	0x20000238
 80055f8:	20000230 	.word	0x20000230
 80055fc:	2000000c 	.word	0x2000000c

08005600 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005600:	b480      	push	{r7}
 8005602:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8005604:	4b04      	ldr	r3, [pc, #16]	@ (8005618 <vTaskSuspendAll+0x18>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	3301      	adds	r3, #1
 800560a:	4a03      	ldr	r2, [pc, #12]	@ (8005618 <vTaskSuspendAll+0x18>)
 800560c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800560e:	bf00      	nop
 8005610:	46bd      	mov	sp, r7
 8005612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005616:	4770      	bx	lr
 8005618:	20000254 	.word	0x20000254

0800561c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b088      	sub	sp, #32
 8005620:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8005622:	2300      	movs	r3, #0
 8005624:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8005626:	2300      	movs	r3, #0
 8005628:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800562a:	4b71      	ldr	r3, [pc, #452]	@ (80057f0 <xTaskResumeAll+0x1d4>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d10b      	bne.n	800564a <xTaskResumeAll+0x2e>
        __asm volatile
 8005632:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005636:	f383 8811 	msr	BASEPRI, r3
 800563a:	f3bf 8f6f 	isb	sy
 800563e:	f3bf 8f4f 	dsb	sy
 8005642:	607b      	str	r3, [r7, #4]
    }
 8005644:	bf00      	nop
 8005646:	bf00      	nop
 8005648:	e7fd      	b.n	8005646 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800564a:	f001 fdc7 	bl	80071dc <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800564e:	4b68      	ldr	r3, [pc, #416]	@ (80057f0 <xTaskResumeAll+0x1d4>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	3b01      	subs	r3, #1
 8005654:	4a66      	ldr	r2, [pc, #408]	@ (80057f0 <xTaskResumeAll+0x1d4>)
 8005656:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005658:	4b65      	ldr	r3, [pc, #404]	@ (80057f0 <xTaskResumeAll+0x1d4>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	2b00      	cmp	r3, #0
 800565e:	f040 80c0 	bne.w	80057e2 <xTaskResumeAll+0x1c6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005662:	4b64      	ldr	r3, [pc, #400]	@ (80057f4 <xTaskResumeAll+0x1d8>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	2b00      	cmp	r3, #0
 8005668:	f000 80bb 	beq.w	80057e2 <xTaskResumeAll+0x1c6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800566c:	e08a      	b.n	8005784 <xTaskResumeAll+0x168>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800566e:	4b62      	ldr	r3, [pc, #392]	@ (80057f8 <xTaskResumeAll+0x1dc>)
 8005670:	68db      	ldr	r3, [r3, #12]
 8005672:	68db      	ldr	r3, [r3, #12]
 8005674:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8005676:	69fb      	ldr	r3, [r7, #28]
 8005678:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800567a:	613b      	str	r3, [r7, #16]
 800567c:	69fb      	ldr	r3, [r7, #28]
 800567e:	69db      	ldr	r3, [r3, #28]
 8005680:	69fa      	ldr	r2, [r7, #28]
 8005682:	6a12      	ldr	r2, [r2, #32]
 8005684:	609a      	str	r2, [r3, #8]
 8005686:	69fb      	ldr	r3, [r7, #28]
 8005688:	6a1b      	ldr	r3, [r3, #32]
 800568a:	69fa      	ldr	r2, [r7, #28]
 800568c:	69d2      	ldr	r2, [r2, #28]
 800568e:	605a      	str	r2, [r3, #4]
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	685a      	ldr	r2, [r3, #4]
 8005694:	69fb      	ldr	r3, [r7, #28]
 8005696:	3318      	adds	r3, #24
 8005698:	429a      	cmp	r2, r3
 800569a:	d103      	bne.n	80056a4 <xTaskResumeAll+0x88>
 800569c:	69fb      	ldr	r3, [r7, #28]
 800569e:	6a1a      	ldr	r2, [r3, #32]
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	605a      	str	r2, [r3, #4]
 80056a4:	69fb      	ldr	r3, [r7, #28]
 80056a6:	2200      	movs	r2, #0
 80056a8:	629a      	str	r2, [r3, #40]	@ 0x28
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	1e5a      	subs	r2, r3, #1
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80056b4:	69fb      	ldr	r3, [r7, #28]
 80056b6:	695b      	ldr	r3, [r3, #20]
 80056b8:	60fb      	str	r3, [r7, #12]
 80056ba:	69fb      	ldr	r3, [r7, #28]
 80056bc:	689b      	ldr	r3, [r3, #8]
 80056be:	69fa      	ldr	r2, [r7, #28]
 80056c0:	68d2      	ldr	r2, [r2, #12]
 80056c2:	609a      	str	r2, [r3, #8]
 80056c4:	69fb      	ldr	r3, [r7, #28]
 80056c6:	68db      	ldr	r3, [r3, #12]
 80056c8:	69fa      	ldr	r2, [r7, #28]
 80056ca:	6892      	ldr	r2, [r2, #8]
 80056cc:	605a      	str	r2, [r3, #4]
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	685a      	ldr	r2, [r3, #4]
 80056d2:	69fb      	ldr	r3, [r7, #28]
 80056d4:	3304      	adds	r3, #4
 80056d6:	429a      	cmp	r2, r3
 80056d8:	d103      	bne.n	80056e2 <xTaskResumeAll+0xc6>
 80056da:	69fb      	ldr	r3, [r7, #28]
 80056dc:	68da      	ldr	r2, [r3, #12]
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	605a      	str	r2, [r3, #4]
 80056e2:	69fb      	ldr	r3, [r7, #28]
 80056e4:	2200      	movs	r2, #0
 80056e6:	615a      	str	r2, [r3, #20]
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	1e5a      	subs	r2, r3, #1
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80056f2:	69fb      	ldr	r3, [r7, #28]
 80056f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056f6:	2201      	movs	r2, #1
 80056f8:	409a      	lsls	r2, r3
 80056fa:	4b40      	ldr	r3, [pc, #256]	@ (80057fc <xTaskResumeAll+0x1e0>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4313      	orrs	r3, r2
 8005700:	4a3e      	ldr	r2, [pc, #248]	@ (80057fc <xTaskResumeAll+0x1e0>)
 8005702:	6013      	str	r3, [r2, #0]
 8005704:	69fb      	ldr	r3, [r7, #28]
 8005706:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005708:	493d      	ldr	r1, [pc, #244]	@ (8005800 <xTaskResumeAll+0x1e4>)
 800570a:	4613      	mov	r3, r2
 800570c:	009b      	lsls	r3, r3, #2
 800570e:	4413      	add	r3, r2
 8005710:	009b      	lsls	r3, r3, #2
 8005712:	440b      	add	r3, r1
 8005714:	3304      	adds	r3, #4
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	60bb      	str	r3, [r7, #8]
 800571a:	69fb      	ldr	r3, [r7, #28]
 800571c:	68ba      	ldr	r2, [r7, #8]
 800571e:	609a      	str	r2, [r3, #8]
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	689a      	ldr	r2, [r3, #8]
 8005724:	69fb      	ldr	r3, [r7, #28]
 8005726:	60da      	str	r2, [r3, #12]
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	689b      	ldr	r3, [r3, #8]
 800572c:	69fa      	ldr	r2, [r7, #28]
 800572e:	3204      	adds	r2, #4
 8005730:	605a      	str	r2, [r3, #4]
 8005732:	69fb      	ldr	r3, [r7, #28]
 8005734:	1d1a      	adds	r2, r3, #4
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	609a      	str	r2, [r3, #8]
 800573a:	69fb      	ldr	r3, [r7, #28]
 800573c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800573e:	4613      	mov	r3, r2
 8005740:	009b      	lsls	r3, r3, #2
 8005742:	4413      	add	r3, r2
 8005744:	009b      	lsls	r3, r3, #2
 8005746:	4a2e      	ldr	r2, [pc, #184]	@ (8005800 <xTaskResumeAll+0x1e4>)
 8005748:	441a      	add	r2, r3
 800574a:	69fb      	ldr	r3, [r7, #28]
 800574c:	615a      	str	r2, [r3, #20]
 800574e:	69fb      	ldr	r3, [r7, #28]
 8005750:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005752:	492b      	ldr	r1, [pc, #172]	@ (8005800 <xTaskResumeAll+0x1e4>)
 8005754:	4613      	mov	r3, r2
 8005756:	009b      	lsls	r3, r3, #2
 8005758:	4413      	add	r3, r2
 800575a:	009b      	lsls	r3, r3, #2
 800575c:	440b      	add	r3, r1
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	1c59      	adds	r1, r3, #1
 8005762:	4827      	ldr	r0, [pc, #156]	@ (8005800 <xTaskResumeAll+0x1e4>)
 8005764:	4613      	mov	r3, r2
 8005766:	009b      	lsls	r3, r3, #2
 8005768:	4413      	add	r3, r2
 800576a:	009b      	lsls	r3, r3, #2
 800576c:	4403      	add	r3, r0
 800576e:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005770:	69fb      	ldr	r3, [r7, #28]
 8005772:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005774:	4b23      	ldr	r3, [pc, #140]	@ (8005804 <xTaskResumeAll+0x1e8>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800577a:	429a      	cmp	r2, r3
 800577c:	d302      	bcc.n	8005784 <xTaskResumeAll+0x168>
                    {
                        xYieldPending = pdTRUE;
 800577e:	4b22      	ldr	r3, [pc, #136]	@ (8005808 <xTaskResumeAll+0x1ec>)
 8005780:	2201      	movs	r2, #1
 8005782:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005784:	4b1c      	ldr	r3, [pc, #112]	@ (80057f8 <xTaskResumeAll+0x1dc>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	2b00      	cmp	r3, #0
 800578a:	f47f af70 	bne.w	800566e <xTaskResumeAll+0x52>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800578e:	69fb      	ldr	r3, [r7, #28]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d001      	beq.n	8005798 <xTaskResumeAll+0x17c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8005794:	f000 fc32 	bl	8005ffc <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005798:	4b1c      	ldr	r3, [pc, #112]	@ (800580c <xTaskResumeAll+0x1f0>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d010      	beq.n	80057c6 <xTaskResumeAll+0x1aa>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80057a4:	f000 f852 	bl	800584c <xTaskIncrementTick>
 80057a8:	4603      	mov	r3, r0
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d002      	beq.n	80057b4 <xTaskResumeAll+0x198>
                            {
                                xYieldPending = pdTRUE;
 80057ae:	4b16      	ldr	r3, [pc, #88]	@ (8005808 <xTaskResumeAll+0x1ec>)
 80057b0:	2201      	movs	r2, #1
 80057b2:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	3b01      	subs	r3, #1
 80057b8:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d1f1      	bne.n	80057a4 <xTaskResumeAll+0x188>

                        xPendedTicks = 0;
 80057c0:	4b12      	ldr	r3, [pc, #72]	@ (800580c <xTaskResumeAll+0x1f0>)
 80057c2:	2200      	movs	r2, #0
 80057c4:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80057c6:	4b10      	ldr	r3, [pc, #64]	@ (8005808 <xTaskResumeAll+0x1ec>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d009      	beq.n	80057e2 <xTaskResumeAll+0x1c6>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 80057ce:	2301      	movs	r3, #1
 80057d0:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80057d2:	4b0f      	ldr	r3, [pc, #60]	@ (8005810 <xTaskResumeAll+0x1f4>)
 80057d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80057d8:	601a      	str	r2, [r3, #0]
 80057da:	f3bf 8f4f 	dsb	sy
 80057de:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80057e2:	f001 fd2d 	bl	8007240 <vPortExitCritical>

    return xAlreadyYielded;
 80057e6:	69bb      	ldr	r3, [r7, #24]
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	3720      	adds	r7, #32
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}
 80057f0:	20000254 	.word	0x20000254
 80057f4:	2000022c 	.word	0x2000022c
 80057f8:	200001ec 	.word	0x200001ec
 80057fc:	20000234 	.word	0x20000234
 8005800:	20000158 	.word	0x20000158
 8005804:	20000154 	.word	0x20000154
 8005808:	20000240 	.word	0x20000240
 800580c:	2000023c 	.word	0x2000023c
 8005810:	e000ed04 	.word	0xe000ed04

08005814 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005814:	b480      	push	{r7}
 8005816:	b083      	sub	sp, #12
 8005818:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800581a:	4b05      	ldr	r3, [pc, #20]	@ (8005830 <xTaskGetTickCount+0x1c>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8005820:	687b      	ldr	r3, [r7, #4]
}
 8005822:	4618      	mov	r0, r3
 8005824:	370c      	adds	r7, #12
 8005826:	46bd      	mov	sp, r7
 8005828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582c:	4770      	bx	lr
 800582e:	bf00      	nop
 8005830:	20000230 	.word	0x20000230

08005834 <uxTaskGetNumberOfTasks>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 8005834:	b480      	push	{r7}
 8005836:	af00      	add	r7, sp, #0
    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    return uxCurrentNumberOfTasks;
 8005838:	4b03      	ldr	r3, [pc, #12]	@ (8005848 <uxTaskGetNumberOfTasks+0x14>)
 800583a:	681b      	ldr	r3, [r3, #0]
}
 800583c:	4618      	mov	r0, r3
 800583e:	46bd      	mov	sp, r7
 8005840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005844:	4770      	bx	lr
 8005846:	bf00      	nop
 8005848:	2000022c 	.word	0x2000022c

0800584c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b08a      	sub	sp, #40	@ 0x28
 8005850:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8005852:	2300      	movs	r3, #0
 8005854:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005856:	4b7e      	ldr	r3, [pc, #504]	@ (8005a50 <xTaskIncrementTick+0x204>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	2b00      	cmp	r3, #0
 800585c:	f040 80ed 	bne.w	8005a3a <xTaskIncrementTick+0x1ee>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005860:	4b7c      	ldr	r3, [pc, #496]	@ (8005a54 <xTaskIncrementTick+0x208>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	3301      	adds	r3, #1
 8005866:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8005868:	4a7a      	ldr	r2, [pc, #488]	@ (8005a54 <xTaskIncrementTick+0x208>)
 800586a:	6a3b      	ldr	r3, [r7, #32]
 800586c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800586e:	6a3b      	ldr	r3, [r7, #32]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d121      	bne.n	80058b8 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8005874:	4b78      	ldr	r3, [pc, #480]	@ (8005a58 <xTaskIncrementTick+0x20c>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d00b      	beq.n	8005896 <xTaskIncrementTick+0x4a>
        __asm volatile
 800587e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005882:	f383 8811 	msr	BASEPRI, r3
 8005886:	f3bf 8f6f 	isb	sy
 800588a:	f3bf 8f4f 	dsb	sy
 800588e:	607b      	str	r3, [r7, #4]
    }
 8005890:	bf00      	nop
 8005892:	bf00      	nop
 8005894:	e7fd      	b.n	8005892 <xTaskIncrementTick+0x46>
 8005896:	4b70      	ldr	r3, [pc, #448]	@ (8005a58 <xTaskIncrementTick+0x20c>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	61fb      	str	r3, [r7, #28]
 800589c:	4b6f      	ldr	r3, [pc, #444]	@ (8005a5c <xTaskIncrementTick+0x210>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a6d      	ldr	r2, [pc, #436]	@ (8005a58 <xTaskIncrementTick+0x20c>)
 80058a2:	6013      	str	r3, [r2, #0]
 80058a4:	4a6d      	ldr	r2, [pc, #436]	@ (8005a5c <xTaskIncrementTick+0x210>)
 80058a6:	69fb      	ldr	r3, [r7, #28]
 80058a8:	6013      	str	r3, [r2, #0]
 80058aa:	4b6d      	ldr	r3, [pc, #436]	@ (8005a60 <xTaskIncrementTick+0x214>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	3301      	adds	r3, #1
 80058b0:	4a6b      	ldr	r2, [pc, #428]	@ (8005a60 <xTaskIncrementTick+0x214>)
 80058b2:	6013      	str	r3, [r2, #0]
 80058b4:	f000 fba2 	bl	8005ffc <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80058b8:	4b6a      	ldr	r3, [pc, #424]	@ (8005a64 <xTaskIncrementTick+0x218>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	6a3a      	ldr	r2, [r7, #32]
 80058be:	429a      	cmp	r2, r3
 80058c0:	f0c0 80a6 	bcc.w	8005a10 <xTaskIncrementTick+0x1c4>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80058c4:	4b64      	ldr	r3, [pc, #400]	@ (8005a58 <xTaskIncrementTick+0x20c>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d104      	bne.n	80058d8 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80058ce:	4b65      	ldr	r3, [pc, #404]	@ (8005a64 <xTaskIncrementTick+0x218>)
 80058d0:	f04f 32ff 	mov.w	r2, #4294967295
 80058d4:	601a      	str	r2, [r3, #0]
                    break;
 80058d6:	e09b      	b.n	8005a10 <xTaskIncrementTick+0x1c4>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058d8:	4b5f      	ldr	r3, [pc, #380]	@ (8005a58 <xTaskIncrementTick+0x20c>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	68db      	ldr	r3, [r3, #12]
 80058de:	68db      	ldr	r3, [r3, #12]
 80058e0:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80058e2:	69bb      	ldr	r3, [r7, #24]
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80058e8:	6a3a      	ldr	r2, [r7, #32]
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	429a      	cmp	r2, r3
 80058ee:	d203      	bcs.n	80058f8 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80058f0:	4a5c      	ldr	r2, [pc, #368]	@ (8005a64 <xTaskIncrementTick+0x218>)
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80058f6:	e08b      	b.n	8005a10 <xTaskIncrementTick+0x1c4>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80058f8:	69bb      	ldr	r3, [r7, #24]
 80058fa:	695b      	ldr	r3, [r3, #20]
 80058fc:	613b      	str	r3, [r7, #16]
 80058fe:	69bb      	ldr	r3, [r7, #24]
 8005900:	689b      	ldr	r3, [r3, #8]
 8005902:	69ba      	ldr	r2, [r7, #24]
 8005904:	68d2      	ldr	r2, [r2, #12]
 8005906:	609a      	str	r2, [r3, #8]
 8005908:	69bb      	ldr	r3, [r7, #24]
 800590a:	68db      	ldr	r3, [r3, #12]
 800590c:	69ba      	ldr	r2, [r7, #24]
 800590e:	6892      	ldr	r2, [r2, #8]
 8005910:	605a      	str	r2, [r3, #4]
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	685a      	ldr	r2, [r3, #4]
 8005916:	69bb      	ldr	r3, [r7, #24]
 8005918:	3304      	adds	r3, #4
 800591a:	429a      	cmp	r2, r3
 800591c:	d103      	bne.n	8005926 <xTaskIncrementTick+0xda>
 800591e:	69bb      	ldr	r3, [r7, #24]
 8005920:	68da      	ldr	r2, [r3, #12]
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	605a      	str	r2, [r3, #4]
 8005926:	69bb      	ldr	r3, [r7, #24]
 8005928:	2200      	movs	r2, #0
 800592a:	615a      	str	r2, [r3, #20]
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	1e5a      	subs	r2, r3, #1
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005936:	69bb      	ldr	r3, [r7, #24]
 8005938:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800593a:	2b00      	cmp	r3, #0
 800593c:	d01e      	beq.n	800597c <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800593e:	69bb      	ldr	r3, [r7, #24]
 8005940:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005942:	60fb      	str	r3, [r7, #12]
 8005944:	69bb      	ldr	r3, [r7, #24]
 8005946:	69db      	ldr	r3, [r3, #28]
 8005948:	69ba      	ldr	r2, [r7, #24]
 800594a:	6a12      	ldr	r2, [r2, #32]
 800594c:	609a      	str	r2, [r3, #8]
 800594e:	69bb      	ldr	r3, [r7, #24]
 8005950:	6a1b      	ldr	r3, [r3, #32]
 8005952:	69ba      	ldr	r2, [r7, #24]
 8005954:	69d2      	ldr	r2, [r2, #28]
 8005956:	605a      	str	r2, [r3, #4]
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	685a      	ldr	r2, [r3, #4]
 800595c:	69bb      	ldr	r3, [r7, #24]
 800595e:	3318      	adds	r3, #24
 8005960:	429a      	cmp	r2, r3
 8005962:	d103      	bne.n	800596c <xTaskIncrementTick+0x120>
 8005964:	69bb      	ldr	r3, [r7, #24]
 8005966:	6a1a      	ldr	r2, [r3, #32]
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	605a      	str	r2, [r3, #4]
 800596c:	69bb      	ldr	r3, [r7, #24]
 800596e:	2200      	movs	r2, #0
 8005970:	629a      	str	r2, [r3, #40]	@ 0x28
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	1e5a      	subs	r2, r3, #1
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800597c:	69bb      	ldr	r3, [r7, #24]
 800597e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005980:	2201      	movs	r2, #1
 8005982:	409a      	lsls	r2, r3
 8005984:	4b38      	ldr	r3, [pc, #224]	@ (8005a68 <xTaskIncrementTick+0x21c>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4313      	orrs	r3, r2
 800598a:	4a37      	ldr	r2, [pc, #220]	@ (8005a68 <xTaskIncrementTick+0x21c>)
 800598c:	6013      	str	r3, [r2, #0]
 800598e:	69bb      	ldr	r3, [r7, #24]
 8005990:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005992:	4936      	ldr	r1, [pc, #216]	@ (8005a6c <xTaskIncrementTick+0x220>)
 8005994:	4613      	mov	r3, r2
 8005996:	009b      	lsls	r3, r3, #2
 8005998:	4413      	add	r3, r2
 800599a:	009b      	lsls	r3, r3, #2
 800599c:	440b      	add	r3, r1
 800599e:	3304      	adds	r3, #4
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	60bb      	str	r3, [r7, #8]
 80059a4:	69bb      	ldr	r3, [r7, #24]
 80059a6:	68ba      	ldr	r2, [r7, #8]
 80059a8:	609a      	str	r2, [r3, #8]
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	689a      	ldr	r2, [r3, #8]
 80059ae:	69bb      	ldr	r3, [r7, #24]
 80059b0:	60da      	str	r2, [r3, #12]
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	69ba      	ldr	r2, [r7, #24]
 80059b8:	3204      	adds	r2, #4
 80059ba:	605a      	str	r2, [r3, #4]
 80059bc:	69bb      	ldr	r3, [r7, #24]
 80059be:	1d1a      	adds	r2, r3, #4
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	609a      	str	r2, [r3, #8]
 80059c4:	69bb      	ldr	r3, [r7, #24]
 80059c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059c8:	4613      	mov	r3, r2
 80059ca:	009b      	lsls	r3, r3, #2
 80059cc:	4413      	add	r3, r2
 80059ce:	009b      	lsls	r3, r3, #2
 80059d0:	4a26      	ldr	r2, [pc, #152]	@ (8005a6c <xTaskIncrementTick+0x220>)
 80059d2:	441a      	add	r2, r3
 80059d4:	69bb      	ldr	r3, [r7, #24]
 80059d6:	615a      	str	r2, [r3, #20]
 80059d8:	69bb      	ldr	r3, [r7, #24]
 80059da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059dc:	4923      	ldr	r1, [pc, #140]	@ (8005a6c <xTaskIncrementTick+0x220>)
 80059de:	4613      	mov	r3, r2
 80059e0:	009b      	lsls	r3, r3, #2
 80059e2:	4413      	add	r3, r2
 80059e4:	009b      	lsls	r3, r3, #2
 80059e6:	440b      	add	r3, r1
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	1c59      	adds	r1, r3, #1
 80059ec:	481f      	ldr	r0, [pc, #124]	@ (8005a6c <xTaskIncrementTick+0x220>)
 80059ee:	4613      	mov	r3, r2
 80059f0:	009b      	lsls	r3, r3, #2
 80059f2:	4413      	add	r3, r2
 80059f4:	009b      	lsls	r3, r3, #2
 80059f6:	4403      	add	r3, r0
 80059f8:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80059fa:	69bb      	ldr	r3, [r7, #24]
 80059fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059fe:	4b1c      	ldr	r3, [pc, #112]	@ (8005a70 <xTaskIncrementTick+0x224>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a04:	429a      	cmp	r2, r3
 8005a06:	f67f af5d 	bls.w	80058c4 <xTaskIncrementTick+0x78>
                        {
                            xSwitchRequired = pdTRUE;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a0e:	e759      	b.n	80058c4 <xTaskIncrementTick+0x78>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005a10:	4b17      	ldr	r3, [pc, #92]	@ (8005a70 <xTaskIncrementTick+0x224>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a16:	4915      	ldr	r1, [pc, #84]	@ (8005a6c <xTaskIncrementTick+0x220>)
 8005a18:	4613      	mov	r3, r2
 8005a1a:	009b      	lsls	r3, r3, #2
 8005a1c:	4413      	add	r3, r2
 8005a1e:	009b      	lsls	r3, r3, #2
 8005a20:	440b      	add	r3, r1
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d901      	bls.n	8005a2c <xTaskIncrementTick+0x1e0>
            {
                xSwitchRequired = pdTRUE;
 8005a28:	2301      	movs	r3, #1
 8005a2a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8005a2c:	4b11      	ldr	r3, [pc, #68]	@ (8005a74 <xTaskIncrementTick+0x228>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d007      	beq.n	8005a44 <xTaskIncrementTick+0x1f8>
            {
                xSwitchRequired = pdTRUE;
 8005a34:	2301      	movs	r3, #1
 8005a36:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a38:	e004      	b.n	8005a44 <xTaskIncrementTick+0x1f8>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8005a3a:	4b0f      	ldr	r3, [pc, #60]	@ (8005a78 <xTaskIncrementTick+0x22c>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	3301      	adds	r3, #1
 8005a40:	4a0d      	ldr	r2, [pc, #52]	@ (8005a78 <xTaskIncrementTick+0x22c>)
 8005a42:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8005a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	3728      	adds	r7, #40	@ 0x28
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}
 8005a4e:	bf00      	nop
 8005a50:	20000254 	.word	0x20000254
 8005a54:	20000230 	.word	0x20000230
 8005a58:	200001e4 	.word	0x200001e4
 8005a5c:	200001e8 	.word	0x200001e8
 8005a60:	20000244 	.word	0x20000244
 8005a64:	2000024c 	.word	0x2000024c
 8005a68:	20000234 	.word	0x20000234
 8005a6c:	20000158 	.word	0x20000158
 8005a70:	20000154 	.word	0x20000154
 8005a74:	20000240 	.word	0x20000240
 8005a78:	2000023c 	.word	0x2000023c

08005a7c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b087      	sub	sp, #28
 8005a80:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005a82:	4b27      	ldr	r3, [pc, #156]	@ (8005b20 <vTaskSwitchContext+0xa4>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d003      	beq.n	8005a92 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8005a8a:	4b26      	ldr	r3, [pc, #152]	@ (8005b24 <vTaskSwitchContext+0xa8>)
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8005a90:	e040      	b.n	8005b14 <vTaskSwitchContext+0x98>
        xYieldPending = pdFALSE;
 8005a92:	4b24      	ldr	r3, [pc, #144]	@ (8005b24 <vTaskSwitchContext+0xa8>)
 8005a94:	2200      	movs	r2, #0
 8005a96:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a98:	4b23      	ldr	r3, [pc, #140]	@ (8005b28 <vTaskSwitchContext+0xac>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	fab3 f383 	clz	r3, r3
 8005aa4:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8005aa6:	7afb      	ldrb	r3, [r7, #11]
 8005aa8:	f1c3 031f 	rsb	r3, r3, #31
 8005aac:	617b      	str	r3, [r7, #20]
 8005aae:	491f      	ldr	r1, [pc, #124]	@ (8005b2c <vTaskSwitchContext+0xb0>)
 8005ab0:	697a      	ldr	r2, [r7, #20]
 8005ab2:	4613      	mov	r3, r2
 8005ab4:	009b      	lsls	r3, r3, #2
 8005ab6:	4413      	add	r3, r2
 8005ab8:	009b      	lsls	r3, r3, #2
 8005aba:	440b      	add	r3, r1
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d10b      	bne.n	8005ada <vTaskSwitchContext+0x5e>
        __asm volatile
 8005ac2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ac6:	f383 8811 	msr	BASEPRI, r3
 8005aca:	f3bf 8f6f 	isb	sy
 8005ace:	f3bf 8f4f 	dsb	sy
 8005ad2:	607b      	str	r3, [r7, #4]
    }
 8005ad4:	bf00      	nop
 8005ad6:	bf00      	nop
 8005ad8:	e7fd      	b.n	8005ad6 <vTaskSwitchContext+0x5a>
 8005ada:	697a      	ldr	r2, [r7, #20]
 8005adc:	4613      	mov	r3, r2
 8005ade:	009b      	lsls	r3, r3, #2
 8005ae0:	4413      	add	r3, r2
 8005ae2:	009b      	lsls	r3, r3, #2
 8005ae4:	4a11      	ldr	r2, [pc, #68]	@ (8005b2c <vTaskSwitchContext+0xb0>)
 8005ae6:	4413      	add	r3, r2
 8005ae8:	613b      	str	r3, [r7, #16]
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	685a      	ldr	r2, [r3, #4]
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	605a      	str	r2, [r3, #4]
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	685a      	ldr	r2, [r3, #4]
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	3308      	adds	r3, #8
 8005afc:	429a      	cmp	r2, r3
 8005afe:	d104      	bne.n	8005b0a <vTaskSwitchContext+0x8e>
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	685a      	ldr	r2, [r3, #4]
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	605a      	str	r2, [r3, #4]
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	68db      	ldr	r3, [r3, #12]
 8005b10:	4a07      	ldr	r2, [pc, #28]	@ (8005b30 <vTaskSwitchContext+0xb4>)
 8005b12:	6013      	str	r3, [r2, #0]
}
 8005b14:	bf00      	nop
 8005b16:	371c      	adds	r7, #28
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1e:	4770      	bx	lr
 8005b20:	20000254 	.word	0x20000254
 8005b24:	20000240 	.word	0x20000240
 8005b28:	20000234 	.word	0x20000234
 8005b2c:	20000158 	.word	0x20000158
 8005b30:	20000154 	.word	0x20000154

08005b34 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b084      	sub	sp, #16
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
 8005b3c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d10b      	bne.n	8005b5c <vTaskPlaceOnEventList+0x28>
        __asm volatile
 8005b44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b48:	f383 8811 	msr	BASEPRI, r3
 8005b4c:	f3bf 8f6f 	isb	sy
 8005b50:	f3bf 8f4f 	dsb	sy
 8005b54:	60fb      	str	r3, [r7, #12]
    }
 8005b56:	bf00      	nop
 8005b58:	bf00      	nop
 8005b5a:	e7fd      	b.n	8005b58 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005b5c:	4b07      	ldr	r3, [pc, #28]	@ (8005b7c <vTaskPlaceOnEventList+0x48>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	3318      	adds	r3, #24
 8005b62:	4619      	mov	r1, r3
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f7fe fc60 	bl	800442a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005b6a:	2101      	movs	r1, #1
 8005b6c:	6838      	ldr	r0, [r7, #0]
 8005b6e:	f000 fe2b 	bl	80067c8 <prvAddCurrentTaskToDelayedList>
}
 8005b72:	bf00      	nop
 8005b74:	3710      	adds	r7, #16
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}
 8005b7a:	bf00      	nop
 8005b7c:	20000154 	.word	0x20000154

08005b80 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b086      	sub	sp, #24
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	60f8      	str	r0, [r7, #12]
 8005b88:	60b9      	str	r1, [r7, #8]
 8005b8a:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d10b      	bne.n	8005baa <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 8005b92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b96:	f383 8811 	msr	BASEPRI, r3
 8005b9a:	f3bf 8f6f 	isb	sy
 8005b9e:	f3bf 8f4f 	dsb	sy
 8005ba2:	613b      	str	r3, [r7, #16]
    }
 8005ba4:	bf00      	nop
 8005ba6:	bf00      	nop
 8005ba8:	e7fd      	b.n	8005ba6 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	617b      	str	r3, [r7, #20]
 8005bb0:	4b15      	ldr	r3, [pc, #84]	@ (8005c08 <vTaskPlaceOnEventListRestricted+0x88>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	697a      	ldr	r2, [r7, #20]
 8005bb6:	61da      	str	r2, [r3, #28]
 8005bb8:	4b13      	ldr	r3, [pc, #76]	@ (8005c08 <vTaskPlaceOnEventListRestricted+0x88>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	697a      	ldr	r2, [r7, #20]
 8005bbe:	6892      	ldr	r2, [r2, #8]
 8005bc0:	621a      	str	r2, [r3, #32]
 8005bc2:	4b11      	ldr	r3, [pc, #68]	@ (8005c08 <vTaskPlaceOnEventListRestricted+0x88>)
 8005bc4:	681a      	ldr	r2, [r3, #0]
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	689b      	ldr	r3, [r3, #8]
 8005bca:	3218      	adds	r2, #24
 8005bcc:	605a      	str	r2, [r3, #4]
 8005bce:	4b0e      	ldr	r3, [pc, #56]	@ (8005c08 <vTaskPlaceOnEventListRestricted+0x88>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f103 0218 	add.w	r2, r3, #24
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	609a      	str	r2, [r3, #8]
 8005bda:	4b0b      	ldr	r3, [pc, #44]	@ (8005c08 <vTaskPlaceOnEventListRestricted+0x88>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	68fa      	ldr	r2, [r7, #12]
 8005be0:	629a      	str	r2, [r3, #40]	@ 0x28
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	1c5a      	adds	r2, r3, #1
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d002      	beq.n	8005bf8 <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 8005bf2:	f04f 33ff 	mov.w	r3, #4294967295
 8005bf6:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005bf8:	6879      	ldr	r1, [r7, #4]
 8005bfa:	68b8      	ldr	r0, [r7, #8]
 8005bfc:	f000 fde4 	bl	80067c8 <prvAddCurrentTaskToDelayedList>
    }
 8005c00:	bf00      	nop
 8005c02:	3718      	adds	r7, #24
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}
 8005c08:	20000154 	.word	0x20000154

08005c0c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b08b      	sub	sp, #44	@ 0x2c
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	68db      	ldr	r3, [r3, #12]
 8005c18:	68db      	ldr	r3, [r3, #12]
 8005c1a:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8005c1c:	6a3b      	ldr	r3, [r7, #32]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d10b      	bne.n	8005c3a <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 8005c22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c26:	f383 8811 	msr	BASEPRI, r3
 8005c2a:	f3bf 8f6f 	isb	sy
 8005c2e:	f3bf 8f4f 	dsb	sy
 8005c32:	60fb      	str	r3, [r7, #12]
    }
 8005c34:	bf00      	nop
 8005c36:	bf00      	nop
 8005c38:	e7fd      	b.n	8005c36 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8005c3a:	6a3b      	ldr	r3, [r7, #32]
 8005c3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c3e:	61fb      	str	r3, [r7, #28]
 8005c40:	6a3b      	ldr	r3, [r7, #32]
 8005c42:	69db      	ldr	r3, [r3, #28]
 8005c44:	6a3a      	ldr	r2, [r7, #32]
 8005c46:	6a12      	ldr	r2, [r2, #32]
 8005c48:	609a      	str	r2, [r3, #8]
 8005c4a:	6a3b      	ldr	r3, [r7, #32]
 8005c4c:	6a1b      	ldr	r3, [r3, #32]
 8005c4e:	6a3a      	ldr	r2, [r7, #32]
 8005c50:	69d2      	ldr	r2, [r2, #28]
 8005c52:	605a      	str	r2, [r3, #4]
 8005c54:	69fb      	ldr	r3, [r7, #28]
 8005c56:	685a      	ldr	r2, [r3, #4]
 8005c58:	6a3b      	ldr	r3, [r7, #32]
 8005c5a:	3318      	adds	r3, #24
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	d103      	bne.n	8005c68 <xTaskRemoveFromEventList+0x5c>
 8005c60:	6a3b      	ldr	r3, [r7, #32]
 8005c62:	6a1a      	ldr	r2, [r3, #32]
 8005c64:	69fb      	ldr	r3, [r7, #28]
 8005c66:	605a      	str	r2, [r3, #4]
 8005c68:	6a3b      	ldr	r3, [r7, #32]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	629a      	str	r2, [r3, #40]	@ 0x28
 8005c6e:	69fb      	ldr	r3, [r7, #28]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	1e5a      	subs	r2, r3, #1
 8005c74:	69fb      	ldr	r3, [r7, #28]
 8005c76:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c78:	4b4a      	ldr	r3, [pc, #296]	@ (8005da4 <xTaskRemoveFromEventList+0x198>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d15e      	bne.n	8005d3e <xTaskRemoveFromEventList+0x132>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8005c80:	6a3b      	ldr	r3, [r7, #32]
 8005c82:	695b      	ldr	r3, [r3, #20]
 8005c84:	617b      	str	r3, [r7, #20]
 8005c86:	6a3b      	ldr	r3, [r7, #32]
 8005c88:	689b      	ldr	r3, [r3, #8]
 8005c8a:	6a3a      	ldr	r2, [r7, #32]
 8005c8c:	68d2      	ldr	r2, [r2, #12]
 8005c8e:	609a      	str	r2, [r3, #8]
 8005c90:	6a3b      	ldr	r3, [r7, #32]
 8005c92:	68db      	ldr	r3, [r3, #12]
 8005c94:	6a3a      	ldr	r2, [r7, #32]
 8005c96:	6892      	ldr	r2, [r2, #8]
 8005c98:	605a      	str	r2, [r3, #4]
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	685a      	ldr	r2, [r3, #4]
 8005c9e:	6a3b      	ldr	r3, [r7, #32]
 8005ca0:	3304      	adds	r3, #4
 8005ca2:	429a      	cmp	r2, r3
 8005ca4:	d103      	bne.n	8005cae <xTaskRemoveFromEventList+0xa2>
 8005ca6:	6a3b      	ldr	r3, [r7, #32]
 8005ca8:	68da      	ldr	r2, [r3, #12]
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	605a      	str	r2, [r3, #4]
 8005cae:	6a3b      	ldr	r3, [r7, #32]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	615a      	str	r2, [r3, #20]
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	1e5a      	subs	r2, r3, #1
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8005cbe:	6a3b      	ldr	r3, [r7, #32]
 8005cc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	409a      	lsls	r2, r3
 8005cc6:	4b38      	ldr	r3, [pc, #224]	@ (8005da8 <xTaskRemoveFromEventList+0x19c>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	4a36      	ldr	r2, [pc, #216]	@ (8005da8 <xTaskRemoveFromEventList+0x19c>)
 8005cce:	6013      	str	r3, [r2, #0]
 8005cd0:	6a3b      	ldr	r3, [r7, #32]
 8005cd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cd4:	4935      	ldr	r1, [pc, #212]	@ (8005dac <xTaskRemoveFromEventList+0x1a0>)
 8005cd6:	4613      	mov	r3, r2
 8005cd8:	009b      	lsls	r3, r3, #2
 8005cda:	4413      	add	r3, r2
 8005cdc:	009b      	lsls	r3, r3, #2
 8005cde:	440b      	add	r3, r1
 8005ce0:	3304      	adds	r3, #4
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	613b      	str	r3, [r7, #16]
 8005ce6:	6a3b      	ldr	r3, [r7, #32]
 8005ce8:	693a      	ldr	r2, [r7, #16]
 8005cea:	609a      	str	r2, [r3, #8]
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	689a      	ldr	r2, [r3, #8]
 8005cf0:	6a3b      	ldr	r3, [r7, #32]
 8005cf2:	60da      	str	r2, [r3, #12]
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	689b      	ldr	r3, [r3, #8]
 8005cf8:	6a3a      	ldr	r2, [r7, #32]
 8005cfa:	3204      	adds	r2, #4
 8005cfc:	605a      	str	r2, [r3, #4]
 8005cfe:	6a3b      	ldr	r3, [r7, #32]
 8005d00:	1d1a      	adds	r2, r3, #4
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	609a      	str	r2, [r3, #8]
 8005d06:	6a3b      	ldr	r3, [r7, #32]
 8005d08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d0a:	4613      	mov	r3, r2
 8005d0c:	009b      	lsls	r3, r3, #2
 8005d0e:	4413      	add	r3, r2
 8005d10:	009b      	lsls	r3, r3, #2
 8005d12:	4a26      	ldr	r2, [pc, #152]	@ (8005dac <xTaskRemoveFromEventList+0x1a0>)
 8005d14:	441a      	add	r2, r3
 8005d16:	6a3b      	ldr	r3, [r7, #32]
 8005d18:	615a      	str	r2, [r3, #20]
 8005d1a:	6a3b      	ldr	r3, [r7, #32]
 8005d1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d1e:	4923      	ldr	r1, [pc, #140]	@ (8005dac <xTaskRemoveFromEventList+0x1a0>)
 8005d20:	4613      	mov	r3, r2
 8005d22:	009b      	lsls	r3, r3, #2
 8005d24:	4413      	add	r3, r2
 8005d26:	009b      	lsls	r3, r3, #2
 8005d28:	440b      	add	r3, r1
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	1c59      	adds	r1, r3, #1
 8005d2e:	481f      	ldr	r0, [pc, #124]	@ (8005dac <xTaskRemoveFromEventList+0x1a0>)
 8005d30:	4613      	mov	r3, r2
 8005d32:	009b      	lsls	r3, r3, #2
 8005d34:	4413      	add	r3, r2
 8005d36:	009b      	lsls	r3, r3, #2
 8005d38:	4403      	add	r3, r0
 8005d3a:	6019      	str	r1, [r3, #0]
 8005d3c:	e01b      	b.n	8005d76 <xTaskRemoveFromEventList+0x16a>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005d3e:	4b1c      	ldr	r3, [pc, #112]	@ (8005db0 <xTaskRemoveFromEventList+0x1a4>)
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	61bb      	str	r3, [r7, #24]
 8005d44:	6a3b      	ldr	r3, [r7, #32]
 8005d46:	69ba      	ldr	r2, [r7, #24]
 8005d48:	61da      	str	r2, [r3, #28]
 8005d4a:	69bb      	ldr	r3, [r7, #24]
 8005d4c:	689a      	ldr	r2, [r3, #8]
 8005d4e:	6a3b      	ldr	r3, [r7, #32]
 8005d50:	621a      	str	r2, [r3, #32]
 8005d52:	69bb      	ldr	r3, [r7, #24]
 8005d54:	689b      	ldr	r3, [r3, #8]
 8005d56:	6a3a      	ldr	r2, [r7, #32]
 8005d58:	3218      	adds	r2, #24
 8005d5a:	605a      	str	r2, [r3, #4]
 8005d5c:	6a3b      	ldr	r3, [r7, #32]
 8005d5e:	f103 0218 	add.w	r2, r3, #24
 8005d62:	69bb      	ldr	r3, [r7, #24]
 8005d64:	609a      	str	r2, [r3, #8]
 8005d66:	6a3b      	ldr	r3, [r7, #32]
 8005d68:	4a11      	ldr	r2, [pc, #68]	@ (8005db0 <xTaskRemoveFromEventList+0x1a4>)
 8005d6a:	629a      	str	r2, [r3, #40]	@ 0x28
 8005d6c:	4b10      	ldr	r3, [pc, #64]	@ (8005db0 <xTaskRemoveFromEventList+0x1a4>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	3301      	adds	r3, #1
 8005d72:	4a0f      	ldr	r2, [pc, #60]	@ (8005db0 <xTaskRemoveFromEventList+0x1a4>)
 8005d74:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005d76:	6a3b      	ldr	r3, [r7, #32]
 8005d78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d7a:	4b0e      	ldr	r3, [pc, #56]	@ (8005db4 <xTaskRemoveFromEventList+0x1a8>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d80:	429a      	cmp	r2, r3
 8005d82:	d905      	bls.n	8005d90 <xTaskRemoveFromEventList+0x184>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8005d84:	2301      	movs	r3, #1
 8005d86:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8005d88:	4b0b      	ldr	r3, [pc, #44]	@ (8005db8 <xTaskRemoveFromEventList+0x1ac>)
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	601a      	str	r2, [r3, #0]
 8005d8e:	e001      	b.n	8005d94 <xTaskRemoveFromEventList+0x188>
    }
    else
    {
        xReturn = pdFALSE;
 8005d90:	2300      	movs	r3, #0
 8005d92:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    return xReturn;
 8005d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	372c      	adds	r7, #44	@ 0x2c
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da0:	4770      	bx	lr
 8005da2:	bf00      	nop
 8005da4:	20000254 	.word	0x20000254
 8005da8:	20000234 	.word	0x20000234
 8005dac:	20000158 	.word	0x20000158
 8005db0:	200001ec 	.word	0x200001ec
 8005db4:	20000154 	.word	0x20000154
 8005db8:	20000240 	.word	0x20000240

08005dbc <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b083      	sub	sp, #12
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005dc4:	4b06      	ldr	r3, [pc, #24]	@ (8005de0 <vTaskInternalSetTimeOutState+0x24>)
 8005dc6:	681a      	ldr	r2, [r3, #0]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8005dcc:	4b05      	ldr	r3, [pc, #20]	@ (8005de4 <vTaskInternalSetTimeOutState+0x28>)
 8005dce:	681a      	ldr	r2, [r3, #0]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	605a      	str	r2, [r3, #4]
}
 8005dd4:	bf00      	nop
 8005dd6:	370c      	adds	r7, #12
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dde:	4770      	bx	lr
 8005de0:	20000244 	.word	0x20000244
 8005de4:	20000230 	.word	0x20000230

08005de8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b088      	sub	sp, #32
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
 8005df0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d10b      	bne.n	8005e10 <xTaskCheckForTimeOut+0x28>
        __asm volatile
 8005df8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dfc:	f383 8811 	msr	BASEPRI, r3
 8005e00:	f3bf 8f6f 	isb	sy
 8005e04:	f3bf 8f4f 	dsb	sy
 8005e08:	613b      	str	r3, [r7, #16]
    }
 8005e0a:	bf00      	nop
 8005e0c:	bf00      	nop
 8005e0e:	e7fd      	b.n	8005e0c <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d10b      	bne.n	8005e2e <xTaskCheckForTimeOut+0x46>
        __asm volatile
 8005e16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e1a:	f383 8811 	msr	BASEPRI, r3
 8005e1e:	f3bf 8f6f 	isb	sy
 8005e22:	f3bf 8f4f 	dsb	sy
 8005e26:	60fb      	str	r3, [r7, #12]
    }
 8005e28:	bf00      	nop
 8005e2a:	bf00      	nop
 8005e2c:	e7fd      	b.n	8005e2a <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 8005e2e:	f001 f9d5 	bl	80071dc <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8005e32:	4b1f      	ldr	r3, [pc, #124]	@ (8005eb0 <xTaskCheckForTimeOut+0xc8>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	69ba      	ldr	r2, [r7, #24]
 8005e3e:	1ad3      	subs	r3, r2, r3
 8005e40:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e4a:	d102      	bne.n	8005e52 <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	61fb      	str	r3, [r7, #28]
 8005e50:	e026      	b.n	8005ea0 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681a      	ldr	r2, [r3, #0]
 8005e56:	4b17      	ldr	r3, [pc, #92]	@ (8005eb4 <xTaskCheckForTimeOut+0xcc>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	429a      	cmp	r2, r3
 8005e5c:	d00a      	beq.n	8005e74 <xTaskCheckForTimeOut+0x8c>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	69ba      	ldr	r2, [r7, #24]
 8005e64:	429a      	cmp	r2, r3
 8005e66:	d305      	bcc.n	8005e74 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	601a      	str	r2, [r3, #0]
 8005e72:	e015      	b.n	8005ea0 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	697a      	ldr	r2, [r7, #20]
 8005e7a:	429a      	cmp	r2, r3
 8005e7c:	d20b      	bcs.n	8005e96 <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	681a      	ldr	r2, [r3, #0]
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	1ad2      	subs	r2, r2, r3
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f7ff ff96 	bl	8005dbc <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8005e90:	2300      	movs	r3, #0
 8005e92:	61fb      	str	r3, [r7, #28]
 8005e94:	e004      	b.n	8005ea0 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8005ea0:	f001 f9ce 	bl	8007240 <vPortExitCritical>

    return xReturn;
 8005ea4:	69fb      	ldr	r3, [r7, #28]
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3720      	adds	r7, #32
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}
 8005eae:	bf00      	nop
 8005eb0:	20000230 	.word	0x20000230
 8005eb4:	20000244 	.word	0x20000244

08005eb8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005eb8:	b480      	push	{r7}
 8005eba:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8005ebc:	4b03      	ldr	r3, [pc, #12]	@ (8005ecc <vTaskMissedYield+0x14>)
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	601a      	str	r2, [r3, #0]
}
 8005ec2:	bf00      	nop
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr
 8005ecc:	20000240 	.word	0x20000240

08005ed0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b082      	sub	sp, #8
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8005ed8:	f000 f852 	bl	8005f80 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005edc:	4b06      	ldr	r3, [pc, #24]	@ (8005ef8 <prvIdleTask+0x28>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	d9f9      	bls.n	8005ed8 <prvIdleTask+0x8>
            {
                taskYIELD();
 8005ee4:	4b05      	ldr	r3, [pc, #20]	@ (8005efc <prvIdleTask+0x2c>)
 8005ee6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005eea:	601a      	str	r2, [r3, #0]
 8005eec:	f3bf 8f4f 	dsb	sy
 8005ef0:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8005ef4:	e7f0      	b.n	8005ed8 <prvIdleTask+0x8>
 8005ef6:	bf00      	nop
 8005ef8:	20000158 	.word	0x20000158
 8005efc:	e000ed04 	.word	0xe000ed04

08005f00 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b082      	sub	sp, #8
 8005f04:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005f06:	2300      	movs	r3, #0
 8005f08:	607b      	str	r3, [r7, #4]
 8005f0a:	e00c      	b.n	8005f26 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005f0c:	687a      	ldr	r2, [r7, #4]
 8005f0e:	4613      	mov	r3, r2
 8005f10:	009b      	lsls	r3, r3, #2
 8005f12:	4413      	add	r3, r2
 8005f14:	009b      	lsls	r3, r3, #2
 8005f16:	4a12      	ldr	r2, [pc, #72]	@ (8005f60 <prvInitialiseTaskLists+0x60>)
 8005f18:	4413      	add	r3, r2
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f7fe fa58 	bl	80043d0 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	3301      	adds	r3, #1
 8005f24:	607b      	str	r3, [r7, #4]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2b04      	cmp	r3, #4
 8005f2a:	d9ef      	bls.n	8005f0c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8005f2c:	480d      	ldr	r0, [pc, #52]	@ (8005f64 <prvInitialiseTaskLists+0x64>)
 8005f2e:	f7fe fa4f 	bl	80043d0 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8005f32:	480d      	ldr	r0, [pc, #52]	@ (8005f68 <prvInitialiseTaskLists+0x68>)
 8005f34:	f7fe fa4c 	bl	80043d0 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8005f38:	480c      	ldr	r0, [pc, #48]	@ (8005f6c <prvInitialiseTaskLists+0x6c>)
 8005f3a:	f7fe fa49 	bl	80043d0 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8005f3e:	480c      	ldr	r0, [pc, #48]	@ (8005f70 <prvInitialiseTaskLists+0x70>)
 8005f40:	f7fe fa46 	bl	80043d0 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8005f44:	480b      	ldr	r0, [pc, #44]	@ (8005f74 <prvInitialiseTaskLists+0x74>)
 8005f46:	f7fe fa43 	bl	80043d0 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8005f4a:	4b0b      	ldr	r3, [pc, #44]	@ (8005f78 <prvInitialiseTaskLists+0x78>)
 8005f4c:	4a05      	ldr	r2, [pc, #20]	@ (8005f64 <prvInitialiseTaskLists+0x64>)
 8005f4e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005f50:	4b0a      	ldr	r3, [pc, #40]	@ (8005f7c <prvInitialiseTaskLists+0x7c>)
 8005f52:	4a05      	ldr	r2, [pc, #20]	@ (8005f68 <prvInitialiseTaskLists+0x68>)
 8005f54:	601a      	str	r2, [r3, #0]
}
 8005f56:	bf00      	nop
 8005f58:	3708      	adds	r7, #8
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}
 8005f5e:	bf00      	nop
 8005f60:	20000158 	.word	0x20000158
 8005f64:	200001bc 	.word	0x200001bc
 8005f68:	200001d0 	.word	0x200001d0
 8005f6c:	200001ec 	.word	0x200001ec
 8005f70:	20000200 	.word	0x20000200
 8005f74:	20000218 	.word	0x20000218
 8005f78:	200001e4 	.word	0x200001e4
 8005f7c:	200001e8 	.word	0x200001e8

08005f80 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b082      	sub	sp, #8
 8005f84:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005f86:	e019      	b.n	8005fbc <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8005f88:	f001 f928 	bl	80071dc <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f8c:	4b10      	ldr	r3, [pc, #64]	@ (8005fd0 <prvCheckTasksWaitingTermination+0x50>)
 8005f8e:	68db      	ldr	r3, [r3, #12]
 8005f90:	68db      	ldr	r3, [r3, #12]
 8005f92:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	3304      	adds	r3, #4
 8005f98:	4618      	mov	r0, r3
 8005f9a:	f7fe fa7f 	bl	800449c <uxListRemove>
                --uxCurrentNumberOfTasks;
 8005f9e:	4b0d      	ldr	r3, [pc, #52]	@ (8005fd4 <prvCheckTasksWaitingTermination+0x54>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	3b01      	subs	r3, #1
 8005fa4:	4a0b      	ldr	r2, [pc, #44]	@ (8005fd4 <prvCheckTasksWaitingTermination+0x54>)
 8005fa6:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8005fa8:	4b0b      	ldr	r3, [pc, #44]	@ (8005fd8 <prvCheckTasksWaitingTermination+0x58>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	3b01      	subs	r3, #1
 8005fae:	4a0a      	ldr	r2, [pc, #40]	@ (8005fd8 <prvCheckTasksWaitingTermination+0x58>)
 8005fb0:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8005fb2:	f001 f945 	bl	8007240 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f000 f810 	bl	8005fdc <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005fbc:	4b06      	ldr	r3, [pc, #24]	@ (8005fd8 <prvCheckTasksWaitingTermination+0x58>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d1e1      	bne.n	8005f88 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8005fc4:	bf00      	nop
 8005fc6:	bf00      	nop
 8005fc8:	3708      	adds	r7, #8
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}
 8005fce:	bf00      	nop
 8005fd0:	20000200 	.word	0x20000200
 8005fd4:	2000022c 	.word	0x2000022c
 8005fd8:	20000214 	.word	0x20000214

08005fdc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b082      	sub	sp, #8
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fe8:	4618      	mov	r0, r3
 8005fea:	f001 fadd 	bl	80075a8 <vPortFree>
            vPortFree( pxTCB );
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f001 fada 	bl	80075a8 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8005ff4:	bf00      	nop
 8005ff6:	3708      	adds	r7, #8
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bd80      	pop	{r7, pc}

08005ffc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006000:	4b0a      	ldr	r3, [pc, #40]	@ (800602c <prvResetNextTaskUnblockTime+0x30>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d104      	bne.n	8006014 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800600a:	4b09      	ldr	r3, [pc, #36]	@ (8006030 <prvResetNextTaskUnblockTime+0x34>)
 800600c:	f04f 32ff 	mov.w	r2, #4294967295
 8006010:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8006012:	e005      	b.n	8006020 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006014:	4b05      	ldr	r3, [pc, #20]	@ (800602c <prvResetNextTaskUnblockTime+0x30>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	68db      	ldr	r3, [r3, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a04      	ldr	r2, [pc, #16]	@ (8006030 <prvResetNextTaskUnblockTime+0x34>)
 800601e:	6013      	str	r3, [r2, #0]
}
 8006020:	bf00      	nop
 8006022:	46bd      	mov	sp, r7
 8006024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006028:	4770      	bx	lr
 800602a:	bf00      	nop
 800602c:	200001e4 	.word	0x200001e4
 8006030:	2000024c 	.word	0x2000024c

08006034 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8006034:	b480      	push	{r7}
 8006036:	b083      	sub	sp, #12
 8006038:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800603a:	4b0b      	ldr	r3, [pc, #44]	@ (8006068 <xTaskGetSchedulerState+0x34>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d102      	bne.n	8006048 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8006042:	2301      	movs	r3, #1
 8006044:	607b      	str	r3, [r7, #4]
 8006046:	e008      	b.n	800605a <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006048:	4b08      	ldr	r3, [pc, #32]	@ (800606c <xTaskGetSchedulerState+0x38>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d102      	bne.n	8006056 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8006050:	2302      	movs	r3, #2
 8006052:	607b      	str	r3, [r7, #4]
 8006054:	e001      	b.n	800605a <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8006056:	2300      	movs	r3, #0
 8006058:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800605a:	687b      	ldr	r3, [r7, #4]
    }
 800605c:	4618      	mov	r0, r3
 800605e:	370c      	adds	r7, #12
 8006060:	46bd      	mov	sp, r7
 8006062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006066:	4770      	bx	lr
 8006068:	20000238 	.word	0x20000238
 800606c:	20000254 	.word	0x20000254

08006070 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8006070:	b580      	push	{r7, lr}
 8006072:	b088      	sub	sp, #32
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 800607c:	2300      	movs	r3, #0
 800607e:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2b00      	cmp	r3, #0
 8006084:	f000 808e 	beq.w	80061a4 <xTaskPriorityDisinherit+0x134>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8006088:	4b49      	ldr	r3, [pc, #292]	@ (80061b0 <xTaskPriorityDisinherit+0x140>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	69ba      	ldr	r2, [r7, #24]
 800608e:	429a      	cmp	r2, r3
 8006090:	d00b      	beq.n	80060aa <xTaskPriorityDisinherit+0x3a>
        __asm volatile
 8006092:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006096:	f383 8811 	msr	BASEPRI, r3
 800609a:	f3bf 8f6f 	isb	sy
 800609e:	f3bf 8f4f 	dsb	sy
 80060a2:	613b      	str	r3, [r7, #16]
    }
 80060a4:	bf00      	nop
 80060a6:	bf00      	nop
 80060a8:	e7fd      	b.n	80060a6 <xTaskPriorityDisinherit+0x36>
            configASSERT( pxTCB->uxMutexesHeld );
 80060aa:	69bb      	ldr	r3, [r7, #24]
 80060ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d10b      	bne.n	80060ca <xTaskPriorityDisinherit+0x5a>
        __asm volatile
 80060b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060b6:	f383 8811 	msr	BASEPRI, r3
 80060ba:	f3bf 8f6f 	isb	sy
 80060be:	f3bf 8f4f 	dsb	sy
 80060c2:	60fb      	str	r3, [r7, #12]
    }
 80060c4:	bf00      	nop
 80060c6:	bf00      	nop
 80060c8:	e7fd      	b.n	80060c6 <xTaskPriorityDisinherit+0x56>
            ( pxTCB->uxMutexesHeld )--;
 80060ca:	69bb      	ldr	r3, [r7, #24]
 80060cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060ce:	1e5a      	subs	r2, r3, #1
 80060d0:	69bb      	ldr	r3, [r7, #24]
 80060d2:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80060d4:	69bb      	ldr	r3, [r7, #24]
 80060d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060d8:	69bb      	ldr	r3, [r7, #24]
 80060da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060dc:	429a      	cmp	r2, r3
 80060de:	d061      	beq.n	80061a4 <xTaskPriorityDisinherit+0x134>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80060e0:	69bb      	ldr	r3, [r7, #24]
 80060e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d15d      	bne.n	80061a4 <xTaskPriorityDisinherit+0x134>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80060e8:	69bb      	ldr	r3, [r7, #24]
 80060ea:	3304      	adds	r3, #4
 80060ec:	4618      	mov	r0, r3
 80060ee:	f7fe f9d5 	bl	800449c <uxListRemove>
 80060f2:	4603      	mov	r3, r0
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d10a      	bne.n	800610e <xTaskPriorityDisinherit+0x9e>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80060f8:	69bb      	ldr	r3, [r7, #24]
 80060fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060fc:	2201      	movs	r2, #1
 80060fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006102:	43da      	mvns	r2, r3
 8006104:	4b2b      	ldr	r3, [pc, #172]	@ (80061b4 <xTaskPriorityDisinherit+0x144>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4013      	ands	r3, r2
 800610a:	4a2a      	ldr	r2, [pc, #168]	@ (80061b4 <xTaskPriorityDisinherit+0x144>)
 800610c:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800610e:	69bb      	ldr	r3, [r7, #24]
 8006110:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006112:	69bb      	ldr	r3, [r7, #24]
 8006114:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006116:	69bb      	ldr	r3, [r7, #24]
 8006118:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800611a:	f1c3 0205 	rsb	r2, r3, #5
 800611e:	69bb      	ldr	r3, [r7, #24]
 8006120:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8006122:	69bb      	ldr	r3, [r7, #24]
 8006124:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006126:	2201      	movs	r2, #1
 8006128:	409a      	lsls	r2, r3
 800612a:	4b22      	ldr	r3, [pc, #136]	@ (80061b4 <xTaskPriorityDisinherit+0x144>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4313      	orrs	r3, r2
 8006130:	4a20      	ldr	r2, [pc, #128]	@ (80061b4 <xTaskPriorityDisinherit+0x144>)
 8006132:	6013      	str	r3, [r2, #0]
 8006134:	69bb      	ldr	r3, [r7, #24]
 8006136:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006138:	491f      	ldr	r1, [pc, #124]	@ (80061b8 <xTaskPriorityDisinherit+0x148>)
 800613a:	4613      	mov	r3, r2
 800613c:	009b      	lsls	r3, r3, #2
 800613e:	4413      	add	r3, r2
 8006140:	009b      	lsls	r3, r3, #2
 8006142:	440b      	add	r3, r1
 8006144:	3304      	adds	r3, #4
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	617b      	str	r3, [r7, #20]
 800614a:	69bb      	ldr	r3, [r7, #24]
 800614c:	697a      	ldr	r2, [r7, #20]
 800614e:	609a      	str	r2, [r3, #8]
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	689a      	ldr	r2, [r3, #8]
 8006154:	69bb      	ldr	r3, [r7, #24]
 8006156:	60da      	str	r2, [r3, #12]
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	689b      	ldr	r3, [r3, #8]
 800615c:	69ba      	ldr	r2, [r7, #24]
 800615e:	3204      	adds	r2, #4
 8006160:	605a      	str	r2, [r3, #4]
 8006162:	69bb      	ldr	r3, [r7, #24]
 8006164:	1d1a      	adds	r2, r3, #4
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	609a      	str	r2, [r3, #8]
 800616a:	69bb      	ldr	r3, [r7, #24]
 800616c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800616e:	4613      	mov	r3, r2
 8006170:	009b      	lsls	r3, r3, #2
 8006172:	4413      	add	r3, r2
 8006174:	009b      	lsls	r3, r3, #2
 8006176:	4a10      	ldr	r2, [pc, #64]	@ (80061b8 <xTaskPriorityDisinherit+0x148>)
 8006178:	441a      	add	r2, r3
 800617a:	69bb      	ldr	r3, [r7, #24]
 800617c:	615a      	str	r2, [r3, #20]
 800617e:	69bb      	ldr	r3, [r7, #24]
 8006180:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006182:	490d      	ldr	r1, [pc, #52]	@ (80061b8 <xTaskPriorityDisinherit+0x148>)
 8006184:	4613      	mov	r3, r2
 8006186:	009b      	lsls	r3, r3, #2
 8006188:	4413      	add	r3, r2
 800618a:	009b      	lsls	r3, r3, #2
 800618c:	440b      	add	r3, r1
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	1c59      	adds	r1, r3, #1
 8006192:	4809      	ldr	r0, [pc, #36]	@ (80061b8 <xTaskPriorityDisinherit+0x148>)
 8006194:	4613      	mov	r3, r2
 8006196:	009b      	lsls	r3, r3, #2
 8006198:	4413      	add	r3, r2
 800619a:	009b      	lsls	r3, r3, #2
 800619c:	4403      	add	r3, r0
 800619e:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80061a0:	2301      	movs	r3, #1
 80061a2:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80061a4:	69fb      	ldr	r3, [r7, #28]
    }
 80061a6:	4618      	mov	r0, r3
 80061a8:	3720      	adds	r7, #32
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}
 80061ae:	bf00      	nop
 80061b0:	20000154 	.word	0x20000154
 80061b4:	20000234 	.word	0x20000234
 80061b8:	20000158 	.word	0x20000158

080061bc <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 80061bc:	b580      	push	{r7, lr}
 80061be:	b086      	sub	sp, #24
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	60f8      	str	r0, [r7, #12]
 80061c4:	60b9      	str	r1, [r7, #8]
 80061c6:	607a      	str	r2, [r7, #4]
 80061c8:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d00b      	beq.n	80061e8 <xTaskGenericNotifyWait+0x2c>
        __asm volatile
 80061d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061d4:	f383 8811 	msr	BASEPRI, r3
 80061d8:	f3bf 8f6f 	isb	sy
 80061dc:	f3bf 8f4f 	dsb	sy
 80061e0:	613b      	str	r3, [r7, #16]
    }
 80061e2:	bf00      	nop
 80061e4:	bf00      	nop
 80061e6:	e7fd      	b.n	80061e4 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 80061e8:	f000 fff8 	bl	80071dc <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 80061ec:	4b31      	ldr	r3, [pc, #196]	@ (80062b4 <xTaskGenericNotifyWait+0xf8>)
 80061ee:	681a      	ldr	r2, [r3, #0]
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	4413      	add	r3, r2
 80061f4:	3354      	adds	r3, #84	@ 0x54
 80061f6:	781b      	ldrb	r3, [r3, #0]
 80061f8:	b2db      	uxtb	r3, r3
 80061fa:	2b02      	cmp	r3, #2
 80061fc:	d022      	beq.n	8006244 <xTaskGenericNotifyWait+0x88>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 80061fe:	4b2d      	ldr	r3, [pc, #180]	@ (80062b4 <xTaskGenericNotifyWait+0xf8>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	68fa      	ldr	r2, [r7, #12]
 8006204:	3214      	adds	r2, #20
 8006206:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800620a:	68ba      	ldr	r2, [r7, #8]
 800620c:	43d2      	mvns	r2, r2
 800620e:	4011      	ands	r1, r2
 8006210:	68fa      	ldr	r2, [r7, #12]
 8006212:	3214      	adds	r2, #20
 8006214:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8006218:	4b26      	ldr	r3, [pc, #152]	@ (80062b4 <xTaskGenericNotifyWait+0xf8>)
 800621a:	681a      	ldr	r2, [r3, #0]
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	4413      	add	r3, r2
 8006220:	3354      	adds	r3, #84	@ 0x54
 8006222:	2201      	movs	r2, #1
 8006224:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8006226:	6a3b      	ldr	r3, [r7, #32]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d00b      	beq.n	8006244 <xTaskGenericNotifyWait+0x88>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800622c:	2101      	movs	r1, #1
 800622e:	6a38      	ldr	r0, [r7, #32]
 8006230:	f000 faca 	bl	80067c8 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8006234:	4b20      	ldr	r3, [pc, #128]	@ (80062b8 <xTaskGenericNotifyWait+0xfc>)
 8006236:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800623a:	601a      	str	r2, [r3, #0]
 800623c:	f3bf 8f4f 	dsb	sy
 8006240:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8006244:	f000 fffc 	bl	8007240 <vPortExitCritical>

        taskENTER_CRITICAL();
 8006248:	f000 ffc8 	bl	80071dc <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );

            if( pulNotificationValue != NULL )
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d007      	beq.n	8006262 <xTaskGenericNotifyWait+0xa6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8006252:	4b18      	ldr	r3, [pc, #96]	@ (80062b4 <xTaskGenericNotifyWait+0xf8>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	68fa      	ldr	r2, [r7, #12]
 8006258:	3214      	adds	r2, #20
 800625a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8006262:	4b14      	ldr	r3, [pc, #80]	@ (80062b4 <xTaskGenericNotifyWait+0xf8>)
 8006264:	681a      	ldr	r2, [r3, #0]
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	4413      	add	r3, r2
 800626a:	3354      	adds	r3, #84	@ 0x54
 800626c:	781b      	ldrb	r3, [r3, #0]
 800626e:	b2db      	uxtb	r3, r3
 8006270:	2b02      	cmp	r3, #2
 8006272:	d002      	beq.n	800627a <xTaskGenericNotifyWait+0xbe>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8006274:	2300      	movs	r3, #0
 8006276:	617b      	str	r3, [r7, #20]
 8006278:	e00e      	b.n	8006298 <xTaskGenericNotifyWait+0xdc>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 800627a:	4b0e      	ldr	r3, [pc, #56]	@ (80062b4 <xTaskGenericNotifyWait+0xf8>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	68fa      	ldr	r2, [r7, #12]
 8006280:	3214      	adds	r2, #20
 8006282:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006286:	687a      	ldr	r2, [r7, #4]
 8006288:	43d2      	mvns	r2, r2
 800628a:	4011      	ands	r1, r2
 800628c:	68fa      	ldr	r2, [r7, #12]
 800628e:	3214      	adds	r2, #20
 8006290:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8006294:	2301      	movs	r3, #1
 8006296:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8006298:	4b06      	ldr	r3, [pc, #24]	@ (80062b4 <xTaskGenericNotifyWait+0xf8>)
 800629a:	681a      	ldr	r2, [r3, #0]
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	4413      	add	r3, r2
 80062a0:	3354      	adds	r3, #84	@ 0x54
 80062a2:	2200      	movs	r2, #0
 80062a4:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 80062a6:	f000 ffcb 	bl	8007240 <vPortExitCritical>

        return xReturn;
 80062aa:	697b      	ldr	r3, [r7, #20]
    }
 80062ac:	4618      	mov	r0, r3
 80062ae:	3718      	adds	r7, #24
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bd80      	pop	{r7, pc}
 80062b4:	20000154 	.word	0x20000154
 80062b8:	e000ed04 	.word	0xe000ed04

080062bc <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 80062bc:	b580      	push	{r7, lr}
 80062be:	b08e      	sub	sp, #56	@ 0x38
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	60f8      	str	r0, [r7, #12]
 80062c4:	60b9      	str	r1, [r7, #8]
 80062c6:	607a      	str	r2, [r7, #4]
 80062c8:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 80062ca:	2301      	movs	r3, #1
 80062cc:	637b      	str	r3, [r7, #52]	@ 0x34
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d00b      	beq.n	80062ec <xTaskGenericNotify+0x30>
        __asm volatile
 80062d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062d8:	f383 8811 	msr	BASEPRI, r3
 80062dc:	f3bf 8f6f 	isb	sy
 80062e0:	f3bf 8f4f 	dsb	sy
 80062e4:	623b      	str	r3, [r7, #32]
    }
 80062e6:	bf00      	nop
 80062e8:	bf00      	nop
 80062ea:	e7fd      	b.n	80062e8 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d10b      	bne.n	800630a <xTaskGenericNotify+0x4e>
        __asm volatile
 80062f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062f6:	f383 8811 	msr	BASEPRI, r3
 80062fa:	f3bf 8f6f 	isb	sy
 80062fe:	f3bf 8f4f 	dsb	sy
 8006302:	61fb      	str	r3, [r7, #28]
    }
 8006304:	bf00      	nop
 8006306:	bf00      	nop
 8006308:	e7fd      	b.n	8006306 <xTaskGenericNotify+0x4a>
        pxTCB = xTaskToNotify;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	633b      	str	r3, [r7, #48]	@ 0x30

        taskENTER_CRITICAL();
 800630e:	f000 ff65 	bl	80071dc <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8006312:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006314:	2b00      	cmp	r3, #0
 8006316:	d006      	beq.n	8006326 <xTaskGenericNotify+0x6a>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8006318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800631a:	68ba      	ldr	r2, [r7, #8]
 800631c:	3214      	adds	r2, #20
 800631e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006322:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006324:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8006326:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	4413      	add	r3, r2
 800632c:	3354      	adds	r3, #84	@ 0x54
 800632e:	781b      	ldrb	r3, [r3, #0]
 8006330:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8006334:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	4413      	add	r3, r2
 800633a:	3354      	adds	r3, #84	@ 0x54
 800633c:	2202      	movs	r2, #2
 800633e:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8006340:	78fb      	ldrb	r3, [r7, #3]
 8006342:	2b04      	cmp	r3, #4
 8006344:	d83b      	bhi.n	80063be <xTaskGenericNotify+0x102>
 8006346:	a201      	add	r2, pc, #4	@ (adr r2, 800634c <xTaskGenericNotify+0x90>)
 8006348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800634c:	080063df 	.word	0x080063df
 8006350:	08006361 	.word	0x08006361
 8006354:	0800637d 	.word	0x0800637d
 8006358:	08006395 	.word	0x08006395
 800635c:	080063a3 	.word	0x080063a3
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8006360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006362:	68ba      	ldr	r2, [r7, #8]
 8006364:	3214      	adds	r2, #20
 8006366:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	ea42 0103 	orr.w	r1, r2, r3
 8006370:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006372:	68ba      	ldr	r2, [r7, #8]
 8006374:	3214      	adds	r2, #20
 8006376:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800637a:	e033      	b.n	80063e4 <xTaskGenericNotify+0x128>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 800637c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800637e:	68ba      	ldr	r2, [r7, #8]
 8006380:	3214      	adds	r2, #20
 8006382:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006386:	1c59      	adds	r1, r3, #1
 8006388:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800638a:	68ba      	ldr	r2, [r7, #8]
 800638c:	3214      	adds	r2, #20
 800638e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006392:	e027      	b.n	80063e4 <xTaskGenericNotify+0x128>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8006394:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006396:	68ba      	ldr	r2, [r7, #8]
 8006398:	3214      	adds	r2, #20
 800639a:	6879      	ldr	r1, [r7, #4]
 800639c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80063a0:	e020      	b.n	80063e4 <xTaskGenericNotify+0x128>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80063a2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80063a6:	2b02      	cmp	r3, #2
 80063a8:	d006      	beq.n	80063b8 <xTaskGenericNotify+0xfc>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80063aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063ac:	68ba      	ldr	r2, [r7, #8]
 80063ae:	3214      	adds	r2, #20
 80063b0:	6879      	ldr	r1, [r7, #4]
 80063b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 80063b6:	e015      	b.n	80063e4 <xTaskGenericNotify+0x128>
                        xReturn = pdFAIL;
 80063b8:	2300      	movs	r3, #0
 80063ba:	637b      	str	r3, [r7, #52]	@ 0x34
                    break;
 80063bc:	e012      	b.n	80063e4 <xTaskGenericNotify+0x128>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 80063be:	4b4d      	ldr	r3, [pc, #308]	@ (80064f4 <xTaskGenericNotify+0x238>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d00d      	beq.n	80063e2 <xTaskGenericNotify+0x126>
        __asm volatile
 80063c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063ca:	f383 8811 	msr	BASEPRI, r3
 80063ce:	f3bf 8f6f 	isb	sy
 80063d2:	f3bf 8f4f 	dsb	sy
 80063d6:	61bb      	str	r3, [r7, #24]
    }
 80063d8:	bf00      	nop
 80063da:	bf00      	nop
 80063dc:	e7fd      	b.n	80063da <xTaskGenericNotify+0x11e>
                    break;
 80063de:	bf00      	nop
 80063e0:	e000      	b.n	80063e4 <xTaskGenericNotify+0x128>

                    break;
 80063e2:	bf00      	nop

            traceTASK_NOTIFY(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80063e4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80063e8:	2b01      	cmp	r3, #1
 80063ea:	d17c      	bne.n	80064e6 <xTaskGenericNotify+0x22a>
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80063ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063ee:	695b      	ldr	r3, [r3, #20]
 80063f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80063f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063f4:	689b      	ldr	r3, [r3, #8]
 80063f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80063f8:	68d2      	ldr	r2, [r2, #12]
 80063fa:	609a      	str	r2, [r3, #8]
 80063fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063fe:	68db      	ldr	r3, [r3, #12]
 8006400:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006402:	6892      	ldr	r2, [r2, #8]
 8006404:	605a      	str	r2, [r3, #4]
 8006406:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006408:	685a      	ldr	r2, [r3, #4]
 800640a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800640c:	3304      	adds	r3, #4
 800640e:	429a      	cmp	r2, r3
 8006410:	d103      	bne.n	800641a <xTaskGenericNotify+0x15e>
 8006412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006414:	68da      	ldr	r2, [r3, #12]
 8006416:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006418:	605a      	str	r2, [r3, #4]
 800641a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800641c:	2200      	movs	r2, #0
 800641e:	615a      	str	r2, [r3, #20]
 8006420:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	1e5a      	subs	r2, r3, #1
 8006426:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006428:	601a      	str	r2, [r3, #0]
                prvAddTaskToReadyList( pxTCB );
 800642a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800642c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800642e:	2201      	movs	r2, #1
 8006430:	409a      	lsls	r2, r3
 8006432:	4b31      	ldr	r3, [pc, #196]	@ (80064f8 <xTaskGenericNotify+0x23c>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4313      	orrs	r3, r2
 8006438:	4a2f      	ldr	r2, [pc, #188]	@ (80064f8 <xTaskGenericNotify+0x23c>)
 800643a:	6013      	str	r3, [r2, #0]
 800643c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800643e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006440:	492e      	ldr	r1, [pc, #184]	@ (80064fc <xTaskGenericNotify+0x240>)
 8006442:	4613      	mov	r3, r2
 8006444:	009b      	lsls	r3, r3, #2
 8006446:	4413      	add	r3, r2
 8006448:	009b      	lsls	r3, r3, #2
 800644a:	440b      	add	r3, r1
 800644c:	3304      	adds	r3, #4
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	627b      	str	r3, [r7, #36]	@ 0x24
 8006452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006454:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006456:	609a      	str	r2, [r3, #8]
 8006458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800645a:	689a      	ldr	r2, [r3, #8]
 800645c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800645e:	60da      	str	r2, [r3, #12]
 8006460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006462:	689b      	ldr	r3, [r3, #8]
 8006464:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006466:	3204      	adds	r2, #4
 8006468:	605a      	str	r2, [r3, #4]
 800646a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800646c:	1d1a      	adds	r2, r3, #4
 800646e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006470:	609a      	str	r2, [r3, #8]
 8006472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006474:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006476:	4613      	mov	r3, r2
 8006478:	009b      	lsls	r3, r3, #2
 800647a:	4413      	add	r3, r2
 800647c:	009b      	lsls	r3, r3, #2
 800647e:	4a1f      	ldr	r2, [pc, #124]	@ (80064fc <xTaskGenericNotify+0x240>)
 8006480:	441a      	add	r2, r3
 8006482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006484:	615a      	str	r2, [r3, #20]
 8006486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006488:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800648a:	491c      	ldr	r1, [pc, #112]	@ (80064fc <xTaskGenericNotify+0x240>)
 800648c:	4613      	mov	r3, r2
 800648e:	009b      	lsls	r3, r3, #2
 8006490:	4413      	add	r3, r2
 8006492:	009b      	lsls	r3, r3, #2
 8006494:	440b      	add	r3, r1
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	1c59      	adds	r1, r3, #1
 800649a:	4818      	ldr	r0, [pc, #96]	@ (80064fc <xTaskGenericNotify+0x240>)
 800649c:	4613      	mov	r3, r2
 800649e:	009b      	lsls	r3, r3, #2
 80064a0:	4413      	add	r3, r2
 80064a2:	009b      	lsls	r3, r3, #2
 80064a4:	4403      	add	r3, r0
 80064a6:	6019      	str	r1, [r3, #0]

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80064a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d00b      	beq.n	80064c8 <xTaskGenericNotify+0x20c>
        __asm volatile
 80064b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064b4:	f383 8811 	msr	BASEPRI, r3
 80064b8:	f3bf 8f6f 	isb	sy
 80064bc:	f3bf 8f4f 	dsb	sy
 80064c0:	617b      	str	r3, [r7, #20]
    }
 80064c2:	bf00      	nop
 80064c4:	bf00      	nop
 80064c6:	e7fd      	b.n	80064c4 <xTaskGenericNotify+0x208>
                     * earliest possible time. */
                    prvResetNextTaskUnblockTime();
                }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80064c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064cc:	4b0c      	ldr	r3, [pc, #48]	@ (8006500 <xTaskGenericNotify+0x244>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064d2:	429a      	cmp	r2, r3
 80064d4:	d907      	bls.n	80064e6 <xTaskGenericNotify+0x22a>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 80064d6:	4b0b      	ldr	r3, [pc, #44]	@ (8006504 <xTaskGenericNotify+0x248>)
 80064d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80064dc:	601a      	str	r2, [r3, #0]
 80064de:	f3bf 8f4f 	dsb	sy
 80064e2:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80064e6:	f000 feab 	bl	8007240 <vPortExitCritical>

        return xReturn;
 80064ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 80064ec:	4618      	mov	r0, r3
 80064ee:	3738      	adds	r7, #56	@ 0x38
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}
 80064f4:	20000230 	.word	0x20000230
 80064f8:	20000234 	.word	0x20000234
 80064fc:	20000158 	.word	0x20000158
 8006500:	20000154 	.word	0x20000154
 8006504:	e000ed04 	.word	0xe000ed04

08006508 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8006508:	b580      	push	{r7, lr}
 800650a:	b092      	sub	sp, #72	@ 0x48
 800650c:	af00      	add	r7, sp, #0
 800650e:	60f8      	str	r0, [r7, #12]
 8006510:	60b9      	str	r1, [r7, #8]
 8006512:	607a      	str	r2, [r7, #4]
 8006514:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 8006516:	2301      	movs	r3, #1
 8006518:	647b      	str	r3, [r7, #68]	@ 0x44
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d10b      	bne.n	8006538 <xTaskGenericNotifyFromISR+0x30>
        __asm volatile
 8006520:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006524:	f383 8811 	msr	BASEPRI, r3
 8006528:	f3bf 8f6f 	isb	sy
 800652c:	f3bf 8f4f 	dsb	sy
 8006530:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8006532:	bf00      	nop
 8006534:	bf00      	nop
 8006536:	e7fd      	b.n	8006534 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d00b      	beq.n	8006556 <xTaskGenericNotifyFromISR+0x4e>
        __asm volatile
 800653e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006542:	f383 8811 	msr	BASEPRI, r3
 8006546:	f3bf 8f6f 	isb	sy
 800654a:	f3bf 8f4f 	dsb	sy
 800654e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8006550:	bf00      	nop
 8006552:	bf00      	nop
 8006554:	e7fd      	b.n	8006552 <xTaskGenericNotifyFromISR+0x4a>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006556:	f000 ff29 	bl	80073ac <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	643b      	str	r3, [r7, #64]	@ 0x40
        __asm volatile
 800655e:	f3ef 8211 	mrs	r2, BASEPRI
 8006562:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006566:	f383 8811 	msr	BASEPRI, r3
 800656a:	f3bf 8f6f 	isb	sy
 800656e:	f3bf 8f4f 	dsb	sy
 8006572:	623a      	str	r2, [r7, #32]
 8006574:	61fb      	str	r3, [r7, #28]
        return ulOriginalBASEPRI;
 8006576:	6a3b      	ldr	r3, [r7, #32]

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006578:	63fb      	str	r3, [r7, #60]	@ 0x3c
        {
            if( pulPreviousNotificationValue != NULL )
 800657a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800657c:	2b00      	cmp	r3, #0
 800657e:	d006      	beq.n	800658e <xTaskGenericNotifyFromISR+0x86>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8006580:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006582:	68ba      	ldr	r2, [r7, #8]
 8006584:	3214      	adds	r2, #20
 8006586:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800658a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800658c:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 800658e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	4413      	add	r3, r2
 8006594:	3354      	adds	r3, #84	@ 0x54
 8006596:	781b      	ldrb	r3, [r3, #0]
 8006598:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 800659c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	4413      	add	r3, r2
 80065a2:	3354      	adds	r3, #84	@ 0x54
 80065a4:	2202      	movs	r2, #2
 80065a6:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 80065a8:	78fb      	ldrb	r3, [r7, #3]
 80065aa:	2b04      	cmp	r3, #4
 80065ac:	d83b      	bhi.n	8006626 <xTaskGenericNotifyFromISR+0x11e>
 80065ae:	a201      	add	r2, pc, #4	@ (adr r2, 80065b4 <xTaskGenericNotifyFromISR+0xac>)
 80065b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065b4:	08006647 	.word	0x08006647
 80065b8:	080065c9 	.word	0x080065c9
 80065bc:	080065e5 	.word	0x080065e5
 80065c0:	080065fd 	.word	0x080065fd
 80065c4:	0800660b 	.word	0x0800660b
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 80065c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80065ca:	68ba      	ldr	r2, [r7, #8]
 80065cc:	3214      	adds	r2, #20
 80065ce:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	ea42 0103 	orr.w	r1, r2, r3
 80065d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80065da:	68ba      	ldr	r2, [r7, #8]
 80065dc:	3214      	adds	r2, #20
 80065de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80065e2:	e033      	b.n	800664c <xTaskGenericNotifyFromISR+0x144>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80065e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80065e6:	68ba      	ldr	r2, [r7, #8]
 80065e8:	3214      	adds	r2, #20
 80065ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065ee:	1c59      	adds	r1, r3, #1
 80065f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80065f2:	68ba      	ldr	r2, [r7, #8]
 80065f4:	3214      	adds	r2, #20
 80065f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80065fa:	e027      	b.n	800664c <xTaskGenericNotifyFromISR+0x144>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80065fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80065fe:	68ba      	ldr	r2, [r7, #8]
 8006600:	3214      	adds	r2, #20
 8006602:	6879      	ldr	r1, [r7, #4]
 8006604:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006608:	e020      	b.n	800664c <xTaskGenericNotifyFromISR+0x144>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800660a:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800660e:	2b02      	cmp	r3, #2
 8006610:	d006      	beq.n	8006620 <xTaskGenericNotifyFromISR+0x118>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8006612:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006614:	68ba      	ldr	r2, [r7, #8]
 8006616:	3214      	adds	r2, #20
 8006618:	6879      	ldr	r1, [r7, #4]
 800661a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 800661e:	e015      	b.n	800664c <xTaskGenericNotifyFromISR+0x144>
                        xReturn = pdFAIL;
 8006620:	2300      	movs	r3, #0
 8006622:	647b      	str	r3, [r7, #68]	@ 0x44
                    break;
 8006624:	e012      	b.n	800664c <xTaskGenericNotifyFromISR+0x144>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8006626:	4b61      	ldr	r3, [pc, #388]	@ (80067ac <xTaskGenericNotifyFromISR+0x2a4>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d00d      	beq.n	800664a <xTaskGenericNotifyFromISR+0x142>
        __asm volatile
 800662e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006632:	f383 8811 	msr	BASEPRI, r3
 8006636:	f3bf 8f6f 	isb	sy
 800663a:	f3bf 8f4f 	dsb	sy
 800663e:	61bb      	str	r3, [r7, #24]
    }
 8006640:	bf00      	nop
 8006642:	bf00      	nop
 8006644:	e7fd      	b.n	8006642 <xTaskGenericNotifyFromISR+0x13a>
                    break;
 8006646:	bf00      	nop
 8006648:	e000      	b.n	800664c <xTaskGenericNotifyFromISR+0x144>
                    break;
 800664a:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800664c:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8006650:	2b01      	cmp	r3, #1
 8006652:	f040 809f 	bne.w	8006794 <xTaskGenericNotifyFromISR+0x28c>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006656:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006658:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800665a:	2b00      	cmp	r3, #0
 800665c:	d00b      	beq.n	8006676 <xTaskGenericNotifyFromISR+0x16e>
        __asm volatile
 800665e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006662:	f383 8811 	msr	BASEPRI, r3
 8006666:	f3bf 8f6f 	isb	sy
 800666a:	f3bf 8f4f 	dsb	sy
 800666e:	617b      	str	r3, [r7, #20]
    }
 8006670:	bf00      	nop
 8006672:	bf00      	nop
 8006674:	e7fd      	b.n	8006672 <xTaskGenericNotifyFromISR+0x16a>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006676:	4b4e      	ldr	r3, [pc, #312]	@ (80067b0 <xTaskGenericNotifyFromISR+0x2a8>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d15e      	bne.n	800673c <xTaskGenericNotifyFromISR+0x234>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800667e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006680:	695b      	ldr	r3, [r3, #20]
 8006682:	633b      	str	r3, [r7, #48]	@ 0x30
 8006684:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006686:	689b      	ldr	r3, [r3, #8]
 8006688:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800668a:	68d2      	ldr	r2, [r2, #12]
 800668c:	609a      	str	r2, [r3, #8]
 800668e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006690:	68db      	ldr	r3, [r3, #12]
 8006692:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006694:	6892      	ldr	r2, [r2, #8]
 8006696:	605a      	str	r2, [r3, #4]
 8006698:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800669a:	685a      	ldr	r2, [r3, #4]
 800669c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800669e:	3304      	adds	r3, #4
 80066a0:	429a      	cmp	r2, r3
 80066a2:	d103      	bne.n	80066ac <xTaskGenericNotifyFromISR+0x1a4>
 80066a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80066a6:	68da      	ldr	r2, [r3, #12]
 80066a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066aa:	605a      	str	r2, [r3, #4]
 80066ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80066ae:	2200      	movs	r2, #0
 80066b0:	615a      	str	r2, [r3, #20]
 80066b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	1e5a      	subs	r2, r3, #1
 80066b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066ba:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80066bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80066be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066c0:	2201      	movs	r2, #1
 80066c2:	409a      	lsls	r2, r3
 80066c4:	4b3b      	ldr	r3, [pc, #236]	@ (80067b4 <xTaskGenericNotifyFromISR+0x2ac>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4313      	orrs	r3, r2
 80066ca:	4a3a      	ldr	r2, [pc, #232]	@ (80067b4 <xTaskGenericNotifyFromISR+0x2ac>)
 80066cc:	6013      	str	r3, [r2, #0]
 80066ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80066d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066d2:	4939      	ldr	r1, [pc, #228]	@ (80067b8 <xTaskGenericNotifyFromISR+0x2b0>)
 80066d4:	4613      	mov	r3, r2
 80066d6:	009b      	lsls	r3, r3, #2
 80066d8:	4413      	add	r3, r2
 80066da:	009b      	lsls	r3, r3, #2
 80066dc:	440b      	add	r3, r1
 80066de:	3304      	adds	r3, #4
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80066e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80066e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80066e8:	609a      	str	r2, [r3, #8]
 80066ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066ec:	689a      	ldr	r2, [r3, #8]
 80066ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80066f0:	60da      	str	r2, [r3, #12]
 80066f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066f4:	689b      	ldr	r3, [r3, #8]
 80066f6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80066f8:	3204      	adds	r2, #4
 80066fa:	605a      	str	r2, [r3, #4]
 80066fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80066fe:	1d1a      	adds	r2, r3, #4
 8006700:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006702:	609a      	str	r2, [r3, #8]
 8006704:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006706:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006708:	4613      	mov	r3, r2
 800670a:	009b      	lsls	r3, r3, #2
 800670c:	4413      	add	r3, r2
 800670e:	009b      	lsls	r3, r3, #2
 8006710:	4a29      	ldr	r2, [pc, #164]	@ (80067b8 <xTaskGenericNotifyFromISR+0x2b0>)
 8006712:	441a      	add	r2, r3
 8006714:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006716:	615a      	str	r2, [r3, #20]
 8006718:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800671a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800671c:	4926      	ldr	r1, [pc, #152]	@ (80067b8 <xTaskGenericNotifyFromISR+0x2b0>)
 800671e:	4613      	mov	r3, r2
 8006720:	009b      	lsls	r3, r3, #2
 8006722:	4413      	add	r3, r2
 8006724:	009b      	lsls	r3, r3, #2
 8006726:	440b      	add	r3, r1
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	1c59      	adds	r1, r3, #1
 800672c:	4822      	ldr	r0, [pc, #136]	@ (80067b8 <xTaskGenericNotifyFromISR+0x2b0>)
 800672e:	4613      	mov	r3, r2
 8006730:	009b      	lsls	r3, r3, #2
 8006732:	4413      	add	r3, r2
 8006734:	009b      	lsls	r3, r3, #2
 8006736:	4403      	add	r3, r0
 8006738:	6019      	str	r1, [r3, #0]
 800673a:	e01b      	b.n	8006774 <xTaskGenericNotifyFromISR+0x26c>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800673c:	4b1f      	ldr	r3, [pc, #124]	@ (80067bc <xTaskGenericNotifyFromISR+0x2b4>)
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	637b      	str	r3, [r7, #52]	@ 0x34
 8006742:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006744:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006746:	61da      	str	r2, [r3, #28]
 8006748:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800674a:	689a      	ldr	r2, [r3, #8]
 800674c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800674e:	621a      	str	r2, [r3, #32]
 8006750:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006752:	689b      	ldr	r3, [r3, #8]
 8006754:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006756:	3218      	adds	r2, #24
 8006758:	605a      	str	r2, [r3, #4]
 800675a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800675c:	f103 0218 	add.w	r2, r3, #24
 8006760:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006762:	609a      	str	r2, [r3, #8]
 8006764:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006766:	4a15      	ldr	r2, [pc, #84]	@ (80067bc <xTaskGenericNotifyFromISR+0x2b4>)
 8006768:	629a      	str	r2, [r3, #40]	@ 0x28
 800676a:	4b14      	ldr	r3, [pc, #80]	@ (80067bc <xTaskGenericNotifyFromISR+0x2b4>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	3301      	adds	r3, #1
 8006770:	4a12      	ldr	r2, [pc, #72]	@ (80067bc <xTaskGenericNotifyFromISR+0x2b4>)
 8006772:	6013      	str	r3, [r2, #0]
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006774:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006776:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006778:	4b11      	ldr	r3, [pc, #68]	@ (80067c0 <xTaskGenericNotifyFromISR+0x2b8>)
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800677e:	429a      	cmp	r2, r3
 8006780:	d908      	bls.n	8006794 <xTaskGenericNotifyFromISR+0x28c>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 8006782:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006784:	2b00      	cmp	r3, #0
 8006786:	d002      	beq.n	800678e <xTaskGenericNotifyFromISR+0x286>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8006788:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800678a:	2201      	movs	r2, #1
 800678c:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 800678e:	4b0d      	ldr	r3, [pc, #52]	@ (80067c4 <xTaskGenericNotifyFromISR+0x2bc>)
 8006790:	2201      	movs	r2, #1
 8006792:	601a      	str	r2, [r3, #0]
 8006794:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006796:	613b      	str	r3, [r7, #16]
        __asm volatile
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	f383 8811 	msr	BASEPRI, r3
    }
 800679e:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 80067a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
    }
 80067a2:	4618      	mov	r0, r3
 80067a4:	3748      	adds	r7, #72	@ 0x48
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}
 80067aa:	bf00      	nop
 80067ac:	20000230 	.word	0x20000230
 80067b0:	20000254 	.word	0x20000254
 80067b4:	20000234 	.word	0x20000234
 80067b8:	20000158 	.word	0x20000158
 80067bc:	200001ec 	.word	0x200001ec
 80067c0:	20000154 	.word	0x20000154
 80067c4:	20000240 	.word	0x20000240

080067c8 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b086      	sub	sp, #24
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
 80067d0:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80067d2:	4b36      	ldr	r3, [pc, #216]	@ (80068ac <prvAddCurrentTaskToDelayedList+0xe4>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80067d8:	4b35      	ldr	r3, [pc, #212]	@ (80068b0 <prvAddCurrentTaskToDelayedList+0xe8>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	3304      	adds	r3, #4
 80067de:	4618      	mov	r0, r3
 80067e0:	f7fd fe5c 	bl	800449c <uxListRemove>
 80067e4:	4603      	mov	r3, r0
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d10b      	bne.n	8006802 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80067ea:	4b31      	ldr	r3, [pc, #196]	@ (80068b0 <prvAddCurrentTaskToDelayedList+0xe8>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067f0:	2201      	movs	r2, #1
 80067f2:	fa02 f303 	lsl.w	r3, r2, r3
 80067f6:	43da      	mvns	r2, r3
 80067f8:	4b2e      	ldr	r3, [pc, #184]	@ (80068b4 <prvAddCurrentTaskToDelayedList+0xec>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4013      	ands	r3, r2
 80067fe:	4a2d      	ldr	r2, [pc, #180]	@ (80068b4 <prvAddCurrentTaskToDelayedList+0xec>)
 8006800:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006808:	d124      	bne.n	8006854 <prvAddCurrentTaskToDelayedList+0x8c>
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d021      	beq.n	8006854 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006810:	4b29      	ldr	r3, [pc, #164]	@ (80068b8 <prvAddCurrentTaskToDelayedList+0xf0>)
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	613b      	str	r3, [r7, #16]
 8006816:	4b26      	ldr	r3, [pc, #152]	@ (80068b0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	693a      	ldr	r2, [r7, #16]
 800681c:	609a      	str	r2, [r3, #8]
 800681e:	4b24      	ldr	r3, [pc, #144]	@ (80068b0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	693a      	ldr	r2, [r7, #16]
 8006824:	6892      	ldr	r2, [r2, #8]
 8006826:	60da      	str	r2, [r3, #12]
 8006828:	4b21      	ldr	r3, [pc, #132]	@ (80068b0 <prvAddCurrentTaskToDelayedList+0xe8>)
 800682a:	681a      	ldr	r2, [r3, #0]
 800682c:	693b      	ldr	r3, [r7, #16]
 800682e:	689b      	ldr	r3, [r3, #8]
 8006830:	3204      	adds	r2, #4
 8006832:	605a      	str	r2, [r3, #4]
 8006834:	4b1e      	ldr	r3, [pc, #120]	@ (80068b0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	1d1a      	adds	r2, r3, #4
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	609a      	str	r2, [r3, #8]
 800683e:	4b1c      	ldr	r3, [pc, #112]	@ (80068b0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a1d      	ldr	r2, [pc, #116]	@ (80068b8 <prvAddCurrentTaskToDelayedList+0xf0>)
 8006844:	615a      	str	r2, [r3, #20]
 8006846:	4b1c      	ldr	r3, [pc, #112]	@ (80068b8 <prvAddCurrentTaskToDelayedList+0xf0>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	3301      	adds	r3, #1
 800684c:	4a1a      	ldr	r2, [pc, #104]	@ (80068b8 <prvAddCurrentTaskToDelayedList+0xf0>)
 800684e:	6013      	str	r3, [r2, #0]
 8006850:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8006852:	e026      	b.n	80068a2 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8006854:	697a      	ldr	r2, [r7, #20]
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	4413      	add	r3, r2
 800685a:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800685c:	4b14      	ldr	r3, [pc, #80]	@ (80068b0 <prvAddCurrentTaskToDelayedList+0xe8>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	68fa      	ldr	r2, [r7, #12]
 8006862:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8006864:	68fa      	ldr	r2, [r7, #12]
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	429a      	cmp	r2, r3
 800686a:	d209      	bcs.n	8006880 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800686c:	4b13      	ldr	r3, [pc, #76]	@ (80068bc <prvAddCurrentTaskToDelayedList+0xf4>)
 800686e:	681a      	ldr	r2, [r3, #0]
 8006870:	4b0f      	ldr	r3, [pc, #60]	@ (80068b0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	3304      	adds	r3, #4
 8006876:	4619      	mov	r1, r3
 8006878:	4610      	mov	r0, r2
 800687a:	f7fd fdd6 	bl	800442a <vListInsert>
}
 800687e:	e010      	b.n	80068a2 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006880:	4b0f      	ldr	r3, [pc, #60]	@ (80068c0 <prvAddCurrentTaskToDelayedList+0xf8>)
 8006882:	681a      	ldr	r2, [r3, #0]
 8006884:	4b0a      	ldr	r3, [pc, #40]	@ (80068b0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	3304      	adds	r3, #4
 800688a:	4619      	mov	r1, r3
 800688c:	4610      	mov	r0, r2
 800688e:	f7fd fdcc 	bl	800442a <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8006892:	4b0c      	ldr	r3, [pc, #48]	@ (80068c4 <prvAddCurrentTaskToDelayedList+0xfc>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	68fa      	ldr	r2, [r7, #12]
 8006898:	429a      	cmp	r2, r3
 800689a:	d202      	bcs.n	80068a2 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 800689c:	4a09      	ldr	r2, [pc, #36]	@ (80068c4 <prvAddCurrentTaskToDelayedList+0xfc>)
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	6013      	str	r3, [r2, #0]
}
 80068a2:	bf00      	nop
 80068a4:	3718      	adds	r7, #24
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}
 80068aa:	bf00      	nop
 80068ac:	20000230 	.word	0x20000230
 80068b0:	20000154 	.word	0x20000154
 80068b4:	20000234 	.word	0x20000234
 80068b8:	20000218 	.word	0x20000218
 80068bc:	200001e8 	.word	0x200001e8
 80068c0:	200001e4 	.word	0x200001e4
 80068c4:	2000024c 	.word	0x2000024c

080068c8 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b084      	sub	sp, #16
 80068cc:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80068ce:	2300      	movs	r3, #0
 80068d0:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80068d2:	f000 faf7 	bl	8006ec4 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80068d6:	4b12      	ldr	r3, [pc, #72]	@ (8006920 <xTimerCreateTimerTask+0x58>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d00b      	beq.n	80068f6 <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 80068de:	4b11      	ldr	r3, [pc, #68]	@ (8006924 <xTimerCreateTimerTask+0x5c>)
 80068e0:	9301      	str	r3, [sp, #4]
 80068e2:	2302      	movs	r3, #2
 80068e4:	9300      	str	r3, [sp, #0]
 80068e6:	2300      	movs	r3, #0
 80068e8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80068ec:	490e      	ldr	r1, [pc, #56]	@ (8006928 <xTimerCreateTimerTask+0x60>)
 80068ee:	480f      	ldr	r0, [pc, #60]	@ (800692c <xTimerCreateTimerTask+0x64>)
 80068f0:	f7fe fc10 	bl	8005114 <xTaskCreate>
 80068f4:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d10b      	bne.n	8006914 <xTimerCreateTimerTask+0x4c>
        __asm volatile
 80068fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006900:	f383 8811 	msr	BASEPRI, r3
 8006904:	f3bf 8f6f 	isb	sy
 8006908:	f3bf 8f4f 	dsb	sy
 800690c:	603b      	str	r3, [r7, #0]
    }
 800690e:	bf00      	nop
 8006910:	bf00      	nop
 8006912:	e7fd      	b.n	8006910 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8006914:	687b      	ldr	r3, [r7, #4]
    }
 8006916:	4618      	mov	r0, r3
 8006918:	3708      	adds	r7, #8
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}
 800691e:	bf00      	nop
 8006920:	20000288 	.word	0x20000288
 8006924:	2000028c 	.word	0x2000028c
 8006928:	08007a3c 	.word	0x08007a3c
 800692c:	08006b25 	.word	0x08006b25

08006930 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const BaseType_t xAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 8006930:	b580      	push	{r7, lr}
 8006932:	b088      	sub	sp, #32
 8006934:	af02      	add	r7, sp, #8
 8006936:	60f8      	str	r0, [r7, #12]
 8006938:	60b9      	str	r1, [r7, #8]
 800693a:	607a      	str	r2, [r7, #4]
 800693c:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800693e:	202c      	movs	r0, #44	@ 0x2c
 8006940:	f000 fd76 	bl	8007430 <pvPortMalloc>
 8006944:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d00d      	beq.n	8006968 <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	2200      	movs	r2, #0
 8006950:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, xAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	9301      	str	r3, [sp, #4]
 8006958:	6a3b      	ldr	r3, [r7, #32]
 800695a:	9300      	str	r3, [sp, #0]
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	687a      	ldr	r2, [r7, #4]
 8006960:	68b9      	ldr	r1, [r7, #8]
 8006962:	68f8      	ldr	r0, [r7, #12]
 8006964:	f000 f805 	bl	8006972 <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 8006968:	697b      	ldr	r3, [r7, #20]
        }
 800696a:	4618      	mov	r0, r3
 800696c:	3718      	adds	r7, #24
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}

08006972 <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const BaseType_t xAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 8006972:	b580      	push	{r7, lr}
 8006974:	b086      	sub	sp, #24
 8006976:	af00      	add	r7, sp, #0
 8006978:	60f8      	str	r0, [r7, #12]
 800697a:	60b9      	str	r1, [r7, #8]
 800697c:	607a      	str	r2, [r7, #4]
 800697e:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d10b      	bne.n	800699e <prvInitialiseNewTimer+0x2c>
        __asm volatile
 8006986:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800698a:	f383 8811 	msr	BASEPRI, r3
 800698e:	f3bf 8f6f 	isb	sy
 8006992:	f3bf 8f4f 	dsb	sy
 8006996:	617b      	str	r3, [r7, #20]
    }
 8006998:	bf00      	nop
 800699a:	bf00      	nop
 800699c:	e7fd      	b.n	800699a <prvInitialiseNewTimer+0x28>

        /* Ensure the infrastructure used by the timer service task has been
         * created/initialised. */
        prvCheckForValidListAndQueue();
 800699e:	f000 fa91 	bl	8006ec4 <prvCheckForValidListAndQueue>

        /* Initialise the timer structure members using the function
         * parameters. */
        pxNewTimer->pcTimerName = pcTimerName;
 80069a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069a4:	68fa      	ldr	r2, [r7, #12]
 80069a6:	601a      	str	r2, [r3, #0]
        pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80069a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069aa:	68ba      	ldr	r2, [r7, #8]
 80069ac:	619a      	str	r2, [r3, #24]
        pxNewTimer->pvTimerID = pvTimerID;
 80069ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069b0:	683a      	ldr	r2, [r7, #0]
 80069b2:	61da      	str	r2, [r3, #28]
        pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80069b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069b6:	6a3a      	ldr	r2, [r7, #32]
 80069b8:	621a      	str	r2, [r3, #32]
        vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80069ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069bc:	3304      	adds	r3, #4
 80069be:	4618      	mov	r0, r3
 80069c0:	f7fd fd26 	bl	8004410 <vListInitialiseItem>

        if( xAutoReload != pdFALSE )
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d008      	beq.n	80069dc <prvInitialiseNewTimer+0x6a>
        {
            pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80069ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80069d0:	f043 0304 	orr.w	r3, r3, #4
 80069d4:	b2da      	uxtb	r2, r3
 80069d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069d8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        traceTIMER_CREATE( pxNewTimer );
    }
 80069dc:	bf00      	nop
 80069de:	3718      	adds	r7, #24
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bd80      	pop	{r7, pc}

080069e4 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b08a      	sub	sp, #40	@ 0x28
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	60f8      	str	r0, [r7, #12]
 80069ec:	60b9      	str	r1, [r7, #8]
 80069ee:	607a      	str	r2, [r7, #4]
 80069f0:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 80069f2:	2300      	movs	r3, #0
 80069f4:	627b      	str	r3, [r7, #36]	@ 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d10b      	bne.n	8006a14 <xTimerGenericCommand+0x30>
        __asm volatile
 80069fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a00:	f383 8811 	msr	BASEPRI, r3
 8006a04:	f3bf 8f6f 	isb	sy
 8006a08:	f3bf 8f4f 	dsb	sy
 8006a0c:	623b      	str	r3, [r7, #32]
    }
 8006a0e:	bf00      	nop
 8006a10:	bf00      	nop
 8006a12:	e7fd      	b.n	8006a10 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8006a14:	4b19      	ldr	r3, [pc, #100]	@ (8006a7c <xTimerGenericCommand+0x98>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d02a      	beq.n	8006a72 <xTimerGenericCommand+0x8e>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	2b05      	cmp	r3, #5
 8006a2c:	dc18      	bgt.n	8006a60 <xTimerGenericCommand+0x7c>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006a2e:	f7ff fb01 	bl	8006034 <xTaskGetSchedulerState>
 8006a32:	4603      	mov	r3, r0
 8006a34:	2b02      	cmp	r3, #2
 8006a36:	d109      	bne.n	8006a4c <xTimerGenericCommand+0x68>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006a38:	4b10      	ldr	r3, [pc, #64]	@ (8006a7c <xTimerGenericCommand+0x98>)
 8006a3a:	6818      	ldr	r0, [r3, #0]
 8006a3c:	f107 0114 	add.w	r1, r7, #20
 8006a40:	2300      	movs	r3, #0
 8006a42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a44:	f7fd fe58 	bl	80046f8 <xQueueGenericSend>
 8006a48:	6278      	str	r0, [r7, #36]	@ 0x24
 8006a4a:	e012      	b.n	8006a72 <xTimerGenericCommand+0x8e>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006a4c:	4b0b      	ldr	r3, [pc, #44]	@ (8006a7c <xTimerGenericCommand+0x98>)
 8006a4e:	6818      	ldr	r0, [r3, #0]
 8006a50:	f107 0114 	add.w	r1, r7, #20
 8006a54:	2300      	movs	r3, #0
 8006a56:	2200      	movs	r2, #0
 8006a58:	f7fd fe4e 	bl	80046f8 <xQueueGenericSend>
 8006a5c:	6278      	str	r0, [r7, #36]	@ 0x24
 8006a5e:	e008      	b.n	8006a72 <xTimerGenericCommand+0x8e>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006a60:	4b06      	ldr	r3, [pc, #24]	@ (8006a7c <xTimerGenericCommand+0x98>)
 8006a62:	6818      	ldr	r0, [r3, #0]
 8006a64:	f107 0114 	add.w	r1, r7, #20
 8006a68:	2300      	movs	r3, #0
 8006a6a:	683a      	ldr	r2, [r7, #0]
 8006a6c:	f7fd ff46 	bl	80048fc <xQueueGenericSendFromISR>
 8006a70:	6278      	str	r0, [r7, #36]	@ 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8006a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8006a74:	4618      	mov	r0, r3
 8006a76:	3728      	adds	r7, #40	@ 0x28
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}
 8006a7c:	20000288 	.word	0x20000288

08006a80 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b084      	sub	sp, #16
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	60f8      	str	r0, [r7, #12]
 8006a88:	60b9      	str	r1, [r7, #8]
 8006a8a:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8006a8c:	e008      	b.n	8006aa0 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	699b      	ldr	r3, [r3, #24]
 8006a92:	68ba      	ldr	r2, [r7, #8]
 8006a94:	4413      	add	r3, r2
 8006a96:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	6a1b      	ldr	r3, [r3, #32]
 8006a9c:	68f8      	ldr	r0, [r7, #12]
 8006a9e:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	699a      	ldr	r2, [r3, #24]
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	18d1      	adds	r1, r2, r3
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	687a      	ldr	r2, [r7, #4]
 8006aac:	68f8      	ldr	r0, [r7, #12]
 8006aae:	f000 f8df 	bl	8006c70 <prvInsertTimerInActiveList>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d1ea      	bne.n	8006a8e <prvReloadTimer+0xe>
        }
    }
 8006ab8:	bf00      	nop
 8006aba:	bf00      	nop
 8006abc:	3710      	adds	r7, #16
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bd80      	pop	{r7, pc}
	...

08006ac4 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b084      	sub	sp, #16
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
 8006acc:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ace:	4b14      	ldr	r3, [pc, #80]	@ (8006b20 <prvProcessExpiredTimer+0x5c>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	68db      	ldr	r3, [r3, #12]
 8006ad4:	68db      	ldr	r3, [r3, #12]
 8006ad6:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	3304      	adds	r3, #4
 8006adc:	4618      	mov	r0, r3
 8006ade:	f7fd fcdd 	bl	800449c <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006ae8:	f003 0304 	and.w	r3, r3, #4
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d005      	beq.n	8006afc <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8006af0:	683a      	ldr	r2, [r7, #0]
 8006af2:	6879      	ldr	r1, [r7, #4]
 8006af4:	68f8      	ldr	r0, [r7, #12]
 8006af6:	f7ff ffc3 	bl	8006a80 <prvReloadTimer>
 8006afa:	e008      	b.n	8006b0e <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006b02:	f023 0301 	bic.w	r3, r3, #1
 8006b06:	b2da      	uxtb	r2, r3
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	6a1b      	ldr	r3, [r3, #32]
 8006b12:	68f8      	ldr	r0, [r7, #12]
 8006b14:	4798      	blx	r3
    }
 8006b16:	bf00      	nop
 8006b18:	3710      	adds	r7, #16
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}
 8006b1e:	bf00      	nop
 8006b20:	20000280 	.word	0x20000280

08006b24 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b084      	sub	sp, #16
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006b2c:	f107 0308 	add.w	r3, r7, #8
 8006b30:	4618      	mov	r0, r3
 8006b32:	f000 f859 	bl	8006be8 <prvGetNextExpireTime>
 8006b36:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	4619      	mov	r1, r3
 8006b3c:	68f8      	ldr	r0, [r7, #12]
 8006b3e:	f000 f805 	bl	8006b4c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8006b42:	f000 f8d7 	bl	8006cf4 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006b46:	bf00      	nop
 8006b48:	e7f0      	b.n	8006b2c <prvTimerTask+0x8>
	...

08006b4c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b084      	sub	sp, #16
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
 8006b54:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8006b56:	f7fe fd53 	bl	8005600 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006b5a:	f107 0308 	add.w	r3, r7, #8
 8006b5e:	4618      	mov	r0, r3
 8006b60:	f000 f866 	bl	8006c30 <prvSampleTimeNow>
 8006b64:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d130      	bne.n	8006bce <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d10a      	bne.n	8006b88 <prvProcessTimerOrBlockTask+0x3c>
 8006b72:	687a      	ldr	r2, [r7, #4]
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	429a      	cmp	r2, r3
 8006b78:	d806      	bhi.n	8006b88 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8006b7a:	f7fe fd4f 	bl	800561c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006b7e:	68f9      	ldr	r1, [r7, #12]
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	f7ff ff9f 	bl	8006ac4 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8006b86:	e024      	b.n	8006bd2 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d008      	beq.n	8006ba0 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006b8e:	4b13      	ldr	r3, [pc, #76]	@ (8006bdc <prvProcessTimerOrBlockTask+0x90>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d101      	bne.n	8006b9c <prvProcessTimerOrBlockTask+0x50>
 8006b98:	2301      	movs	r3, #1
 8006b9a:	e000      	b.n	8006b9e <prvProcessTimerOrBlockTask+0x52>
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006ba0:	4b0f      	ldr	r3, [pc, #60]	@ (8006be0 <prvProcessTimerOrBlockTask+0x94>)
 8006ba2:	6818      	ldr	r0, [r3, #0]
 8006ba4:	687a      	ldr	r2, [r7, #4]
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	1ad3      	subs	r3, r2, r3
 8006baa:	683a      	ldr	r2, [r7, #0]
 8006bac:	4619      	mov	r1, r3
 8006bae:	f7fe fa7d 	bl	80050ac <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8006bb2:	f7fe fd33 	bl	800561c <xTaskResumeAll>
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d10a      	bne.n	8006bd2 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8006bbc:	4b09      	ldr	r3, [pc, #36]	@ (8006be4 <prvProcessTimerOrBlockTask+0x98>)
 8006bbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006bc2:	601a      	str	r2, [r3, #0]
 8006bc4:	f3bf 8f4f 	dsb	sy
 8006bc8:	f3bf 8f6f 	isb	sy
    }
 8006bcc:	e001      	b.n	8006bd2 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8006bce:	f7fe fd25 	bl	800561c <xTaskResumeAll>
    }
 8006bd2:	bf00      	nop
 8006bd4:	3710      	adds	r7, #16
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}
 8006bda:	bf00      	nop
 8006bdc:	20000284 	.word	0x20000284
 8006be0:	20000288 	.word	0x20000288
 8006be4:	e000ed04 	.word	0xe000ed04

08006be8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8006be8:	b480      	push	{r7}
 8006bea:	b085      	sub	sp, #20
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006bf0:	4b0e      	ldr	r3, [pc, #56]	@ (8006c2c <prvGetNextExpireTime+0x44>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d101      	bne.n	8006bfe <prvGetNextExpireTime+0x16>
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	e000      	b.n	8006c00 <prvGetNextExpireTime+0x18>
 8006bfe:	2200      	movs	r2, #0
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d105      	bne.n	8006c18 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006c0c:	4b07      	ldr	r3, [pc, #28]	@ (8006c2c <prvGetNextExpireTime+0x44>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	68db      	ldr	r3, [r3, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	60fb      	str	r3, [r7, #12]
 8006c16:	e001      	b.n	8006c1c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8006c18:	2300      	movs	r3, #0
 8006c1a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
    }
 8006c1e:	4618      	mov	r0, r3
 8006c20:	3714      	adds	r7, #20
 8006c22:	46bd      	mov	sp, r7
 8006c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c28:	4770      	bx	lr
 8006c2a:	bf00      	nop
 8006c2c:	20000280 	.word	0x20000280

08006c30 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b084      	sub	sp, #16
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8006c38:	f7fe fdec 	bl	8005814 <xTaskGetTickCount>
 8006c3c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8006c3e:	4b0b      	ldr	r3, [pc, #44]	@ (8006c6c <prvSampleTimeNow+0x3c>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	68fa      	ldr	r2, [r7, #12]
 8006c44:	429a      	cmp	r2, r3
 8006c46:	d205      	bcs.n	8006c54 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8006c48:	f000 f916 	bl	8006e78 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2201      	movs	r2, #1
 8006c50:	601a      	str	r2, [r3, #0]
 8006c52:	e002      	b.n	8006c5a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2200      	movs	r2, #0
 8006c58:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8006c5a:	4a04      	ldr	r2, [pc, #16]	@ (8006c6c <prvSampleTimeNow+0x3c>)
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8006c60:	68fb      	ldr	r3, [r7, #12]
    }
 8006c62:	4618      	mov	r0, r3
 8006c64:	3710      	adds	r7, #16
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}
 8006c6a:	bf00      	nop
 8006c6c:	20000290 	.word	0x20000290

08006c70 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b086      	sub	sp, #24
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	60f8      	str	r0, [r7, #12]
 8006c78:	60b9      	str	r1, [r7, #8]
 8006c7a:	607a      	str	r2, [r7, #4]
 8006c7c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	68ba      	ldr	r2, [r7, #8]
 8006c86:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	68fa      	ldr	r2, [r7, #12]
 8006c8c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8006c8e:	68ba      	ldr	r2, [r7, #8]
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	429a      	cmp	r2, r3
 8006c94:	d812      	bhi.n	8006cbc <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c96:	687a      	ldr	r2, [r7, #4]
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	1ad2      	subs	r2, r2, r3
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	699b      	ldr	r3, [r3, #24]
 8006ca0:	429a      	cmp	r2, r3
 8006ca2:	d302      	bcc.n	8006caa <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	617b      	str	r3, [r7, #20]
 8006ca8:	e01b      	b.n	8006ce2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006caa:	4b10      	ldr	r3, [pc, #64]	@ (8006cec <prvInsertTimerInActiveList+0x7c>)
 8006cac:	681a      	ldr	r2, [r3, #0]
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	3304      	adds	r3, #4
 8006cb2:	4619      	mov	r1, r3
 8006cb4:	4610      	mov	r0, r2
 8006cb6:	f7fd fbb8 	bl	800442a <vListInsert>
 8006cba:	e012      	b.n	8006ce2 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006cbc:	687a      	ldr	r2, [r7, #4]
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	429a      	cmp	r2, r3
 8006cc2:	d206      	bcs.n	8006cd2 <prvInsertTimerInActiveList+0x62>
 8006cc4:	68ba      	ldr	r2, [r7, #8]
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	429a      	cmp	r2, r3
 8006cca:	d302      	bcc.n	8006cd2 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8006ccc:	2301      	movs	r3, #1
 8006cce:	617b      	str	r3, [r7, #20]
 8006cd0:	e007      	b.n	8006ce2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006cd2:	4b07      	ldr	r3, [pc, #28]	@ (8006cf0 <prvInsertTimerInActiveList+0x80>)
 8006cd4:	681a      	ldr	r2, [r3, #0]
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	3304      	adds	r3, #4
 8006cda:	4619      	mov	r1, r3
 8006cdc:	4610      	mov	r0, r2
 8006cde:	f7fd fba4 	bl	800442a <vListInsert>
            }
        }

        return xProcessTimerNow;
 8006ce2:	697b      	ldr	r3, [r7, #20]
    }
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	3718      	adds	r7, #24
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bd80      	pop	{r7, pc}
 8006cec:	20000284 	.word	0x20000284
 8006cf0:	20000280 	.word	0x20000280

08006cf4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b088      	sub	sp, #32
 8006cf8:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006cfa:	e0a9      	b.n	8006e50 <prvProcessReceivedCommands+0x15c>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	f2c0 80a6 	blt.w	8006e50 <prvProcessReceivedCommands+0x15c>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006d04:	693b      	ldr	r3, [r7, #16]
 8006d06:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006d08:	69fb      	ldr	r3, [r7, #28]
 8006d0a:	695b      	ldr	r3, [r3, #20]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d004      	beq.n	8006d1a <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006d10:	69fb      	ldr	r3, [r7, #28]
 8006d12:	3304      	adds	r3, #4
 8006d14:	4618      	mov	r0, r3
 8006d16:	f7fd fbc1 	bl	800449c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006d1a:	1d3b      	adds	r3, r7, #4
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	f7ff ff87 	bl	8006c30 <prvSampleTimeNow>
 8006d22:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	3b01      	subs	r3, #1
 8006d28:	2b08      	cmp	r3, #8
 8006d2a:	f200 808e 	bhi.w	8006e4a <prvProcessReceivedCommands+0x156>
 8006d2e:	a201      	add	r2, pc, #4	@ (adr r2, 8006d34 <prvProcessReceivedCommands+0x40>)
 8006d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d34:	08006d59 	.word	0x08006d59
 8006d38:	08006d59 	.word	0x08006d59
 8006d3c:	08006dc1 	.word	0x08006dc1
 8006d40:	08006dd5 	.word	0x08006dd5
 8006d44:	08006e21 	.word	0x08006e21
 8006d48:	08006d59 	.word	0x08006d59
 8006d4c:	08006d59 	.word	0x08006d59
 8006d50:	08006dc1 	.word	0x08006dc1
 8006d54:	08006dd5 	.word	0x08006dd5
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006d58:	69fb      	ldr	r3, [r7, #28]
 8006d5a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006d5e:	f043 0301 	orr.w	r3, r3, #1
 8006d62:	b2da      	uxtb	r2, r3
 8006d64:	69fb      	ldr	r3, [r7, #28]
 8006d66:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006d6a:	68fa      	ldr	r2, [r7, #12]
 8006d6c:	69fb      	ldr	r3, [r7, #28]
 8006d6e:	699b      	ldr	r3, [r3, #24]
 8006d70:	18d1      	adds	r1, r2, r3
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	69ba      	ldr	r2, [r7, #24]
 8006d76:	69f8      	ldr	r0, [r7, #28]
 8006d78:	f7ff ff7a 	bl	8006c70 <prvInsertTimerInActiveList>
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d065      	beq.n	8006e4e <prvProcessReceivedCommands+0x15a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006d82:	69fb      	ldr	r3, [r7, #28]
 8006d84:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006d88:	f003 0304 	and.w	r3, r3, #4
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d009      	beq.n	8006da4 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8006d90:	68fa      	ldr	r2, [r7, #12]
 8006d92:	69fb      	ldr	r3, [r7, #28]
 8006d94:	699b      	ldr	r3, [r3, #24]
 8006d96:	4413      	add	r3, r2
 8006d98:	69ba      	ldr	r2, [r7, #24]
 8006d9a:	4619      	mov	r1, r3
 8006d9c:	69f8      	ldr	r0, [r7, #28]
 8006d9e:	f7ff fe6f 	bl	8006a80 <prvReloadTimer>
 8006da2:	e008      	b.n	8006db6 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8006da4:	69fb      	ldr	r3, [r7, #28]
 8006da6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006daa:	f023 0301 	bic.w	r3, r3, #1
 8006dae:	b2da      	uxtb	r2, r3
 8006db0:	69fb      	ldr	r3, [r7, #28]
 8006db2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006db6:	69fb      	ldr	r3, [r7, #28]
 8006db8:	6a1b      	ldr	r3, [r3, #32]
 8006dba:	69f8      	ldr	r0, [r7, #28]
 8006dbc:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8006dbe:	e046      	b.n	8006e4e <prvProcessReceivedCommands+0x15a>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8006dc0:	69fb      	ldr	r3, [r7, #28]
 8006dc2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006dc6:	f023 0301 	bic.w	r3, r3, #1
 8006dca:	b2da      	uxtb	r2, r3
 8006dcc:	69fb      	ldr	r3, [r7, #28]
 8006dce:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8006dd2:	e03d      	b.n	8006e50 <prvProcessReceivedCommands+0x15c>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006dd4:	69fb      	ldr	r3, [r7, #28]
 8006dd6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006dda:	f043 0301 	orr.w	r3, r3, #1
 8006dde:	b2da      	uxtb	r2, r3
 8006de0:	69fb      	ldr	r3, [r7, #28]
 8006de2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006de6:	68fa      	ldr	r2, [r7, #12]
 8006de8:	69fb      	ldr	r3, [r7, #28]
 8006dea:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006dec:	69fb      	ldr	r3, [r7, #28]
 8006dee:	699b      	ldr	r3, [r3, #24]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d10b      	bne.n	8006e0c <prvProcessReceivedCommands+0x118>
        __asm volatile
 8006df4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006df8:	f383 8811 	msr	BASEPRI, r3
 8006dfc:	f3bf 8f6f 	isb	sy
 8006e00:	f3bf 8f4f 	dsb	sy
 8006e04:	617b      	str	r3, [r7, #20]
    }
 8006e06:	bf00      	nop
 8006e08:	bf00      	nop
 8006e0a:	e7fd      	b.n	8006e08 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006e0c:	69fb      	ldr	r3, [r7, #28]
 8006e0e:	699a      	ldr	r2, [r3, #24]
 8006e10:	69bb      	ldr	r3, [r7, #24]
 8006e12:	18d1      	adds	r1, r2, r3
 8006e14:	69bb      	ldr	r3, [r7, #24]
 8006e16:	69ba      	ldr	r2, [r7, #24]
 8006e18:	69f8      	ldr	r0, [r7, #28]
 8006e1a:	f7ff ff29 	bl	8006c70 <prvInsertTimerInActiveList>
                        break;
 8006e1e:	e017      	b.n	8006e50 <prvProcessReceivedCommands+0x15c>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006e20:	69fb      	ldr	r3, [r7, #28]
 8006e22:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006e26:	f003 0302 	and.w	r3, r3, #2
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d103      	bne.n	8006e36 <prvProcessReceivedCommands+0x142>
                            {
                                vPortFree( pxTimer );
 8006e2e:	69f8      	ldr	r0, [r7, #28]
 8006e30:	f000 fbba 	bl	80075a8 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8006e34:	e00c      	b.n	8006e50 <prvProcessReceivedCommands+0x15c>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8006e36:	69fb      	ldr	r3, [r7, #28]
 8006e38:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006e3c:	f023 0301 	bic.w	r3, r3, #1
 8006e40:	b2da      	uxtb	r2, r3
 8006e42:	69fb      	ldr	r3, [r7, #28]
 8006e44:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8006e48:	e002      	b.n	8006e50 <prvProcessReceivedCommands+0x15c>

                    default:
                        /* Don't expect to get here. */
                        break;
 8006e4a:	bf00      	nop
 8006e4c:	e000      	b.n	8006e50 <prvProcessReceivedCommands+0x15c>
                        break;
 8006e4e:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006e50:	4b08      	ldr	r3, [pc, #32]	@ (8006e74 <prvProcessReceivedCommands+0x180>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f107 0108 	add.w	r1, r7, #8
 8006e58:	2200      	movs	r2, #0
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	f7fd fe04 	bl	8004a68 <xQueueReceive>
 8006e60:	4603      	mov	r3, r0
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	f47f af4a 	bne.w	8006cfc <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8006e68:	bf00      	nop
 8006e6a:	bf00      	nop
 8006e6c:	3720      	adds	r7, #32
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd80      	pop	{r7, pc}
 8006e72:	bf00      	nop
 8006e74:	20000288 	.word	0x20000288

08006e78 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b082      	sub	sp, #8
 8006e7c:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006e7e:	e009      	b.n	8006e94 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006e80:	4b0e      	ldr	r3, [pc, #56]	@ (8006ebc <prvSwitchTimerLists+0x44>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	68db      	ldr	r3, [r3, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8006e8a:	f04f 31ff 	mov.w	r1, #4294967295
 8006e8e:	6838      	ldr	r0, [r7, #0]
 8006e90:	f7ff fe18 	bl	8006ac4 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006e94:	4b09      	ldr	r3, [pc, #36]	@ (8006ebc <prvSwitchTimerLists+0x44>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d1f0      	bne.n	8006e80 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8006e9e:	4b07      	ldr	r3, [pc, #28]	@ (8006ebc <prvSwitchTimerLists+0x44>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8006ea4:	4b06      	ldr	r3, [pc, #24]	@ (8006ec0 <prvSwitchTimerLists+0x48>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	4a04      	ldr	r2, [pc, #16]	@ (8006ebc <prvSwitchTimerLists+0x44>)
 8006eaa:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8006eac:	4a04      	ldr	r2, [pc, #16]	@ (8006ec0 <prvSwitchTimerLists+0x48>)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6013      	str	r3, [r2, #0]
    }
 8006eb2:	bf00      	nop
 8006eb4:	3708      	adds	r7, #8
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}
 8006eba:	bf00      	nop
 8006ebc:	20000280 	.word	0x20000280
 8006ec0:	20000284 	.word	0x20000284

08006ec4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8006ec8:	f000 f988 	bl	80071dc <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8006ecc:	4b12      	ldr	r3, [pc, #72]	@ (8006f18 <prvCheckForValidListAndQueue+0x54>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d11d      	bne.n	8006f10 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8006ed4:	4811      	ldr	r0, [pc, #68]	@ (8006f1c <prvCheckForValidListAndQueue+0x58>)
 8006ed6:	f7fd fa7b 	bl	80043d0 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8006eda:	4811      	ldr	r0, [pc, #68]	@ (8006f20 <prvCheckForValidListAndQueue+0x5c>)
 8006edc:	f7fd fa78 	bl	80043d0 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8006ee0:	4b10      	ldr	r3, [pc, #64]	@ (8006f24 <prvCheckForValidListAndQueue+0x60>)
 8006ee2:	4a0e      	ldr	r2, [pc, #56]	@ (8006f1c <prvCheckForValidListAndQueue+0x58>)
 8006ee4:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8006ee6:	4b10      	ldr	r3, [pc, #64]	@ (8006f28 <prvCheckForValidListAndQueue+0x64>)
 8006ee8:	4a0d      	ldr	r2, [pc, #52]	@ (8006f20 <prvCheckForValidListAndQueue+0x5c>)
 8006eea:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8006eec:	2200      	movs	r2, #0
 8006eee:	210c      	movs	r1, #12
 8006ef0:	200a      	movs	r0, #10
 8006ef2:	f7fd fb8f 	bl	8004614 <xQueueGenericCreate>
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	4a07      	ldr	r2, [pc, #28]	@ (8006f18 <prvCheckForValidListAndQueue+0x54>)
 8006efa:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8006efc:	4b06      	ldr	r3, [pc, #24]	@ (8006f18 <prvCheckForValidListAndQueue+0x54>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d005      	beq.n	8006f10 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006f04:	4b04      	ldr	r3, [pc, #16]	@ (8006f18 <prvCheckForValidListAndQueue+0x54>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4908      	ldr	r1, [pc, #32]	@ (8006f2c <prvCheckForValidListAndQueue+0x68>)
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	f7fe f87e 	bl	800500c <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8006f10:	f000 f996 	bl	8007240 <vPortExitCritical>
    }
 8006f14:	bf00      	nop
 8006f16:	bd80      	pop	{r7, pc}
 8006f18:	20000288 	.word	0x20000288
 8006f1c:	20000258 	.word	0x20000258
 8006f20:	2000026c 	.word	0x2000026c
 8006f24:	20000280 	.word	0x20000280
 8006f28:	20000284 	.word	0x20000284
 8006f2c:	08007a44 	.word	0x08007a44

08006f30 <pvTimerGetTimerID>:
        return xReturn;
    } /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

    void * pvTimerGetTimerID( const TimerHandle_t xTimer )
    {
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b086      	sub	sp, #24
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
        Timer_t * const pxTimer = xTimer;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	617b      	str	r3, [r7, #20]
        void * pvReturn;

        configASSERT( xTimer );
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d10b      	bne.n	8006f5a <pvTimerGetTimerID+0x2a>
        __asm volatile
 8006f42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f46:	f383 8811 	msr	BASEPRI, r3
 8006f4a:	f3bf 8f6f 	isb	sy
 8006f4e:	f3bf 8f4f 	dsb	sy
 8006f52:	60fb      	str	r3, [r7, #12]
    }
 8006f54:	bf00      	nop
 8006f56:	bf00      	nop
 8006f58:	e7fd      	b.n	8006f56 <pvTimerGetTimerID+0x26>

        taskENTER_CRITICAL();
 8006f5a:	f000 f93f 	bl	80071dc <vPortEnterCritical>
        {
            pvReturn = pxTimer->pvTimerID;
 8006f5e:	697b      	ldr	r3, [r7, #20]
 8006f60:	69db      	ldr	r3, [r3, #28]
 8006f62:	613b      	str	r3, [r7, #16]
        }
        taskEXIT_CRITICAL();
 8006f64:	f000 f96c 	bl	8007240 <vPortExitCritical>

        return pvReturn;
 8006f68:	693b      	ldr	r3, [r7, #16]
    }
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	3718      	adds	r7, #24
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd80      	pop	{r7, pc}
	...

08006f74 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8006f74:	b480      	push	{r7}
 8006f76:	b085      	sub	sp, #20
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	60f8      	str	r0, [r7, #12]
 8006f7c:	60b9      	str	r1, [r7, #8]
 8006f7e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	3b04      	subs	r3, #4
 8006f84:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006f8c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	3b04      	subs	r3, #4
 8006f92:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	f023 0201 	bic.w	r2, r3, #1
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	3b04      	subs	r3, #4
 8006fa2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8006fa4:	4a0c      	ldr	r2, [pc, #48]	@ (8006fd8 <pxPortInitialiseStack+0x64>)
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	3b14      	subs	r3, #20
 8006fae:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8006fb0:	687a      	ldr	r2, [r7, #4]
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	3b04      	subs	r3, #4
 8006fba:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	f06f 0202 	mvn.w	r2, #2
 8006fc2:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	3b20      	subs	r3, #32
 8006fc8:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8006fca:	68fb      	ldr	r3, [r7, #12]
}
 8006fcc:	4618      	mov	r0, r3
 8006fce:	3714      	adds	r7, #20
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd6:	4770      	bx	lr
 8006fd8:	08006fdd 	.word	0x08006fdd

08006fdc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b085      	sub	sp, #20
 8006fe0:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8006fe6:	4b13      	ldr	r3, [pc, #76]	@ (8007034 <prvTaskExitError+0x58>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fee:	d00b      	beq.n	8007008 <prvTaskExitError+0x2c>
        __asm volatile
 8006ff0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ff4:	f383 8811 	msr	BASEPRI, r3
 8006ff8:	f3bf 8f6f 	isb	sy
 8006ffc:	f3bf 8f4f 	dsb	sy
 8007000:	60fb      	str	r3, [r7, #12]
    }
 8007002:	bf00      	nop
 8007004:	bf00      	nop
 8007006:	e7fd      	b.n	8007004 <prvTaskExitError+0x28>
        __asm volatile
 8007008:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800700c:	f383 8811 	msr	BASEPRI, r3
 8007010:	f3bf 8f6f 	isb	sy
 8007014:	f3bf 8f4f 	dsb	sy
 8007018:	60bb      	str	r3, [r7, #8]
    }
 800701a:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800701c:	bf00      	nop
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d0fc      	beq.n	800701e <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8007024:	bf00      	nop
 8007026:	bf00      	nop
 8007028:	3714      	adds	r7, #20
 800702a:	46bd      	mov	sp, r7
 800702c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007030:	4770      	bx	lr
 8007032:	bf00      	nop
 8007034:	20000010 	.word	0x20000010
	...

08007040 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8007040:	4b07      	ldr	r3, [pc, #28]	@ (8007060 <pxCurrentTCBConst2>)
 8007042:	6819      	ldr	r1, [r3, #0]
 8007044:	6808      	ldr	r0, [r1, #0]
 8007046:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800704a:	f380 8809 	msr	PSP, r0
 800704e:	f3bf 8f6f 	isb	sy
 8007052:	f04f 0000 	mov.w	r0, #0
 8007056:	f380 8811 	msr	BASEPRI, r0
 800705a:	4770      	bx	lr
 800705c:	f3af 8000 	nop.w

08007060 <pxCurrentTCBConst2>:
 8007060:	20000154 	.word	0x20000154
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8007064:	bf00      	nop
 8007066:	bf00      	nop

08007068 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8007068:	4808      	ldr	r0, [pc, #32]	@ (800708c <prvPortStartFirstTask+0x24>)
 800706a:	6800      	ldr	r0, [r0, #0]
 800706c:	6800      	ldr	r0, [r0, #0]
 800706e:	f380 8808 	msr	MSP, r0
 8007072:	f04f 0000 	mov.w	r0, #0
 8007076:	f380 8814 	msr	CONTROL, r0
 800707a:	b662      	cpsie	i
 800707c:	b661      	cpsie	f
 800707e:	f3bf 8f4f 	dsb	sy
 8007082:	f3bf 8f6f 	isb	sy
 8007086:	df00      	svc	0
 8007088:	bf00      	nop
 800708a:	0000      	.short	0x0000
 800708c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8007090:	bf00      	nop
 8007092:	bf00      	nop

08007094 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b086      	sub	sp, #24
 8007098:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800709a:	4b47      	ldr	r3, [pc, #284]	@ (80071b8 <xPortStartScheduler+0x124>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	4a47      	ldr	r2, [pc, #284]	@ (80071bc <xPortStartScheduler+0x128>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d10b      	bne.n	80070bc <xPortStartScheduler+0x28>
        __asm volatile
 80070a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070a8:	f383 8811 	msr	BASEPRI, r3
 80070ac:	f3bf 8f6f 	isb	sy
 80070b0:	f3bf 8f4f 	dsb	sy
 80070b4:	613b      	str	r3, [r7, #16]
    }
 80070b6:	bf00      	nop
 80070b8:	bf00      	nop
 80070ba:	e7fd      	b.n	80070b8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80070bc:	4b3e      	ldr	r3, [pc, #248]	@ (80071b8 <xPortStartScheduler+0x124>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4a3f      	ldr	r2, [pc, #252]	@ (80071c0 <xPortStartScheduler+0x12c>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d10b      	bne.n	80070de <xPortStartScheduler+0x4a>
        __asm volatile
 80070c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070ca:	f383 8811 	msr	BASEPRI, r3
 80070ce:	f3bf 8f6f 	isb	sy
 80070d2:	f3bf 8f4f 	dsb	sy
 80070d6:	60fb      	str	r3, [r7, #12]
    }
 80070d8:	bf00      	nop
 80070da:	bf00      	nop
 80070dc:	e7fd      	b.n	80070da <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80070de:	4b39      	ldr	r3, [pc, #228]	@ (80071c4 <xPortStartScheduler+0x130>)
 80070e0:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	781b      	ldrb	r3, [r3, #0]
 80070e6:	b2db      	uxtb	r3, r3
 80070e8:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80070ea:	697b      	ldr	r3, [r7, #20]
 80070ec:	22ff      	movs	r2, #255	@ 0xff
 80070ee:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80070f0:	697b      	ldr	r3, [r7, #20]
 80070f2:	781b      	ldrb	r3, [r3, #0]
 80070f4:	b2db      	uxtb	r3, r3
 80070f6:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80070f8:	78fb      	ldrb	r3, [r7, #3]
 80070fa:	b2db      	uxtb	r3, r3
 80070fc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007100:	b2da      	uxtb	r2, r3
 8007102:	4b31      	ldr	r3, [pc, #196]	@ (80071c8 <xPortStartScheduler+0x134>)
 8007104:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007106:	4b31      	ldr	r3, [pc, #196]	@ (80071cc <xPortStartScheduler+0x138>)
 8007108:	2207      	movs	r2, #7
 800710a:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800710c:	e009      	b.n	8007122 <xPortStartScheduler+0x8e>
        {
            ulMaxPRIGROUPValue--;
 800710e:	4b2f      	ldr	r3, [pc, #188]	@ (80071cc <xPortStartScheduler+0x138>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	3b01      	subs	r3, #1
 8007114:	4a2d      	ldr	r2, [pc, #180]	@ (80071cc <xPortStartScheduler+0x138>)
 8007116:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007118:	78fb      	ldrb	r3, [r7, #3]
 800711a:	b2db      	uxtb	r3, r3
 800711c:	005b      	lsls	r3, r3, #1
 800711e:	b2db      	uxtb	r3, r3
 8007120:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007122:	78fb      	ldrb	r3, [r7, #3]
 8007124:	b2db      	uxtb	r3, r3
 8007126:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800712a:	2b80      	cmp	r3, #128	@ 0x80
 800712c:	d0ef      	beq.n	800710e <xPortStartScheduler+0x7a>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800712e:	4b27      	ldr	r3, [pc, #156]	@ (80071cc <xPortStartScheduler+0x138>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f1c3 0307 	rsb	r3, r3, #7
 8007136:	2b04      	cmp	r3, #4
 8007138:	d00b      	beq.n	8007152 <xPortStartScheduler+0xbe>
        __asm volatile
 800713a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800713e:	f383 8811 	msr	BASEPRI, r3
 8007142:	f3bf 8f6f 	isb	sy
 8007146:	f3bf 8f4f 	dsb	sy
 800714a:	60bb      	str	r3, [r7, #8]
    }
 800714c:	bf00      	nop
 800714e:	bf00      	nop
 8007150:	e7fd      	b.n	800714e <xPortStartScheduler+0xba>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007152:	4b1e      	ldr	r3, [pc, #120]	@ (80071cc <xPortStartScheduler+0x138>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	021b      	lsls	r3, r3, #8
 8007158:	4a1c      	ldr	r2, [pc, #112]	@ (80071cc <xPortStartScheduler+0x138>)
 800715a:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800715c:	4b1b      	ldr	r3, [pc, #108]	@ (80071cc <xPortStartScheduler+0x138>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007164:	4a19      	ldr	r2, [pc, #100]	@ (80071cc <xPortStartScheduler+0x138>)
 8007166:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	b2da      	uxtb	r2, r3
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8007170:	4b17      	ldr	r3, [pc, #92]	@ (80071d0 <xPortStartScheduler+0x13c>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a16      	ldr	r2, [pc, #88]	@ (80071d0 <xPortStartScheduler+0x13c>)
 8007176:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800717a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800717c:	4b14      	ldr	r3, [pc, #80]	@ (80071d0 <xPortStartScheduler+0x13c>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	4a13      	ldr	r2, [pc, #76]	@ (80071d0 <xPortStartScheduler+0x13c>)
 8007182:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007186:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8007188:	f000 f8e0 	bl	800734c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800718c:	4b11      	ldr	r3, [pc, #68]	@ (80071d4 <xPortStartScheduler+0x140>)
 800718e:	2200      	movs	r2, #0
 8007190:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8007192:	f000 f8ff 	bl	8007394 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007196:	4b10      	ldr	r3, [pc, #64]	@ (80071d8 <xPortStartScheduler+0x144>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4a0f      	ldr	r2, [pc, #60]	@ (80071d8 <xPortStartScheduler+0x144>)
 800719c:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80071a0:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80071a2:	f7ff ff61 	bl	8007068 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80071a6:	f7fe fc69 	bl	8005a7c <vTaskSwitchContext>
    prvTaskExitError();
 80071aa:	f7ff ff17 	bl	8006fdc <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80071ae:	2300      	movs	r3, #0
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	3718      	adds	r7, #24
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd80      	pop	{r7, pc}
 80071b8:	e000ed00 	.word	0xe000ed00
 80071bc:	410fc271 	.word	0x410fc271
 80071c0:	410fc270 	.word	0x410fc270
 80071c4:	e000e400 	.word	0xe000e400
 80071c8:	20000294 	.word	0x20000294
 80071cc:	20000298 	.word	0x20000298
 80071d0:	e000ed20 	.word	0xe000ed20
 80071d4:	20000010 	.word	0x20000010
 80071d8:	e000ef34 	.word	0xe000ef34

080071dc <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80071dc:	b480      	push	{r7}
 80071de:	b083      	sub	sp, #12
 80071e0:	af00      	add	r7, sp, #0
        __asm volatile
 80071e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071e6:	f383 8811 	msr	BASEPRI, r3
 80071ea:	f3bf 8f6f 	isb	sy
 80071ee:	f3bf 8f4f 	dsb	sy
 80071f2:	607b      	str	r3, [r7, #4]
    }
 80071f4:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80071f6:	4b10      	ldr	r3, [pc, #64]	@ (8007238 <vPortEnterCritical+0x5c>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	3301      	adds	r3, #1
 80071fc:	4a0e      	ldr	r2, [pc, #56]	@ (8007238 <vPortEnterCritical+0x5c>)
 80071fe:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8007200:	4b0d      	ldr	r3, [pc, #52]	@ (8007238 <vPortEnterCritical+0x5c>)
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	2b01      	cmp	r3, #1
 8007206:	d110      	bne.n	800722a <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007208:	4b0c      	ldr	r3, [pc, #48]	@ (800723c <vPortEnterCritical+0x60>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	b2db      	uxtb	r3, r3
 800720e:	2b00      	cmp	r3, #0
 8007210:	d00b      	beq.n	800722a <vPortEnterCritical+0x4e>
        __asm volatile
 8007212:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007216:	f383 8811 	msr	BASEPRI, r3
 800721a:	f3bf 8f6f 	isb	sy
 800721e:	f3bf 8f4f 	dsb	sy
 8007222:	603b      	str	r3, [r7, #0]
    }
 8007224:	bf00      	nop
 8007226:	bf00      	nop
 8007228:	e7fd      	b.n	8007226 <vPortEnterCritical+0x4a>
    }
}
 800722a:	bf00      	nop
 800722c:	370c      	adds	r7, #12
 800722e:	46bd      	mov	sp, r7
 8007230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007234:	4770      	bx	lr
 8007236:	bf00      	nop
 8007238:	20000010 	.word	0x20000010
 800723c:	e000ed04 	.word	0xe000ed04

08007240 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007240:	b480      	push	{r7}
 8007242:	b083      	sub	sp, #12
 8007244:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8007246:	4b12      	ldr	r3, [pc, #72]	@ (8007290 <vPortExitCritical+0x50>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d10b      	bne.n	8007266 <vPortExitCritical+0x26>
        __asm volatile
 800724e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007252:	f383 8811 	msr	BASEPRI, r3
 8007256:	f3bf 8f6f 	isb	sy
 800725a:	f3bf 8f4f 	dsb	sy
 800725e:	607b      	str	r3, [r7, #4]
    }
 8007260:	bf00      	nop
 8007262:	bf00      	nop
 8007264:	e7fd      	b.n	8007262 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8007266:	4b0a      	ldr	r3, [pc, #40]	@ (8007290 <vPortExitCritical+0x50>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	3b01      	subs	r3, #1
 800726c:	4a08      	ldr	r2, [pc, #32]	@ (8007290 <vPortExitCritical+0x50>)
 800726e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8007270:	4b07      	ldr	r3, [pc, #28]	@ (8007290 <vPortExitCritical+0x50>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d105      	bne.n	8007284 <vPortExitCritical+0x44>
 8007278:	2300      	movs	r3, #0
 800727a:	603b      	str	r3, [r7, #0]
        __asm volatile
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	f383 8811 	msr	BASEPRI, r3
    }
 8007282:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8007284:	bf00      	nop
 8007286:	370c      	adds	r7, #12
 8007288:	46bd      	mov	sp, r7
 800728a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728e:	4770      	bx	lr
 8007290:	20000010 	.word	0x20000010
	...

080072a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80072a0:	f3ef 8009 	mrs	r0, PSP
 80072a4:	f3bf 8f6f 	isb	sy
 80072a8:	4b15      	ldr	r3, [pc, #84]	@ (8007300 <pxCurrentTCBConst>)
 80072aa:	681a      	ldr	r2, [r3, #0]
 80072ac:	f01e 0f10 	tst.w	lr, #16
 80072b0:	bf08      	it	eq
 80072b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80072b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072ba:	6010      	str	r0, [r2, #0]
 80072bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80072c0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80072c4:	f380 8811 	msr	BASEPRI, r0
 80072c8:	f3bf 8f4f 	dsb	sy
 80072cc:	f3bf 8f6f 	isb	sy
 80072d0:	f7fe fbd4 	bl	8005a7c <vTaskSwitchContext>
 80072d4:	f04f 0000 	mov.w	r0, #0
 80072d8:	f380 8811 	msr	BASEPRI, r0
 80072dc:	bc09      	pop	{r0, r3}
 80072de:	6819      	ldr	r1, [r3, #0]
 80072e0:	6808      	ldr	r0, [r1, #0]
 80072e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072e6:	f01e 0f10 	tst.w	lr, #16
 80072ea:	bf08      	it	eq
 80072ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80072f0:	f380 8809 	msr	PSP, r0
 80072f4:	f3bf 8f6f 	isb	sy
 80072f8:	4770      	bx	lr
 80072fa:	bf00      	nop
 80072fc:	f3af 8000 	nop.w

08007300 <pxCurrentTCBConst>:
 8007300:	20000154 	.word	0x20000154
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8007304:	bf00      	nop
 8007306:	bf00      	nop

08007308 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b082      	sub	sp, #8
 800730c:	af00      	add	r7, sp, #0
        __asm volatile
 800730e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007312:	f383 8811 	msr	BASEPRI, r3
 8007316:	f3bf 8f6f 	isb	sy
 800731a:	f3bf 8f4f 	dsb	sy
 800731e:	607b      	str	r3, [r7, #4]
    }
 8007320:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8007322:	f7fe fa93 	bl	800584c <xTaskIncrementTick>
 8007326:	4603      	mov	r3, r0
 8007328:	2b00      	cmp	r3, #0
 800732a:	d003      	beq.n	8007334 <SysTick_Handler+0x2c>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800732c:	4b06      	ldr	r3, [pc, #24]	@ (8007348 <SysTick_Handler+0x40>)
 800732e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007332:	601a      	str	r2, [r3, #0]
 8007334:	2300      	movs	r3, #0
 8007336:	603b      	str	r3, [r7, #0]
        __asm volatile
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	f383 8811 	msr	BASEPRI, r3
    }
 800733e:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 8007340:	bf00      	nop
 8007342:	3708      	adds	r7, #8
 8007344:	46bd      	mov	sp, r7
 8007346:	bd80      	pop	{r7, pc}
 8007348:	e000ed04 	.word	0xe000ed04

0800734c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800734c:	b480      	push	{r7}
 800734e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007350:	4b0b      	ldr	r3, [pc, #44]	@ (8007380 <vPortSetupTimerInterrupt+0x34>)
 8007352:	2200      	movs	r2, #0
 8007354:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007356:	4b0b      	ldr	r3, [pc, #44]	@ (8007384 <vPortSetupTimerInterrupt+0x38>)
 8007358:	2200      	movs	r2, #0
 800735a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800735c:	4b0a      	ldr	r3, [pc, #40]	@ (8007388 <vPortSetupTimerInterrupt+0x3c>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4a0a      	ldr	r2, [pc, #40]	@ (800738c <vPortSetupTimerInterrupt+0x40>)
 8007362:	fba2 2303 	umull	r2, r3, r2, r3
 8007366:	099b      	lsrs	r3, r3, #6
 8007368:	4a09      	ldr	r2, [pc, #36]	@ (8007390 <vPortSetupTimerInterrupt+0x44>)
 800736a:	3b01      	subs	r3, #1
 800736c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800736e:	4b04      	ldr	r3, [pc, #16]	@ (8007380 <vPortSetupTimerInterrupt+0x34>)
 8007370:	2207      	movs	r2, #7
 8007372:	601a      	str	r2, [r3, #0]
}
 8007374:	bf00      	nop
 8007376:	46bd      	mov	sp, r7
 8007378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737c:	4770      	bx	lr
 800737e:	bf00      	nop
 8007380:	e000e010 	.word	0xe000e010
 8007384:	e000e018 	.word	0xe000e018
 8007388:	20000000 	.word	0x20000000
 800738c:	10624dd3 	.word	0x10624dd3
 8007390:	e000e014 	.word	0xe000e014

08007394 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8007394:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80073a4 <vPortEnableVFP+0x10>
 8007398:	6801      	ldr	r1, [r0, #0]
 800739a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800739e:	6001      	str	r1, [r0, #0]
 80073a0:	4770      	bx	lr
 80073a2:	0000      	.short	0x0000
 80073a4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80073a8:	bf00      	nop
 80073aa:	bf00      	nop

080073ac <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80073ac:	b480      	push	{r7}
 80073ae:	b085      	sub	sp, #20
 80073b0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80073b2:	f3ef 8305 	mrs	r3, IPSR
 80073b6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	2b0f      	cmp	r3, #15
 80073bc:	d915      	bls.n	80073ea <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80073be:	4a18      	ldr	r2, [pc, #96]	@ (8007420 <vPortValidateInterruptPriority+0x74>)
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	4413      	add	r3, r2
 80073c4:	781b      	ldrb	r3, [r3, #0]
 80073c6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80073c8:	4b16      	ldr	r3, [pc, #88]	@ (8007424 <vPortValidateInterruptPriority+0x78>)
 80073ca:	781b      	ldrb	r3, [r3, #0]
 80073cc:	7afa      	ldrb	r2, [r7, #11]
 80073ce:	429a      	cmp	r2, r3
 80073d0:	d20b      	bcs.n	80073ea <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 80073d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073d6:	f383 8811 	msr	BASEPRI, r3
 80073da:	f3bf 8f6f 	isb	sy
 80073de:	f3bf 8f4f 	dsb	sy
 80073e2:	607b      	str	r3, [r7, #4]
    }
 80073e4:	bf00      	nop
 80073e6:	bf00      	nop
 80073e8:	e7fd      	b.n	80073e6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80073ea:	4b0f      	ldr	r3, [pc, #60]	@ (8007428 <vPortValidateInterruptPriority+0x7c>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80073f2:	4b0e      	ldr	r3, [pc, #56]	@ (800742c <vPortValidateInterruptPriority+0x80>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	429a      	cmp	r2, r3
 80073f8:	d90b      	bls.n	8007412 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 80073fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073fe:	f383 8811 	msr	BASEPRI, r3
 8007402:	f3bf 8f6f 	isb	sy
 8007406:	f3bf 8f4f 	dsb	sy
 800740a:	603b      	str	r3, [r7, #0]
    }
 800740c:	bf00      	nop
 800740e:	bf00      	nop
 8007410:	e7fd      	b.n	800740e <vPortValidateInterruptPriority+0x62>
    }
 8007412:	bf00      	nop
 8007414:	3714      	adds	r7, #20
 8007416:	46bd      	mov	sp, r7
 8007418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741c:	4770      	bx	lr
 800741e:	bf00      	nop
 8007420:	e000e3f0 	.word	0xe000e3f0
 8007424:	20000294 	.word	0x20000294
 8007428:	e000ed0c 	.word	0xe000ed0c
 800742c:	20000298 	.word	0x20000298

08007430 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b08a      	sub	sp, #40	@ 0x28
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8007438:	2300      	movs	r3, #0
 800743a:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 800743c:	f7fe f8e0 	bl	8005600 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8007440:	4b54      	ldr	r3, [pc, #336]	@ (8007594 <pvPortMalloc+0x164>)
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d101      	bne.n	800744c <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8007448:	f000 f90c 	bl	8007664 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d012      	beq.n	8007478 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8007452:	2208      	movs	r2, #8
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f003 0307 	and.w	r3, r3, #7
 800745a:	1ad3      	subs	r3, r2, r3
 800745c:	3308      	adds	r3, #8
 800745e:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8007460:	69bb      	ldr	r3, [r7, #24]
 8007462:	43db      	mvns	r3, r3
 8007464:	687a      	ldr	r2, [r7, #4]
 8007466:	429a      	cmp	r2, r3
 8007468:	d804      	bhi.n	8007474 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 800746a:	687a      	ldr	r2, [r7, #4]
 800746c:	69bb      	ldr	r3, [r7, #24]
 800746e:	4413      	add	r3, r2
 8007470:	607b      	str	r3, [r7, #4]
 8007472:	e001      	b.n	8007478 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8007474:	2300      	movs	r3, #0
 8007476:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2b00      	cmp	r3, #0
 800747c:	db71      	blt.n	8007562 <pvPortMalloc+0x132>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d06e      	beq.n	8007562 <pvPortMalloc+0x132>
 8007484:	4b44      	ldr	r3, [pc, #272]	@ (8007598 <pvPortMalloc+0x168>)
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	687a      	ldr	r2, [r7, #4]
 800748a:	429a      	cmp	r2, r3
 800748c:	d869      	bhi.n	8007562 <pvPortMalloc+0x132>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800748e:	4b43      	ldr	r3, [pc, #268]	@ (800759c <pvPortMalloc+0x16c>)
 8007490:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8007492:	4b42      	ldr	r3, [pc, #264]	@ (800759c <pvPortMalloc+0x16c>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007498:	e004      	b.n	80074a4 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 800749a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800749c:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800749e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80074a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074a6:	685b      	ldr	r3, [r3, #4]
 80074a8:	687a      	ldr	r2, [r7, #4]
 80074aa:	429a      	cmp	r2, r3
 80074ac:	d903      	bls.n	80074b6 <pvPortMalloc+0x86>
 80074ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d1f1      	bne.n	800749a <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80074b6:	4b37      	ldr	r3, [pc, #220]	@ (8007594 <pvPortMalloc+0x164>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074bc:	429a      	cmp	r2, r3
 80074be:	d050      	beq.n	8007562 <pvPortMalloc+0x132>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80074c0:	6a3b      	ldr	r3, [r7, #32]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	2208      	movs	r2, #8
 80074c6:	4413      	add	r3, r2
 80074c8:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80074ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074cc:	681a      	ldr	r2, [r3, #0]
 80074ce:	6a3b      	ldr	r3, [r7, #32]
 80074d0:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80074d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074d4:	685a      	ldr	r2, [r3, #4]
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	1ad2      	subs	r2, r2, r3
 80074da:	2308      	movs	r3, #8
 80074dc:	005b      	lsls	r3, r3, #1
 80074de:	429a      	cmp	r2, r3
 80074e0:	d920      	bls.n	8007524 <pvPortMalloc+0xf4>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80074e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	4413      	add	r3, r2
 80074e8:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80074ea:	697b      	ldr	r3, [r7, #20]
 80074ec:	f003 0307 	and.w	r3, r3, #7
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d00b      	beq.n	800750c <pvPortMalloc+0xdc>
        __asm volatile
 80074f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074f8:	f383 8811 	msr	BASEPRI, r3
 80074fc:	f3bf 8f6f 	isb	sy
 8007500:	f3bf 8f4f 	dsb	sy
 8007504:	613b      	str	r3, [r7, #16]
    }
 8007506:	bf00      	nop
 8007508:	bf00      	nop
 800750a:	e7fd      	b.n	8007508 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800750c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800750e:	685a      	ldr	r2, [r3, #4]
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	1ad2      	subs	r2, r2, r3
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8007518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800751a:	687a      	ldr	r2, [r7, #4]
 800751c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800751e:	6978      	ldr	r0, [r7, #20]
 8007520:	f000 f8fc 	bl	800771c <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007524:	4b1c      	ldr	r3, [pc, #112]	@ (8007598 <pvPortMalloc+0x168>)
 8007526:	681a      	ldr	r2, [r3, #0]
 8007528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800752a:	685b      	ldr	r3, [r3, #4]
 800752c:	1ad3      	subs	r3, r2, r3
 800752e:	4a1a      	ldr	r2, [pc, #104]	@ (8007598 <pvPortMalloc+0x168>)
 8007530:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007532:	4b19      	ldr	r3, [pc, #100]	@ (8007598 <pvPortMalloc+0x168>)
 8007534:	681a      	ldr	r2, [r3, #0]
 8007536:	4b1a      	ldr	r3, [pc, #104]	@ (80075a0 <pvPortMalloc+0x170>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	429a      	cmp	r2, r3
 800753c:	d203      	bcs.n	8007546 <pvPortMalloc+0x116>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800753e:	4b16      	ldr	r3, [pc, #88]	@ (8007598 <pvPortMalloc+0x168>)
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	4a17      	ldr	r2, [pc, #92]	@ (80075a0 <pvPortMalloc+0x170>)
 8007544:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8007546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007548:	685b      	ldr	r3, [r3, #4]
 800754a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800754e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007550:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8007552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007554:	2200      	movs	r2, #0
 8007556:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8007558:	4b12      	ldr	r3, [pc, #72]	@ (80075a4 <pvPortMalloc+0x174>)
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	3301      	adds	r3, #1
 800755e:	4a11      	ldr	r2, [pc, #68]	@ (80075a4 <pvPortMalloc+0x174>)
 8007560:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8007562:	f7fe f85b 	bl	800561c <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007566:	69fb      	ldr	r3, [r7, #28]
 8007568:	f003 0307 	and.w	r3, r3, #7
 800756c:	2b00      	cmp	r3, #0
 800756e:	d00b      	beq.n	8007588 <pvPortMalloc+0x158>
        __asm volatile
 8007570:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007574:	f383 8811 	msr	BASEPRI, r3
 8007578:	f3bf 8f6f 	isb	sy
 800757c:	f3bf 8f4f 	dsb	sy
 8007580:	60fb      	str	r3, [r7, #12]
    }
 8007582:	bf00      	nop
 8007584:	bf00      	nop
 8007586:	e7fd      	b.n	8007584 <pvPortMalloc+0x154>
    return pvReturn;
 8007588:	69fb      	ldr	r3, [r7, #28]
}
 800758a:	4618      	mov	r0, r3
 800758c:	3728      	adds	r7, #40	@ 0x28
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}
 8007592:	bf00      	nop
 8007594:	20012ea4 	.word	0x20012ea4
 8007598:	20012ea8 	.word	0x20012ea8
 800759c:	20012e9c 	.word	0x20012e9c
 80075a0:	20012eac 	.word	0x20012eac
 80075a4:	20012eb0 	.word	0x20012eb0

080075a8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b086      	sub	sp, #24
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d04b      	beq.n	8007652 <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80075ba:	2308      	movs	r3, #8
 80075bc:	425b      	negs	r3, r3
 80075be:	697a      	ldr	r2, [r7, #20]
 80075c0:	4413      	add	r3, r2
 80075c2:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80075c4:	697b      	ldr	r3, [r7, #20]
 80075c6:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 80075c8:	693b      	ldr	r3, [r7, #16]
 80075ca:	685b      	ldr	r3, [r3, #4]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	db0b      	blt.n	80075e8 <vPortFree+0x40>
        __asm volatile
 80075d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075d4:	f383 8811 	msr	BASEPRI, r3
 80075d8:	f3bf 8f6f 	isb	sy
 80075dc:	f3bf 8f4f 	dsb	sy
 80075e0:	60fb      	str	r3, [r7, #12]
    }
 80075e2:	bf00      	nop
 80075e4:	bf00      	nop
 80075e6:	e7fd      	b.n	80075e4 <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80075e8:	693b      	ldr	r3, [r7, #16]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d00b      	beq.n	8007608 <vPortFree+0x60>
        __asm volatile
 80075f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075f4:	f383 8811 	msr	BASEPRI, r3
 80075f8:	f3bf 8f6f 	isb	sy
 80075fc:	f3bf 8f4f 	dsb	sy
 8007600:	60bb      	str	r3, [r7, #8]
    }
 8007602:	bf00      	nop
 8007604:	bf00      	nop
 8007606:	e7fd      	b.n	8007604 <vPortFree+0x5c>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8007608:	693b      	ldr	r3, [r7, #16]
 800760a:	685b      	ldr	r3, [r3, #4]
 800760c:	0fdb      	lsrs	r3, r3, #31
 800760e:	f003 0301 	and.w	r3, r3, #1
 8007612:	b2db      	uxtb	r3, r3
 8007614:	2b00      	cmp	r3, #0
 8007616:	d01c      	beq.n	8007652 <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8007618:	693b      	ldr	r3, [r7, #16]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d118      	bne.n	8007652 <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8007620:	693b      	ldr	r3, [r7, #16]
 8007622:	685b      	ldr	r3, [r3, #4]
 8007624:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8007628:	693b      	ldr	r3, [r7, #16]
 800762a:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 800762c:	f7fd ffe8 	bl	8005600 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8007630:	693b      	ldr	r3, [r7, #16]
 8007632:	685a      	ldr	r2, [r3, #4]
 8007634:	4b09      	ldr	r3, [pc, #36]	@ (800765c <vPortFree+0xb4>)
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4413      	add	r3, r2
 800763a:	4a08      	ldr	r2, [pc, #32]	@ (800765c <vPortFree+0xb4>)
 800763c:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800763e:	6938      	ldr	r0, [r7, #16]
 8007640:	f000 f86c 	bl	800771c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8007644:	4b06      	ldr	r3, [pc, #24]	@ (8007660 <vPortFree+0xb8>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	3301      	adds	r3, #1
 800764a:	4a05      	ldr	r2, [pc, #20]	@ (8007660 <vPortFree+0xb8>)
 800764c:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800764e:	f7fd ffe5 	bl	800561c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8007652:	bf00      	nop
 8007654:	3718      	adds	r7, #24
 8007656:	46bd      	mov	sp, r7
 8007658:	bd80      	pop	{r7, pc}
 800765a:	bf00      	nop
 800765c:	20012ea8 	.word	0x20012ea8
 8007660:	20012eb4 	.word	0x20012eb4

08007664 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8007664:	b480      	push	{r7}
 8007666:	b085      	sub	sp, #20
 8007668:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800766a:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 800766e:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8007670:	4b25      	ldr	r3, [pc, #148]	@ (8007708 <prvHeapInit+0xa4>)
 8007672:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	f003 0307 	and.w	r3, r3, #7
 800767a:	2b00      	cmp	r3, #0
 800767c:	d00c      	beq.n	8007698 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	3307      	adds	r3, #7
 8007682:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	f023 0307 	bic.w	r3, r3, #7
 800768a:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 800768c:	68ba      	ldr	r2, [r7, #8]
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	1ad3      	subs	r3, r2, r3
 8007692:	4a1d      	ldr	r2, [pc, #116]	@ (8007708 <prvHeapInit+0xa4>)
 8007694:	4413      	add	r3, r2
 8007696:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800769c:	4a1b      	ldr	r2, [pc, #108]	@ (800770c <prvHeapInit+0xa8>)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80076a2:	4b1a      	ldr	r3, [pc, #104]	@ (800770c <prvHeapInit+0xa8>)
 80076a4:	2200      	movs	r2, #0
 80076a6:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	68ba      	ldr	r2, [r7, #8]
 80076ac:	4413      	add	r3, r2
 80076ae:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80076b0:	2208      	movs	r2, #8
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	1a9b      	subs	r3, r3, r2
 80076b6:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	f023 0307 	bic.w	r3, r3, #7
 80076be:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	4a13      	ldr	r2, [pc, #76]	@ (8007710 <prvHeapInit+0xac>)
 80076c4:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80076c6:	4b12      	ldr	r3, [pc, #72]	@ (8007710 <prvHeapInit+0xac>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	2200      	movs	r2, #0
 80076cc:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80076ce:	4b10      	ldr	r3, [pc, #64]	@ (8007710 <prvHeapInit+0xac>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	2200      	movs	r2, #0
 80076d4:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	68fa      	ldr	r2, [r7, #12]
 80076de:	1ad2      	subs	r2, r2, r3
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80076e4:	4b0a      	ldr	r3, [pc, #40]	@ (8007710 <prvHeapInit+0xac>)
 80076e6:	681a      	ldr	r2, [r3, #0]
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	685b      	ldr	r3, [r3, #4]
 80076f0:	4a08      	ldr	r2, [pc, #32]	@ (8007714 <prvHeapInit+0xb0>)
 80076f2:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	685b      	ldr	r3, [r3, #4]
 80076f8:	4a07      	ldr	r2, [pc, #28]	@ (8007718 <prvHeapInit+0xb4>)
 80076fa:	6013      	str	r3, [r2, #0]
}
 80076fc:	bf00      	nop
 80076fe:	3714      	adds	r7, #20
 8007700:	46bd      	mov	sp, r7
 8007702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007706:	4770      	bx	lr
 8007708:	2000029c 	.word	0x2000029c
 800770c:	20012e9c 	.word	0x20012e9c
 8007710:	20012ea4 	.word	0x20012ea4
 8007714:	20012eac 	.word	0x20012eac
 8007718:	20012ea8 	.word	0x20012ea8

0800771c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800771c:	b480      	push	{r7}
 800771e:	b085      	sub	sp, #20
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007724:	4b28      	ldr	r3, [pc, #160]	@ (80077c8 <prvInsertBlockIntoFreeList+0xac>)
 8007726:	60fb      	str	r3, [r7, #12]
 8007728:	e002      	b.n	8007730 <prvInsertBlockIntoFreeList+0x14>
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	60fb      	str	r3, [r7, #12]
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	687a      	ldr	r2, [r7, #4]
 8007736:	429a      	cmp	r2, r3
 8007738:	d8f7      	bhi.n	800772a <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	685b      	ldr	r3, [r3, #4]
 8007742:	68ba      	ldr	r2, [r7, #8]
 8007744:	4413      	add	r3, r2
 8007746:	687a      	ldr	r2, [r7, #4]
 8007748:	429a      	cmp	r2, r3
 800774a:	d108      	bne.n	800775e <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	685a      	ldr	r2, [r3, #4]
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	685b      	ldr	r3, [r3, #4]
 8007754:	441a      	add	r2, r3
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	685b      	ldr	r3, [r3, #4]
 8007766:	68ba      	ldr	r2, [r7, #8]
 8007768:	441a      	add	r2, r3
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	429a      	cmp	r2, r3
 8007770:	d118      	bne.n	80077a4 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681a      	ldr	r2, [r3, #0]
 8007776:	4b15      	ldr	r3, [pc, #84]	@ (80077cc <prvInsertBlockIntoFreeList+0xb0>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	429a      	cmp	r2, r3
 800777c:	d00d      	beq.n	800779a <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	685a      	ldr	r2, [r3, #4]
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	685b      	ldr	r3, [r3, #4]
 8007788:	441a      	add	r2, r3
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	681a      	ldr	r2, [r3, #0]
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	601a      	str	r2, [r3, #0]
 8007798:	e008      	b.n	80077ac <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800779a:	4b0c      	ldr	r3, [pc, #48]	@ (80077cc <prvInsertBlockIntoFreeList+0xb0>)
 800779c:	681a      	ldr	r2, [r3, #0]
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	601a      	str	r2, [r3, #0]
 80077a2:	e003      	b.n	80077ac <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681a      	ldr	r2, [r3, #0]
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80077ac:	68fa      	ldr	r2, [r7, #12]
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	429a      	cmp	r2, r3
 80077b2:	d002      	beq.n	80077ba <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	687a      	ldr	r2, [r7, #4]
 80077b8:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80077ba:	bf00      	nop
 80077bc:	3714      	adds	r7, #20
 80077be:	46bd      	mov	sp, r7
 80077c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c4:	4770      	bx	lr
 80077c6:	bf00      	nop
 80077c8:	20012e9c 	.word	0x20012e9c
 80077cc:	20012ea4 	.word	0x20012ea4

080077d0 <memset>:
 80077d0:	4402      	add	r2, r0
 80077d2:	4603      	mov	r3, r0
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d100      	bne.n	80077da <memset+0xa>
 80077d8:	4770      	bx	lr
 80077da:	f803 1b01 	strb.w	r1, [r3], #1
 80077de:	e7f9      	b.n	80077d4 <memset+0x4>

080077e0 <__libc_init_array>:
 80077e0:	b570      	push	{r4, r5, r6, lr}
 80077e2:	4d0d      	ldr	r5, [pc, #52]	@ (8007818 <__libc_init_array+0x38>)
 80077e4:	4c0d      	ldr	r4, [pc, #52]	@ (800781c <__libc_init_array+0x3c>)
 80077e6:	1b64      	subs	r4, r4, r5
 80077e8:	10a4      	asrs	r4, r4, #2
 80077ea:	2600      	movs	r6, #0
 80077ec:	42a6      	cmp	r6, r4
 80077ee:	d109      	bne.n	8007804 <__libc_init_array+0x24>
 80077f0:	4d0b      	ldr	r5, [pc, #44]	@ (8007820 <__libc_init_array+0x40>)
 80077f2:	4c0c      	ldr	r4, [pc, #48]	@ (8007824 <__libc_init_array+0x44>)
 80077f4:	f000 f826 	bl	8007844 <_init>
 80077f8:	1b64      	subs	r4, r4, r5
 80077fa:	10a4      	asrs	r4, r4, #2
 80077fc:	2600      	movs	r6, #0
 80077fe:	42a6      	cmp	r6, r4
 8007800:	d105      	bne.n	800780e <__libc_init_array+0x2e>
 8007802:	bd70      	pop	{r4, r5, r6, pc}
 8007804:	f855 3b04 	ldr.w	r3, [r5], #4
 8007808:	4798      	blx	r3
 800780a:	3601      	adds	r6, #1
 800780c:	e7ee      	b.n	80077ec <__libc_init_array+0xc>
 800780e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007812:	4798      	blx	r3
 8007814:	3601      	adds	r6, #1
 8007816:	e7f2      	b.n	80077fe <__libc_init_array+0x1e>
 8007818:	08007a6c 	.word	0x08007a6c
 800781c:	08007a6c 	.word	0x08007a6c
 8007820:	08007a6c 	.word	0x08007a6c
 8007824:	08007a70 	.word	0x08007a70

08007828 <memcpy>:
 8007828:	440a      	add	r2, r1
 800782a:	4291      	cmp	r1, r2
 800782c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007830:	d100      	bne.n	8007834 <memcpy+0xc>
 8007832:	4770      	bx	lr
 8007834:	b510      	push	{r4, lr}
 8007836:	f811 4b01 	ldrb.w	r4, [r1], #1
 800783a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800783e:	4291      	cmp	r1, r2
 8007840:	d1f9      	bne.n	8007836 <memcpy+0xe>
 8007842:	bd10      	pop	{r4, pc}

08007844 <_init>:
 8007844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007846:	bf00      	nop
 8007848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800784a:	bc08      	pop	{r3}
 800784c:	469e      	mov	lr, r3
 800784e:	4770      	bx	lr

08007850 <_fini>:
 8007850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007852:	bf00      	nop
 8007854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007856:	bc08      	pop	{r3}
 8007858:	469e      	mov	lr, r3
 800785a:	4770      	bx	lr
