
FreeRTOS_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a20  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000200  08007bf0  08007bf0  00008bf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007df0  08007df0  0000906c  2**0
                  CONTENTS
  4 .ARM          00000008  08007df0  08007df0  00008df0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007df8  08007df8  0000906c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007df8  08007df8  00008df8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007dfc  08007dfc  00008dfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08007e00  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000145d8  2000006c  08007e6c  0000906c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20014644  08007e6c  00009644  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000906c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000152ad  00000000  00000000  0000909c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035b9  00000000  00000000  0001e349  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001448  00000000  00000000  00021908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f91  00000000  00000000  00022d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024c36  00000000  00000000  00023ce1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018d41  00000000  00000000  00048917  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ddf4f  00000000  00000000  00061658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013f5a7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005964  00000000  00000000  0013f5ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000b7  00000000  00000000  00144f50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007bd8 	.word	0x08007bd8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000070 	.word	0x20000070
 800020c:	08007bd8 	.word	0x08007bd8

08000210 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000210:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000212:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000216:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 80002a0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800021a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800021e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000222:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000224:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000226:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000228:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800022a:	d332      	bcc.n	8000292 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800022c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800022e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000230:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000232:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000234:	d314      	bcc.n	8000260 <_CheckCase2>

08000236 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000236:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000238:	19d0      	adds	r0, r2, r7
 800023a:	bf00      	nop

0800023c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000240:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000244:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000246:	d005      	beq.n	8000254 <_CSDone>
        LDRB     R3,[R1], #+1
 8000248:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000250:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000252:	d1f3      	bne.n	800023c <_LoopCopyStraight>

08000254 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000254:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000258:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800025a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800025e:	4770      	bx	lr

08000260 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000260:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000262:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000264:	d319      	bcc.n	800029a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000266:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000268:	1b12      	subs	r2, r2, r4

0800026a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800026a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800026e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000272:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000274:	d1f9      	bne.n	800026a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000276:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000278:	d005      	beq.n	8000286 <_No2ChunkNeeded>

0800027a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000282:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyAfterWrapAround>

08000286 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000286:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800028a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800028c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000290:	4770      	bx	lr

08000292 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000292:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000294:	3801      	subs	r0, #1
        CMP      R0,R2
 8000296:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000298:	d2cd      	bcs.n	8000236 <_Case4>

0800029a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800029a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800029c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800029e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002a0:	20012f1c 	.word	0x20012f1c
	...

080002b0 <memchr>:
 80002b0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002b4:	2a10      	cmp	r2, #16
 80002b6:	db2b      	blt.n	8000310 <memchr+0x60>
 80002b8:	f010 0f07 	tst.w	r0, #7
 80002bc:	d008      	beq.n	80002d0 <memchr+0x20>
 80002be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c2:	3a01      	subs	r2, #1
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d02d      	beq.n	8000324 <memchr+0x74>
 80002c8:	f010 0f07 	tst.w	r0, #7
 80002cc:	b342      	cbz	r2, 8000320 <memchr+0x70>
 80002ce:	d1f6      	bne.n	80002be <memchr+0xe>
 80002d0:	b4f0      	push	{r4, r5, r6, r7}
 80002d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002da:	f022 0407 	bic.w	r4, r2, #7
 80002de:	f07f 0700 	mvns.w	r7, #0
 80002e2:	2300      	movs	r3, #0
 80002e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002e8:	3c08      	subs	r4, #8
 80002ea:	ea85 0501 	eor.w	r5, r5, r1
 80002ee:	ea86 0601 	eor.w	r6, r6, r1
 80002f2:	fa85 f547 	uadd8	r5, r5, r7
 80002f6:	faa3 f587 	sel	r5, r3, r7
 80002fa:	fa86 f647 	uadd8	r6, r6, r7
 80002fe:	faa5 f687 	sel	r6, r5, r7
 8000302:	b98e      	cbnz	r6, 8000328 <memchr+0x78>
 8000304:	d1ee      	bne.n	80002e4 <memchr+0x34>
 8000306:	bcf0      	pop	{r4, r5, r6, r7}
 8000308:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800030c:	f002 0207 	and.w	r2, r2, #7
 8000310:	b132      	cbz	r2, 8000320 <memchr+0x70>
 8000312:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000316:	3a01      	subs	r2, #1
 8000318:	ea83 0301 	eor.w	r3, r3, r1
 800031c:	b113      	cbz	r3, 8000324 <memchr+0x74>
 800031e:	d1f8      	bne.n	8000312 <memchr+0x62>
 8000320:	2000      	movs	r0, #0
 8000322:	4770      	bx	lr
 8000324:	3801      	subs	r0, #1
 8000326:	4770      	bx	lr
 8000328:	2d00      	cmp	r5, #0
 800032a:	bf06      	itte	eq
 800032c:	4635      	moveq	r5, r6
 800032e:	3803      	subeq	r0, #3
 8000330:	3807      	subne	r0, #7
 8000332:	f015 0f01 	tst.w	r5, #1
 8000336:	d107      	bne.n	8000348 <memchr+0x98>
 8000338:	3001      	adds	r0, #1
 800033a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800033e:	bf02      	ittt	eq
 8000340:	3001      	addeq	r0, #1
 8000342:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000346:	3001      	addeq	r0, #1
 8000348:	bcf0      	pop	{r4, r5, r6, r7}
 800034a:	3801      	subs	r0, #1
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop

08000350 <__aeabi_uldivmod>:
 8000350:	b953      	cbnz	r3, 8000368 <__aeabi_uldivmod+0x18>
 8000352:	b94a      	cbnz	r2, 8000368 <__aeabi_uldivmod+0x18>
 8000354:	2900      	cmp	r1, #0
 8000356:	bf08      	it	eq
 8000358:	2800      	cmpeq	r0, #0
 800035a:	bf1c      	itt	ne
 800035c:	f04f 31ff 	movne.w	r1, #4294967295
 8000360:	f04f 30ff 	movne.w	r0, #4294967295
 8000364:	f000 b96a 	b.w	800063c <__aeabi_idiv0>
 8000368:	f1ad 0c08 	sub.w	ip, sp, #8
 800036c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000370:	f000 f806 	bl	8000380 <__udivmoddi4>
 8000374:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000378:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800037c:	b004      	add	sp, #16
 800037e:	4770      	bx	lr

08000380 <__udivmoddi4>:
 8000380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000384:	9d08      	ldr	r5, [sp, #32]
 8000386:	460c      	mov	r4, r1
 8000388:	2b00      	cmp	r3, #0
 800038a:	d14e      	bne.n	800042a <__udivmoddi4+0xaa>
 800038c:	4694      	mov	ip, r2
 800038e:	458c      	cmp	ip, r1
 8000390:	4686      	mov	lr, r0
 8000392:	fab2 f282 	clz	r2, r2
 8000396:	d962      	bls.n	800045e <__udivmoddi4+0xde>
 8000398:	b14a      	cbz	r2, 80003ae <__udivmoddi4+0x2e>
 800039a:	f1c2 0320 	rsb	r3, r2, #32
 800039e:	4091      	lsls	r1, r2
 80003a0:	fa20 f303 	lsr.w	r3, r0, r3
 80003a4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003a8:	4319      	orrs	r1, r3
 80003aa:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b2:	fa1f f68c 	uxth.w	r6, ip
 80003b6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003ba:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003be:	fb07 1114 	mls	r1, r7, r4, r1
 80003c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003c6:	fb04 f106 	mul.w	r1, r4, r6
 80003ca:	4299      	cmp	r1, r3
 80003cc:	d90a      	bls.n	80003e4 <__udivmoddi4+0x64>
 80003ce:	eb1c 0303 	adds.w	r3, ip, r3
 80003d2:	f104 30ff 	add.w	r0, r4, #4294967295
 80003d6:	f080 8112 	bcs.w	80005fe <__udivmoddi4+0x27e>
 80003da:	4299      	cmp	r1, r3
 80003dc:	f240 810f 	bls.w	80005fe <__udivmoddi4+0x27e>
 80003e0:	3c02      	subs	r4, #2
 80003e2:	4463      	add	r3, ip
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	fa1f f38e 	uxth.w	r3, lr
 80003ea:	fbb1 f0f7 	udiv	r0, r1, r7
 80003ee:	fb07 1110 	mls	r1, r7, r0, r1
 80003f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f6:	fb00 f606 	mul.w	r6, r0, r6
 80003fa:	429e      	cmp	r6, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x94>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f100 31ff 	add.w	r1, r0, #4294967295
 8000406:	f080 80fc 	bcs.w	8000602 <__udivmoddi4+0x282>
 800040a:	429e      	cmp	r6, r3
 800040c:	f240 80f9 	bls.w	8000602 <__udivmoddi4+0x282>
 8000410:	4463      	add	r3, ip
 8000412:	3802      	subs	r0, #2
 8000414:	1b9b      	subs	r3, r3, r6
 8000416:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800041a:	2100      	movs	r1, #0
 800041c:	b11d      	cbz	r5, 8000426 <__udivmoddi4+0xa6>
 800041e:	40d3      	lsrs	r3, r2
 8000420:	2200      	movs	r2, #0
 8000422:	e9c5 3200 	strd	r3, r2, [r5]
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	428b      	cmp	r3, r1
 800042c:	d905      	bls.n	800043a <__udivmoddi4+0xba>
 800042e:	b10d      	cbz	r5, 8000434 <__udivmoddi4+0xb4>
 8000430:	e9c5 0100 	strd	r0, r1, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	4608      	mov	r0, r1
 8000438:	e7f5      	b.n	8000426 <__udivmoddi4+0xa6>
 800043a:	fab3 f183 	clz	r1, r3
 800043e:	2900      	cmp	r1, #0
 8000440:	d146      	bne.n	80004d0 <__udivmoddi4+0x150>
 8000442:	42a3      	cmp	r3, r4
 8000444:	d302      	bcc.n	800044c <__udivmoddi4+0xcc>
 8000446:	4290      	cmp	r0, r2
 8000448:	f0c0 80f0 	bcc.w	800062c <__udivmoddi4+0x2ac>
 800044c:	1a86      	subs	r6, r0, r2
 800044e:	eb64 0303 	sbc.w	r3, r4, r3
 8000452:	2001      	movs	r0, #1
 8000454:	2d00      	cmp	r5, #0
 8000456:	d0e6      	beq.n	8000426 <__udivmoddi4+0xa6>
 8000458:	e9c5 6300 	strd	r6, r3, [r5]
 800045c:	e7e3      	b.n	8000426 <__udivmoddi4+0xa6>
 800045e:	2a00      	cmp	r2, #0
 8000460:	f040 8090 	bne.w	8000584 <__udivmoddi4+0x204>
 8000464:	eba1 040c 	sub.w	r4, r1, ip
 8000468:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800046c:	fa1f f78c 	uxth.w	r7, ip
 8000470:	2101      	movs	r1, #1
 8000472:	fbb4 f6f8 	udiv	r6, r4, r8
 8000476:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800047a:	fb08 4416 	mls	r4, r8, r6, r4
 800047e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000482:	fb07 f006 	mul.w	r0, r7, r6
 8000486:	4298      	cmp	r0, r3
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0x11c>
 800048a:	eb1c 0303 	adds.w	r3, ip, r3
 800048e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000492:	d202      	bcs.n	800049a <__udivmoddi4+0x11a>
 8000494:	4298      	cmp	r0, r3
 8000496:	f200 80cd 	bhi.w	8000634 <__udivmoddi4+0x2b4>
 800049a:	4626      	mov	r6, r4
 800049c:	1a1c      	subs	r4, r3, r0
 800049e:	fa1f f38e 	uxth.w	r3, lr
 80004a2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004a6:	fb08 4410 	mls	r4, r8, r0, r4
 80004aa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ae:	fb00 f707 	mul.w	r7, r0, r7
 80004b2:	429f      	cmp	r7, r3
 80004b4:	d908      	bls.n	80004c8 <__udivmoddi4+0x148>
 80004b6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ba:	f100 34ff 	add.w	r4, r0, #4294967295
 80004be:	d202      	bcs.n	80004c6 <__udivmoddi4+0x146>
 80004c0:	429f      	cmp	r7, r3
 80004c2:	f200 80b0 	bhi.w	8000626 <__udivmoddi4+0x2a6>
 80004c6:	4620      	mov	r0, r4
 80004c8:	1bdb      	subs	r3, r3, r7
 80004ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004ce:	e7a5      	b.n	800041c <__udivmoddi4+0x9c>
 80004d0:	f1c1 0620 	rsb	r6, r1, #32
 80004d4:	408b      	lsls	r3, r1
 80004d6:	fa22 f706 	lsr.w	r7, r2, r6
 80004da:	431f      	orrs	r7, r3
 80004dc:	fa20 fc06 	lsr.w	ip, r0, r6
 80004e0:	fa04 f301 	lsl.w	r3, r4, r1
 80004e4:	ea43 030c 	orr.w	r3, r3, ip
 80004e8:	40f4      	lsrs	r4, r6
 80004ea:	fa00 f801 	lsl.w	r8, r0, r1
 80004ee:	0c38      	lsrs	r0, r7, #16
 80004f0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004f4:	fbb4 fef0 	udiv	lr, r4, r0
 80004f8:	fa1f fc87 	uxth.w	ip, r7
 80004fc:	fb00 441e 	mls	r4, r0, lr, r4
 8000500:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000504:	fb0e f90c 	mul.w	r9, lr, ip
 8000508:	45a1      	cmp	r9, r4
 800050a:	fa02 f201 	lsl.w	r2, r2, r1
 800050e:	d90a      	bls.n	8000526 <__udivmoddi4+0x1a6>
 8000510:	193c      	adds	r4, r7, r4
 8000512:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000516:	f080 8084 	bcs.w	8000622 <__udivmoddi4+0x2a2>
 800051a:	45a1      	cmp	r9, r4
 800051c:	f240 8081 	bls.w	8000622 <__udivmoddi4+0x2a2>
 8000520:	f1ae 0e02 	sub.w	lr, lr, #2
 8000524:	443c      	add	r4, r7
 8000526:	eba4 0409 	sub.w	r4, r4, r9
 800052a:	fa1f f983 	uxth.w	r9, r3
 800052e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000532:	fb00 4413 	mls	r4, r0, r3, r4
 8000536:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800053a:	fb03 fc0c 	mul.w	ip, r3, ip
 800053e:	45a4      	cmp	ip, r4
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x1d2>
 8000542:	193c      	adds	r4, r7, r4
 8000544:	f103 30ff 	add.w	r0, r3, #4294967295
 8000548:	d267      	bcs.n	800061a <__udivmoddi4+0x29a>
 800054a:	45a4      	cmp	ip, r4
 800054c:	d965      	bls.n	800061a <__udivmoddi4+0x29a>
 800054e:	3b02      	subs	r3, #2
 8000550:	443c      	add	r4, r7
 8000552:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000556:	fba0 9302 	umull	r9, r3, r0, r2
 800055a:	eba4 040c 	sub.w	r4, r4, ip
 800055e:	429c      	cmp	r4, r3
 8000560:	46ce      	mov	lr, r9
 8000562:	469c      	mov	ip, r3
 8000564:	d351      	bcc.n	800060a <__udivmoddi4+0x28a>
 8000566:	d04e      	beq.n	8000606 <__udivmoddi4+0x286>
 8000568:	b155      	cbz	r5, 8000580 <__udivmoddi4+0x200>
 800056a:	ebb8 030e 	subs.w	r3, r8, lr
 800056e:	eb64 040c 	sbc.w	r4, r4, ip
 8000572:	fa04 f606 	lsl.w	r6, r4, r6
 8000576:	40cb      	lsrs	r3, r1
 8000578:	431e      	orrs	r6, r3
 800057a:	40cc      	lsrs	r4, r1
 800057c:	e9c5 6400 	strd	r6, r4, [r5]
 8000580:	2100      	movs	r1, #0
 8000582:	e750      	b.n	8000426 <__udivmoddi4+0xa6>
 8000584:	f1c2 0320 	rsb	r3, r2, #32
 8000588:	fa20 f103 	lsr.w	r1, r0, r3
 800058c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000590:	fa24 f303 	lsr.w	r3, r4, r3
 8000594:	4094      	lsls	r4, r2
 8000596:	430c      	orrs	r4, r1
 8000598:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800059c:	fa00 fe02 	lsl.w	lr, r0, r2
 80005a0:	fa1f f78c 	uxth.w	r7, ip
 80005a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005a8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ac:	0c23      	lsrs	r3, r4, #16
 80005ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005b2:	fb00 f107 	mul.w	r1, r0, r7
 80005b6:	4299      	cmp	r1, r3
 80005b8:	d908      	bls.n	80005cc <__udivmoddi4+0x24c>
 80005ba:	eb1c 0303 	adds.w	r3, ip, r3
 80005be:	f100 36ff 	add.w	r6, r0, #4294967295
 80005c2:	d22c      	bcs.n	800061e <__udivmoddi4+0x29e>
 80005c4:	4299      	cmp	r1, r3
 80005c6:	d92a      	bls.n	800061e <__udivmoddi4+0x29e>
 80005c8:	3802      	subs	r0, #2
 80005ca:	4463      	add	r3, ip
 80005cc:	1a5b      	subs	r3, r3, r1
 80005ce:	b2a4      	uxth	r4, r4
 80005d0:	fbb3 f1f8 	udiv	r1, r3, r8
 80005d4:	fb08 3311 	mls	r3, r8, r1, r3
 80005d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80005dc:	fb01 f307 	mul.w	r3, r1, r7
 80005e0:	42a3      	cmp	r3, r4
 80005e2:	d908      	bls.n	80005f6 <__udivmoddi4+0x276>
 80005e4:	eb1c 0404 	adds.w	r4, ip, r4
 80005e8:	f101 36ff 	add.w	r6, r1, #4294967295
 80005ec:	d213      	bcs.n	8000616 <__udivmoddi4+0x296>
 80005ee:	42a3      	cmp	r3, r4
 80005f0:	d911      	bls.n	8000616 <__udivmoddi4+0x296>
 80005f2:	3902      	subs	r1, #2
 80005f4:	4464      	add	r4, ip
 80005f6:	1ae4      	subs	r4, r4, r3
 80005f8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005fc:	e739      	b.n	8000472 <__udivmoddi4+0xf2>
 80005fe:	4604      	mov	r4, r0
 8000600:	e6f0      	b.n	80003e4 <__udivmoddi4+0x64>
 8000602:	4608      	mov	r0, r1
 8000604:	e706      	b.n	8000414 <__udivmoddi4+0x94>
 8000606:	45c8      	cmp	r8, r9
 8000608:	d2ae      	bcs.n	8000568 <__udivmoddi4+0x1e8>
 800060a:	ebb9 0e02 	subs.w	lr, r9, r2
 800060e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000612:	3801      	subs	r0, #1
 8000614:	e7a8      	b.n	8000568 <__udivmoddi4+0x1e8>
 8000616:	4631      	mov	r1, r6
 8000618:	e7ed      	b.n	80005f6 <__udivmoddi4+0x276>
 800061a:	4603      	mov	r3, r0
 800061c:	e799      	b.n	8000552 <__udivmoddi4+0x1d2>
 800061e:	4630      	mov	r0, r6
 8000620:	e7d4      	b.n	80005cc <__udivmoddi4+0x24c>
 8000622:	46d6      	mov	lr, sl
 8000624:	e77f      	b.n	8000526 <__udivmoddi4+0x1a6>
 8000626:	4463      	add	r3, ip
 8000628:	3802      	subs	r0, #2
 800062a:	e74d      	b.n	80004c8 <__udivmoddi4+0x148>
 800062c:	4606      	mov	r6, r0
 800062e:	4623      	mov	r3, r4
 8000630:	4608      	mov	r0, r1
 8000632:	e70f      	b.n	8000454 <__udivmoddi4+0xd4>
 8000634:	3e02      	subs	r6, #2
 8000636:	4463      	add	r3, ip
 8000638:	e730      	b.n	800049c <__udivmoddi4+0x11c>
 800063a:	bf00      	nop

0800063c <__aeabi_idiv0>:
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop

08000640 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b08e      	sub	sp, #56	@ 0x38
 8000644:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000646:	f000 fb47 	bl	8000cd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800064a:	f000 f8b3 	bl	80007b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800064e:	f000 f923 	bl	8000898 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */


  // Enable Cycle Counter CYCCNT. Refer to datasheet of arm-M4 for details. Set the 0th bit to 1
  DWT_CTRL &= (1<<0);
 8000652:	4b4a      	ldr	r3, [pc, #296]	@ (800077c <main+0x13c>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	4a49      	ldr	r2, [pc, #292]	@ (800077c <main+0x13c>)
 8000658:	f003 0301 	and.w	r3, r3, #1
 800065c:	6013      	str	r3, [r2, #0]

  SEGGER_UART_init(250000);
 800065e:	4848      	ldr	r0, [pc, #288]	@ (8000780 <main+0x140>)
 8000660:	f006 fd08 	bl	8007074 <SEGGER_UART_init>

  // Start segger recording:
  SEGGER_SYSVIEW_Conf();
 8000664:	f004 fa1a 	bl	8004a9c <SEGGER_SYSVIEW_Conf>

  //SEGGER_SYSVIEW_Start();		// When using Segger UART, SYSView Start occurs within the init funciton.

  status = xTaskCreate(task1_handler, "Task-1",200, "Hello World from Task 1", 2, &task1_handle );
 8000668:	f107 0314 	add.w	r3, r7, #20
 800066c:	9301      	str	r3, [sp, #4]
 800066e:	2302      	movs	r3, #2
 8000670:	9300      	str	r3, [sp, #0]
 8000672:	4b44      	ldr	r3, [pc, #272]	@ (8000784 <main+0x144>)
 8000674:	22c8      	movs	r2, #200	@ 0xc8
 8000676:	4944      	ldr	r1, [pc, #272]	@ (8000788 <main+0x148>)
 8000678:	4844      	ldr	r0, [pc, #272]	@ (800078c <main+0x14c>)
 800067a:	f002 fabf 	bl	8002bfc <xTaskCreate>
 800067e:	62f8      	str	r0, [r7, #44]	@ 0x2c
  configASSERT(status == pdPASS);
 8000680:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000682:	2b01      	cmp	r3, #1
 8000684:	d00b      	beq.n	800069e <main+0x5e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000686:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800068a:	f383 8811 	msr	BASEPRI, r3
 800068e:	f3bf 8f6f 	isb	sy
 8000692:	f3bf 8f4f 	dsb	sy
 8000696:	62bb      	str	r3, [r7, #40]	@ 0x28
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000698:	bf00      	nop
 800069a:	bf00      	nop
 800069c:	e7fd      	b.n	800069a <main+0x5a>

  status = xTaskCreate(task2_handler, "Task-2",200, "Hello World from Task 2", 2, &task2_handle );
 800069e:	f107 0310 	add.w	r3, r7, #16
 80006a2:	9301      	str	r3, [sp, #4]
 80006a4:	2302      	movs	r3, #2
 80006a6:	9300      	str	r3, [sp, #0]
 80006a8:	4b39      	ldr	r3, [pc, #228]	@ (8000790 <main+0x150>)
 80006aa:	22c8      	movs	r2, #200	@ 0xc8
 80006ac:	4939      	ldr	r1, [pc, #228]	@ (8000794 <main+0x154>)
 80006ae:	483a      	ldr	r0, [pc, #232]	@ (8000798 <main+0x158>)
 80006b0:	f002 faa4 	bl	8002bfc <xTaskCreate>
 80006b4:	62f8      	str	r0, [r7, #44]	@ 0x2c
  configASSERT(status == pdPASS);
 80006b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80006b8:	2b01      	cmp	r3, #1
 80006ba:	d00b      	beq.n	80006d4 <main+0x94>
        __asm volatile
 80006bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80006c0:	f383 8811 	msr	BASEPRI, r3
 80006c4:	f3bf 8f6f 	isb	sy
 80006c8:	f3bf 8f4f 	dsb	sy
 80006cc:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 80006ce:	bf00      	nop
 80006d0:	bf00      	nop
 80006d2:	e7fd      	b.n	80006d0 <main+0x90>

  status = xTaskCreate(led_grn_handler, "LED_green_task", 200, NULL, 2, &task3_handle);
 80006d4:	f107 030c 	add.w	r3, r7, #12
 80006d8:	9301      	str	r3, [sp, #4]
 80006da:	2302      	movs	r3, #2
 80006dc:	9300      	str	r3, [sp, #0]
 80006de:	2300      	movs	r3, #0
 80006e0:	22c8      	movs	r2, #200	@ 0xc8
 80006e2:	492e      	ldr	r1, [pc, #184]	@ (800079c <main+0x15c>)
 80006e4:	482e      	ldr	r0, [pc, #184]	@ (80007a0 <main+0x160>)
 80006e6:	f002 fa89 	bl	8002bfc <xTaskCreate>
 80006ea:	62f8      	str	r0, [r7, #44]	@ 0x2c
  configASSERT(status == pdPASS);
 80006ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80006ee:	2b01      	cmp	r3, #1
 80006f0:	d00b      	beq.n	800070a <main+0xca>
        __asm volatile
 80006f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80006f6:	f383 8811 	msr	BASEPRI, r3
 80006fa:	f3bf 8f6f 	isb	sy
 80006fe:	f3bf 8f4f 	dsb	sy
 8000702:	623b      	str	r3, [r7, #32]
    }
 8000704:	bf00      	nop
 8000706:	bf00      	nop
 8000708:	e7fd      	b.n	8000706 <main+0xc6>

  status = xTaskCreate(led_org_handler, "LED_orange_task", 200, NULL,2, &task4_handle);
 800070a:	f107 0308 	add.w	r3, r7, #8
 800070e:	9301      	str	r3, [sp, #4]
 8000710:	2302      	movs	r3, #2
 8000712:	9300      	str	r3, [sp, #0]
 8000714:	2300      	movs	r3, #0
 8000716:	22c8      	movs	r2, #200	@ 0xc8
 8000718:	4922      	ldr	r1, [pc, #136]	@ (80007a4 <main+0x164>)
 800071a:	4823      	ldr	r0, [pc, #140]	@ (80007a8 <main+0x168>)
 800071c:	f002 fa6e 	bl	8002bfc <xTaskCreate>
 8000720:	62f8      	str	r0, [r7, #44]	@ 0x2c
  configASSERT(status == pdPASS);
 8000722:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000724:	2b01      	cmp	r3, #1
 8000726:	d00b      	beq.n	8000740 <main+0x100>
        __asm volatile
 8000728:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800072c:	f383 8811 	msr	BASEPRI, r3
 8000730:	f3bf 8f6f 	isb	sy
 8000734:	f3bf 8f4f 	dsb	sy
 8000738:	61fb      	str	r3, [r7, #28]
    }
 800073a:	bf00      	nop
 800073c:	bf00      	nop
 800073e:	e7fd      	b.n	800073c <main+0xfc>

  status = xTaskCreate(led_red_handler, "LED_red_task", 200, NULL,2, &task5_handle);
 8000740:	1d3b      	adds	r3, r7, #4
 8000742:	9301      	str	r3, [sp, #4]
 8000744:	2302      	movs	r3, #2
 8000746:	9300      	str	r3, [sp, #0]
 8000748:	2300      	movs	r3, #0
 800074a:	22c8      	movs	r2, #200	@ 0xc8
 800074c:	4917      	ldr	r1, [pc, #92]	@ (80007ac <main+0x16c>)
 800074e:	4818      	ldr	r0, [pc, #96]	@ (80007b0 <main+0x170>)
 8000750:	f002 fa54 	bl	8002bfc <xTaskCreate>
 8000754:	62f8      	str	r0, [r7, #44]	@ 0x2c
  configASSERT(status == pdPASS);
 8000756:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000758:	2b01      	cmp	r3, #1
 800075a:	d00b      	beq.n	8000774 <main+0x134>
        __asm volatile
 800075c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000760:	f383 8811 	msr	BASEPRI, r3
 8000764:	f3bf 8f6f 	isb	sy
 8000768:	f3bf 8f4f 	dsb	sy
 800076c:	61bb      	str	r3, [r7, #24]
    }
 800076e:	bf00      	nop
 8000770:	bf00      	nop
 8000772:	e7fd      	b.n	8000770 <main+0x130>
  // start FreeRTOS scheduler
  vTaskStartScheduler();
 8000774:	f002 fc42 	bl	8002ffc <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000778:	bf00      	nop
 800077a:	e7fd      	b.n	8000778 <main+0x138>
 800077c:	e0001000 	.word	0xe0001000
 8000780:	0003d090 	.word	0x0003d090
 8000784:	08007bf0 	.word	0x08007bf0
 8000788:	08007c08 	.word	0x08007c08
 800078c:	08000995 	.word	0x08000995
 8000790:	08007c10 	.word	0x08007c10
 8000794:	08007c28 	.word	0x08007c28
 8000798:	080009d1 	.word	0x080009d1
 800079c:	08007c30 	.word	0x08007c30
 80007a0:	08000a0d 	.word	0x08000a0d
 80007a4:	08007c40 	.word	0x08007c40
 80007a8:	08000a45 	.word	0x08000a45
 80007ac:	08007c50 	.word	0x08007c50
 80007b0:	08000a71 	.word	0x08000a71

080007b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b094      	sub	sp, #80	@ 0x50
 80007b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ba:	f107 031c 	add.w	r3, r7, #28
 80007be:	2234      	movs	r2, #52	@ 0x34
 80007c0:	2100      	movs	r1, #0
 80007c2:	4618      	mov	r0, r3
 80007c4:	f006 fd80 	bl	80072c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007c8:	f107 0308 	add.w	r3, r7, #8
 80007cc:	2200      	movs	r2, #0
 80007ce:	601a      	str	r2, [r3, #0]
 80007d0:	605a      	str	r2, [r3, #4]
 80007d2:	609a      	str	r2, [r3, #8]
 80007d4:	60da      	str	r2, [r3, #12]
 80007d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d8:	2300      	movs	r3, #0
 80007da:	607b      	str	r3, [r7, #4]
 80007dc:	4b2c      	ldr	r3, [pc, #176]	@ (8000890 <SystemClock_Config+0xdc>)
 80007de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007e0:	4a2b      	ldr	r2, [pc, #172]	@ (8000890 <SystemClock_Config+0xdc>)
 80007e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80007e8:	4b29      	ldr	r3, [pc, #164]	@ (8000890 <SystemClock_Config+0xdc>)
 80007ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007f0:	607b      	str	r3, [r7, #4]
 80007f2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007f4:	2300      	movs	r3, #0
 80007f6:	603b      	str	r3, [r7, #0]
 80007f8:	4b26      	ldr	r3, [pc, #152]	@ (8000894 <SystemClock_Config+0xe0>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4a25      	ldr	r2, [pc, #148]	@ (8000894 <SystemClock_Config+0xe0>)
 80007fe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000802:	6013      	str	r3, [r2, #0]
 8000804:	4b23      	ldr	r3, [pc, #140]	@ (8000894 <SystemClock_Config+0xe0>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800080c:	603b      	str	r3, [r7, #0]
 800080e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000810:	2302      	movs	r3, #2
 8000812:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000814:	2301      	movs	r3, #1
 8000816:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000818:	2310      	movs	r3, #16
 800081a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800081c:	2302      	movs	r3, #2
 800081e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000820:	2300      	movs	r3, #0
 8000822:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000824:	2308      	movs	r3, #8
 8000826:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000828:	23b4      	movs	r3, #180	@ 0xb4
 800082a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800082c:	2302      	movs	r3, #2
 800082e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000830:	2302      	movs	r3, #2
 8000832:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000834:	2302      	movs	r3, #2
 8000836:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000838:	f107 031c 	add.w	r3, r7, #28
 800083c:	4618      	mov	r0, r3
 800083e:	f001 f8ef 	bl	8001a20 <HAL_RCC_OscConfig>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000848:	f000 f93a 	bl	8000ac0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800084c:	f000 fd30 	bl	80012b0 <HAL_PWREx_EnableOverDrive>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000856:	f000 f933 	bl	8000ac0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800085a:	230f      	movs	r3, #15
 800085c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800085e:	2302      	movs	r3, #2
 8000860:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000862:	2300      	movs	r3, #0
 8000864:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000866:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800086a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800086c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000870:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000872:	f107 0308 	add.w	r3, r7, #8
 8000876:	2105      	movs	r1, #5
 8000878:	4618      	mov	r0, r3
 800087a:	f000 fd69 	bl	8001350 <HAL_RCC_ClockConfig>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000884:	f000 f91c 	bl	8000ac0 <Error_Handler>
  }
}
 8000888:	bf00      	nop
 800088a:	3750      	adds	r7, #80	@ 0x50
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	40023800 	.word	0x40023800
 8000894:	40007000 	.word	0x40007000

08000898 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b08a      	sub	sp, #40	@ 0x28
 800089c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800089e:	f107 0314 	add.w	r3, r7, #20
 80008a2:	2200      	movs	r2, #0
 80008a4:	601a      	str	r2, [r3, #0]
 80008a6:	605a      	str	r2, [r3, #4]
 80008a8:	609a      	str	r2, [r3, #8]
 80008aa:	60da      	str	r2, [r3, #12]
 80008ac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	613b      	str	r3, [r7, #16]
 80008b2:	4b35      	ldr	r3, [pc, #212]	@ (8000988 <MX_GPIO_Init+0xf0>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b6:	4a34      	ldr	r2, [pc, #208]	@ (8000988 <MX_GPIO_Init+0xf0>)
 80008b8:	f043 0304 	orr.w	r3, r3, #4
 80008bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008be:	4b32      	ldr	r3, [pc, #200]	@ (8000988 <MX_GPIO_Init+0xf0>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c2:	f003 0304 	and.w	r3, r3, #4
 80008c6:	613b      	str	r3, [r7, #16]
 80008c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	60fb      	str	r3, [r7, #12]
 80008ce:	4b2e      	ldr	r3, [pc, #184]	@ (8000988 <MX_GPIO_Init+0xf0>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d2:	4a2d      	ldr	r2, [pc, #180]	@ (8000988 <MX_GPIO_Init+0xf0>)
 80008d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008da:	4b2b      	ldr	r3, [pc, #172]	@ (8000988 <MX_GPIO_Init+0xf0>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008e2:	60fb      	str	r3, [r7, #12]
 80008e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	60bb      	str	r3, [r7, #8]
 80008ea:	4b27      	ldr	r3, [pc, #156]	@ (8000988 <MX_GPIO_Init+0xf0>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ee:	4a26      	ldr	r2, [pc, #152]	@ (8000988 <MX_GPIO_Init+0xf0>)
 80008f0:	f043 0301 	orr.w	r3, r3, #1
 80008f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008f6:	4b24      	ldr	r3, [pc, #144]	@ (8000988 <MX_GPIO_Init+0xf0>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fa:	f003 0301 	and.w	r3, r3, #1
 80008fe:	60bb      	str	r3, [r7, #8]
 8000900:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	607b      	str	r3, [r7, #4]
 8000906:	4b20      	ldr	r3, [pc, #128]	@ (8000988 <MX_GPIO_Init+0xf0>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090a:	4a1f      	ldr	r2, [pc, #124]	@ (8000988 <MX_GPIO_Init+0xf0>)
 800090c:	f043 0302 	orr.w	r3, r3, #2
 8000910:	6313      	str	r3, [r2, #48]	@ 0x30
 8000912:	4b1d      	ldr	r3, [pc, #116]	@ (8000988 <MX_GPIO_Init+0xf0>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000916:	f003 0302 	and.w	r3, r3, #2
 800091a:	607b      	str	r3, [r7, #4]
 800091c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800091e:	2200      	movs	r2, #0
 8000920:	2120      	movs	r1, #32
 8000922:	481a      	ldr	r0, [pc, #104]	@ (800098c <MX_GPIO_Init+0xf4>)
 8000924:	f000 fc90 	bl	8001248 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000928:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800092c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800092e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000932:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000934:	2300      	movs	r3, #0
 8000936:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000938:	f107 0314 	add.w	r3, r7, #20
 800093c:	4619      	mov	r1, r3
 800093e:	4814      	ldr	r0, [pc, #80]	@ (8000990 <MX_GPIO_Init+0xf8>)
 8000940:	f000 faee 	bl	8000f20 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000944:	230c      	movs	r3, #12
 8000946:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000948:	2302      	movs	r3, #2
 800094a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	2300      	movs	r3, #0
 800094e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000950:	2303      	movs	r3, #3
 8000952:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000954:	2307      	movs	r3, #7
 8000956:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000958:	f107 0314 	add.w	r3, r7, #20
 800095c:	4619      	mov	r1, r3
 800095e:	480b      	ldr	r0, [pc, #44]	@ (800098c <MX_GPIO_Init+0xf4>)
 8000960:	f000 fade 	bl	8000f20 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000964:	2320      	movs	r3, #32
 8000966:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000968:	2301      	movs	r3, #1
 800096a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096c:	2300      	movs	r3, #0
 800096e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000970:	2300      	movs	r3, #0
 8000972:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000974:	f107 0314 	add.w	r3, r7, #20
 8000978:	4619      	mov	r1, r3
 800097a:	4804      	ldr	r0, [pc, #16]	@ (800098c <MX_GPIO_Init+0xf4>)
 800097c:	f000 fad0 	bl	8000f20 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000980:	bf00      	nop
 8000982:	3728      	adds	r7, #40	@ 0x28
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	40023800 	.word	0x40023800
 800098c:	40020000 	.word	0x40020000
 8000990:	40020800 	.word	0x40020800

08000994 <task1_handler>:

/* USER CODE BEGIN 4 */

static void task1_handler(void* parameters){
 8000994:	b580      	push	{r7, lr}
 8000996:	b09c      	sub	sp, #112	@ 0x70
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
	char msg[100];
	while(1){
		//printf("%s\n", (char*) parameters);
		//HAL_GPIO_TogglePin(GPIOA, LED_GREEN_PIN);
		//HAL_Delay(2000);
		snprintf(msg, 100, "%s\n", (char*) parameters );
 800099c:	f107 000c 	add.w	r0, r7, #12
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	4a09      	ldr	r2, [pc, #36]	@ (80009c8 <task1_handler+0x34>)
 80009a4:	2164      	movs	r1, #100	@ 0x64
 80009a6:	f006 fc4b 	bl	8007240 <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(msg);
 80009aa:	f107 030c 	add.w	r3, r7, #12
 80009ae:	4618      	mov	r0, r3
 80009b0:	f006 fa18 	bl	8006de4 <SEGGER_SYSVIEW_PrintfTarget>
		// Cooperative scheduling
		taskYIELD();
 80009b4:	4b05      	ldr	r3, [pc, #20]	@ (80009cc <task1_handler+0x38>)
 80009b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80009ba:	601a      	str	r2, [r3, #0]
 80009bc:	f3bf 8f4f 	dsb	sy
 80009c0:	f3bf 8f6f 	isb	sy
		snprintf(msg, 100, "%s\n", (char*) parameters );
 80009c4:	bf00      	nop
 80009c6:	e7e9      	b.n	800099c <task1_handler+0x8>
 80009c8:	08007c60 	.word	0x08007c60
 80009cc:	e000ed04 	.word	0xe000ed04

080009d0 <task2_handler>:
	}

}

static void task2_handler(void* parameters){
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b09c      	sub	sp, #112	@ 0x70
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
	char msg[100];
		while(1){
		//printf("%s\n", (char*)parameters);
		snprintf(msg, 100, "%s\n", (char*) parameters );
 80009d8:	f107 000c 	add.w	r0, r7, #12
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	4a09      	ldr	r2, [pc, #36]	@ (8000a04 <task2_handler+0x34>)
 80009e0:	2164      	movs	r1, #100	@ 0x64
 80009e2:	f006 fc2d 	bl	8007240 <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(msg);
 80009e6:	f107 030c 	add.w	r3, r7, #12
 80009ea:	4618      	mov	r0, r3
 80009ec:	f006 f9fa 	bl	8006de4 <SEGGER_SYSVIEW_PrintfTarget>
		// Cooperative scheduling
		taskYIELD();
 80009f0:	4b05      	ldr	r3, [pc, #20]	@ (8000a08 <task2_handler+0x38>)
 80009f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80009f6:	601a      	str	r2, [r3, #0]
 80009f8:	f3bf 8f4f 	dsb	sy
 80009fc:	f3bf 8f6f 	isb	sy
		snprintf(msg, 100, "%s\n", (char*) parameters );
 8000a00:	bf00      	nop
 8000a02:	e7e9      	b.n	80009d8 <task2_handler+0x8>
 8000a04:	08007c60 	.word	0x08007c60
 8000a08:	e000ed04 	.word	0xe000ed04

08000a0c <led_grn_handler>:
	}
}
static void led_grn_handler(void* parameters){
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b084      	sub	sp, #16
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
	TickType_t last_wakeup_time;
	last_wakeup_time = xTaskGetTickCount();
 8000a14:	f002 fc54 	bl	80032c0 <xTaskGetTickCount>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	60fb      	str	r3, [r7, #12]
	while(1){
		SEGGER_SYSVIEW_PrintfTarget("TOGGLING GREEN LED");
 8000a1c:	4807      	ldr	r0, [pc, #28]	@ (8000a3c <led_grn_handler+0x30>)
 8000a1e:	f006 f9e1 	bl	8006de4 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOA, LED_GREEN_PIN);
 8000a22:	2120      	movs	r1, #32
 8000a24:	4806      	ldr	r0, [pc, #24]	@ (8000a40 <led_grn_handler+0x34>)
 8000a26:	f000 fc28 	bl	800127a <HAL_GPIO_TogglePin>
		//HAL_Delay(1000);
		//vTaskDelay(pdMS_TO_TICKS(1000));
		vTaskDelayUntil(&last_wakeup_time, pdMS_TO_TICKS(1000)); // Making all our tasks periodic
 8000a2a:	f107 030c 	add.w	r3, r7, #12
 8000a2e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000a32:	4618      	mov	r0, r3
 8000a34:	f002 fa5e 	bl	8002ef4 <xTaskDelayUntil>
		SEGGER_SYSVIEW_PrintfTarget("TOGGLING GREEN LED");
 8000a38:	bf00      	nop
 8000a3a:	e7ef      	b.n	8000a1c <led_grn_handler+0x10>
 8000a3c:	08007c64 	.word	0x08007c64
 8000a40:	40020000 	.word	0x40020000

08000a44 <led_org_handler>:
	}
}
/*
 * Toggle orange led on the board
 */
static void led_org_handler(void* parameters){
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b084      	sub	sp, #16
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
	TickType_t last_wakeup_time;
	last_wakeup_time = xTaskGetTickCount();
 8000a4c:	f002 fc38 	bl	80032c0 <xTaskGetTickCount>
 8000a50:	4603      	mov	r3, r0
 8000a52:	60fb      	str	r3, [r7, #12]
	while(1){
		SEGGER_SYSVIEW_PrintfTarget("TOGGLING ORANGE LED");
 8000a54:	4805      	ldr	r0, [pc, #20]	@ (8000a6c <led_org_handler+0x28>)
 8000a56:	f006 f9c5 	bl	8006de4 <SEGGER_SYSVIEW_PrintfTarget>
		//HAL_GPIO_TogglePin(GPIOD, LED_ORANGE_PIN);
		//HAL_Delay(800);
		//vTaskDelay(pdMS_TO_TICKS(800));
		vTaskDelayUntil(&last_wakeup_time, pdMS_TO_TICKS(1000)); // Making all our tasks periodic
 8000a5a:	f107 030c 	add.w	r3, r7, #12
 8000a5e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000a62:	4618      	mov	r0, r3
 8000a64:	f002 fa46 	bl	8002ef4 <xTaskDelayUntil>
		SEGGER_SYSVIEW_PrintfTarget("TOGGLING ORANGE LED");
 8000a68:	bf00      	nop
 8000a6a:	e7f3      	b.n	8000a54 <led_org_handler+0x10>
 8000a6c:	08007c78 	.word	0x08007c78

08000a70 <led_red_handler>:
}
/*
 * Toggle red led on the board.
 */

static void led_red_handler(void* parameters){
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b084      	sub	sp, #16
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
	TickType_t last_wakeup_time;
	last_wakeup_time = xTaskGetTickCount();
 8000a78:	f002 fc22 	bl	80032c0 <xTaskGetTickCount>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	60fb      	str	r3, [r7, #12]
	while(1){
		SEGGER_SYSVIEW_PrintfTarget("TOGGLING RED LED");
 8000a80:	4805      	ldr	r0, [pc, #20]	@ (8000a98 <led_red_handler+0x28>)
 8000a82:	f006 f9af 	bl	8006de4 <SEGGER_SYSVIEW_PrintfTarget>
		//HAL_GPIO_TogglePin(GPIOD, LED_RED_PIN);
		//HAL_Delay(400);
		//vTaskDelay(pdMS_TO_TICKS(400));
		vTaskDelayUntil(&last_wakeup_time, pdMS_TO_TICKS(1000)); // Making all our tasks periodic
 8000a86:	f107 030c 	add.w	r3, r7, #12
 8000a8a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f002 fa30 	bl	8002ef4 <xTaskDelayUntil>
		SEGGER_SYSVIEW_PrintfTarget("TOGGLING RED LED");
 8000a94:	bf00      	nop
 8000a96:	e7f3      	b.n	8000a80 <led_red_handler+0x10>
 8000a98:	08007c8c 	.word	0x08007c8c

08000a9c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a04      	ldr	r2, [pc, #16]	@ (8000abc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	d101      	bne.n	8000ab2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000aae:	f000 f935 	bl	8000d1c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ab2:	bf00      	nop
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	40001000 	.word	0x40001000

08000ac0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ac4:	b672      	cpsid	i
}
 8000ac6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ac8:	bf00      	nop
 8000aca:	e7fd      	b.n	8000ac8 <Error_Handler+0x8>

08000acc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	607b      	str	r3, [r7, #4]
 8000ad6:	4b10      	ldr	r3, [pc, #64]	@ (8000b18 <HAL_MspInit+0x4c>)
 8000ad8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ada:	4a0f      	ldr	r2, [pc, #60]	@ (8000b18 <HAL_MspInit+0x4c>)
 8000adc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ae0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ae2:	4b0d      	ldr	r3, [pc, #52]	@ (8000b18 <HAL_MspInit+0x4c>)
 8000ae4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ae6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000aea:	607b      	str	r3, [r7, #4]
 8000aec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	603b      	str	r3, [r7, #0]
 8000af2:	4b09      	ldr	r3, [pc, #36]	@ (8000b18 <HAL_MspInit+0x4c>)
 8000af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000af6:	4a08      	ldr	r2, [pc, #32]	@ (8000b18 <HAL_MspInit+0x4c>)
 8000af8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000afc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000afe:	4b06      	ldr	r3, [pc, #24]	@ (8000b18 <HAL_MspInit+0x4c>)
 8000b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b06:	603b      	str	r3, [r7, #0]
 8000b08:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000b0a:	f003 fc37 	bl	800437c <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000b0e:	bf00      	nop
 8000b10:	3708      	adds	r7, #8
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	40023800 	.word	0x40023800

08000b1c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b08e      	sub	sp, #56	@ 0x38
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000b24:	2300      	movs	r3, #0
 8000b26:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	60fb      	str	r3, [r7, #12]
 8000b30:	4b33      	ldr	r3, [pc, #204]	@ (8000c00 <HAL_InitTick+0xe4>)
 8000b32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b34:	4a32      	ldr	r2, [pc, #200]	@ (8000c00 <HAL_InitTick+0xe4>)
 8000b36:	f043 0310 	orr.w	r3, r3, #16
 8000b3a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b3c:	4b30      	ldr	r3, [pc, #192]	@ (8000c00 <HAL_InitTick+0xe4>)
 8000b3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b40:	f003 0310 	and.w	r3, r3, #16
 8000b44:	60fb      	str	r3, [r7, #12]
 8000b46:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b48:	f107 0210 	add.w	r2, r7, #16
 8000b4c:	f107 0314 	add.w	r3, r7, #20
 8000b50:	4611      	mov	r1, r2
 8000b52:	4618      	mov	r0, r3
 8000b54:	f000 fd02 	bl	800155c <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b58:	6a3b      	ldr	r3, [r7, #32]
 8000b5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d103      	bne.n	8000b6a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b62:	f000 fce7 	bl	8001534 <HAL_RCC_GetPCLK1Freq>
 8000b66:	6378      	str	r0, [r7, #52]	@ 0x34
 8000b68:	e004      	b.n	8000b74 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000b6a:	f000 fce3 	bl	8001534 <HAL_RCC_GetPCLK1Freq>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	005b      	lsls	r3, r3, #1
 8000b72:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b76:	4a23      	ldr	r2, [pc, #140]	@ (8000c04 <HAL_InitTick+0xe8>)
 8000b78:	fba2 2303 	umull	r2, r3, r2, r3
 8000b7c:	0c9b      	lsrs	r3, r3, #18
 8000b7e:	3b01      	subs	r3, #1
 8000b80:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000b82:	4b21      	ldr	r3, [pc, #132]	@ (8000c08 <HAL_InitTick+0xec>)
 8000b84:	4a21      	ldr	r2, [pc, #132]	@ (8000c0c <HAL_InitTick+0xf0>)
 8000b86:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000b88:	4b1f      	ldr	r3, [pc, #124]	@ (8000c08 <HAL_InitTick+0xec>)
 8000b8a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b8e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000b90:	4a1d      	ldr	r2, [pc, #116]	@ (8000c08 <HAL_InitTick+0xec>)
 8000b92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b94:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000b96:	4b1c      	ldr	r3, [pc, #112]	@ (8000c08 <HAL_InitTick+0xec>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b9c:	4b1a      	ldr	r3, [pc, #104]	@ (8000c08 <HAL_InitTick+0xec>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ba2:	4b19      	ldr	r3, [pc, #100]	@ (8000c08 <HAL_InitTick+0xec>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000ba8:	4817      	ldr	r0, [pc, #92]	@ (8000c08 <HAL_InitTick+0xec>)
 8000baa:	f001 f9d7 	bl	8001f5c <HAL_TIM_Base_Init>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000bb4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d11b      	bne.n	8000bf4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000bbc:	4812      	ldr	r0, [pc, #72]	@ (8000c08 <HAL_InitTick+0xec>)
 8000bbe:	f001 fa27 	bl	8002010 <HAL_TIM_Base_Start_IT>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000bc8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d111      	bne.n	8000bf4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000bd0:	2036      	movs	r0, #54	@ 0x36
 8000bd2:	f000 f997 	bl	8000f04 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	2b0f      	cmp	r3, #15
 8000bda:	d808      	bhi.n	8000bee <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000bdc:	2200      	movs	r2, #0
 8000bde:	6879      	ldr	r1, [r7, #4]
 8000be0:	2036      	movs	r0, #54	@ 0x36
 8000be2:	f000 f973 	bl	8000ecc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000be6:	4a0a      	ldr	r2, [pc, #40]	@ (8000c10 <HAL_InitTick+0xf4>)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	6013      	str	r3, [r2, #0]
 8000bec:	e002      	b.n	8000bf4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000bf4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	3738      	adds	r7, #56	@ 0x38
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	40023800 	.word	0x40023800
 8000c04:	431bde83 	.word	0x431bde83
 8000c08:	20000088 	.word	0x20000088
 8000c0c:	40001000 	.word	0x40001000
 8000c10:	20000004 	.word	0x20000004

08000c14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c18:	bf00      	nop
 8000c1a:	e7fd      	b.n	8000c18 <NMI_Handler+0x4>

08000c1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c20:	bf00      	nop
 8000c22:	e7fd      	b.n	8000c20 <HardFault_Handler+0x4>

08000c24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c28:	bf00      	nop
 8000c2a:	e7fd      	b.n	8000c28 <MemManage_Handler+0x4>

08000c2c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c30:	bf00      	nop
 8000c32:	e7fd      	b.n	8000c30 <BusFault_Handler+0x4>

08000c34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c38:	bf00      	nop
 8000c3a:	e7fd      	b.n	8000c38 <UsageFault_Handler+0x4>

08000c3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c40:	bf00      	nop
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
	...

08000c4c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c50:	4802      	ldr	r0, [pc, #8]	@ (8000c5c <TIM6_DAC_IRQHandler+0x10>)
 8000c52:	f001 fa4d 	bl	80020f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c56:	bf00      	nop
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	20000088 	.word	0x20000088

08000c60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c64:	4b06      	ldr	r3, [pc, #24]	@ (8000c80 <SystemInit+0x20>)
 8000c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c6a:	4a05      	ldr	r2, [pc, #20]	@ (8000c80 <SystemInit+0x20>)
 8000c6c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c70:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c74:	bf00      	nop
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	e000ed00 	.word	0xe000ed00

08000c84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c84:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000cbc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c88:	f7ff ffea 	bl	8000c60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c8c:	480c      	ldr	r0, [pc, #48]	@ (8000cc0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c8e:	490d      	ldr	r1, [pc, #52]	@ (8000cc4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c90:	4a0d      	ldr	r2, [pc, #52]	@ (8000cc8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c94:	e002      	b.n	8000c9c <LoopCopyDataInit>

08000c96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c9a:	3304      	adds	r3, #4

08000c9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ca0:	d3f9      	bcc.n	8000c96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ca2:	4a0a      	ldr	r2, [pc, #40]	@ (8000ccc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ca4:	4c0a      	ldr	r4, [pc, #40]	@ (8000cd0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ca6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ca8:	e001      	b.n	8000cae <LoopFillZerobss>

08000caa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000caa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cac:	3204      	adds	r2, #4

08000cae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cb0:	d3fb      	bcc.n	8000caa <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000cb2:	f006 fb11 	bl	80072d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cb6:	f7ff fcc3 	bl	8000640 <main>
  bx  lr    
 8000cba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000cbc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cc4:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000cc8:	08007e00 	.word	0x08007e00
  ldr r2, =_sbss
 8000ccc:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000cd0:	20014644 	.word	0x20014644

08000cd4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cd4:	e7fe      	b.n	8000cd4 <ADC_IRQHandler>
	...

08000cd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cdc:	4b0e      	ldr	r3, [pc, #56]	@ (8000d18 <HAL_Init+0x40>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a0d      	ldr	r2, [pc, #52]	@ (8000d18 <HAL_Init+0x40>)
 8000ce2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ce6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ce8:	4b0b      	ldr	r3, [pc, #44]	@ (8000d18 <HAL_Init+0x40>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a0a      	ldr	r2, [pc, #40]	@ (8000d18 <HAL_Init+0x40>)
 8000cee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000cf2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cf4:	4b08      	ldr	r3, [pc, #32]	@ (8000d18 <HAL_Init+0x40>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a07      	ldr	r2, [pc, #28]	@ (8000d18 <HAL_Init+0x40>)
 8000cfa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cfe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d00:	2003      	movs	r0, #3
 8000d02:	f000 f8d8 	bl	8000eb6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d06:	2000      	movs	r0, #0
 8000d08:	f7ff ff08 	bl	8000b1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d0c:	f7ff fede 	bl	8000acc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d10:	2300      	movs	r3, #0
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	40023c00 	.word	0x40023c00

08000d1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d20:	4b06      	ldr	r3, [pc, #24]	@ (8000d3c <HAL_IncTick+0x20>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	461a      	mov	r2, r3
 8000d26:	4b06      	ldr	r3, [pc, #24]	@ (8000d40 <HAL_IncTick+0x24>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4413      	add	r3, r2
 8000d2c:	4a04      	ldr	r2, [pc, #16]	@ (8000d40 <HAL_IncTick+0x24>)
 8000d2e:	6013      	str	r3, [r2, #0]
}
 8000d30:	bf00      	nop
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	20000008 	.word	0x20000008
 8000d40:	200000d0 	.word	0x200000d0

08000d44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  return uwTick;
 8000d48:	4b03      	ldr	r3, [pc, #12]	@ (8000d58 <HAL_GetTick+0x14>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	200000d0 	.word	0x200000d0

08000d5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b085      	sub	sp, #20
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	f003 0307 	and.w	r3, r3, #7
 8000d6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d6c:	4b0c      	ldr	r3, [pc, #48]	@ (8000da0 <__NVIC_SetPriorityGrouping+0x44>)
 8000d6e:	68db      	ldr	r3, [r3, #12]
 8000d70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d72:	68ba      	ldr	r2, [r7, #8]
 8000d74:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d78:	4013      	ands	r3, r2
 8000d7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d84:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d8e:	4a04      	ldr	r2, [pc, #16]	@ (8000da0 <__NVIC_SetPriorityGrouping+0x44>)
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	60d3      	str	r3, [r2, #12]
}
 8000d94:	bf00      	nop
 8000d96:	3714      	adds	r7, #20
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr
 8000da0:	e000ed00 	.word	0xe000ed00

08000da4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000da8:	4b04      	ldr	r3, [pc, #16]	@ (8000dbc <__NVIC_GetPriorityGrouping+0x18>)
 8000daa:	68db      	ldr	r3, [r3, #12]
 8000dac:	0a1b      	lsrs	r3, r3, #8
 8000dae:	f003 0307 	and.w	r3, r3, #7
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr
 8000dbc:	e000ed00 	.word	0xe000ed00

08000dc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	db0b      	blt.n	8000dea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dd2:	79fb      	ldrb	r3, [r7, #7]
 8000dd4:	f003 021f 	and.w	r2, r3, #31
 8000dd8:	4907      	ldr	r1, [pc, #28]	@ (8000df8 <__NVIC_EnableIRQ+0x38>)
 8000dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dde:	095b      	lsrs	r3, r3, #5
 8000de0:	2001      	movs	r0, #1
 8000de2:	fa00 f202 	lsl.w	r2, r0, r2
 8000de6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000dea:	bf00      	nop
 8000dec:	370c      	adds	r7, #12
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	e000e100 	.word	0xe000e100

08000dfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	4603      	mov	r3, r0
 8000e04:	6039      	str	r1, [r7, #0]
 8000e06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	db0a      	blt.n	8000e26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	b2da      	uxtb	r2, r3
 8000e14:	490c      	ldr	r1, [pc, #48]	@ (8000e48 <__NVIC_SetPriority+0x4c>)
 8000e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1a:	0112      	lsls	r2, r2, #4
 8000e1c:	b2d2      	uxtb	r2, r2
 8000e1e:	440b      	add	r3, r1
 8000e20:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e24:	e00a      	b.n	8000e3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	b2da      	uxtb	r2, r3
 8000e2a:	4908      	ldr	r1, [pc, #32]	@ (8000e4c <__NVIC_SetPriority+0x50>)
 8000e2c:	79fb      	ldrb	r3, [r7, #7]
 8000e2e:	f003 030f 	and.w	r3, r3, #15
 8000e32:	3b04      	subs	r3, #4
 8000e34:	0112      	lsls	r2, r2, #4
 8000e36:	b2d2      	uxtb	r2, r2
 8000e38:	440b      	add	r3, r1
 8000e3a:	761a      	strb	r2, [r3, #24]
}
 8000e3c:	bf00      	nop
 8000e3e:	370c      	adds	r7, #12
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr
 8000e48:	e000e100 	.word	0xe000e100
 8000e4c:	e000ed00 	.word	0xe000ed00

08000e50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b089      	sub	sp, #36	@ 0x24
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	60f8      	str	r0, [r7, #12]
 8000e58:	60b9      	str	r1, [r7, #8]
 8000e5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	f003 0307 	and.w	r3, r3, #7
 8000e62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e64:	69fb      	ldr	r3, [r7, #28]
 8000e66:	f1c3 0307 	rsb	r3, r3, #7
 8000e6a:	2b04      	cmp	r3, #4
 8000e6c:	bf28      	it	cs
 8000e6e:	2304      	movcs	r3, #4
 8000e70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	3304      	adds	r3, #4
 8000e76:	2b06      	cmp	r3, #6
 8000e78:	d902      	bls.n	8000e80 <NVIC_EncodePriority+0x30>
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	3b03      	subs	r3, #3
 8000e7e:	e000      	b.n	8000e82 <NVIC_EncodePriority+0x32>
 8000e80:	2300      	movs	r3, #0
 8000e82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e84:	f04f 32ff 	mov.w	r2, #4294967295
 8000e88:	69bb      	ldr	r3, [r7, #24]
 8000e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8e:	43da      	mvns	r2, r3
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	401a      	ands	r2, r3
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e98:	f04f 31ff 	mov.w	r1, #4294967295
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea2:	43d9      	mvns	r1, r3
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea8:	4313      	orrs	r3, r2
         );
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3724      	adds	r7, #36	@ 0x24
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr

08000eb6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb6:	b580      	push	{r7, lr}
 8000eb8:	b082      	sub	sp, #8
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ebe:	6878      	ldr	r0, [r7, #4]
 8000ec0:	f7ff ff4c 	bl	8000d5c <__NVIC_SetPriorityGrouping>
}
 8000ec4:	bf00      	nop
 8000ec6:	3708      	adds	r7, #8
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}

08000ecc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b086      	sub	sp, #24
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	60b9      	str	r1, [r7, #8]
 8000ed6:	607a      	str	r2, [r7, #4]
 8000ed8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000eda:	2300      	movs	r3, #0
 8000edc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ede:	f7ff ff61 	bl	8000da4 <__NVIC_GetPriorityGrouping>
 8000ee2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ee4:	687a      	ldr	r2, [r7, #4]
 8000ee6:	68b9      	ldr	r1, [r7, #8]
 8000ee8:	6978      	ldr	r0, [r7, #20]
 8000eea:	f7ff ffb1 	bl	8000e50 <NVIC_EncodePriority>
 8000eee:	4602      	mov	r2, r0
 8000ef0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ef4:	4611      	mov	r1, r2
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f7ff ff80 	bl	8000dfc <__NVIC_SetPriority>
}
 8000efc:	bf00      	nop
 8000efe:	3718      	adds	r7, #24
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f12:	4618      	mov	r0, r3
 8000f14:	f7ff ff54 	bl	8000dc0 <__NVIC_EnableIRQ>
}
 8000f18:	bf00      	nop
 8000f1a:	3708      	adds	r7, #8
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}

08000f20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b089      	sub	sp, #36	@ 0x24
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
 8000f28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f32:	2300      	movs	r3, #0
 8000f34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f36:	2300      	movs	r3, #0
 8000f38:	61fb      	str	r3, [r7, #28]
 8000f3a:	e165      	b.n	8001208 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	fa02 f303 	lsl.w	r3, r2, r3
 8000f44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	697a      	ldr	r2, [r7, #20]
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f50:	693a      	ldr	r2, [r7, #16]
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	429a      	cmp	r2, r3
 8000f56:	f040 8154 	bne.w	8001202 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	f003 0303 	and.w	r3, r3, #3
 8000f62:	2b01      	cmp	r3, #1
 8000f64:	d005      	beq.n	8000f72 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f6e:	2b02      	cmp	r3, #2
 8000f70:	d130      	bne.n	8000fd4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	689b      	ldr	r3, [r3, #8]
 8000f76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	005b      	lsls	r3, r3, #1
 8000f7c:	2203      	movs	r2, #3
 8000f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f82:	43db      	mvns	r3, r3
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	4013      	ands	r3, r2
 8000f88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	68da      	ldr	r2, [r3, #12]
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	005b      	lsls	r3, r3, #1
 8000f92:	fa02 f303 	lsl.w	r3, r2, r3
 8000f96:	69ba      	ldr	r2, [r7, #24]
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	69ba      	ldr	r2, [r7, #24]
 8000fa0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fa8:	2201      	movs	r2, #1
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	43db      	mvns	r3, r3
 8000fb2:	69ba      	ldr	r2, [r7, #24]
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	091b      	lsrs	r3, r3, #4
 8000fbe:	f003 0201 	and.w	r2, r3, #1
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	69ba      	ldr	r2, [r7, #24]
 8000fd2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	f003 0303 	and.w	r3, r3, #3
 8000fdc:	2b03      	cmp	r3, #3
 8000fde:	d017      	beq.n	8001010 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	68db      	ldr	r3, [r3, #12]
 8000fe4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	005b      	lsls	r3, r3, #1
 8000fea:	2203      	movs	r2, #3
 8000fec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff0:	43db      	mvns	r3, r3
 8000ff2:	69ba      	ldr	r2, [r7, #24]
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	689a      	ldr	r2, [r3, #8]
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	005b      	lsls	r3, r3, #1
 8001000:	fa02 f303 	lsl.w	r3, r2, r3
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	4313      	orrs	r3, r2
 8001008:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	69ba      	ldr	r2, [r7, #24]
 800100e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f003 0303 	and.w	r3, r3, #3
 8001018:	2b02      	cmp	r3, #2
 800101a:	d123      	bne.n	8001064 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800101c:	69fb      	ldr	r3, [r7, #28]
 800101e:	08da      	lsrs	r2, r3, #3
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	3208      	adds	r2, #8
 8001024:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001028:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	f003 0307 	and.w	r3, r3, #7
 8001030:	009b      	lsls	r3, r3, #2
 8001032:	220f      	movs	r2, #15
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	43db      	mvns	r3, r3
 800103a:	69ba      	ldr	r2, [r7, #24]
 800103c:	4013      	ands	r3, r2
 800103e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	691a      	ldr	r2, [r3, #16]
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	f003 0307 	and.w	r3, r3, #7
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	fa02 f303 	lsl.w	r3, r2, r3
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	4313      	orrs	r3, r2
 8001054:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	08da      	lsrs	r2, r3, #3
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	3208      	adds	r2, #8
 800105e:	69b9      	ldr	r1, [r7, #24]
 8001060:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	2203      	movs	r2, #3
 8001070:	fa02 f303 	lsl.w	r3, r2, r3
 8001074:	43db      	mvns	r3, r3
 8001076:	69ba      	ldr	r2, [r7, #24]
 8001078:	4013      	ands	r3, r2
 800107a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f003 0203 	and.w	r2, r3, #3
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	005b      	lsls	r3, r3, #1
 8001088:	fa02 f303 	lsl.w	r3, r2, r3
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	4313      	orrs	r3, r2
 8001090:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	f000 80ae 	beq.w	8001202 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010a6:	2300      	movs	r3, #0
 80010a8:	60fb      	str	r3, [r7, #12]
 80010aa:	4b5d      	ldr	r3, [pc, #372]	@ (8001220 <HAL_GPIO_Init+0x300>)
 80010ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ae:	4a5c      	ldr	r2, [pc, #368]	@ (8001220 <HAL_GPIO_Init+0x300>)
 80010b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80010b6:	4b5a      	ldr	r3, [pc, #360]	@ (8001220 <HAL_GPIO_Init+0x300>)
 80010b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010be:	60fb      	str	r3, [r7, #12]
 80010c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010c2:	4a58      	ldr	r2, [pc, #352]	@ (8001224 <HAL_GPIO_Init+0x304>)
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	089b      	lsrs	r3, r3, #2
 80010c8:	3302      	adds	r3, #2
 80010ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	f003 0303 	and.w	r3, r3, #3
 80010d6:	009b      	lsls	r3, r3, #2
 80010d8:	220f      	movs	r2, #15
 80010da:	fa02 f303 	lsl.w	r3, r2, r3
 80010de:	43db      	mvns	r3, r3
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	4013      	ands	r3, r2
 80010e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a4f      	ldr	r2, [pc, #316]	@ (8001228 <HAL_GPIO_Init+0x308>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d025      	beq.n	800113a <HAL_GPIO_Init+0x21a>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4a4e      	ldr	r2, [pc, #312]	@ (800122c <HAL_GPIO_Init+0x30c>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d01f      	beq.n	8001136 <HAL_GPIO_Init+0x216>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4a4d      	ldr	r2, [pc, #308]	@ (8001230 <HAL_GPIO_Init+0x310>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d019      	beq.n	8001132 <HAL_GPIO_Init+0x212>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4a4c      	ldr	r2, [pc, #304]	@ (8001234 <HAL_GPIO_Init+0x314>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d013      	beq.n	800112e <HAL_GPIO_Init+0x20e>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4a4b      	ldr	r2, [pc, #300]	@ (8001238 <HAL_GPIO_Init+0x318>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d00d      	beq.n	800112a <HAL_GPIO_Init+0x20a>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4a4a      	ldr	r2, [pc, #296]	@ (800123c <HAL_GPIO_Init+0x31c>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d007      	beq.n	8001126 <HAL_GPIO_Init+0x206>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4a49      	ldr	r2, [pc, #292]	@ (8001240 <HAL_GPIO_Init+0x320>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d101      	bne.n	8001122 <HAL_GPIO_Init+0x202>
 800111e:	2306      	movs	r3, #6
 8001120:	e00c      	b.n	800113c <HAL_GPIO_Init+0x21c>
 8001122:	2307      	movs	r3, #7
 8001124:	e00a      	b.n	800113c <HAL_GPIO_Init+0x21c>
 8001126:	2305      	movs	r3, #5
 8001128:	e008      	b.n	800113c <HAL_GPIO_Init+0x21c>
 800112a:	2304      	movs	r3, #4
 800112c:	e006      	b.n	800113c <HAL_GPIO_Init+0x21c>
 800112e:	2303      	movs	r3, #3
 8001130:	e004      	b.n	800113c <HAL_GPIO_Init+0x21c>
 8001132:	2302      	movs	r3, #2
 8001134:	e002      	b.n	800113c <HAL_GPIO_Init+0x21c>
 8001136:	2301      	movs	r3, #1
 8001138:	e000      	b.n	800113c <HAL_GPIO_Init+0x21c>
 800113a:	2300      	movs	r3, #0
 800113c:	69fa      	ldr	r2, [r7, #28]
 800113e:	f002 0203 	and.w	r2, r2, #3
 8001142:	0092      	lsls	r2, r2, #2
 8001144:	4093      	lsls	r3, r2
 8001146:	69ba      	ldr	r2, [r7, #24]
 8001148:	4313      	orrs	r3, r2
 800114a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800114c:	4935      	ldr	r1, [pc, #212]	@ (8001224 <HAL_GPIO_Init+0x304>)
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	089b      	lsrs	r3, r3, #2
 8001152:	3302      	adds	r3, #2
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800115a:	4b3a      	ldr	r3, [pc, #232]	@ (8001244 <HAL_GPIO_Init+0x324>)
 800115c:	689b      	ldr	r3, [r3, #8]
 800115e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	43db      	mvns	r3, r3
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	4013      	ands	r3, r2
 8001168:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001172:	2b00      	cmp	r3, #0
 8001174:	d003      	beq.n	800117e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001176:	69ba      	ldr	r2, [r7, #24]
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	4313      	orrs	r3, r2
 800117c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800117e:	4a31      	ldr	r2, [pc, #196]	@ (8001244 <HAL_GPIO_Init+0x324>)
 8001180:	69bb      	ldr	r3, [r7, #24]
 8001182:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001184:	4b2f      	ldr	r3, [pc, #188]	@ (8001244 <HAL_GPIO_Init+0x324>)
 8001186:	68db      	ldr	r3, [r3, #12]
 8001188:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	43db      	mvns	r3, r3
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	4013      	ands	r3, r2
 8001192:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800119c:	2b00      	cmp	r3, #0
 800119e:	d003      	beq.n	80011a8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011a8:	4a26      	ldr	r2, [pc, #152]	@ (8001244 <HAL_GPIO_Init+0x324>)
 80011aa:	69bb      	ldr	r3, [r7, #24]
 80011ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011ae:	4b25      	ldr	r3, [pc, #148]	@ (8001244 <HAL_GPIO_Init+0x324>)
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	43db      	mvns	r3, r3
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	4013      	ands	r3, r2
 80011bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d003      	beq.n	80011d2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80011ca:	69ba      	ldr	r2, [r7, #24]
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011d2:	4a1c      	ldr	r2, [pc, #112]	@ (8001244 <HAL_GPIO_Init+0x324>)
 80011d4:	69bb      	ldr	r3, [r7, #24]
 80011d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011d8:	4b1a      	ldr	r3, [pc, #104]	@ (8001244 <HAL_GPIO_Init+0x324>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	43db      	mvns	r3, r3
 80011e2:	69ba      	ldr	r2, [r7, #24]
 80011e4:	4013      	ands	r3, r2
 80011e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d003      	beq.n	80011fc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011fc:	4a11      	ldr	r2, [pc, #68]	@ (8001244 <HAL_GPIO_Init+0x324>)
 80011fe:	69bb      	ldr	r3, [r7, #24]
 8001200:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	3301      	adds	r3, #1
 8001206:	61fb      	str	r3, [r7, #28]
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	2b0f      	cmp	r3, #15
 800120c:	f67f ae96 	bls.w	8000f3c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001210:	bf00      	nop
 8001212:	bf00      	nop
 8001214:	3724      	adds	r7, #36	@ 0x24
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	40023800 	.word	0x40023800
 8001224:	40013800 	.word	0x40013800
 8001228:	40020000 	.word	0x40020000
 800122c:	40020400 	.word	0x40020400
 8001230:	40020800 	.word	0x40020800
 8001234:	40020c00 	.word	0x40020c00
 8001238:	40021000 	.word	0x40021000
 800123c:	40021400 	.word	0x40021400
 8001240:	40021800 	.word	0x40021800
 8001244:	40013c00 	.word	0x40013c00

08001248 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	460b      	mov	r3, r1
 8001252:	807b      	strh	r3, [r7, #2]
 8001254:	4613      	mov	r3, r2
 8001256:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001258:	787b      	ldrb	r3, [r7, #1]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d003      	beq.n	8001266 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800125e:	887a      	ldrh	r2, [r7, #2]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001264:	e003      	b.n	800126e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001266:	887b      	ldrh	r3, [r7, #2]
 8001268:	041a      	lsls	r2, r3, #16
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	619a      	str	r2, [r3, #24]
}
 800126e:	bf00      	nop
 8001270:	370c      	adds	r7, #12
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr

0800127a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800127a:	b480      	push	{r7}
 800127c:	b085      	sub	sp, #20
 800127e:	af00      	add	r7, sp, #0
 8001280:	6078      	str	r0, [r7, #4]
 8001282:	460b      	mov	r3, r1
 8001284:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	695b      	ldr	r3, [r3, #20]
 800128a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800128c:	887a      	ldrh	r2, [r7, #2]
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	4013      	ands	r3, r2
 8001292:	041a      	lsls	r2, r3, #16
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	43d9      	mvns	r1, r3
 8001298:	887b      	ldrh	r3, [r7, #2]
 800129a:	400b      	ands	r3, r1
 800129c:	431a      	orrs	r2, r3
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	619a      	str	r2, [r3, #24]
}
 80012a2:	bf00      	nop
 80012a4:	3714      	adds	r7, #20
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
	...

080012b0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80012b6:	2300      	movs	r3, #0
 80012b8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80012ba:	2300      	movs	r3, #0
 80012bc:	603b      	str	r3, [r7, #0]
 80012be:	4b20      	ldr	r3, [pc, #128]	@ (8001340 <HAL_PWREx_EnableOverDrive+0x90>)
 80012c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012c2:	4a1f      	ldr	r2, [pc, #124]	@ (8001340 <HAL_PWREx_EnableOverDrive+0x90>)
 80012c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80012ca:	4b1d      	ldr	r3, [pc, #116]	@ (8001340 <HAL_PWREx_EnableOverDrive+0x90>)
 80012cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012d2:	603b      	str	r3, [r7, #0]
 80012d4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80012d6:	4b1b      	ldr	r3, [pc, #108]	@ (8001344 <HAL_PWREx_EnableOverDrive+0x94>)
 80012d8:	2201      	movs	r2, #1
 80012da:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012dc:	f7ff fd32 	bl	8000d44 <HAL_GetTick>
 80012e0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80012e2:	e009      	b.n	80012f8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80012e4:	f7ff fd2e 	bl	8000d44 <HAL_GetTick>
 80012e8:	4602      	mov	r2, r0
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	1ad3      	subs	r3, r2, r3
 80012ee:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80012f2:	d901      	bls.n	80012f8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80012f4:	2303      	movs	r3, #3
 80012f6:	e01f      	b.n	8001338 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80012f8:	4b13      	ldr	r3, [pc, #76]	@ (8001348 <HAL_PWREx_EnableOverDrive+0x98>)
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001300:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001304:	d1ee      	bne.n	80012e4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001306:	4b11      	ldr	r3, [pc, #68]	@ (800134c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001308:	2201      	movs	r2, #1
 800130a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800130c:	f7ff fd1a 	bl	8000d44 <HAL_GetTick>
 8001310:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001312:	e009      	b.n	8001328 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001314:	f7ff fd16 	bl	8000d44 <HAL_GetTick>
 8001318:	4602      	mov	r2, r0
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001322:	d901      	bls.n	8001328 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001324:	2303      	movs	r3, #3
 8001326:	e007      	b.n	8001338 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001328:	4b07      	ldr	r3, [pc, #28]	@ (8001348 <HAL_PWREx_EnableOverDrive+0x98>)
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001330:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001334:	d1ee      	bne.n	8001314 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001336:	2300      	movs	r3, #0
}
 8001338:	4618      	mov	r0, r3
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	40023800 	.word	0x40023800
 8001344:	420e0040 	.word	0x420e0040
 8001348:	40007000 	.word	0x40007000
 800134c:	420e0044 	.word	0x420e0044

08001350 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d101      	bne.n	8001364 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001360:	2301      	movs	r3, #1
 8001362:	e0cc      	b.n	80014fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001364:	4b68      	ldr	r3, [pc, #416]	@ (8001508 <HAL_RCC_ClockConfig+0x1b8>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f003 030f 	and.w	r3, r3, #15
 800136c:	683a      	ldr	r2, [r7, #0]
 800136e:	429a      	cmp	r2, r3
 8001370:	d90c      	bls.n	800138c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001372:	4b65      	ldr	r3, [pc, #404]	@ (8001508 <HAL_RCC_ClockConfig+0x1b8>)
 8001374:	683a      	ldr	r2, [r7, #0]
 8001376:	b2d2      	uxtb	r2, r2
 8001378:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800137a:	4b63      	ldr	r3, [pc, #396]	@ (8001508 <HAL_RCC_ClockConfig+0x1b8>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f003 030f 	and.w	r3, r3, #15
 8001382:	683a      	ldr	r2, [r7, #0]
 8001384:	429a      	cmp	r2, r3
 8001386:	d001      	beq.n	800138c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001388:	2301      	movs	r3, #1
 800138a:	e0b8      	b.n	80014fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f003 0302 	and.w	r3, r3, #2
 8001394:	2b00      	cmp	r3, #0
 8001396:	d020      	beq.n	80013da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f003 0304 	and.w	r3, r3, #4
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d005      	beq.n	80013b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013a4:	4b59      	ldr	r3, [pc, #356]	@ (800150c <HAL_RCC_ClockConfig+0x1bc>)
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	4a58      	ldr	r2, [pc, #352]	@ (800150c <HAL_RCC_ClockConfig+0x1bc>)
 80013aa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80013ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f003 0308 	and.w	r3, r3, #8
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d005      	beq.n	80013c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80013bc:	4b53      	ldr	r3, [pc, #332]	@ (800150c <HAL_RCC_ClockConfig+0x1bc>)
 80013be:	689b      	ldr	r3, [r3, #8]
 80013c0:	4a52      	ldr	r2, [pc, #328]	@ (800150c <HAL_RCC_ClockConfig+0x1bc>)
 80013c2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80013c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013c8:	4b50      	ldr	r3, [pc, #320]	@ (800150c <HAL_RCC_ClockConfig+0x1bc>)
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	494d      	ldr	r1, [pc, #308]	@ (800150c <HAL_RCC_ClockConfig+0x1bc>)
 80013d6:	4313      	orrs	r3, r2
 80013d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f003 0301 	and.w	r3, r3, #1
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d044      	beq.n	8001470 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d107      	bne.n	80013fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ee:	4b47      	ldr	r3, [pc, #284]	@ (800150c <HAL_RCC_ClockConfig+0x1bc>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d119      	bne.n	800142e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e07f      	b.n	80014fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	2b02      	cmp	r3, #2
 8001404:	d003      	beq.n	800140e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800140a:	2b03      	cmp	r3, #3
 800140c:	d107      	bne.n	800141e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800140e:	4b3f      	ldr	r3, [pc, #252]	@ (800150c <HAL_RCC_ClockConfig+0x1bc>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001416:	2b00      	cmp	r3, #0
 8001418:	d109      	bne.n	800142e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	e06f      	b.n	80014fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800141e:	4b3b      	ldr	r3, [pc, #236]	@ (800150c <HAL_RCC_ClockConfig+0x1bc>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f003 0302 	and.w	r3, r3, #2
 8001426:	2b00      	cmp	r3, #0
 8001428:	d101      	bne.n	800142e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e067      	b.n	80014fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800142e:	4b37      	ldr	r3, [pc, #220]	@ (800150c <HAL_RCC_ClockConfig+0x1bc>)
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	f023 0203 	bic.w	r2, r3, #3
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	4934      	ldr	r1, [pc, #208]	@ (800150c <HAL_RCC_ClockConfig+0x1bc>)
 800143c:	4313      	orrs	r3, r2
 800143e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001440:	f7ff fc80 	bl	8000d44 <HAL_GetTick>
 8001444:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001446:	e00a      	b.n	800145e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001448:	f7ff fc7c 	bl	8000d44 <HAL_GetTick>
 800144c:	4602      	mov	r2, r0
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001456:	4293      	cmp	r3, r2
 8001458:	d901      	bls.n	800145e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800145a:	2303      	movs	r3, #3
 800145c:	e04f      	b.n	80014fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800145e:	4b2b      	ldr	r3, [pc, #172]	@ (800150c <HAL_RCC_ClockConfig+0x1bc>)
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	f003 020c 	and.w	r2, r3, #12
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	429a      	cmp	r2, r3
 800146e:	d1eb      	bne.n	8001448 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001470:	4b25      	ldr	r3, [pc, #148]	@ (8001508 <HAL_RCC_ClockConfig+0x1b8>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f003 030f 	and.w	r3, r3, #15
 8001478:	683a      	ldr	r2, [r7, #0]
 800147a:	429a      	cmp	r2, r3
 800147c:	d20c      	bcs.n	8001498 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800147e:	4b22      	ldr	r3, [pc, #136]	@ (8001508 <HAL_RCC_ClockConfig+0x1b8>)
 8001480:	683a      	ldr	r2, [r7, #0]
 8001482:	b2d2      	uxtb	r2, r2
 8001484:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001486:	4b20      	ldr	r3, [pc, #128]	@ (8001508 <HAL_RCC_ClockConfig+0x1b8>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 030f 	and.w	r3, r3, #15
 800148e:	683a      	ldr	r2, [r7, #0]
 8001490:	429a      	cmp	r2, r3
 8001492:	d001      	beq.n	8001498 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001494:	2301      	movs	r3, #1
 8001496:	e032      	b.n	80014fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f003 0304 	and.w	r3, r3, #4
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d008      	beq.n	80014b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014a4:	4b19      	ldr	r3, [pc, #100]	@ (800150c <HAL_RCC_ClockConfig+0x1bc>)
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	4916      	ldr	r1, [pc, #88]	@ (800150c <HAL_RCC_ClockConfig+0x1bc>)
 80014b2:	4313      	orrs	r3, r2
 80014b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f003 0308 	and.w	r3, r3, #8
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d009      	beq.n	80014d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80014c2:	4b12      	ldr	r3, [pc, #72]	@ (800150c <HAL_RCC_ClockConfig+0x1bc>)
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	691b      	ldr	r3, [r3, #16]
 80014ce:	00db      	lsls	r3, r3, #3
 80014d0:	490e      	ldr	r1, [pc, #56]	@ (800150c <HAL_RCC_ClockConfig+0x1bc>)
 80014d2:	4313      	orrs	r3, r2
 80014d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80014d6:	f000 f873 	bl	80015c0 <HAL_RCC_GetSysClockFreq>
 80014da:	4602      	mov	r2, r0
 80014dc:	4b0b      	ldr	r3, [pc, #44]	@ (800150c <HAL_RCC_ClockConfig+0x1bc>)
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	091b      	lsrs	r3, r3, #4
 80014e2:	f003 030f 	and.w	r3, r3, #15
 80014e6:	490a      	ldr	r1, [pc, #40]	@ (8001510 <HAL_RCC_ClockConfig+0x1c0>)
 80014e8:	5ccb      	ldrb	r3, [r1, r3]
 80014ea:	fa22 f303 	lsr.w	r3, r2, r3
 80014ee:	4a09      	ldr	r2, [pc, #36]	@ (8001514 <HAL_RCC_ClockConfig+0x1c4>)
 80014f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80014f2:	4b09      	ldr	r3, [pc, #36]	@ (8001518 <HAL_RCC_ClockConfig+0x1c8>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4618      	mov	r0, r3
 80014f8:	f7ff fb10 	bl	8000b1c <HAL_InitTick>

  return HAL_OK;
 80014fc:	2300      	movs	r3, #0
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3710      	adds	r7, #16
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	40023c00 	.word	0x40023c00
 800150c:	40023800 	.word	0x40023800
 8001510:	08007d7c 	.word	0x08007d7c
 8001514:	20000000 	.word	0x20000000
 8001518:	20000004 	.word	0x20000004

0800151c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001520:	4b03      	ldr	r3, [pc, #12]	@ (8001530 <HAL_RCC_GetHCLKFreq+0x14>)
 8001522:	681b      	ldr	r3, [r3, #0]
}
 8001524:	4618      	mov	r0, r3
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	20000000 	.word	0x20000000

08001534 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001538:	f7ff fff0 	bl	800151c <HAL_RCC_GetHCLKFreq>
 800153c:	4602      	mov	r2, r0
 800153e:	4b05      	ldr	r3, [pc, #20]	@ (8001554 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	0a9b      	lsrs	r3, r3, #10
 8001544:	f003 0307 	and.w	r3, r3, #7
 8001548:	4903      	ldr	r1, [pc, #12]	@ (8001558 <HAL_RCC_GetPCLK1Freq+0x24>)
 800154a:	5ccb      	ldrb	r3, [r1, r3]
 800154c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001550:	4618      	mov	r0, r3
 8001552:	bd80      	pop	{r7, pc}
 8001554:	40023800 	.word	0x40023800
 8001558:	08007d8c 	.word	0x08007d8c

0800155c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	220f      	movs	r2, #15
 800156a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800156c:	4b12      	ldr	r3, [pc, #72]	@ (80015b8 <HAL_RCC_GetClockConfig+0x5c>)
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	f003 0203 	and.w	r2, r3, #3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001578:	4b0f      	ldr	r3, [pc, #60]	@ (80015b8 <HAL_RCC_GetClockConfig+0x5c>)
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001584:	4b0c      	ldr	r3, [pc, #48]	@ (80015b8 <HAL_RCC_GetClockConfig+0x5c>)
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001590:	4b09      	ldr	r3, [pc, #36]	@ (80015b8 <HAL_RCC_GetClockConfig+0x5c>)
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	08db      	lsrs	r3, r3, #3
 8001596:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800159e:	4b07      	ldr	r3, [pc, #28]	@ (80015bc <HAL_RCC_GetClockConfig+0x60>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 020f 	and.w	r2, r3, #15
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	601a      	str	r2, [r3, #0]
}
 80015aa:	bf00      	nop
 80015ac:	370c      	adds	r7, #12
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	40023800 	.word	0x40023800
 80015bc:	40023c00 	.word	0x40023c00

080015c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80015c4:	b0ae      	sub	sp, #184	@ 0xb8
 80015c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80015c8:	2300      	movs	r3, #0
 80015ca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80015ce:	2300      	movs	r3, #0
 80015d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80015d4:	2300      	movs	r3, #0
 80015d6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80015da:	2300      	movs	r3, #0
 80015dc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80015e0:	2300      	movs	r3, #0
 80015e2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80015e6:	4bcb      	ldr	r3, [pc, #812]	@ (8001914 <HAL_RCC_GetSysClockFreq+0x354>)
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	f003 030c 	and.w	r3, r3, #12
 80015ee:	2b0c      	cmp	r3, #12
 80015f0:	f200 8206 	bhi.w	8001a00 <HAL_RCC_GetSysClockFreq+0x440>
 80015f4:	a201      	add	r2, pc, #4	@ (adr r2, 80015fc <HAL_RCC_GetSysClockFreq+0x3c>)
 80015f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015fa:	bf00      	nop
 80015fc:	08001631 	.word	0x08001631
 8001600:	08001a01 	.word	0x08001a01
 8001604:	08001a01 	.word	0x08001a01
 8001608:	08001a01 	.word	0x08001a01
 800160c:	08001639 	.word	0x08001639
 8001610:	08001a01 	.word	0x08001a01
 8001614:	08001a01 	.word	0x08001a01
 8001618:	08001a01 	.word	0x08001a01
 800161c:	08001641 	.word	0x08001641
 8001620:	08001a01 	.word	0x08001a01
 8001624:	08001a01 	.word	0x08001a01
 8001628:	08001a01 	.word	0x08001a01
 800162c:	08001831 	.word	0x08001831
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001630:	4bb9      	ldr	r3, [pc, #740]	@ (8001918 <HAL_RCC_GetSysClockFreq+0x358>)
 8001632:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8001636:	e1e7      	b.n	8001a08 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001638:	4bb8      	ldr	r3, [pc, #736]	@ (800191c <HAL_RCC_GetSysClockFreq+0x35c>)
 800163a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800163e:	e1e3      	b.n	8001a08 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001640:	4bb4      	ldr	r3, [pc, #720]	@ (8001914 <HAL_RCC_GetSysClockFreq+0x354>)
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001648:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800164c:	4bb1      	ldr	r3, [pc, #708]	@ (8001914 <HAL_RCC_GetSysClockFreq+0x354>)
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001654:	2b00      	cmp	r3, #0
 8001656:	d071      	beq.n	800173c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001658:	4bae      	ldr	r3, [pc, #696]	@ (8001914 <HAL_RCC_GetSysClockFreq+0x354>)
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	099b      	lsrs	r3, r3, #6
 800165e:	2200      	movs	r2, #0
 8001660:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001664:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001668:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800166c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001670:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001674:	2300      	movs	r3, #0
 8001676:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800167a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800167e:	4622      	mov	r2, r4
 8001680:	462b      	mov	r3, r5
 8001682:	f04f 0000 	mov.w	r0, #0
 8001686:	f04f 0100 	mov.w	r1, #0
 800168a:	0159      	lsls	r1, r3, #5
 800168c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001690:	0150      	lsls	r0, r2, #5
 8001692:	4602      	mov	r2, r0
 8001694:	460b      	mov	r3, r1
 8001696:	4621      	mov	r1, r4
 8001698:	1a51      	subs	r1, r2, r1
 800169a:	6439      	str	r1, [r7, #64]	@ 0x40
 800169c:	4629      	mov	r1, r5
 800169e:	eb63 0301 	sbc.w	r3, r3, r1
 80016a2:	647b      	str	r3, [r7, #68]	@ 0x44
 80016a4:	f04f 0200 	mov.w	r2, #0
 80016a8:	f04f 0300 	mov.w	r3, #0
 80016ac:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80016b0:	4649      	mov	r1, r9
 80016b2:	018b      	lsls	r3, r1, #6
 80016b4:	4641      	mov	r1, r8
 80016b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80016ba:	4641      	mov	r1, r8
 80016bc:	018a      	lsls	r2, r1, #6
 80016be:	4641      	mov	r1, r8
 80016c0:	1a51      	subs	r1, r2, r1
 80016c2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80016c4:	4649      	mov	r1, r9
 80016c6:	eb63 0301 	sbc.w	r3, r3, r1
 80016ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80016cc:	f04f 0200 	mov.w	r2, #0
 80016d0:	f04f 0300 	mov.w	r3, #0
 80016d4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80016d8:	4649      	mov	r1, r9
 80016da:	00cb      	lsls	r3, r1, #3
 80016dc:	4641      	mov	r1, r8
 80016de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80016e2:	4641      	mov	r1, r8
 80016e4:	00ca      	lsls	r2, r1, #3
 80016e6:	4610      	mov	r0, r2
 80016e8:	4619      	mov	r1, r3
 80016ea:	4603      	mov	r3, r0
 80016ec:	4622      	mov	r2, r4
 80016ee:	189b      	adds	r3, r3, r2
 80016f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80016f2:	462b      	mov	r3, r5
 80016f4:	460a      	mov	r2, r1
 80016f6:	eb42 0303 	adc.w	r3, r2, r3
 80016fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80016fc:	f04f 0200 	mov.w	r2, #0
 8001700:	f04f 0300 	mov.w	r3, #0
 8001704:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001708:	4629      	mov	r1, r5
 800170a:	024b      	lsls	r3, r1, #9
 800170c:	4621      	mov	r1, r4
 800170e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001712:	4621      	mov	r1, r4
 8001714:	024a      	lsls	r2, r1, #9
 8001716:	4610      	mov	r0, r2
 8001718:	4619      	mov	r1, r3
 800171a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800171e:	2200      	movs	r2, #0
 8001720:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001724:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001728:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800172c:	f7fe fe10 	bl	8000350 <__aeabi_uldivmod>
 8001730:	4602      	mov	r2, r0
 8001732:	460b      	mov	r3, r1
 8001734:	4613      	mov	r3, r2
 8001736:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800173a:	e067      	b.n	800180c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800173c:	4b75      	ldr	r3, [pc, #468]	@ (8001914 <HAL_RCC_GetSysClockFreq+0x354>)
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	099b      	lsrs	r3, r3, #6
 8001742:	2200      	movs	r2, #0
 8001744:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001748:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800174c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001750:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001754:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001756:	2300      	movs	r3, #0
 8001758:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800175a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800175e:	4622      	mov	r2, r4
 8001760:	462b      	mov	r3, r5
 8001762:	f04f 0000 	mov.w	r0, #0
 8001766:	f04f 0100 	mov.w	r1, #0
 800176a:	0159      	lsls	r1, r3, #5
 800176c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001770:	0150      	lsls	r0, r2, #5
 8001772:	4602      	mov	r2, r0
 8001774:	460b      	mov	r3, r1
 8001776:	4621      	mov	r1, r4
 8001778:	1a51      	subs	r1, r2, r1
 800177a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800177c:	4629      	mov	r1, r5
 800177e:	eb63 0301 	sbc.w	r3, r3, r1
 8001782:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001784:	f04f 0200 	mov.w	r2, #0
 8001788:	f04f 0300 	mov.w	r3, #0
 800178c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001790:	4649      	mov	r1, r9
 8001792:	018b      	lsls	r3, r1, #6
 8001794:	4641      	mov	r1, r8
 8001796:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800179a:	4641      	mov	r1, r8
 800179c:	018a      	lsls	r2, r1, #6
 800179e:	4641      	mov	r1, r8
 80017a0:	ebb2 0a01 	subs.w	sl, r2, r1
 80017a4:	4649      	mov	r1, r9
 80017a6:	eb63 0b01 	sbc.w	fp, r3, r1
 80017aa:	f04f 0200 	mov.w	r2, #0
 80017ae:	f04f 0300 	mov.w	r3, #0
 80017b2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80017b6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80017ba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80017be:	4692      	mov	sl, r2
 80017c0:	469b      	mov	fp, r3
 80017c2:	4623      	mov	r3, r4
 80017c4:	eb1a 0303 	adds.w	r3, sl, r3
 80017c8:	623b      	str	r3, [r7, #32]
 80017ca:	462b      	mov	r3, r5
 80017cc:	eb4b 0303 	adc.w	r3, fp, r3
 80017d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80017d2:	f04f 0200 	mov.w	r2, #0
 80017d6:	f04f 0300 	mov.w	r3, #0
 80017da:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80017de:	4629      	mov	r1, r5
 80017e0:	028b      	lsls	r3, r1, #10
 80017e2:	4621      	mov	r1, r4
 80017e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80017e8:	4621      	mov	r1, r4
 80017ea:	028a      	lsls	r2, r1, #10
 80017ec:	4610      	mov	r0, r2
 80017ee:	4619      	mov	r1, r3
 80017f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80017f4:	2200      	movs	r2, #0
 80017f6:	673b      	str	r3, [r7, #112]	@ 0x70
 80017f8:	677a      	str	r2, [r7, #116]	@ 0x74
 80017fa:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80017fe:	f7fe fda7 	bl	8000350 <__aeabi_uldivmod>
 8001802:	4602      	mov	r2, r0
 8001804:	460b      	mov	r3, r1
 8001806:	4613      	mov	r3, r2
 8001808:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800180c:	4b41      	ldr	r3, [pc, #260]	@ (8001914 <HAL_RCC_GetSysClockFreq+0x354>)
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	0c1b      	lsrs	r3, r3, #16
 8001812:	f003 0303 	and.w	r3, r3, #3
 8001816:	3301      	adds	r3, #1
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 800181e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001822:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001826:	fbb2 f3f3 	udiv	r3, r2, r3
 800182a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800182e:	e0eb      	b.n	8001a08 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001830:	4b38      	ldr	r3, [pc, #224]	@ (8001914 <HAL_RCC_GetSysClockFreq+0x354>)
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001838:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800183c:	4b35      	ldr	r3, [pc, #212]	@ (8001914 <HAL_RCC_GetSysClockFreq+0x354>)
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001844:	2b00      	cmp	r3, #0
 8001846:	d06b      	beq.n	8001920 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001848:	4b32      	ldr	r3, [pc, #200]	@ (8001914 <HAL_RCC_GetSysClockFreq+0x354>)
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	099b      	lsrs	r3, r3, #6
 800184e:	2200      	movs	r2, #0
 8001850:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001852:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001854:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001856:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800185a:	663b      	str	r3, [r7, #96]	@ 0x60
 800185c:	2300      	movs	r3, #0
 800185e:	667b      	str	r3, [r7, #100]	@ 0x64
 8001860:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001864:	4622      	mov	r2, r4
 8001866:	462b      	mov	r3, r5
 8001868:	f04f 0000 	mov.w	r0, #0
 800186c:	f04f 0100 	mov.w	r1, #0
 8001870:	0159      	lsls	r1, r3, #5
 8001872:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001876:	0150      	lsls	r0, r2, #5
 8001878:	4602      	mov	r2, r0
 800187a:	460b      	mov	r3, r1
 800187c:	4621      	mov	r1, r4
 800187e:	1a51      	subs	r1, r2, r1
 8001880:	61b9      	str	r1, [r7, #24]
 8001882:	4629      	mov	r1, r5
 8001884:	eb63 0301 	sbc.w	r3, r3, r1
 8001888:	61fb      	str	r3, [r7, #28]
 800188a:	f04f 0200 	mov.w	r2, #0
 800188e:	f04f 0300 	mov.w	r3, #0
 8001892:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001896:	4659      	mov	r1, fp
 8001898:	018b      	lsls	r3, r1, #6
 800189a:	4651      	mov	r1, sl
 800189c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018a0:	4651      	mov	r1, sl
 80018a2:	018a      	lsls	r2, r1, #6
 80018a4:	4651      	mov	r1, sl
 80018a6:	ebb2 0801 	subs.w	r8, r2, r1
 80018aa:	4659      	mov	r1, fp
 80018ac:	eb63 0901 	sbc.w	r9, r3, r1
 80018b0:	f04f 0200 	mov.w	r2, #0
 80018b4:	f04f 0300 	mov.w	r3, #0
 80018b8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80018bc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80018c0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80018c4:	4690      	mov	r8, r2
 80018c6:	4699      	mov	r9, r3
 80018c8:	4623      	mov	r3, r4
 80018ca:	eb18 0303 	adds.w	r3, r8, r3
 80018ce:	613b      	str	r3, [r7, #16]
 80018d0:	462b      	mov	r3, r5
 80018d2:	eb49 0303 	adc.w	r3, r9, r3
 80018d6:	617b      	str	r3, [r7, #20]
 80018d8:	f04f 0200 	mov.w	r2, #0
 80018dc:	f04f 0300 	mov.w	r3, #0
 80018e0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80018e4:	4629      	mov	r1, r5
 80018e6:	024b      	lsls	r3, r1, #9
 80018e8:	4621      	mov	r1, r4
 80018ea:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80018ee:	4621      	mov	r1, r4
 80018f0:	024a      	lsls	r2, r1, #9
 80018f2:	4610      	mov	r0, r2
 80018f4:	4619      	mov	r1, r3
 80018f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80018fa:	2200      	movs	r2, #0
 80018fc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80018fe:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001900:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001904:	f7fe fd24 	bl	8000350 <__aeabi_uldivmod>
 8001908:	4602      	mov	r2, r0
 800190a:	460b      	mov	r3, r1
 800190c:	4613      	mov	r3, r2
 800190e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001912:	e065      	b.n	80019e0 <HAL_RCC_GetSysClockFreq+0x420>
 8001914:	40023800 	.word	0x40023800
 8001918:	00f42400 	.word	0x00f42400
 800191c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001920:	4b3d      	ldr	r3, [pc, #244]	@ (8001a18 <HAL_RCC_GetSysClockFreq+0x458>)
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	099b      	lsrs	r3, r3, #6
 8001926:	2200      	movs	r2, #0
 8001928:	4618      	mov	r0, r3
 800192a:	4611      	mov	r1, r2
 800192c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001930:	653b      	str	r3, [r7, #80]	@ 0x50
 8001932:	2300      	movs	r3, #0
 8001934:	657b      	str	r3, [r7, #84]	@ 0x54
 8001936:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800193a:	4642      	mov	r2, r8
 800193c:	464b      	mov	r3, r9
 800193e:	f04f 0000 	mov.w	r0, #0
 8001942:	f04f 0100 	mov.w	r1, #0
 8001946:	0159      	lsls	r1, r3, #5
 8001948:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800194c:	0150      	lsls	r0, r2, #5
 800194e:	4602      	mov	r2, r0
 8001950:	460b      	mov	r3, r1
 8001952:	4641      	mov	r1, r8
 8001954:	1a51      	subs	r1, r2, r1
 8001956:	60b9      	str	r1, [r7, #8]
 8001958:	4649      	mov	r1, r9
 800195a:	eb63 0301 	sbc.w	r3, r3, r1
 800195e:	60fb      	str	r3, [r7, #12]
 8001960:	f04f 0200 	mov.w	r2, #0
 8001964:	f04f 0300 	mov.w	r3, #0
 8001968:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800196c:	4659      	mov	r1, fp
 800196e:	018b      	lsls	r3, r1, #6
 8001970:	4651      	mov	r1, sl
 8001972:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001976:	4651      	mov	r1, sl
 8001978:	018a      	lsls	r2, r1, #6
 800197a:	4651      	mov	r1, sl
 800197c:	1a54      	subs	r4, r2, r1
 800197e:	4659      	mov	r1, fp
 8001980:	eb63 0501 	sbc.w	r5, r3, r1
 8001984:	f04f 0200 	mov.w	r2, #0
 8001988:	f04f 0300 	mov.w	r3, #0
 800198c:	00eb      	lsls	r3, r5, #3
 800198e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001992:	00e2      	lsls	r2, r4, #3
 8001994:	4614      	mov	r4, r2
 8001996:	461d      	mov	r5, r3
 8001998:	4643      	mov	r3, r8
 800199a:	18e3      	adds	r3, r4, r3
 800199c:	603b      	str	r3, [r7, #0]
 800199e:	464b      	mov	r3, r9
 80019a0:	eb45 0303 	adc.w	r3, r5, r3
 80019a4:	607b      	str	r3, [r7, #4]
 80019a6:	f04f 0200 	mov.w	r2, #0
 80019aa:	f04f 0300 	mov.w	r3, #0
 80019ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80019b2:	4629      	mov	r1, r5
 80019b4:	028b      	lsls	r3, r1, #10
 80019b6:	4621      	mov	r1, r4
 80019b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80019bc:	4621      	mov	r1, r4
 80019be:	028a      	lsls	r2, r1, #10
 80019c0:	4610      	mov	r0, r2
 80019c2:	4619      	mov	r1, r3
 80019c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80019c8:	2200      	movs	r2, #0
 80019ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 80019cc:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80019ce:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80019d2:	f7fe fcbd 	bl	8000350 <__aeabi_uldivmod>
 80019d6:	4602      	mov	r2, r0
 80019d8:	460b      	mov	r3, r1
 80019da:	4613      	mov	r3, r2
 80019dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80019e0:	4b0d      	ldr	r3, [pc, #52]	@ (8001a18 <HAL_RCC_GetSysClockFreq+0x458>)
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	0f1b      	lsrs	r3, r3, #28
 80019e6:	f003 0307 	and.w	r3, r3, #7
 80019ea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 80019ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80019f2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80019f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80019fa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80019fe:	e003      	b.n	8001a08 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a00:	4b06      	ldr	r3, [pc, #24]	@ (8001a1c <HAL_RCC_GetSysClockFreq+0x45c>)
 8001a02:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001a06:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a08:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	37b8      	adds	r7, #184	@ 0xb8
 8001a10:	46bd      	mov	sp, r7
 8001a12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a16:	bf00      	nop
 8001a18:	40023800 	.word	0x40023800
 8001a1c:	00f42400 	.word	0x00f42400

08001a20 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b086      	sub	sp, #24
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d101      	bne.n	8001a32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e28d      	b.n	8001f4e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0301 	and.w	r3, r3, #1
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	f000 8083 	beq.w	8001b46 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001a40:	4b94      	ldr	r3, [pc, #592]	@ (8001c94 <HAL_RCC_OscConfig+0x274>)
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	f003 030c 	and.w	r3, r3, #12
 8001a48:	2b04      	cmp	r3, #4
 8001a4a:	d019      	beq.n	8001a80 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001a4c:	4b91      	ldr	r3, [pc, #580]	@ (8001c94 <HAL_RCC_OscConfig+0x274>)
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001a54:	2b08      	cmp	r3, #8
 8001a56:	d106      	bne.n	8001a66 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001a58:	4b8e      	ldr	r3, [pc, #568]	@ (8001c94 <HAL_RCC_OscConfig+0x274>)
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a60:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001a64:	d00c      	beq.n	8001a80 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a66:	4b8b      	ldr	r3, [pc, #556]	@ (8001c94 <HAL_RCC_OscConfig+0x274>)
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001a6e:	2b0c      	cmp	r3, #12
 8001a70:	d112      	bne.n	8001a98 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a72:	4b88      	ldr	r3, [pc, #544]	@ (8001c94 <HAL_RCC_OscConfig+0x274>)
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a7a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001a7e:	d10b      	bne.n	8001a98 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a80:	4b84      	ldr	r3, [pc, #528]	@ (8001c94 <HAL_RCC_OscConfig+0x274>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d05b      	beq.n	8001b44 <HAL_RCC_OscConfig+0x124>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d157      	bne.n	8001b44 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e25a      	b.n	8001f4e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001aa0:	d106      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x90>
 8001aa2:	4b7c      	ldr	r3, [pc, #496]	@ (8001c94 <HAL_RCC_OscConfig+0x274>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a7b      	ldr	r2, [pc, #492]	@ (8001c94 <HAL_RCC_OscConfig+0x274>)
 8001aa8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001aac:	6013      	str	r3, [r2, #0]
 8001aae:	e01d      	b.n	8001aec <HAL_RCC_OscConfig+0xcc>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ab8:	d10c      	bne.n	8001ad4 <HAL_RCC_OscConfig+0xb4>
 8001aba:	4b76      	ldr	r3, [pc, #472]	@ (8001c94 <HAL_RCC_OscConfig+0x274>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a75      	ldr	r2, [pc, #468]	@ (8001c94 <HAL_RCC_OscConfig+0x274>)
 8001ac0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ac4:	6013      	str	r3, [r2, #0]
 8001ac6:	4b73      	ldr	r3, [pc, #460]	@ (8001c94 <HAL_RCC_OscConfig+0x274>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a72      	ldr	r2, [pc, #456]	@ (8001c94 <HAL_RCC_OscConfig+0x274>)
 8001acc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ad0:	6013      	str	r3, [r2, #0]
 8001ad2:	e00b      	b.n	8001aec <HAL_RCC_OscConfig+0xcc>
 8001ad4:	4b6f      	ldr	r3, [pc, #444]	@ (8001c94 <HAL_RCC_OscConfig+0x274>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a6e      	ldr	r2, [pc, #440]	@ (8001c94 <HAL_RCC_OscConfig+0x274>)
 8001ada:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ade:	6013      	str	r3, [r2, #0]
 8001ae0:	4b6c      	ldr	r3, [pc, #432]	@ (8001c94 <HAL_RCC_OscConfig+0x274>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a6b      	ldr	r2, [pc, #428]	@ (8001c94 <HAL_RCC_OscConfig+0x274>)
 8001ae6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001aea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d013      	beq.n	8001b1c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001af4:	f7ff f926 	bl	8000d44 <HAL_GetTick>
 8001af8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001afa:	e008      	b.n	8001b0e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001afc:	f7ff f922 	bl	8000d44 <HAL_GetTick>
 8001b00:	4602      	mov	r2, r0
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	2b64      	cmp	r3, #100	@ 0x64
 8001b08:	d901      	bls.n	8001b0e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e21f      	b.n	8001f4e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b0e:	4b61      	ldr	r3, [pc, #388]	@ (8001c94 <HAL_RCC_OscConfig+0x274>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d0f0      	beq.n	8001afc <HAL_RCC_OscConfig+0xdc>
 8001b1a:	e014      	b.n	8001b46 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b1c:	f7ff f912 	bl	8000d44 <HAL_GetTick>
 8001b20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b22:	e008      	b.n	8001b36 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b24:	f7ff f90e 	bl	8000d44 <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	2b64      	cmp	r3, #100	@ 0x64
 8001b30:	d901      	bls.n	8001b36 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e20b      	b.n	8001f4e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b36:	4b57      	ldr	r3, [pc, #348]	@ (8001c94 <HAL_RCC_OscConfig+0x274>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d1f0      	bne.n	8001b24 <HAL_RCC_OscConfig+0x104>
 8001b42:	e000      	b.n	8001b46 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0302 	and.w	r3, r3, #2
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d06f      	beq.n	8001c32 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001b52:	4b50      	ldr	r3, [pc, #320]	@ (8001c94 <HAL_RCC_OscConfig+0x274>)
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	f003 030c 	and.w	r3, r3, #12
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d017      	beq.n	8001b8e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001b5e:	4b4d      	ldr	r3, [pc, #308]	@ (8001c94 <HAL_RCC_OscConfig+0x274>)
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001b66:	2b08      	cmp	r3, #8
 8001b68:	d105      	bne.n	8001b76 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001b6a:	4b4a      	ldr	r3, [pc, #296]	@ (8001c94 <HAL_RCC_OscConfig+0x274>)
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d00b      	beq.n	8001b8e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b76:	4b47      	ldr	r3, [pc, #284]	@ (8001c94 <HAL_RCC_OscConfig+0x274>)
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001b7e:	2b0c      	cmp	r3, #12
 8001b80:	d11c      	bne.n	8001bbc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b82:	4b44      	ldr	r3, [pc, #272]	@ (8001c94 <HAL_RCC_OscConfig+0x274>)
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d116      	bne.n	8001bbc <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b8e:	4b41      	ldr	r3, [pc, #260]	@ (8001c94 <HAL_RCC_OscConfig+0x274>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0302 	and.w	r3, r3, #2
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d005      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x186>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	68db      	ldr	r3, [r3, #12]
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d001      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e1d3      	b.n	8001f4e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ba6:	4b3b      	ldr	r3, [pc, #236]	@ (8001c94 <HAL_RCC_OscConfig+0x274>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	691b      	ldr	r3, [r3, #16]
 8001bb2:	00db      	lsls	r3, r3, #3
 8001bb4:	4937      	ldr	r1, [pc, #220]	@ (8001c94 <HAL_RCC_OscConfig+0x274>)
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bba:	e03a      	b.n	8001c32 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d020      	beq.n	8001c06 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bc4:	4b34      	ldr	r3, [pc, #208]	@ (8001c98 <HAL_RCC_OscConfig+0x278>)
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bca:	f7ff f8bb 	bl	8000d44 <HAL_GetTick>
 8001bce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bd0:	e008      	b.n	8001be4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bd2:	f7ff f8b7 	bl	8000d44 <HAL_GetTick>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	1ad3      	subs	r3, r2, r3
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d901      	bls.n	8001be4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001be0:	2303      	movs	r3, #3
 8001be2:	e1b4      	b.n	8001f4e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001be4:	4b2b      	ldr	r3, [pc, #172]	@ (8001c94 <HAL_RCC_OscConfig+0x274>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 0302 	and.w	r3, r3, #2
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d0f0      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bf0:	4b28      	ldr	r3, [pc, #160]	@ (8001c94 <HAL_RCC_OscConfig+0x274>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	691b      	ldr	r3, [r3, #16]
 8001bfc:	00db      	lsls	r3, r3, #3
 8001bfe:	4925      	ldr	r1, [pc, #148]	@ (8001c94 <HAL_RCC_OscConfig+0x274>)
 8001c00:	4313      	orrs	r3, r2
 8001c02:	600b      	str	r3, [r1, #0]
 8001c04:	e015      	b.n	8001c32 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c06:	4b24      	ldr	r3, [pc, #144]	@ (8001c98 <HAL_RCC_OscConfig+0x278>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c0c:	f7ff f89a 	bl	8000d44 <HAL_GetTick>
 8001c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c12:	e008      	b.n	8001c26 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c14:	f7ff f896 	bl	8000d44 <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	d901      	bls.n	8001c26 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	e193      	b.n	8001f4e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c26:	4b1b      	ldr	r3, [pc, #108]	@ (8001c94 <HAL_RCC_OscConfig+0x274>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0302 	and.w	r3, r3, #2
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d1f0      	bne.n	8001c14 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 0308 	and.w	r3, r3, #8
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d036      	beq.n	8001cac <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	695b      	ldr	r3, [r3, #20]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d016      	beq.n	8001c74 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c46:	4b15      	ldr	r3, [pc, #84]	@ (8001c9c <HAL_RCC_OscConfig+0x27c>)
 8001c48:	2201      	movs	r2, #1
 8001c4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c4c:	f7ff f87a 	bl	8000d44 <HAL_GetTick>
 8001c50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c52:	e008      	b.n	8001c66 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c54:	f7ff f876 	bl	8000d44 <HAL_GetTick>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d901      	bls.n	8001c66 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001c62:	2303      	movs	r3, #3
 8001c64:	e173      	b.n	8001f4e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c66:	4b0b      	ldr	r3, [pc, #44]	@ (8001c94 <HAL_RCC_OscConfig+0x274>)
 8001c68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c6a:	f003 0302 	and.w	r3, r3, #2
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d0f0      	beq.n	8001c54 <HAL_RCC_OscConfig+0x234>
 8001c72:	e01b      	b.n	8001cac <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c74:	4b09      	ldr	r3, [pc, #36]	@ (8001c9c <HAL_RCC_OscConfig+0x27c>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c7a:	f7ff f863 	bl	8000d44 <HAL_GetTick>
 8001c7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c80:	e00e      	b.n	8001ca0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c82:	f7ff f85f 	bl	8000d44 <HAL_GetTick>
 8001c86:	4602      	mov	r2, r0
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	1ad3      	subs	r3, r2, r3
 8001c8c:	2b02      	cmp	r3, #2
 8001c8e:	d907      	bls.n	8001ca0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001c90:	2303      	movs	r3, #3
 8001c92:	e15c      	b.n	8001f4e <HAL_RCC_OscConfig+0x52e>
 8001c94:	40023800 	.word	0x40023800
 8001c98:	42470000 	.word	0x42470000
 8001c9c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ca0:	4b8a      	ldr	r3, [pc, #552]	@ (8001ecc <HAL_RCC_OscConfig+0x4ac>)
 8001ca2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ca4:	f003 0302 	and.w	r3, r3, #2
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d1ea      	bne.n	8001c82 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 0304 	and.w	r3, r3, #4
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	f000 8097 	beq.w	8001de8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cbe:	4b83      	ldr	r3, [pc, #524]	@ (8001ecc <HAL_RCC_OscConfig+0x4ac>)
 8001cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d10f      	bne.n	8001cea <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cca:	2300      	movs	r3, #0
 8001ccc:	60bb      	str	r3, [r7, #8]
 8001cce:	4b7f      	ldr	r3, [pc, #508]	@ (8001ecc <HAL_RCC_OscConfig+0x4ac>)
 8001cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cd2:	4a7e      	ldr	r2, [pc, #504]	@ (8001ecc <HAL_RCC_OscConfig+0x4ac>)
 8001cd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cd8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cda:	4b7c      	ldr	r3, [pc, #496]	@ (8001ecc <HAL_RCC_OscConfig+0x4ac>)
 8001cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ce2:	60bb      	str	r3, [r7, #8]
 8001ce4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cea:	4b79      	ldr	r3, [pc, #484]	@ (8001ed0 <HAL_RCC_OscConfig+0x4b0>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d118      	bne.n	8001d28 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cf6:	4b76      	ldr	r3, [pc, #472]	@ (8001ed0 <HAL_RCC_OscConfig+0x4b0>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a75      	ldr	r2, [pc, #468]	@ (8001ed0 <HAL_RCC_OscConfig+0x4b0>)
 8001cfc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d02:	f7ff f81f 	bl	8000d44 <HAL_GetTick>
 8001d06:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d08:	e008      	b.n	8001d1c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d0a:	f7ff f81b 	bl	8000d44 <HAL_GetTick>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	2b02      	cmp	r3, #2
 8001d16:	d901      	bls.n	8001d1c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001d18:	2303      	movs	r3, #3
 8001d1a:	e118      	b.n	8001f4e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d1c:	4b6c      	ldr	r3, [pc, #432]	@ (8001ed0 <HAL_RCC_OscConfig+0x4b0>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d0f0      	beq.n	8001d0a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d106      	bne.n	8001d3e <HAL_RCC_OscConfig+0x31e>
 8001d30:	4b66      	ldr	r3, [pc, #408]	@ (8001ecc <HAL_RCC_OscConfig+0x4ac>)
 8001d32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d34:	4a65      	ldr	r2, [pc, #404]	@ (8001ecc <HAL_RCC_OscConfig+0x4ac>)
 8001d36:	f043 0301 	orr.w	r3, r3, #1
 8001d3a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d3c:	e01c      	b.n	8001d78 <HAL_RCC_OscConfig+0x358>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	2b05      	cmp	r3, #5
 8001d44:	d10c      	bne.n	8001d60 <HAL_RCC_OscConfig+0x340>
 8001d46:	4b61      	ldr	r3, [pc, #388]	@ (8001ecc <HAL_RCC_OscConfig+0x4ac>)
 8001d48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d4a:	4a60      	ldr	r2, [pc, #384]	@ (8001ecc <HAL_RCC_OscConfig+0x4ac>)
 8001d4c:	f043 0304 	orr.w	r3, r3, #4
 8001d50:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d52:	4b5e      	ldr	r3, [pc, #376]	@ (8001ecc <HAL_RCC_OscConfig+0x4ac>)
 8001d54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d56:	4a5d      	ldr	r2, [pc, #372]	@ (8001ecc <HAL_RCC_OscConfig+0x4ac>)
 8001d58:	f043 0301 	orr.w	r3, r3, #1
 8001d5c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d5e:	e00b      	b.n	8001d78 <HAL_RCC_OscConfig+0x358>
 8001d60:	4b5a      	ldr	r3, [pc, #360]	@ (8001ecc <HAL_RCC_OscConfig+0x4ac>)
 8001d62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d64:	4a59      	ldr	r2, [pc, #356]	@ (8001ecc <HAL_RCC_OscConfig+0x4ac>)
 8001d66:	f023 0301 	bic.w	r3, r3, #1
 8001d6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d6c:	4b57      	ldr	r3, [pc, #348]	@ (8001ecc <HAL_RCC_OscConfig+0x4ac>)
 8001d6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d70:	4a56      	ldr	r2, [pc, #344]	@ (8001ecc <HAL_RCC_OscConfig+0x4ac>)
 8001d72:	f023 0304 	bic.w	r3, r3, #4
 8001d76:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d015      	beq.n	8001dac <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d80:	f7fe ffe0 	bl	8000d44 <HAL_GetTick>
 8001d84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d86:	e00a      	b.n	8001d9e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d88:	f7fe ffdc 	bl	8000d44 <HAL_GetTick>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d901      	bls.n	8001d9e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	e0d7      	b.n	8001f4e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d9e:	4b4b      	ldr	r3, [pc, #300]	@ (8001ecc <HAL_RCC_OscConfig+0x4ac>)
 8001da0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001da2:	f003 0302 	and.w	r3, r3, #2
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d0ee      	beq.n	8001d88 <HAL_RCC_OscConfig+0x368>
 8001daa:	e014      	b.n	8001dd6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dac:	f7fe ffca 	bl	8000d44 <HAL_GetTick>
 8001db0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001db2:	e00a      	b.n	8001dca <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001db4:	f7fe ffc6 	bl	8000d44 <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d901      	bls.n	8001dca <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e0c1      	b.n	8001f4e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dca:	4b40      	ldr	r3, [pc, #256]	@ (8001ecc <HAL_RCC_OscConfig+0x4ac>)
 8001dcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dce:	f003 0302 	and.w	r3, r3, #2
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d1ee      	bne.n	8001db4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001dd6:	7dfb      	ldrb	r3, [r7, #23]
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d105      	bne.n	8001de8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ddc:	4b3b      	ldr	r3, [pc, #236]	@ (8001ecc <HAL_RCC_OscConfig+0x4ac>)
 8001dde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de0:	4a3a      	ldr	r2, [pc, #232]	@ (8001ecc <HAL_RCC_OscConfig+0x4ac>)
 8001de2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001de6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	699b      	ldr	r3, [r3, #24]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	f000 80ad 	beq.w	8001f4c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001df2:	4b36      	ldr	r3, [pc, #216]	@ (8001ecc <HAL_RCC_OscConfig+0x4ac>)
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	f003 030c 	and.w	r3, r3, #12
 8001dfa:	2b08      	cmp	r3, #8
 8001dfc:	d060      	beq.n	8001ec0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	699b      	ldr	r3, [r3, #24]
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d145      	bne.n	8001e92 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e06:	4b33      	ldr	r3, [pc, #204]	@ (8001ed4 <HAL_RCC_OscConfig+0x4b4>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e0c:	f7fe ff9a 	bl	8000d44 <HAL_GetTick>
 8001e10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e12:	e008      	b.n	8001e26 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e14:	f7fe ff96 	bl	8000d44 <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	2b02      	cmp	r3, #2
 8001e20:	d901      	bls.n	8001e26 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001e22:	2303      	movs	r3, #3
 8001e24:	e093      	b.n	8001f4e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e26:	4b29      	ldr	r3, [pc, #164]	@ (8001ecc <HAL_RCC_OscConfig+0x4ac>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d1f0      	bne.n	8001e14 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	69da      	ldr	r2, [r3, #28]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6a1b      	ldr	r3, [r3, #32]
 8001e3a:	431a      	orrs	r2, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e40:	019b      	lsls	r3, r3, #6
 8001e42:	431a      	orrs	r2, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e48:	085b      	lsrs	r3, r3, #1
 8001e4a:	3b01      	subs	r3, #1
 8001e4c:	041b      	lsls	r3, r3, #16
 8001e4e:	431a      	orrs	r2, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e54:	061b      	lsls	r3, r3, #24
 8001e56:	431a      	orrs	r2, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e5c:	071b      	lsls	r3, r3, #28
 8001e5e:	491b      	ldr	r1, [pc, #108]	@ (8001ecc <HAL_RCC_OscConfig+0x4ac>)
 8001e60:	4313      	orrs	r3, r2
 8001e62:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e64:	4b1b      	ldr	r3, [pc, #108]	@ (8001ed4 <HAL_RCC_OscConfig+0x4b4>)
 8001e66:	2201      	movs	r2, #1
 8001e68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e6a:	f7fe ff6b 	bl	8000d44 <HAL_GetTick>
 8001e6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e70:	e008      	b.n	8001e84 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e72:	f7fe ff67 	bl	8000d44 <HAL_GetTick>
 8001e76:	4602      	mov	r2, r0
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	2b02      	cmp	r3, #2
 8001e7e:	d901      	bls.n	8001e84 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001e80:	2303      	movs	r3, #3
 8001e82:	e064      	b.n	8001f4e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e84:	4b11      	ldr	r3, [pc, #68]	@ (8001ecc <HAL_RCC_OscConfig+0x4ac>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d0f0      	beq.n	8001e72 <HAL_RCC_OscConfig+0x452>
 8001e90:	e05c      	b.n	8001f4c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e92:	4b10      	ldr	r3, [pc, #64]	@ (8001ed4 <HAL_RCC_OscConfig+0x4b4>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e98:	f7fe ff54 	bl	8000d44 <HAL_GetTick>
 8001e9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e9e:	e008      	b.n	8001eb2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ea0:	f7fe ff50 	bl	8000d44 <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d901      	bls.n	8001eb2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e04d      	b.n	8001f4e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eb2:	4b06      	ldr	r3, [pc, #24]	@ (8001ecc <HAL_RCC_OscConfig+0x4ac>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d1f0      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x480>
 8001ebe:	e045      	b.n	8001f4c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	699b      	ldr	r3, [r3, #24]
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d107      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e040      	b.n	8001f4e <HAL_RCC_OscConfig+0x52e>
 8001ecc:	40023800 	.word	0x40023800
 8001ed0:	40007000 	.word	0x40007000
 8001ed4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ed8:	4b1f      	ldr	r3, [pc, #124]	@ (8001f58 <HAL_RCC_OscConfig+0x538>)
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	699b      	ldr	r3, [r3, #24]
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d030      	beq.n	8001f48 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d129      	bne.n	8001f48 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d122      	bne.n	8001f48 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f02:	68fa      	ldr	r2, [r7, #12]
 8001f04:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001f08:	4013      	ands	r3, r2
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001f0e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d119      	bne.n	8001f48 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f1e:	085b      	lsrs	r3, r3, #1
 8001f20:	3b01      	subs	r3, #1
 8001f22:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d10f      	bne.n	8001f48 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f32:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d107      	bne.n	8001f48 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f42:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d001      	beq.n	8001f4c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e000      	b.n	8001f4e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001f4c:	2300      	movs	r3, #0
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3718      	adds	r7, #24
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	40023800 	.word	0x40023800

08001f5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d101      	bne.n	8001f6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e041      	b.n	8001ff2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d106      	bne.n	8001f88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f000 f839 	bl	8001ffa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2202      	movs	r2, #2
 8001f8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	3304      	adds	r3, #4
 8001f98:	4619      	mov	r1, r3
 8001f9a:	4610      	mov	r0, r2
 8001f9c:	f000 f9c0 	bl	8002320 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2201      	movs	r2, #1
 8001fac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2201      	movs	r2, #1
 8001fbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2201      	movs	r2, #1
 8001fdc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2201      	movs	r2, #1
 8001fec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001ff0:	2300      	movs	r3, #0
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3708      	adds	r7, #8
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}

08001ffa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001ffa:	b480      	push	{r7}
 8001ffc:	b083      	sub	sp, #12
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002002:	bf00      	nop
 8002004:	370c      	adds	r7, #12
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
	...

08002010 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002010:	b480      	push	{r7}
 8002012:	b085      	sub	sp, #20
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800201e:	b2db      	uxtb	r3, r3
 8002020:	2b01      	cmp	r3, #1
 8002022:	d001      	beq.n	8002028 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e04e      	b.n	80020c6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2202      	movs	r2, #2
 800202c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	68da      	ldr	r2, [r3, #12]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f042 0201 	orr.w	r2, r2, #1
 800203e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a23      	ldr	r2, [pc, #140]	@ (80020d4 <HAL_TIM_Base_Start_IT+0xc4>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d022      	beq.n	8002090 <HAL_TIM_Base_Start_IT+0x80>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002052:	d01d      	beq.n	8002090 <HAL_TIM_Base_Start_IT+0x80>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a1f      	ldr	r2, [pc, #124]	@ (80020d8 <HAL_TIM_Base_Start_IT+0xc8>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d018      	beq.n	8002090 <HAL_TIM_Base_Start_IT+0x80>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a1e      	ldr	r2, [pc, #120]	@ (80020dc <HAL_TIM_Base_Start_IT+0xcc>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d013      	beq.n	8002090 <HAL_TIM_Base_Start_IT+0x80>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a1c      	ldr	r2, [pc, #112]	@ (80020e0 <HAL_TIM_Base_Start_IT+0xd0>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d00e      	beq.n	8002090 <HAL_TIM_Base_Start_IT+0x80>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a1b      	ldr	r2, [pc, #108]	@ (80020e4 <HAL_TIM_Base_Start_IT+0xd4>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d009      	beq.n	8002090 <HAL_TIM_Base_Start_IT+0x80>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a19      	ldr	r2, [pc, #100]	@ (80020e8 <HAL_TIM_Base_Start_IT+0xd8>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d004      	beq.n	8002090 <HAL_TIM_Base_Start_IT+0x80>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a18      	ldr	r2, [pc, #96]	@ (80020ec <HAL_TIM_Base_Start_IT+0xdc>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d111      	bne.n	80020b4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	f003 0307 	and.w	r3, r3, #7
 800209a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	2b06      	cmp	r3, #6
 80020a0:	d010      	beq.n	80020c4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f042 0201 	orr.w	r2, r2, #1
 80020b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020b2:	e007      	b.n	80020c4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f042 0201 	orr.w	r2, r2, #1
 80020c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80020c4:	2300      	movs	r3, #0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3714      	adds	r7, #20
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop
 80020d4:	40010000 	.word	0x40010000
 80020d8:	40000400 	.word	0x40000400
 80020dc:	40000800 	.word	0x40000800
 80020e0:	40000c00 	.word	0x40000c00
 80020e4:	40010400 	.word	0x40010400
 80020e8:	40014000 	.word	0x40014000
 80020ec:	40001800 	.word	0x40001800

080020f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	68db      	ldr	r3, [r3, #12]
 80020fe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	691b      	ldr	r3, [r3, #16]
 8002106:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	f003 0302 	and.w	r3, r3, #2
 800210e:	2b00      	cmp	r3, #0
 8002110:	d020      	beq.n	8002154 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	f003 0302 	and.w	r3, r3, #2
 8002118:	2b00      	cmp	r3, #0
 800211a:	d01b      	beq.n	8002154 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f06f 0202 	mvn.w	r2, #2
 8002124:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2201      	movs	r2, #1
 800212a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	699b      	ldr	r3, [r3, #24]
 8002132:	f003 0303 	and.w	r3, r3, #3
 8002136:	2b00      	cmp	r3, #0
 8002138:	d003      	beq.n	8002142 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f000 f8d2 	bl	80022e4 <HAL_TIM_IC_CaptureCallback>
 8002140:	e005      	b.n	800214e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f000 f8c4 	bl	80022d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f000 f8d5 	bl	80022f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2200      	movs	r2, #0
 8002152:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	f003 0304 	and.w	r3, r3, #4
 800215a:	2b00      	cmp	r3, #0
 800215c:	d020      	beq.n	80021a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	f003 0304 	and.w	r3, r3, #4
 8002164:	2b00      	cmp	r3, #0
 8002166:	d01b      	beq.n	80021a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f06f 0204 	mvn.w	r2, #4
 8002170:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2202      	movs	r2, #2
 8002176:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	699b      	ldr	r3, [r3, #24]
 800217e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002182:	2b00      	cmp	r3, #0
 8002184:	d003      	beq.n	800218e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f000 f8ac 	bl	80022e4 <HAL_TIM_IC_CaptureCallback>
 800218c:	e005      	b.n	800219a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f000 f89e 	bl	80022d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f000 f8af 	bl	80022f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2200      	movs	r2, #0
 800219e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	f003 0308 	and.w	r3, r3, #8
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d020      	beq.n	80021ec <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	f003 0308 	and.w	r3, r3, #8
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d01b      	beq.n	80021ec <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f06f 0208 	mvn.w	r2, #8
 80021bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2204      	movs	r2, #4
 80021c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	69db      	ldr	r3, [r3, #28]
 80021ca:	f003 0303 	and.w	r3, r3, #3
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d003      	beq.n	80021da <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f000 f886 	bl	80022e4 <HAL_TIM_IC_CaptureCallback>
 80021d8:	e005      	b.n	80021e6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f000 f878 	bl	80022d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	f000 f889 	bl	80022f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	f003 0310 	and.w	r3, r3, #16
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d020      	beq.n	8002238 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	f003 0310 	and.w	r3, r3, #16
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d01b      	beq.n	8002238 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f06f 0210 	mvn.w	r2, #16
 8002208:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2208      	movs	r2, #8
 800220e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	69db      	ldr	r3, [r3, #28]
 8002216:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800221a:	2b00      	cmp	r3, #0
 800221c:	d003      	beq.n	8002226 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f000 f860 	bl	80022e4 <HAL_TIM_IC_CaptureCallback>
 8002224:	e005      	b.n	8002232 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f000 f852 	bl	80022d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	f000 f863 	bl	80022f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	f003 0301 	and.w	r3, r3, #1
 800223e:	2b00      	cmp	r3, #0
 8002240:	d00c      	beq.n	800225c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	f003 0301 	and.w	r3, r3, #1
 8002248:	2b00      	cmp	r3, #0
 800224a:	d007      	beq.n	800225c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f06f 0201 	mvn.w	r2, #1
 8002254:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f7fe fc20 	bl	8000a9c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002262:	2b00      	cmp	r3, #0
 8002264:	d00c      	beq.n	8002280 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800226c:	2b00      	cmp	r3, #0
 800226e:	d007      	beq.n	8002280 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002278:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f000 f906 	bl	800248c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002286:	2b00      	cmp	r3, #0
 8002288:	d00c      	beq.n	80022a4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002290:	2b00      	cmp	r3, #0
 8002292:	d007      	beq.n	80022a4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800229c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f000 f834 	bl	800230c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	f003 0320 	and.w	r3, r3, #32
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d00c      	beq.n	80022c8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	f003 0320 	and.w	r3, r3, #32
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d007      	beq.n	80022c8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f06f 0220 	mvn.w	r2, #32
 80022c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f000 f8d8 	bl	8002478 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80022c8:	bf00      	nop
 80022ca:	3710      	adds	r7, #16
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}

080022d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80022d8:	bf00      	nop
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr

080022e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80022ec:	bf00      	nop
 80022ee:	370c      	adds	r7, #12
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr

080022f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002300:	bf00      	nop
 8002302:	370c      	adds	r7, #12
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr

0800230c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002314:	bf00      	nop
 8002316:	370c      	adds	r7, #12
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr

08002320 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002320:	b480      	push	{r7}
 8002322:	b085      	sub	sp, #20
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	4a46      	ldr	r2, [pc, #280]	@ (800244c <TIM_Base_SetConfig+0x12c>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d013      	beq.n	8002360 <TIM_Base_SetConfig+0x40>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800233e:	d00f      	beq.n	8002360 <TIM_Base_SetConfig+0x40>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	4a43      	ldr	r2, [pc, #268]	@ (8002450 <TIM_Base_SetConfig+0x130>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d00b      	beq.n	8002360 <TIM_Base_SetConfig+0x40>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	4a42      	ldr	r2, [pc, #264]	@ (8002454 <TIM_Base_SetConfig+0x134>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d007      	beq.n	8002360 <TIM_Base_SetConfig+0x40>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	4a41      	ldr	r2, [pc, #260]	@ (8002458 <TIM_Base_SetConfig+0x138>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d003      	beq.n	8002360 <TIM_Base_SetConfig+0x40>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	4a40      	ldr	r2, [pc, #256]	@ (800245c <TIM_Base_SetConfig+0x13c>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d108      	bne.n	8002372 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002366:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	68fa      	ldr	r2, [r7, #12]
 800236e:	4313      	orrs	r3, r2
 8002370:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4a35      	ldr	r2, [pc, #212]	@ (800244c <TIM_Base_SetConfig+0x12c>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d02b      	beq.n	80023d2 <TIM_Base_SetConfig+0xb2>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002380:	d027      	beq.n	80023d2 <TIM_Base_SetConfig+0xb2>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4a32      	ldr	r2, [pc, #200]	@ (8002450 <TIM_Base_SetConfig+0x130>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d023      	beq.n	80023d2 <TIM_Base_SetConfig+0xb2>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4a31      	ldr	r2, [pc, #196]	@ (8002454 <TIM_Base_SetConfig+0x134>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d01f      	beq.n	80023d2 <TIM_Base_SetConfig+0xb2>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4a30      	ldr	r2, [pc, #192]	@ (8002458 <TIM_Base_SetConfig+0x138>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d01b      	beq.n	80023d2 <TIM_Base_SetConfig+0xb2>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4a2f      	ldr	r2, [pc, #188]	@ (800245c <TIM_Base_SetConfig+0x13c>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d017      	beq.n	80023d2 <TIM_Base_SetConfig+0xb2>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4a2e      	ldr	r2, [pc, #184]	@ (8002460 <TIM_Base_SetConfig+0x140>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d013      	beq.n	80023d2 <TIM_Base_SetConfig+0xb2>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4a2d      	ldr	r2, [pc, #180]	@ (8002464 <TIM_Base_SetConfig+0x144>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d00f      	beq.n	80023d2 <TIM_Base_SetConfig+0xb2>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4a2c      	ldr	r2, [pc, #176]	@ (8002468 <TIM_Base_SetConfig+0x148>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d00b      	beq.n	80023d2 <TIM_Base_SetConfig+0xb2>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a2b      	ldr	r2, [pc, #172]	@ (800246c <TIM_Base_SetConfig+0x14c>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d007      	beq.n	80023d2 <TIM_Base_SetConfig+0xb2>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a2a      	ldr	r2, [pc, #168]	@ (8002470 <TIM_Base_SetConfig+0x150>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d003      	beq.n	80023d2 <TIM_Base_SetConfig+0xb2>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a29      	ldr	r2, [pc, #164]	@ (8002474 <TIM_Base_SetConfig+0x154>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d108      	bne.n	80023e4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80023d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	68fa      	ldr	r2, [r7, #12]
 80023e0:	4313      	orrs	r3, r2
 80023e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	695b      	ldr	r3, [r3, #20]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	68fa      	ldr	r2, [r7, #12]
 80023f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	689a      	ldr	r2, [r3, #8]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	4a10      	ldr	r2, [pc, #64]	@ (800244c <TIM_Base_SetConfig+0x12c>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d003      	beq.n	8002418 <TIM_Base_SetConfig+0xf8>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	4a12      	ldr	r2, [pc, #72]	@ (800245c <TIM_Base_SetConfig+0x13c>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d103      	bne.n	8002420 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	691a      	ldr	r2, [r3, #16]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2201      	movs	r2, #1
 8002424:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	691b      	ldr	r3, [r3, #16]
 800242a:	f003 0301 	and.w	r3, r3, #1
 800242e:	2b01      	cmp	r3, #1
 8002430:	d105      	bne.n	800243e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	691b      	ldr	r3, [r3, #16]
 8002436:	f023 0201 	bic.w	r2, r3, #1
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	611a      	str	r2, [r3, #16]
  }
}
 800243e:	bf00      	nop
 8002440:	3714      	adds	r7, #20
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop
 800244c:	40010000 	.word	0x40010000
 8002450:	40000400 	.word	0x40000400
 8002454:	40000800 	.word	0x40000800
 8002458:	40000c00 	.word	0x40000c00
 800245c:	40010400 	.word	0x40010400
 8002460:	40014000 	.word	0x40014000
 8002464:	40014400 	.word	0x40014400
 8002468:	40014800 	.word	0x40014800
 800246c:	40001800 	.word	0x40001800
 8002470:	40001c00 	.word	0x40001c00
 8002474:	40002000 	.word	0x40002000

08002478 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002480:	bf00      	nop
 8002482:	370c      	adds	r7, #12
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr

0800248c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002494:	bf00      	nop
 8002496:	370c      	adds	r7, #12
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr

080024a0 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	f103 0208 	add.w	r2, r3, #8
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	f04f 32ff 	mov.w	r2, #4294967295
 80024b8:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	f103 0208 	add.w	r2, r3, #8
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	f103 0208 	add.w	r2, r3, #8
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2200      	movs	r2, #0
 80024d2:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80024d4:	bf00      	nop
 80024d6:	370c      	adds	r7, #12
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr

080024e0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2200      	movs	r2, #0
 80024ec:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80024ee:	bf00      	nop
 80024f0:	370c      	adds	r7, #12
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr

080024fa <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80024fa:	b480      	push	{r7}
 80024fc:	b085      	sub	sp, #20
 80024fe:	af00      	add	r7, sp, #0
 8002500:	6078      	str	r0, [r7, #4]
 8002502:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002510:	d103      	bne.n	800251a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	691b      	ldr	r3, [r3, #16]
 8002516:	60fb      	str	r3, [r7, #12]
 8002518:	e00c      	b.n	8002534 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	3308      	adds	r3, #8
 800251e:	60fb      	str	r3, [r7, #12]
 8002520:	e002      	b.n	8002528 <vListInsert+0x2e>
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	60fb      	str	r3, [r7, #12]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	68ba      	ldr	r2, [r7, #8]
 8002530:	429a      	cmp	r2, r3
 8002532:	d2f6      	bcs.n	8002522 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	685a      	ldr	r2, [r3, #4]
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	683a      	ldr	r2, [r7, #0]
 8002542:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	68fa      	ldr	r2, [r7, #12]
 8002548:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	683a      	ldr	r2, [r7, #0]
 800254e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	1c5a      	adds	r2, r3, #1
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	601a      	str	r2, [r3, #0]
}
 8002560:	bf00      	nop
 8002562:	3714      	adds	r7, #20
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr

0800256c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800256c:	b480      	push	{r7}
 800256e:	b085      	sub	sp, #20
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	691b      	ldr	r3, [r3, #16]
 8002578:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	6892      	ldr	r2, [r2, #8]
 8002582:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	6852      	ldr	r2, [r2, #4]
 800258c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	429a      	cmp	r2, r3
 8002596:	d103      	bne.n	80025a0 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	689a      	ldr	r2, [r3, #8]
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2200      	movs	r2, #0
 80025a4:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	1e5a      	subs	r2, r3, #1
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3714      	adds	r7, #20
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr

080025c0 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b086      	sub	sp, #24
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80025ca:	2301      	movs	r3, #1
 80025cc:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d10b      	bne.n	80025f0 <xQueueGenericReset+0x30>
        __asm volatile
 80025d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025dc:	f383 8811 	msr	BASEPRI, r3
 80025e0:	f3bf 8f6f 	isb	sy
 80025e4:	f3bf 8f4f 	dsb	sy
 80025e8:	60fb      	str	r3, [r7, #12]
    }
 80025ea:	bf00      	nop
 80025ec:	bf00      	nop
 80025ee:	e7fd      	b.n	80025ec <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d052      	beq.n	800269c <xQueueGenericReset+0xdc>
        ( pxQueue->uxLength >= 1U ) &&
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d04e      	beq.n	800269c <xQueueGenericReset+0xdc>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002606:	2100      	movs	r1, #0
 8002608:	fba3 2302 	umull	r2, r3, r3, r2
 800260c:	2b00      	cmp	r3, #0
 800260e:	d000      	beq.n	8002612 <xQueueGenericReset+0x52>
 8002610:	2101      	movs	r1, #1
 8002612:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8002614:	2b00      	cmp	r3, #0
 8002616:	d141      	bne.n	800269c <xQueueGenericReset+0xdc>
    {
        taskENTER_CRITICAL();
 8002618:	f001 ff30 	bl	800447c <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002624:	6939      	ldr	r1, [r7, #16]
 8002626:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002628:	fb01 f303 	mul.w	r3, r1, r3
 800262c:	441a      	add	r2, r3
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	2200      	movs	r2, #0
 8002636:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002648:	3b01      	subs	r3, #1
 800264a:	6939      	ldr	r1, [r7, #16]
 800264c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800264e:	fb01 f303 	mul.w	r3, r1, r3
 8002652:	441a      	add	r2, r3
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	22ff      	movs	r2, #255	@ 0xff
 800265c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	22ff      	movs	r2, #255	@ 0xff
 8002664:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d109      	bne.n	8002682 <xQueueGenericReset+0xc2>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	691b      	ldr	r3, [r3, #16]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d00f      	beq.n	8002696 <xQueueGenericReset+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	3310      	adds	r3, #16
 800267a:	4618      	mov	r0, r3
 800267c:	f001 f814 	bl	80036a8 <xTaskRemoveFromEventList>
 8002680:	e009      	b.n	8002696 <xQueueGenericReset+0xd6>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	3310      	adds	r3, #16
 8002686:	4618      	mov	r0, r3
 8002688:	f7ff ff0a 	bl	80024a0 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	3324      	adds	r3, #36	@ 0x24
 8002690:	4618      	mov	r0, r3
 8002692:	f7ff ff05 	bl	80024a0 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8002696:	f001 ff23 	bl	80044e0 <vPortExitCritical>
 800269a:	e001      	b.n	80026a0 <xQueueGenericReset+0xe0>
    }
    else
    {
        xReturn = pdFAIL;
 800269c:	2300      	movs	r3, #0
 800269e:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d10b      	bne.n	80026be <xQueueGenericReset+0xfe>
        __asm volatile
 80026a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026aa:	f383 8811 	msr	BASEPRI, r3
 80026ae:	f3bf 8f6f 	isb	sy
 80026b2:	f3bf 8f4f 	dsb	sy
 80026b6:	60bb      	str	r3, [r7, #8]
    }
 80026b8:	bf00      	nop
 80026ba:	bf00      	nop
 80026bc:	e7fd      	b.n	80026ba <xQueueGenericReset+0xfa>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 80026be:	697b      	ldr	r3, [r7, #20]
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3718      	adds	r7, #24
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}

080026c8 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b08a      	sub	sp, #40	@ 0x28
 80026cc:	af02      	add	r7, sp, #8
 80026ce:	60f8      	str	r0, [r7, #12]
 80026d0:	60b9      	str	r1, [r7, #8]
 80026d2:	4613      	mov	r3, r2
 80026d4:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80026d6:	2300      	movs	r3, #0
 80026d8:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d02e      	beq.n	800273e <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80026e0:	2100      	movs	r1, #0
 80026e2:	68ba      	ldr	r2, [r7, #8]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	fba3 2302 	umull	r2, r3, r3, r2
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d000      	beq.n	80026f0 <xQueueGenericCreate+0x28>
 80026ee:	2101      	movs	r1, #1
 80026f0:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d123      	bne.n	800273e <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	68ba      	ldr	r2, [r7, #8]
 80026fa:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80026fe:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8002702:	d81c      	bhi.n	800273e <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	68ba      	ldr	r2, [r7, #8]
 8002708:	fb02 f303 	mul.w	r3, r2, r3
 800270c:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	3350      	adds	r3, #80	@ 0x50
 8002712:	4618      	mov	r0, r3
 8002714:	f001 ffe4 	bl	80046e0 <pvPortMalloc>
 8002718:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d01d      	beq.n	800275c <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	3350      	adds	r3, #80	@ 0x50
 8002728:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800272a:	79fa      	ldrb	r2, [r7, #7]
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	9300      	str	r3, [sp, #0]
 8002730:	4613      	mov	r3, r2
 8002732:	697a      	ldr	r2, [r7, #20]
 8002734:	68b9      	ldr	r1, [r7, #8]
 8002736:	68f8      	ldr	r0, [r7, #12]
 8002738:	f000 f815 	bl	8002766 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 800273c:	e00e      	b.n	800275c <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d10b      	bne.n	800275c <xQueueGenericCreate+0x94>
        __asm volatile
 8002744:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002748:	f383 8811 	msr	BASEPRI, r3
 800274c:	f3bf 8f6f 	isb	sy
 8002750:	f3bf 8f4f 	dsb	sy
 8002754:	613b      	str	r3, [r7, #16]
    }
 8002756:	bf00      	nop
 8002758:	bf00      	nop
 800275a:	e7fd      	b.n	8002758 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800275c:	69fb      	ldr	r3, [r7, #28]
    }
 800275e:	4618      	mov	r0, r3
 8002760:	3720      	adds	r7, #32
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}

08002766 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002766:	b580      	push	{r7, lr}
 8002768:	b084      	sub	sp, #16
 800276a:	af00      	add	r7, sp, #0
 800276c:	60f8      	str	r0, [r7, #12]
 800276e:	60b9      	str	r1, [r7, #8]
 8002770:	607a      	str	r2, [r7, #4]
 8002772:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d103      	bne.n	8002782 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800277a:	69bb      	ldr	r3, [r7, #24]
 800277c:	69ba      	ldr	r2, [r7, #24]
 800277e:	601a      	str	r2, [r3, #0]
 8002780:	e002      	b.n	8002788 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002782:	69bb      	ldr	r3, [r7, #24]
 8002784:	687a      	ldr	r2, [r7, #4]
 8002786:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002788:	69bb      	ldr	r3, [r7, #24]
 800278a:	68fa      	ldr	r2, [r7, #12]
 800278c:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800278e:	69bb      	ldr	r3, [r7, #24]
 8002790:	68ba      	ldr	r2, [r7, #8]
 8002792:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002794:	2101      	movs	r1, #1
 8002796:	69b8      	ldr	r0, [r7, #24]
 8002798:	f7ff ff12 	bl	80025c0 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 800279c:	69bb      	ldr	r3, [r7, #24]
 800279e:	78fa      	ldrb	r2, [r7, #3]
 80027a0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    {
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 80027a4:	78fb      	ldrb	r3, [r7, #3]
 80027a6:	68ba      	ldr	r2, [r7, #8]
 80027a8:	68f9      	ldr	r1, [r7, #12]
 80027aa:	2073      	movs	r0, #115	@ 0x73
 80027ac:	f003 fd00 	bl	80061b0 <SEGGER_SYSVIEW_RecordU32x3>
}
 80027b0:	bf00      	nop
 80027b2:	3710      	adds	r7, #16
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}

080027b8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80027b8:	b590      	push	{r4, r7, lr}
 80027ba:	b08f      	sub	sp, #60	@ 0x3c
 80027bc:	af02      	add	r7, sp, #8
 80027be:	60f8      	str	r0, [r7, #12]
 80027c0:	60b9      	str	r1, [r7, #8]
 80027c2:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80027c4:	2300      	movs	r3, #0
 80027c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80027cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d10b      	bne.n	80027ea <xQueueReceive+0x32>
        __asm volatile
 80027d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027d6:	f383 8811 	msr	BASEPRI, r3
 80027da:	f3bf 8f6f 	isb	sy
 80027de:	f3bf 8f4f 	dsb	sy
 80027e2:	623b      	str	r3, [r7, #32]
    }
 80027e4:	bf00      	nop
 80027e6:	bf00      	nop
 80027e8:	e7fd      	b.n	80027e6 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d103      	bne.n	80027f8 <xQueueReceive+0x40>
 80027f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d101      	bne.n	80027fc <xQueueReceive+0x44>
 80027f8:	2301      	movs	r3, #1
 80027fa:	e000      	b.n	80027fe <xQueueReceive+0x46>
 80027fc:	2300      	movs	r3, #0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d10b      	bne.n	800281a <xQueueReceive+0x62>
        __asm volatile
 8002802:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002806:	f383 8811 	msr	BASEPRI, r3
 800280a:	f3bf 8f6f 	isb	sy
 800280e:	f3bf 8f4f 	dsb	sy
 8002812:	61fb      	str	r3, [r7, #28]
    }
 8002814:	bf00      	nop
 8002816:	bf00      	nop
 8002818:	e7fd      	b.n	8002816 <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800281a:	f001 f955 	bl	8003ac8 <xTaskGetSchedulerState>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d102      	bne.n	800282a <xQueueReceive+0x72>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d101      	bne.n	800282e <xQueueReceive+0x76>
 800282a:	2301      	movs	r3, #1
 800282c:	e000      	b.n	8002830 <xQueueReceive+0x78>
 800282e:	2300      	movs	r3, #0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d10b      	bne.n	800284c <xQueueReceive+0x94>
        __asm volatile
 8002834:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002838:	f383 8811 	msr	BASEPRI, r3
 800283c:	f3bf 8f6f 	isb	sy
 8002840:	f3bf 8f4f 	dsb	sy
 8002844:	61bb      	str	r3, [r7, #24]
    }
 8002846:	bf00      	nop
 8002848:	bf00      	nop
 800284a:	e7fd      	b.n	8002848 <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800284c:	f001 fe16 	bl	800447c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002850:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002852:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002854:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002858:	2b00      	cmp	r3, #0
 800285a:	d024      	beq.n	80028a6 <xQueueReceive+0xee>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800285c:	68b9      	ldr	r1, [r7, #8]
 800285e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002860:	f000 f8b2 	bl	80029c8 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8002864:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002866:	4618      	mov	r0, r3
 8002868:	f004 f9d0 	bl	8006c0c <SEGGER_SYSVIEW_ShrinkId>
 800286c:	4604      	mov	r4, r0
 800286e:	2000      	movs	r0, #0
 8002870:	f004 f9cc 	bl	8006c0c <SEGGER_SYSVIEW_ShrinkId>
 8002874:	4602      	mov	r2, r0
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2101      	movs	r1, #1
 800287a:	9100      	str	r1, [sp, #0]
 800287c:	4621      	mov	r1, r4
 800287e:	205c      	movs	r0, #92	@ 0x5c
 8002880:	f003 fd0c 	bl	800629c <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002886:	1e5a      	subs	r2, r3, #1
 8002888:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800288a:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800288c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800288e:	691b      	ldr	r3, [r3, #16]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d004      	beq.n	800289e <xQueueReceive+0xe6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002894:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002896:	3310      	adds	r3, #16
 8002898:	4618      	mov	r0, r3
 800289a:	f000 ff05 	bl	80036a8 <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800289e:	f001 fe1f 	bl	80044e0 <vPortExitCritical>
                return pdPASS;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e08a      	b.n	80029bc <xQueueReceive+0x204>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d113      	bne.n	80028d4 <xQueueReceive+0x11c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80028ac:	f001 fe18 	bl	80044e0 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 80028b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028b2:	4618      	mov	r0, r3
 80028b4:	f004 f9aa 	bl	8006c0c <SEGGER_SYSVIEW_ShrinkId>
 80028b8:	4604      	mov	r4, r0
 80028ba:	2000      	movs	r0, #0
 80028bc:	f004 f9a6 	bl	8006c0c <SEGGER_SYSVIEW_ShrinkId>
 80028c0:	4602      	mov	r2, r0
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2101      	movs	r1, #1
 80028c6:	9100      	str	r1, [sp, #0]
 80028c8:	4621      	mov	r1, r4
 80028ca:	205c      	movs	r0, #92	@ 0x5c
 80028cc:	f003 fce6 	bl	800629c <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 80028d0:	2300      	movs	r3, #0
 80028d2:	e073      	b.n	80029bc <xQueueReceive+0x204>
                }
                else if( xEntryTimeSet == pdFALSE )
 80028d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d106      	bne.n	80028e8 <xQueueReceive+0x130>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80028da:	f107 0310 	add.w	r3, r7, #16
 80028de:	4618      	mov	r0, r3
 80028e0:	f000 ffbc 	bl	800385c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80028e4:	2301      	movs	r3, #1
 80028e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80028e8:	f001 fdfa 	bl	80044e0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80028ec:	f000 fbe8 	bl	80030c0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80028f0:	f001 fdc4 	bl	800447c <vPortEnterCritical>
 80028f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028f6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80028fa:	b25b      	sxtb	r3, r3
 80028fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002900:	d103      	bne.n	800290a <xQueueReceive+0x152>
 8002902:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002904:	2200      	movs	r2, #0
 8002906:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800290a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800290c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002910:	b25b      	sxtb	r3, r3
 8002912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002916:	d103      	bne.n	8002920 <xQueueReceive+0x168>
 8002918:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800291a:	2200      	movs	r2, #0
 800291c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002920:	f001 fdde 	bl	80044e0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002924:	1d3a      	adds	r2, r7, #4
 8002926:	f107 0310 	add.w	r3, r7, #16
 800292a:	4611      	mov	r1, r2
 800292c:	4618      	mov	r0, r3
 800292e:	f000 ffab 	bl	8003888 <xTaskCheckForTimeOut>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d124      	bne.n	8002982 <xQueueReceive+0x1ca>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002938:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800293a:	f000 f8bd 	bl	8002ab8 <prvIsQueueEmpty>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d018      	beq.n	8002976 <xQueueReceive+0x1be>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002944:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002946:	3324      	adds	r3, #36	@ 0x24
 8002948:	687a      	ldr	r2, [r7, #4]
 800294a:	4611      	mov	r1, r2
 800294c:	4618      	mov	r0, r3
 800294e:	f000 fe3b 	bl	80035c8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002952:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002954:	f000 f85e 	bl	8002a14 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002958:	f000 fbc0 	bl	80030dc <xTaskResumeAll>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	f47f af74 	bne.w	800284c <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 8002964:	4b17      	ldr	r3, [pc, #92]	@ (80029c4 <xQueueReceive+0x20c>)
 8002966:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800296a:	601a      	str	r2, [r3, #0]
 800296c:	f3bf 8f4f 	dsb	sy
 8002970:	f3bf 8f6f 	isb	sy
 8002974:	e76a      	b.n	800284c <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002976:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002978:	f000 f84c 	bl	8002a14 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800297c:	f000 fbae 	bl	80030dc <xTaskResumeAll>
 8002980:	e764      	b.n	800284c <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002982:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002984:	f000 f846 	bl	8002a14 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002988:	f000 fba8 	bl	80030dc <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800298c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800298e:	f000 f893 	bl	8002ab8 <prvIsQueueEmpty>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	f43f af59 	beq.w	800284c <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 800299a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800299c:	4618      	mov	r0, r3
 800299e:	f004 f935 	bl	8006c0c <SEGGER_SYSVIEW_ShrinkId>
 80029a2:	4604      	mov	r4, r0
 80029a4:	2000      	movs	r0, #0
 80029a6:	f004 f931 	bl	8006c0c <SEGGER_SYSVIEW_ShrinkId>
 80029aa:	4602      	mov	r2, r0
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2101      	movs	r1, #1
 80029b0:	9100      	str	r1, [sp, #0]
 80029b2:	4621      	mov	r1, r4
 80029b4:	205c      	movs	r0, #92	@ 0x5c
 80029b6:	f003 fc71 	bl	800629c <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 80029ba:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3734      	adds	r7, #52	@ 0x34
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd90      	pop	{r4, r7, pc}
 80029c4:	e000ed04 	.word	0xe000ed04

080029c8 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d018      	beq.n	8002a0c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	68da      	ldr	r2, [r3, #12]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029e2:	441a      	add	r2, r3
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	68da      	ldr	r2, [r3, #12]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d303      	bcc.n	80029fc <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	68d9      	ldr	r1, [r3, #12]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a04:	461a      	mov	r2, r3
 8002a06:	6838      	ldr	r0, [r7, #0]
 8002a08:	f004 fc8c 	bl	8007324 <memcpy>
    }
}
 8002a0c:	bf00      	nop
 8002a0e:	3708      	adds	r7, #8
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}

08002a14 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002a1c:	f001 fd2e 	bl	800447c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002a26:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002a28:	e011      	b.n	8002a4e <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d012      	beq.n	8002a58 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	3324      	adds	r3, #36	@ 0x24
 8002a36:	4618      	mov	r0, r3
 8002a38:	f000 fe36 	bl	80036a8 <xTaskRemoveFromEventList>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d001      	beq.n	8002a46 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8002a42:	f000 ff89 	bl	8003958 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002a46:	7bfb      	ldrb	r3, [r7, #15]
 8002a48:	3b01      	subs	r3, #1
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002a4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	dce9      	bgt.n	8002a2a <prvUnlockQueue+0x16>
 8002a56:	e000      	b.n	8002a5a <prvUnlockQueue+0x46>
                    break;
 8002a58:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	22ff      	movs	r2, #255	@ 0xff
 8002a5e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8002a62:	f001 fd3d 	bl	80044e0 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002a66:	f001 fd09 	bl	800447c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002a70:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002a72:	e011      	b.n	8002a98 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	691b      	ldr	r3, [r3, #16]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d012      	beq.n	8002aa2 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	3310      	adds	r3, #16
 8002a80:	4618      	mov	r0, r3
 8002a82:	f000 fe11 	bl	80036a8 <xTaskRemoveFromEventList>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d001      	beq.n	8002a90 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002a8c:	f000 ff64 	bl	8003958 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002a90:	7bbb      	ldrb	r3, [r7, #14]
 8002a92:	3b01      	subs	r3, #1
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002a98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	dce9      	bgt.n	8002a74 <prvUnlockQueue+0x60>
 8002aa0:	e000      	b.n	8002aa4 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002aa2:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	22ff      	movs	r2, #255	@ 0xff
 8002aa8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8002aac:	f001 fd18 	bl	80044e0 <vPortExitCritical>
}
 8002ab0:	bf00      	nop
 8002ab2:	3710      	adds	r7, #16
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}

08002ab8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002ac0:	f001 fcdc 	bl	800447c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d102      	bne.n	8002ad2 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002acc:	2301      	movs	r3, #1
 8002ace:	60fb      	str	r3, [r7, #12]
 8002ad0:	e001      	b.n	8002ad6 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002ad6:	f001 fd03 	bl	80044e0 <vPortExitCritical>

    return xReturn;
 8002ada:	68fb      	ldr	r3, [r7, #12]
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3710      	adds	r7, #16
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b086      	sub	sp, #24
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
 8002aec:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8002aee:	2300      	movs	r3, #0
 8002af0:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d10b      	bne.n	8002b10 <vQueueAddToRegistry+0x2c>
        __asm volatile
 8002af8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002afc:	f383 8811 	msr	BASEPRI, r3
 8002b00:	f3bf 8f6f 	isb	sy
 8002b04:	f3bf 8f4f 	dsb	sy
 8002b08:	60fb      	str	r3, [r7, #12]
    }
 8002b0a:	bf00      	nop
 8002b0c:	bf00      	nop
 8002b0e:	e7fd      	b.n	8002b0c <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d024      	beq.n	8002b60 <vQueueAddToRegistry+0x7c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002b16:	2300      	movs	r3, #0
 8002b18:	617b      	str	r3, [r7, #20]
 8002b1a:	e01e      	b.n	8002b5a <vQueueAddToRegistry+0x76>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8002b1c:	4a1c      	ldr	r2, [pc, #112]	@ (8002b90 <vQueueAddToRegistry+0xac>)
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	00db      	lsls	r3, r3, #3
 8002b22:	4413      	add	r3, r2
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d105      	bne.n	8002b38 <vQueueAddToRegistry+0x54>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	00db      	lsls	r3, r3, #3
 8002b30:	4a17      	ldr	r2, [pc, #92]	@ (8002b90 <vQueueAddToRegistry+0xac>)
 8002b32:	4413      	add	r3, r2
 8002b34:	613b      	str	r3, [r7, #16]
                    break;
 8002b36:	e013      	b.n	8002b60 <vQueueAddToRegistry+0x7c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d10a      	bne.n	8002b54 <vQueueAddToRegistry+0x70>
 8002b3e:	4a14      	ldr	r2, [pc, #80]	@ (8002b90 <vQueueAddToRegistry+0xac>)
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d104      	bne.n	8002b54 <vQueueAddToRegistry+0x70>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	00db      	lsls	r3, r3, #3
 8002b4e:	4a10      	ldr	r2, [pc, #64]	@ (8002b90 <vQueueAddToRegistry+0xac>)
 8002b50:	4413      	add	r3, r2
 8002b52:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	3301      	adds	r3, #1
 8002b58:	617b      	str	r3, [r7, #20]
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	2b07      	cmp	r3, #7
 8002b5e:	d9dd      	bls.n	8002b1c <vQueueAddToRegistry+0x38>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d00f      	beq.n	8002b86 <vQueueAddToRegistry+0xa2>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	683a      	ldr	r2, [r7, #0]
 8002b6a:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4618      	mov	r0, r3
 8002b76:	f004 f849 	bl	8006c0c <SEGGER_SYSVIEW_ShrinkId>
 8002b7a:	4601      	mov	r1, r0
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	461a      	mov	r2, r3
 8002b80:	2071      	movs	r0, #113	@ 0x71
 8002b82:	f003 fabb 	bl	80060fc <SEGGER_SYSVIEW_RecordU32x2>
        }
    }
 8002b86:	bf00      	nop
 8002b88:	3718      	adds	r7, #24
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	200000d4 	.word	0x200000d4

08002b94 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b086      	sub	sp, #24
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	60f8      	str	r0, [r7, #12]
 8002b9c:	60b9      	str	r1, [r7, #8]
 8002b9e:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002ba4:	f001 fc6a 	bl	800447c <vPortEnterCritical>
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002bae:	b25b      	sxtb	r3, r3
 8002bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bb4:	d103      	bne.n	8002bbe <vQueueWaitForMessageRestricted+0x2a>
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002bc4:	b25b      	sxtb	r3, r3
 8002bc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bca:	d103      	bne.n	8002bd4 <vQueueWaitForMessageRestricted+0x40>
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002bd4:	f001 fc84 	bl	80044e0 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d106      	bne.n	8002bee <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	3324      	adds	r3, #36	@ 0x24
 8002be4:	687a      	ldr	r2, [r7, #4]
 8002be6:	68b9      	ldr	r1, [r7, #8]
 8002be8:	4618      	mov	r0, r3
 8002bea:	f000 fd13 	bl	8003614 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002bee:	6978      	ldr	r0, [r7, #20]
 8002bf0:	f7ff ff10 	bl	8002a14 <prvUnlockQueue>
    }
 8002bf4:	bf00      	nop
 8002bf6:	3718      	adds	r7, #24
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}

08002bfc <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b08c      	sub	sp, #48	@ 0x30
 8002c00:	af04      	add	r7, sp, #16
 8002c02:	60f8      	str	r0, [r7, #12]
 8002c04:	60b9      	str	r1, [r7, #8]
 8002c06:	603b      	str	r3, [r7, #0]
 8002c08:	4613      	mov	r3, r2
 8002c0a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002c0c:	88fb      	ldrh	r3, [r7, #6]
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	4618      	mov	r0, r3
 8002c12:	f001 fd65 	bl	80046e0 <pvPortMalloc>
 8002c16:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d013      	beq.n	8002c46 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002c1e:	2058      	movs	r0, #88	@ 0x58
 8002c20:	f001 fd5e 	bl	80046e0 <pvPortMalloc>
 8002c24:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d008      	beq.n	8002c3e <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8002c2c:	2258      	movs	r2, #88	@ 0x58
 8002c2e:	2100      	movs	r1, #0
 8002c30:	69f8      	ldr	r0, [r7, #28]
 8002c32:	f004 fb49 	bl	80072c8 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	697a      	ldr	r2, [r7, #20]
 8002c3a:	631a      	str	r2, [r3, #48]	@ 0x30
 8002c3c:	e005      	b.n	8002c4a <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8002c3e:	6978      	ldr	r0, [r7, #20]
 8002c40:	f001 fe0a 	bl	8004858 <vPortFree>
 8002c44:	e001      	b.n	8002c4a <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8002c46:	2300      	movs	r3, #0
 8002c48:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d013      	beq.n	8002c78 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002c50:	88fa      	ldrh	r2, [r7, #6]
 8002c52:	2300      	movs	r3, #0
 8002c54:	9303      	str	r3, [sp, #12]
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	9302      	str	r3, [sp, #8]
 8002c5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c5c:	9301      	str	r3, [sp, #4]
 8002c5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c60:	9300      	str	r3, [sp, #0]
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	68b9      	ldr	r1, [r7, #8]
 8002c66:	68f8      	ldr	r0, [r7, #12]
 8002c68:	f000 f80e 	bl	8002c88 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002c6c:	69f8      	ldr	r0, [r7, #28]
 8002c6e:	f000 f89b 	bl	8002da8 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002c72:	2301      	movs	r3, #1
 8002c74:	61bb      	str	r3, [r7, #24]
 8002c76:	e002      	b.n	8002c7e <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002c78:	f04f 33ff 	mov.w	r3, #4294967295
 8002c7c:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002c7e:	69bb      	ldr	r3, [r7, #24]
    }
 8002c80:	4618      	mov	r0, r3
 8002c82:	3720      	adds	r7, #32
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}

08002c88 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b088      	sub	sp, #32
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	60f8      	str	r0, [r7, #12]
 8002c90:	60b9      	str	r1, [r7, #8]
 8002c92:	607a      	str	r2, [r7, #4]
 8002c94:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002c96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c98:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	21a5      	movs	r1, #165	@ 0xa5
 8002ca2:	f004 fb11 	bl	80072c8 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002ca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ca8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002cb0:	3b01      	subs	r3, #1
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	4413      	add	r3, r2
 8002cb6:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002cb8:	69bb      	ldr	r3, [r7, #24]
 8002cba:	f023 0307 	bic.w	r3, r3, #7
 8002cbe:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	f003 0307 	and.w	r3, r3, #7
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d00b      	beq.n	8002ce2 <prvInitialiseNewTask+0x5a>
        __asm volatile
 8002cca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cce:	f383 8811 	msr	BASEPRI, r3
 8002cd2:	f3bf 8f6f 	isb	sy
 8002cd6:	f3bf 8f4f 	dsb	sy
 8002cda:	617b      	str	r3, [r7, #20]
    }
 8002cdc:	bf00      	nop
 8002cde:	bf00      	nop
 8002ce0:	e7fd      	b.n	8002cde <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d01e      	beq.n	8002d26 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002ce8:	2300      	movs	r3, #0
 8002cea:	61fb      	str	r3, [r7, #28]
 8002cec:	e012      	b.n	8002d14 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002cee:	68ba      	ldr	r2, [r7, #8]
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	4413      	add	r3, r2
 8002cf4:	7819      	ldrb	r1, [r3, #0]
 8002cf6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	4413      	add	r3, r2
 8002cfc:	3334      	adds	r3, #52	@ 0x34
 8002cfe:	460a      	mov	r2, r1
 8002d00:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002d02:	68ba      	ldr	r2, [r7, #8]
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	4413      	add	r3, r2
 8002d08:	781b      	ldrb	r3, [r3, #0]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d006      	beq.n	8002d1c <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	3301      	adds	r3, #1
 8002d12:	61fb      	str	r3, [r7, #28]
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	2b09      	cmp	r3, #9
 8002d18:	d9e9      	bls.n	8002cee <prvInitialiseNewTask+0x66>
 8002d1a:	e000      	b.n	8002d1e <prvInitialiseNewTask+0x96>
            {
                break;
 8002d1c:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002d1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d20:	2200      	movs	r2, #0
 8002d22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002d26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d28:	2b04      	cmp	r3, #4
 8002d2a:	d90b      	bls.n	8002d44 <prvInitialiseNewTask+0xbc>
        __asm volatile
 8002d2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d30:	f383 8811 	msr	BASEPRI, r3
 8002d34:	f3bf 8f6f 	isb	sy
 8002d38:	f3bf 8f4f 	dsb	sy
 8002d3c:	613b      	str	r3, [r7, #16]
    }
 8002d3e:	bf00      	nop
 8002d40:	bf00      	nop
 8002d42:	e7fd      	b.n	8002d40 <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002d44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d46:	2b04      	cmp	r3, #4
 8002d48:	d901      	bls.n	8002d4e <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002d4a:	2304      	movs	r3, #4
 8002d4c:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002d4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d50:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002d52:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8002d54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d56:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002d58:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002d5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d5c:	3304      	adds	r3, #4
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f7ff fbbe 	bl	80024e0 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002d64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d66:	3318      	adds	r3, #24
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f7ff fbb9 	bl	80024e0 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002d6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d70:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002d72:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d76:	f1c3 0205 	rsb	r2, r3, #5
 8002d7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d7c:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002d82:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002d84:	683a      	ldr	r2, [r7, #0]
 8002d86:	68f9      	ldr	r1, [r7, #12]
 8002d88:	69b8      	ldr	r0, [r7, #24]
 8002d8a:	f001 f9c7 	bl	800411c <pxPortInitialiseStack>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d92:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002d94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d002      	beq.n	8002da0 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002d9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002d9e:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002da0:	bf00      	nop
 8002da2:	3720      	adds	r7, #32
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}

08002da8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002da8:	b5b0      	push	{r4, r5, r7, lr}
 8002daa:	b086      	sub	sp, #24
 8002dac:	af02      	add	r7, sp, #8
 8002dae:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002db0:	f001 fb64 	bl	800447c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002db4:	4b49      	ldr	r3, [pc, #292]	@ (8002edc <prvAddNewTaskToReadyList+0x134>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	3301      	adds	r3, #1
 8002dba:	4a48      	ldr	r2, [pc, #288]	@ (8002edc <prvAddNewTaskToReadyList+0x134>)
 8002dbc:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002dbe:	4b48      	ldr	r3, [pc, #288]	@ (8002ee0 <prvAddNewTaskToReadyList+0x138>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d109      	bne.n	8002dda <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002dc6:	4a46      	ldr	r2, [pc, #280]	@ (8002ee0 <prvAddNewTaskToReadyList+0x138>)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002dcc:	4b43      	ldr	r3, [pc, #268]	@ (8002edc <prvAddNewTaskToReadyList+0x134>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d110      	bne.n	8002df6 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002dd4:	f000 fdde 	bl	8003994 <prvInitialiseTaskLists>
 8002dd8:	e00d      	b.n	8002df6 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002dda:	4b42      	ldr	r3, [pc, #264]	@ (8002ee4 <prvAddNewTaskToReadyList+0x13c>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d109      	bne.n	8002df6 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002de2:	4b3f      	ldr	r3, [pc, #252]	@ (8002ee0 <prvAddNewTaskToReadyList+0x138>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d802      	bhi.n	8002df6 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002df0:	4a3b      	ldr	r2, [pc, #236]	@ (8002ee0 <prvAddNewTaskToReadyList+0x138>)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002df6:	4b3c      	ldr	r3, [pc, #240]	@ (8002ee8 <prvAddNewTaskToReadyList+0x140>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	3301      	adds	r3, #1
 8002dfc:	4a3a      	ldr	r2, [pc, #232]	@ (8002ee8 <prvAddNewTaskToReadyList+0x140>)
 8002dfe:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002e00:	4b39      	ldr	r3, [pc, #228]	@ (8002ee8 <prvAddNewTaskToReadyList+0x140>)
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d016      	beq.n	8002e3c <prvAddNewTaskToReadyList+0x94>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4618      	mov	r0, r3
 8002e12:	f003 fe35 	bl	8006a80 <SEGGER_SYSVIEW_OnTaskCreate>
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e26:	461d      	mov	r5, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	461c      	mov	r4, r3
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e32:	1ae3      	subs	r3, r4, r3
 8002e34:	9300      	str	r3, [sp, #0]
 8002e36:	462b      	mov	r3, r5
 8002e38:	f001 fed2 	bl	8004be0 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f003 fea2 	bl	8006b88 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e48:	2201      	movs	r2, #1
 8002e4a:	409a      	lsls	r2, r3
 8002e4c:	4b27      	ldr	r3, [pc, #156]	@ (8002eec <prvAddNewTaskToReadyList+0x144>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4313      	orrs	r3, r2
 8002e52:	4a26      	ldr	r2, [pc, #152]	@ (8002eec <prvAddNewTaskToReadyList+0x144>)
 8002e54:	6013      	str	r3, [r2, #0]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e5a:	4925      	ldr	r1, [pc, #148]	@ (8002ef0 <prvAddNewTaskToReadyList+0x148>)
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	4413      	add	r3, r2
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	440b      	add	r3, r1
 8002e66:	3304      	adds	r3, #4
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	60fb      	str	r3, [r7, #12]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	68fa      	ldr	r2, [r7, #12]
 8002e70:	609a      	str	r2, [r3, #8]
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	689a      	ldr	r2, [r3, #8]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	60da      	str	r2, [r3, #12]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	3204      	adds	r2, #4
 8002e82:	605a      	str	r2, [r3, #4]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	1d1a      	adds	r2, r3, #4
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	609a      	str	r2, [r3, #8]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e90:	4613      	mov	r3, r2
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	4413      	add	r3, r2
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	4a15      	ldr	r2, [pc, #84]	@ (8002ef0 <prvAddNewTaskToReadyList+0x148>)
 8002e9a:	441a      	add	r2, r3
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	615a      	str	r2, [r3, #20]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ea4:	4912      	ldr	r1, [pc, #72]	@ (8002ef0 <prvAddNewTaskToReadyList+0x148>)
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	4413      	add	r3, r2
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	440b      	add	r3, r1
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	1c59      	adds	r1, r3, #1
 8002eb4:	480e      	ldr	r0, [pc, #56]	@ (8002ef0 <prvAddNewTaskToReadyList+0x148>)
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	009b      	lsls	r3, r3, #2
 8002eba:	4413      	add	r3, r2
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	4403      	add	r3, r0
 8002ec0:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002ec2:	f001 fb0d 	bl	80044e0 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002ec6:	4b07      	ldr	r3, [pc, #28]	@ (8002ee4 <prvAddNewTaskToReadyList+0x13c>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d001      	beq.n	8002ed2 <prvAddNewTaskToReadyList+0x12a>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002ece:	4b04      	ldr	r3, [pc, #16]	@ (8002ee0 <prvAddNewTaskToReadyList+0x138>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002ed2:	bf00      	nop
 8002ed4:	3710      	adds	r7, #16
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bdb0      	pop	{r4, r5, r7, pc}
 8002eda:	bf00      	nop
 8002edc:	200001ec 	.word	0x200001ec
 8002ee0:	20000114 	.word	0x20000114
 8002ee4:	200001f8 	.word	0x200001f8
 8002ee8:	20000208 	.word	0x20000208
 8002eec:	200001f4 	.word	0x200001f4
 8002ef0:	20000118 	.word	0x20000118

08002ef4 <xTaskDelayUntil>:

#if ( INCLUDE_xTaskDelayUntil == 1 )

    BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                                const TickType_t xTimeIncrement )
    {
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b08a      	sub	sp, #40	@ 0x28
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	6039      	str	r1, [r7, #0]
        TickType_t xTimeToWake;
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8002efe:	2300      	movs	r3, #0
 8002f00:	627b      	str	r3, [r7, #36]	@ 0x24

        configASSERT( pxPreviousWakeTime );
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d10b      	bne.n	8002f20 <xTaskDelayUntil+0x2c>
        __asm volatile
 8002f08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f0c:	f383 8811 	msr	BASEPRI, r3
 8002f10:	f3bf 8f6f 	isb	sy
 8002f14:	f3bf 8f4f 	dsb	sy
 8002f18:	617b      	str	r3, [r7, #20]
    }
 8002f1a:	bf00      	nop
 8002f1c:	bf00      	nop
 8002f1e:	e7fd      	b.n	8002f1c <xTaskDelayUntil+0x28>
        configASSERT( ( xTimeIncrement > 0U ) );
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d10b      	bne.n	8002f3e <xTaskDelayUntil+0x4a>
        __asm volatile
 8002f26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f2a:	f383 8811 	msr	BASEPRI, r3
 8002f2e:	f3bf 8f6f 	isb	sy
 8002f32:	f3bf 8f4f 	dsb	sy
 8002f36:	613b      	str	r3, [r7, #16]
    }
 8002f38:	bf00      	nop
 8002f3a:	bf00      	nop
 8002f3c:	e7fd      	b.n	8002f3a <xTaskDelayUntil+0x46>
        configASSERT( uxSchedulerSuspended == 0 );
 8002f3e:	4b2c      	ldr	r3, [pc, #176]	@ (8002ff0 <xTaskDelayUntil+0xfc>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d00b      	beq.n	8002f5e <xTaskDelayUntil+0x6a>
        __asm volatile
 8002f46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f4a:	f383 8811 	msr	BASEPRI, r3
 8002f4e:	f3bf 8f6f 	isb	sy
 8002f52:	f3bf 8f4f 	dsb	sy
 8002f56:	60fb      	str	r3, [r7, #12]
    }
 8002f58:	bf00      	nop
 8002f5a:	bf00      	nop
 8002f5c:	e7fd      	b.n	8002f5a <xTaskDelayUntil+0x66>

        vTaskSuspendAll();
 8002f5e:	f000 f8af 	bl	80030c0 <vTaskSuspendAll>
        {
            /* Minor optimisation.  The tick count cannot change in this
             * block. */
            const TickType_t xConstTickCount = xTickCount;
 8002f62:	4b24      	ldr	r3, [pc, #144]	@ (8002ff4 <xTaskDelayUntil+0x100>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	623b      	str	r3, [r7, #32]

            /* Generate the tick time at which the task wants to wake. */
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	683a      	ldr	r2, [r7, #0]
 8002f6e:	4413      	add	r3, r2
 8002f70:	61fb      	str	r3, [r7, #28]

            if( xConstTickCount < *pxPreviousWakeTime )
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	6a3a      	ldr	r2, [r7, #32]
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d20b      	bcs.n	8002f94 <xTaskDelayUntil+0xa0>
                /* The tick count has overflowed since this function was
                 * lasted called.  In this case the only time we should ever
                 * actually delay is if the wake time has also  overflowed,
                 * and the wake time is greater than the tick time.  When this
                 * is the case it is as if neither time had overflowed. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	69fa      	ldr	r2, [r7, #28]
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d211      	bcs.n	8002faa <xTaskDelayUntil+0xb6>
 8002f86:	69fa      	ldr	r2, [r7, #28]
 8002f88:	6a3b      	ldr	r3, [r7, #32]
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d90d      	bls.n	8002faa <xTaskDelayUntil+0xb6>
                {
                    xShouldDelay = pdTRUE;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f92:	e00a      	b.n	8002faa <xTaskDelayUntil+0xb6>
            else
            {
                /* The tick time has not overflowed.  In this case we will
                 * delay if either the wake time has overflowed, and/or the
                 * tick time is less than the wake time. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	69fa      	ldr	r2, [r7, #28]
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d303      	bcc.n	8002fa6 <xTaskDelayUntil+0xb2>
 8002f9e:	69fa      	ldr	r2, [r7, #28]
 8002fa0:	6a3b      	ldr	r3, [r7, #32]
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d901      	bls.n	8002faa <xTaskDelayUntil+0xb6>
                {
                    xShouldDelay = pdTRUE;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	627b      	str	r3, [r7, #36]	@ 0x24
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            /* Update the wake time ready for the next call. */
            *pxPreviousWakeTime = xTimeToWake;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	69fa      	ldr	r2, [r7, #28]
 8002fae:	601a      	str	r2, [r3, #0]

            if( xShouldDelay != pdFALSE )
 8002fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d009      	beq.n	8002fca <xTaskDelayUntil+0xd6>
            {
                traceTASK_DELAY_UNTIL( xTimeToWake );
 8002fb6:	2024      	movs	r0, #36	@ 0x24
 8002fb8:	f003 f846 	bl	8006048 <SEGGER_SYSVIEW_RecordVoid>

                /* prvAddCurrentTaskToDelayedList() needs the block time, not
                 * the time to wake, so subtract the current tick count. */
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8002fbc:	69fa      	ldr	r2, [r7, #28]
 8002fbe:	6a3b      	ldr	r3, [r7, #32]
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	2100      	movs	r1, #0
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f000 fd9d 	bl	8003b04 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 8002fca:	f000 f887 	bl	80030dc <xTaskResumeAll>
 8002fce:	61b8      	str	r0, [r7, #24]

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8002fd0:	69bb      	ldr	r3, [r7, #24]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d107      	bne.n	8002fe6 <xTaskDelayUntil+0xf2>
        {
            portYIELD_WITHIN_API();
 8002fd6:	4b08      	ldr	r3, [pc, #32]	@ (8002ff8 <xTaskDelayUntil+0x104>)
 8002fd8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002fdc:	601a      	str	r2, [r3, #0]
 8002fde:	f3bf 8f4f 	dsb	sy
 8002fe2:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xShouldDelay;
 8002fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3728      	adds	r7, #40	@ 0x28
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	20000214 	.word	0x20000214
 8002ff4:	200001f0 	.word	0x200001f0
 8002ff8:	e000ed04 	.word	0xe000ed04

08002ffc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b086      	sub	sp, #24
 8003000:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8003002:	4b27      	ldr	r3, [pc, #156]	@ (80030a0 <vTaskStartScheduler+0xa4>)
 8003004:	9301      	str	r3, [sp, #4]
 8003006:	2300      	movs	r3, #0
 8003008:	9300      	str	r3, [sp, #0]
 800300a:	2300      	movs	r3, #0
 800300c:	2282      	movs	r2, #130	@ 0x82
 800300e:	4925      	ldr	r1, [pc, #148]	@ (80030a4 <vTaskStartScheduler+0xa8>)
 8003010:	4825      	ldr	r0, [pc, #148]	@ (80030a8 <vTaskStartScheduler+0xac>)
 8003012:	f7ff fdf3 	bl	8002bfc <xTaskCreate>
 8003016:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2b01      	cmp	r3, #1
 800301c:	d102      	bne.n	8003024 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 800301e:	f000 fdf1 	bl	8003c04 <xTimerCreateTimerTask>
 8003022:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2b01      	cmp	r3, #1
 8003028:	d124      	bne.n	8003074 <vTaskStartScheduler+0x78>
        __asm volatile
 800302a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800302e:	f383 8811 	msr	BASEPRI, r3
 8003032:	f3bf 8f6f 	isb	sy
 8003036:	f3bf 8f4f 	dsb	sy
 800303a:	60bb      	str	r3, [r7, #8]
    }
 800303c:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 800303e:	4b1b      	ldr	r3, [pc, #108]	@ (80030ac <vTaskStartScheduler+0xb0>)
 8003040:	f04f 32ff 	mov.w	r2, #4294967295
 8003044:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003046:	4b1a      	ldr	r3, [pc, #104]	@ (80030b0 <vTaskStartScheduler+0xb4>)
 8003048:	2201      	movs	r2, #1
 800304a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800304c:	4b19      	ldr	r3, [pc, #100]	@ (80030b4 <vTaskStartScheduler+0xb8>)
 800304e:	2200      	movs	r2, #0
 8003050:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8003052:	4b19      	ldr	r3, [pc, #100]	@ (80030b8 <vTaskStartScheduler+0xbc>)
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	4b12      	ldr	r3, [pc, #72]	@ (80030a0 <vTaskStartScheduler+0xa4>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	429a      	cmp	r2, r3
 800305c:	d102      	bne.n	8003064 <vTaskStartScheduler+0x68>
 800305e:	f003 fcf3 	bl	8006a48 <SEGGER_SYSVIEW_OnIdle>
 8003062:	e004      	b.n	800306e <vTaskStartScheduler+0x72>
 8003064:	4b14      	ldr	r3, [pc, #80]	@ (80030b8 <vTaskStartScheduler+0xbc>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4618      	mov	r0, r3
 800306a:	f003 fd4b 	bl	8006b04 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 800306e:	f001 f8e1 	bl	8004234 <xPortStartScheduler>
 8003072:	e00f      	b.n	8003094 <vTaskStartScheduler+0x98>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f1b3 3fff 	cmp.w	r3, #4294967295
 800307a:	d10b      	bne.n	8003094 <vTaskStartScheduler+0x98>
        __asm volatile
 800307c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003080:	f383 8811 	msr	BASEPRI, r3
 8003084:	f3bf 8f6f 	isb	sy
 8003088:	f3bf 8f4f 	dsb	sy
 800308c:	607b      	str	r3, [r7, #4]
    }
 800308e:	bf00      	nop
 8003090:	bf00      	nop
 8003092:	e7fd      	b.n	8003090 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003094:	4b09      	ldr	r3, [pc, #36]	@ (80030bc <vTaskStartScheduler+0xc0>)
 8003096:	681b      	ldr	r3, [r3, #0]
}
 8003098:	bf00      	nop
 800309a:	3710      	adds	r7, #16
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}
 80030a0:	20000210 	.word	0x20000210
 80030a4:	08007ca0 	.word	0x08007ca0
 80030a8:	08003971 	.word	0x08003971
 80030ac:	2000020c 	.word	0x2000020c
 80030b0:	200001f8 	.word	0x200001f8
 80030b4:	200001f0 	.word	0x200001f0
 80030b8:	20000114 	.word	0x20000114
 80030bc:	2000000c 	.word	0x2000000c

080030c0 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80030c0:	b480      	push	{r7}
 80030c2:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80030c4:	4b04      	ldr	r3, [pc, #16]	@ (80030d8 <vTaskSuspendAll+0x18>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	3301      	adds	r3, #1
 80030ca:	4a03      	ldr	r2, [pc, #12]	@ (80030d8 <vTaskSuspendAll+0x18>)
 80030cc:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80030ce:	bf00      	nop
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr
 80030d8:	20000214 	.word	0x20000214

080030dc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b088      	sub	sp, #32
 80030e0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80030e2:	2300      	movs	r3, #0
 80030e4:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 80030e6:	2300      	movs	r3, #0
 80030e8:	617b      	str	r3, [r7, #20]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80030ea:	4b6d      	ldr	r3, [pc, #436]	@ (80032a0 <xTaskResumeAll+0x1c4>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d10b      	bne.n	800310a <xTaskResumeAll+0x2e>
        __asm volatile
 80030f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030f6:	f383 8811 	msr	BASEPRI, r3
 80030fa:	f3bf 8f6f 	isb	sy
 80030fe:	f3bf 8f4f 	dsb	sy
 8003102:	607b      	str	r3, [r7, #4]
    }
 8003104:	bf00      	nop
 8003106:	bf00      	nop
 8003108:	e7fd      	b.n	8003106 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800310a:	f001 f9b7 	bl	800447c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800310e:	4b64      	ldr	r3, [pc, #400]	@ (80032a0 <xTaskResumeAll+0x1c4>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	3b01      	subs	r3, #1
 8003114:	4a62      	ldr	r2, [pc, #392]	@ (80032a0 <xTaskResumeAll+0x1c4>)
 8003116:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003118:	4b61      	ldr	r3, [pc, #388]	@ (80032a0 <xTaskResumeAll+0x1c4>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	2b00      	cmp	r3, #0
 800311e:	f040 80b8 	bne.w	8003292 <xTaskResumeAll+0x1b6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003122:	4b60      	ldr	r3, [pc, #384]	@ (80032a4 <xTaskResumeAll+0x1c8>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	2b00      	cmp	r3, #0
 8003128:	f000 80b3 	beq.w	8003292 <xTaskResumeAll+0x1b6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800312c:	e08e      	b.n	800324c <xTaskResumeAll+0x170>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800312e:	4b5e      	ldr	r3, [pc, #376]	@ (80032a8 <xTaskResumeAll+0x1cc>)
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800313a:	613b      	str	r3, [r7, #16]
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	69db      	ldr	r3, [r3, #28]
 8003140:	69fa      	ldr	r2, [r7, #28]
 8003142:	6a12      	ldr	r2, [r2, #32]
 8003144:	609a      	str	r2, [r3, #8]
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	6a1b      	ldr	r3, [r3, #32]
 800314a:	69fa      	ldr	r2, [r7, #28]
 800314c:	69d2      	ldr	r2, [r2, #28]
 800314e:	605a      	str	r2, [r3, #4]
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	685a      	ldr	r2, [r3, #4]
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	3318      	adds	r3, #24
 8003158:	429a      	cmp	r2, r3
 800315a:	d103      	bne.n	8003164 <xTaskResumeAll+0x88>
 800315c:	69fb      	ldr	r3, [r7, #28]
 800315e:	6a1a      	ldr	r2, [r3, #32]
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	605a      	str	r2, [r3, #4]
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	2200      	movs	r2, #0
 8003168:	629a      	str	r2, [r3, #40]	@ 0x28
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	1e5a      	subs	r2, r3, #1
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	695b      	ldr	r3, [r3, #20]
 8003178:	60fb      	str	r3, [r7, #12]
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	69fa      	ldr	r2, [r7, #28]
 8003180:	68d2      	ldr	r2, [r2, #12]
 8003182:	609a      	str	r2, [r3, #8]
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	69fa      	ldr	r2, [r7, #28]
 800318a:	6892      	ldr	r2, [r2, #8]
 800318c:	605a      	str	r2, [r3, #4]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	685a      	ldr	r2, [r3, #4]
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	3304      	adds	r3, #4
 8003196:	429a      	cmp	r2, r3
 8003198:	d103      	bne.n	80031a2 <xTaskResumeAll+0xc6>
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	68da      	ldr	r2, [r3, #12]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	605a      	str	r2, [r3, #4]
 80031a2:	69fb      	ldr	r3, [r7, #28]
 80031a4:	2200      	movs	r2, #0
 80031a6:	615a      	str	r2, [r3, #20]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	1e5a      	subs	r2, r3, #1
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80031b2:	69fb      	ldr	r3, [r7, #28]
 80031b4:	4618      	mov	r0, r3
 80031b6:	f003 fce7 	bl	8006b88 <SEGGER_SYSVIEW_OnTaskStartReady>
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031be:	2201      	movs	r2, #1
 80031c0:	409a      	lsls	r2, r3
 80031c2:	4b3a      	ldr	r3, [pc, #232]	@ (80032ac <xTaskResumeAll+0x1d0>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	4a38      	ldr	r2, [pc, #224]	@ (80032ac <xTaskResumeAll+0x1d0>)
 80031ca:	6013      	str	r3, [r2, #0]
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031d0:	4937      	ldr	r1, [pc, #220]	@ (80032b0 <xTaskResumeAll+0x1d4>)
 80031d2:	4613      	mov	r3, r2
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	4413      	add	r3, r2
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	440b      	add	r3, r1
 80031dc:	3304      	adds	r3, #4
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	60bb      	str	r3, [r7, #8]
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	68ba      	ldr	r2, [r7, #8]
 80031e6:	609a      	str	r2, [r3, #8]
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	689a      	ldr	r2, [r3, #8]
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	60da      	str	r2, [r3, #12]
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	69fa      	ldr	r2, [r7, #28]
 80031f6:	3204      	adds	r2, #4
 80031f8:	605a      	str	r2, [r3, #4]
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	1d1a      	adds	r2, r3, #4
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	609a      	str	r2, [r3, #8]
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003206:	4613      	mov	r3, r2
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	4413      	add	r3, r2
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	4a28      	ldr	r2, [pc, #160]	@ (80032b0 <xTaskResumeAll+0x1d4>)
 8003210:	441a      	add	r2, r3
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	615a      	str	r2, [r3, #20]
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800321a:	4925      	ldr	r1, [pc, #148]	@ (80032b0 <xTaskResumeAll+0x1d4>)
 800321c:	4613      	mov	r3, r2
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	4413      	add	r3, r2
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	440b      	add	r3, r1
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	1c59      	adds	r1, r3, #1
 800322a:	4821      	ldr	r0, [pc, #132]	@ (80032b0 <xTaskResumeAll+0x1d4>)
 800322c:	4613      	mov	r3, r2
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	4413      	add	r3, r2
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	4403      	add	r3, r0
 8003236:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800323c:	4b1d      	ldr	r3, [pc, #116]	@ (80032b4 <xTaskResumeAll+0x1d8>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003242:	429a      	cmp	r2, r3
 8003244:	d302      	bcc.n	800324c <xTaskResumeAll+0x170>
                    {
                        xYieldPending = pdTRUE;
 8003246:	4b1c      	ldr	r3, [pc, #112]	@ (80032b8 <xTaskResumeAll+0x1dc>)
 8003248:	2201      	movs	r2, #1
 800324a:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800324c:	4b16      	ldr	r3, [pc, #88]	@ (80032a8 <xTaskResumeAll+0x1cc>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	2b00      	cmp	r3, #0
 8003252:	f47f af6c 	bne.w	800312e <xTaskResumeAll+0x52>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d001      	beq.n	8003260 <xTaskResumeAll+0x184>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800325c:	f000 fc18 	bl	8003a90 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003260:	4b16      	ldr	r3, [pc, #88]	@ (80032bc <xTaskResumeAll+0x1e0>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	61bb      	str	r3, [r7, #24]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8003266:	69bb      	ldr	r3, [r7, #24]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d010      	beq.n	800328e <xTaskResumeAll+0x1b2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800326c:	f000 f84a 	bl	8003304 <xTaskIncrementTick>
 8003270:	4603      	mov	r3, r0
 8003272:	2b00      	cmp	r3, #0
 8003274:	d002      	beq.n	800327c <xTaskResumeAll+0x1a0>
                            {
                                xYieldPending = pdTRUE;
 8003276:	4b10      	ldr	r3, [pc, #64]	@ (80032b8 <xTaskResumeAll+0x1dc>)
 8003278:	2201      	movs	r2, #1
 800327a:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	3b01      	subs	r3, #1
 8003280:	61bb      	str	r3, [r7, #24]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003282:	69bb      	ldr	r3, [r7, #24]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d1f1      	bne.n	800326c <xTaskResumeAll+0x190>

                        xPendedTicks = 0;
 8003288:	4b0c      	ldr	r3, [pc, #48]	@ (80032bc <xTaskResumeAll+0x1e0>)
 800328a:	2200      	movs	r2, #0
 800328c:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800328e:	4b0a      	ldr	r3, [pc, #40]	@ (80032b8 <xTaskResumeAll+0x1dc>)
 8003290:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003292:	f001 f925 	bl	80044e0 <vPortExitCritical>

    return xAlreadyYielded;
 8003296:	697b      	ldr	r3, [r7, #20]
}
 8003298:	4618      	mov	r0, r3
 800329a:	3720      	adds	r7, #32
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	20000214 	.word	0x20000214
 80032a4:	200001ec 	.word	0x200001ec
 80032a8:	200001ac 	.word	0x200001ac
 80032ac:	200001f4 	.word	0x200001f4
 80032b0:	20000118 	.word	0x20000118
 80032b4:	20000114 	.word	0x20000114
 80032b8:	20000200 	.word	0x20000200
 80032bc:	200001fc 	.word	0x200001fc

080032c0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80032c6:	4b05      	ldr	r3, [pc, #20]	@ (80032dc <xTaskGetTickCount+0x1c>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80032cc:	687b      	ldr	r3, [r7, #4]
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	370c      	adds	r7, #12
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr
 80032da:	bf00      	nop
 80032dc:	200001f0 	.word	0x200001f0

080032e0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b082      	sub	sp, #8
 80032e4:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80032e6:	f001 f9b9 	bl	800465c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80032ea:	2300      	movs	r3, #0
 80032ec:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 80032ee:	4b04      	ldr	r3, [pc, #16]	@ (8003300 <xTaskGetTickCountFromISR+0x20>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80032f4:	683b      	ldr	r3, [r7, #0]
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3708      	adds	r7, #8
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	200001f0 	.word	0x200001f0

08003304 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b08a      	sub	sp, #40	@ 0x28
 8003308:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800330a:	2300      	movs	r3, #0
 800330c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800330e:	4b70      	ldr	r3, [pc, #448]	@ (80034d0 <xTaskIncrementTick+0x1cc>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	2b00      	cmp	r3, #0
 8003314:	f040 80d2 	bne.w	80034bc <xTaskIncrementTick+0x1b8>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003318:	4b6e      	ldr	r3, [pc, #440]	@ (80034d4 <xTaskIncrementTick+0x1d0>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	3301      	adds	r3, #1
 800331e:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003320:	4a6c      	ldr	r2, [pc, #432]	@ (80034d4 <xTaskIncrementTick+0x1d0>)
 8003322:	6a3b      	ldr	r3, [r7, #32]
 8003324:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003326:	6a3b      	ldr	r3, [r7, #32]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d121      	bne.n	8003370 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 800332c:	4b6a      	ldr	r3, [pc, #424]	@ (80034d8 <xTaskIncrementTick+0x1d4>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d00b      	beq.n	800334e <xTaskIncrementTick+0x4a>
        __asm volatile
 8003336:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800333a:	f383 8811 	msr	BASEPRI, r3
 800333e:	f3bf 8f6f 	isb	sy
 8003342:	f3bf 8f4f 	dsb	sy
 8003346:	607b      	str	r3, [r7, #4]
    }
 8003348:	bf00      	nop
 800334a:	bf00      	nop
 800334c:	e7fd      	b.n	800334a <xTaskIncrementTick+0x46>
 800334e:	4b62      	ldr	r3, [pc, #392]	@ (80034d8 <xTaskIncrementTick+0x1d4>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	61fb      	str	r3, [r7, #28]
 8003354:	4b61      	ldr	r3, [pc, #388]	@ (80034dc <xTaskIncrementTick+0x1d8>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a5f      	ldr	r2, [pc, #380]	@ (80034d8 <xTaskIncrementTick+0x1d4>)
 800335a:	6013      	str	r3, [r2, #0]
 800335c:	4a5f      	ldr	r2, [pc, #380]	@ (80034dc <xTaskIncrementTick+0x1d8>)
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	6013      	str	r3, [r2, #0]
 8003362:	4b5f      	ldr	r3, [pc, #380]	@ (80034e0 <xTaskIncrementTick+0x1dc>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	3301      	adds	r3, #1
 8003368:	4a5d      	ldr	r2, [pc, #372]	@ (80034e0 <xTaskIncrementTick+0x1dc>)
 800336a:	6013      	str	r3, [r2, #0]
 800336c:	f000 fb90 	bl	8003a90 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003370:	4b5c      	ldr	r3, [pc, #368]	@ (80034e4 <xTaskIncrementTick+0x1e0>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	6a3a      	ldr	r2, [r7, #32]
 8003376:	429a      	cmp	r2, r3
 8003378:	f0c0 80a5 	bcc.w	80034c6 <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800337c:	4b56      	ldr	r3, [pc, #344]	@ (80034d8 <xTaskIncrementTick+0x1d4>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d104      	bne.n	8003390 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003386:	4b57      	ldr	r3, [pc, #348]	@ (80034e4 <xTaskIncrementTick+0x1e0>)
 8003388:	f04f 32ff 	mov.w	r2, #4294967295
 800338c:	601a      	str	r2, [r3, #0]
                    break;
 800338e:	e09a      	b.n	80034c6 <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003390:	4b51      	ldr	r3, [pc, #324]	@ (80034d8 <xTaskIncrementTick+0x1d4>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800339a:	69bb      	ldr	r3, [r7, #24]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80033a0:	6a3a      	ldr	r2, [r7, #32]
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d203      	bcs.n	80033b0 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80033a8:	4a4e      	ldr	r2, [pc, #312]	@ (80034e4 <xTaskIncrementTick+0x1e0>)
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80033ae:	e08a      	b.n	80034c6 <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80033b0:	69bb      	ldr	r3, [r7, #24]
 80033b2:	695b      	ldr	r3, [r3, #20]
 80033b4:	613b      	str	r3, [r7, #16]
 80033b6:	69bb      	ldr	r3, [r7, #24]
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	69ba      	ldr	r2, [r7, #24]
 80033bc:	68d2      	ldr	r2, [r2, #12]
 80033be:	609a      	str	r2, [r3, #8]
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	69ba      	ldr	r2, [r7, #24]
 80033c6:	6892      	ldr	r2, [r2, #8]
 80033c8:	605a      	str	r2, [r3, #4]
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	685a      	ldr	r2, [r3, #4]
 80033ce:	69bb      	ldr	r3, [r7, #24]
 80033d0:	3304      	adds	r3, #4
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d103      	bne.n	80033de <xTaskIncrementTick+0xda>
 80033d6:	69bb      	ldr	r3, [r7, #24]
 80033d8:	68da      	ldr	r2, [r3, #12]
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	605a      	str	r2, [r3, #4]
 80033de:	69bb      	ldr	r3, [r7, #24]
 80033e0:	2200      	movs	r2, #0
 80033e2:	615a      	str	r2, [r3, #20]
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	1e5a      	subs	r2, r3, #1
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80033ee:	69bb      	ldr	r3, [r7, #24]
 80033f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d01e      	beq.n	8003434 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80033f6:	69bb      	ldr	r3, [r7, #24]
 80033f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033fa:	60fb      	str	r3, [r7, #12]
 80033fc:	69bb      	ldr	r3, [r7, #24]
 80033fe:	69db      	ldr	r3, [r3, #28]
 8003400:	69ba      	ldr	r2, [r7, #24]
 8003402:	6a12      	ldr	r2, [r2, #32]
 8003404:	609a      	str	r2, [r3, #8]
 8003406:	69bb      	ldr	r3, [r7, #24]
 8003408:	6a1b      	ldr	r3, [r3, #32]
 800340a:	69ba      	ldr	r2, [r7, #24]
 800340c:	69d2      	ldr	r2, [r2, #28]
 800340e:	605a      	str	r2, [r3, #4]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	685a      	ldr	r2, [r3, #4]
 8003414:	69bb      	ldr	r3, [r7, #24]
 8003416:	3318      	adds	r3, #24
 8003418:	429a      	cmp	r2, r3
 800341a:	d103      	bne.n	8003424 <xTaskIncrementTick+0x120>
 800341c:	69bb      	ldr	r3, [r7, #24]
 800341e:	6a1a      	ldr	r2, [r3, #32]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	605a      	str	r2, [r3, #4]
 8003424:	69bb      	ldr	r3, [r7, #24]
 8003426:	2200      	movs	r2, #0
 8003428:	629a      	str	r2, [r3, #40]	@ 0x28
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	1e5a      	subs	r2, r3, #1
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003434:	69bb      	ldr	r3, [r7, #24]
 8003436:	4618      	mov	r0, r3
 8003438:	f003 fba6 	bl	8006b88 <SEGGER_SYSVIEW_OnTaskStartReady>
 800343c:	69bb      	ldr	r3, [r7, #24]
 800343e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003440:	2201      	movs	r2, #1
 8003442:	409a      	lsls	r2, r3
 8003444:	4b28      	ldr	r3, [pc, #160]	@ (80034e8 <xTaskIncrementTick+0x1e4>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4313      	orrs	r3, r2
 800344a:	4a27      	ldr	r2, [pc, #156]	@ (80034e8 <xTaskIncrementTick+0x1e4>)
 800344c:	6013      	str	r3, [r2, #0]
 800344e:	69bb      	ldr	r3, [r7, #24]
 8003450:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003452:	4926      	ldr	r1, [pc, #152]	@ (80034ec <xTaskIncrementTick+0x1e8>)
 8003454:	4613      	mov	r3, r2
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	4413      	add	r3, r2
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	440b      	add	r3, r1
 800345e:	3304      	adds	r3, #4
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	60bb      	str	r3, [r7, #8]
 8003464:	69bb      	ldr	r3, [r7, #24]
 8003466:	68ba      	ldr	r2, [r7, #8]
 8003468:	609a      	str	r2, [r3, #8]
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	689a      	ldr	r2, [r3, #8]
 800346e:	69bb      	ldr	r3, [r7, #24]
 8003470:	60da      	str	r2, [r3, #12]
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	69ba      	ldr	r2, [r7, #24]
 8003478:	3204      	adds	r2, #4
 800347a:	605a      	str	r2, [r3, #4]
 800347c:	69bb      	ldr	r3, [r7, #24]
 800347e:	1d1a      	adds	r2, r3, #4
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	609a      	str	r2, [r3, #8]
 8003484:	69bb      	ldr	r3, [r7, #24]
 8003486:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003488:	4613      	mov	r3, r2
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	4413      	add	r3, r2
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	4a16      	ldr	r2, [pc, #88]	@ (80034ec <xTaskIncrementTick+0x1e8>)
 8003492:	441a      	add	r2, r3
 8003494:	69bb      	ldr	r3, [r7, #24]
 8003496:	615a      	str	r2, [r3, #20]
 8003498:	69bb      	ldr	r3, [r7, #24]
 800349a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800349c:	4913      	ldr	r1, [pc, #76]	@ (80034ec <xTaskIncrementTick+0x1e8>)
 800349e:	4613      	mov	r3, r2
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	4413      	add	r3, r2
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	440b      	add	r3, r1
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	1c59      	adds	r1, r3, #1
 80034ac:	480f      	ldr	r0, [pc, #60]	@ (80034ec <xTaskIncrementTick+0x1e8>)
 80034ae:	4613      	mov	r3, r2
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	4413      	add	r3, r2
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	4403      	add	r3, r0
 80034b8:	6019      	str	r1, [r3, #0]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80034ba:	e75f      	b.n	800337c <xTaskIncrementTick+0x78>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80034bc:	4b0c      	ldr	r3, [pc, #48]	@ (80034f0 <xTaskIncrementTick+0x1ec>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	3301      	adds	r3, #1
 80034c2:	4a0b      	ldr	r2, [pc, #44]	@ (80034f0 <xTaskIncrementTick+0x1ec>)
 80034c4:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 80034c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3728      	adds	r7, #40	@ 0x28
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}
 80034d0:	20000214 	.word	0x20000214
 80034d4:	200001f0 	.word	0x200001f0
 80034d8:	200001a4 	.word	0x200001a4
 80034dc:	200001a8 	.word	0x200001a8
 80034e0:	20000204 	.word	0x20000204
 80034e4:	2000020c 	.word	0x2000020c
 80034e8:	200001f4 	.word	0x200001f4
 80034ec:	20000118 	.word	0x20000118
 80034f0:	200001fc 	.word	0x200001fc

080034f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b086      	sub	sp, #24
 80034f8:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80034fa:	4b2d      	ldr	r3, [pc, #180]	@ (80035b0 <vTaskSwitchContext+0xbc>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d003      	beq.n	800350a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003502:	4b2c      	ldr	r3, [pc, #176]	@ (80035b4 <vTaskSwitchContext+0xc0>)
 8003504:	2201      	movs	r2, #1
 8003506:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8003508:	e04e      	b.n	80035a8 <vTaskSwitchContext+0xb4>
        xYieldPending = pdFALSE;
 800350a:	4b2a      	ldr	r3, [pc, #168]	@ (80035b4 <vTaskSwitchContext+0xc0>)
 800350c:	2200      	movs	r2, #0
 800350e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003510:	4b29      	ldr	r3, [pc, #164]	@ (80035b8 <vTaskSwitchContext+0xc4>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	fab3 f383 	clz	r3, r3
 800351c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800351e:	7afb      	ldrb	r3, [r7, #11]
 8003520:	f1c3 031f 	rsb	r3, r3, #31
 8003524:	617b      	str	r3, [r7, #20]
 8003526:	4925      	ldr	r1, [pc, #148]	@ (80035bc <vTaskSwitchContext+0xc8>)
 8003528:	697a      	ldr	r2, [r7, #20]
 800352a:	4613      	mov	r3, r2
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	4413      	add	r3, r2
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	440b      	add	r3, r1
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d10b      	bne.n	8003552 <vTaskSwitchContext+0x5e>
        __asm volatile
 800353a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800353e:	f383 8811 	msr	BASEPRI, r3
 8003542:	f3bf 8f6f 	isb	sy
 8003546:	f3bf 8f4f 	dsb	sy
 800354a:	607b      	str	r3, [r7, #4]
    }
 800354c:	bf00      	nop
 800354e:	bf00      	nop
 8003550:	e7fd      	b.n	800354e <vTaskSwitchContext+0x5a>
 8003552:	697a      	ldr	r2, [r7, #20]
 8003554:	4613      	mov	r3, r2
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	4413      	add	r3, r2
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	4a17      	ldr	r2, [pc, #92]	@ (80035bc <vTaskSwitchContext+0xc8>)
 800355e:	4413      	add	r3, r2
 8003560:	613b      	str	r3, [r7, #16]
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	685a      	ldr	r2, [r3, #4]
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	605a      	str	r2, [r3, #4]
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	685a      	ldr	r2, [r3, #4]
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	3308      	adds	r3, #8
 8003574:	429a      	cmp	r2, r3
 8003576:	d104      	bne.n	8003582 <vTaskSwitchContext+0x8e>
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	685a      	ldr	r2, [r3, #4]
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	605a      	str	r2, [r3, #4]
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	4a0d      	ldr	r2, [pc, #52]	@ (80035c0 <vTaskSwitchContext+0xcc>)
 800358a:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 800358c:	4b0c      	ldr	r3, [pc, #48]	@ (80035c0 <vTaskSwitchContext+0xcc>)
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	4b0c      	ldr	r3, [pc, #48]	@ (80035c4 <vTaskSwitchContext+0xd0>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	429a      	cmp	r2, r3
 8003596:	d102      	bne.n	800359e <vTaskSwitchContext+0xaa>
 8003598:	f003 fa56 	bl	8006a48 <SEGGER_SYSVIEW_OnIdle>
}
 800359c:	e004      	b.n	80035a8 <vTaskSwitchContext+0xb4>
        traceTASK_SWITCHED_IN();
 800359e:	4b08      	ldr	r3, [pc, #32]	@ (80035c0 <vTaskSwitchContext+0xcc>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4618      	mov	r0, r3
 80035a4:	f003 faae 	bl	8006b04 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80035a8:	bf00      	nop
 80035aa:	3718      	adds	r7, #24
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}
 80035b0:	20000214 	.word	0x20000214
 80035b4:	20000200 	.word	0x20000200
 80035b8:	200001f4 	.word	0x200001f4
 80035bc:	20000118 	.word	0x20000118
 80035c0:	20000114 	.word	0x20000114
 80035c4:	20000210 	.word	0x20000210

080035c8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b084      	sub	sp, #16
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d10b      	bne.n	80035f0 <vTaskPlaceOnEventList+0x28>
        __asm volatile
 80035d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035dc:	f383 8811 	msr	BASEPRI, r3
 80035e0:	f3bf 8f6f 	isb	sy
 80035e4:	f3bf 8f4f 	dsb	sy
 80035e8:	60fb      	str	r3, [r7, #12]
    }
 80035ea:	bf00      	nop
 80035ec:	bf00      	nop
 80035ee:	e7fd      	b.n	80035ec <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80035f0:	4b07      	ldr	r3, [pc, #28]	@ (8003610 <vTaskPlaceOnEventList+0x48>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	3318      	adds	r3, #24
 80035f6:	4619      	mov	r1, r3
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f7fe ff7e 	bl	80024fa <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80035fe:	2101      	movs	r1, #1
 8003600:	6838      	ldr	r0, [r7, #0]
 8003602:	f000 fa7f 	bl	8003b04 <prvAddCurrentTaskToDelayedList>
}
 8003606:	bf00      	nop
 8003608:	3710      	adds	r7, #16
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	20000114 	.word	0x20000114

08003614 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003614:	b580      	push	{r7, lr}
 8003616:	b086      	sub	sp, #24
 8003618:	af00      	add	r7, sp, #0
 800361a:	60f8      	str	r0, [r7, #12]
 800361c:	60b9      	str	r1, [r7, #8]
 800361e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d10b      	bne.n	800363e <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 8003626:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800362a:	f383 8811 	msr	BASEPRI, r3
 800362e:	f3bf 8f6f 	isb	sy
 8003632:	f3bf 8f4f 	dsb	sy
 8003636:	613b      	str	r3, [r7, #16]
    }
 8003638:	bf00      	nop
 800363a:	bf00      	nop
 800363c:	e7fd      	b.n	800363a <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	617b      	str	r3, [r7, #20]
 8003644:	4b17      	ldr	r3, [pc, #92]	@ (80036a4 <vTaskPlaceOnEventListRestricted+0x90>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	697a      	ldr	r2, [r7, #20]
 800364a:	61da      	str	r2, [r3, #28]
 800364c:	4b15      	ldr	r3, [pc, #84]	@ (80036a4 <vTaskPlaceOnEventListRestricted+0x90>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	697a      	ldr	r2, [r7, #20]
 8003652:	6892      	ldr	r2, [r2, #8]
 8003654:	621a      	str	r2, [r3, #32]
 8003656:	4b13      	ldr	r3, [pc, #76]	@ (80036a4 <vTaskPlaceOnEventListRestricted+0x90>)
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	3218      	adds	r2, #24
 8003660:	605a      	str	r2, [r3, #4]
 8003662:	4b10      	ldr	r3, [pc, #64]	@ (80036a4 <vTaskPlaceOnEventListRestricted+0x90>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f103 0218 	add.w	r2, r3, #24
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	609a      	str	r2, [r3, #8]
 800366e:	4b0d      	ldr	r3, [pc, #52]	@ (80036a4 <vTaskPlaceOnEventListRestricted+0x90>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	68fa      	ldr	r2, [r7, #12]
 8003674:	629a      	str	r2, [r3, #40]	@ 0x28
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	1c5a      	adds	r2, r3, #1
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d002      	beq.n	800368c <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 8003686:	f04f 33ff 	mov.w	r3, #4294967295
 800368a:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 800368c:	2024      	movs	r0, #36	@ 0x24
 800368e:	f002 fcdb 	bl	8006048 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003692:	6879      	ldr	r1, [r7, #4]
 8003694:	68b8      	ldr	r0, [r7, #8]
 8003696:	f000 fa35 	bl	8003b04 <prvAddCurrentTaskToDelayedList>
    }
 800369a:	bf00      	nop
 800369c:	3718      	adds	r7, #24
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	20000114 	.word	0x20000114

080036a8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b08a      	sub	sp, #40	@ 0x28
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	68db      	ldr	r3, [r3, #12]
 80036b6:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 80036b8:	6a3b      	ldr	r3, [r7, #32]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d10b      	bne.n	80036d6 <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 80036be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036c2:	f383 8811 	msr	BASEPRI, r3
 80036c6:	f3bf 8f6f 	isb	sy
 80036ca:	f3bf 8f4f 	dsb	sy
 80036ce:	60fb      	str	r3, [r7, #12]
    }
 80036d0:	bf00      	nop
 80036d2:	bf00      	nop
 80036d4:	e7fd      	b.n	80036d2 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80036d6:	6a3b      	ldr	r3, [r7, #32]
 80036d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036da:	61fb      	str	r3, [r7, #28]
 80036dc:	6a3b      	ldr	r3, [r7, #32]
 80036de:	69db      	ldr	r3, [r3, #28]
 80036e0:	6a3a      	ldr	r2, [r7, #32]
 80036e2:	6a12      	ldr	r2, [r2, #32]
 80036e4:	609a      	str	r2, [r3, #8]
 80036e6:	6a3b      	ldr	r3, [r7, #32]
 80036e8:	6a1b      	ldr	r3, [r3, #32]
 80036ea:	6a3a      	ldr	r2, [r7, #32]
 80036ec:	69d2      	ldr	r2, [r2, #28]
 80036ee:	605a      	str	r2, [r3, #4]
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	685a      	ldr	r2, [r3, #4]
 80036f4:	6a3b      	ldr	r3, [r7, #32]
 80036f6:	3318      	adds	r3, #24
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d103      	bne.n	8003704 <xTaskRemoveFromEventList+0x5c>
 80036fc:	6a3b      	ldr	r3, [r7, #32]
 80036fe:	6a1a      	ldr	r2, [r3, #32]
 8003700:	69fb      	ldr	r3, [r7, #28]
 8003702:	605a      	str	r2, [r3, #4]
 8003704:	6a3b      	ldr	r3, [r7, #32]
 8003706:	2200      	movs	r2, #0
 8003708:	629a      	str	r2, [r3, #40]	@ 0x28
 800370a:	69fb      	ldr	r3, [r7, #28]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	1e5a      	subs	r2, r3, #1
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003714:	4b4b      	ldr	r3, [pc, #300]	@ (8003844 <xTaskRemoveFromEventList+0x19c>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d162      	bne.n	80037e2 <xTaskRemoveFromEventList+0x13a>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800371c:	6a3b      	ldr	r3, [r7, #32]
 800371e:	695b      	ldr	r3, [r3, #20]
 8003720:	617b      	str	r3, [r7, #20]
 8003722:	6a3b      	ldr	r3, [r7, #32]
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	6a3a      	ldr	r2, [r7, #32]
 8003728:	68d2      	ldr	r2, [r2, #12]
 800372a:	609a      	str	r2, [r3, #8]
 800372c:	6a3b      	ldr	r3, [r7, #32]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	6a3a      	ldr	r2, [r7, #32]
 8003732:	6892      	ldr	r2, [r2, #8]
 8003734:	605a      	str	r2, [r3, #4]
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	685a      	ldr	r2, [r3, #4]
 800373a:	6a3b      	ldr	r3, [r7, #32]
 800373c:	3304      	adds	r3, #4
 800373e:	429a      	cmp	r2, r3
 8003740:	d103      	bne.n	800374a <xTaskRemoveFromEventList+0xa2>
 8003742:	6a3b      	ldr	r3, [r7, #32]
 8003744:	68da      	ldr	r2, [r3, #12]
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	605a      	str	r2, [r3, #4]
 800374a:	6a3b      	ldr	r3, [r7, #32]
 800374c:	2200      	movs	r2, #0
 800374e:	615a      	str	r2, [r3, #20]
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	1e5a      	subs	r2, r3, #1
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800375a:	6a3b      	ldr	r3, [r7, #32]
 800375c:	4618      	mov	r0, r3
 800375e:	f003 fa13 	bl	8006b88 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003762:	6a3b      	ldr	r3, [r7, #32]
 8003764:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003766:	2201      	movs	r2, #1
 8003768:	409a      	lsls	r2, r3
 800376a:	4b37      	ldr	r3, [pc, #220]	@ (8003848 <xTaskRemoveFromEventList+0x1a0>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4313      	orrs	r3, r2
 8003770:	4a35      	ldr	r2, [pc, #212]	@ (8003848 <xTaskRemoveFromEventList+0x1a0>)
 8003772:	6013      	str	r3, [r2, #0]
 8003774:	6a3b      	ldr	r3, [r7, #32]
 8003776:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003778:	4934      	ldr	r1, [pc, #208]	@ (800384c <xTaskRemoveFromEventList+0x1a4>)
 800377a:	4613      	mov	r3, r2
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	4413      	add	r3, r2
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	440b      	add	r3, r1
 8003784:	3304      	adds	r3, #4
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	613b      	str	r3, [r7, #16]
 800378a:	6a3b      	ldr	r3, [r7, #32]
 800378c:	693a      	ldr	r2, [r7, #16]
 800378e:	609a      	str	r2, [r3, #8]
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	689a      	ldr	r2, [r3, #8]
 8003794:	6a3b      	ldr	r3, [r7, #32]
 8003796:	60da      	str	r2, [r3, #12]
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	6a3a      	ldr	r2, [r7, #32]
 800379e:	3204      	adds	r2, #4
 80037a0:	605a      	str	r2, [r3, #4]
 80037a2:	6a3b      	ldr	r3, [r7, #32]
 80037a4:	1d1a      	adds	r2, r3, #4
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	609a      	str	r2, [r3, #8]
 80037aa:	6a3b      	ldr	r3, [r7, #32]
 80037ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037ae:	4613      	mov	r3, r2
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	4413      	add	r3, r2
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	4a25      	ldr	r2, [pc, #148]	@ (800384c <xTaskRemoveFromEventList+0x1a4>)
 80037b8:	441a      	add	r2, r3
 80037ba:	6a3b      	ldr	r3, [r7, #32]
 80037bc:	615a      	str	r2, [r3, #20]
 80037be:	6a3b      	ldr	r3, [r7, #32]
 80037c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037c2:	4922      	ldr	r1, [pc, #136]	@ (800384c <xTaskRemoveFromEventList+0x1a4>)
 80037c4:	4613      	mov	r3, r2
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	4413      	add	r3, r2
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	440b      	add	r3, r1
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	1c59      	adds	r1, r3, #1
 80037d2:	481e      	ldr	r0, [pc, #120]	@ (800384c <xTaskRemoveFromEventList+0x1a4>)
 80037d4:	4613      	mov	r3, r2
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	4413      	add	r3, r2
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	4403      	add	r3, r0
 80037de:	6019      	str	r1, [r3, #0]
 80037e0:	e01b      	b.n	800381a <xTaskRemoveFromEventList+0x172>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80037e2:	4b1b      	ldr	r3, [pc, #108]	@ (8003850 <xTaskRemoveFromEventList+0x1a8>)
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	61bb      	str	r3, [r7, #24]
 80037e8:	6a3b      	ldr	r3, [r7, #32]
 80037ea:	69ba      	ldr	r2, [r7, #24]
 80037ec:	61da      	str	r2, [r3, #28]
 80037ee:	69bb      	ldr	r3, [r7, #24]
 80037f0:	689a      	ldr	r2, [r3, #8]
 80037f2:	6a3b      	ldr	r3, [r7, #32]
 80037f4:	621a      	str	r2, [r3, #32]
 80037f6:	69bb      	ldr	r3, [r7, #24]
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	6a3a      	ldr	r2, [r7, #32]
 80037fc:	3218      	adds	r2, #24
 80037fe:	605a      	str	r2, [r3, #4]
 8003800:	6a3b      	ldr	r3, [r7, #32]
 8003802:	f103 0218 	add.w	r2, r3, #24
 8003806:	69bb      	ldr	r3, [r7, #24]
 8003808:	609a      	str	r2, [r3, #8]
 800380a:	6a3b      	ldr	r3, [r7, #32]
 800380c:	4a10      	ldr	r2, [pc, #64]	@ (8003850 <xTaskRemoveFromEventList+0x1a8>)
 800380e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003810:	4b0f      	ldr	r3, [pc, #60]	@ (8003850 <xTaskRemoveFromEventList+0x1a8>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	3301      	adds	r3, #1
 8003816:	4a0e      	ldr	r2, [pc, #56]	@ (8003850 <xTaskRemoveFromEventList+0x1a8>)
 8003818:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800381a:	6a3b      	ldr	r3, [r7, #32]
 800381c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800381e:	4b0d      	ldr	r3, [pc, #52]	@ (8003854 <xTaskRemoveFromEventList+0x1ac>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003824:	429a      	cmp	r2, r3
 8003826:	d905      	bls.n	8003834 <xTaskRemoveFromEventList+0x18c>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003828:	2301      	movs	r3, #1
 800382a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800382c:	4b0a      	ldr	r3, [pc, #40]	@ (8003858 <xTaskRemoveFromEventList+0x1b0>)
 800382e:	2201      	movs	r2, #1
 8003830:	601a      	str	r2, [r3, #0]
 8003832:	e001      	b.n	8003838 <xTaskRemoveFromEventList+0x190>
    }
    else
    {
        xReturn = pdFALSE;
 8003834:	2300      	movs	r3, #0
 8003836:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    return xReturn;
 8003838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800383a:	4618      	mov	r0, r3
 800383c:	3728      	adds	r7, #40	@ 0x28
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}
 8003842:	bf00      	nop
 8003844:	20000214 	.word	0x20000214
 8003848:	200001f4 	.word	0x200001f4
 800384c:	20000118 	.word	0x20000118
 8003850:	200001ac 	.word	0x200001ac
 8003854:	20000114 	.word	0x20000114
 8003858:	20000200 	.word	0x20000200

0800385c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800385c:	b480      	push	{r7}
 800385e:	b083      	sub	sp, #12
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003864:	4b06      	ldr	r3, [pc, #24]	@ (8003880 <vTaskInternalSetTimeOutState+0x24>)
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800386c:	4b05      	ldr	r3, [pc, #20]	@ (8003884 <vTaskInternalSetTimeOutState+0x28>)
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	605a      	str	r2, [r3, #4]
}
 8003874:	bf00      	nop
 8003876:	370c      	adds	r7, #12
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr
 8003880:	20000204 	.word	0x20000204
 8003884:	200001f0 	.word	0x200001f0

08003888 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b088      	sub	sp, #32
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d10b      	bne.n	80038b0 <xTaskCheckForTimeOut+0x28>
        __asm volatile
 8003898:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800389c:	f383 8811 	msr	BASEPRI, r3
 80038a0:	f3bf 8f6f 	isb	sy
 80038a4:	f3bf 8f4f 	dsb	sy
 80038a8:	613b      	str	r3, [r7, #16]
    }
 80038aa:	bf00      	nop
 80038ac:	bf00      	nop
 80038ae:	e7fd      	b.n	80038ac <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d10b      	bne.n	80038ce <xTaskCheckForTimeOut+0x46>
        __asm volatile
 80038b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038ba:	f383 8811 	msr	BASEPRI, r3
 80038be:	f3bf 8f6f 	isb	sy
 80038c2:	f3bf 8f4f 	dsb	sy
 80038c6:	60fb      	str	r3, [r7, #12]
    }
 80038c8:	bf00      	nop
 80038ca:	bf00      	nop
 80038cc:	e7fd      	b.n	80038ca <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 80038ce:	f000 fdd5 	bl	800447c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80038d2:	4b1f      	ldr	r3, [pc, #124]	@ (8003950 <xTaskCheckForTimeOut+0xc8>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	69ba      	ldr	r2, [r7, #24]
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038ea:	d102      	bne.n	80038f2 <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80038ec:	2300      	movs	r3, #0
 80038ee:	61fb      	str	r3, [r7, #28]
 80038f0:	e026      	b.n	8003940 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	4b17      	ldr	r3, [pc, #92]	@ (8003954 <xTaskCheckForTimeOut+0xcc>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d00a      	beq.n	8003914 <xTaskCheckForTimeOut+0x8c>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	69ba      	ldr	r2, [r7, #24]
 8003904:	429a      	cmp	r2, r3
 8003906:	d305      	bcc.n	8003914 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003908:	2301      	movs	r3, #1
 800390a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	2200      	movs	r2, #0
 8003910:	601a      	str	r2, [r3, #0]
 8003912:	e015      	b.n	8003940 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	697a      	ldr	r2, [r7, #20]
 800391a:	429a      	cmp	r2, r3
 800391c:	d20b      	bcs.n	8003936 <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	1ad2      	subs	r2, r2, r3
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f7ff ff96 	bl	800385c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003930:	2300      	movs	r3, #0
 8003932:	61fb      	str	r3, [r7, #28]
 8003934:	e004      	b.n	8003940 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	2200      	movs	r2, #0
 800393a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800393c:	2301      	movs	r3, #1
 800393e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003940:	f000 fdce 	bl	80044e0 <vPortExitCritical>

    return xReturn;
 8003944:	69fb      	ldr	r3, [r7, #28]
}
 8003946:	4618      	mov	r0, r3
 8003948:	3720      	adds	r7, #32
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	200001f0 	.word	0x200001f0
 8003954:	20000204 	.word	0x20000204

08003958 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003958:	b480      	push	{r7}
 800395a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800395c:	4b03      	ldr	r3, [pc, #12]	@ (800396c <vTaskMissedYield+0x14>)
 800395e:	2201      	movs	r2, #1
 8003960:	601a      	str	r2, [r3, #0]
}
 8003962:	bf00      	nop
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr
 800396c:	20000200 	.word	0x20000200

08003970 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b082      	sub	sp, #8
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003978:	f000 f84c 	bl	8003a14 <prvCheckTasksWaitingTermination>
        {
            /* If we are not using preemption we keep forcing a task switch to
             * see if any other task has become available.  If we are using
             * preemption we don't need to do this as any task becoming available
             * will automatically get the processor anyway. */
            taskYIELD();
 800397c:	4b04      	ldr	r3, [pc, #16]	@ (8003990 <prvIdleTask+0x20>)
 800397e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003982:	601a      	str	r2, [r3, #0]
 8003984:	f3bf 8f4f 	dsb	sy
 8003988:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800398c:	bf00      	nop
 800398e:	e7f3      	b.n	8003978 <prvIdleTask+0x8>
 8003990:	e000ed04 	.word	0xe000ed04

08003994 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b082      	sub	sp, #8
 8003998:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800399a:	2300      	movs	r3, #0
 800399c:	607b      	str	r3, [r7, #4]
 800399e:	e00c      	b.n	80039ba <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	4613      	mov	r3, r2
 80039a4:	009b      	lsls	r3, r3, #2
 80039a6:	4413      	add	r3, r2
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	4a12      	ldr	r2, [pc, #72]	@ (80039f4 <prvInitialiseTaskLists+0x60>)
 80039ac:	4413      	add	r3, r2
 80039ae:	4618      	mov	r0, r3
 80039b0:	f7fe fd76 	bl	80024a0 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	3301      	adds	r3, #1
 80039b8:	607b      	str	r3, [r7, #4]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2b04      	cmp	r3, #4
 80039be:	d9ef      	bls.n	80039a0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80039c0:	480d      	ldr	r0, [pc, #52]	@ (80039f8 <prvInitialiseTaskLists+0x64>)
 80039c2:	f7fe fd6d 	bl	80024a0 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80039c6:	480d      	ldr	r0, [pc, #52]	@ (80039fc <prvInitialiseTaskLists+0x68>)
 80039c8:	f7fe fd6a 	bl	80024a0 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80039cc:	480c      	ldr	r0, [pc, #48]	@ (8003a00 <prvInitialiseTaskLists+0x6c>)
 80039ce:	f7fe fd67 	bl	80024a0 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80039d2:	480c      	ldr	r0, [pc, #48]	@ (8003a04 <prvInitialiseTaskLists+0x70>)
 80039d4:	f7fe fd64 	bl	80024a0 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 80039d8:	480b      	ldr	r0, [pc, #44]	@ (8003a08 <prvInitialiseTaskLists+0x74>)
 80039da:	f7fe fd61 	bl	80024a0 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80039de:	4b0b      	ldr	r3, [pc, #44]	@ (8003a0c <prvInitialiseTaskLists+0x78>)
 80039e0:	4a05      	ldr	r2, [pc, #20]	@ (80039f8 <prvInitialiseTaskLists+0x64>)
 80039e2:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80039e4:	4b0a      	ldr	r3, [pc, #40]	@ (8003a10 <prvInitialiseTaskLists+0x7c>)
 80039e6:	4a05      	ldr	r2, [pc, #20]	@ (80039fc <prvInitialiseTaskLists+0x68>)
 80039e8:	601a      	str	r2, [r3, #0]
}
 80039ea:	bf00      	nop
 80039ec:	3708      	adds	r7, #8
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	bf00      	nop
 80039f4:	20000118 	.word	0x20000118
 80039f8:	2000017c 	.word	0x2000017c
 80039fc:	20000190 	.word	0x20000190
 8003a00:	200001ac 	.word	0x200001ac
 8003a04:	200001c0 	.word	0x200001c0
 8003a08:	200001d8 	.word	0x200001d8
 8003a0c:	200001a4 	.word	0x200001a4
 8003a10:	200001a8 	.word	0x200001a8

08003a14 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b082      	sub	sp, #8
 8003a18:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003a1a:	e019      	b.n	8003a50 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8003a1c:	f000 fd2e 	bl	800447c <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a20:	4b10      	ldr	r3, [pc, #64]	@ (8003a64 <prvCheckTasksWaitingTermination+0x50>)
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	68db      	ldr	r3, [r3, #12]
 8003a26:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	3304      	adds	r3, #4
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f7fe fd9d 	bl	800256c <uxListRemove>
                --uxCurrentNumberOfTasks;
 8003a32:	4b0d      	ldr	r3, [pc, #52]	@ (8003a68 <prvCheckTasksWaitingTermination+0x54>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	3b01      	subs	r3, #1
 8003a38:	4a0b      	ldr	r2, [pc, #44]	@ (8003a68 <prvCheckTasksWaitingTermination+0x54>)
 8003a3a:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8003a3c:	4b0b      	ldr	r3, [pc, #44]	@ (8003a6c <prvCheckTasksWaitingTermination+0x58>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	3b01      	subs	r3, #1
 8003a42:	4a0a      	ldr	r2, [pc, #40]	@ (8003a6c <prvCheckTasksWaitingTermination+0x58>)
 8003a44:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8003a46:	f000 fd4b 	bl	80044e0 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f000 f810 	bl	8003a70 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003a50:	4b06      	ldr	r3, [pc, #24]	@ (8003a6c <prvCheckTasksWaitingTermination+0x58>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d1e1      	bne.n	8003a1c <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8003a58:	bf00      	nop
 8003a5a:	bf00      	nop
 8003a5c:	3708      	adds	r7, #8
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	200001c0 	.word	0x200001c0
 8003a68:	200001ec 	.word	0x200001ec
 8003a6c:	200001d4 	.word	0x200001d4

08003a70 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b082      	sub	sp, #8
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f000 feeb 	bl	8004858 <vPortFree>
            vPortFree( pxTCB );
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f000 fee8 	bl	8004858 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003a88:	bf00      	nop
 8003a8a:	3708      	adds	r7, #8
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}

08003a90 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003a90:	b480      	push	{r7}
 8003a92:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a94:	4b0a      	ldr	r3, [pc, #40]	@ (8003ac0 <prvResetNextTaskUnblockTime+0x30>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d104      	bne.n	8003aa8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003a9e:	4b09      	ldr	r3, [pc, #36]	@ (8003ac4 <prvResetNextTaskUnblockTime+0x34>)
 8003aa0:	f04f 32ff 	mov.w	r2, #4294967295
 8003aa4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003aa6:	e005      	b.n	8003ab4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003aa8:	4b05      	ldr	r3, [pc, #20]	@ (8003ac0 <prvResetNextTaskUnblockTime+0x30>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	68db      	ldr	r3, [r3, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a04      	ldr	r2, [pc, #16]	@ (8003ac4 <prvResetNextTaskUnblockTime+0x34>)
 8003ab2:	6013      	str	r3, [r2, #0]
}
 8003ab4:	bf00      	nop
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr
 8003abe:	bf00      	nop
 8003ac0:	200001a4 	.word	0x200001a4
 8003ac4:	2000020c 	.word	0x2000020c

08003ac8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003ac8:	b480      	push	{r7}
 8003aca:	b083      	sub	sp, #12
 8003acc:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003ace:	4b0b      	ldr	r3, [pc, #44]	@ (8003afc <xTaskGetSchedulerState+0x34>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d102      	bne.n	8003adc <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	607b      	str	r3, [r7, #4]
 8003ada:	e008      	b.n	8003aee <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003adc:	4b08      	ldr	r3, [pc, #32]	@ (8003b00 <xTaskGetSchedulerState+0x38>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d102      	bne.n	8003aea <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003ae4:	2302      	movs	r3, #2
 8003ae6:	607b      	str	r3, [r7, #4]
 8003ae8:	e001      	b.n	8003aee <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003aea:	2300      	movs	r3, #0
 8003aec:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003aee:	687b      	ldr	r3, [r7, #4]
    }
 8003af0:	4618      	mov	r0, r3
 8003af2:	370c      	adds	r7, #12
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr
 8003afc:	200001f8 	.word	0x200001f8
 8003b00:	20000214 	.word	0x20000214

08003b04 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b086      	sub	sp, #24
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003b0e:	4b36      	ldr	r3, [pc, #216]	@ (8003be8 <prvAddCurrentTaskToDelayedList+0xe4>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003b14:	4b35      	ldr	r3, [pc, #212]	@ (8003bec <prvAddCurrentTaskToDelayedList+0xe8>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	3304      	adds	r3, #4
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f7fe fd26 	bl	800256c <uxListRemove>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d10b      	bne.n	8003b3e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003b26:	4b31      	ldr	r3, [pc, #196]	@ (8003bec <prvAddCurrentTaskToDelayedList+0xe8>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b32:	43da      	mvns	r2, r3
 8003b34:	4b2e      	ldr	r3, [pc, #184]	@ (8003bf0 <prvAddCurrentTaskToDelayedList+0xec>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4013      	ands	r3, r2
 8003b3a:	4a2d      	ldr	r2, [pc, #180]	@ (8003bf0 <prvAddCurrentTaskToDelayedList+0xec>)
 8003b3c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b44:	d124      	bne.n	8003b90 <prvAddCurrentTaskToDelayedList+0x8c>
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d021      	beq.n	8003b90 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b4c:	4b29      	ldr	r3, [pc, #164]	@ (8003bf4 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	613b      	str	r3, [r7, #16]
 8003b52:	4b26      	ldr	r3, [pc, #152]	@ (8003bec <prvAddCurrentTaskToDelayedList+0xe8>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	693a      	ldr	r2, [r7, #16]
 8003b58:	609a      	str	r2, [r3, #8]
 8003b5a:	4b24      	ldr	r3, [pc, #144]	@ (8003bec <prvAddCurrentTaskToDelayedList+0xe8>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	693a      	ldr	r2, [r7, #16]
 8003b60:	6892      	ldr	r2, [r2, #8]
 8003b62:	60da      	str	r2, [r3, #12]
 8003b64:	4b21      	ldr	r3, [pc, #132]	@ (8003bec <prvAddCurrentTaskToDelayedList+0xe8>)
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	3204      	adds	r2, #4
 8003b6e:	605a      	str	r2, [r3, #4]
 8003b70:	4b1e      	ldr	r3, [pc, #120]	@ (8003bec <prvAddCurrentTaskToDelayedList+0xe8>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	1d1a      	adds	r2, r3, #4
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	609a      	str	r2, [r3, #8]
 8003b7a:	4b1c      	ldr	r3, [pc, #112]	@ (8003bec <prvAddCurrentTaskToDelayedList+0xe8>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a1d      	ldr	r2, [pc, #116]	@ (8003bf4 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003b80:	615a      	str	r2, [r3, #20]
 8003b82:	4b1c      	ldr	r3, [pc, #112]	@ (8003bf4 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	3301      	adds	r3, #1
 8003b88:	4a1a      	ldr	r2, [pc, #104]	@ (8003bf4 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003b8a:	6013      	str	r3, [r2, #0]
 8003b8c:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003b8e:	e026      	b.n	8003bde <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8003b90:	697a      	ldr	r2, [r7, #20]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4413      	add	r3, r2
 8003b96:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003b98:	4b14      	ldr	r3, [pc, #80]	@ (8003bec <prvAddCurrentTaskToDelayedList+0xe8>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	68fa      	ldr	r2, [r7, #12]
 8003b9e:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8003ba0:	68fa      	ldr	r2, [r7, #12]
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d209      	bcs.n	8003bbc <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ba8:	4b13      	ldr	r3, [pc, #76]	@ (8003bf8 <prvAddCurrentTaskToDelayedList+0xf4>)
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	4b0f      	ldr	r3, [pc, #60]	@ (8003bec <prvAddCurrentTaskToDelayedList+0xe8>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	3304      	adds	r3, #4
 8003bb2:	4619      	mov	r1, r3
 8003bb4:	4610      	mov	r0, r2
 8003bb6:	f7fe fca0 	bl	80024fa <vListInsert>
}
 8003bba:	e010      	b.n	8003bde <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003bbc:	4b0f      	ldr	r3, [pc, #60]	@ (8003bfc <prvAddCurrentTaskToDelayedList+0xf8>)
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	4b0a      	ldr	r3, [pc, #40]	@ (8003bec <prvAddCurrentTaskToDelayedList+0xe8>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	3304      	adds	r3, #4
 8003bc6:	4619      	mov	r1, r3
 8003bc8:	4610      	mov	r0, r2
 8003bca:	f7fe fc96 	bl	80024fa <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8003bce:	4b0c      	ldr	r3, [pc, #48]	@ (8003c00 <prvAddCurrentTaskToDelayedList+0xfc>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	68fa      	ldr	r2, [r7, #12]
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d202      	bcs.n	8003bde <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8003bd8:	4a09      	ldr	r2, [pc, #36]	@ (8003c00 <prvAddCurrentTaskToDelayedList+0xfc>)
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	6013      	str	r3, [r2, #0]
}
 8003bde:	bf00      	nop
 8003be0:	3718      	adds	r7, #24
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	bf00      	nop
 8003be8:	200001f0 	.word	0x200001f0
 8003bec:	20000114 	.word	0x20000114
 8003bf0:	200001f4 	.word	0x200001f4
 8003bf4:	200001d8 	.word	0x200001d8
 8003bf8:	200001a8 	.word	0x200001a8
 8003bfc:	200001a4 	.word	0x200001a4
 8003c00:	2000020c 	.word	0x2000020c

08003c04 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b084      	sub	sp, #16
 8003c08:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003c0e:	f000 fa4f 	bl	80040b0 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003c12:	4b12      	ldr	r3, [pc, #72]	@ (8003c5c <xTimerCreateTimerTask+0x58>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d00b      	beq.n	8003c32 <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8003c1a:	4b11      	ldr	r3, [pc, #68]	@ (8003c60 <xTimerCreateTimerTask+0x5c>)
 8003c1c:	9301      	str	r3, [sp, #4]
 8003c1e:	2302      	movs	r3, #2
 8003c20:	9300      	str	r3, [sp, #0]
 8003c22:	2300      	movs	r3, #0
 8003c24:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003c28:	490e      	ldr	r1, [pc, #56]	@ (8003c64 <xTimerCreateTimerTask+0x60>)
 8003c2a:	480f      	ldr	r0, [pc, #60]	@ (8003c68 <xTimerCreateTimerTask+0x64>)
 8003c2c:	f7fe ffe6 	bl	8002bfc <xTaskCreate>
 8003c30:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d10b      	bne.n	8003c50 <xTimerCreateTimerTask+0x4c>
        __asm volatile
 8003c38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c3c:	f383 8811 	msr	BASEPRI, r3
 8003c40:	f3bf 8f6f 	isb	sy
 8003c44:	f3bf 8f4f 	dsb	sy
 8003c48:	603b      	str	r3, [r7, #0]
    }
 8003c4a:	bf00      	nop
 8003c4c:	bf00      	nop
 8003c4e:	e7fd      	b.n	8003c4c <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003c50:	687b      	ldr	r3, [r7, #4]
    }
 8003c52:	4618      	mov	r0, r3
 8003c54:	3708      	adds	r7, #8
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	20000248 	.word	0x20000248
 8003c60:	2000024c 	.word	0x2000024c
 8003c64:	08007ca8 	.word	0x08007ca8
 8003c68:	08003d11 	.word	0x08003d11

08003c6c <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b084      	sub	sp, #16
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	60f8      	str	r0, [r7, #12]
 8003c74:	60b9      	str	r1, [r7, #8]
 8003c76:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003c78:	e008      	b.n	8003c8c <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	699b      	ldr	r3, [r3, #24]
 8003c7e:	68ba      	ldr	r2, [r7, #8]
 8003c80:	4413      	add	r3, r2
 8003c82:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	6a1b      	ldr	r3, [r3, #32]
 8003c88:	68f8      	ldr	r0, [r7, #12]
 8003c8a:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	699a      	ldr	r2, [r3, #24]
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	18d1      	adds	r1, r2, r3
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	687a      	ldr	r2, [r7, #4]
 8003c98:	68f8      	ldr	r0, [r7, #12]
 8003c9a:	f000 f8df 	bl	8003e5c <prvInsertTimerInActiveList>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d1ea      	bne.n	8003c7a <prvReloadTimer+0xe>
        }
    }
 8003ca4:	bf00      	nop
 8003ca6:	bf00      	nop
 8003ca8:	3710      	adds	r7, #16
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
	...

08003cb0 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b084      	sub	sp, #16
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003cba:	4b14      	ldr	r3, [pc, #80]	@ (8003d0c <prvProcessExpiredTimer+0x5c>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	68db      	ldr	r3, [r3, #12]
 8003cc2:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	3304      	adds	r3, #4
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f7fe fc4f 	bl	800256c <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003cd4:	f003 0304 	and.w	r3, r3, #4
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d005      	beq.n	8003ce8 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8003cdc:	683a      	ldr	r2, [r7, #0]
 8003cde:	6879      	ldr	r1, [r7, #4]
 8003ce0:	68f8      	ldr	r0, [r7, #12]
 8003ce2:	f7ff ffc3 	bl	8003c6c <prvReloadTimer>
 8003ce6:	e008      	b.n	8003cfa <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003cee:	f023 0301 	bic.w	r3, r3, #1
 8003cf2:	b2da      	uxtb	r2, r3
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	6a1b      	ldr	r3, [r3, #32]
 8003cfe:	68f8      	ldr	r0, [r7, #12]
 8003d00:	4798      	blx	r3
    }
 8003d02:	bf00      	nop
 8003d04:	3710      	adds	r7, #16
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	20000240 	.word	0x20000240

08003d10 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003d18:	f107 0308 	add.w	r3, r7, #8
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f000 f859 	bl	8003dd4 <prvGetNextExpireTime>
 8003d22:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	4619      	mov	r1, r3
 8003d28:	68f8      	ldr	r0, [r7, #12]
 8003d2a:	f000 f805 	bl	8003d38 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003d2e:	f000 f8d7 	bl	8003ee0 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003d32:	bf00      	nop
 8003d34:	e7f0      	b.n	8003d18 <prvTimerTask+0x8>
	...

08003d38 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b084      	sub	sp, #16
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003d42:	f7ff f9bd 	bl	80030c0 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003d46:	f107 0308 	add.w	r3, r7, #8
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f000 f866 	bl	8003e1c <prvSampleTimeNow>
 8003d50:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d130      	bne.n	8003dba <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d10a      	bne.n	8003d74 <prvProcessTimerOrBlockTask+0x3c>
 8003d5e:	687a      	ldr	r2, [r7, #4]
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d806      	bhi.n	8003d74 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003d66:	f7ff f9b9 	bl	80030dc <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003d6a:	68f9      	ldr	r1, [r7, #12]
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	f7ff ff9f 	bl	8003cb0 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003d72:	e024      	b.n	8003dbe <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d008      	beq.n	8003d8c <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003d7a:	4b13      	ldr	r3, [pc, #76]	@ (8003dc8 <prvProcessTimerOrBlockTask+0x90>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d101      	bne.n	8003d88 <prvProcessTimerOrBlockTask+0x50>
 8003d84:	2301      	movs	r3, #1
 8003d86:	e000      	b.n	8003d8a <prvProcessTimerOrBlockTask+0x52>
 8003d88:	2300      	movs	r3, #0
 8003d8a:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003d8c:	4b0f      	ldr	r3, [pc, #60]	@ (8003dcc <prvProcessTimerOrBlockTask+0x94>)
 8003d8e:	6818      	ldr	r0, [r3, #0]
 8003d90:	687a      	ldr	r2, [r7, #4]
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	683a      	ldr	r2, [r7, #0]
 8003d98:	4619      	mov	r1, r3
 8003d9a:	f7fe fefb 	bl	8002b94 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003d9e:	f7ff f99d 	bl	80030dc <xTaskResumeAll>
 8003da2:	4603      	mov	r3, r0
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d10a      	bne.n	8003dbe <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003da8:	4b09      	ldr	r3, [pc, #36]	@ (8003dd0 <prvProcessTimerOrBlockTask+0x98>)
 8003daa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003dae:	601a      	str	r2, [r3, #0]
 8003db0:	f3bf 8f4f 	dsb	sy
 8003db4:	f3bf 8f6f 	isb	sy
    }
 8003db8:	e001      	b.n	8003dbe <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003dba:	f7ff f98f 	bl	80030dc <xTaskResumeAll>
    }
 8003dbe:	bf00      	nop
 8003dc0:	3710      	adds	r7, #16
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	20000244 	.word	0x20000244
 8003dcc:	20000248 	.word	0x20000248
 8003dd0:	e000ed04 	.word	0xe000ed04

08003dd4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003dd4:	b480      	push	{r7}
 8003dd6:	b085      	sub	sp, #20
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003ddc:	4b0e      	ldr	r3, [pc, #56]	@ (8003e18 <prvGetNextExpireTime+0x44>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d101      	bne.n	8003dea <prvGetNextExpireTime+0x16>
 8003de6:	2201      	movs	r2, #1
 8003de8:	e000      	b.n	8003dec <prvGetNextExpireTime+0x18>
 8003dea:	2200      	movs	r2, #0
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d105      	bne.n	8003e04 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003df8:	4b07      	ldr	r3, [pc, #28]	@ (8003e18 <prvGetNextExpireTime+0x44>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	68db      	ldr	r3, [r3, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	60fb      	str	r3, [r7, #12]
 8003e02:	e001      	b.n	8003e08 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003e04:	2300      	movs	r3, #0
 8003e06:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003e08:	68fb      	ldr	r3, [r7, #12]
    }
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3714      	adds	r7, #20
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr
 8003e16:	bf00      	nop
 8003e18:	20000240 	.word	0x20000240

08003e1c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b084      	sub	sp, #16
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003e24:	f7ff fa4c 	bl	80032c0 <xTaskGetTickCount>
 8003e28:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003e2a:	4b0b      	ldr	r3, [pc, #44]	@ (8003e58 <prvSampleTimeNow+0x3c>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	68fa      	ldr	r2, [r7, #12]
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d205      	bcs.n	8003e40 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003e34:	f000 f916 	bl	8004064 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	601a      	str	r2, [r3, #0]
 8003e3e:	e002      	b.n	8003e46 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003e46:	4a04      	ldr	r2, [pc, #16]	@ (8003e58 <prvSampleTimeNow+0x3c>)
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
    }
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3710      	adds	r7, #16
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	20000250 	.word	0x20000250

08003e5c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b086      	sub	sp, #24
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	60f8      	str	r0, [r7, #12]
 8003e64:	60b9      	str	r1, [r7, #8]
 8003e66:	607a      	str	r2, [r7, #4]
 8003e68:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	68ba      	ldr	r2, [r7, #8]
 8003e72:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	68fa      	ldr	r2, [r7, #12]
 8003e78:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003e7a:	68ba      	ldr	r2, [r7, #8]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d812      	bhi.n	8003ea8 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	1ad2      	subs	r2, r2, r3
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	699b      	ldr	r3, [r3, #24]
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d302      	bcc.n	8003e96 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003e90:	2301      	movs	r3, #1
 8003e92:	617b      	str	r3, [r7, #20]
 8003e94:	e01b      	b.n	8003ece <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003e96:	4b10      	ldr	r3, [pc, #64]	@ (8003ed8 <prvInsertTimerInActiveList+0x7c>)
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	3304      	adds	r3, #4
 8003e9e:	4619      	mov	r1, r3
 8003ea0:	4610      	mov	r0, r2
 8003ea2:	f7fe fb2a 	bl	80024fa <vListInsert>
 8003ea6:	e012      	b.n	8003ece <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d206      	bcs.n	8003ebe <prvInsertTimerInActiveList+0x62>
 8003eb0:	68ba      	ldr	r2, [r7, #8]
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d302      	bcc.n	8003ebe <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	617b      	str	r3, [r7, #20]
 8003ebc:	e007      	b.n	8003ece <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003ebe:	4b07      	ldr	r3, [pc, #28]	@ (8003edc <prvInsertTimerInActiveList+0x80>)
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	3304      	adds	r3, #4
 8003ec6:	4619      	mov	r1, r3
 8003ec8:	4610      	mov	r0, r2
 8003eca:	f7fe fb16 	bl	80024fa <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003ece:	697b      	ldr	r3, [r7, #20]
    }
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3718      	adds	r7, #24
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}
 8003ed8:	20000244 	.word	0x20000244
 8003edc:	20000240 	.word	0x20000240

08003ee0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b088      	sub	sp, #32
 8003ee4:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003ee6:	e0a9      	b.n	800403c <prvProcessReceivedCommands+0x15c>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	f2c0 80a6 	blt.w	800403c <prvProcessReceivedCommands+0x15c>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003ef4:	69fb      	ldr	r3, [r7, #28]
 8003ef6:	695b      	ldr	r3, [r3, #20]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d004      	beq.n	8003f06 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003efc:	69fb      	ldr	r3, [r7, #28]
 8003efe:	3304      	adds	r3, #4
 8003f00:	4618      	mov	r0, r3
 8003f02:	f7fe fb33 	bl	800256c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003f06:	1d3b      	adds	r3, r7, #4
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f7ff ff87 	bl	8003e1c <prvSampleTimeNow>
 8003f0e:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	3b01      	subs	r3, #1
 8003f14:	2b08      	cmp	r3, #8
 8003f16:	f200 808e 	bhi.w	8004036 <prvProcessReceivedCommands+0x156>
 8003f1a:	a201      	add	r2, pc, #4	@ (adr r2, 8003f20 <prvProcessReceivedCommands+0x40>)
 8003f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f20:	08003f45 	.word	0x08003f45
 8003f24:	08003f45 	.word	0x08003f45
 8003f28:	08003fad 	.word	0x08003fad
 8003f2c:	08003fc1 	.word	0x08003fc1
 8003f30:	0800400d 	.word	0x0800400d
 8003f34:	08003f45 	.word	0x08003f45
 8003f38:	08003f45 	.word	0x08003f45
 8003f3c:	08003fad 	.word	0x08003fad
 8003f40:	08003fc1 	.word	0x08003fc1
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003f44:	69fb      	ldr	r3, [r7, #28]
 8003f46:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003f4a:	f043 0301 	orr.w	r3, r3, #1
 8003f4e:	b2da      	uxtb	r2, r3
 8003f50:	69fb      	ldr	r3, [r7, #28]
 8003f52:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003f56:	68fa      	ldr	r2, [r7, #12]
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	699b      	ldr	r3, [r3, #24]
 8003f5c:	18d1      	adds	r1, r2, r3
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	69ba      	ldr	r2, [r7, #24]
 8003f62:	69f8      	ldr	r0, [r7, #28]
 8003f64:	f7ff ff7a 	bl	8003e5c <prvInsertTimerInActiveList>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d065      	beq.n	800403a <prvProcessReceivedCommands+0x15a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003f6e:	69fb      	ldr	r3, [r7, #28]
 8003f70:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003f74:	f003 0304 	and.w	r3, r3, #4
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d009      	beq.n	8003f90 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8003f7c:	68fa      	ldr	r2, [r7, #12]
 8003f7e:	69fb      	ldr	r3, [r7, #28]
 8003f80:	699b      	ldr	r3, [r3, #24]
 8003f82:	4413      	add	r3, r2
 8003f84:	69ba      	ldr	r2, [r7, #24]
 8003f86:	4619      	mov	r1, r3
 8003f88:	69f8      	ldr	r0, [r7, #28]
 8003f8a:	f7ff fe6f 	bl	8003c6c <prvReloadTimer>
 8003f8e:	e008      	b.n	8003fa2 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003f90:	69fb      	ldr	r3, [r7, #28]
 8003f92:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003f96:	f023 0301 	bic.w	r3, r3, #1
 8003f9a:	b2da      	uxtb	r2, r3
 8003f9c:	69fb      	ldr	r3, [r7, #28]
 8003f9e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003fa2:	69fb      	ldr	r3, [r7, #28]
 8003fa4:	6a1b      	ldr	r3, [r3, #32]
 8003fa6:	69f8      	ldr	r0, [r7, #28]
 8003fa8:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8003faa:	e046      	b.n	800403a <prvProcessReceivedCommands+0x15a>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003fac:	69fb      	ldr	r3, [r7, #28]
 8003fae:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003fb2:	f023 0301 	bic.w	r3, r3, #1
 8003fb6:	b2da      	uxtb	r2, r3
 8003fb8:	69fb      	ldr	r3, [r7, #28]
 8003fba:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8003fbe:	e03d      	b.n	800403c <prvProcessReceivedCommands+0x15c>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003fc0:	69fb      	ldr	r3, [r7, #28]
 8003fc2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003fc6:	f043 0301 	orr.w	r3, r3, #1
 8003fca:	b2da      	uxtb	r2, r3
 8003fcc:	69fb      	ldr	r3, [r7, #28]
 8003fce:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003fd2:	68fa      	ldr	r2, [r7, #12]
 8003fd4:	69fb      	ldr	r3, [r7, #28]
 8003fd6:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003fd8:	69fb      	ldr	r3, [r7, #28]
 8003fda:	699b      	ldr	r3, [r3, #24]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d10b      	bne.n	8003ff8 <prvProcessReceivedCommands+0x118>
        __asm volatile
 8003fe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fe4:	f383 8811 	msr	BASEPRI, r3
 8003fe8:	f3bf 8f6f 	isb	sy
 8003fec:	f3bf 8f4f 	dsb	sy
 8003ff0:	617b      	str	r3, [r7, #20]
    }
 8003ff2:	bf00      	nop
 8003ff4:	bf00      	nop
 8003ff6:	e7fd      	b.n	8003ff4 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003ff8:	69fb      	ldr	r3, [r7, #28]
 8003ffa:	699a      	ldr	r2, [r3, #24]
 8003ffc:	69bb      	ldr	r3, [r7, #24]
 8003ffe:	18d1      	adds	r1, r2, r3
 8004000:	69bb      	ldr	r3, [r7, #24]
 8004002:	69ba      	ldr	r2, [r7, #24]
 8004004:	69f8      	ldr	r0, [r7, #28]
 8004006:	f7ff ff29 	bl	8003e5c <prvInsertTimerInActiveList>
                        break;
 800400a:	e017      	b.n	800403c <prvProcessReceivedCommands+0x15c>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004012:	f003 0302 	and.w	r3, r3, #2
 8004016:	2b00      	cmp	r3, #0
 8004018:	d103      	bne.n	8004022 <prvProcessReceivedCommands+0x142>
                            {
                                vPortFree( pxTimer );
 800401a:	69f8      	ldr	r0, [r7, #28]
 800401c:	f000 fc1c 	bl	8004858 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8004020:	e00c      	b.n	800403c <prvProcessReceivedCommands+0x15c>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004022:	69fb      	ldr	r3, [r7, #28]
 8004024:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004028:	f023 0301 	bic.w	r3, r3, #1
 800402c:	b2da      	uxtb	r2, r3
 800402e:	69fb      	ldr	r3, [r7, #28]
 8004030:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8004034:	e002      	b.n	800403c <prvProcessReceivedCommands+0x15c>

                    default:
                        /* Don't expect to get here. */
                        break;
 8004036:	bf00      	nop
 8004038:	e000      	b.n	800403c <prvProcessReceivedCommands+0x15c>
                        break;
 800403a:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800403c:	4b08      	ldr	r3, [pc, #32]	@ (8004060 <prvProcessReceivedCommands+0x180>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f107 0108 	add.w	r1, r7, #8
 8004044:	2200      	movs	r2, #0
 8004046:	4618      	mov	r0, r3
 8004048:	f7fe fbb6 	bl	80027b8 <xQueueReceive>
 800404c:	4603      	mov	r3, r0
 800404e:	2b00      	cmp	r3, #0
 8004050:	f47f af4a 	bne.w	8003ee8 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8004054:	bf00      	nop
 8004056:	bf00      	nop
 8004058:	3720      	adds	r7, #32
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	20000248 	.word	0x20000248

08004064 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004064:	b580      	push	{r7, lr}
 8004066:	b082      	sub	sp, #8
 8004068:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800406a:	e009      	b.n	8004080 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800406c:	4b0e      	ldr	r3, [pc, #56]	@ (80040a8 <prvSwitchTimerLists+0x44>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8004076:	f04f 31ff 	mov.w	r1, #4294967295
 800407a:	6838      	ldr	r0, [r7, #0]
 800407c:	f7ff fe18 	bl	8003cb0 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004080:	4b09      	ldr	r3, [pc, #36]	@ (80040a8 <prvSwitchTimerLists+0x44>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d1f0      	bne.n	800406c <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 800408a:	4b07      	ldr	r3, [pc, #28]	@ (80040a8 <prvSwitchTimerLists+0x44>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8004090:	4b06      	ldr	r3, [pc, #24]	@ (80040ac <prvSwitchTimerLists+0x48>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a04      	ldr	r2, [pc, #16]	@ (80040a8 <prvSwitchTimerLists+0x44>)
 8004096:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004098:	4a04      	ldr	r2, [pc, #16]	@ (80040ac <prvSwitchTimerLists+0x48>)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6013      	str	r3, [r2, #0]
    }
 800409e:	bf00      	nop
 80040a0:	3708      	adds	r7, #8
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	bf00      	nop
 80040a8:	20000240 	.word	0x20000240
 80040ac:	20000244 	.word	0x20000244

080040b0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80040b0:	b580      	push	{r7, lr}
 80040b2:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80040b4:	f000 f9e2 	bl	800447c <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80040b8:	4b12      	ldr	r3, [pc, #72]	@ (8004104 <prvCheckForValidListAndQueue+0x54>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d11d      	bne.n	80040fc <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80040c0:	4811      	ldr	r0, [pc, #68]	@ (8004108 <prvCheckForValidListAndQueue+0x58>)
 80040c2:	f7fe f9ed 	bl	80024a0 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80040c6:	4811      	ldr	r0, [pc, #68]	@ (800410c <prvCheckForValidListAndQueue+0x5c>)
 80040c8:	f7fe f9ea 	bl	80024a0 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80040cc:	4b10      	ldr	r3, [pc, #64]	@ (8004110 <prvCheckForValidListAndQueue+0x60>)
 80040ce:	4a0e      	ldr	r2, [pc, #56]	@ (8004108 <prvCheckForValidListAndQueue+0x58>)
 80040d0:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80040d2:	4b10      	ldr	r3, [pc, #64]	@ (8004114 <prvCheckForValidListAndQueue+0x64>)
 80040d4:	4a0d      	ldr	r2, [pc, #52]	@ (800410c <prvCheckForValidListAndQueue+0x5c>)
 80040d6:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80040d8:	2200      	movs	r2, #0
 80040da:	210c      	movs	r1, #12
 80040dc:	200a      	movs	r0, #10
 80040de:	f7fe faf3 	bl	80026c8 <xQueueGenericCreate>
 80040e2:	4603      	mov	r3, r0
 80040e4:	4a07      	ldr	r2, [pc, #28]	@ (8004104 <prvCheckForValidListAndQueue+0x54>)
 80040e6:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 80040e8:	4b06      	ldr	r3, [pc, #24]	@ (8004104 <prvCheckForValidListAndQueue+0x54>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d005      	beq.n	80040fc <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80040f0:	4b04      	ldr	r3, [pc, #16]	@ (8004104 <prvCheckForValidListAndQueue+0x54>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4908      	ldr	r1, [pc, #32]	@ (8004118 <prvCheckForValidListAndQueue+0x68>)
 80040f6:	4618      	mov	r0, r3
 80040f8:	f7fe fcf4 	bl	8002ae4 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80040fc:	f000 f9f0 	bl	80044e0 <vPortExitCritical>
    }
 8004100:	bf00      	nop
 8004102:	bd80      	pop	{r7, pc}
 8004104:	20000248 	.word	0x20000248
 8004108:	20000218 	.word	0x20000218
 800410c:	2000022c 	.word	0x2000022c
 8004110:	20000240 	.word	0x20000240
 8004114:	20000244 	.word	0x20000244
 8004118:	08007cb0 	.word	0x08007cb0

0800411c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800411c:	b480      	push	{r7}
 800411e:	b085      	sub	sp, #20
 8004120:	af00      	add	r7, sp, #0
 8004122:	60f8      	str	r0, [r7, #12]
 8004124:	60b9      	str	r1, [r7, #8]
 8004126:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	3b04      	subs	r3, #4
 800412c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004134:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	3b04      	subs	r3, #4
 800413a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	f023 0201 	bic.w	r2, r3, #1
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	3b04      	subs	r3, #4
 800414a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800414c:	4a0c      	ldr	r2, [pc, #48]	@ (8004180 <pxPortInitialiseStack+0x64>)
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	3b14      	subs	r3, #20
 8004156:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	3b04      	subs	r3, #4
 8004162:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f06f 0202 	mvn.w	r2, #2
 800416a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	3b20      	subs	r3, #32
 8004170:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8004172:	68fb      	ldr	r3, [r7, #12]
}
 8004174:	4618      	mov	r0, r3
 8004176:	3714      	adds	r7, #20
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr
 8004180:	08004185 	.word	0x08004185

08004184 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004184:	b480      	push	{r7}
 8004186:	b085      	sub	sp, #20
 8004188:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800418a:	2300      	movs	r3, #0
 800418c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800418e:	4b13      	ldr	r3, [pc, #76]	@ (80041dc <prvTaskExitError+0x58>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004196:	d00b      	beq.n	80041b0 <prvTaskExitError+0x2c>
        __asm volatile
 8004198:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800419c:	f383 8811 	msr	BASEPRI, r3
 80041a0:	f3bf 8f6f 	isb	sy
 80041a4:	f3bf 8f4f 	dsb	sy
 80041a8:	60fb      	str	r3, [r7, #12]
    }
 80041aa:	bf00      	nop
 80041ac:	bf00      	nop
 80041ae:	e7fd      	b.n	80041ac <prvTaskExitError+0x28>
        __asm volatile
 80041b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041b4:	f383 8811 	msr	BASEPRI, r3
 80041b8:	f3bf 8f6f 	isb	sy
 80041bc:	f3bf 8f4f 	dsb	sy
 80041c0:	60bb      	str	r3, [r7, #8]
    }
 80041c2:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80041c4:	bf00      	nop
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d0fc      	beq.n	80041c6 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80041cc:	bf00      	nop
 80041ce:	bf00      	nop
 80041d0:	3714      	adds	r7, #20
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr
 80041da:	bf00      	nop
 80041dc:	20000010 	.word	0x20000010

080041e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80041e0:	4b07      	ldr	r3, [pc, #28]	@ (8004200 <pxCurrentTCBConst2>)
 80041e2:	6819      	ldr	r1, [r3, #0]
 80041e4:	6808      	ldr	r0, [r1, #0]
 80041e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041ea:	f380 8809 	msr	PSP, r0
 80041ee:	f3bf 8f6f 	isb	sy
 80041f2:	f04f 0000 	mov.w	r0, #0
 80041f6:	f380 8811 	msr	BASEPRI, r0
 80041fa:	4770      	bx	lr
 80041fc:	f3af 8000 	nop.w

08004200 <pxCurrentTCBConst2>:
 8004200:	20000114 	.word	0x20000114
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004204:	bf00      	nop
 8004206:	bf00      	nop

08004208 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004208:	4808      	ldr	r0, [pc, #32]	@ (800422c <prvPortStartFirstTask+0x24>)
 800420a:	6800      	ldr	r0, [r0, #0]
 800420c:	6800      	ldr	r0, [r0, #0]
 800420e:	f380 8808 	msr	MSP, r0
 8004212:	f04f 0000 	mov.w	r0, #0
 8004216:	f380 8814 	msr	CONTROL, r0
 800421a:	b662      	cpsie	i
 800421c:	b661      	cpsie	f
 800421e:	f3bf 8f4f 	dsb	sy
 8004222:	f3bf 8f6f 	isb	sy
 8004226:	df00      	svc	0
 8004228:	bf00      	nop
 800422a:	0000      	.short	0x0000
 800422c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004230:	bf00      	nop
 8004232:	bf00      	nop

08004234 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b086      	sub	sp, #24
 8004238:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800423a:	4b47      	ldr	r3, [pc, #284]	@ (8004358 <xPortStartScheduler+0x124>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a47      	ldr	r2, [pc, #284]	@ (800435c <xPortStartScheduler+0x128>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d10b      	bne.n	800425c <xPortStartScheduler+0x28>
        __asm volatile
 8004244:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004248:	f383 8811 	msr	BASEPRI, r3
 800424c:	f3bf 8f6f 	isb	sy
 8004250:	f3bf 8f4f 	dsb	sy
 8004254:	613b      	str	r3, [r7, #16]
    }
 8004256:	bf00      	nop
 8004258:	bf00      	nop
 800425a:	e7fd      	b.n	8004258 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800425c:	4b3e      	ldr	r3, [pc, #248]	@ (8004358 <xPortStartScheduler+0x124>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a3f      	ldr	r2, [pc, #252]	@ (8004360 <xPortStartScheduler+0x12c>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d10b      	bne.n	800427e <xPortStartScheduler+0x4a>
        __asm volatile
 8004266:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800426a:	f383 8811 	msr	BASEPRI, r3
 800426e:	f3bf 8f6f 	isb	sy
 8004272:	f3bf 8f4f 	dsb	sy
 8004276:	60fb      	str	r3, [r7, #12]
    }
 8004278:	bf00      	nop
 800427a:	bf00      	nop
 800427c:	e7fd      	b.n	800427a <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800427e:	4b39      	ldr	r3, [pc, #228]	@ (8004364 <xPortStartScheduler+0x130>)
 8004280:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	781b      	ldrb	r3, [r3, #0]
 8004286:	b2db      	uxtb	r3, r3
 8004288:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	22ff      	movs	r2, #255	@ 0xff
 800428e:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	781b      	ldrb	r3, [r3, #0]
 8004294:	b2db      	uxtb	r3, r3
 8004296:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004298:	78fb      	ldrb	r3, [r7, #3]
 800429a:	b2db      	uxtb	r3, r3
 800429c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80042a0:	b2da      	uxtb	r2, r3
 80042a2:	4b31      	ldr	r3, [pc, #196]	@ (8004368 <xPortStartScheduler+0x134>)
 80042a4:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80042a6:	4b31      	ldr	r3, [pc, #196]	@ (800436c <xPortStartScheduler+0x138>)
 80042a8:	2207      	movs	r2, #7
 80042aa:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80042ac:	e009      	b.n	80042c2 <xPortStartScheduler+0x8e>
        {
            ulMaxPRIGROUPValue--;
 80042ae:	4b2f      	ldr	r3, [pc, #188]	@ (800436c <xPortStartScheduler+0x138>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	3b01      	subs	r3, #1
 80042b4:	4a2d      	ldr	r2, [pc, #180]	@ (800436c <xPortStartScheduler+0x138>)
 80042b6:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80042b8:	78fb      	ldrb	r3, [r7, #3]
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	005b      	lsls	r3, r3, #1
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80042c2:	78fb      	ldrb	r3, [r7, #3]
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042ca:	2b80      	cmp	r3, #128	@ 0x80
 80042cc:	d0ef      	beq.n	80042ae <xPortStartScheduler+0x7a>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80042ce:	4b27      	ldr	r3, [pc, #156]	@ (800436c <xPortStartScheduler+0x138>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f1c3 0307 	rsb	r3, r3, #7
 80042d6:	2b04      	cmp	r3, #4
 80042d8:	d00b      	beq.n	80042f2 <xPortStartScheduler+0xbe>
        __asm volatile
 80042da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042de:	f383 8811 	msr	BASEPRI, r3
 80042e2:	f3bf 8f6f 	isb	sy
 80042e6:	f3bf 8f4f 	dsb	sy
 80042ea:	60bb      	str	r3, [r7, #8]
    }
 80042ec:	bf00      	nop
 80042ee:	bf00      	nop
 80042f0:	e7fd      	b.n	80042ee <xPortStartScheduler+0xba>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80042f2:	4b1e      	ldr	r3, [pc, #120]	@ (800436c <xPortStartScheduler+0x138>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	021b      	lsls	r3, r3, #8
 80042f8:	4a1c      	ldr	r2, [pc, #112]	@ (800436c <xPortStartScheduler+0x138>)
 80042fa:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80042fc:	4b1b      	ldr	r3, [pc, #108]	@ (800436c <xPortStartScheduler+0x138>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004304:	4a19      	ldr	r2, [pc, #100]	@ (800436c <xPortStartScheduler+0x138>)
 8004306:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	b2da      	uxtb	r2, r3
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8004310:	4b17      	ldr	r3, [pc, #92]	@ (8004370 <xPortStartScheduler+0x13c>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a16      	ldr	r2, [pc, #88]	@ (8004370 <xPortStartScheduler+0x13c>)
 8004316:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800431a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800431c:	4b14      	ldr	r3, [pc, #80]	@ (8004370 <xPortStartScheduler+0x13c>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a13      	ldr	r2, [pc, #76]	@ (8004370 <xPortStartScheduler+0x13c>)
 8004322:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004326:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004328:	f000 f968 	bl	80045fc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800432c:	4b11      	ldr	r3, [pc, #68]	@ (8004374 <xPortStartScheduler+0x140>)
 800432e:	2200      	movs	r2, #0
 8004330:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8004332:	f000 f987 	bl	8004644 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004336:	4b10      	ldr	r3, [pc, #64]	@ (8004378 <xPortStartScheduler+0x144>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a0f      	ldr	r2, [pc, #60]	@ (8004378 <xPortStartScheduler+0x144>)
 800433c:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004340:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8004342:	f7ff ff61 	bl	8004208 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004346:	f7ff f8d5 	bl	80034f4 <vTaskSwitchContext>
    prvTaskExitError();
 800434a:	f7ff ff1b 	bl	8004184 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800434e:	2300      	movs	r3, #0
}
 8004350:	4618      	mov	r0, r3
 8004352:	3718      	adds	r7, #24
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}
 8004358:	e000ed00 	.word	0xe000ed00
 800435c:	410fc271 	.word	0x410fc271
 8004360:	410fc270 	.word	0x410fc270
 8004364:	e000e400 	.word	0xe000e400
 8004368:	20000254 	.word	0x20000254
 800436c:	20000258 	.word	0x20000258
 8004370:	e000ed20 	.word	0xe000ed20
 8004374:	20000010 	.word	0x20000010
 8004378:	e000ef34 	.word	0xe000ef34

0800437c <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 800437c:	b480      	push	{r7}
 800437e:	b087      	sub	sp, #28
 8004380:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004382:	4b38      	ldr	r3, [pc, #224]	@ (8004464 <vInitPrioGroupValue+0xe8>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a38      	ldr	r2, [pc, #224]	@ (8004468 <vInitPrioGroupValue+0xec>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d10b      	bne.n	80043a4 <vInitPrioGroupValue+0x28>
        __asm volatile
 800438c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004390:	f383 8811 	msr	BASEPRI, r3
 8004394:	f3bf 8f6f 	isb	sy
 8004398:	f3bf 8f4f 	dsb	sy
 800439c:	613b      	str	r3, [r7, #16]
    }
 800439e:	bf00      	nop
 80043a0:	bf00      	nop
 80043a2:	e7fd      	b.n	80043a0 <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80043a4:	4b2f      	ldr	r3, [pc, #188]	@ (8004464 <vInitPrioGroupValue+0xe8>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a30      	ldr	r2, [pc, #192]	@ (800446c <vInitPrioGroupValue+0xf0>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d10b      	bne.n	80043c6 <vInitPrioGroupValue+0x4a>
        __asm volatile
 80043ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043b2:	f383 8811 	msr	BASEPRI, r3
 80043b6:	f3bf 8f6f 	isb	sy
 80043ba:	f3bf 8f4f 	dsb	sy
 80043be:	60fb      	str	r3, [r7, #12]
    }
 80043c0:	bf00      	nop
 80043c2:	bf00      	nop
 80043c4:	e7fd      	b.n	80043c2 <vInitPrioGroupValue+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80043c6:	4b2a      	ldr	r3, [pc, #168]	@ (8004470 <vInitPrioGroupValue+0xf4>)
 80043c8:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	781b      	ldrb	r3, [r3, #0]
 80043ce:	b2db      	uxtb	r3, r3
 80043d0:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	22ff      	movs	r2, #255	@ 0xff
 80043d6:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	781b      	ldrb	r3, [r3, #0]
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80043e0:	78fb      	ldrb	r3, [r7, #3]
 80043e2:	b2db      	uxtb	r3, r3
 80043e4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80043e8:	b2da      	uxtb	r2, r3
 80043ea:	4b22      	ldr	r3, [pc, #136]	@ (8004474 <vInitPrioGroupValue+0xf8>)
 80043ec:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80043ee:	4b22      	ldr	r3, [pc, #136]	@ (8004478 <vInitPrioGroupValue+0xfc>)
 80043f0:	2207      	movs	r2, #7
 80043f2:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80043f4:	e009      	b.n	800440a <vInitPrioGroupValue+0x8e>
            {
                ulMaxPRIGROUPValue--;
 80043f6:	4b20      	ldr	r3, [pc, #128]	@ (8004478 <vInitPrioGroupValue+0xfc>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	3b01      	subs	r3, #1
 80043fc:	4a1e      	ldr	r2, [pc, #120]	@ (8004478 <vInitPrioGroupValue+0xfc>)
 80043fe:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004400:	78fb      	ldrb	r3, [r7, #3]
 8004402:	b2db      	uxtb	r3, r3
 8004404:	005b      	lsls	r3, r3, #1
 8004406:	b2db      	uxtb	r3, r3
 8004408:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800440a:	78fb      	ldrb	r3, [r7, #3]
 800440c:	b2db      	uxtb	r3, r3
 800440e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004412:	2b80      	cmp	r3, #128	@ 0x80
 8004414:	d0ef      	beq.n	80043f6 <vInitPrioGroupValue+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004416:	4b18      	ldr	r3, [pc, #96]	@ (8004478 <vInitPrioGroupValue+0xfc>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f1c3 0307 	rsb	r3, r3, #7
 800441e:	2b04      	cmp	r3, #4
 8004420:	d00b      	beq.n	800443a <vInitPrioGroupValue+0xbe>
        __asm volatile
 8004422:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004426:	f383 8811 	msr	BASEPRI, r3
 800442a:	f3bf 8f6f 	isb	sy
 800442e:	f3bf 8f4f 	dsb	sy
 8004432:	60bb      	str	r3, [r7, #8]
    }
 8004434:	bf00      	nop
 8004436:	bf00      	nop
 8004438:	e7fd      	b.n	8004436 <vInitPrioGroupValue+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800443a:	4b0f      	ldr	r3, [pc, #60]	@ (8004478 <vInitPrioGroupValue+0xfc>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	021b      	lsls	r3, r3, #8
 8004440:	4a0d      	ldr	r2, [pc, #52]	@ (8004478 <vInitPrioGroupValue+0xfc>)
 8004442:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004444:	4b0c      	ldr	r3, [pc, #48]	@ (8004478 <vInitPrioGroupValue+0xfc>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800444c:	4a0a      	ldr	r2, [pc, #40]	@ (8004478 <vInitPrioGroupValue+0xfc>)
 800444e:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	b2da      	uxtb	r2, r3
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8004458:	bf00      	nop
 800445a:	371c      	adds	r7, #28
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr
 8004464:	e000ed00 	.word	0xe000ed00
 8004468:	410fc271 	.word	0x410fc271
 800446c:	410fc270 	.word	0x410fc270
 8004470:	e000e400 	.word	0xe000e400
 8004474:	20000254 	.word	0x20000254
 8004478:	20000258 	.word	0x20000258

0800447c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800447c:	b480      	push	{r7}
 800447e:	b083      	sub	sp, #12
 8004480:	af00      	add	r7, sp, #0
        __asm volatile
 8004482:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004486:	f383 8811 	msr	BASEPRI, r3
 800448a:	f3bf 8f6f 	isb	sy
 800448e:	f3bf 8f4f 	dsb	sy
 8004492:	607b      	str	r3, [r7, #4]
    }
 8004494:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004496:	4b10      	ldr	r3, [pc, #64]	@ (80044d8 <vPortEnterCritical+0x5c>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	3301      	adds	r3, #1
 800449c:	4a0e      	ldr	r2, [pc, #56]	@ (80044d8 <vPortEnterCritical+0x5c>)
 800449e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80044a0:	4b0d      	ldr	r3, [pc, #52]	@ (80044d8 <vPortEnterCritical+0x5c>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d110      	bne.n	80044ca <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80044a8:	4b0c      	ldr	r3, [pc, #48]	@ (80044dc <vPortEnterCritical+0x60>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d00b      	beq.n	80044ca <vPortEnterCritical+0x4e>
        __asm volatile
 80044b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044b6:	f383 8811 	msr	BASEPRI, r3
 80044ba:	f3bf 8f6f 	isb	sy
 80044be:	f3bf 8f4f 	dsb	sy
 80044c2:	603b      	str	r3, [r7, #0]
    }
 80044c4:	bf00      	nop
 80044c6:	bf00      	nop
 80044c8:	e7fd      	b.n	80044c6 <vPortEnterCritical+0x4a>
    }
}
 80044ca:	bf00      	nop
 80044cc:	370c      	adds	r7, #12
 80044ce:	46bd      	mov	sp, r7
 80044d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d4:	4770      	bx	lr
 80044d6:	bf00      	nop
 80044d8:	20000010 	.word	0x20000010
 80044dc:	e000ed04 	.word	0xe000ed04

080044e0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80044e0:	b480      	push	{r7}
 80044e2:	b083      	sub	sp, #12
 80044e4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80044e6:	4b12      	ldr	r3, [pc, #72]	@ (8004530 <vPortExitCritical+0x50>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d10b      	bne.n	8004506 <vPortExitCritical+0x26>
        __asm volatile
 80044ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044f2:	f383 8811 	msr	BASEPRI, r3
 80044f6:	f3bf 8f6f 	isb	sy
 80044fa:	f3bf 8f4f 	dsb	sy
 80044fe:	607b      	str	r3, [r7, #4]
    }
 8004500:	bf00      	nop
 8004502:	bf00      	nop
 8004504:	e7fd      	b.n	8004502 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004506:	4b0a      	ldr	r3, [pc, #40]	@ (8004530 <vPortExitCritical+0x50>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	3b01      	subs	r3, #1
 800450c:	4a08      	ldr	r2, [pc, #32]	@ (8004530 <vPortExitCritical+0x50>)
 800450e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004510:	4b07      	ldr	r3, [pc, #28]	@ (8004530 <vPortExitCritical+0x50>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d105      	bne.n	8004524 <vPortExitCritical+0x44>
 8004518:	2300      	movs	r3, #0
 800451a:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8004522:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004524:	bf00      	nop
 8004526:	370c      	adds	r7, #12
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr
 8004530:	20000010 	.word	0x20000010
	...

08004540 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004540:	f3ef 8009 	mrs	r0, PSP
 8004544:	f3bf 8f6f 	isb	sy
 8004548:	4b15      	ldr	r3, [pc, #84]	@ (80045a0 <pxCurrentTCBConst>)
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	f01e 0f10 	tst.w	lr, #16
 8004550:	bf08      	it	eq
 8004552:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004556:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800455a:	6010      	str	r0, [r2, #0]
 800455c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004560:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004564:	f380 8811 	msr	BASEPRI, r0
 8004568:	f3bf 8f4f 	dsb	sy
 800456c:	f3bf 8f6f 	isb	sy
 8004570:	f7fe ffc0 	bl	80034f4 <vTaskSwitchContext>
 8004574:	f04f 0000 	mov.w	r0, #0
 8004578:	f380 8811 	msr	BASEPRI, r0
 800457c:	bc09      	pop	{r0, r3}
 800457e:	6819      	ldr	r1, [r3, #0]
 8004580:	6808      	ldr	r0, [r1, #0]
 8004582:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004586:	f01e 0f10 	tst.w	lr, #16
 800458a:	bf08      	it	eq
 800458c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004590:	f380 8809 	msr	PSP, r0
 8004594:	f3bf 8f6f 	isb	sy
 8004598:	4770      	bx	lr
 800459a:	bf00      	nop
 800459c:	f3af 8000 	nop.w

080045a0 <pxCurrentTCBConst>:
 80045a0:	20000114 	.word	0x20000114
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80045a4:	bf00      	nop
 80045a6:	bf00      	nop

080045a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b082      	sub	sp, #8
 80045ac:	af00      	add	r7, sp, #0
        __asm volatile
 80045ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045b2:	f383 8811 	msr	BASEPRI, r3
 80045b6:	f3bf 8f6f 	isb	sy
 80045ba:	f3bf 8f4f 	dsb	sy
 80045be:	607b      	str	r3, [r7, #4]
    }
 80045c0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 80045c2:	f002 f9c7 	bl	8006954 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80045c6:	f7fe fe9d 	bl	8003304 <xTaskIncrementTick>
 80045ca:	4603      	mov	r3, r0
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d006      	beq.n	80045de <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 80045d0:	f002 fa1e 	bl	8006a10 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80045d4:	4b08      	ldr	r3, [pc, #32]	@ (80045f8 <SysTick_Handler+0x50>)
 80045d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80045da:	601a      	str	r2, [r3, #0]
 80045dc:	e001      	b.n	80045e2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 80045de:	f002 f9fb 	bl	80069d8 <SEGGER_SYSVIEW_RecordExitISR>
 80045e2:	2300      	movs	r3, #0
 80045e4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	f383 8811 	msr	BASEPRI, r3
    }
 80045ec:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 80045ee:	bf00      	nop
 80045f0:	3708      	adds	r7, #8
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}
 80045f6:	bf00      	nop
 80045f8:	e000ed04 	.word	0xe000ed04

080045fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80045fc:	b480      	push	{r7}
 80045fe:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004600:	4b0b      	ldr	r3, [pc, #44]	@ (8004630 <vPortSetupTimerInterrupt+0x34>)
 8004602:	2200      	movs	r2, #0
 8004604:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004606:	4b0b      	ldr	r3, [pc, #44]	@ (8004634 <vPortSetupTimerInterrupt+0x38>)
 8004608:	2200      	movs	r2, #0
 800460a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800460c:	4b0a      	ldr	r3, [pc, #40]	@ (8004638 <vPortSetupTimerInterrupt+0x3c>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a0a      	ldr	r2, [pc, #40]	@ (800463c <vPortSetupTimerInterrupt+0x40>)
 8004612:	fba2 2303 	umull	r2, r3, r2, r3
 8004616:	099b      	lsrs	r3, r3, #6
 8004618:	4a09      	ldr	r2, [pc, #36]	@ (8004640 <vPortSetupTimerInterrupt+0x44>)
 800461a:	3b01      	subs	r3, #1
 800461c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800461e:	4b04      	ldr	r3, [pc, #16]	@ (8004630 <vPortSetupTimerInterrupt+0x34>)
 8004620:	2207      	movs	r2, #7
 8004622:	601a      	str	r2, [r3, #0]
}
 8004624:	bf00      	nop
 8004626:	46bd      	mov	sp, r7
 8004628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462c:	4770      	bx	lr
 800462e:	bf00      	nop
 8004630:	e000e010 	.word	0xe000e010
 8004634:	e000e018 	.word	0xe000e018
 8004638:	20000000 	.word	0x20000000
 800463c:	10624dd3 	.word	0x10624dd3
 8004640:	e000e014 	.word	0xe000e014

08004644 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004644:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004654 <vPortEnableVFP+0x10>
 8004648:	6801      	ldr	r1, [r0, #0]
 800464a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800464e:	6001      	str	r1, [r0, #0]
 8004650:	4770      	bx	lr
 8004652:	0000      	.short	0x0000
 8004654:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004658:	bf00      	nop
 800465a:	bf00      	nop

0800465c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800465c:	b480      	push	{r7}
 800465e:	b085      	sub	sp, #20
 8004660:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004662:	f3ef 8305 	mrs	r3, IPSR
 8004666:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2b0f      	cmp	r3, #15
 800466c:	d915      	bls.n	800469a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800466e:	4a18      	ldr	r2, [pc, #96]	@ (80046d0 <vPortValidateInterruptPriority+0x74>)
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	4413      	add	r3, r2
 8004674:	781b      	ldrb	r3, [r3, #0]
 8004676:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004678:	4b16      	ldr	r3, [pc, #88]	@ (80046d4 <vPortValidateInterruptPriority+0x78>)
 800467a:	781b      	ldrb	r3, [r3, #0]
 800467c:	7afa      	ldrb	r2, [r7, #11]
 800467e:	429a      	cmp	r2, r3
 8004680:	d20b      	bcs.n	800469a <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 8004682:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004686:	f383 8811 	msr	BASEPRI, r3
 800468a:	f3bf 8f6f 	isb	sy
 800468e:	f3bf 8f4f 	dsb	sy
 8004692:	607b      	str	r3, [r7, #4]
    }
 8004694:	bf00      	nop
 8004696:	bf00      	nop
 8004698:	e7fd      	b.n	8004696 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800469a:	4b0f      	ldr	r3, [pc, #60]	@ (80046d8 <vPortValidateInterruptPriority+0x7c>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80046a2:	4b0e      	ldr	r3, [pc, #56]	@ (80046dc <vPortValidateInterruptPriority+0x80>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d90b      	bls.n	80046c2 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 80046aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046ae:	f383 8811 	msr	BASEPRI, r3
 80046b2:	f3bf 8f6f 	isb	sy
 80046b6:	f3bf 8f4f 	dsb	sy
 80046ba:	603b      	str	r3, [r7, #0]
    }
 80046bc:	bf00      	nop
 80046be:	bf00      	nop
 80046c0:	e7fd      	b.n	80046be <vPortValidateInterruptPriority+0x62>
    }
 80046c2:	bf00      	nop
 80046c4:	3714      	adds	r7, #20
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr
 80046ce:	bf00      	nop
 80046d0:	e000e3f0 	.word	0xe000e3f0
 80046d4:	20000254 	.word	0x20000254
 80046d8:	e000ed0c 	.word	0xe000ed0c
 80046dc:	20000258 	.word	0x20000258

080046e0 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b08a      	sub	sp, #40	@ 0x28
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 80046e8:	2300      	movs	r3, #0
 80046ea:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 80046ec:	f7fe fce8 	bl	80030c0 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80046f0:	4b54      	ldr	r3, [pc, #336]	@ (8004844 <pvPortMalloc+0x164>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d101      	bne.n	80046fc <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80046f8:	f000 f90c 	bl	8004914 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d012      	beq.n	8004728 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8004702:	2208      	movs	r2, #8
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	f003 0307 	and.w	r3, r3, #7
 800470a:	1ad3      	subs	r3, r2, r3
 800470c:	3308      	adds	r3, #8
 800470e:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8004710:	69bb      	ldr	r3, [r7, #24]
 8004712:	43db      	mvns	r3, r3
 8004714:	687a      	ldr	r2, [r7, #4]
 8004716:	429a      	cmp	r2, r3
 8004718:	d804      	bhi.n	8004724 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 800471a:	687a      	ldr	r2, [r7, #4]
 800471c:	69bb      	ldr	r3, [r7, #24]
 800471e:	4413      	add	r3, r2
 8004720:	607b      	str	r3, [r7, #4]
 8004722:	e001      	b.n	8004728 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8004724:	2300      	movs	r3, #0
 8004726:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2b00      	cmp	r3, #0
 800472c:	db71      	blt.n	8004812 <pvPortMalloc+0x132>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d06e      	beq.n	8004812 <pvPortMalloc+0x132>
 8004734:	4b44      	ldr	r3, [pc, #272]	@ (8004848 <pvPortMalloc+0x168>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	687a      	ldr	r2, [r7, #4]
 800473a:	429a      	cmp	r2, r3
 800473c:	d869      	bhi.n	8004812 <pvPortMalloc+0x132>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800473e:	4b43      	ldr	r3, [pc, #268]	@ (800484c <pvPortMalloc+0x16c>)
 8004740:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004742:	4b42      	ldr	r3, [pc, #264]	@ (800484c <pvPortMalloc+0x16c>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004748:	e004      	b.n	8004754 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 800474a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800474c:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800474e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	687a      	ldr	r2, [r7, #4]
 800475a:	429a      	cmp	r2, r3
 800475c:	d903      	bls.n	8004766 <pvPortMalloc+0x86>
 800475e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d1f1      	bne.n	800474a <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004766:	4b37      	ldr	r3, [pc, #220]	@ (8004844 <pvPortMalloc+0x164>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800476c:	429a      	cmp	r2, r3
 800476e:	d050      	beq.n	8004812 <pvPortMalloc+0x132>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004770:	6a3b      	ldr	r3, [r7, #32]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	2208      	movs	r2, #8
 8004776:	4413      	add	r3, r2
 8004778:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800477a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	6a3b      	ldr	r3, [r7, #32]
 8004780:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004784:	685a      	ldr	r2, [r3, #4]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	1ad2      	subs	r2, r2, r3
 800478a:	2308      	movs	r3, #8
 800478c:	005b      	lsls	r3, r3, #1
 800478e:	429a      	cmp	r2, r3
 8004790:	d920      	bls.n	80047d4 <pvPortMalloc+0xf4>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004792:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	4413      	add	r3, r2
 8004798:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	f003 0307 	and.w	r3, r3, #7
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d00b      	beq.n	80047bc <pvPortMalloc+0xdc>
        __asm volatile
 80047a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047a8:	f383 8811 	msr	BASEPRI, r3
 80047ac:	f3bf 8f6f 	isb	sy
 80047b0:	f3bf 8f4f 	dsb	sy
 80047b4:	613b      	str	r3, [r7, #16]
    }
 80047b6:	bf00      	nop
 80047b8:	bf00      	nop
 80047ba:	e7fd      	b.n	80047b8 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80047bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047be:	685a      	ldr	r2, [r3, #4]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	1ad2      	subs	r2, r2, r3
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80047c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ca:	687a      	ldr	r2, [r7, #4]
 80047cc:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80047ce:	6978      	ldr	r0, [r7, #20]
 80047d0:	f000 f8fc 	bl	80049cc <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80047d4:	4b1c      	ldr	r3, [pc, #112]	@ (8004848 <pvPortMalloc+0x168>)
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	4a1a      	ldr	r2, [pc, #104]	@ (8004848 <pvPortMalloc+0x168>)
 80047e0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80047e2:	4b19      	ldr	r3, [pc, #100]	@ (8004848 <pvPortMalloc+0x168>)
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	4b1a      	ldr	r3, [pc, #104]	@ (8004850 <pvPortMalloc+0x170>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	429a      	cmp	r2, r3
 80047ec:	d203      	bcs.n	80047f6 <pvPortMalloc+0x116>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80047ee:	4b16      	ldr	r3, [pc, #88]	@ (8004848 <pvPortMalloc+0x168>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a17      	ldr	r2, [pc, #92]	@ (8004850 <pvPortMalloc+0x170>)
 80047f4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 80047f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80047fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004800:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004804:	2200      	movs	r2, #0
 8004806:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004808:	4b12      	ldr	r3, [pc, #72]	@ (8004854 <pvPortMalloc+0x174>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	3301      	adds	r3, #1
 800480e:	4a11      	ldr	r2, [pc, #68]	@ (8004854 <pvPortMalloc+0x174>)
 8004810:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004812:	f7fe fc63 	bl	80030dc <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004816:	69fb      	ldr	r3, [r7, #28]
 8004818:	f003 0307 	and.w	r3, r3, #7
 800481c:	2b00      	cmp	r3, #0
 800481e:	d00b      	beq.n	8004838 <pvPortMalloc+0x158>
        __asm volatile
 8004820:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004824:	f383 8811 	msr	BASEPRI, r3
 8004828:	f3bf 8f6f 	isb	sy
 800482c:	f3bf 8f4f 	dsb	sy
 8004830:	60fb      	str	r3, [r7, #12]
    }
 8004832:	bf00      	nop
 8004834:	bf00      	nop
 8004836:	e7fd      	b.n	8004834 <pvPortMalloc+0x154>
    return pvReturn;
 8004838:	69fb      	ldr	r3, [r7, #28]
}
 800483a:	4618      	mov	r0, r3
 800483c:	3728      	adds	r7, #40	@ 0x28
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
 8004842:	bf00      	nop
 8004844:	20012e64 	.word	0x20012e64
 8004848:	20012e68 	.word	0x20012e68
 800484c:	20012e5c 	.word	0x20012e5c
 8004850:	20012e6c 	.word	0x20012e6c
 8004854:	20012e70 	.word	0x20012e70

08004858 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b086      	sub	sp, #24
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d04b      	beq.n	8004902 <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800486a:	2308      	movs	r3, #8
 800486c:	425b      	negs	r3, r3
 800486e:	697a      	ldr	r2, [r7, #20]
 8004870:	4413      	add	r3, r2
 8004872:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	2b00      	cmp	r3, #0
 800487e:	db0b      	blt.n	8004898 <vPortFree+0x40>
        __asm volatile
 8004880:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004884:	f383 8811 	msr	BASEPRI, r3
 8004888:	f3bf 8f6f 	isb	sy
 800488c:	f3bf 8f4f 	dsb	sy
 8004890:	60fb      	str	r3, [r7, #12]
    }
 8004892:	bf00      	nop
 8004894:	bf00      	nop
 8004896:	e7fd      	b.n	8004894 <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d00b      	beq.n	80048b8 <vPortFree+0x60>
        __asm volatile
 80048a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048a4:	f383 8811 	msr	BASEPRI, r3
 80048a8:	f3bf 8f6f 	isb	sy
 80048ac:	f3bf 8f4f 	dsb	sy
 80048b0:	60bb      	str	r3, [r7, #8]
    }
 80048b2:	bf00      	nop
 80048b4:	bf00      	nop
 80048b6:	e7fd      	b.n	80048b4 <vPortFree+0x5c>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	0fdb      	lsrs	r3, r3, #31
 80048be:	f003 0301 	and.w	r3, r3, #1
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d01c      	beq.n	8004902 <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d118      	bne.n	8004902 <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 80048dc:	f7fe fbf0 	bl	80030c0 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	685a      	ldr	r2, [r3, #4]
 80048e4:	4b09      	ldr	r3, [pc, #36]	@ (800490c <vPortFree+0xb4>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4413      	add	r3, r2
 80048ea:	4a08      	ldr	r2, [pc, #32]	@ (800490c <vPortFree+0xb4>)
 80048ec:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80048ee:	6938      	ldr	r0, [r7, #16]
 80048f0:	f000 f86c 	bl	80049cc <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80048f4:	4b06      	ldr	r3, [pc, #24]	@ (8004910 <vPortFree+0xb8>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	3301      	adds	r3, #1
 80048fa:	4a05      	ldr	r2, [pc, #20]	@ (8004910 <vPortFree+0xb8>)
 80048fc:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80048fe:	f7fe fbed 	bl	80030dc <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004902:	bf00      	nop
 8004904:	3718      	adds	r7, #24
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}
 800490a:	bf00      	nop
 800490c:	20012e68 	.word	0x20012e68
 8004910:	20012e74 	.word	0x20012e74

08004914 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004914:	b480      	push	{r7}
 8004916:	b085      	sub	sp, #20
 8004918:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800491a:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 800491e:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004920:	4b25      	ldr	r3, [pc, #148]	@ (80049b8 <prvHeapInit+0xa4>)
 8004922:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f003 0307 	and.w	r3, r3, #7
 800492a:	2b00      	cmp	r3, #0
 800492c:	d00c      	beq.n	8004948 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	3307      	adds	r3, #7
 8004932:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	f023 0307 	bic.w	r3, r3, #7
 800493a:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 800493c:	68ba      	ldr	r2, [r7, #8]
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	1ad3      	subs	r3, r2, r3
 8004942:	4a1d      	ldr	r2, [pc, #116]	@ (80049b8 <prvHeapInit+0xa4>)
 8004944:	4413      	add	r3, r2
 8004946:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800494c:	4a1b      	ldr	r2, [pc, #108]	@ (80049bc <prvHeapInit+0xa8>)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004952:	4b1a      	ldr	r3, [pc, #104]	@ (80049bc <prvHeapInit+0xa8>)
 8004954:	2200      	movs	r2, #0
 8004956:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	68ba      	ldr	r2, [r7, #8]
 800495c:	4413      	add	r3, r2
 800495e:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004960:	2208      	movs	r2, #8
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	1a9b      	subs	r3, r3, r2
 8004966:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f023 0307 	bic.w	r3, r3, #7
 800496e:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	4a13      	ldr	r2, [pc, #76]	@ (80049c0 <prvHeapInit+0xac>)
 8004974:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004976:	4b12      	ldr	r3, [pc, #72]	@ (80049c0 <prvHeapInit+0xac>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	2200      	movs	r2, #0
 800497c:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800497e:	4b10      	ldr	r3, [pc, #64]	@ (80049c0 <prvHeapInit+0xac>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	2200      	movs	r2, #0
 8004984:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	68fa      	ldr	r2, [r7, #12]
 800498e:	1ad2      	subs	r2, r2, r3
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004994:	4b0a      	ldr	r3, [pc, #40]	@ (80049c0 <prvHeapInit+0xac>)
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	4a08      	ldr	r2, [pc, #32]	@ (80049c4 <prvHeapInit+0xb0>)
 80049a2:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	4a07      	ldr	r2, [pc, #28]	@ (80049c8 <prvHeapInit+0xb4>)
 80049aa:	6013      	str	r3, [r2, #0]
}
 80049ac:	bf00      	nop
 80049ae:	3714      	adds	r7, #20
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr
 80049b8:	2000025c 	.word	0x2000025c
 80049bc:	20012e5c 	.word	0x20012e5c
 80049c0:	20012e64 	.word	0x20012e64
 80049c4:	20012e6c 	.word	0x20012e6c
 80049c8:	20012e68 	.word	0x20012e68

080049cc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80049cc:	b480      	push	{r7}
 80049ce:	b085      	sub	sp, #20
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80049d4:	4b28      	ldr	r3, [pc, #160]	@ (8004a78 <prvInsertBlockIntoFreeList+0xac>)
 80049d6:	60fb      	str	r3, [r7, #12]
 80049d8:	e002      	b.n	80049e0 <prvInsertBlockIntoFreeList+0x14>
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	60fb      	str	r3, [r7, #12]
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	687a      	ldr	r2, [r7, #4]
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d8f7      	bhi.n	80049da <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	68ba      	ldr	r2, [r7, #8]
 80049f4:	4413      	add	r3, r2
 80049f6:	687a      	ldr	r2, [r7, #4]
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d108      	bne.n	8004a0e <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	685a      	ldr	r2, [r3, #4]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	441a      	add	r2, r3
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	68ba      	ldr	r2, [r7, #8]
 8004a18:	441a      	add	r2, r3
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	d118      	bne.n	8004a54 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	4b15      	ldr	r3, [pc, #84]	@ (8004a7c <prvInsertBlockIntoFreeList+0xb0>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	d00d      	beq.n	8004a4a <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	685a      	ldr	r2, [r3, #4]
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	441a      	add	r2, r3
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	601a      	str	r2, [r3, #0]
 8004a48:	e008      	b.n	8004a5c <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004a4a:	4b0c      	ldr	r3, [pc, #48]	@ (8004a7c <prvInsertBlockIntoFreeList+0xb0>)
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	601a      	str	r2, [r3, #0]
 8004a52:	e003      	b.n	8004a5c <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004a5c:	68fa      	ldr	r2, [r7, #12]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d002      	beq.n	8004a6a <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	687a      	ldr	r2, [r7, #4]
 8004a68:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004a6a:	bf00      	nop
 8004a6c:	3714      	adds	r7, #20
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr
 8004a76:	bf00      	nop
 8004a78:	20012e5c 	.word	0x20012e5c
 8004a7c:	20012e64 	.word	0x20012e64

08004a80 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004a80:	b580      	push	{r7, lr}
 8004a82:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004a84:	4803      	ldr	r0, [pc, #12]	@ (8004a94 <_cbSendSystemDesc+0x14>)
 8004a86:	f001 ff0f 	bl	80068a8 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004a8a:	4803      	ldr	r0, [pc, #12]	@ (8004a98 <_cbSendSystemDesc+0x18>)
 8004a8c:	f001 ff0c 	bl	80068a8 <SEGGER_SYSVIEW_SendSysDesc>
}
 8004a90:	bf00      	nop
 8004a92:	bd80      	pop	{r7, pc}
 8004a94:	08007cb8 	.word	0x08007cb8
 8004a98:	08007cf4 	.word	0x08007cf4

08004a9c <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004aa0:	4b06      	ldr	r3, [pc, #24]	@ (8004abc <SEGGER_SYSVIEW_Conf+0x20>)
 8004aa2:	6818      	ldr	r0, [r3, #0]
 8004aa4:	4b05      	ldr	r3, [pc, #20]	@ (8004abc <SEGGER_SYSVIEW_Conf+0x20>)
 8004aa6:	6819      	ldr	r1, [r3, #0]
 8004aa8:	4b05      	ldr	r3, [pc, #20]	@ (8004ac0 <SEGGER_SYSVIEW_Conf+0x24>)
 8004aaa:	4a06      	ldr	r2, [pc, #24]	@ (8004ac4 <SEGGER_SYSVIEW_Conf+0x28>)
 8004aac:	f001 fa78 	bl	8005fa0 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004ab0:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8004ab4:	f001 fab8 	bl	8006028 <SEGGER_SYSVIEW_SetRAMBase>
}
 8004ab8:	bf00      	nop
 8004aba:	bd80      	pop	{r7, pc}
 8004abc:	20000000 	.word	0x20000000
 8004ac0:	08004a81 	.word	0x08004a81
 8004ac4:	08007d94 	.word	0x08007d94

08004ac8 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004aca:	b085      	sub	sp, #20
 8004acc:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004ace:	2300      	movs	r3, #0
 8004ad0:	607b      	str	r3, [r7, #4]
 8004ad2:	e033      	b.n	8004b3c <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004ad4:	491e      	ldr	r1, [pc, #120]	@ (8004b50 <_cbSendTaskList+0x88>)
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	4613      	mov	r3, r2
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	4413      	add	r3, r2
 8004ade:	009b      	lsls	r3, r3, #2
 8004ae0:	440b      	add	r3, r1
 8004ae2:	6818      	ldr	r0, [r3, #0]
 8004ae4:	491a      	ldr	r1, [pc, #104]	@ (8004b50 <_cbSendTaskList+0x88>)
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	4613      	mov	r3, r2
 8004aea:	009b      	lsls	r3, r3, #2
 8004aec:	4413      	add	r3, r2
 8004aee:	009b      	lsls	r3, r3, #2
 8004af0:	440b      	add	r3, r1
 8004af2:	3304      	adds	r3, #4
 8004af4:	6819      	ldr	r1, [r3, #0]
 8004af6:	4c16      	ldr	r4, [pc, #88]	@ (8004b50 <_cbSendTaskList+0x88>)
 8004af8:	687a      	ldr	r2, [r7, #4]
 8004afa:	4613      	mov	r3, r2
 8004afc:	009b      	lsls	r3, r3, #2
 8004afe:	4413      	add	r3, r2
 8004b00:	009b      	lsls	r3, r3, #2
 8004b02:	4423      	add	r3, r4
 8004b04:	3308      	adds	r3, #8
 8004b06:	681c      	ldr	r4, [r3, #0]
 8004b08:	4d11      	ldr	r5, [pc, #68]	@ (8004b50 <_cbSendTaskList+0x88>)
 8004b0a:	687a      	ldr	r2, [r7, #4]
 8004b0c:	4613      	mov	r3, r2
 8004b0e:	009b      	lsls	r3, r3, #2
 8004b10:	4413      	add	r3, r2
 8004b12:	009b      	lsls	r3, r3, #2
 8004b14:	442b      	add	r3, r5
 8004b16:	330c      	adds	r3, #12
 8004b18:	681d      	ldr	r5, [r3, #0]
 8004b1a:	4e0d      	ldr	r6, [pc, #52]	@ (8004b50 <_cbSendTaskList+0x88>)
 8004b1c:	687a      	ldr	r2, [r7, #4]
 8004b1e:	4613      	mov	r3, r2
 8004b20:	009b      	lsls	r3, r3, #2
 8004b22:	4413      	add	r3, r2
 8004b24:	009b      	lsls	r3, r3, #2
 8004b26:	4433      	add	r3, r6
 8004b28:	3310      	adds	r3, #16
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	9300      	str	r3, [sp, #0]
 8004b2e:	462b      	mov	r3, r5
 8004b30:	4622      	mov	r2, r4
 8004b32:	f000 f8bd 	bl	8004cb0 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	3301      	adds	r3, #1
 8004b3a:	607b      	str	r3, [r7, #4]
 8004b3c:	4b05      	ldr	r3, [pc, #20]	@ (8004b54 <_cbSendTaskList+0x8c>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	687a      	ldr	r2, [r7, #4]
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d3c6      	bcc.n	8004ad4 <_cbSendTaskList+0xc>
  }
}
 8004b46:	bf00      	nop
 8004b48:	bf00      	nop
 8004b4a:	370c      	adds	r7, #12
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b50:	20012e78 	.word	0x20012e78
 8004b54:	20012f18 	.word	0x20012f18

08004b58 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004b58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b5c:	b082      	sub	sp, #8
 8004b5e:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004b60:	f7fe fbbe 	bl	80032e0 <xTaskGetTickCountFromISR>
 8004b64:	4603      	mov	r3, r0
 8004b66:	2200      	movs	r2, #0
 8004b68:	469a      	mov	sl, r3
 8004b6a:	4693      	mov	fp, r2
 8004b6c:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004b70:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004b74:	4602      	mov	r2, r0
 8004b76:	460b      	mov	r3, r1
 8004b78:	f04f 0a00 	mov.w	sl, #0
 8004b7c:	f04f 0b00 	mov.w	fp, #0
 8004b80:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8004b84:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8004b88:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8004b8c:	4652      	mov	r2, sl
 8004b8e:	465b      	mov	r3, fp
 8004b90:	1a14      	subs	r4, r2, r0
 8004b92:	eb63 0501 	sbc.w	r5, r3, r1
 8004b96:	f04f 0200 	mov.w	r2, #0
 8004b9a:	f04f 0300 	mov.w	r3, #0
 8004b9e:	00ab      	lsls	r3, r5, #2
 8004ba0:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8004ba4:	00a2      	lsls	r2, r4, #2
 8004ba6:	4614      	mov	r4, r2
 8004ba8:	461d      	mov	r5, r3
 8004baa:	eb14 0800 	adds.w	r8, r4, r0
 8004bae:	eb45 0901 	adc.w	r9, r5, r1
 8004bb2:	f04f 0200 	mov.w	r2, #0
 8004bb6:	f04f 0300 	mov.w	r3, #0
 8004bba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004bbe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004bc2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004bc6:	4690      	mov	r8, r2
 8004bc8:	4699      	mov	r9, r3
 8004bca:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8004bce:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004bd2:	4610      	mov	r0, r2
 8004bd4:	4619      	mov	r1, r3
 8004bd6:	3708      	adds	r7, #8
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08004be0 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b086      	sub	sp, #24
 8004be4:	af02      	add	r7, sp, #8
 8004be6:	60f8      	str	r0, [r7, #12]
 8004be8:	60b9      	str	r1, [r7, #8]
 8004bea:	607a      	str	r2, [r7, #4]
 8004bec:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004bee:	2205      	movs	r2, #5
 8004bf0:	492b      	ldr	r1, [pc, #172]	@ (8004ca0 <SYSVIEW_AddTask+0xc0>)
 8004bf2:	68b8      	ldr	r0, [r7, #8]
 8004bf4:	f002 fb58 	bl	80072a8 <memcmp>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d04b      	beq.n	8004c96 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004bfe:	4b29      	ldr	r3, [pc, #164]	@ (8004ca4 <SYSVIEW_AddTask+0xc4>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	2b07      	cmp	r3, #7
 8004c04:	d903      	bls.n	8004c0e <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004c06:	4828      	ldr	r0, [pc, #160]	@ (8004ca8 <SYSVIEW_AddTask+0xc8>)
 8004c08:	f002 f900 	bl	8006e0c <SEGGER_SYSVIEW_Warn>
    return;
 8004c0c:	e044      	b.n	8004c98 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004c0e:	4b25      	ldr	r3, [pc, #148]	@ (8004ca4 <SYSVIEW_AddTask+0xc4>)
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	4926      	ldr	r1, [pc, #152]	@ (8004cac <SYSVIEW_AddTask+0xcc>)
 8004c14:	4613      	mov	r3, r2
 8004c16:	009b      	lsls	r3, r3, #2
 8004c18:	4413      	add	r3, r2
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	440b      	add	r3, r1
 8004c1e:	68fa      	ldr	r2, [r7, #12]
 8004c20:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004c22:	4b20      	ldr	r3, [pc, #128]	@ (8004ca4 <SYSVIEW_AddTask+0xc4>)
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	4921      	ldr	r1, [pc, #132]	@ (8004cac <SYSVIEW_AddTask+0xcc>)
 8004c28:	4613      	mov	r3, r2
 8004c2a:	009b      	lsls	r3, r3, #2
 8004c2c:	4413      	add	r3, r2
 8004c2e:	009b      	lsls	r3, r3, #2
 8004c30:	440b      	add	r3, r1
 8004c32:	3304      	adds	r3, #4
 8004c34:	68ba      	ldr	r2, [r7, #8]
 8004c36:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004c38:	4b1a      	ldr	r3, [pc, #104]	@ (8004ca4 <SYSVIEW_AddTask+0xc4>)
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	491b      	ldr	r1, [pc, #108]	@ (8004cac <SYSVIEW_AddTask+0xcc>)
 8004c3e:	4613      	mov	r3, r2
 8004c40:	009b      	lsls	r3, r3, #2
 8004c42:	4413      	add	r3, r2
 8004c44:	009b      	lsls	r3, r3, #2
 8004c46:	440b      	add	r3, r1
 8004c48:	3308      	adds	r3, #8
 8004c4a:	687a      	ldr	r2, [r7, #4]
 8004c4c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004c4e:	4b15      	ldr	r3, [pc, #84]	@ (8004ca4 <SYSVIEW_AddTask+0xc4>)
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	4916      	ldr	r1, [pc, #88]	@ (8004cac <SYSVIEW_AddTask+0xcc>)
 8004c54:	4613      	mov	r3, r2
 8004c56:	009b      	lsls	r3, r3, #2
 8004c58:	4413      	add	r3, r2
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	440b      	add	r3, r1
 8004c5e:	330c      	adds	r3, #12
 8004c60:	683a      	ldr	r2, [r7, #0]
 8004c62:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004c64:	4b0f      	ldr	r3, [pc, #60]	@ (8004ca4 <SYSVIEW_AddTask+0xc4>)
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	4910      	ldr	r1, [pc, #64]	@ (8004cac <SYSVIEW_AddTask+0xcc>)
 8004c6a:	4613      	mov	r3, r2
 8004c6c:	009b      	lsls	r3, r3, #2
 8004c6e:	4413      	add	r3, r2
 8004c70:	009b      	lsls	r3, r3, #2
 8004c72:	440b      	add	r3, r1
 8004c74:	3310      	adds	r3, #16
 8004c76:	69ba      	ldr	r2, [r7, #24]
 8004c78:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004c7a:	4b0a      	ldr	r3, [pc, #40]	@ (8004ca4 <SYSVIEW_AddTask+0xc4>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	3301      	adds	r3, #1
 8004c80:	4a08      	ldr	r2, [pc, #32]	@ (8004ca4 <SYSVIEW_AddTask+0xc4>)
 8004c82:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004c84:	69bb      	ldr	r3, [r7, #24]
 8004c86:	9300      	str	r3, [sp, #0]
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	68b9      	ldr	r1, [r7, #8]
 8004c8e:	68f8      	ldr	r0, [r7, #12]
 8004c90:	f000 f80e 	bl	8004cb0 <SYSVIEW_SendTaskInfo>
 8004c94:	e000      	b.n	8004c98 <SYSVIEW_AddTask+0xb8>
    return;
 8004c96:	bf00      	nop

}
 8004c98:	3710      	adds	r7, #16
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}
 8004c9e:	bf00      	nop
 8004ca0:	08007d04 	.word	0x08007d04
 8004ca4:	20012f18 	.word	0x20012f18
 8004ca8:	08007d0c 	.word	0x08007d0c
 8004cac:	20012e78 	.word	0x20012e78

08004cb0 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b08a      	sub	sp, #40	@ 0x28
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	60f8      	str	r0, [r7, #12]
 8004cb8:	60b9      	str	r1, [r7, #8]
 8004cba:	607a      	str	r2, [r7, #4]
 8004cbc:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004cbe:	f107 0314 	add.w	r3, r7, #20
 8004cc2:	2214      	movs	r2, #20
 8004cc4:	2100      	movs	r1, #0
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f002 fafe 	bl	80072c8 <memset>
  TaskInfo.TaskID     = TaskID;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8004cdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cde:	627b      	str	r3, [r7, #36]	@ 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004ce0:	f107 0314 	add.w	r3, r7, #20
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f001 fce7 	bl	80066b8 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8004cea:	bf00      	nop
 8004cec:	3728      	adds	r7, #40	@ 0x28
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
	...

08004cf4 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8004cf4:	b480      	push	{r7}
 8004cf6:	b083      	sub	sp, #12
 8004cf8:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8004cfa:	4b24      	ldr	r3, [pc, #144]	@ (8004d8c <_DoInit+0x98>)
 8004cfc:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2203      	movs	r2, #3
 8004d02:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2203      	movs	r2, #3
 8004d08:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	4a20      	ldr	r2, [pc, #128]	@ (8004d90 <_DoInit+0x9c>)
 8004d0e:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	4a20      	ldr	r2, [pc, #128]	@ (8004d94 <_DoInit+0xa0>)
 8004d14:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004d1c:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2200      	movs	r2, #0
 8004d22:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2200      	movs	r2, #0
 8004d28:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	4a17      	ldr	r2, [pc, #92]	@ (8004d90 <_DoInit+0x9c>)
 8004d34:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	4a17      	ldr	r2, [pc, #92]	@ (8004d98 <_DoInit+0xa4>)
 8004d3a:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2210      	movs	r2, #16
 8004d40:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2200      	movs	r2, #0
 8004d46:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2200      	movs	r2, #0
 8004d52:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	3307      	adds	r3, #7
 8004d58:	4a10      	ldr	r2, [pc, #64]	@ (8004d9c <_DoInit+0xa8>)
 8004d5a:	6810      	ldr	r0, [r2, #0]
 8004d5c:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004d5e:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	4a0e      	ldr	r2, [pc, #56]	@ (8004da0 <_DoInit+0xac>)
 8004d66:	6810      	ldr	r0, [r2, #0]
 8004d68:	6018      	str	r0, [r3, #0]
 8004d6a:	8891      	ldrh	r1, [r2, #4]
 8004d6c:	7992      	ldrb	r2, [r2, #6]
 8004d6e:	8099      	strh	r1, [r3, #4]
 8004d70:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004d72:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2220      	movs	r2, #32
 8004d7a:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004d7c:	f3bf 8f5f 	dmb	sy
}
 8004d80:	bf00      	nop
 8004d82:	370c      	adds	r7, #12
 8004d84:	46bd      	mov	sp, r7
 8004d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8a:	4770      	bx	lr
 8004d8c:	20012f1c 	.word	0x20012f1c
 8004d90:	08007d5c 	.word	0x08007d5c
 8004d94:	20012fc4 	.word	0x20012fc4
 8004d98:	200133c4 	.word	0x200133c4
 8004d9c:	08007d68 	.word	0x08007d68
 8004da0:	08007d6c 	.word	0x08007d6c

08004da4 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b08a      	sub	sp, #40	@ 0x28
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	60f8      	str	r0, [r7, #12]
 8004dac:	60b9      	str	r1, [r7, #8]
 8004dae:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8004db0:	2300      	movs	r3, #0
 8004db2:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	68db      	ldr	r3, [r3, #12]
 8004db8:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	691b      	ldr	r3, [r3, #16]
 8004dbe:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8004dc0:	69ba      	ldr	r2, [r7, #24]
 8004dc2:	69fb      	ldr	r3, [r7, #28]
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	d905      	bls.n	8004dd4 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8004dc8:	69ba      	ldr	r2, [r7, #24]
 8004dca:	69fb      	ldr	r3, [r7, #28]
 8004dcc:	1ad3      	subs	r3, r2, r3
 8004dce:	3b01      	subs	r3, #1
 8004dd0:	627b      	str	r3, [r7, #36]	@ 0x24
 8004dd2:	e007      	b.n	8004de4 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	689a      	ldr	r2, [r3, #8]
 8004dd8:	69b9      	ldr	r1, [r7, #24]
 8004dda:	69fb      	ldr	r3, [r7, #28]
 8004ddc:	1acb      	subs	r3, r1, r3
 8004dde:	4413      	add	r3, r2
 8004de0:	3b01      	subs	r3, #1
 8004de2:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	689a      	ldr	r2, [r3, #8]
 8004de8:	69fb      	ldr	r3, [r7, #28]
 8004dea:	1ad3      	subs	r3, r2, r3
 8004dec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004dee:	4293      	cmp	r3, r2
 8004df0:	bf28      	it	cs
 8004df2:	4613      	movcs	r3, r2
 8004df4:	627b      	str	r3, [r7, #36]	@ 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8004df6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	bf28      	it	cs
 8004dfe:	4613      	movcs	r3, r2
 8004e00:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	685a      	ldr	r2, [r3, #4]
 8004e06:	69fb      	ldr	r3, [r7, #28]
 8004e08:	4413      	add	r3, r2
 8004e0a:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8004e0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e0e:	68b9      	ldr	r1, [r7, #8]
 8004e10:	6978      	ldr	r0, [r7, #20]
 8004e12:	f002 fa87 	bl	8007324 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8004e16:	6a3a      	ldr	r2, [r7, #32]
 8004e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e1a:	4413      	add	r3, r2
 8004e1c:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8004e1e:	68ba      	ldr	r2, [r7, #8]
 8004e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e22:	4413      	add	r3, r2
 8004e24:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8004e26:	687a      	ldr	r2, [r7, #4]
 8004e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e2a:	1ad3      	subs	r3, r2, r3
 8004e2c:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8004e2e:	69fa      	ldr	r2, [r7, #28]
 8004e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e32:	4413      	add	r3, r2
 8004e34:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	69fa      	ldr	r2, [r7, #28]
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d101      	bne.n	8004e44 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8004e40:	2300      	movs	r3, #0
 8004e42:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004e44:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	69fa      	ldr	r2, [r7, #28]
 8004e4c:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d1b2      	bne.n	8004dba <_WriteBlocking+0x16>
  return NumBytesWritten;
 8004e54:	6a3b      	ldr	r3, [r7, #32]
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3728      	adds	r7, #40	@ 0x28
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}

08004e5e <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8004e5e:	b580      	push	{r7, lr}
 8004e60:	b088      	sub	sp, #32
 8004e62:	af00      	add	r7, sp, #0
 8004e64:	60f8      	str	r0, [r7, #12]
 8004e66:	60b9      	str	r1, [r7, #8]
 8004e68:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	68db      	ldr	r3, [r3, #12]
 8004e6e:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	689a      	ldr	r2, [r3, #8]
 8004e74:	69fb      	ldr	r3, [r7, #28]
 8004e76:	1ad3      	subs	r3, r2, r3
 8004e78:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8004e7a:	69ba      	ldr	r2, [r7, #24]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	429a      	cmp	r2, r3
 8004e80:	d911      	bls.n	8004ea6 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	685a      	ldr	r2, [r3, #4]
 8004e86:	69fb      	ldr	r3, [r7, #28]
 8004e88:	4413      	add	r3, r2
 8004e8a:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8004e8c:	687a      	ldr	r2, [r7, #4]
 8004e8e:	68b9      	ldr	r1, [r7, #8]
 8004e90:	6938      	ldr	r0, [r7, #16]
 8004e92:	f002 fa47 	bl	8007324 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004e96:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8004e9a:	69fa      	ldr	r2, [r7, #28]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	441a      	add	r2, r3
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8004ea4:	e01f      	b.n	8004ee6 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8004ea6:	69bb      	ldr	r3, [r7, #24]
 8004ea8:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	685a      	ldr	r2, [r3, #4]
 8004eae:	69fb      	ldr	r3, [r7, #28]
 8004eb0:	4413      	add	r3, r2
 8004eb2:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8004eb4:	697a      	ldr	r2, [r7, #20]
 8004eb6:	68b9      	ldr	r1, [r7, #8]
 8004eb8:	6938      	ldr	r0, [r7, #16]
 8004eba:	f002 fa33 	bl	8007324 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8004ebe:	687a      	ldr	r2, [r7, #4]
 8004ec0:	69bb      	ldr	r3, [r7, #24]
 8004ec2:	1ad3      	subs	r3, r2, r3
 8004ec4:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8004ecc:	68ba      	ldr	r2, [r7, #8]
 8004ece:	69bb      	ldr	r3, [r7, #24]
 8004ed0:	4413      	add	r3, r2
 8004ed2:	697a      	ldr	r2, [r7, #20]
 8004ed4:	4619      	mov	r1, r3
 8004ed6:	6938      	ldr	r0, [r7, #16]
 8004ed8:	f002 fa24 	bl	8007324 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004edc:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	697a      	ldr	r2, [r7, #20]
 8004ee4:	60da      	str	r2, [r3, #12]
}
 8004ee6:	bf00      	nop
 8004ee8:	3720      	adds	r7, #32
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}

08004eee <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8004eee:	b480      	push	{r7}
 8004ef0:	b087      	sub	sp, #28
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	691b      	ldr	r3, [r3, #16]
 8004efa:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8004f02:	693a      	ldr	r2, [r7, #16]
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	429a      	cmp	r2, r3
 8004f08:	d808      	bhi.n	8004f1c <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	689a      	ldr	r2, [r3, #8]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	1ad2      	subs	r2, r2, r3
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	4413      	add	r3, r2
 8004f16:	3b01      	subs	r3, #1
 8004f18:	617b      	str	r3, [r7, #20]
 8004f1a:	e004      	b.n	8004f26 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8004f1c:	693a      	ldr	r2, [r7, #16]
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	1ad3      	subs	r3, r2, r3
 8004f22:	3b01      	subs	r3, #1
 8004f24:	617b      	str	r3, [r7, #20]
  }
  return r;
 8004f26:	697b      	ldr	r3, [r7, #20]
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	371c      	adds	r7, #28
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f32:	4770      	bx	lr

08004f34 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b08c      	sub	sp, #48	@ 0x30
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	60f8      	str	r0, [r7, #12]
 8004f3c:	60b9      	str	r1, [r7, #8]
 8004f3e:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8004f40:	4b3e      	ldr	r3, [pc, #248]	@ (800503c <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8004f42:	623b      	str	r3, [r7, #32]
 8004f44:	6a3b      	ldr	r3, [r7, #32]
 8004f46:	781b      	ldrb	r3, [r3, #0]
 8004f48:	b2db      	uxtb	r3, r3
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d101      	bne.n	8004f52 <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8004f4e:	f7ff fed1 	bl	8004cf4 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	1c5a      	adds	r2, r3, #1
 8004f56:	4613      	mov	r3, r2
 8004f58:	005b      	lsls	r3, r3, #1
 8004f5a:	4413      	add	r3, r2
 8004f5c:	00db      	lsls	r3, r3, #3
 8004f5e:	4a37      	ldr	r2, [pc, #220]	@ (800503c <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8004f60:	4413      	add	r3, r2
 8004f62:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8004f68:	69fb      	ldr	r3, [r7, #28]
 8004f6a:	691b      	ldr	r3, [r3, #16]
 8004f6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8004f6e:	69fb      	ldr	r3, [r7, #28]
 8004f70:	68db      	ldr	r3, [r3, #12]
 8004f72:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004f74:	2300      	movs	r3, #0
 8004f76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004f78:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004f7a:	69bb      	ldr	r3, [r7, #24]
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	d92b      	bls.n	8004fd8 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004f80:	69fb      	ldr	r3, [r7, #28]
 8004f82:	689a      	ldr	r2, [r3, #8]
 8004f84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f86:	1ad3      	subs	r3, r2, r3
 8004f88:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004f8a:	697a      	ldr	r2, [r7, #20]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	bf28      	it	cs
 8004f92:	4613      	movcs	r3, r2
 8004f94:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004f96:	69fb      	ldr	r3, [r7, #28]
 8004f98:	685a      	ldr	r2, [r3, #4]
 8004f9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f9c:	4413      	add	r3, r2
 8004f9e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004fa0:	697a      	ldr	r2, [r7, #20]
 8004fa2:	6939      	ldr	r1, [r7, #16]
 8004fa4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004fa6:	f002 f9bd 	bl	8007324 <memcpy>
    NumBytesRead += NumBytesRem;
 8004faa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	4413      	add	r3, r2
 8004fb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8004fb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	4413      	add	r3, r2
 8004fb8:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	1ad3      	subs	r3, r2, r3
 8004fc0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004fc2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	4413      	add	r3, r2
 8004fc8:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004fca:	69fb      	ldr	r3, [r7, #28]
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d101      	bne.n	8004fd8 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004fd8:	69ba      	ldr	r2, [r7, #24]
 8004fda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fdc:	1ad3      	subs	r3, r2, r3
 8004fde:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004fe0:	697a      	ldr	r2, [r7, #20]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	bf28      	it	cs
 8004fe8:	4613      	movcs	r3, r2
 8004fea:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d019      	beq.n	8005026 <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004ff2:	69fb      	ldr	r3, [r7, #28]
 8004ff4:	685a      	ldr	r2, [r3, #4]
 8004ff6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ff8:	4413      	add	r3, r2
 8004ffa:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004ffc:	697a      	ldr	r2, [r7, #20]
 8004ffe:	6939      	ldr	r1, [r7, #16]
 8005000:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005002:	f002 f98f 	bl	8007324 <memcpy>
    NumBytesRead += NumBytesRem;
 8005006:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	4413      	add	r3, r2
 800500c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 800500e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	4413      	add	r3, r2
 8005014:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8005016:	687a      	ldr	r2, [r7, #4]
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	1ad3      	subs	r3, r2, r3
 800501c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800501e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	4413      	add	r3, r2
 8005024:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8005026:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005028:	2b00      	cmp	r3, #0
 800502a:	d002      	beq.n	8005032 <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 800502c:	69fb      	ldr	r3, [r7, #28]
 800502e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005030:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8005032:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8005034:	4618      	mov	r0, r3
 8005036:	3730      	adds	r7, #48	@ 0x30
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}
 800503c:	20012f1c 	.word	0x20012f1c

08005040 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005040:	b580      	push	{r7, lr}
 8005042:	b08c      	sub	sp, #48	@ 0x30
 8005044:	af00      	add	r7, sp, #0
 8005046:	60f8      	str	r0, [r7, #12]
 8005048:	60b9      	str	r1, [r7, #8]
 800504a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 800504c:	4b3e      	ldr	r3, [pc, #248]	@ (8005148 <SEGGER_RTT_ReadNoLock+0x108>)
 800504e:	623b      	str	r3, [r7, #32]
 8005050:	6a3b      	ldr	r3, [r7, #32]
 8005052:	781b      	ldrb	r3, [r3, #0]
 8005054:	b2db      	uxtb	r3, r3
 8005056:	2b00      	cmp	r3, #0
 8005058:	d101      	bne.n	800505e <SEGGER_RTT_ReadNoLock+0x1e>
 800505a:	f7ff fe4b 	bl	8004cf4 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800505e:	68fa      	ldr	r2, [r7, #12]
 8005060:	4613      	mov	r3, r2
 8005062:	005b      	lsls	r3, r3, #1
 8005064:	4413      	add	r3, r2
 8005066:	00db      	lsls	r3, r3, #3
 8005068:	3360      	adds	r3, #96	@ 0x60
 800506a:	4a37      	ldr	r2, [pc, #220]	@ (8005148 <SEGGER_RTT_ReadNoLock+0x108>)
 800506c:	4413      	add	r3, r2
 800506e:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8005074:	69fb      	ldr	r3, [r7, #28]
 8005076:	691b      	ldr	r3, [r3, #16]
 8005078:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 800507a:	69fb      	ldr	r3, [r7, #28]
 800507c:	68db      	ldr	r3, [r3, #12]
 800507e:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005080:	2300      	movs	r3, #0
 8005082:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005084:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005086:	69bb      	ldr	r3, [r7, #24]
 8005088:	429a      	cmp	r2, r3
 800508a:	d92b      	bls.n	80050e4 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800508c:	69fb      	ldr	r3, [r7, #28]
 800508e:	689a      	ldr	r2, [r3, #8]
 8005090:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005092:	1ad3      	subs	r3, r2, r3
 8005094:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005096:	697a      	ldr	r2, [r7, #20]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	4293      	cmp	r3, r2
 800509c:	bf28      	it	cs
 800509e:	4613      	movcs	r3, r2
 80050a0:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80050a2:	69fb      	ldr	r3, [r7, #28]
 80050a4:	685a      	ldr	r2, [r3, #4]
 80050a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050a8:	4413      	add	r3, r2
 80050aa:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80050ac:	697a      	ldr	r2, [r7, #20]
 80050ae:	6939      	ldr	r1, [r7, #16]
 80050b0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80050b2:	f002 f937 	bl	8007324 <memcpy>
    NumBytesRead += NumBytesRem;
 80050b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	4413      	add	r3, r2
 80050bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 80050be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	4413      	add	r3, r2
 80050c4:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 80050c6:	687a      	ldr	r2, [r7, #4]
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	1ad3      	subs	r3, r2, r3
 80050cc:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80050ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	4413      	add	r3, r2
 80050d4:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80050d6:	69fb      	ldr	r3, [r7, #28]
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80050dc:	429a      	cmp	r2, r3
 80050de:	d101      	bne.n	80050e4 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80050e0:	2300      	movs	r3, #0
 80050e2:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80050e4:	69ba      	ldr	r2, [r7, #24]
 80050e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050e8:	1ad3      	subs	r3, r2, r3
 80050ea:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80050ec:	697a      	ldr	r2, [r7, #20]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	4293      	cmp	r3, r2
 80050f2:	bf28      	it	cs
 80050f4:	4613      	movcs	r3, r2
 80050f6:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d019      	beq.n	8005132 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80050fe:	69fb      	ldr	r3, [r7, #28]
 8005100:	685a      	ldr	r2, [r3, #4]
 8005102:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005104:	4413      	add	r3, r2
 8005106:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005108:	697a      	ldr	r2, [r7, #20]
 800510a:	6939      	ldr	r1, [r7, #16]
 800510c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800510e:	f002 f909 	bl	8007324 <memcpy>
    NumBytesRead += NumBytesRem;
 8005112:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	4413      	add	r3, r2
 8005118:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 800511a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	4413      	add	r3, r2
 8005120:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8005122:	687a      	ldr	r2, [r7, #4]
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	1ad3      	subs	r3, r2, r3
 8005128:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800512a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	4413      	add	r3, r2
 8005130:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 8005132:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005134:	2b00      	cmp	r3, #0
 8005136:	d002      	beq.n	800513e <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005138:	69fb      	ldr	r3, [r7, #28]
 800513a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800513c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800513e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8005140:	4618      	mov	r0, r3
 8005142:	3730      	adds	r7, #48	@ 0x30
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}
 8005148:	20012f1c 	.word	0x20012f1c

0800514c <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800514c:	b580      	push	{r7, lr}
 800514e:	b088      	sub	sp, #32
 8005150:	af00      	add	r7, sp, #0
 8005152:	60f8      	str	r0, [r7, #12]
 8005154:	60b9      	str	r1, [r7, #8]
 8005156:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800515c:	68fa      	ldr	r2, [r7, #12]
 800515e:	4613      	mov	r3, r2
 8005160:	005b      	lsls	r3, r3, #1
 8005162:	4413      	add	r3, r2
 8005164:	00db      	lsls	r3, r3, #3
 8005166:	3360      	adds	r3, #96	@ 0x60
 8005168:	4a1f      	ldr	r2, [pc, #124]	@ (80051e8 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 800516a:	4413      	add	r3, r2
 800516c:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	695b      	ldr	r3, [r3, #20]
 8005172:	2b02      	cmp	r3, #2
 8005174:	d029      	beq.n	80051ca <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 8005176:	2b02      	cmp	r3, #2
 8005178:	d82e      	bhi.n	80051d8 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 800517a:	2b00      	cmp	r3, #0
 800517c:	d002      	beq.n	8005184 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 800517e:	2b01      	cmp	r3, #1
 8005180:	d013      	beq.n	80051aa <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 8005182:	e029      	b.n	80051d8 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005184:	6978      	ldr	r0, [r7, #20]
 8005186:	f7ff feb2 	bl	8004eee <_GetAvailWriteSpace>
 800518a:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 800518c:	693a      	ldr	r2, [r7, #16]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	429a      	cmp	r2, r3
 8005192:	d202      	bcs.n	800519a <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8005194:	2300      	movs	r3, #0
 8005196:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8005198:	e021      	b.n	80051de <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 800519e:	687a      	ldr	r2, [r7, #4]
 80051a0:	69b9      	ldr	r1, [r7, #24]
 80051a2:	6978      	ldr	r0, [r7, #20]
 80051a4:	f7ff fe5b 	bl	8004e5e <_WriteNoCheck>
    break;
 80051a8:	e019      	b.n	80051de <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80051aa:	6978      	ldr	r0, [r7, #20]
 80051ac:	f7ff fe9f 	bl	8004eee <_GetAvailWriteSpace>
 80051b0:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 80051b2:	687a      	ldr	r2, [r7, #4]
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	4293      	cmp	r3, r2
 80051b8:	bf28      	it	cs
 80051ba:	4613      	movcs	r3, r2
 80051bc:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 80051be:	69fa      	ldr	r2, [r7, #28]
 80051c0:	69b9      	ldr	r1, [r7, #24]
 80051c2:	6978      	ldr	r0, [r7, #20]
 80051c4:	f7ff fe4b 	bl	8004e5e <_WriteNoCheck>
    break;
 80051c8:	e009      	b.n	80051de <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 80051ca:	687a      	ldr	r2, [r7, #4]
 80051cc:	69b9      	ldr	r1, [r7, #24]
 80051ce:	6978      	ldr	r0, [r7, #20]
 80051d0:	f7ff fde8 	bl	8004da4 <_WriteBlocking>
 80051d4:	61f8      	str	r0, [r7, #28]
    break;
 80051d6:	e002      	b.n	80051de <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 80051d8:	2300      	movs	r3, #0
 80051da:	61fb      	str	r3, [r7, #28]
    break;
 80051dc:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 80051de:	69fb      	ldr	r3, [r7, #28]
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3720      	adds	r7, #32
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}
 80051e8:	20012f1c 	.word	0x20012f1c

080051ec <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b088      	sub	sp, #32
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	60f8      	str	r0, [r7, #12]
 80051f4:	60b9      	str	r1, [r7, #8]
 80051f6:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 80051f8:	4b0e      	ldr	r3, [pc, #56]	@ (8005234 <SEGGER_RTT_WriteDownBuffer+0x48>)
 80051fa:	61fb      	str	r3, [r7, #28]
 80051fc:	69fb      	ldr	r3, [r7, #28]
 80051fe:	781b      	ldrb	r3, [r3, #0]
 8005200:	b2db      	uxtb	r3, r3
 8005202:	2b00      	cmp	r3, #0
 8005204:	d101      	bne.n	800520a <SEGGER_RTT_WriteDownBuffer+0x1e>
 8005206:	f7ff fd75 	bl	8004cf4 <_DoInit>
  SEGGER_RTT_LOCK();
 800520a:	f3ef 8311 	mrs	r3, BASEPRI
 800520e:	f04f 0120 	mov.w	r1, #32
 8005212:	f381 8811 	msr	BASEPRI, r1
 8005216:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8005218:	687a      	ldr	r2, [r7, #4]
 800521a:	68b9      	ldr	r1, [r7, #8]
 800521c:	68f8      	ldr	r0, [r7, #12]
 800521e:	f7ff ff95 	bl	800514c <SEGGER_RTT_WriteDownBufferNoLock>
 8005222:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8005224:	69bb      	ldr	r3, [r7, #24]
 8005226:	f383 8811 	msr	BASEPRI, r3
  return Status;
 800522a:	697b      	ldr	r3, [r7, #20]
}
 800522c:	4618      	mov	r0, r3
 800522e:	3720      	adds	r7, #32
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}
 8005234:	20012f1c 	.word	0x20012f1c

08005238 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005238:	b580      	push	{r7, lr}
 800523a:	b088      	sub	sp, #32
 800523c:	af00      	add	r7, sp, #0
 800523e:	60f8      	str	r0, [r7, #12]
 8005240:	60b9      	str	r1, [r7, #8]
 8005242:	607a      	str	r2, [r7, #4]
 8005244:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005246:	4b3d      	ldr	r3, [pc, #244]	@ (800533c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005248:	61bb      	str	r3, [r7, #24]
 800524a:	69bb      	ldr	r3, [r7, #24]
 800524c:	781b      	ldrb	r3, [r3, #0]
 800524e:	b2db      	uxtb	r3, r3
 8005250:	2b00      	cmp	r3, #0
 8005252:	d101      	bne.n	8005258 <SEGGER_RTT_AllocUpBuffer+0x20>
 8005254:	f7ff fd4e 	bl	8004cf4 <_DoInit>
  SEGGER_RTT_LOCK();
 8005258:	f3ef 8311 	mrs	r3, BASEPRI
 800525c:	f04f 0120 	mov.w	r1, #32
 8005260:	f381 8811 	msr	BASEPRI, r1
 8005264:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005266:	4b35      	ldr	r3, [pc, #212]	@ (800533c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005268:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800526a:	2300      	movs	r3, #0
 800526c:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800526e:	6939      	ldr	r1, [r7, #16]
 8005270:	69fb      	ldr	r3, [r7, #28]
 8005272:	1c5a      	adds	r2, r3, #1
 8005274:	4613      	mov	r3, r2
 8005276:	005b      	lsls	r3, r3, #1
 8005278:	4413      	add	r3, r2
 800527a:	00db      	lsls	r3, r3, #3
 800527c:	440b      	add	r3, r1
 800527e:	3304      	adds	r3, #4
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d008      	beq.n	8005298 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8005286:	69fb      	ldr	r3, [r7, #28]
 8005288:	3301      	adds	r3, #1
 800528a:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	691b      	ldr	r3, [r3, #16]
 8005290:	69fa      	ldr	r2, [r7, #28]
 8005292:	429a      	cmp	r2, r3
 8005294:	dbeb      	blt.n	800526e <SEGGER_RTT_AllocUpBuffer+0x36>
 8005296:	e000      	b.n	800529a <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8005298:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	691b      	ldr	r3, [r3, #16]
 800529e:	69fa      	ldr	r2, [r7, #28]
 80052a0:	429a      	cmp	r2, r3
 80052a2:	da3f      	bge.n	8005324 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80052a4:	6939      	ldr	r1, [r7, #16]
 80052a6:	69fb      	ldr	r3, [r7, #28]
 80052a8:	1c5a      	adds	r2, r3, #1
 80052aa:	4613      	mov	r3, r2
 80052ac:	005b      	lsls	r3, r3, #1
 80052ae:	4413      	add	r3, r2
 80052b0:	00db      	lsls	r3, r3, #3
 80052b2:	440b      	add	r3, r1
 80052b4:	68fa      	ldr	r2, [r7, #12]
 80052b6:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80052b8:	6939      	ldr	r1, [r7, #16]
 80052ba:	69fb      	ldr	r3, [r7, #28]
 80052bc:	1c5a      	adds	r2, r3, #1
 80052be:	4613      	mov	r3, r2
 80052c0:	005b      	lsls	r3, r3, #1
 80052c2:	4413      	add	r3, r2
 80052c4:	00db      	lsls	r3, r3, #3
 80052c6:	440b      	add	r3, r1
 80052c8:	3304      	adds	r3, #4
 80052ca:	68ba      	ldr	r2, [r7, #8]
 80052cc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80052ce:	6939      	ldr	r1, [r7, #16]
 80052d0:	69fa      	ldr	r2, [r7, #28]
 80052d2:	4613      	mov	r3, r2
 80052d4:	005b      	lsls	r3, r3, #1
 80052d6:	4413      	add	r3, r2
 80052d8:	00db      	lsls	r3, r3, #3
 80052da:	440b      	add	r3, r1
 80052dc:	3320      	adds	r3, #32
 80052de:	687a      	ldr	r2, [r7, #4]
 80052e0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 80052e2:	6939      	ldr	r1, [r7, #16]
 80052e4:	69fa      	ldr	r2, [r7, #28]
 80052e6:	4613      	mov	r3, r2
 80052e8:	005b      	lsls	r3, r3, #1
 80052ea:	4413      	add	r3, r2
 80052ec:	00db      	lsls	r3, r3, #3
 80052ee:	440b      	add	r3, r1
 80052f0:	3328      	adds	r3, #40	@ 0x28
 80052f2:	2200      	movs	r2, #0
 80052f4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 80052f6:	6939      	ldr	r1, [r7, #16]
 80052f8:	69fa      	ldr	r2, [r7, #28]
 80052fa:	4613      	mov	r3, r2
 80052fc:	005b      	lsls	r3, r3, #1
 80052fe:	4413      	add	r3, r2
 8005300:	00db      	lsls	r3, r3, #3
 8005302:	440b      	add	r3, r1
 8005304:	3324      	adds	r3, #36	@ 0x24
 8005306:	2200      	movs	r2, #0
 8005308:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800530a:	6939      	ldr	r1, [r7, #16]
 800530c:	69fa      	ldr	r2, [r7, #28]
 800530e:	4613      	mov	r3, r2
 8005310:	005b      	lsls	r3, r3, #1
 8005312:	4413      	add	r3, r2
 8005314:	00db      	lsls	r3, r3, #3
 8005316:	440b      	add	r3, r1
 8005318:	332c      	adds	r3, #44	@ 0x2c
 800531a:	683a      	ldr	r2, [r7, #0]
 800531c:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800531e:	f3bf 8f5f 	dmb	sy
 8005322:	e002      	b.n	800532a <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8005324:	f04f 33ff 	mov.w	r3, #4294967295
 8005328:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8005330:	69fb      	ldr	r3, [r7, #28]
}
 8005332:	4618      	mov	r0, r3
 8005334:	3720      	adds	r7, #32
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}
 800533a:	bf00      	nop
 800533c:	20012f1c 	.word	0x20012f1c

08005340 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005340:	b580      	push	{r7, lr}
 8005342:	b088      	sub	sp, #32
 8005344:	af00      	add	r7, sp, #0
 8005346:	60f8      	str	r0, [r7, #12]
 8005348:	60b9      	str	r1, [r7, #8]
 800534a:	607a      	str	r2, [r7, #4]
 800534c:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800534e:	4b33      	ldr	r3, [pc, #204]	@ (800541c <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8005350:	61bb      	str	r3, [r7, #24]
 8005352:	69bb      	ldr	r3, [r7, #24]
 8005354:	781b      	ldrb	r3, [r3, #0]
 8005356:	b2db      	uxtb	r3, r3
 8005358:	2b00      	cmp	r3, #0
 800535a:	d101      	bne.n	8005360 <SEGGER_RTT_ConfigDownBuffer+0x20>
 800535c:	f7ff fcca 	bl	8004cf4 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005360:	4b2e      	ldr	r3, [pc, #184]	@ (800541c <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8005362:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	695b      	ldr	r3, [r3, #20]
 8005368:	461a      	mov	r2, r3
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	4293      	cmp	r3, r2
 800536e:	d24d      	bcs.n	800540c <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 8005370:	f3ef 8311 	mrs	r3, BASEPRI
 8005374:	f04f 0120 	mov.w	r1, #32
 8005378:	f381 8811 	msr	BASEPRI, r1
 800537c:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d031      	beq.n	80053e8 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8005384:	6979      	ldr	r1, [r7, #20]
 8005386:	68fa      	ldr	r2, [r7, #12]
 8005388:	4613      	mov	r3, r2
 800538a:	005b      	lsls	r3, r3, #1
 800538c:	4413      	add	r3, r2
 800538e:	00db      	lsls	r3, r3, #3
 8005390:	440b      	add	r3, r1
 8005392:	3360      	adds	r3, #96	@ 0x60
 8005394:	68ba      	ldr	r2, [r7, #8]
 8005396:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8005398:	6979      	ldr	r1, [r7, #20]
 800539a:	68fa      	ldr	r2, [r7, #12]
 800539c:	4613      	mov	r3, r2
 800539e:	005b      	lsls	r3, r3, #1
 80053a0:	4413      	add	r3, r2
 80053a2:	00db      	lsls	r3, r3, #3
 80053a4:	440b      	add	r3, r1
 80053a6:	3364      	adds	r3, #100	@ 0x64
 80053a8:	687a      	ldr	r2, [r7, #4]
 80053aa:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 80053ac:	6979      	ldr	r1, [r7, #20]
 80053ae:	68fa      	ldr	r2, [r7, #12]
 80053b0:	4613      	mov	r3, r2
 80053b2:	005b      	lsls	r3, r3, #1
 80053b4:	4413      	add	r3, r2
 80053b6:	00db      	lsls	r3, r3, #3
 80053b8:	440b      	add	r3, r1
 80053ba:	3368      	adds	r3, #104	@ 0x68
 80053bc:	683a      	ldr	r2, [r7, #0]
 80053be:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 80053c0:	6979      	ldr	r1, [r7, #20]
 80053c2:	68fa      	ldr	r2, [r7, #12]
 80053c4:	4613      	mov	r3, r2
 80053c6:	005b      	lsls	r3, r3, #1
 80053c8:	4413      	add	r3, r2
 80053ca:	00db      	lsls	r3, r3, #3
 80053cc:	440b      	add	r3, r1
 80053ce:	3370      	adds	r3, #112	@ 0x70
 80053d0:	2200      	movs	r2, #0
 80053d2:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 80053d4:	6979      	ldr	r1, [r7, #20]
 80053d6:	68fa      	ldr	r2, [r7, #12]
 80053d8:	4613      	mov	r3, r2
 80053da:	005b      	lsls	r3, r3, #1
 80053dc:	4413      	add	r3, r2
 80053de:	00db      	lsls	r3, r3, #3
 80053e0:	440b      	add	r3, r1
 80053e2:	336c      	adds	r3, #108	@ 0x6c
 80053e4:	2200      	movs	r2, #0
 80053e6:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 80053e8:	6979      	ldr	r1, [r7, #20]
 80053ea:	68fa      	ldr	r2, [r7, #12]
 80053ec:	4613      	mov	r3, r2
 80053ee:	005b      	lsls	r3, r3, #1
 80053f0:	4413      	add	r3, r2
 80053f2:	00db      	lsls	r3, r3, #3
 80053f4:	440b      	add	r3, r1
 80053f6:	3374      	adds	r3, #116	@ 0x74
 80053f8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80053fa:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80053fc:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8005406:	2300      	movs	r3, #0
 8005408:	61fb      	str	r3, [r7, #28]
 800540a:	e002      	b.n	8005412 <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 800540c:	f04f 33ff 	mov.w	r3, #4294967295
 8005410:	61fb      	str	r3, [r7, #28]
  }
  return r;
 8005412:	69fb      	ldr	r3, [r7, #28]
}
 8005414:	4618      	mov	r0, r3
 8005416:	3720      	adds	r7, #32
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}
 800541c:	20012f1c 	.word	0x20012f1c

08005420 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005420:	b480      	push	{r7}
 8005422:	b087      	sub	sp, #28
 8005424:	af00      	add	r7, sp, #0
 8005426:	60f8      	str	r0, [r7, #12]
 8005428:	60b9      	str	r1, [r7, #8]
 800542a:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 800542c:	2300      	movs	r3, #0
 800542e:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8005430:	e002      	b.n	8005438 <_EncodeStr+0x18>
    Len++;
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	3301      	adds	r3, #1
 8005436:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8005438:	68ba      	ldr	r2, [r7, #8]
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	4413      	add	r3, r2
 800543e:	781b      	ldrb	r3, [r3, #0]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d1f6      	bne.n	8005432 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8005444:	693a      	ldr	r2, [r7, #16]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	429a      	cmp	r2, r3
 800544a:	d901      	bls.n	8005450 <_EncodeStr+0x30>
    Len = Limit;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	2bfe      	cmp	r3, #254	@ 0xfe
 8005454:	d806      	bhi.n	8005464 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	1c5a      	adds	r2, r3, #1
 800545a:	60fa      	str	r2, [r7, #12]
 800545c:	693a      	ldr	r2, [r7, #16]
 800545e:	b2d2      	uxtb	r2, r2
 8005460:	701a      	strb	r2, [r3, #0]
 8005462:	e011      	b.n	8005488 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	1c5a      	adds	r2, r3, #1
 8005468:	60fa      	str	r2, [r7, #12]
 800546a:	22ff      	movs	r2, #255	@ 0xff
 800546c:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	1c5a      	adds	r2, r3, #1
 8005472:	60fa      	str	r2, [r7, #12]
 8005474:	693a      	ldr	r2, [r7, #16]
 8005476:	b2d2      	uxtb	r2, r2
 8005478:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	0a19      	lsrs	r1, r3, #8
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	1c5a      	adds	r2, r3, #1
 8005482:	60fa      	str	r2, [r7, #12]
 8005484:	b2ca      	uxtb	r2, r1
 8005486:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8005488:	2300      	movs	r3, #0
 800548a:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800548c:	e00a      	b.n	80054a4 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 800548e:	68ba      	ldr	r2, [r7, #8]
 8005490:	1c53      	adds	r3, r2, #1
 8005492:	60bb      	str	r3, [r7, #8]
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	1c59      	adds	r1, r3, #1
 8005498:	60f9      	str	r1, [r7, #12]
 800549a:	7812      	ldrb	r2, [r2, #0]
 800549c:	701a      	strb	r2, [r3, #0]
    n++;
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	3301      	adds	r3, #1
 80054a2:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80054a4:	697a      	ldr	r2, [r7, #20]
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	429a      	cmp	r2, r3
 80054aa:	d3f0      	bcc.n	800548e <_EncodeStr+0x6e>
  }
  return pPayload;
 80054ac:	68fb      	ldr	r3, [r7, #12]
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	371c      	adds	r7, #28
 80054b2:	46bd      	mov	sp, r7
 80054b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b8:	4770      	bx	lr

080054ba <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80054ba:	b480      	push	{r7}
 80054bc:	b083      	sub	sp, #12
 80054be:	af00      	add	r7, sp, #0
 80054c0:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	3304      	adds	r3, #4
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	370c      	adds	r7, #12
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr
	...

080054d4 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b082      	sub	sp, #8
 80054d8:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80054da:	4b35      	ldr	r3, [pc, #212]	@ (80055b0 <_HandleIncomingPacket+0xdc>)
 80054dc:	7e1b      	ldrb	r3, [r3, #24]
 80054de:	4618      	mov	r0, r3
 80054e0:	1cfb      	adds	r3, r7, #3
 80054e2:	2201      	movs	r2, #1
 80054e4:	4619      	mov	r1, r3
 80054e6:	f7ff fdab 	bl	8005040 <SEGGER_RTT_ReadNoLock>
 80054ea:	4603      	mov	r3, r0
 80054ec:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	dd59      	ble.n	80055a8 <_HandleIncomingPacket+0xd4>
    switch (Cmd) {
 80054f4:	78fb      	ldrb	r3, [r7, #3]
 80054f6:	2b80      	cmp	r3, #128	@ 0x80
 80054f8:	d032      	beq.n	8005560 <_HandleIncomingPacket+0x8c>
 80054fa:	2b80      	cmp	r3, #128	@ 0x80
 80054fc:	dc42      	bgt.n	8005584 <_HandleIncomingPacket+0xb0>
 80054fe:	2b07      	cmp	r3, #7
 8005500:	dc16      	bgt.n	8005530 <_HandleIncomingPacket+0x5c>
 8005502:	2b00      	cmp	r3, #0
 8005504:	dd3e      	ble.n	8005584 <_HandleIncomingPacket+0xb0>
 8005506:	3b01      	subs	r3, #1
 8005508:	2b06      	cmp	r3, #6
 800550a:	d83b      	bhi.n	8005584 <_HandleIncomingPacket+0xb0>
 800550c:	a201      	add	r2, pc, #4	@ (adr r2, 8005514 <_HandleIncomingPacket+0x40>)
 800550e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005512:	bf00      	nop
 8005514:	08005537 	.word	0x08005537
 8005518:	0800553d 	.word	0x0800553d
 800551c:	08005543 	.word	0x08005543
 8005520:	08005549 	.word	0x08005549
 8005524:	0800554f 	.word	0x0800554f
 8005528:	08005555 	.word	0x08005555
 800552c:	0800555b 	.word	0x0800555b
 8005530:	2b7f      	cmp	r3, #127	@ 0x7f
 8005532:	d034      	beq.n	800559e <_HandleIncomingPacket+0xca>
 8005534:	e026      	b.n	8005584 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8005536:	f000 ff43 	bl	80063c0 <SEGGER_SYSVIEW_Start>
      break;
 800553a:	e035      	b.n	80055a8 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 800553c:	f000 fffc 	bl	8006538 <SEGGER_SYSVIEW_Stop>
      break;
 8005540:	e032      	b.n	80055a8 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8005542:	f001 f9d5 	bl	80068f0 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8005546:	e02f      	b.n	80055a8 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005548:	f001 f99a 	bl	8006880 <SEGGER_SYSVIEW_SendTaskList>
      break;
 800554c:	e02c      	b.n	80055a8 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800554e:	f001 f819 	bl	8006584 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8005552:	e029      	b.n	80055a8 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005554:	f001 fc08 	bl	8006d68 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005558:	e026      	b.n	80055a8 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800555a:	f001 fbe7 	bl	8006d2c <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800555e:	e023      	b.n	80055a8 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005560:	4b13      	ldr	r3, [pc, #76]	@ (80055b0 <_HandleIncomingPacket+0xdc>)
 8005562:	7e1b      	ldrb	r3, [r3, #24]
 8005564:	4618      	mov	r0, r3
 8005566:	1cfb      	adds	r3, r7, #3
 8005568:	2201      	movs	r2, #1
 800556a:	4619      	mov	r1, r3
 800556c:	f7ff fd68 	bl	8005040 <SEGGER_RTT_ReadNoLock>
 8005570:	4603      	mov	r3, r0
 8005572:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2b00      	cmp	r3, #0
 8005578:	dd13      	ble.n	80055a2 <_HandleIncomingPacket+0xce>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800557a:	78fb      	ldrb	r3, [r7, #3]
 800557c:	4618      	mov	r0, r3
 800557e:	f001 fb55 	bl	8006c2c <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8005582:	e00e      	b.n	80055a2 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005584:	78fb      	ldrb	r3, [r7, #3]
 8005586:	b25b      	sxtb	r3, r3
 8005588:	2b00      	cmp	r3, #0
 800558a:	da0c      	bge.n	80055a6 <_HandleIncomingPacket+0xd2>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800558c:	4b08      	ldr	r3, [pc, #32]	@ (80055b0 <_HandleIncomingPacket+0xdc>)
 800558e:	7e1b      	ldrb	r3, [r3, #24]
 8005590:	4618      	mov	r0, r3
 8005592:	1cfb      	adds	r3, r7, #3
 8005594:	2201      	movs	r2, #1
 8005596:	4619      	mov	r1, r3
 8005598:	f7ff fd52 	bl	8005040 <SEGGER_RTT_ReadNoLock>
      }
      break;
 800559c:	e003      	b.n	80055a6 <_HandleIncomingPacket+0xd2>
      break;
 800559e:	bf00      	nop
 80055a0:	e002      	b.n	80055a8 <_HandleIncomingPacket+0xd4>
      break;
 80055a2:	bf00      	nop
 80055a4:	e000      	b.n	80055a8 <_HandleIncomingPacket+0xd4>
      break;
 80055a6:	bf00      	nop
    }
  }
}
 80055a8:	bf00      	nop
 80055aa:	3708      	adds	r7, #8
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}
 80055b0:	200143dc 	.word	0x200143dc

080055b4 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b08c      	sub	sp, #48	@ 0x30
 80055b8:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80055ba:	2301      	movs	r3, #1
 80055bc:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80055be:	1d3b      	adds	r3, r7, #4
 80055c0:	3301      	adds	r3, #1
 80055c2:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80055c4:	69fb      	ldr	r3, [r7, #28]
 80055c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80055c8:	4b32      	ldr	r3, [pc, #200]	@ (8005694 <_TrySendOverflowPacket+0xe0>)
 80055ca:	695b      	ldr	r3, [r3, #20]
 80055cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80055ce:	e00b      	b.n	80055e8 <_TrySendOverflowPacket+0x34>
 80055d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055d2:	b2da      	uxtb	r2, r3
 80055d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055d6:	1c59      	adds	r1, r3, #1
 80055d8:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80055da:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80055de:	b2d2      	uxtb	r2, r2
 80055e0:	701a      	strb	r2, [r3, #0]
 80055e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055e4:	09db      	lsrs	r3, r3, #7
 80055e6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80055e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055ea:	2b7f      	cmp	r3, #127	@ 0x7f
 80055ec:	d8f0      	bhi.n	80055d0 <_TrySendOverflowPacket+0x1c>
 80055ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055f0:	1c5a      	adds	r2, r3, #1
 80055f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80055f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80055f6:	b2d2      	uxtb	r2, r2
 80055f8:	701a      	strb	r2, [r3, #0]
 80055fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055fc:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80055fe:	4b26      	ldr	r3, [pc, #152]	@ (8005698 <_TrySendOverflowPacket+0xe4>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005604:	4b23      	ldr	r3, [pc, #140]	@ (8005694 <_TrySendOverflowPacket+0xe0>)
 8005606:	68db      	ldr	r3, [r3, #12]
 8005608:	69ba      	ldr	r2, [r7, #24]
 800560a:	1ad3      	subs	r3, r2, r3
 800560c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800560e:	69fb      	ldr	r3, [r7, #28]
 8005610:	627b      	str	r3, [r7, #36]	@ 0x24
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	623b      	str	r3, [r7, #32]
 8005616:	e00b      	b.n	8005630 <_TrySendOverflowPacket+0x7c>
 8005618:	6a3b      	ldr	r3, [r7, #32]
 800561a:	b2da      	uxtb	r2, r3
 800561c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800561e:	1c59      	adds	r1, r3, #1
 8005620:	6279      	str	r1, [r7, #36]	@ 0x24
 8005622:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005626:	b2d2      	uxtb	r2, r2
 8005628:	701a      	strb	r2, [r3, #0]
 800562a:	6a3b      	ldr	r3, [r7, #32]
 800562c:	09db      	lsrs	r3, r3, #7
 800562e:	623b      	str	r3, [r7, #32]
 8005630:	6a3b      	ldr	r3, [r7, #32]
 8005632:	2b7f      	cmp	r3, #127	@ 0x7f
 8005634:	d8f0      	bhi.n	8005618 <_TrySendOverflowPacket+0x64>
 8005636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005638:	1c5a      	adds	r2, r3, #1
 800563a:	627a      	str	r2, [r7, #36]	@ 0x24
 800563c:	6a3a      	ldr	r2, [r7, #32]
 800563e:	b2d2      	uxtb	r2, r2
 8005640:	701a      	strb	r2, [r3, #0]
 8005642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005644:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8005646:	4b13      	ldr	r3, [pc, #76]	@ (8005694 <_TrySendOverflowPacket+0xe0>)
 8005648:	785b      	ldrb	r3, [r3, #1]
 800564a:	4618      	mov	r0, r3
 800564c:	1d3b      	adds	r3, r7, #4
 800564e:	69fa      	ldr	r2, [r7, #28]
 8005650:	1ad3      	subs	r3, r2, r3
 8005652:	461a      	mov	r2, r3
 8005654:	1d3b      	adds	r3, r7, #4
 8005656:	4619      	mov	r1, r3
 8005658:	f7fa fdda 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800565c:	4603      	mov	r3, r0
 800565e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8005660:	f001 fd64 	bl	800712c <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d009      	beq.n	800567e <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800566a:	4a0a      	ldr	r2, [pc, #40]	@ (8005694 <_TrySendOverflowPacket+0xe0>)
 800566c:	69bb      	ldr	r3, [r7, #24]
 800566e:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005670:	4b08      	ldr	r3, [pc, #32]	@ (8005694 <_TrySendOverflowPacket+0xe0>)
 8005672:	781b      	ldrb	r3, [r3, #0]
 8005674:	3b01      	subs	r3, #1
 8005676:	b2da      	uxtb	r2, r3
 8005678:	4b06      	ldr	r3, [pc, #24]	@ (8005694 <_TrySendOverflowPacket+0xe0>)
 800567a:	701a      	strb	r2, [r3, #0]
 800567c:	e004      	b.n	8005688 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800567e:	4b05      	ldr	r3, [pc, #20]	@ (8005694 <_TrySendOverflowPacket+0xe0>)
 8005680:	695b      	ldr	r3, [r3, #20]
 8005682:	3301      	adds	r3, #1
 8005684:	4a03      	ldr	r2, [pc, #12]	@ (8005694 <_TrySendOverflowPacket+0xe0>)
 8005686:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005688:	693b      	ldr	r3, [r7, #16]
}
 800568a:	4618      	mov	r0, r3
 800568c:	3730      	adds	r7, #48	@ 0x30
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}
 8005692:	bf00      	nop
 8005694:	200143dc 	.word	0x200143dc
 8005698:	e0001004 	.word	0xe0001004

0800569c <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 800569c:	b580      	push	{r7, lr}
 800569e:	b08a      	sub	sp, #40	@ 0x28
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	60f8      	str	r0, [r7, #12]
 80056a4:	60b9      	str	r1, [r7, #8]
 80056a6:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80056a8:	4b6d      	ldr	r3, [pc, #436]	@ (8005860 <_SendPacket+0x1c4>)
 80056aa:	781b      	ldrb	r3, [r3, #0]
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d010      	beq.n	80056d2 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80056b0:	4b6b      	ldr	r3, [pc, #428]	@ (8005860 <_SendPacket+0x1c4>)
 80056b2:	781b      	ldrb	r3, [r3, #0]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	f000 80a5 	beq.w	8005804 <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80056ba:	4b69      	ldr	r3, [pc, #420]	@ (8005860 <_SendPacket+0x1c4>)
 80056bc:	781b      	ldrb	r3, [r3, #0]
 80056be:	2b02      	cmp	r3, #2
 80056c0:	d109      	bne.n	80056d6 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80056c2:	f7ff ff77 	bl	80055b4 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80056c6:	4b66      	ldr	r3, [pc, #408]	@ (8005860 <_SendPacket+0x1c4>)
 80056c8:	781b      	ldrb	r3, [r3, #0]
 80056ca:	2b01      	cmp	r3, #1
 80056cc:	f040 809c 	bne.w	8005808 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 80056d0:	e001      	b.n	80056d6 <_SendPacket+0x3a>
    goto Send;
 80056d2:	bf00      	nop
 80056d4:	e000      	b.n	80056d8 <_SendPacket+0x3c>
Send:
 80056d6:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2b1f      	cmp	r3, #31
 80056dc:	d809      	bhi.n	80056f2 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80056de:	4b60      	ldr	r3, [pc, #384]	@ (8005860 <_SendPacket+0x1c4>)
 80056e0:	69da      	ldr	r2, [r3, #28]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	fa22 f303 	lsr.w	r3, r2, r3
 80056e8:	f003 0301 	and.w	r3, r3, #1
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	f040 808d 	bne.w	800580c <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2b17      	cmp	r3, #23
 80056f6:	d807      	bhi.n	8005708 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	3b01      	subs	r3, #1
 80056fc:	60fb      	str	r3, [r7, #12]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	b2da      	uxtb	r2, r3
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	701a      	strb	r2, [r3, #0]
 8005706:	e03d      	b.n	8005784 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8005708:	68ba      	ldr	r2, [r7, #8]
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	1ad3      	subs	r3, r2, r3
 800570e:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8005710:	69fb      	ldr	r3, [r7, #28]
 8005712:	2b7f      	cmp	r3, #127	@ 0x7f
 8005714:	d912      	bls.n	800573c <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8005716:	69fb      	ldr	r3, [r7, #28]
 8005718:	09da      	lsrs	r2, r3, #7
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	3b01      	subs	r3, #1
 800571e:	60fb      	str	r3, [r7, #12]
 8005720:	b2d2      	uxtb	r2, r2
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8005726:	69fb      	ldr	r3, [r7, #28]
 8005728:	b2db      	uxtb	r3, r3
 800572a:	68fa      	ldr	r2, [r7, #12]
 800572c:	3a01      	subs	r2, #1
 800572e:	60fa      	str	r2, [r7, #12]
 8005730:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005734:	b2da      	uxtb	r2, r3
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	701a      	strb	r2, [r3, #0]
 800573a:	e006      	b.n	800574a <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	3b01      	subs	r3, #1
 8005740:	60fb      	str	r3, [r7, #12]
 8005742:	69fb      	ldr	r3, [r7, #28]
 8005744:	b2da      	uxtb	r2, r3
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2b7f      	cmp	r3, #127	@ 0x7f
 800574e:	d912      	bls.n	8005776 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	09da      	lsrs	r2, r3, #7
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	3b01      	subs	r3, #1
 8005758:	60fb      	str	r3, [r7, #12]
 800575a:	b2d2      	uxtb	r2, r2
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	b2db      	uxtb	r3, r3
 8005764:	68fa      	ldr	r2, [r7, #12]
 8005766:	3a01      	subs	r2, #1
 8005768:	60fa      	str	r2, [r7, #12]
 800576a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800576e:	b2da      	uxtb	r2, r3
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	701a      	strb	r2, [r3, #0]
 8005774:	e006      	b.n	8005784 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	3b01      	subs	r3, #1
 800577a:	60fb      	str	r3, [r7, #12]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	b2da      	uxtb	r2, r3
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005784:	4b37      	ldr	r3, [pc, #220]	@ (8005864 <_SendPacket+0x1c8>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800578a:	4b35      	ldr	r3, [pc, #212]	@ (8005860 <_SendPacket+0x1c4>)
 800578c:	68db      	ldr	r3, [r3, #12]
 800578e:	69ba      	ldr	r2, [r7, #24]
 8005790:	1ad3      	subs	r3, r2, r3
 8005792:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	627b      	str	r3, [r7, #36]	@ 0x24
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	623b      	str	r3, [r7, #32]
 800579c:	e00b      	b.n	80057b6 <_SendPacket+0x11a>
 800579e:	6a3b      	ldr	r3, [r7, #32]
 80057a0:	b2da      	uxtb	r2, r3
 80057a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057a4:	1c59      	adds	r1, r3, #1
 80057a6:	6279      	str	r1, [r7, #36]	@ 0x24
 80057a8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80057ac:	b2d2      	uxtb	r2, r2
 80057ae:	701a      	strb	r2, [r3, #0]
 80057b0:	6a3b      	ldr	r3, [r7, #32]
 80057b2:	09db      	lsrs	r3, r3, #7
 80057b4:	623b      	str	r3, [r7, #32]
 80057b6:	6a3b      	ldr	r3, [r7, #32]
 80057b8:	2b7f      	cmp	r3, #127	@ 0x7f
 80057ba:	d8f0      	bhi.n	800579e <_SendPacket+0x102>
 80057bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057be:	1c5a      	adds	r2, r3, #1
 80057c0:	627a      	str	r2, [r7, #36]	@ 0x24
 80057c2:	6a3a      	ldr	r2, [r7, #32]
 80057c4:	b2d2      	uxtb	r2, r2
 80057c6:	701a      	strb	r2, [r3, #0]
 80057c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057ca:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 80057cc:	4b24      	ldr	r3, [pc, #144]	@ (8005860 <_SendPacket+0x1c4>)
 80057ce:	785b      	ldrb	r3, [r3, #1]
 80057d0:	4618      	mov	r0, r3
 80057d2:	68ba      	ldr	r2, [r7, #8]
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	1ad3      	subs	r3, r2, r3
 80057d8:	461a      	mov	r2, r3
 80057da:	68f9      	ldr	r1, [r7, #12]
 80057dc:	f7fa fd18 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80057e0:	4603      	mov	r3, r0
 80057e2:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 80057e4:	f001 fca2 	bl	800712c <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d003      	beq.n	80057f6 <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80057ee:	4a1c      	ldr	r2, [pc, #112]	@ (8005860 <_SendPacket+0x1c4>)
 80057f0:	69bb      	ldr	r3, [r7, #24]
 80057f2:	60d3      	str	r3, [r2, #12]
 80057f4:	e00b      	b.n	800580e <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80057f6:	4b1a      	ldr	r3, [pc, #104]	@ (8005860 <_SendPacket+0x1c4>)
 80057f8:	781b      	ldrb	r3, [r3, #0]
 80057fa:	3301      	adds	r3, #1
 80057fc:	b2da      	uxtb	r2, r3
 80057fe:	4b18      	ldr	r3, [pc, #96]	@ (8005860 <_SendPacket+0x1c4>)
 8005800:	701a      	strb	r2, [r3, #0]
 8005802:	e004      	b.n	800580e <_SendPacket+0x172>
    goto SendDone;
 8005804:	bf00      	nop
 8005806:	e002      	b.n	800580e <_SendPacket+0x172>
      goto SendDone;
 8005808:	bf00      	nop
 800580a:	e000      	b.n	800580e <_SendPacket+0x172>
      goto SendDone;
 800580c:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800580e:	4b14      	ldr	r3, [pc, #80]	@ (8005860 <_SendPacket+0x1c4>)
 8005810:	7e1b      	ldrb	r3, [r3, #24]
 8005812:	4619      	mov	r1, r3
 8005814:	4a14      	ldr	r2, [pc, #80]	@ (8005868 <_SendPacket+0x1cc>)
 8005816:	460b      	mov	r3, r1
 8005818:	005b      	lsls	r3, r3, #1
 800581a:	440b      	add	r3, r1
 800581c:	00db      	lsls	r3, r3, #3
 800581e:	4413      	add	r3, r2
 8005820:	336c      	adds	r3, #108	@ 0x6c
 8005822:	681a      	ldr	r2, [r3, #0]
 8005824:	4b0e      	ldr	r3, [pc, #56]	@ (8005860 <_SendPacket+0x1c4>)
 8005826:	7e1b      	ldrb	r3, [r3, #24]
 8005828:	4618      	mov	r0, r3
 800582a:	490f      	ldr	r1, [pc, #60]	@ (8005868 <_SendPacket+0x1cc>)
 800582c:	4603      	mov	r3, r0
 800582e:	005b      	lsls	r3, r3, #1
 8005830:	4403      	add	r3, r0
 8005832:	00db      	lsls	r3, r3, #3
 8005834:	440b      	add	r3, r1
 8005836:	3370      	adds	r3, #112	@ 0x70
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	429a      	cmp	r2, r3
 800583c:	d00b      	beq.n	8005856 <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800583e:	4b08      	ldr	r3, [pc, #32]	@ (8005860 <_SendPacket+0x1c4>)
 8005840:	789b      	ldrb	r3, [r3, #2]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d107      	bne.n	8005856 <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005846:	4b06      	ldr	r3, [pc, #24]	@ (8005860 <_SendPacket+0x1c4>)
 8005848:	2201      	movs	r2, #1
 800584a:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800584c:	f7ff fe42 	bl	80054d4 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005850:	4b03      	ldr	r3, [pc, #12]	@ (8005860 <_SendPacket+0x1c4>)
 8005852:	2200      	movs	r2, #0
 8005854:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8005856:	bf00      	nop
 8005858:	3728      	adds	r7, #40	@ 0x28
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}
 800585e:	bf00      	nop
 8005860:	200143dc 	.word	0x200143dc
 8005864:	e0001004 	.word	0xe0001004
 8005868:	20012f1c 	.word	0x20012f1c

0800586c <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 800586c:	b580      	push	{r7, lr}
 800586e:	b08a      	sub	sp, #40	@ 0x28
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	460b      	mov	r3, r1
 8005876:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	691b      	ldr	r3, [r3, #16]
 800587c:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	3301      	adds	r3, #1
 8005882:	2b80      	cmp	r3, #128	@ 0x80
 8005884:	d80a      	bhi.n	800589c <_StoreChar+0x30>
    *(p->pPayload++) = c;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	1c59      	adds	r1, r3, #1
 800588c:	687a      	ldr	r2, [r7, #4]
 800588e:	6051      	str	r1, [r2, #4]
 8005890:	78fa      	ldrb	r2, [r7, #3]
 8005892:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	1c5a      	adds	r2, r3, #1
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	691b      	ldr	r3, [r3, #16]
 80058a0:	2b80      	cmp	r3, #128	@ 0x80
 80058a2:	d15a      	bne.n	800595a <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	691a      	ldr	r2, [r3, #16]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	b2d2      	uxtb	r2, r2
 80058ae:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	68db      	ldr	r3, [r3, #12]
 80058ba:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	627b      	str	r3, [r7, #36]	@ 0x24
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	623b      	str	r3, [r7, #32]
 80058c4:	e00b      	b.n	80058de <_StoreChar+0x72>
 80058c6:	6a3b      	ldr	r3, [r7, #32]
 80058c8:	b2da      	uxtb	r2, r3
 80058ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058cc:	1c59      	adds	r1, r3, #1
 80058ce:	6279      	str	r1, [r7, #36]	@ 0x24
 80058d0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80058d4:	b2d2      	uxtb	r2, r2
 80058d6:	701a      	strb	r2, [r3, #0]
 80058d8:	6a3b      	ldr	r3, [r7, #32]
 80058da:	09db      	lsrs	r3, r3, #7
 80058dc:	623b      	str	r3, [r7, #32]
 80058de:	6a3b      	ldr	r3, [r7, #32]
 80058e0:	2b7f      	cmp	r3, #127	@ 0x7f
 80058e2:	d8f0      	bhi.n	80058c6 <_StoreChar+0x5a>
 80058e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058e6:	1c5a      	adds	r2, r3, #1
 80058e8:	627a      	str	r2, [r7, #36]	@ 0x24
 80058ea:	6a3a      	ldr	r2, [r7, #32]
 80058ec:	b2d2      	uxtb	r2, r2
 80058ee:	701a      	strb	r2, [r3, #0]
 80058f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058f2:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	61fb      	str	r3, [r7, #28]
 80058f8:	2300      	movs	r3, #0
 80058fa:	61bb      	str	r3, [r7, #24]
 80058fc:	e00b      	b.n	8005916 <_StoreChar+0xaa>
 80058fe:	69bb      	ldr	r3, [r7, #24]
 8005900:	b2da      	uxtb	r2, r3
 8005902:	69fb      	ldr	r3, [r7, #28]
 8005904:	1c59      	adds	r1, r3, #1
 8005906:	61f9      	str	r1, [r7, #28]
 8005908:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800590c:	b2d2      	uxtb	r2, r2
 800590e:	701a      	strb	r2, [r3, #0]
 8005910:	69bb      	ldr	r3, [r7, #24]
 8005912:	09db      	lsrs	r3, r3, #7
 8005914:	61bb      	str	r3, [r7, #24]
 8005916:	69bb      	ldr	r3, [r7, #24]
 8005918:	2b7f      	cmp	r3, #127	@ 0x7f
 800591a:	d8f0      	bhi.n	80058fe <_StoreChar+0x92>
 800591c:	69fb      	ldr	r3, [r7, #28]
 800591e:	1c5a      	adds	r2, r3, #1
 8005920:	61fa      	str	r2, [r7, #28]
 8005922:	69ba      	ldr	r2, [r7, #24]
 8005924:	b2d2      	uxtb	r2, r2
 8005926:	701a      	strb	r2, [r3, #0]
 8005928:	69fb      	ldr	r3, [r7, #28]
 800592a:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	221a      	movs	r2, #26
 8005932:	6939      	ldr	r1, [r7, #16]
 8005934:	4618      	mov	r0, r3
 8005936:	f7ff feb1 	bl	800569c <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4618      	mov	r0, r3
 8005940:	f7ff fdbb 	bl	80054ba <_PreparePacket>
 8005944:	4602      	mov	r2, r0
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	689b      	ldr	r3, [r3, #8]
 800594e:	1c5a      	adds	r2, r3, #1
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2200      	movs	r2, #0
 8005958:	611a      	str	r2, [r3, #16]
  }
}
 800595a:	bf00      	nop
 800595c:	3728      	adds	r7, #40	@ 0x28
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}
	...

08005964 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005964:	b580      	push	{r7, lr}
 8005966:	b08a      	sub	sp, #40	@ 0x28
 8005968:	af00      	add	r7, sp, #0
 800596a:	60f8      	str	r0, [r7, #12]
 800596c:	60b9      	str	r1, [r7, #8]
 800596e:	607a      	str	r2, [r7, #4]
 8005970:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8005976:	2301      	movs	r3, #1
 8005978:	627b      	str	r3, [r7, #36]	@ 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 800597a:	2301      	movs	r3, #1
 800597c:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 800597e:	e007      	b.n	8005990 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8005980:	6a3a      	ldr	r2, [r7, #32]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	fbb2 f3f3 	udiv	r3, r2, r3
 8005988:	623b      	str	r3, [r7, #32]
    Width++;
 800598a:	69fb      	ldr	r3, [r7, #28]
 800598c:	3301      	adds	r3, #1
 800598e:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005990:	6a3a      	ldr	r2, [r7, #32]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	429a      	cmp	r2, r3
 8005996:	d2f3      	bcs.n	8005980 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8005998:	683a      	ldr	r2, [r7, #0]
 800599a:	69fb      	ldr	r3, [r7, #28]
 800599c:	429a      	cmp	r2, r3
 800599e:	d901      	bls.n	80059a4 <_PrintUnsigned+0x40>
    Width = NumDigits;
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 80059a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059a6:	f003 0301 	and.w	r3, r3, #1
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d000      	beq.n	80059b0 <_PrintUnsigned+0x4c>
 80059ae:	e01f      	b.n	80059f0 <_PrintUnsigned+0x8c>
    if (FieldWidth != 0u) {
 80059b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d01c      	beq.n	80059f0 <_PrintUnsigned+0x8c>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 80059b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059b8:	f003 0302 	and.w	r3, r3, #2
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d005      	beq.n	80059cc <_PrintUnsigned+0x68>
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d102      	bne.n	80059cc <_PrintUnsigned+0x68>
        c = '0';
 80059c6:	2330      	movs	r3, #48	@ 0x30
 80059c8:	76fb      	strb	r3, [r7, #27]
 80059ca:	e001      	b.n	80059d0 <_PrintUnsigned+0x6c>
      } else {
        c = ' ';
 80059cc:	2320      	movs	r3, #32
 80059ce:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80059d0:	e007      	b.n	80059e2 <_PrintUnsigned+0x7e>
        FieldWidth--;
 80059d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059d4:	3b01      	subs	r3, #1
 80059d6:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, c);
 80059d8:	7efb      	ldrb	r3, [r7, #27]
 80059da:	4619      	mov	r1, r3
 80059dc:	68f8      	ldr	r0, [r7, #12]
 80059de:	f7ff ff45 	bl	800586c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80059e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d003      	beq.n	80059f0 <_PrintUnsigned+0x8c>
 80059e8:	69fa      	ldr	r2, [r7, #28]
 80059ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059ec:	429a      	cmp	r2, r3
 80059ee:	d3f0      	bcc.n	80059d2 <_PrintUnsigned+0x6e>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	2b01      	cmp	r3, #1
 80059f4:	d903      	bls.n	80059fe <_PrintUnsigned+0x9a>
      NumDigits--;
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	3b01      	subs	r3, #1
 80059fa:	603b      	str	r3, [r7, #0]
 80059fc:	e009      	b.n	8005a12 <_PrintUnsigned+0xae>
    } else {
      Div = v / Digit;
 80059fe:	68ba      	ldr	r2, [r7, #8]
 8005a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a02:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a06:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8005a08:	697a      	ldr	r2, [r7, #20]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	429a      	cmp	r2, r3
 8005a0e:	d200      	bcs.n	8005a12 <_PrintUnsigned+0xae>
        break;
 8005a10:	e005      	b.n	8005a1e <_PrintUnsigned+0xba>
      }
    }
    Digit *= Base;
 8005a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a14:	687a      	ldr	r2, [r7, #4]
 8005a16:	fb02 f303 	mul.w	r3, r2, r3
 8005a1a:	627b      	str	r3, [r7, #36]	@ 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005a1c:	e7e8      	b.n	80059f0 <_PrintUnsigned+0x8c>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8005a1e:	68ba      	ldr	r2, [r7, #8]
 8005a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a22:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a26:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a2c:	fb02 f303 	mul.w	r3, r2, r3
 8005a30:	68ba      	ldr	r2, [r7, #8]
 8005a32:	1ad3      	subs	r3, r2, r3
 8005a34:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8005a36:	4a15      	ldr	r2, [pc, #84]	@ (8005a8c <_PrintUnsigned+0x128>)
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	4413      	add	r3, r2
 8005a3c:	781b      	ldrb	r3, [r3, #0]
 8005a3e:	4619      	mov	r1, r3
 8005a40:	68f8      	ldr	r0, [r7, #12]
 8005a42:	f7ff ff13 	bl	800586c <_StoreChar>
    Digit /= Base;
 8005a46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a4e:	627b      	str	r3, [r7, #36]	@ 0x24
  } while (Digit);
 8005a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d1e3      	bne.n	8005a1e <_PrintUnsigned+0xba>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8005a56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a58:	f003 0301 	and.w	r3, r3, #1
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d011      	beq.n	8005a84 <_PrintUnsigned+0x120>
    if (FieldWidth != 0u) {
 8005a60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d00e      	beq.n	8005a84 <_PrintUnsigned+0x120>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005a66:	e006      	b.n	8005a76 <_PrintUnsigned+0x112>
        FieldWidth--;
 8005a68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a6a:	3b01      	subs	r3, #1
 8005a6c:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, ' ');
 8005a6e:	2120      	movs	r1, #32
 8005a70:	68f8      	ldr	r0, [r7, #12]
 8005a72:	f7ff fefb 	bl	800586c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005a76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d003      	beq.n	8005a84 <_PrintUnsigned+0x120>
 8005a7c:	69fa      	ldr	r2, [r7, #28]
 8005a7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d3f1      	bcc.n	8005a68 <_PrintUnsigned+0x104>
      }
    }
  }
}
 8005a84:	bf00      	nop
 8005a86:	3728      	adds	r7, #40	@ 0x28
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}
 8005a8c:	08007da8 	.word	0x08007da8

08005a90 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b088      	sub	sp, #32
 8005a94:	af02      	add	r7, sp, #8
 8005a96:	60f8      	str	r0, [r7, #12]
 8005a98:	60b9      	str	r1, [r7, #8]
 8005a9a:	607a      	str	r2, [r7, #4]
 8005a9c:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	bfb8      	it	lt
 8005aa4:	425b      	neglt	r3, r3
 8005aa6:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005aac:	e007      	b.n	8005abe <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	693a      	ldr	r2, [r7, #16]
 8005ab2:	fb92 f3f3 	sdiv	r3, r2, r3
 8005ab6:	613b      	str	r3, [r7, #16]
    Width++;
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	3301      	adds	r3, #1
 8005abc:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	693a      	ldr	r2, [r7, #16]
 8005ac2:	429a      	cmp	r2, r3
 8005ac4:	daf3      	bge.n	8005aae <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8005ac6:	683a      	ldr	r2, [r7, #0]
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	429a      	cmp	r2, r3
 8005acc:	d901      	bls.n	8005ad2 <_PrintInt+0x42>
    Width = NumDigits;
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8005ad2:	6a3b      	ldr	r3, [r7, #32]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d00a      	beq.n	8005aee <_PrintInt+0x5e>
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	db04      	blt.n	8005ae8 <_PrintInt+0x58>
 8005ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ae0:	f003 0304 	and.w	r3, r3, #4
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d002      	beq.n	8005aee <_PrintInt+0x5e>
    FieldWidth--;
 8005ae8:	6a3b      	ldr	r3, [r7, #32]
 8005aea:	3b01      	subs	r3, #1
 8005aec:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8005aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005af0:	f003 0302 	and.w	r3, r3, #2
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d002      	beq.n	8005afe <_PrintInt+0x6e>
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d016      	beq.n	8005b2c <_PrintInt+0x9c>
 8005afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b00:	f003 0301 	and.w	r3, r3, #1
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d111      	bne.n	8005b2c <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8005b08:	6a3b      	ldr	r3, [r7, #32]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d00e      	beq.n	8005b2c <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005b0e:	e006      	b.n	8005b1e <_PrintInt+0x8e>
        FieldWidth--;
 8005b10:	6a3b      	ldr	r3, [r7, #32]
 8005b12:	3b01      	subs	r3, #1
 8005b14:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8005b16:	2120      	movs	r1, #32
 8005b18:	68f8      	ldr	r0, [r7, #12]
 8005b1a:	f7ff fea7 	bl	800586c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005b1e:	6a3b      	ldr	r3, [r7, #32]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d003      	beq.n	8005b2c <_PrintInt+0x9c>
 8005b24:	697a      	ldr	r2, [r7, #20]
 8005b26:	6a3b      	ldr	r3, [r7, #32]
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	d3f1      	bcc.n	8005b10 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	da07      	bge.n	8005b42 <_PrintInt+0xb2>
    v = -v;
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	425b      	negs	r3, r3
 8005b36:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8005b38:	212d      	movs	r1, #45	@ 0x2d
 8005b3a:	68f8      	ldr	r0, [r7, #12]
 8005b3c:	f7ff fe96 	bl	800586c <_StoreChar>
 8005b40:	e008      	b.n	8005b54 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8005b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b44:	f003 0304 	and.w	r3, r3, #4
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d003      	beq.n	8005b54 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8005b4c:	212b      	movs	r1, #43	@ 0x2b
 8005b4e:	68f8      	ldr	r0, [r7, #12]
 8005b50:	f7ff fe8c 	bl	800586c <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8005b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b56:	f003 0302 	and.w	r3, r3, #2
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d019      	beq.n	8005b92 <_PrintInt+0x102>
 8005b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b60:	f003 0301 	and.w	r3, r3, #1
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d114      	bne.n	8005b92 <_PrintInt+0x102>
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d111      	bne.n	8005b92 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8005b6e:	6a3b      	ldr	r3, [r7, #32]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d00e      	beq.n	8005b92 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005b74:	e006      	b.n	8005b84 <_PrintInt+0xf4>
        FieldWidth--;
 8005b76:	6a3b      	ldr	r3, [r7, #32]
 8005b78:	3b01      	subs	r3, #1
 8005b7a:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8005b7c:	2130      	movs	r1, #48	@ 0x30
 8005b7e:	68f8      	ldr	r0, [r7, #12]
 8005b80:	f7ff fe74 	bl	800586c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005b84:	6a3b      	ldr	r3, [r7, #32]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d003      	beq.n	8005b92 <_PrintInt+0x102>
 8005b8a:	697a      	ldr	r2, [r7, #20]
 8005b8c:	6a3b      	ldr	r3, [r7, #32]
 8005b8e:	429a      	cmp	r2, r3
 8005b90:	d3f1      	bcc.n	8005b76 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8005b92:	68b9      	ldr	r1, [r7, #8]
 8005b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b96:	9301      	str	r3, [sp, #4]
 8005b98:	6a3b      	ldr	r3, [r7, #32]
 8005b9a:	9300      	str	r3, [sp, #0]
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	687a      	ldr	r2, [r7, #4]
 8005ba0:	68f8      	ldr	r0, [r7, #12]
 8005ba2:	f7ff fedf 	bl	8005964 <_PrintUnsigned>
}
 8005ba6:	bf00      	nop
 8005ba8:	3718      	adds	r7, #24
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}
	...

08005bb0 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b098      	sub	sp, #96	@ 0x60
 8005bb4:	af02      	add	r7, sp, #8
 8005bb6:	60f8      	str	r0, [r7, #12]
 8005bb8:	60b9      	str	r1, [r7, #8]
 8005bba:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005bbc:	f3ef 8311 	mrs	r3, BASEPRI
 8005bc0:	f04f 0120 	mov.w	r1, #32
 8005bc4:	f381 8811 	msr	BASEPRI, r1
 8005bc8:	633b      	str	r3, [r7, #48]	@ 0x30
 8005bca:	48b7      	ldr	r0, [pc, #732]	@ (8005ea8 <_VPrintTarget+0x2f8>)
 8005bcc:	f7ff fc75 	bl	80054ba <_PreparePacket>
 8005bd0:	62f8      	str	r0, [r7, #44]	@ 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8005bd2:	4bb5      	ldr	r3, [pc, #724]	@ (8005ea8 <_VPrintTarget+0x2f8>)
 8005bd4:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	627b      	str	r3, [r7, #36]	@ 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 8005bda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bdc:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8005bde:	69fb      	ldr	r3, [r7, #28]
 8005be0:	3301      	adds	r3, #1
 8005be2:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	781b      	ldrb	r3, [r3, #0]
 8005bec:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    sFormat++;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	3301      	adds	r3, #1
 8005bf4:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8005bf6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	f000 8183 	beq.w	8005f06 <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 8005c00:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005c04:	2b25      	cmp	r3, #37	@ 0x25
 8005c06:	f040 8170 	bne.w	8005eea <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	64bb      	str	r3, [r7, #72]	@ 0x48
      v = 1;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	653b      	str	r3, [r7, #80]	@ 0x50
      do {
        c = *sFormat;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	781b      	ldrb	r3, [r3, #0]
 8005c16:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        switch (c) {
 8005c1a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005c1e:	3b23      	subs	r3, #35	@ 0x23
 8005c20:	2b0d      	cmp	r3, #13
 8005c22:	d83f      	bhi.n	8005ca4 <_VPrintTarget+0xf4>
 8005c24:	a201      	add	r2, pc, #4	@ (adr r2, 8005c2c <_VPrintTarget+0x7c>)
 8005c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c2a:	bf00      	nop
 8005c2c:	08005c95 	.word	0x08005c95
 8005c30:	08005ca5 	.word	0x08005ca5
 8005c34:	08005ca5 	.word	0x08005ca5
 8005c38:	08005ca5 	.word	0x08005ca5
 8005c3c:	08005ca5 	.word	0x08005ca5
 8005c40:	08005ca5 	.word	0x08005ca5
 8005c44:	08005ca5 	.word	0x08005ca5
 8005c48:	08005ca5 	.word	0x08005ca5
 8005c4c:	08005c85 	.word	0x08005c85
 8005c50:	08005ca5 	.word	0x08005ca5
 8005c54:	08005c65 	.word	0x08005c65
 8005c58:	08005ca5 	.word	0x08005ca5
 8005c5c:	08005ca5 	.word	0x08005ca5
 8005c60:	08005c75 	.word	0x08005c75
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8005c64:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c66:	f043 0301 	orr.w	r3, r3, #1
 8005c6a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	3301      	adds	r3, #1
 8005c70:	60fb      	str	r3, [r7, #12]
 8005c72:	e01a      	b.n	8005caa <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8005c74:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c76:	f043 0302 	orr.w	r3, r3, #2
 8005c7a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	3301      	adds	r3, #1
 8005c80:	60fb      	str	r3, [r7, #12]
 8005c82:	e012      	b.n	8005caa <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8005c84:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c86:	f043 0304 	orr.w	r3, r3, #4
 8005c8a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	3301      	adds	r3, #1
 8005c90:	60fb      	str	r3, [r7, #12]
 8005c92:	e00a      	b.n	8005caa <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8005c94:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c96:	f043 0308 	orr.w	r3, r3, #8
 8005c9a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	3301      	adds	r3, #1
 8005ca0:	60fb      	str	r3, [r7, #12]
 8005ca2:	e002      	b.n	8005caa <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	653b      	str	r3, [r7, #80]	@ 0x50
 8005ca8:	bf00      	nop
        }
      } while (v);
 8005caa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d1b0      	bne.n	8005c12 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	647b      	str	r3, [r7, #68]	@ 0x44
      do {
        c = *sFormat;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	781b      	ldrb	r3, [r3, #0]
 8005cb8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        if ((c < '0') || (c > '9')) {
 8005cbc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005cc0:	2b2f      	cmp	r3, #47	@ 0x2f
 8005cc2:	d912      	bls.n	8005cea <_VPrintTarget+0x13a>
 8005cc4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005cc8:	2b39      	cmp	r3, #57	@ 0x39
 8005cca:	d80e      	bhi.n	8005cea <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	3301      	adds	r3, #1
 8005cd0:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8005cd2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005cd4:	4613      	mov	r3, r2
 8005cd6:	009b      	lsls	r3, r3, #2
 8005cd8:	4413      	add	r3, r2
 8005cda:	005b      	lsls	r3, r3, #1
 8005cdc:	461a      	mov	r2, r3
 8005cde:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005ce2:	4413      	add	r3, r2
 8005ce4:	3b30      	subs	r3, #48	@ 0x30
 8005ce6:	647b      	str	r3, [r7, #68]	@ 0x44
        c = *sFormat;
 8005ce8:	e7e4      	b.n	8005cb4 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8005cea:	2300      	movs	r3, #0
 8005cec:	64fb      	str	r3, [r7, #76]	@ 0x4c
      c = *sFormat;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	781b      	ldrb	r3, [r3, #0]
 8005cf2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      if (c == '.') {
 8005cf6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005cfa:	2b2e      	cmp	r3, #46	@ 0x2e
 8005cfc:	d11d      	bne.n	8005d3a <_VPrintTarget+0x18a>
        sFormat++;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	3301      	adds	r3, #1
 8005d02:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	781b      	ldrb	r3, [r3, #0]
 8005d08:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          if ((c < '0') || (c > '9')) {
 8005d0c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005d10:	2b2f      	cmp	r3, #47	@ 0x2f
 8005d12:	d912      	bls.n	8005d3a <_VPrintTarget+0x18a>
 8005d14:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005d18:	2b39      	cmp	r3, #57	@ 0x39
 8005d1a:	d80e      	bhi.n	8005d3a <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	3301      	adds	r3, #1
 8005d20:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8005d22:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005d24:	4613      	mov	r3, r2
 8005d26:	009b      	lsls	r3, r3, #2
 8005d28:	4413      	add	r3, r2
 8005d2a:	005b      	lsls	r3, r3, #1
 8005d2c:	461a      	mov	r2, r3
 8005d2e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005d32:	4413      	add	r3, r2
 8005d34:	3b30      	subs	r3, #48	@ 0x30
 8005d36:	64fb      	str	r3, [r7, #76]	@ 0x4c
          c = *sFormat;
 8005d38:	e7e4      	b.n	8005d04 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	781b      	ldrb	r3, [r3, #0]
 8005d3e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8005d42:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005d46:	2b6c      	cmp	r3, #108	@ 0x6c
 8005d48:	d003      	beq.n	8005d52 <_VPrintTarget+0x1a2>
 8005d4a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005d4e:	2b68      	cmp	r3, #104	@ 0x68
 8005d50:	d107      	bne.n	8005d62 <_VPrintTarget+0x1b2>
          c = *sFormat;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	781b      	ldrb	r3, [r3, #0]
 8005d56:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          sFormat++;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	3301      	adds	r3, #1
 8005d5e:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8005d60:	e7ef      	b.n	8005d42 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8005d62:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005d66:	2b25      	cmp	r3, #37	@ 0x25
 8005d68:	f000 80b3 	beq.w	8005ed2 <_VPrintTarget+0x322>
 8005d6c:	2b25      	cmp	r3, #37	@ 0x25
 8005d6e:	f2c0 80b7 	blt.w	8005ee0 <_VPrintTarget+0x330>
 8005d72:	2b78      	cmp	r3, #120	@ 0x78
 8005d74:	f300 80b4 	bgt.w	8005ee0 <_VPrintTarget+0x330>
 8005d78:	2b58      	cmp	r3, #88	@ 0x58
 8005d7a:	f2c0 80b1 	blt.w	8005ee0 <_VPrintTarget+0x330>
 8005d7e:	3b58      	subs	r3, #88	@ 0x58
 8005d80:	2b20      	cmp	r3, #32
 8005d82:	f200 80ad 	bhi.w	8005ee0 <_VPrintTarget+0x330>
 8005d86:	a201      	add	r2, pc, #4	@ (adr r2, 8005d8c <_VPrintTarget+0x1dc>)
 8005d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d8c:	08005e83 	.word	0x08005e83
 8005d90:	08005ee1 	.word	0x08005ee1
 8005d94:	08005ee1 	.word	0x08005ee1
 8005d98:	08005ee1 	.word	0x08005ee1
 8005d9c:	08005ee1 	.word	0x08005ee1
 8005da0:	08005ee1 	.word	0x08005ee1
 8005da4:	08005ee1 	.word	0x08005ee1
 8005da8:	08005ee1 	.word	0x08005ee1
 8005dac:	08005ee1 	.word	0x08005ee1
 8005db0:	08005ee1 	.word	0x08005ee1
 8005db4:	08005ee1 	.word	0x08005ee1
 8005db8:	08005e11 	.word	0x08005e11
 8005dbc:	08005e37 	.word	0x08005e37
 8005dc0:	08005ee1 	.word	0x08005ee1
 8005dc4:	08005ee1 	.word	0x08005ee1
 8005dc8:	08005ee1 	.word	0x08005ee1
 8005dcc:	08005ee1 	.word	0x08005ee1
 8005dd0:	08005ee1 	.word	0x08005ee1
 8005dd4:	08005ee1 	.word	0x08005ee1
 8005dd8:	08005ee1 	.word	0x08005ee1
 8005ddc:	08005ee1 	.word	0x08005ee1
 8005de0:	08005ee1 	.word	0x08005ee1
 8005de4:	08005ee1 	.word	0x08005ee1
 8005de8:	08005ee1 	.word	0x08005ee1
 8005dec:	08005ead 	.word	0x08005ead
 8005df0:	08005ee1 	.word	0x08005ee1
 8005df4:	08005ee1 	.word	0x08005ee1
 8005df8:	08005ee1 	.word	0x08005ee1
 8005dfc:	08005ee1 	.word	0x08005ee1
 8005e00:	08005e5d 	.word	0x08005e5d
 8005e04:	08005ee1 	.word	0x08005ee1
 8005e08:	08005ee1 	.word	0x08005ee1
 8005e0c:	08005e83 	.word	0x08005e83
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	1d19      	adds	r1, r3, #4
 8005e16:	687a      	ldr	r2, [r7, #4]
 8005e18:	6011      	str	r1, [r2, #0]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	653b      	str	r3, [r7, #80]	@ 0x50
        c0 = (char)v;
 8005e1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005e20:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        _StoreChar(&BufferDesc, c0);
 8005e24:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8005e28:	f107 0314 	add.w	r3, r7, #20
 8005e2c:	4611      	mov	r1, r2
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f7ff fd1c 	bl	800586c <_StoreChar>
        break;
 8005e34:	e055      	b.n	8005ee2 <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	1d19      	adds	r1, r3, #4
 8005e3c:	687a      	ldr	r2, [r7, #4]
 8005e3e:	6011      	str	r1, [r2, #0]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005e44:	f107 0014 	add.w	r0, r7, #20
 8005e48:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e4a:	9301      	str	r3, [sp, #4]
 8005e4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e4e:	9300      	str	r3, [sp, #0]
 8005e50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e52:	220a      	movs	r2, #10
 8005e54:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005e56:	f7ff fe1b 	bl	8005a90 <_PrintInt>
        break;
 8005e5a:	e042      	b.n	8005ee2 <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	1d19      	adds	r1, r3, #4
 8005e62:	687a      	ldr	r2, [r7, #4]
 8005e64:	6011      	str	r1, [r2, #0]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005e6a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005e6c:	f107 0014 	add.w	r0, r7, #20
 8005e70:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e72:	9301      	str	r3, [sp, #4]
 8005e74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e76:	9300      	str	r3, [sp, #0]
 8005e78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e7a:	220a      	movs	r2, #10
 8005e7c:	f7ff fd72 	bl	8005964 <_PrintUnsigned>
        break;
 8005e80:	e02f      	b.n	8005ee2 <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	1d19      	adds	r1, r3, #4
 8005e88:	687a      	ldr	r2, [r7, #4]
 8005e8a:	6011      	str	r1, [r2, #0]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8005e90:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005e92:	f107 0014 	add.w	r0, r7, #20
 8005e96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e98:	9301      	str	r3, [sp, #4]
 8005e9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e9c:	9300      	str	r3, [sp, #0]
 8005e9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ea0:	2210      	movs	r2, #16
 8005ea2:	f7ff fd5f 	bl	8005964 <_PrintUnsigned>
        break;
 8005ea6:	e01c      	b.n	8005ee2 <_VPrintTarget+0x332>
 8005ea8:	2001440c 	.word	0x2001440c
      case 'p':
        v = va_arg(*pParamList, int);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	1d19      	adds	r1, r3, #4
 8005eb2:	687a      	ldr	r2, [r7, #4]
 8005eb4:	6011      	str	r1, [r2, #0]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8005eba:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005ebc:	f107 0014 	add.w	r0, r7, #20
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	9301      	str	r3, [sp, #4]
 8005ec4:	2308      	movs	r3, #8
 8005ec6:	9300      	str	r3, [sp, #0]
 8005ec8:	2308      	movs	r3, #8
 8005eca:	2210      	movs	r2, #16
 8005ecc:	f7ff fd4a 	bl	8005964 <_PrintUnsigned>
        break;
 8005ed0:	e007      	b.n	8005ee2 <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8005ed2:	f107 0314 	add.w	r3, r7, #20
 8005ed6:	2125      	movs	r1, #37	@ 0x25
 8005ed8:	4618      	mov	r0, r3
 8005eda:	f7ff fcc7 	bl	800586c <_StoreChar>
        break;
 8005ede:	e000      	b.n	8005ee2 <_VPrintTarget+0x332>
      default:
        break;
 8005ee0:	bf00      	nop
      }
      sFormat++;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	3301      	adds	r3, #1
 8005ee6:	60fb      	str	r3, [r7, #12]
 8005ee8:	e007      	b.n	8005efa <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 8005eea:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8005eee:	f107 0314 	add.w	r3, r7, #20
 8005ef2:	4611      	mov	r1, r2
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	f7ff fcb9 	bl	800586c <_StoreChar>
    }
  } while (*sFormat);
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	781b      	ldrb	r3, [r3, #0]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	f47f ae72 	bne.w	8005be8 <_VPrintTarget+0x38>
 8005f04:	e000      	b.n	8005f08 <_VPrintTarget+0x358>
      break;
 8005f06:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8005f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d041      	beq.n	8005f92 <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 8005f0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f10:	69fb      	ldr	r3, [r7, #28]
 8005f12:	b2d2      	uxtb	r2, r2
 8005f14:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8005f16:	69bb      	ldr	r3, [r7, #24]
 8005f18:	643b      	str	r3, [r7, #64]	@ 0x40
 8005f1a:	6a3b      	ldr	r3, [r7, #32]
 8005f1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f1e:	e00b      	b.n	8005f38 <_VPrintTarget+0x388>
 8005f20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f22:	b2da      	uxtb	r2, r3
 8005f24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f26:	1c59      	adds	r1, r3, #1
 8005f28:	6439      	str	r1, [r7, #64]	@ 0x40
 8005f2a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005f2e:	b2d2      	uxtb	r2, r2
 8005f30:	701a      	strb	r2, [r3, #0]
 8005f32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f34:	09db      	lsrs	r3, r3, #7
 8005f36:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f3a:	2b7f      	cmp	r3, #127	@ 0x7f
 8005f3c:	d8f0      	bhi.n	8005f20 <_VPrintTarget+0x370>
 8005f3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f40:	1c5a      	adds	r2, r3, #1
 8005f42:	643a      	str	r2, [r7, #64]	@ 0x40
 8005f44:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005f46:	b2d2      	uxtb	r2, r2
 8005f48:	701a      	strb	r2, [r3, #0]
 8005f4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f4c:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8005f4e:	69bb      	ldr	r3, [r7, #24]
 8005f50:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005f52:	2300      	movs	r3, #0
 8005f54:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f56:	e00b      	b.n	8005f70 <_VPrintTarget+0x3c0>
 8005f58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f5a:	b2da      	uxtb	r2, r3
 8005f5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f5e:	1c59      	adds	r1, r3, #1
 8005f60:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005f62:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005f66:	b2d2      	uxtb	r2, r2
 8005f68:	701a      	strb	r2, [r3, #0]
 8005f6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f6c:	09db      	lsrs	r3, r3, #7
 8005f6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f72:	2b7f      	cmp	r3, #127	@ 0x7f
 8005f74:	d8f0      	bhi.n	8005f58 <_VPrintTarget+0x3a8>
 8005f76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f78:	1c5a      	adds	r2, r3, #1
 8005f7a:	63ba      	str	r2, [r7, #56]	@ 0x38
 8005f7c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005f7e:	b2d2      	uxtb	r2, r2
 8005f80:	701a      	strb	r2, [r3, #0]
 8005f82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f84:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005f86:	69fb      	ldr	r3, [r7, #28]
 8005f88:	69b9      	ldr	r1, [r7, #24]
 8005f8a:	221a      	movs	r2, #26
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	f7ff fb85 	bl	800569c <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8005f92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f94:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8005f98:	bf00      	nop
 8005f9a:	3758      	adds	r7, #88	@ 0x58
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bd80      	pop	{r7, pc}

08005fa0 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b086      	sub	sp, #24
 8005fa4:	af02      	add	r7, sp, #8
 8005fa6:	60f8      	str	r0, [r7, #12]
 8005fa8:	60b9      	str	r1, [r7, #8]
 8005faa:	607a      	str	r2, [r7, #4]
 8005fac:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005fae:	2300      	movs	r3, #0
 8005fb0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005fb4:	4917      	ldr	r1, [pc, #92]	@ (8006014 <SEGGER_SYSVIEW_Init+0x74>)
 8005fb6:	4818      	ldr	r0, [pc, #96]	@ (8006018 <SEGGER_SYSVIEW_Init+0x78>)
 8005fb8:	f7ff f93e 	bl	8005238 <SEGGER_RTT_AllocUpBuffer>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	b2da      	uxtb	r2, r3
 8005fc0:	4b16      	ldr	r3, [pc, #88]	@ (800601c <SEGGER_SYSVIEW_Init+0x7c>)
 8005fc2:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8005fc4:	4b15      	ldr	r3, [pc, #84]	@ (800601c <SEGGER_SYSVIEW_Init+0x7c>)
 8005fc6:	785a      	ldrb	r2, [r3, #1]
 8005fc8:	4b14      	ldr	r3, [pc, #80]	@ (800601c <SEGGER_SYSVIEW_Init+0x7c>)
 8005fca:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005fcc:	4b13      	ldr	r3, [pc, #76]	@ (800601c <SEGGER_SYSVIEW_Init+0x7c>)
 8005fce:	7e1b      	ldrb	r3, [r3, #24]
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	9300      	str	r3, [sp, #0]
 8005fd6:	2308      	movs	r3, #8
 8005fd8:	4a11      	ldr	r2, [pc, #68]	@ (8006020 <SEGGER_SYSVIEW_Init+0x80>)
 8005fda:	490f      	ldr	r1, [pc, #60]	@ (8006018 <SEGGER_SYSVIEW_Init+0x78>)
 8005fdc:	f7ff f9b0 	bl	8005340 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8005fe0:	4b0e      	ldr	r3, [pc, #56]	@ (800601c <SEGGER_SYSVIEW_Init+0x7c>)
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005fe6:	4b0f      	ldr	r3, [pc, #60]	@ (8006024 <SEGGER_SYSVIEW_Init+0x84>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a0c      	ldr	r2, [pc, #48]	@ (800601c <SEGGER_SYSVIEW_Init+0x7c>)
 8005fec:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8005fee:	4a0b      	ldr	r2, [pc, #44]	@ (800601c <SEGGER_SYSVIEW_Init+0x7c>)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8005ff4:	4a09      	ldr	r2, [pc, #36]	@ (800601c <SEGGER_SYSVIEW_Init+0x7c>)
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8005ffa:	4a08      	ldr	r2, [pc, #32]	@ (800601c <SEGGER_SYSVIEW_Init+0x7c>)
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8006000:	4a06      	ldr	r2, [pc, #24]	@ (800601c <SEGGER_SYSVIEW_Init+0x7c>)
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8006006:	4b05      	ldr	r3, [pc, #20]	@ (800601c <SEGGER_SYSVIEW_Init+0x7c>)
 8006008:	2200      	movs	r2, #0
 800600a:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 800600c:	bf00      	nop
 800600e:	3710      	adds	r7, #16
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}
 8006014:	200133d4 	.word	0x200133d4
 8006018:	08007d74 	.word	0x08007d74
 800601c:	200143dc 	.word	0x200143dc
 8006020:	200143d4 	.word	0x200143d4
 8006024:	e0001004 	.word	0xe0001004

08006028 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8006028:	b480      	push	{r7}
 800602a:	b083      	sub	sp, #12
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8006030:	4a04      	ldr	r2, [pc, #16]	@ (8006044 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6113      	str	r3, [r2, #16]
}
 8006036:	bf00      	nop
 8006038:	370c      	adds	r7, #12
 800603a:	46bd      	mov	sp, r7
 800603c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006040:	4770      	bx	lr
 8006042:	bf00      	nop
 8006044:	200143dc 	.word	0x200143dc

08006048 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8006048:	b580      	push	{r7, lr}
 800604a:	b084      	sub	sp, #16
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006050:	f3ef 8311 	mrs	r3, BASEPRI
 8006054:	f04f 0120 	mov.w	r1, #32
 8006058:	f381 8811 	msr	BASEPRI, r1
 800605c:	60fb      	str	r3, [r7, #12]
 800605e:	4808      	ldr	r0, [pc, #32]	@ (8006080 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8006060:	f7ff fa2b 	bl	80054ba <_PreparePacket>
 8006064:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8006066:	687a      	ldr	r2, [r7, #4]
 8006068:	68b9      	ldr	r1, [r7, #8]
 800606a:	68b8      	ldr	r0, [r7, #8]
 800606c:	f7ff fb16 	bl	800569c <_SendPacket>
  RECORD_END();
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f383 8811 	msr	BASEPRI, r3
}
 8006076:	bf00      	nop
 8006078:	3710      	adds	r7, #16
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}
 800607e:	bf00      	nop
 8006080:	2001440c 	.word	0x2001440c

08006084 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8006084:	b580      	push	{r7, lr}
 8006086:	b088      	sub	sp, #32
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
 800608c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800608e:	f3ef 8311 	mrs	r3, BASEPRI
 8006092:	f04f 0120 	mov.w	r1, #32
 8006096:	f381 8811 	msr	BASEPRI, r1
 800609a:	617b      	str	r3, [r7, #20]
 800609c:	4816      	ldr	r0, [pc, #88]	@ (80060f8 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800609e:	f7ff fa0c 	bl	80054ba <_PreparePacket>
 80060a2:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	61fb      	str	r3, [r7, #28]
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	61bb      	str	r3, [r7, #24]
 80060b0:	e00b      	b.n	80060ca <SEGGER_SYSVIEW_RecordU32+0x46>
 80060b2:	69bb      	ldr	r3, [r7, #24]
 80060b4:	b2da      	uxtb	r2, r3
 80060b6:	69fb      	ldr	r3, [r7, #28]
 80060b8:	1c59      	adds	r1, r3, #1
 80060ba:	61f9      	str	r1, [r7, #28]
 80060bc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80060c0:	b2d2      	uxtb	r2, r2
 80060c2:	701a      	strb	r2, [r3, #0]
 80060c4:	69bb      	ldr	r3, [r7, #24]
 80060c6:	09db      	lsrs	r3, r3, #7
 80060c8:	61bb      	str	r3, [r7, #24]
 80060ca:	69bb      	ldr	r3, [r7, #24]
 80060cc:	2b7f      	cmp	r3, #127	@ 0x7f
 80060ce:	d8f0      	bhi.n	80060b2 <SEGGER_SYSVIEW_RecordU32+0x2e>
 80060d0:	69fb      	ldr	r3, [r7, #28]
 80060d2:	1c5a      	adds	r2, r3, #1
 80060d4:	61fa      	str	r2, [r7, #28]
 80060d6:	69ba      	ldr	r2, [r7, #24]
 80060d8:	b2d2      	uxtb	r2, r2
 80060da:	701a      	strb	r2, [r3, #0]
 80060dc:	69fb      	ldr	r3, [r7, #28]
 80060de:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80060e0:	687a      	ldr	r2, [r7, #4]
 80060e2:	68f9      	ldr	r1, [r7, #12]
 80060e4:	6938      	ldr	r0, [r7, #16]
 80060e6:	f7ff fad9 	bl	800569c <_SendPacket>
  RECORD_END();
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	f383 8811 	msr	BASEPRI, r3
}
 80060f0:	bf00      	nop
 80060f2:	3720      	adds	r7, #32
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}
 80060f8:	2001440c 	.word	0x2001440c

080060fc <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b08c      	sub	sp, #48	@ 0x30
 8006100:	af00      	add	r7, sp, #0
 8006102:	60f8      	str	r0, [r7, #12]
 8006104:	60b9      	str	r1, [r7, #8]
 8006106:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006108:	f3ef 8311 	mrs	r3, BASEPRI
 800610c:	f04f 0120 	mov.w	r1, #32
 8006110:	f381 8811 	msr	BASEPRI, r1
 8006114:	61fb      	str	r3, [r7, #28]
 8006116:	4825      	ldr	r0, [pc, #148]	@ (80061ac <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8006118:	f7ff f9cf 	bl	80054ba <_PreparePacket>
 800611c:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800611e:	69bb      	ldr	r3, [r7, #24]
 8006120:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	62bb      	str	r3, [r7, #40]	@ 0x28
 800612a:	e00b      	b.n	8006144 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 800612c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800612e:	b2da      	uxtb	r2, r3
 8006130:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006132:	1c59      	adds	r1, r3, #1
 8006134:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006136:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800613a:	b2d2      	uxtb	r2, r2
 800613c:	701a      	strb	r2, [r3, #0]
 800613e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006140:	09db      	lsrs	r3, r3, #7
 8006142:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006144:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006146:	2b7f      	cmp	r3, #127	@ 0x7f
 8006148:	d8f0      	bhi.n	800612c <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800614a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800614c:	1c5a      	adds	r2, r3, #1
 800614e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006150:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006152:	b2d2      	uxtb	r2, r2
 8006154:	701a      	strb	r2, [r3, #0]
 8006156:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006158:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	627b      	str	r3, [r7, #36]	@ 0x24
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	623b      	str	r3, [r7, #32]
 8006162:	e00b      	b.n	800617c <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8006164:	6a3b      	ldr	r3, [r7, #32]
 8006166:	b2da      	uxtb	r2, r3
 8006168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800616a:	1c59      	adds	r1, r3, #1
 800616c:	6279      	str	r1, [r7, #36]	@ 0x24
 800616e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006172:	b2d2      	uxtb	r2, r2
 8006174:	701a      	strb	r2, [r3, #0]
 8006176:	6a3b      	ldr	r3, [r7, #32]
 8006178:	09db      	lsrs	r3, r3, #7
 800617a:	623b      	str	r3, [r7, #32]
 800617c:	6a3b      	ldr	r3, [r7, #32]
 800617e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006180:	d8f0      	bhi.n	8006164 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8006182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006184:	1c5a      	adds	r2, r3, #1
 8006186:	627a      	str	r2, [r7, #36]	@ 0x24
 8006188:	6a3a      	ldr	r2, [r7, #32]
 800618a:	b2d2      	uxtb	r2, r2
 800618c:	701a      	strb	r2, [r3, #0]
 800618e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006190:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006192:	68fa      	ldr	r2, [r7, #12]
 8006194:	6979      	ldr	r1, [r7, #20]
 8006196:	69b8      	ldr	r0, [r7, #24]
 8006198:	f7ff fa80 	bl	800569c <_SendPacket>
  RECORD_END();
 800619c:	69fb      	ldr	r3, [r7, #28]
 800619e:	f383 8811 	msr	BASEPRI, r3
}
 80061a2:	bf00      	nop
 80061a4:	3730      	adds	r7, #48	@ 0x30
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}
 80061aa:	bf00      	nop
 80061ac:	2001440c 	.word	0x2001440c

080061b0 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b08e      	sub	sp, #56	@ 0x38
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	60f8      	str	r0, [r7, #12]
 80061b8:	60b9      	str	r1, [r7, #8]
 80061ba:	607a      	str	r2, [r7, #4]
 80061bc:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 80061be:	f3ef 8311 	mrs	r3, BASEPRI
 80061c2:	f04f 0120 	mov.w	r1, #32
 80061c6:	f381 8811 	msr	BASEPRI, r1
 80061ca:	61fb      	str	r3, [r7, #28]
 80061cc:	4832      	ldr	r0, [pc, #200]	@ (8006298 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 80061ce:	f7ff f974 	bl	80054ba <_PreparePacket>
 80061d2:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80061d4:	69bb      	ldr	r3, [r7, #24]
 80061d6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	637b      	str	r3, [r7, #52]	@ 0x34
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	633b      	str	r3, [r7, #48]	@ 0x30
 80061e0:	e00b      	b.n	80061fa <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 80061e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061e4:	b2da      	uxtb	r2, r3
 80061e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061e8:	1c59      	adds	r1, r3, #1
 80061ea:	6379      	str	r1, [r7, #52]	@ 0x34
 80061ec:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80061f0:	b2d2      	uxtb	r2, r2
 80061f2:	701a      	strb	r2, [r3, #0]
 80061f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061f6:	09db      	lsrs	r3, r3, #7
 80061f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80061fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061fc:	2b7f      	cmp	r3, #127	@ 0x7f
 80061fe:	d8f0      	bhi.n	80061e2 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8006200:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006202:	1c5a      	adds	r2, r3, #1
 8006204:	637a      	str	r2, [r7, #52]	@ 0x34
 8006206:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006208:	b2d2      	uxtb	r2, r2
 800620a:	701a      	strb	r2, [r3, #0]
 800620c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800620e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006210:	697b      	ldr	r3, [r7, #20]
 8006212:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006218:	e00b      	b.n	8006232 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800621a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800621c:	b2da      	uxtb	r2, r3
 800621e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006220:	1c59      	adds	r1, r3, #1
 8006222:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006224:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006228:	b2d2      	uxtb	r2, r2
 800622a:	701a      	strb	r2, [r3, #0]
 800622c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800622e:	09db      	lsrs	r3, r3, #7
 8006230:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006232:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006234:	2b7f      	cmp	r3, #127	@ 0x7f
 8006236:	d8f0      	bhi.n	800621a <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8006238:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800623a:	1c5a      	adds	r2, r3, #1
 800623c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800623e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006240:	b2d2      	uxtb	r2, r2
 8006242:	701a      	strb	r2, [r3, #0]
 8006244:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006246:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	627b      	str	r3, [r7, #36]	@ 0x24
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	623b      	str	r3, [r7, #32]
 8006250:	e00b      	b.n	800626a <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8006252:	6a3b      	ldr	r3, [r7, #32]
 8006254:	b2da      	uxtb	r2, r3
 8006256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006258:	1c59      	adds	r1, r3, #1
 800625a:	6279      	str	r1, [r7, #36]	@ 0x24
 800625c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006260:	b2d2      	uxtb	r2, r2
 8006262:	701a      	strb	r2, [r3, #0]
 8006264:	6a3b      	ldr	r3, [r7, #32]
 8006266:	09db      	lsrs	r3, r3, #7
 8006268:	623b      	str	r3, [r7, #32]
 800626a:	6a3b      	ldr	r3, [r7, #32]
 800626c:	2b7f      	cmp	r3, #127	@ 0x7f
 800626e:	d8f0      	bhi.n	8006252 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8006270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006272:	1c5a      	adds	r2, r3, #1
 8006274:	627a      	str	r2, [r7, #36]	@ 0x24
 8006276:	6a3a      	ldr	r2, [r7, #32]
 8006278:	b2d2      	uxtb	r2, r2
 800627a:	701a      	strb	r2, [r3, #0]
 800627c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800627e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006280:	68fa      	ldr	r2, [r7, #12]
 8006282:	6979      	ldr	r1, [r7, #20]
 8006284:	69b8      	ldr	r0, [r7, #24]
 8006286:	f7ff fa09 	bl	800569c <_SendPacket>
  RECORD_END();
 800628a:	69fb      	ldr	r3, [r7, #28]
 800628c:	f383 8811 	msr	BASEPRI, r3
}
 8006290:	bf00      	nop
 8006292:	3738      	adds	r7, #56	@ 0x38
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}
 8006298:	2001440c 	.word	0x2001440c

0800629c <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 800629c:	b580      	push	{r7, lr}
 800629e:	b090      	sub	sp, #64	@ 0x40
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	60f8      	str	r0, [r7, #12]
 80062a4:	60b9      	str	r1, [r7, #8]
 80062a6:	607a      	str	r2, [r7, #4]
 80062a8:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80062aa:	f3ef 8311 	mrs	r3, BASEPRI
 80062ae:	f04f 0120 	mov.w	r1, #32
 80062b2:	f381 8811 	msr	BASEPRI, r1
 80062b6:	61fb      	str	r3, [r7, #28]
 80062b8:	4840      	ldr	r0, [pc, #256]	@ (80063bc <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 80062ba:	f7ff f8fe 	bl	80054ba <_PreparePacket>
 80062be:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80062c0:	69bb      	ldr	r3, [r7, #24]
 80062c2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	63bb      	str	r3, [r7, #56]	@ 0x38
 80062cc:	e00b      	b.n	80062e6 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 80062ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062d0:	b2da      	uxtb	r2, r3
 80062d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062d4:	1c59      	adds	r1, r3, #1
 80062d6:	63f9      	str	r1, [r7, #60]	@ 0x3c
 80062d8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80062dc:	b2d2      	uxtb	r2, r2
 80062de:	701a      	strb	r2, [r3, #0]
 80062e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062e2:	09db      	lsrs	r3, r3, #7
 80062e4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80062e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062e8:	2b7f      	cmp	r3, #127	@ 0x7f
 80062ea:	d8f0      	bhi.n	80062ce <SEGGER_SYSVIEW_RecordU32x4+0x32>
 80062ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062ee:	1c5a      	adds	r2, r3, #1
 80062f0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80062f2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80062f4:	b2d2      	uxtb	r2, r2
 80062f6:	701a      	strb	r2, [r3, #0]
 80062f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062fa:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	633b      	str	r3, [r7, #48]	@ 0x30
 8006304:	e00b      	b.n	800631e <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8006306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006308:	b2da      	uxtb	r2, r3
 800630a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800630c:	1c59      	adds	r1, r3, #1
 800630e:	6379      	str	r1, [r7, #52]	@ 0x34
 8006310:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006314:	b2d2      	uxtb	r2, r2
 8006316:	701a      	strb	r2, [r3, #0]
 8006318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800631a:	09db      	lsrs	r3, r3, #7
 800631c:	633b      	str	r3, [r7, #48]	@ 0x30
 800631e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006320:	2b7f      	cmp	r3, #127	@ 0x7f
 8006322:	d8f0      	bhi.n	8006306 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8006324:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006326:	1c5a      	adds	r2, r3, #1
 8006328:	637a      	str	r2, [r7, #52]	@ 0x34
 800632a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800632c:	b2d2      	uxtb	r2, r2
 800632e:	701a      	strb	r2, [r3, #0]
 8006330:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006332:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800633c:	e00b      	b.n	8006356 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800633e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006340:	b2da      	uxtb	r2, r3
 8006342:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006344:	1c59      	adds	r1, r3, #1
 8006346:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006348:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800634c:	b2d2      	uxtb	r2, r2
 800634e:	701a      	strb	r2, [r3, #0]
 8006350:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006352:	09db      	lsrs	r3, r3, #7
 8006354:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006356:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006358:	2b7f      	cmp	r3, #127	@ 0x7f
 800635a:	d8f0      	bhi.n	800633e <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 800635c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800635e:	1c5a      	adds	r2, r3, #1
 8006360:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006362:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006364:	b2d2      	uxtb	r2, r2
 8006366:	701a      	strb	r2, [r3, #0]
 8006368:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800636a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006370:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006372:	623b      	str	r3, [r7, #32]
 8006374:	e00b      	b.n	800638e <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8006376:	6a3b      	ldr	r3, [r7, #32]
 8006378:	b2da      	uxtb	r2, r3
 800637a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800637c:	1c59      	adds	r1, r3, #1
 800637e:	6279      	str	r1, [r7, #36]	@ 0x24
 8006380:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006384:	b2d2      	uxtb	r2, r2
 8006386:	701a      	strb	r2, [r3, #0]
 8006388:	6a3b      	ldr	r3, [r7, #32]
 800638a:	09db      	lsrs	r3, r3, #7
 800638c:	623b      	str	r3, [r7, #32]
 800638e:	6a3b      	ldr	r3, [r7, #32]
 8006390:	2b7f      	cmp	r3, #127	@ 0x7f
 8006392:	d8f0      	bhi.n	8006376 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8006394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006396:	1c5a      	adds	r2, r3, #1
 8006398:	627a      	str	r2, [r7, #36]	@ 0x24
 800639a:	6a3a      	ldr	r2, [r7, #32]
 800639c:	b2d2      	uxtb	r2, r2
 800639e:	701a      	strb	r2, [r3, #0]
 80063a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063a2:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80063a4:	68fa      	ldr	r2, [r7, #12]
 80063a6:	6979      	ldr	r1, [r7, #20]
 80063a8:	69b8      	ldr	r0, [r7, #24]
 80063aa:	f7ff f977 	bl	800569c <_SendPacket>
  RECORD_END();
 80063ae:	69fb      	ldr	r3, [r7, #28]
 80063b0:	f383 8811 	msr	BASEPRI, r3
}
 80063b4:	bf00      	nop
 80063b6:	3740      	adds	r7, #64	@ 0x40
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bd80      	pop	{r7, pc}
 80063bc:	2001440c 	.word	0x2001440c

080063c0 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b08c      	sub	sp, #48	@ 0x30
 80063c4:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80063c6:	4b59      	ldr	r3, [pc, #356]	@ (800652c <SEGGER_SYSVIEW_Start+0x16c>)
 80063c8:	2201      	movs	r2, #1
 80063ca:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80063cc:	f3ef 8311 	mrs	r3, BASEPRI
 80063d0:	f04f 0120 	mov.w	r1, #32
 80063d4:	f381 8811 	msr	BASEPRI, r1
 80063d8:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80063da:	4b54      	ldr	r3, [pc, #336]	@ (800652c <SEGGER_SYSVIEW_Start+0x16c>)
 80063dc:	785b      	ldrb	r3, [r3, #1]
 80063de:	220a      	movs	r2, #10
 80063e0:	4953      	ldr	r1, [pc, #332]	@ (8006530 <SEGGER_SYSVIEW_Start+0x170>)
 80063e2:	4618      	mov	r0, r3
 80063e4:	f7f9 ff14 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 80063ee:	f000 fe9d 	bl	800712c <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80063f2:	200a      	movs	r0, #10
 80063f4:	f7ff fe28 	bl	8006048 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80063f8:	f3ef 8311 	mrs	r3, BASEPRI
 80063fc:	f04f 0120 	mov.w	r1, #32
 8006400:	f381 8811 	msr	BASEPRI, r1
 8006404:	60bb      	str	r3, [r7, #8]
 8006406:	484b      	ldr	r0, [pc, #300]	@ (8006534 <SEGGER_SYSVIEW_Start+0x174>)
 8006408:	f7ff f857 	bl	80054ba <_PreparePacket>
 800640c:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006416:	4b45      	ldr	r3, [pc, #276]	@ (800652c <SEGGER_SYSVIEW_Start+0x16c>)
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800641c:	e00b      	b.n	8006436 <SEGGER_SYSVIEW_Start+0x76>
 800641e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006420:	b2da      	uxtb	r2, r3
 8006422:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006424:	1c59      	adds	r1, r3, #1
 8006426:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006428:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800642c:	b2d2      	uxtb	r2, r2
 800642e:	701a      	strb	r2, [r3, #0]
 8006430:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006432:	09db      	lsrs	r3, r3, #7
 8006434:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006436:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006438:	2b7f      	cmp	r3, #127	@ 0x7f
 800643a:	d8f0      	bhi.n	800641e <SEGGER_SYSVIEW_Start+0x5e>
 800643c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800643e:	1c5a      	adds	r2, r3, #1
 8006440:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006442:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006444:	b2d2      	uxtb	r2, r2
 8006446:	701a      	strb	r2, [r3, #0]
 8006448:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800644a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006450:	4b36      	ldr	r3, [pc, #216]	@ (800652c <SEGGER_SYSVIEW_Start+0x16c>)
 8006452:	689b      	ldr	r3, [r3, #8]
 8006454:	623b      	str	r3, [r7, #32]
 8006456:	e00b      	b.n	8006470 <SEGGER_SYSVIEW_Start+0xb0>
 8006458:	6a3b      	ldr	r3, [r7, #32]
 800645a:	b2da      	uxtb	r2, r3
 800645c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800645e:	1c59      	adds	r1, r3, #1
 8006460:	6279      	str	r1, [r7, #36]	@ 0x24
 8006462:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006466:	b2d2      	uxtb	r2, r2
 8006468:	701a      	strb	r2, [r3, #0]
 800646a:	6a3b      	ldr	r3, [r7, #32]
 800646c:	09db      	lsrs	r3, r3, #7
 800646e:	623b      	str	r3, [r7, #32]
 8006470:	6a3b      	ldr	r3, [r7, #32]
 8006472:	2b7f      	cmp	r3, #127	@ 0x7f
 8006474:	d8f0      	bhi.n	8006458 <SEGGER_SYSVIEW_Start+0x98>
 8006476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006478:	1c5a      	adds	r2, r3, #1
 800647a:	627a      	str	r2, [r7, #36]	@ 0x24
 800647c:	6a3a      	ldr	r2, [r7, #32]
 800647e:	b2d2      	uxtb	r2, r2
 8006480:	701a      	strb	r2, [r3, #0]
 8006482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006484:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	61fb      	str	r3, [r7, #28]
 800648a:	4b28      	ldr	r3, [pc, #160]	@ (800652c <SEGGER_SYSVIEW_Start+0x16c>)
 800648c:	691b      	ldr	r3, [r3, #16]
 800648e:	61bb      	str	r3, [r7, #24]
 8006490:	e00b      	b.n	80064aa <SEGGER_SYSVIEW_Start+0xea>
 8006492:	69bb      	ldr	r3, [r7, #24]
 8006494:	b2da      	uxtb	r2, r3
 8006496:	69fb      	ldr	r3, [r7, #28]
 8006498:	1c59      	adds	r1, r3, #1
 800649a:	61f9      	str	r1, [r7, #28]
 800649c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80064a0:	b2d2      	uxtb	r2, r2
 80064a2:	701a      	strb	r2, [r3, #0]
 80064a4:	69bb      	ldr	r3, [r7, #24]
 80064a6:	09db      	lsrs	r3, r3, #7
 80064a8:	61bb      	str	r3, [r7, #24]
 80064aa:	69bb      	ldr	r3, [r7, #24]
 80064ac:	2b7f      	cmp	r3, #127	@ 0x7f
 80064ae:	d8f0      	bhi.n	8006492 <SEGGER_SYSVIEW_Start+0xd2>
 80064b0:	69fb      	ldr	r3, [r7, #28]
 80064b2:	1c5a      	adds	r2, r3, #1
 80064b4:	61fa      	str	r2, [r7, #28]
 80064b6:	69ba      	ldr	r2, [r7, #24]
 80064b8:	b2d2      	uxtb	r2, r2
 80064ba:	701a      	strb	r2, [r3, #0]
 80064bc:	69fb      	ldr	r3, [r7, #28]
 80064be:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	617b      	str	r3, [r7, #20]
 80064c4:	2300      	movs	r3, #0
 80064c6:	613b      	str	r3, [r7, #16]
 80064c8:	e00b      	b.n	80064e2 <SEGGER_SYSVIEW_Start+0x122>
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	b2da      	uxtb	r2, r3
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	1c59      	adds	r1, r3, #1
 80064d2:	6179      	str	r1, [r7, #20]
 80064d4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80064d8:	b2d2      	uxtb	r2, r2
 80064da:	701a      	strb	r2, [r3, #0]
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	09db      	lsrs	r3, r3, #7
 80064e0:	613b      	str	r3, [r7, #16]
 80064e2:	693b      	ldr	r3, [r7, #16]
 80064e4:	2b7f      	cmp	r3, #127	@ 0x7f
 80064e6:	d8f0      	bhi.n	80064ca <SEGGER_SYSVIEW_Start+0x10a>
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	1c5a      	adds	r2, r3, #1
 80064ec:	617a      	str	r2, [r7, #20]
 80064ee:	693a      	ldr	r2, [r7, #16]
 80064f0:	b2d2      	uxtb	r2, r2
 80064f2:	701a      	strb	r2, [r3, #0]
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80064f8:	2218      	movs	r2, #24
 80064fa:	6839      	ldr	r1, [r7, #0]
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	f7ff f8cd 	bl	800569c <_SendPacket>
      RECORD_END();
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006508:	4b08      	ldr	r3, [pc, #32]	@ (800652c <SEGGER_SYSVIEW_Start+0x16c>)
 800650a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800650c:	2b00      	cmp	r3, #0
 800650e:	d002      	beq.n	8006516 <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8006510:	4b06      	ldr	r3, [pc, #24]	@ (800652c <SEGGER_SYSVIEW_Start+0x16c>)
 8006512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006514:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8006516:	f000 f9eb 	bl	80068f0 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800651a:	f000 f9b1 	bl	8006880 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800651e:	f000 fc23 	bl	8006d68 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8006522:	bf00      	nop
 8006524:	3730      	adds	r7, #48	@ 0x30
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}
 800652a:	bf00      	nop
 800652c:	200143dc 	.word	0x200143dc
 8006530:	08007d9c 	.word	0x08007d9c
 8006534:	2001440c 	.word	0x2001440c

08006538 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8006538:	b580      	push	{r7, lr}
 800653a:	b082      	sub	sp, #8
 800653c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800653e:	f3ef 8311 	mrs	r3, BASEPRI
 8006542:	f04f 0120 	mov.w	r1, #32
 8006546:	f381 8811 	msr	BASEPRI, r1
 800654a:	607b      	str	r3, [r7, #4]
 800654c:	480b      	ldr	r0, [pc, #44]	@ (800657c <SEGGER_SYSVIEW_Stop+0x44>)
 800654e:	f7fe ffb4 	bl	80054ba <_PreparePacket>
 8006552:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8006554:	4b0a      	ldr	r3, [pc, #40]	@ (8006580 <SEGGER_SYSVIEW_Stop+0x48>)
 8006556:	781b      	ldrb	r3, [r3, #0]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d007      	beq.n	800656c <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 800655c:	220b      	movs	r2, #11
 800655e:	6839      	ldr	r1, [r7, #0]
 8006560:	6838      	ldr	r0, [r7, #0]
 8006562:	f7ff f89b 	bl	800569c <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8006566:	4b06      	ldr	r3, [pc, #24]	@ (8006580 <SEGGER_SYSVIEW_Stop+0x48>)
 8006568:	2200      	movs	r2, #0
 800656a:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f383 8811 	msr	BASEPRI, r3
}
 8006572:	bf00      	nop
 8006574:	3708      	adds	r7, #8
 8006576:	46bd      	mov	sp, r7
 8006578:	bd80      	pop	{r7, pc}
 800657a:	bf00      	nop
 800657c:	2001440c 	.word	0x2001440c
 8006580:	200143dc 	.word	0x200143dc

08006584 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8006584:	b580      	push	{r7, lr}
 8006586:	b08c      	sub	sp, #48	@ 0x30
 8006588:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800658a:	f3ef 8311 	mrs	r3, BASEPRI
 800658e:	f04f 0120 	mov.w	r1, #32
 8006592:	f381 8811 	msr	BASEPRI, r1
 8006596:	60fb      	str	r3, [r7, #12]
 8006598:	4845      	ldr	r0, [pc, #276]	@ (80066b0 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800659a:	f7fe ff8e 	bl	80054ba <_PreparePacket>
 800659e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80065a8:	4b42      	ldr	r3, [pc, #264]	@ (80066b4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80065aa:	685b      	ldr	r3, [r3, #4]
 80065ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80065ae:	e00b      	b.n	80065c8 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80065b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065b2:	b2da      	uxtb	r2, r3
 80065b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065b6:	1c59      	adds	r1, r3, #1
 80065b8:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80065ba:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80065be:	b2d2      	uxtb	r2, r2
 80065c0:	701a      	strb	r2, [r3, #0]
 80065c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065c4:	09db      	lsrs	r3, r3, #7
 80065c6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80065c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065ca:	2b7f      	cmp	r3, #127	@ 0x7f
 80065cc:	d8f0      	bhi.n	80065b0 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80065ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065d0:	1c5a      	adds	r2, r3, #1
 80065d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80065d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80065d6:	b2d2      	uxtb	r2, r2
 80065d8:	701a      	strb	r2, [r3, #0]
 80065da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065dc:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80065e2:	4b34      	ldr	r3, [pc, #208]	@ (80066b4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80065e4:	689b      	ldr	r3, [r3, #8]
 80065e6:	623b      	str	r3, [r7, #32]
 80065e8:	e00b      	b.n	8006602 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80065ea:	6a3b      	ldr	r3, [r7, #32]
 80065ec:	b2da      	uxtb	r2, r3
 80065ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065f0:	1c59      	adds	r1, r3, #1
 80065f2:	6279      	str	r1, [r7, #36]	@ 0x24
 80065f4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80065f8:	b2d2      	uxtb	r2, r2
 80065fa:	701a      	strb	r2, [r3, #0]
 80065fc:	6a3b      	ldr	r3, [r7, #32]
 80065fe:	09db      	lsrs	r3, r3, #7
 8006600:	623b      	str	r3, [r7, #32]
 8006602:	6a3b      	ldr	r3, [r7, #32]
 8006604:	2b7f      	cmp	r3, #127	@ 0x7f
 8006606:	d8f0      	bhi.n	80065ea <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8006608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800660a:	1c5a      	adds	r2, r3, #1
 800660c:	627a      	str	r2, [r7, #36]	@ 0x24
 800660e:	6a3a      	ldr	r2, [r7, #32]
 8006610:	b2d2      	uxtb	r2, r2
 8006612:	701a      	strb	r2, [r3, #0]
 8006614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006616:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	61fb      	str	r3, [r7, #28]
 800661c:	4b25      	ldr	r3, [pc, #148]	@ (80066b4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800661e:	691b      	ldr	r3, [r3, #16]
 8006620:	61bb      	str	r3, [r7, #24]
 8006622:	e00b      	b.n	800663c <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8006624:	69bb      	ldr	r3, [r7, #24]
 8006626:	b2da      	uxtb	r2, r3
 8006628:	69fb      	ldr	r3, [r7, #28]
 800662a:	1c59      	adds	r1, r3, #1
 800662c:	61f9      	str	r1, [r7, #28]
 800662e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006632:	b2d2      	uxtb	r2, r2
 8006634:	701a      	strb	r2, [r3, #0]
 8006636:	69bb      	ldr	r3, [r7, #24]
 8006638:	09db      	lsrs	r3, r3, #7
 800663a:	61bb      	str	r3, [r7, #24]
 800663c:	69bb      	ldr	r3, [r7, #24]
 800663e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006640:	d8f0      	bhi.n	8006624 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8006642:	69fb      	ldr	r3, [r7, #28]
 8006644:	1c5a      	adds	r2, r3, #1
 8006646:	61fa      	str	r2, [r7, #28]
 8006648:	69ba      	ldr	r2, [r7, #24]
 800664a:	b2d2      	uxtb	r2, r2
 800664c:	701a      	strb	r2, [r3, #0]
 800664e:	69fb      	ldr	r3, [r7, #28]
 8006650:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	617b      	str	r3, [r7, #20]
 8006656:	2300      	movs	r3, #0
 8006658:	613b      	str	r3, [r7, #16]
 800665a:	e00b      	b.n	8006674 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	b2da      	uxtb	r2, r3
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	1c59      	adds	r1, r3, #1
 8006664:	6179      	str	r1, [r7, #20]
 8006666:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800666a:	b2d2      	uxtb	r2, r2
 800666c:	701a      	strb	r2, [r3, #0]
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	09db      	lsrs	r3, r3, #7
 8006672:	613b      	str	r3, [r7, #16]
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	2b7f      	cmp	r3, #127	@ 0x7f
 8006678:	d8f0      	bhi.n	800665c <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	1c5a      	adds	r2, r3, #1
 800667e:	617a      	str	r2, [r7, #20]
 8006680:	693a      	ldr	r2, [r7, #16]
 8006682:	b2d2      	uxtb	r2, r2
 8006684:	701a      	strb	r2, [r3, #0]
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800668a:	2218      	movs	r2, #24
 800668c:	6879      	ldr	r1, [r7, #4]
 800668e:	68b8      	ldr	r0, [r7, #8]
 8006690:	f7ff f804 	bl	800569c <_SendPacket>
  RECORD_END();
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800669a:	4b06      	ldr	r3, [pc, #24]	@ (80066b4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800669c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d002      	beq.n	80066a8 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80066a2:	4b04      	ldr	r3, [pc, #16]	@ (80066b4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80066a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066a6:	4798      	blx	r3
  }
}
 80066a8:	bf00      	nop
 80066aa:	3730      	adds	r7, #48	@ 0x30
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bd80      	pop	{r7, pc}
 80066b0:	2001440c 	.word	0x2001440c
 80066b4:	200143dc 	.word	0x200143dc

080066b8 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b092      	sub	sp, #72	@ 0x48
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80066c0:	f3ef 8311 	mrs	r3, BASEPRI
 80066c4:	f04f 0120 	mov.w	r1, #32
 80066c8:	f381 8811 	msr	BASEPRI, r1
 80066cc:	617b      	str	r3, [r7, #20]
 80066ce:	486a      	ldr	r0, [pc, #424]	@ (8006878 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80066d0:	f7fe fef3 	bl	80054ba <_PreparePacket>
 80066d4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681a      	ldr	r2, [r3, #0]
 80066e2:	4b66      	ldr	r3, [pc, #408]	@ (800687c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80066e4:	691b      	ldr	r3, [r3, #16]
 80066e6:	1ad3      	subs	r3, r2, r3
 80066e8:	643b      	str	r3, [r7, #64]	@ 0x40
 80066ea:	e00b      	b.n	8006704 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80066ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80066ee:	b2da      	uxtb	r2, r3
 80066f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80066f2:	1c59      	adds	r1, r3, #1
 80066f4:	6479      	str	r1, [r7, #68]	@ 0x44
 80066f6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80066fa:	b2d2      	uxtb	r2, r2
 80066fc:	701a      	strb	r2, [r3, #0]
 80066fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006700:	09db      	lsrs	r3, r3, #7
 8006702:	643b      	str	r3, [r7, #64]	@ 0x40
 8006704:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006706:	2b7f      	cmp	r3, #127	@ 0x7f
 8006708:	d8f0      	bhi.n	80066ec <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800670a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800670c:	1c5a      	adds	r2, r3, #1
 800670e:	647a      	str	r2, [r7, #68]	@ 0x44
 8006710:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006712:	b2d2      	uxtb	r2, r2
 8006714:	701a      	strb	r2, [r3, #0]
 8006716:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006718:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	689b      	ldr	r3, [r3, #8]
 8006722:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006724:	e00b      	b.n	800673e <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8006726:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006728:	b2da      	uxtb	r2, r3
 800672a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800672c:	1c59      	adds	r1, r3, #1
 800672e:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8006730:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006734:	b2d2      	uxtb	r2, r2
 8006736:	701a      	strb	r2, [r3, #0]
 8006738:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800673a:	09db      	lsrs	r3, r3, #7
 800673c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800673e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006740:	2b7f      	cmp	r3, #127	@ 0x7f
 8006742:	d8f0      	bhi.n	8006726 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8006744:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006746:	1c5a      	adds	r2, r3, #1
 8006748:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800674a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800674c:	b2d2      	uxtb	r2, r2
 800674e:	701a      	strb	r2, [r3, #0]
 8006750:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006752:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	685b      	ldr	r3, [r3, #4]
 8006758:	2220      	movs	r2, #32
 800675a:	4619      	mov	r1, r3
 800675c:	68f8      	ldr	r0, [r7, #12]
 800675e:	f7fe fe5f 	bl	8005420 <_EncodeStr>
 8006762:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8006764:	2209      	movs	r2, #9
 8006766:	68f9      	ldr	r1, [r7, #12]
 8006768:	6938      	ldr	r0, [r7, #16]
 800676a:	f7fe ff97 	bl	800569c <_SendPacket>
  //
  pPayload = pPayloadStart;
 800676e:	693b      	ldr	r3, [r7, #16]
 8006770:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	637b      	str	r3, [r7, #52]	@ 0x34
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681a      	ldr	r2, [r3, #0]
 800677a:	4b40      	ldr	r3, [pc, #256]	@ (800687c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800677c:	691b      	ldr	r3, [r3, #16]
 800677e:	1ad3      	subs	r3, r2, r3
 8006780:	633b      	str	r3, [r7, #48]	@ 0x30
 8006782:	e00b      	b.n	800679c <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8006784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006786:	b2da      	uxtb	r2, r3
 8006788:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800678a:	1c59      	adds	r1, r3, #1
 800678c:	6379      	str	r1, [r7, #52]	@ 0x34
 800678e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006792:	b2d2      	uxtb	r2, r2
 8006794:	701a      	strb	r2, [r3, #0]
 8006796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006798:	09db      	lsrs	r3, r3, #7
 800679a:	633b      	str	r3, [r7, #48]	@ 0x30
 800679c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800679e:	2b7f      	cmp	r3, #127	@ 0x7f
 80067a0:	d8f0      	bhi.n	8006784 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80067a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067a4:	1c5a      	adds	r2, r3, #1
 80067a6:	637a      	str	r2, [r7, #52]	@ 0x34
 80067a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80067aa:	b2d2      	uxtb	r2, r2
 80067ac:	701a      	strb	r2, [r3, #0]
 80067ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067b0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	68db      	ldr	r3, [r3, #12]
 80067ba:	62bb      	str	r3, [r7, #40]	@ 0x28
 80067bc:	e00b      	b.n	80067d6 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80067be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067c0:	b2da      	uxtb	r2, r3
 80067c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067c4:	1c59      	adds	r1, r3, #1
 80067c6:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80067c8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80067cc:	b2d2      	uxtb	r2, r2
 80067ce:	701a      	strb	r2, [r3, #0]
 80067d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067d2:	09db      	lsrs	r3, r3, #7
 80067d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80067d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067d8:	2b7f      	cmp	r3, #127	@ 0x7f
 80067da:	d8f0      	bhi.n	80067be <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80067dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067de:	1c5a      	adds	r2, r3, #1
 80067e0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80067e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80067e4:	b2d2      	uxtb	r2, r2
 80067e6:	701a      	strb	r2, [r3, #0]
 80067e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067ea:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	691b      	ldr	r3, [r3, #16]
 80067f4:	623b      	str	r3, [r7, #32]
 80067f6:	e00b      	b.n	8006810 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 80067f8:	6a3b      	ldr	r3, [r7, #32]
 80067fa:	b2da      	uxtb	r2, r3
 80067fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067fe:	1c59      	adds	r1, r3, #1
 8006800:	6279      	str	r1, [r7, #36]	@ 0x24
 8006802:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006806:	b2d2      	uxtb	r2, r2
 8006808:	701a      	strb	r2, [r3, #0]
 800680a:	6a3b      	ldr	r3, [r7, #32]
 800680c:	09db      	lsrs	r3, r3, #7
 800680e:	623b      	str	r3, [r7, #32]
 8006810:	6a3b      	ldr	r3, [r7, #32]
 8006812:	2b7f      	cmp	r3, #127	@ 0x7f
 8006814:	d8f0      	bhi.n	80067f8 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8006816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006818:	1c5a      	adds	r2, r3, #1
 800681a:	627a      	str	r2, [r7, #36]	@ 0x24
 800681c:	6a3a      	ldr	r2, [r7, #32]
 800681e:	b2d2      	uxtb	r2, r2
 8006820:	701a      	strb	r2, [r3, #0]
 8006822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006824:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	61fb      	str	r3, [r7, #28]
 800682a:	2300      	movs	r3, #0
 800682c:	61bb      	str	r3, [r7, #24]
 800682e:	e00b      	b.n	8006848 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8006830:	69bb      	ldr	r3, [r7, #24]
 8006832:	b2da      	uxtb	r2, r3
 8006834:	69fb      	ldr	r3, [r7, #28]
 8006836:	1c59      	adds	r1, r3, #1
 8006838:	61f9      	str	r1, [r7, #28]
 800683a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800683e:	b2d2      	uxtb	r2, r2
 8006840:	701a      	strb	r2, [r3, #0]
 8006842:	69bb      	ldr	r3, [r7, #24]
 8006844:	09db      	lsrs	r3, r3, #7
 8006846:	61bb      	str	r3, [r7, #24]
 8006848:	69bb      	ldr	r3, [r7, #24]
 800684a:	2b7f      	cmp	r3, #127	@ 0x7f
 800684c:	d8f0      	bhi.n	8006830 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800684e:	69fb      	ldr	r3, [r7, #28]
 8006850:	1c5a      	adds	r2, r3, #1
 8006852:	61fa      	str	r2, [r7, #28]
 8006854:	69ba      	ldr	r2, [r7, #24]
 8006856:	b2d2      	uxtb	r2, r2
 8006858:	701a      	strb	r2, [r3, #0]
 800685a:	69fb      	ldr	r3, [r7, #28]
 800685c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800685e:	2215      	movs	r2, #21
 8006860:	68f9      	ldr	r1, [r7, #12]
 8006862:	6938      	ldr	r0, [r7, #16]
 8006864:	f7fe ff1a 	bl	800569c <_SendPacket>
  RECORD_END();
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	f383 8811 	msr	BASEPRI, r3
}
 800686e:	bf00      	nop
 8006870:	3748      	adds	r7, #72	@ 0x48
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}
 8006876:	bf00      	nop
 8006878:	2001440c 	.word	0x2001440c
 800687c:	200143dc 	.word	0x200143dc

08006880 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8006880:	b580      	push	{r7, lr}
 8006882:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8006884:	4b07      	ldr	r3, [pc, #28]	@ (80068a4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006886:	6a1b      	ldr	r3, [r3, #32]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d008      	beq.n	800689e <SEGGER_SYSVIEW_SendTaskList+0x1e>
 800688c:	4b05      	ldr	r3, [pc, #20]	@ (80068a4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800688e:	6a1b      	ldr	r3, [r3, #32]
 8006890:	685b      	ldr	r3, [r3, #4]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d003      	beq.n	800689e <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8006896:	4b03      	ldr	r3, [pc, #12]	@ (80068a4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006898:	6a1b      	ldr	r3, [r3, #32]
 800689a:	685b      	ldr	r3, [r3, #4]
 800689c:	4798      	blx	r3
  }
}
 800689e:	bf00      	nop
 80068a0:	bd80      	pop	{r7, pc}
 80068a2:	bf00      	nop
 80068a4:	200143dc 	.word	0x200143dc

080068a8 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b086      	sub	sp, #24
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80068b0:	f3ef 8311 	mrs	r3, BASEPRI
 80068b4:	f04f 0120 	mov.w	r1, #32
 80068b8:	f381 8811 	msr	BASEPRI, r1
 80068bc:	617b      	str	r3, [r7, #20]
 80068be:	480b      	ldr	r0, [pc, #44]	@ (80068ec <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80068c0:	f7fe fdfb 	bl	80054ba <_PreparePacket>
 80068c4:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80068c6:	2280      	movs	r2, #128	@ 0x80
 80068c8:	6879      	ldr	r1, [r7, #4]
 80068ca:	6938      	ldr	r0, [r7, #16]
 80068cc:	f7fe fda8 	bl	8005420 <_EncodeStr>
 80068d0:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80068d2:	220e      	movs	r2, #14
 80068d4:	68f9      	ldr	r1, [r7, #12]
 80068d6:	6938      	ldr	r0, [r7, #16]
 80068d8:	f7fe fee0 	bl	800569c <_SendPacket>
  RECORD_END();
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	f383 8811 	msr	BASEPRI, r3
}
 80068e2:	bf00      	nop
 80068e4:	3718      	adds	r7, #24
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}
 80068ea:	bf00      	nop
 80068ec:	2001440c 	.word	0x2001440c

080068f0 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80068f0:	b590      	push	{r4, r7, lr}
 80068f2:	b083      	sub	sp, #12
 80068f4:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80068f6:	4b15      	ldr	r3, [pc, #84]	@ (800694c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80068f8:	6a1b      	ldr	r3, [r3, #32]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d01a      	beq.n	8006934 <SEGGER_SYSVIEW_RecordSystime+0x44>
 80068fe:	4b13      	ldr	r3, [pc, #76]	@ (800694c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006900:	6a1b      	ldr	r3, [r3, #32]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d015      	beq.n	8006934 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006908:	4b10      	ldr	r3, [pc, #64]	@ (800694c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800690a:	6a1b      	ldr	r3, [r3, #32]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4798      	blx	r3
 8006910:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006914:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8006916:	e9d7 0100 	ldrd	r0, r1, [r7]
 800691a:	f04f 0200 	mov.w	r2, #0
 800691e:	f04f 0300 	mov.w	r3, #0
 8006922:	000a      	movs	r2, r1
 8006924:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006926:	4613      	mov	r3, r2
 8006928:	461a      	mov	r2, r3
 800692a:	4621      	mov	r1, r4
 800692c:	200d      	movs	r0, #13
 800692e:	f7ff fbe5 	bl	80060fc <SEGGER_SYSVIEW_RecordU32x2>
 8006932:	e006      	b.n	8006942 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006934:	4b06      	ldr	r3, [pc, #24]	@ (8006950 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4619      	mov	r1, r3
 800693a:	200c      	movs	r0, #12
 800693c:	f7ff fba2 	bl	8006084 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006940:	bf00      	nop
 8006942:	bf00      	nop
 8006944:	370c      	adds	r7, #12
 8006946:	46bd      	mov	sp, r7
 8006948:	bd90      	pop	{r4, r7, pc}
 800694a:	bf00      	nop
 800694c:	200143dc 	.word	0x200143dc
 8006950:	e0001004 	.word	0xe0001004

08006954 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8006954:	b580      	push	{r7, lr}
 8006956:	b086      	sub	sp, #24
 8006958:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800695a:	f3ef 8311 	mrs	r3, BASEPRI
 800695e:	f04f 0120 	mov.w	r1, #32
 8006962:	f381 8811 	msr	BASEPRI, r1
 8006966:	60fb      	str	r3, [r7, #12]
 8006968:	4819      	ldr	r0, [pc, #100]	@ (80069d0 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800696a:	f7fe fda6 	bl	80054ba <_PreparePacket>
 800696e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8006974:	4b17      	ldr	r3, [pc, #92]	@ (80069d4 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800697c:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	617b      	str	r3, [r7, #20]
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	613b      	str	r3, [r7, #16]
 8006986:	e00b      	b.n	80069a0 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8006988:	693b      	ldr	r3, [r7, #16]
 800698a:	b2da      	uxtb	r2, r3
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	1c59      	adds	r1, r3, #1
 8006990:	6179      	str	r1, [r7, #20]
 8006992:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006996:	b2d2      	uxtb	r2, r2
 8006998:	701a      	strb	r2, [r3, #0]
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	09db      	lsrs	r3, r3, #7
 800699e:	613b      	str	r3, [r7, #16]
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	2b7f      	cmp	r3, #127	@ 0x7f
 80069a4:	d8f0      	bhi.n	8006988 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	1c5a      	adds	r2, r3, #1
 80069aa:	617a      	str	r2, [r7, #20]
 80069ac:	693a      	ldr	r2, [r7, #16]
 80069ae:	b2d2      	uxtb	r2, r2
 80069b0:	701a      	strb	r2, [r3, #0]
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80069b6:	2202      	movs	r2, #2
 80069b8:	6879      	ldr	r1, [r7, #4]
 80069ba:	68b8      	ldr	r0, [r7, #8]
 80069bc:	f7fe fe6e 	bl	800569c <_SendPacket>
  RECORD_END();
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	f383 8811 	msr	BASEPRI, r3
}
 80069c6:	bf00      	nop
 80069c8:	3718      	adds	r7, #24
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}
 80069ce:	bf00      	nop
 80069d0:	2001440c 	.word	0x2001440c
 80069d4:	e000ed04 	.word	0xe000ed04

080069d8 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 80069d8:	b580      	push	{r7, lr}
 80069da:	b082      	sub	sp, #8
 80069dc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80069de:	f3ef 8311 	mrs	r3, BASEPRI
 80069e2:	f04f 0120 	mov.w	r1, #32
 80069e6:	f381 8811 	msr	BASEPRI, r1
 80069ea:	607b      	str	r3, [r7, #4]
 80069ec:	4807      	ldr	r0, [pc, #28]	@ (8006a0c <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80069ee:	f7fe fd64 	bl	80054ba <_PreparePacket>
 80069f2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80069f4:	2203      	movs	r2, #3
 80069f6:	6839      	ldr	r1, [r7, #0]
 80069f8:	6838      	ldr	r0, [r7, #0]
 80069fa:	f7fe fe4f 	bl	800569c <_SendPacket>
  RECORD_END();
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	f383 8811 	msr	BASEPRI, r3
}
 8006a04:	bf00      	nop
 8006a06:	3708      	adds	r7, #8
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	bd80      	pop	{r7, pc}
 8006a0c:	2001440c 	.word	0x2001440c

08006a10 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b082      	sub	sp, #8
 8006a14:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006a16:	f3ef 8311 	mrs	r3, BASEPRI
 8006a1a:	f04f 0120 	mov.w	r1, #32
 8006a1e:	f381 8811 	msr	BASEPRI, r1
 8006a22:	607b      	str	r3, [r7, #4]
 8006a24:	4807      	ldr	r0, [pc, #28]	@ (8006a44 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8006a26:	f7fe fd48 	bl	80054ba <_PreparePacket>
 8006a2a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8006a2c:	2212      	movs	r2, #18
 8006a2e:	6839      	ldr	r1, [r7, #0]
 8006a30:	6838      	ldr	r0, [r7, #0]
 8006a32:	f7fe fe33 	bl	800569c <_SendPacket>
  RECORD_END();
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	f383 8811 	msr	BASEPRI, r3
}
 8006a3c:	bf00      	nop
 8006a3e:	3708      	adds	r7, #8
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bd80      	pop	{r7, pc}
 8006a44:	2001440c 	.word	0x2001440c

08006a48 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b082      	sub	sp, #8
 8006a4c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006a4e:	f3ef 8311 	mrs	r3, BASEPRI
 8006a52:	f04f 0120 	mov.w	r1, #32
 8006a56:	f381 8811 	msr	BASEPRI, r1
 8006a5a:	607b      	str	r3, [r7, #4]
 8006a5c:	4807      	ldr	r0, [pc, #28]	@ (8006a7c <SEGGER_SYSVIEW_OnIdle+0x34>)
 8006a5e:	f7fe fd2c 	bl	80054ba <_PreparePacket>
 8006a62:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006a64:	2211      	movs	r2, #17
 8006a66:	6839      	ldr	r1, [r7, #0]
 8006a68:	6838      	ldr	r0, [r7, #0]
 8006a6a:	f7fe fe17 	bl	800569c <_SendPacket>
  RECORD_END();
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f383 8811 	msr	BASEPRI, r3
}
 8006a74:	bf00      	nop
 8006a76:	3708      	adds	r7, #8
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}
 8006a7c:	2001440c 	.word	0x2001440c

08006a80 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b088      	sub	sp, #32
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006a88:	f3ef 8311 	mrs	r3, BASEPRI
 8006a8c:	f04f 0120 	mov.w	r1, #32
 8006a90:	f381 8811 	msr	BASEPRI, r1
 8006a94:	617b      	str	r3, [r7, #20]
 8006a96:	4819      	ldr	r0, [pc, #100]	@ (8006afc <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006a98:	f7fe fd0f 	bl	80054ba <_PreparePacket>
 8006a9c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006aa2:	4b17      	ldr	r3, [pc, #92]	@ (8006b00 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006aa4:	691b      	ldr	r3, [r3, #16]
 8006aa6:	687a      	ldr	r2, [r7, #4]
 8006aa8:	1ad3      	subs	r3, r2, r3
 8006aaa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	61fb      	str	r3, [r7, #28]
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	61bb      	str	r3, [r7, #24]
 8006ab4:	e00b      	b.n	8006ace <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8006ab6:	69bb      	ldr	r3, [r7, #24]
 8006ab8:	b2da      	uxtb	r2, r3
 8006aba:	69fb      	ldr	r3, [r7, #28]
 8006abc:	1c59      	adds	r1, r3, #1
 8006abe:	61f9      	str	r1, [r7, #28]
 8006ac0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006ac4:	b2d2      	uxtb	r2, r2
 8006ac6:	701a      	strb	r2, [r3, #0]
 8006ac8:	69bb      	ldr	r3, [r7, #24]
 8006aca:	09db      	lsrs	r3, r3, #7
 8006acc:	61bb      	str	r3, [r7, #24]
 8006ace:	69bb      	ldr	r3, [r7, #24]
 8006ad0:	2b7f      	cmp	r3, #127	@ 0x7f
 8006ad2:	d8f0      	bhi.n	8006ab6 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006ad4:	69fb      	ldr	r3, [r7, #28]
 8006ad6:	1c5a      	adds	r2, r3, #1
 8006ad8:	61fa      	str	r2, [r7, #28]
 8006ada:	69ba      	ldr	r2, [r7, #24]
 8006adc:	b2d2      	uxtb	r2, r2
 8006ade:	701a      	strb	r2, [r3, #0]
 8006ae0:	69fb      	ldr	r3, [r7, #28]
 8006ae2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006ae4:	2208      	movs	r2, #8
 8006ae6:	68f9      	ldr	r1, [r7, #12]
 8006ae8:	6938      	ldr	r0, [r7, #16]
 8006aea:	f7fe fdd7 	bl	800569c <_SendPacket>
  RECORD_END();
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	f383 8811 	msr	BASEPRI, r3
}
 8006af4:	bf00      	nop
 8006af6:	3720      	adds	r7, #32
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}
 8006afc:	2001440c 	.word	0x2001440c
 8006b00:	200143dc 	.word	0x200143dc

08006b04 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b088      	sub	sp, #32
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006b0c:	f3ef 8311 	mrs	r3, BASEPRI
 8006b10:	f04f 0120 	mov.w	r1, #32
 8006b14:	f381 8811 	msr	BASEPRI, r1
 8006b18:	617b      	str	r3, [r7, #20]
 8006b1a:	4819      	ldr	r0, [pc, #100]	@ (8006b80 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006b1c:	f7fe fccd 	bl	80054ba <_PreparePacket>
 8006b20:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006b22:	693b      	ldr	r3, [r7, #16]
 8006b24:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006b26:	4b17      	ldr	r3, [pc, #92]	@ (8006b84 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006b28:	691b      	ldr	r3, [r3, #16]
 8006b2a:	687a      	ldr	r2, [r7, #4]
 8006b2c:	1ad3      	subs	r3, r2, r3
 8006b2e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	61fb      	str	r3, [r7, #28]
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	61bb      	str	r3, [r7, #24]
 8006b38:	e00b      	b.n	8006b52 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006b3a:	69bb      	ldr	r3, [r7, #24]
 8006b3c:	b2da      	uxtb	r2, r3
 8006b3e:	69fb      	ldr	r3, [r7, #28]
 8006b40:	1c59      	adds	r1, r3, #1
 8006b42:	61f9      	str	r1, [r7, #28]
 8006b44:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006b48:	b2d2      	uxtb	r2, r2
 8006b4a:	701a      	strb	r2, [r3, #0]
 8006b4c:	69bb      	ldr	r3, [r7, #24]
 8006b4e:	09db      	lsrs	r3, r3, #7
 8006b50:	61bb      	str	r3, [r7, #24]
 8006b52:	69bb      	ldr	r3, [r7, #24]
 8006b54:	2b7f      	cmp	r3, #127	@ 0x7f
 8006b56:	d8f0      	bhi.n	8006b3a <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006b58:	69fb      	ldr	r3, [r7, #28]
 8006b5a:	1c5a      	adds	r2, r3, #1
 8006b5c:	61fa      	str	r2, [r7, #28]
 8006b5e:	69ba      	ldr	r2, [r7, #24]
 8006b60:	b2d2      	uxtb	r2, r2
 8006b62:	701a      	strb	r2, [r3, #0]
 8006b64:	69fb      	ldr	r3, [r7, #28]
 8006b66:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006b68:	2204      	movs	r2, #4
 8006b6a:	68f9      	ldr	r1, [r7, #12]
 8006b6c:	6938      	ldr	r0, [r7, #16]
 8006b6e:	f7fe fd95 	bl	800569c <_SendPacket>
  RECORD_END();
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	f383 8811 	msr	BASEPRI, r3
}
 8006b78:	bf00      	nop
 8006b7a:	3720      	adds	r7, #32
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bd80      	pop	{r7, pc}
 8006b80:	2001440c 	.word	0x2001440c
 8006b84:	200143dc 	.word	0x200143dc

08006b88 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b088      	sub	sp, #32
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006b90:	f3ef 8311 	mrs	r3, BASEPRI
 8006b94:	f04f 0120 	mov.w	r1, #32
 8006b98:	f381 8811 	msr	BASEPRI, r1
 8006b9c:	617b      	str	r3, [r7, #20]
 8006b9e:	4819      	ldr	r0, [pc, #100]	@ (8006c04 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006ba0:	f7fe fc8b 	bl	80054ba <_PreparePacket>
 8006ba4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006baa:	4b17      	ldr	r3, [pc, #92]	@ (8006c08 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006bac:	691b      	ldr	r3, [r3, #16]
 8006bae:	687a      	ldr	r2, [r7, #4]
 8006bb0:	1ad3      	subs	r3, r2, r3
 8006bb2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	61fb      	str	r3, [r7, #28]
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	61bb      	str	r3, [r7, #24]
 8006bbc:	e00b      	b.n	8006bd6 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8006bbe:	69bb      	ldr	r3, [r7, #24]
 8006bc0:	b2da      	uxtb	r2, r3
 8006bc2:	69fb      	ldr	r3, [r7, #28]
 8006bc4:	1c59      	adds	r1, r3, #1
 8006bc6:	61f9      	str	r1, [r7, #28]
 8006bc8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006bcc:	b2d2      	uxtb	r2, r2
 8006bce:	701a      	strb	r2, [r3, #0]
 8006bd0:	69bb      	ldr	r3, [r7, #24]
 8006bd2:	09db      	lsrs	r3, r3, #7
 8006bd4:	61bb      	str	r3, [r7, #24]
 8006bd6:	69bb      	ldr	r3, [r7, #24]
 8006bd8:	2b7f      	cmp	r3, #127	@ 0x7f
 8006bda:	d8f0      	bhi.n	8006bbe <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006bdc:	69fb      	ldr	r3, [r7, #28]
 8006bde:	1c5a      	adds	r2, r3, #1
 8006be0:	61fa      	str	r2, [r7, #28]
 8006be2:	69ba      	ldr	r2, [r7, #24]
 8006be4:	b2d2      	uxtb	r2, r2
 8006be6:	701a      	strb	r2, [r3, #0]
 8006be8:	69fb      	ldr	r3, [r7, #28]
 8006bea:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006bec:	2206      	movs	r2, #6
 8006bee:	68f9      	ldr	r1, [r7, #12]
 8006bf0:	6938      	ldr	r0, [r7, #16]
 8006bf2:	f7fe fd53 	bl	800569c <_SendPacket>
  RECORD_END();
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	f383 8811 	msr	BASEPRI, r3
}
 8006bfc:	bf00      	nop
 8006bfe:	3720      	adds	r7, #32
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}
 8006c04:	2001440c 	.word	0x2001440c
 8006c08:	200143dc 	.word	0x200143dc

08006c0c <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006c0c:	b480      	push	{r7}
 8006c0e:	b083      	sub	sp, #12
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006c14:	4b04      	ldr	r3, [pc, #16]	@ (8006c28 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8006c16:	691b      	ldr	r3, [r3, #16]
 8006c18:	687a      	ldr	r2, [r7, #4]
 8006c1a:	1ad3      	subs	r3, r2, r3
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	370c      	adds	r7, #12
 8006c20:	46bd      	mov	sp, r7
 8006c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c26:	4770      	bx	lr
 8006c28:	200143dc 	.word	0x200143dc

08006c2c <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b08c      	sub	sp, #48	@ 0x30
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	4603      	mov	r3, r0
 8006c34:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8006c36:	4b3b      	ldr	r3, [pc, #236]	@ (8006d24 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d06d      	beq.n	8006d1a <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8006c3e:	4b39      	ldr	r3, [pc, #228]	@ (8006d24 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006c44:	2300      	movs	r3, #0
 8006c46:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006c48:	e008      	b.n	8006c5c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006c4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c4c:	691b      	ldr	r3, [r3, #16]
 8006c4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 8006c50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d007      	beq.n	8006c66 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8006c56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c58:	3301      	adds	r3, #1
 8006c5a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006c5c:	79fb      	ldrb	r3, [r7, #7]
 8006c5e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006c60:	429a      	cmp	r2, r3
 8006c62:	d3f2      	bcc.n	8006c4a <SEGGER_SYSVIEW_SendModule+0x1e>
 8006c64:	e000      	b.n	8006c68 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8006c66:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006c68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d055      	beq.n	8006d1a <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006c6e:	f3ef 8311 	mrs	r3, BASEPRI
 8006c72:	f04f 0120 	mov.w	r1, #32
 8006c76:	f381 8811 	msr	BASEPRI, r1
 8006c7a:	617b      	str	r3, [r7, #20]
 8006c7c:	482a      	ldr	r0, [pc, #168]	@ (8006d28 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8006c7e:	f7fe fc1c 	bl	80054ba <_PreparePacket>
 8006c82:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c8c:	79fb      	ldrb	r3, [r7, #7]
 8006c8e:	623b      	str	r3, [r7, #32]
 8006c90:	e00b      	b.n	8006caa <SEGGER_SYSVIEW_SendModule+0x7e>
 8006c92:	6a3b      	ldr	r3, [r7, #32]
 8006c94:	b2da      	uxtb	r2, r3
 8006c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c98:	1c59      	adds	r1, r3, #1
 8006c9a:	6279      	str	r1, [r7, #36]	@ 0x24
 8006c9c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006ca0:	b2d2      	uxtb	r2, r2
 8006ca2:	701a      	strb	r2, [r3, #0]
 8006ca4:	6a3b      	ldr	r3, [r7, #32]
 8006ca6:	09db      	lsrs	r3, r3, #7
 8006ca8:	623b      	str	r3, [r7, #32]
 8006caa:	6a3b      	ldr	r3, [r7, #32]
 8006cac:	2b7f      	cmp	r3, #127	@ 0x7f
 8006cae:	d8f0      	bhi.n	8006c92 <SEGGER_SYSVIEW_SendModule+0x66>
 8006cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cb2:	1c5a      	adds	r2, r3, #1
 8006cb4:	627a      	str	r2, [r7, #36]	@ 0x24
 8006cb6:	6a3a      	ldr	r2, [r7, #32]
 8006cb8:	b2d2      	uxtb	r2, r2
 8006cba:	701a      	strb	r2, [r3, #0]
 8006cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cbe:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	61fb      	str	r3, [r7, #28]
 8006cc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cc6:	689b      	ldr	r3, [r3, #8]
 8006cc8:	61bb      	str	r3, [r7, #24]
 8006cca:	e00b      	b.n	8006ce4 <SEGGER_SYSVIEW_SendModule+0xb8>
 8006ccc:	69bb      	ldr	r3, [r7, #24]
 8006cce:	b2da      	uxtb	r2, r3
 8006cd0:	69fb      	ldr	r3, [r7, #28]
 8006cd2:	1c59      	adds	r1, r3, #1
 8006cd4:	61f9      	str	r1, [r7, #28]
 8006cd6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006cda:	b2d2      	uxtb	r2, r2
 8006cdc:	701a      	strb	r2, [r3, #0]
 8006cde:	69bb      	ldr	r3, [r7, #24]
 8006ce0:	09db      	lsrs	r3, r3, #7
 8006ce2:	61bb      	str	r3, [r7, #24]
 8006ce4:	69bb      	ldr	r3, [r7, #24]
 8006ce6:	2b7f      	cmp	r3, #127	@ 0x7f
 8006ce8:	d8f0      	bhi.n	8006ccc <SEGGER_SYSVIEW_SendModule+0xa0>
 8006cea:	69fb      	ldr	r3, [r7, #28]
 8006cec:	1c5a      	adds	r2, r3, #1
 8006cee:	61fa      	str	r2, [r7, #28]
 8006cf0:	69ba      	ldr	r2, [r7, #24]
 8006cf2:	b2d2      	uxtb	r2, r2
 8006cf4:	701a      	strb	r2, [r3, #0]
 8006cf6:	69fb      	ldr	r3, [r7, #28]
 8006cf8:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006cfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	2280      	movs	r2, #128	@ 0x80
 8006d00:	4619      	mov	r1, r3
 8006d02:	68f8      	ldr	r0, [r7, #12]
 8006d04:	f7fe fb8c 	bl	8005420 <_EncodeStr>
 8006d08:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8006d0a:	2216      	movs	r2, #22
 8006d0c:	68f9      	ldr	r1, [r7, #12]
 8006d0e:	6938      	ldr	r0, [r7, #16]
 8006d10:	f7fe fcc4 	bl	800569c <_SendPacket>
      RECORD_END();
 8006d14:	697b      	ldr	r3, [r7, #20]
 8006d16:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8006d1a:	bf00      	nop
 8006d1c:	3730      	adds	r7, #48	@ 0x30
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}
 8006d22:	bf00      	nop
 8006d24:	20014404 	.word	0x20014404
 8006d28:	2001440c 	.word	0x2001440c

08006d2c <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b082      	sub	sp, #8
 8006d30:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8006d32:	4b0c      	ldr	r3, [pc, #48]	@ (8006d64 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d00f      	beq.n	8006d5a <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8006d3a:	4b0a      	ldr	r3, [pc, #40]	@ (8006d64 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	68db      	ldr	r3, [r3, #12]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d002      	beq.n	8006d4e <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	68db      	ldr	r3, [r3, #12]
 8006d4c:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	691b      	ldr	r3, [r3, #16]
 8006d52:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d1f2      	bne.n	8006d40 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8006d5a:	bf00      	nop
 8006d5c:	3708      	adds	r7, #8
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}
 8006d62:	bf00      	nop
 8006d64:	20014404 	.word	0x20014404

08006d68 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b086      	sub	sp, #24
 8006d6c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8006d6e:	f3ef 8311 	mrs	r3, BASEPRI
 8006d72:	f04f 0120 	mov.w	r1, #32
 8006d76:	f381 8811 	msr	BASEPRI, r1
 8006d7a:	60fb      	str	r3, [r7, #12]
 8006d7c:	4817      	ldr	r0, [pc, #92]	@ (8006ddc <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8006d7e:	f7fe fb9c 	bl	80054ba <_PreparePacket>
 8006d82:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	617b      	str	r3, [r7, #20]
 8006d8c:	4b14      	ldr	r3, [pc, #80]	@ (8006de0 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8006d8e:	781b      	ldrb	r3, [r3, #0]
 8006d90:	613b      	str	r3, [r7, #16]
 8006d92:	e00b      	b.n	8006dac <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006d94:	693b      	ldr	r3, [r7, #16]
 8006d96:	b2da      	uxtb	r2, r3
 8006d98:	697b      	ldr	r3, [r7, #20]
 8006d9a:	1c59      	adds	r1, r3, #1
 8006d9c:	6179      	str	r1, [r7, #20]
 8006d9e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006da2:	b2d2      	uxtb	r2, r2
 8006da4:	701a      	strb	r2, [r3, #0]
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	09db      	lsrs	r3, r3, #7
 8006daa:	613b      	str	r3, [r7, #16]
 8006dac:	693b      	ldr	r3, [r7, #16]
 8006dae:	2b7f      	cmp	r3, #127	@ 0x7f
 8006db0:	d8f0      	bhi.n	8006d94 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8006db2:	697b      	ldr	r3, [r7, #20]
 8006db4:	1c5a      	adds	r2, r3, #1
 8006db6:	617a      	str	r2, [r7, #20]
 8006db8:	693a      	ldr	r2, [r7, #16]
 8006dba:	b2d2      	uxtb	r2, r2
 8006dbc:	701a      	strb	r2, [r3, #0]
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8006dc2:	221b      	movs	r2, #27
 8006dc4:	6879      	ldr	r1, [r7, #4]
 8006dc6:	68b8      	ldr	r0, [r7, #8]
 8006dc8:	f7fe fc68 	bl	800569c <_SendPacket>
  RECORD_END();
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	f383 8811 	msr	BASEPRI, r3
}
 8006dd2:	bf00      	nop
 8006dd4:	3718      	adds	r7, #24
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}
 8006dda:	bf00      	nop
 8006ddc:	2001440c 	.word	0x2001440c
 8006de0:	20014408 	.word	0x20014408

08006de4 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8006de4:	b40f      	push	{r0, r1, r2, r3}
 8006de6:	b580      	push	{r7, lr}
 8006de8:	b082      	sub	sp, #8
 8006dea:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8006dec:	f107 0314 	add.w	r3, r7, #20
 8006df0:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8006df2:	1d3b      	adds	r3, r7, #4
 8006df4:	461a      	mov	r2, r3
 8006df6:	2100      	movs	r1, #0
 8006df8:	6938      	ldr	r0, [r7, #16]
 8006dfa:	f7fe fed9 	bl	8005bb0 <_VPrintTarget>
  va_end(ParamList);
}
 8006dfe:	bf00      	nop
 8006e00:	3708      	adds	r7, #8
 8006e02:	46bd      	mov	sp, r7
 8006e04:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006e08:	b004      	add	sp, #16
 8006e0a:	4770      	bx	lr

08006e0c <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b08a      	sub	sp, #40	@ 0x28
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006e14:	f3ef 8311 	mrs	r3, BASEPRI
 8006e18:	f04f 0120 	mov.w	r1, #32
 8006e1c:	f381 8811 	msr	BASEPRI, r1
 8006e20:	617b      	str	r3, [r7, #20]
 8006e22:	4827      	ldr	r0, [pc, #156]	@ (8006ec0 <SEGGER_SYSVIEW_Warn+0xb4>)
 8006e24:	f7fe fb49 	bl	80054ba <_PreparePacket>
 8006e28:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006e2a:	2280      	movs	r2, #128	@ 0x80
 8006e2c:	6879      	ldr	r1, [r7, #4]
 8006e2e:	6938      	ldr	r0, [r7, #16]
 8006e30:	f7fe faf6 	bl	8005420 <_EncodeStr>
 8006e34:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	623b      	str	r3, [r7, #32]
 8006e3e:	e00b      	b.n	8006e58 <SEGGER_SYSVIEW_Warn+0x4c>
 8006e40:	6a3b      	ldr	r3, [r7, #32]
 8006e42:	b2da      	uxtb	r2, r3
 8006e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e46:	1c59      	adds	r1, r3, #1
 8006e48:	6279      	str	r1, [r7, #36]	@ 0x24
 8006e4a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006e4e:	b2d2      	uxtb	r2, r2
 8006e50:	701a      	strb	r2, [r3, #0]
 8006e52:	6a3b      	ldr	r3, [r7, #32]
 8006e54:	09db      	lsrs	r3, r3, #7
 8006e56:	623b      	str	r3, [r7, #32]
 8006e58:	6a3b      	ldr	r3, [r7, #32]
 8006e5a:	2b7f      	cmp	r3, #127	@ 0x7f
 8006e5c:	d8f0      	bhi.n	8006e40 <SEGGER_SYSVIEW_Warn+0x34>
 8006e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e60:	1c5a      	adds	r2, r3, #1
 8006e62:	627a      	str	r2, [r7, #36]	@ 0x24
 8006e64:	6a3a      	ldr	r2, [r7, #32]
 8006e66:	b2d2      	uxtb	r2, r2
 8006e68:	701a      	strb	r2, [r3, #0]
 8006e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e6c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	61fb      	str	r3, [r7, #28]
 8006e72:	2300      	movs	r3, #0
 8006e74:	61bb      	str	r3, [r7, #24]
 8006e76:	e00b      	b.n	8006e90 <SEGGER_SYSVIEW_Warn+0x84>
 8006e78:	69bb      	ldr	r3, [r7, #24]
 8006e7a:	b2da      	uxtb	r2, r3
 8006e7c:	69fb      	ldr	r3, [r7, #28]
 8006e7e:	1c59      	adds	r1, r3, #1
 8006e80:	61f9      	str	r1, [r7, #28]
 8006e82:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006e86:	b2d2      	uxtb	r2, r2
 8006e88:	701a      	strb	r2, [r3, #0]
 8006e8a:	69bb      	ldr	r3, [r7, #24]
 8006e8c:	09db      	lsrs	r3, r3, #7
 8006e8e:	61bb      	str	r3, [r7, #24]
 8006e90:	69bb      	ldr	r3, [r7, #24]
 8006e92:	2b7f      	cmp	r3, #127	@ 0x7f
 8006e94:	d8f0      	bhi.n	8006e78 <SEGGER_SYSVIEW_Warn+0x6c>
 8006e96:	69fb      	ldr	r3, [r7, #28]
 8006e98:	1c5a      	adds	r2, r3, #1
 8006e9a:	61fa      	str	r2, [r7, #28]
 8006e9c:	69ba      	ldr	r2, [r7, #24]
 8006e9e:	b2d2      	uxtb	r2, r2
 8006ea0:	701a      	strb	r2, [r3, #0]
 8006ea2:	69fb      	ldr	r3, [r7, #28]
 8006ea4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006ea6:	221a      	movs	r2, #26
 8006ea8:	68f9      	ldr	r1, [r7, #12]
 8006eaa:	6938      	ldr	r0, [r7, #16]
 8006eac:	f7fe fbf6 	bl	800569c <_SendPacket>
  RECORD_END();
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	f383 8811 	msr	BASEPRI, r3
}
 8006eb6:	bf00      	nop
 8006eb8:	3728      	adds	r7, #40	@ 0x28
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd80      	pop	{r7, pc}
 8006ebe:	bf00      	nop
 8006ec0:	2001440c 	.word	0x2001440c

08006ec4 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8006ec8:	4b13      	ldr	r3, [pc, #76]	@ (8006f18 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006eca:	7e1b      	ldrb	r3, [r3, #24]
 8006ecc:	4619      	mov	r1, r3
 8006ece:	4a13      	ldr	r2, [pc, #76]	@ (8006f1c <SEGGER_SYSVIEW_IsStarted+0x58>)
 8006ed0:	460b      	mov	r3, r1
 8006ed2:	005b      	lsls	r3, r3, #1
 8006ed4:	440b      	add	r3, r1
 8006ed6:	00db      	lsls	r3, r3, #3
 8006ed8:	4413      	add	r3, r2
 8006eda:	336c      	adds	r3, #108	@ 0x6c
 8006edc:	681a      	ldr	r2, [r3, #0]
 8006ede:	4b0e      	ldr	r3, [pc, #56]	@ (8006f18 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006ee0:	7e1b      	ldrb	r3, [r3, #24]
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	490d      	ldr	r1, [pc, #52]	@ (8006f1c <SEGGER_SYSVIEW_IsStarted+0x58>)
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	005b      	lsls	r3, r3, #1
 8006eea:	4403      	add	r3, r0
 8006eec:	00db      	lsls	r3, r3, #3
 8006eee:	440b      	add	r3, r1
 8006ef0:	3370      	adds	r3, #112	@ 0x70
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	429a      	cmp	r2, r3
 8006ef6:	d00b      	beq.n	8006f10 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8006ef8:	4b07      	ldr	r3, [pc, #28]	@ (8006f18 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006efa:	789b      	ldrb	r3, [r3, #2]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d107      	bne.n	8006f10 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8006f00:	4b05      	ldr	r3, [pc, #20]	@ (8006f18 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006f02:	2201      	movs	r2, #1
 8006f04:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8006f06:	f7fe fae5 	bl	80054d4 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8006f0a:	4b03      	ldr	r3, [pc, #12]	@ (8006f18 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8006f10:	4b01      	ldr	r3, [pc, #4]	@ (8006f18 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006f12:	781b      	ldrb	r3, [r3, #0]
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	bd80      	pop	{r7, pc}
 8006f18:	200143dc 	.word	0x200143dc
 8006f1c:	20012f1c 	.word	0x20012f1c

08006f20 <__NVIC_EnableIRQ>:
{
 8006f20:	b480      	push	{r7}
 8006f22:	b083      	sub	sp, #12
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	4603      	mov	r3, r0
 8006f28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	db0b      	blt.n	8006f4a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006f32:	79fb      	ldrb	r3, [r7, #7]
 8006f34:	f003 021f 	and.w	r2, r3, #31
 8006f38:	4907      	ldr	r1, [pc, #28]	@ (8006f58 <__NVIC_EnableIRQ+0x38>)
 8006f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f3e:	095b      	lsrs	r3, r3, #5
 8006f40:	2001      	movs	r0, #1
 8006f42:	fa00 f202 	lsl.w	r2, r0, r2
 8006f46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006f4a:	bf00      	nop
 8006f4c:	370c      	adds	r7, #12
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f54:	4770      	bx	lr
 8006f56:	bf00      	nop
 8006f58:	e000e100 	.word	0xe000e100

08006f5c <__NVIC_SetPriority>:
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b083      	sub	sp, #12
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	4603      	mov	r3, r0
 8006f64:	6039      	str	r1, [r7, #0]
 8006f66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006f68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	db0a      	blt.n	8006f86 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	b2da      	uxtb	r2, r3
 8006f74:	490c      	ldr	r1, [pc, #48]	@ (8006fa8 <__NVIC_SetPriority+0x4c>)
 8006f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f7a:	0112      	lsls	r2, r2, #4
 8006f7c:	b2d2      	uxtb	r2, r2
 8006f7e:	440b      	add	r3, r1
 8006f80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006f84:	e00a      	b.n	8006f9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	b2da      	uxtb	r2, r3
 8006f8a:	4908      	ldr	r1, [pc, #32]	@ (8006fac <__NVIC_SetPriority+0x50>)
 8006f8c:	79fb      	ldrb	r3, [r7, #7]
 8006f8e:	f003 030f 	and.w	r3, r3, #15
 8006f92:	3b04      	subs	r3, #4
 8006f94:	0112      	lsls	r2, r2, #4
 8006f96:	b2d2      	uxtb	r2, r2
 8006f98:	440b      	add	r3, r1
 8006f9a:	761a      	strb	r2, [r3, #24]
}
 8006f9c:	bf00      	nop
 8006f9e:	370c      	adds	r7, #12
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa6:	4770      	bx	lr
 8006fa8:	e000e100 	.word	0xe000e100
 8006fac:	e000ed00 	.word	0xe000ed00

08006fb0 <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b082      	sub	sp, #8
 8006fb4:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 8006fb6:	f7ff ff85 	bl	8006ec4 <SEGGER_SYSVIEW_IsStarted>
 8006fba:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d101      	bne.n	8006fc6 <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 8006fc2:	f7ff f9fd 	bl	80063c0 <SEGGER_SYSVIEW_Start>
  }
}
 8006fc6:	bf00      	nop
 8006fc8:	3708      	adds	r7, #8
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}
	...

08006fd0 <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b082      	sub	sp, #8
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8006fda:	4b0c      	ldr	r3, [pc, #48]	@ (800700c <_cbOnUARTRx+0x3c>)
 8006fdc:	781b      	ldrb	r3, [r3, #0]
 8006fde:	2b03      	cmp	r3, #3
 8006fe0:	d806      	bhi.n	8006ff0 <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 8006fe2:	4b0a      	ldr	r3, [pc, #40]	@ (800700c <_cbOnUARTRx+0x3c>)
 8006fe4:	781b      	ldrb	r3, [r3, #0]
 8006fe6:	3301      	adds	r3, #1
 8006fe8:	b2da      	uxtb	r2, r3
 8006fea:	4b08      	ldr	r3, [pc, #32]	@ (800700c <_cbOnUARTRx+0x3c>)
 8006fec:	701a      	strb	r2, [r3, #0]
    goto Done;
 8006fee:	e009      	b.n	8007004 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8006ff0:	f7ff ffde 	bl	8006fb0 <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8006ff4:	4b05      	ldr	r3, [pc, #20]	@ (800700c <_cbOnUARTRx+0x3c>)
 8006ff6:	685b      	ldr	r3, [r3, #4]
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	1dfb      	adds	r3, r7, #7
 8006ffc:	2201      	movs	r2, #1
 8006ffe:	4619      	mov	r1, r3
 8007000:	f7fe f8f4 	bl	80051ec <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8007004:	bf00      	nop
}
 8007006:	3708      	adds	r7, #8
 8007008:	46bd      	mov	sp, r7
 800700a:	bd80      	pop	{r7, pc}
 800700c:	20000014 	.word	0x20000014

08007010 <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8007010:	b580      	push	{r7, lr}
 8007012:	b084      	sub	sp, #16
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8007018:	4b14      	ldr	r3, [pc, #80]	@ (800706c <_cbOnUARTTx+0x5c>)
 800701a:	785b      	ldrb	r3, [r3, #1]
 800701c:	2b03      	cmp	r3, #3
 800701e:	d80f      	bhi.n	8007040 <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8007020:	4b12      	ldr	r3, [pc, #72]	@ (800706c <_cbOnUARTTx+0x5c>)
 8007022:	785b      	ldrb	r3, [r3, #1]
 8007024:	461a      	mov	r2, r3
 8007026:	4b12      	ldr	r3, [pc, #72]	@ (8007070 <_cbOnUARTTx+0x60>)
 8007028:	5c9a      	ldrb	r2, [r3, r2]
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 800702e:	4b0f      	ldr	r3, [pc, #60]	@ (800706c <_cbOnUARTTx+0x5c>)
 8007030:	785b      	ldrb	r3, [r3, #1]
 8007032:	3301      	adds	r3, #1
 8007034:	b2da      	uxtb	r2, r3
 8007036:	4b0d      	ldr	r3, [pc, #52]	@ (800706c <_cbOnUARTTx+0x5c>)
 8007038:	705a      	strb	r2, [r3, #1]
    r = 1;
 800703a:	2301      	movs	r3, #1
 800703c:	60fb      	str	r3, [r7, #12]
    goto Done;
 800703e:	e00f      	b.n	8007060 <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8007040:	4b0a      	ldr	r3, [pc, #40]	@ (800706c <_cbOnUARTTx+0x5c>)
 8007042:	685b      	ldr	r3, [r3, #4]
 8007044:	2201      	movs	r2, #1
 8007046:	6879      	ldr	r1, [r7, #4]
 8007048:	4618      	mov	r0, r3
 800704a:	f7fd ff73 	bl	8004f34 <SEGGER_RTT_ReadUpBufferNoLock>
 800704e:	4603      	mov	r3, r0
 8007050:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	2b00      	cmp	r3, #0
 8007056:	da02      	bge.n	800705e <_cbOnUARTTx+0x4e>
    r = 0;
 8007058:	2300      	movs	r3, #0
 800705a:	60fb      	str	r3, [r7, #12]
 800705c:	e000      	b.n	8007060 <_cbOnUARTTx+0x50>
  }
Done:
 800705e:	bf00      	nop
  return r;
 8007060:	68fb      	ldr	r3, [r7, #12]
}
 8007062:	4618      	mov	r0, r3
 8007064:	3710      	adds	r7, #16
 8007066:	46bd      	mov	sp, r7
 8007068:	bd80      	pop	{r7, pc}
 800706a:	bf00      	nop
 800706c:	20000014 	.word	0x20000014
 8007070:	08007db8 	.word	0x08007db8

08007074 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b082      	sub	sp, #8
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 800707c:	4a04      	ldr	r2, [pc, #16]	@ (8007090 <SEGGER_UART_init+0x1c>)
 800707e:	4905      	ldr	r1, [pc, #20]	@ (8007094 <SEGGER_UART_init+0x20>)
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f000 f863 	bl	800714c <HIF_UART_Init>
}
 8007086:	bf00      	nop
 8007088:	3708      	adds	r7, #8
 800708a:	46bd      	mov	sp, r7
 800708c:	bd80      	pop	{r7, pc}
 800708e:	bf00      	nop
 8007090:	08006fd1 	.word	0x08006fd1
 8007094:	08007011 	.word	0x08007011

08007098 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8007098:	b580      	push	{r7, lr}
 800709a:	b084      	sub	sp, #16
 800709c:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 800709e:	4b1e      	ldr	r3, [pc, #120]	@ (8007118 <USART2_IRQHandler+0x80>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	f003 0320 	and.w	r3, r3, #32
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d011      	beq.n	80070d2 <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 80070ae:	4b1b      	ldr	r3, [pc, #108]	@ (800711c <USART2_IRQHandler+0x84>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	b2db      	uxtb	r3, r3
 80070b4:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	f003 030b 	and.w	r3, r3, #11
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d108      	bne.n	80070d2 <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 80070c0:	4b17      	ldr	r3, [pc, #92]	@ (8007120 <USART2_IRQHandler+0x88>)
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d004      	beq.n	80070d2 <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 80070c8:	4b15      	ldr	r3, [pc, #84]	@ (8007120 <USART2_IRQHandler+0x88>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	79fa      	ldrb	r2, [r7, #7]
 80070ce:	4610      	mov	r0, r2
 80070d0:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d01a      	beq.n	8007112 <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 80070dc:	4b11      	ldr	r3, [pc, #68]	@ (8007124 <USART2_IRQHandler+0x8c>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d015      	beq.n	8007110 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 80070e4:	4b0f      	ldr	r3, [pc, #60]	@ (8007124 <USART2_IRQHandler+0x8c>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	1dfa      	adds	r2, r7, #7
 80070ea:	4610      	mov	r0, r2
 80070ec:	4798      	blx	r3
 80070ee:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d106      	bne.n	8007104 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 80070f6:	4b0c      	ldr	r3, [pc, #48]	@ (8007128 <USART2_IRQHandler+0x90>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4a0b      	ldr	r2, [pc, #44]	@ (8007128 <USART2_IRQHandler+0x90>)
 80070fc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007100:	6013      	str	r3, [r2, #0]
 8007102:	e006      	b.n	8007112 <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8007104:	4b04      	ldr	r3, [pc, #16]	@ (8007118 <USART2_IRQHandler+0x80>)
 8007106:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8007108:	79fa      	ldrb	r2, [r7, #7]
 800710a:	4b04      	ldr	r3, [pc, #16]	@ (800711c <USART2_IRQHandler+0x84>)
 800710c:	601a      	str	r2, [r3, #0]
 800710e:	e000      	b.n	8007112 <USART2_IRQHandler+0x7a>
      return;
 8007110:	bf00      	nop
    }
  }
}
 8007112:	3710      	adds	r7, #16
 8007114:	46bd      	mov	sp, r7
 8007116:	bd80      	pop	{r7, pc}
 8007118:	40004400 	.word	0x40004400
 800711c:	40004404 	.word	0x40004404
 8007120:	200144f0 	.word	0x200144f0
 8007124:	200144f4 	.word	0x200144f4
 8007128:	4000440c 	.word	0x4000440c

0800712c <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 800712c:	b480      	push	{r7}
 800712e:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8007130:	4b05      	ldr	r3, [pc, #20]	@ (8007148 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4a04      	ldr	r2, [pc, #16]	@ (8007148 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8007136:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800713a:	6013      	str	r3, [r2, #0]
}
 800713c:	bf00      	nop
 800713e:	46bd      	mov	sp, r7
 8007140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007144:	4770      	bx	lr
 8007146:	bf00      	nop
 8007148:	4000440c 	.word	0x4000440c

0800714c <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 800714c:	b580      	push	{r7, lr}
 800714e:	b086      	sub	sp, #24
 8007150:	af00      	add	r7, sp, #0
 8007152:	60f8      	str	r0, [r7, #12]
 8007154:	60b9      	str	r1, [r7, #8]
 8007156:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8007158:	4b2e      	ldr	r3, [pc, #184]	@ (8007214 <HIF_UART_Init+0xc8>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4a2d      	ldr	r2, [pc, #180]	@ (8007214 <HIF_UART_Init+0xc8>)
 800715e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007162:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8007164:	4b2c      	ldr	r3, [pc, #176]	@ (8007218 <HIF_UART_Init+0xcc>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a2b      	ldr	r2, [pc, #172]	@ (8007218 <HIF_UART_Init+0xcc>)
 800716a:	f043 0301 	orr.w	r3, r3, #1
 800716e:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 8007170:	4b2a      	ldr	r3, [pc, #168]	@ (800721c <HIF_UART_Init+0xd0>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800717c:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 800717e:	693b      	ldr	r3, [r7, #16]
 8007180:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 8007184:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 8007186:	4a25      	ldr	r2, [pc, #148]	@ (800721c <HIF_UART_Init+0xd0>)
 8007188:	693b      	ldr	r3, [r7, #16]
 800718a:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 800718c:	4b24      	ldr	r3, [pc, #144]	@ (8007220 <HIF_UART_Init+0xd4>)
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 8007192:	693b      	ldr	r3, [r7, #16]
 8007194:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007198:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 800719a:	693b      	ldr	r3, [r7, #16]
 800719c:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 80071a0:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 80071a2:	4a1f      	ldr	r2, [pc, #124]	@ (8007220 <HIF_UART_Init+0xd4>)
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 80071a8:	4b1e      	ldr	r3, [pc, #120]	@ (8007224 <HIF_UART_Init+0xd8>)
 80071aa:	f24a 022c 	movw	r2, #41004	@ 0xa02c
 80071ae:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 80071b0:	4b1d      	ldr	r3, [pc, #116]	@ (8007228 <HIF_UART_Init+0xdc>)
 80071b2:	2200      	movs	r2, #0
 80071b4:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 80071b6:	4b1d      	ldr	r3, [pc, #116]	@ (800722c <HIF_UART_Init+0xe0>)
 80071b8:	2280      	movs	r2, #128	@ 0x80
 80071ba:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	00db      	lsls	r3, r3, #3
 80071c0:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 80071c2:	4a1b      	ldr	r2, [pc, #108]	@ (8007230 <HIF_UART_Init+0xe4>)
 80071c4:	697b      	ldr	r3, [r7, #20]
 80071c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80071ca:	3301      	adds	r3, #1
 80071cc:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	085b      	lsrs	r3, r3, #1
 80071d2:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 80071d4:	697b      	ldr	r3, [r7, #20]
 80071d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80071da:	d302      	bcc.n	80071e2 <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 80071dc:	f640 73ff 	movw	r3, #4095	@ 0xfff
 80071e0:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d004      	beq.n	80071f2 <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	011b      	lsls	r3, r3, #4
 80071ec:	4a11      	ldr	r2, [pc, #68]	@ (8007234 <HIF_UART_Init+0xe8>)
 80071ee:	b29b      	uxth	r3, r3
 80071f0:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 80071f2:	4a11      	ldr	r2, [pc, #68]	@ (8007238 <HIF_UART_Init+0xec>)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 80071f8:	4a10      	ldr	r2, [pc, #64]	@ (800723c <HIF_UART_Init+0xf0>)
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 80071fe:	2106      	movs	r1, #6
 8007200:	2026      	movs	r0, #38	@ 0x26
 8007202:	f7ff feab 	bl	8006f5c <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8007206:	2026      	movs	r0, #38	@ 0x26
 8007208:	f7ff fe8a 	bl	8006f20 <__NVIC_EnableIRQ>
}
 800720c:	bf00      	nop
 800720e:	3718      	adds	r7, #24
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}
 8007214:	40023840 	.word	0x40023840
 8007218:	40023830 	.word	0x40023830
 800721c:	40020020 	.word	0x40020020
 8007220:	40020000 	.word	0x40020000
 8007224:	4000440c 	.word	0x4000440c
 8007228:	40004410 	.word	0x40004410
 800722c:	40004414 	.word	0x40004414
 8007230:	0501bd00 	.word	0x0501bd00
 8007234:	40004408 	.word	0x40004408
 8007238:	200144f0 	.word	0x200144f0
 800723c:	200144f4 	.word	0x200144f4

08007240 <sniprintf>:
 8007240:	b40c      	push	{r2, r3}
 8007242:	b530      	push	{r4, r5, lr}
 8007244:	4b17      	ldr	r3, [pc, #92]	@ (80072a4 <sniprintf+0x64>)
 8007246:	1e0c      	subs	r4, r1, #0
 8007248:	681d      	ldr	r5, [r3, #0]
 800724a:	b09d      	sub	sp, #116	@ 0x74
 800724c:	da08      	bge.n	8007260 <sniprintf+0x20>
 800724e:	238b      	movs	r3, #139	@ 0x8b
 8007250:	602b      	str	r3, [r5, #0]
 8007252:	f04f 30ff 	mov.w	r0, #4294967295
 8007256:	b01d      	add	sp, #116	@ 0x74
 8007258:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800725c:	b002      	add	sp, #8
 800725e:	4770      	bx	lr
 8007260:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007264:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007268:	bf14      	ite	ne
 800726a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800726e:	4623      	moveq	r3, r4
 8007270:	9304      	str	r3, [sp, #16]
 8007272:	9307      	str	r3, [sp, #28]
 8007274:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007278:	9002      	str	r0, [sp, #8]
 800727a:	9006      	str	r0, [sp, #24]
 800727c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007280:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007282:	ab21      	add	r3, sp, #132	@ 0x84
 8007284:	a902      	add	r1, sp, #8
 8007286:	4628      	mov	r0, r5
 8007288:	9301      	str	r3, [sp, #4]
 800728a:	f000 f9ad 	bl	80075e8 <_svfiprintf_r>
 800728e:	1c43      	adds	r3, r0, #1
 8007290:	bfbc      	itt	lt
 8007292:	238b      	movlt	r3, #139	@ 0x8b
 8007294:	602b      	strlt	r3, [r5, #0]
 8007296:	2c00      	cmp	r4, #0
 8007298:	d0dd      	beq.n	8007256 <sniprintf+0x16>
 800729a:	9b02      	ldr	r3, [sp, #8]
 800729c:	2200      	movs	r2, #0
 800729e:	701a      	strb	r2, [r3, #0]
 80072a0:	e7d9      	b.n	8007256 <sniprintf+0x16>
 80072a2:	bf00      	nop
 80072a4:	2000001c 	.word	0x2000001c

080072a8 <memcmp>:
 80072a8:	b510      	push	{r4, lr}
 80072aa:	3901      	subs	r1, #1
 80072ac:	4402      	add	r2, r0
 80072ae:	4290      	cmp	r0, r2
 80072b0:	d101      	bne.n	80072b6 <memcmp+0xe>
 80072b2:	2000      	movs	r0, #0
 80072b4:	e005      	b.n	80072c2 <memcmp+0x1a>
 80072b6:	7803      	ldrb	r3, [r0, #0]
 80072b8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80072bc:	42a3      	cmp	r3, r4
 80072be:	d001      	beq.n	80072c4 <memcmp+0x1c>
 80072c0:	1b18      	subs	r0, r3, r4
 80072c2:	bd10      	pop	{r4, pc}
 80072c4:	3001      	adds	r0, #1
 80072c6:	e7f2      	b.n	80072ae <memcmp+0x6>

080072c8 <memset>:
 80072c8:	4402      	add	r2, r0
 80072ca:	4603      	mov	r3, r0
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d100      	bne.n	80072d2 <memset+0xa>
 80072d0:	4770      	bx	lr
 80072d2:	f803 1b01 	strb.w	r1, [r3], #1
 80072d6:	e7f9      	b.n	80072cc <memset+0x4>

080072d8 <__libc_init_array>:
 80072d8:	b570      	push	{r4, r5, r6, lr}
 80072da:	4d0d      	ldr	r5, [pc, #52]	@ (8007310 <__libc_init_array+0x38>)
 80072dc:	4c0d      	ldr	r4, [pc, #52]	@ (8007314 <__libc_init_array+0x3c>)
 80072de:	1b64      	subs	r4, r4, r5
 80072e0:	10a4      	asrs	r4, r4, #2
 80072e2:	2600      	movs	r6, #0
 80072e4:	42a6      	cmp	r6, r4
 80072e6:	d109      	bne.n	80072fc <__libc_init_array+0x24>
 80072e8:	4d0b      	ldr	r5, [pc, #44]	@ (8007318 <__libc_init_array+0x40>)
 80072ea:	4c0c      	ldr	r4, [pc, #48]	@ (800731c <__libc_init_array+0x44>)
 80072ec:	f000 fc74 	bl	8007bd8 <_init>
 80072f0:	1b64      	subs	r4, r4, r5
 80072f2:	10a4      	asrs	r4, r4, #2
 80072f4:	2600      	movs	r6, #0
 80072f6:	42a6      	cmp	r6, r4
 80072f8:	d105      	bne.n	8007306 <__libc_init_array+0x2e>
 80072fa:	bd70      	pop	{r4, r5, r6, pc}
 80072fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007300:	4798      	blx	r3
 8007302:	3601      	adds	r6, #1
 8007304:	e7ee      	b.n	80072e4 <__libc_init_array+0xc>
 8007306:	f855 3b04 	ldr.w	r3, [r5], #4
 800730a:	4798      	blx	r3
 800730c:	3601      	adds	r6, #1
 800730e:	e7f2      	b.n	80072f6 <__libc_init_array+0x1e>
 8007310:	08007df8 	.word	0x08007df8
 8007314:	08007df8 	.word	0x08007df8
 8007318:	08007df8 	.word	0x08007df8
 800731c:	08007dfc 	.word	0x08007dfc

08007320 <__retarget_lock_acquire_recursive>:
 8007320:	4770      	bx	lr

08007322 <__retarget_lock_release_recursive>:
 8007322:	4770      	bx	lr

08007324 <memcpy>:
 8007324:	440a      	add	r2, r1
 8007326:	4291      	cmp	r1, r2
 8007328:	f100 33ff 	add.w	r3, r0, #4294967295
 800732c:	d100      	bne.n	8007330 <memcpy+0xc>
 800732e:	4770      	bx	lr
 8007330:	b510      	push	{r4, lr}
 8007332:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007336:	f803 4f01 	strb.w	r4, [r3, #1]!
 800733a:	4291      	cmp	r1, r2
 800733c:	d1f9      	bne.n	8007332 <memcpy+0xe>
 800733e:	bd10      	pop	{r4, pc}

08007340 <_free_r>:
 8007340:	b538      	push	{r3, r4, r5, lr}
 8007342:	4605      	mov	r5, r0
 8007344:	2900      	cmp	r1, #0
 8007346:	d041      	beq.n	80073cc <_free_r+0x8c>
 8007348:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800734c:	1f0c      	subs	r4, r1, #4
 800734e:	2b00      	cmp	r3, #0
 8007350:	bfb8      	it	lt
 8007352:	18e4      	addlt	r4, r4, r3
 8007354:	f000 f8e0 	bl	8007518 <__malloc_lock>
 8007358:	4a1d      	ldr	r2, [pc, #116]	@ (80073d0 <_free_r+0x90>)
 800735a:	6813      	ldr	r3, [r2, #0]
 800735c:	b933      	cbnz	r3, 800736c <_free_r+0x2c>
 800735e:	6063      	str	r3, [r4, #4]
 8007360:	6014      	str	r4, [r2, #0]
 8007362:	4628      	mov	r0, r5
 8007364:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007368:	f000 b8dc 	b.w	8007524 <__malloc_unlock>
 800736c:	42a3      	cmp	r3, r4
 800736e:	d908      	bls.n	8007382 <_free_r+0x42>
 8007370:	6820      	ldr	r0, [r4, #0]
 8007372:	1821      	adds	r1, r4, r0
 8007374:	428b      	cmp	r3, r1
 8007376:	bf01      	itttt	eq
 8007378:	6819      	ldreq	r1, [r3, #0]
 800737a:	685b      	ldreq	r3, [r3, #4]
 800737c:	1809      	addeq	r1, r1, r0
 800737e:	6021      	streq	r1, [r4, #0]
 8007380:	e7ed      	b.n	800735e <_free_r+0x1e>
 8007382:	461a      	mov	r2, r3
 8007384:	685b      	ldr	r3, [r3, #4]
 8007386:	b10b      	cbz	r3, 800738c <_free_r+0x4c>
 8007388:	42a3      	cmp	r3, r4
 800738a:	d9fa      	bls.n	8007382 <_free_r+0x42>
 800738c:	6811      	ldr	r1, [r2, #0]
 800738e:	1850      	adds	r0, r2, r1
 8007390:	42a0      	cmp	r0, r4
 8007392:	d10b      	bne.n	80073ac <_free_r+0x6c>
 8007394:	6820      	ldr	r0, [r4, #0]
 8007396:	4401      	add	r1, r0
 8007398:	1850      	adds	r0, r2, r1
 800739a:	4283      	cmp	r3, r0
 800739c:	6011      	str	r1, [r2, #0]
 800739e:	d1e0      	bne.n	8007362 <_free_r+0x22>
 80073a0:	6818      	ldr	r0, [r3, #0]
 80073a2:	685b      	ldr	r3, [r3, #4]
 80073a4:	6053      	str	r3, [r2, #4]
 80073a6:	4408      	add	r0, r1
 80073a8:	6010      	str	r0, [r2, #0]
 80073aa:	e7da      	b.n	8007362 <_free_r+0x22>
 80073ac:	d902      	bls.n	80073b4 <_free_r+0x74>
 80073ae:	230c      	movs	r3, #12
 80073b0:	602b      	str	r3, [r5, #0]
 80073b2:	e7d6      	b.n	8007362 <_free_r+0x22>
 80073b4:	6820      	ldr	r0, [r4, #0]
 80073b6:	1821      	adds	r1, r4, r0
 80073b8:	428b      	cmp	r3, r1
 80073ba:	bf04      	itt	eq
 80073bc:	6819      	ldreq	r1, [r3, #0]
 80073be:	685b      	ldreq	r3, [r3, #4]
 80073c0:	6063      	str	r3, [r4, #4]
 80073c2:	bf04      	itt	eq
 80073c4:	1809      	addeq	r1, r1, r0
 80073c6:	6021      	streq	r1, [r4, #0]
 80073c8:	6054      	str	r4, [r2, #4]
 80073ca:	e7ca      	b.n	8007362 <_free_r+0x22>
 80073cc:	bd38      	pop	{r3, r4, r5, pc}
 80073ce:	bf00      	nop
 80073d0:	2001463c 	.word	0x2001463c

080073d4 <sbrk_aligned>:
 80073d4:	b570      	push	{r4, r5, r6, lr}
 80073d6:	4e0f      	ldr	r6, [pc, #60]	@ (8007414 <sbrk_aligned+0x40>)
 80073d8:	460c      	mov	r4, r1
 80073da:	6831      	ldr	r1, [r6, #0]
 80073dc:	4605      	mov	r5, r0
 80073de:	b911      	cbnz	r1, 80073e6 <sbrk_aligned+0x12>
 80073e0:	f000 fba6 	bl	8007b30 <_sbrk_r>
 80073e4:	6030      	str	r0, [r6, #0]
 80073e6:	4621      	mov	r1, r4
 80073e8:	4628      	mov	r0, r5
 80073ea:	f000 fba1 	bl	8007b30 <_sbrk_r>
 80073ee:	1c43      	adds	r3, r0, #1
 80073f0:	d103      	bne.n	80073fa <sbrk_aligned+0x26>
 80073f2:	f04f 34ff 	mov.w	r4, #4294967295
 80073f6:	4620      	mov	r0, r4
 80073f8:	bd70      	pop	{r4, r5, r6, pc}
 80073fa:	1cc4      	adds	r4, r0, #3
 80073fc:	f024 0403 	bic.w	r4, r4, #3
 8007400:	42a0      	cmp	r0, r4
 8007402:	d0f8      	beq.n	80073f6 <sbrk_aligned+0x22>
 8007404:	1a21      	subs	r1, r4, r0
 8007406:	4628      	mov	r0, r5
 8007408:	f000 fb92 	bl	8007b30 <_sbrk_r>
 800740c:	3001      	adds	r0, #1
 800740e:	d1f2      	bne.n	80073f6 <sbrk_aligned+0x22>
 8007410:	e7ef      	b.n	80073f2 <sbrk_aligned+0x1e>
 8007412:	bf00      	nop
 8007414:	20014638 	.word	0x20014638

08007418 <_malloc_r>:
 8007418:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800741c:	1ccd      	adds	r5, r1, #3
 800741e:	f025 0503 	bic.w	r5, r5, #3
 8007422:	3508      	adds	r5, #8
 8007424:	2d0c      	cmp	r5, #12
 8007426:	bf38      	it	cc
 8007428:	250c      	movcc	r5, #12
 800742a:	2d00      	cmp	r5, #0
 800742c:	4606      	mov	r6, r0
 800742e:	db01      	blt.n	8007434 <_malloc_r+0x1c>
 8007430:	42a9      	cmp	r1, r5
 8007432:	d904      	bls.n	800743e <_malloc_r+0x26>
 8007434:	230c      	movs	r3, #12
 8007436:	6033      	str	r3, [r6, #0]
 8007438:	2000      	movs	r0, #0
 800743a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800743e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007514 <_malloc_r+0xfc>
 8007442:	f000 f869 	bl	8007518 <__malloc_lock>
 8007446:	f8d8 3000 	ldr.w	r3, [r8]
 800744a:	461c      	mov	r4, r3
 800744c:	bb44      	cbnz	r4, 80074a0 <_malloc_r+0x88>
 800744e:	4629      	mov	r1, r5
 8007450:	4630      	mov	r0, r6
 8007452:	f7ff ffbf 	bl	80073d4 <sbrk_aligned>
 8007456:	1c43      	adds	r3, r0, #1
 8007458:	4604      	mov	r4, r0
 800745a:	d158      	bne.n	800750e <_malloc_r+0xf6>
 800745c:	f8d8 4000 	ldr.w	r4, [r8]
 8007460:	4627      	mov	r7, r4
 8007462:	2f00      	cmp	r7, #0
 8007464:	d143      	bne.n	80074ee <_malloc_r+0xd6>
 8007466:	2c00      	cmp	r4, #0
 8007468:	d04b      	beq.n	8007502 <_malloc_r+0xea>
 800746a:	6823      	ldr	r3, [r4, #0]
 800746c:	4639      	mov	r1, r7
 800746e:	4630      	mov	r0, r6
 8007470:	eb04 0903 	add.w	r9, r4, r3
 8007474:	f000 fb5c 	bl	8007b30 <_sbrk_r>
 8007478:	4581      	cmp	r9, r0
 800747a:	d142      	bne.n	8007502 <_malloc_r+0xea>
 800747c:	6821      	ldr	r1, [r4, #0]
 800747e:	1a6d      	subs	r5, r5, r1
 8007480:	4629      	mov	r1, r5
 8007482:	4630      	mov	r0, r6
 8007484:	f7ff ffa6 	bl	80073d4 <sbrk_aligned>
 8007488:	3001      	adds	r0, #1
 800748a:	d03a      	beq.n	8007502 <_malloc_r+0xea>
 800748c:	6823      	ldr	r3, [r4, #0]
 800748e:	442b      	add	r3, r5
 8007490:	6023      	str	r3, [r4, #0]
 8007492:	f8d8 3000 	ldr.w	r3, [r8]
 8007496:	685a      	ldr	r2, [r3, #4]
 8007498:	bb62      	cbnz	r2, 80074f4 <_malloc_r+0xdc>
 800749a:	f8c8 7000 	str.w	r7, [r8]
 800749e:	e00f      	b.n	80074c0 <_malloc_r+0xa8>
 80074a0:	6822      	ldr	r2, [r4, #0]
 80074a2:	1b52      	subs	r2, r2, r5
 80074a4:	d420      	bmi.n	80074e8 <_malloc_r+0xd0>
 80074a6:	2a0b      	cmp	r2, #11
 80074a8:	d917      	bls.n	80074da <_malloc_r+0xc2>
 80074aa:	1961      	adds	r1, r4, r5
 80074ac:	42a3      	cmp	r3, r4
 80074ae:	6025      	str	r5, [r4, #0]
 80074b0:	bf18      	it	ne
 80074b2:	6059      	strne	r1, [r3, #4]
 80074b4:	6863      	ldr	r3, [r4, #4]
 80074b6:	bf08      	it	eq
 80074b8:	f8c8 1000 	streq.w	r1, [r8]
 80074bc:	5162      	str	r2, [r4, r5]
 80074be:	604b      	str	r3, [r1, #4]
 80074c0:	4630      	mov	r0, r6
 80074c2:	f000 f82f 	bl	8007524 <__malloc_unlock>
 80074c6:	f104 000b 	add.w	r0, r4, #11
 80074ca:	1d23      	adds	r3, r4, #4
 80074cc:	f020 0007 	bic.w	r0, r0, #7
 80074d0:	1ac2      	subs	r2, r0, r3
 80074d2:	bf1c      	itt	ne
 80074d4:	1a1b      	subne	r3, r3, r0
 80074d6:	50a3      	strne	r3, [r4, r2]
 80074d8:	e7af      	b.n	800743a <_malloc_r+0x22>
 80074da:	6862      	ldr	r2, [r4, #4]
 80074dc:	42a3      	cmp	r3, r4
 80074de:	bf0c      	ite	eq
 80074e0:	f8c8 2000 	streq.w	r2, [r8]
 80074e4:	605a      	strne	r2, [r3, #4]
 80074e6:	e7eb      	b.n	80074c0 <_malloc_r+0xa8>
 80074e8:	4623      	mov	r3, r4
 80074ea:	6864      	ldr	r4, [r4, #4]
 80074ec:	e7ae      	b.n	800744c <_malloc_r+0x34>
 80074ee:	463c      	mov	r4, r7
 80074f0:	687f      	ldr	r7, [r7, #4]
 80074f2:	e7b6      	b.n	8007462 <_malloc_r+0x4a>
 80074f4:	461a      	mov	r2, r3
 80074f6:	685b      	ldr	r3, [r3, #4]
 80074f8:	42a3      	cmp	r3, r4
 80074fa:	d1fb      	bne.n	80074f4 <_malloc_r+0xdc>
 80074fc:	2300      	movs	r3, #0
 80074fe:	6053      	str	r3, [r2, #4]
 8007500:	e7de      	b.n	80074c0 <_malloc_r+0xa8>
 8007502:	230c      	movs	r3, #12
 8007504:	6033      	str	r3, [r6, #0]
 8007506:	4630      	mov	r0, r6
 8007508:	f000 f80c 	bl	8007524 <__malloc_unlock>
 800750c:	e794      	b.n	8007438 <_malloc_r+0x20>
 800750e:	6005      	str	r5, [r0, #0]
 8007510:	e7d6      	b.n	80074c0 <_malloc_r+0xa8>
 8007512:	bf00      	nop
 8007514:	2001463c 	.word	0x2001463c

08007518 <__malloc_lock>:
 8007518:	4801      	ldr	r0, [pc, #4]	@ (8007520 <__malloc_lock+0x8>)
 800751a:	f7ff bf01 	b.w	8007320 <__retarget_lock_acquire_recursive>
 800751e:	bf00      	nop
 8007520:	20014634 	.word	0x20014634

08007524 <__malloc_unlock>:
 8007524:	4801      	ldr	r0, [pc, #4]	@ (800752c <__malloc_unlock+0x8>)
 8007526:	f7ff befc 	b.w	8007322 <__retarget_lock_release_recursive>
 800752a:	bf00      	nop
 800752c:	20014634 	.word	0x20014634

08007530 <__ssputs_r>:
 8007530:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007534:	688e      	ldr	r6, [r1, #8]
 8007536:	461f      	mov	r7, r3
 8007538:	42be      	cmp	r6, r7
 800753a:	680b      	ldr	r3, [r1, #0]
 800753c:	4682      	mov	sl, r0
 800753e:	460c      	mov	r4, r1
 8007540:	4690      	mov	r8, r2
 8007542:	d82d      	bhi.n	80075a0 <__ssputs_r+0x70>
 8007544:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007548:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800754c:	d026      	beq.n	800759c <__ssputs_r+0x6c>
 800754e:	6965      	ldr	r5, [r4, #20]
 8007550:	6909      	ldr	r1, [r1, #16]
 8007552:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007556:	eba3 0901 	sub.w	r9, r3, r1
 800755a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800755e:	1c7b      	adds	r3, r7, #1
 8007560:	444b      	add	r3, r9
 8007562:	106d      	asrs	r5, r5, #1
 8007564:	429d      	cmp	r5, r3
 8007566:	bf38      	it	cc
 8007568:	461d      	movcc	r5, r3
 800756a:	0553      	lsls	r3, r2, #21
 800756c:	d527      	bpl.n	80075be <__ssputs_r+0x8e>
 800756e:	4629      	mov	r1, r5
 8007570:	f7ff ff52 	bl	8007418 <_malloc_r>
 8007574:	4606      	mov	r6, r0
 8007576:	b360      	cbz	r0, 80075d2 <__ssputs_r+0xa2>
 8007578:	6921      	ldr	r1, [r4, #16]
 800757a:	464a      	mov	r2, r9
 800757c:	f7ff fed2 	bl	8007324 <memcpy>
 8007580:	89a3      	ldrh	r3, [r4, #12]
 8007582:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007586:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800758a:	81a3      	strh	r3, [r4, #12]
 800758c:	6126      	str	r6, [r4, #16]
 800758e:	6165      	str	r5, [r4, #20]
 8007590:	444e      	add	r6, r9
 8007592:	eba5 0509 	sub.w	r5, r5, r9
 8007596:	6026      	str	r6, [r4, #0]
 8007598:	60a5      	str	r5, [r4, #8]
 800759a:	463e      	mov	r6, r7
 800759c:	42be      	cmp	r6, r7
 800759e:	d900      	bls.n	80075a2 <__ssputs_r+0x72>
 80075a0:	463e      	mov	r6, r7
 80075a2:	6820      	ldr	r0, [r4, #0]
 80075a4:	4632      	mov	r2, r6
 80075a6:	4641      	mov	r1, r8
 80075a8:	f000 faa8 	bl	8007afc <memmove>
 80075ac:	68a3      	ldr	r3, [r4, #8]
 80075ae:	1b9b      	subs	r3, r3, r6
 80075b0:	60a3      	str	r3, [r4, #8]
 80075b2:	6823      	ldr	r3, [r4, #0]
 80075b4:	4433      	add	r3, r6
 80075b6:	6023      	str	r3, [r4, #0]
 80075b8:	2000      	movs	r0, #0
 80075ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075be:	462a      	mov	r2, r5
 80075c0:	f000 fac6 	bl	8007b50 <_realloc_r>
 80075c4:	4606      	mov	r6, r0
 80075c6:	2800      	cmp	r0, #0
 80075c8:	d1e0      	bne.n	800758c <__ssputs_r+0x5c>
 80075ca:	6921      	ldr	r1, [r4, #16]
 80075cc:	4650      	mov	r0, sl
 80075ce:	f7ff feb7 	bl	8007340 <_free_r>
 80075d2:	230c      	movs	r3, #12
 80075d4:	f8ca 3000 	str.w	r3, [sl]
 80075d8:	89a3      	ldrh	r3, [r4, #12]
 80075da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80075de:	81a3      	strh	r3, [r4, #12]
 80075e0:	f04f 30ff 	mov.w	r0, #4294967295
 80075e4:	e7e9      	b.n	80075ba <__ssputs_r+0x8a>
	...

080075e8 <_svfiprintf_r>:
 80075e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075ec:	4698      	mov	r8, r3
 80075ee:	898b      	ldrh	r3, [r1, #12]
 80075f0:	061b      	lsls	r3, r3, #24
 80075f2:	b09d      	sub	sp, #116	@ 0x74
 80075f4:	4607      	mov	r7, r0
 80075f6:	460d      	mov	r5, r1
 80075f8:	4614      	mov	r4, r2
 80075fa:	d510      	bpl.n	800761e <_svfiprintf_r+0x36>
 80075fc:	690b      	ldr	r3, [r1, #16]
 80075fe:	b973      	cbnz	r3, 800761e <_svfiprintf_r+0x36>
 8007600:	2140      	movs	r1, #64	@ 0x40
 8007602:	f7ff ff09 	bl	8007418 <_malloc_r>
 8007606:	6028      	str	r0, [r5, #0]
 8007608:	6128      	str	r0, [r5, #16]
 800760a:	b930      	cbnz	r0, 800761a <_svfiprintf_r+0x32>
 800760c:	230c      	movs	r3, #12
 800760e:	603b      	str	r3, [r7, #0]
 8007610:	f04f 30ff 	mov.w	r0, #4294967295
 8007614:	b01d      	add	sp, #116	@ 0x74
 8007616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800761a:	2340      	movs	r3, #64	@ 0x40
 800761c:	616b      	str	r3, [r5, #20]
 800761e:	2300      	movs	r3, #0
 8007620:	9309      	str	r3, [sp, #36]	@ 0x24
 8007622:	2320      	movs	r3, #32
 8007624:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007628:	f8cd 800c 	str.w	r8, [sp, #12]
 800762c:	2330      	movs	r3, #48	@ 0x30
 800762e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80077cc <_svfiprintf_r+0x1e4>
 8007632:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007636:	f04f 0901 	mov.w	r9, #1
 800763a:	4623      	mov	r3, r4
 800763c:	469a      	mov	sl, r3
 800763e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007642:	b10a      	cbz	r2, 8007648 <_svfiprintf_r+0x60>
 8007644:	2a25      	cmp	r2, #37	@ 0x25
 8007646:	d1f9      	bne.n	800763c <_svfiprintf_r+0x54>
 8007648:	ebba 0b04 	subs.w	fp, sl, r4
 800764c:	d00b      	beq.n	8007666 <_svfiprintf_r+0x7e>
 800764e:	465b      	mov	r3, fp
 8007650:	4622      	mov	r2, r4
 8007652:	4629      	mov	r1, r5
 8007654:	4638      	mov	r0, r7
 8007656:	f7ff ff6b 	bl	8007530 <__ssputs_r>
 800765a:	3001      	adds	r0, #1
 800765c:	f000 80a7 	beq.w	80077ae <_svfiprintf_r+0x1c6>
 8007660:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007662:	445a      	add	r2, fp
 8007664:	9209      	str	r2, [sp, #36]	@ 0x24
 8007666:	f89a 3000 	ldrb.w	r3, [sl]
 800766a:	2b00      	cmp	r3, #0
 800766c:	f000 809f 	beq.w	80077ae <_svfiprintf_r+0x1c6>
 8007670:	2300      	movs	r3, #0
 8007672:	f04f 32ff 	mov.w	r2, #4294967295
 8007676:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800767a:	f10a 0a01 	add.w	sl, sl, #1
 800767e:	9304      	str	r3, [sp, #16]
 8007680:	9307      	str	r3, [sp, #28]
 8007682:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007686:	931a      	str	r3, [sp, #104]	@ 0x68
 8007688:	4654      	mov	r4, sl
 800768a:	2205      	movs	r2, #5
 800768c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007690:	484e      	ldr	r0, [pc, #312]	@ (80077cc <_svfiprintf_r+0x1e4>)
 8007692:	f7f8 fe0d 	bl	80002b0 <memchr>
 8007696:	9a04      	ldr	r2, [sp, #16]
 8007698:	b9d8      	cbnz	r0, 80076d2 <_svfiprintf_r+0xea>
 800769a:	06d0      	lsls	r0, r2, #27
 800769c:	bf44      	itt	mi
 800769e:	2320      	movmi	r3, #32
 80076a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80076a4:	0711      	lsls	r1, r2, #28
 80076a6:	bf44      	itt	mi
 80076a8:	232b      	movmi	r3, #43	@ 0x2b
 80076aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80076ae:	f89a 3000 	ldrb.w	r3, [sl]
 80076b2:	2b2a      	cmp	r3, #42	@ 0x2a
 80076b4:	d015      	beq.n	80076e2 <_svfiprintf_r+0xfa>
 80076b6:	9a07      	ldr	r2, [sp, #28]
 80076b8:	4654      	mov	r4, sl
 80076ba:	2000      	movs	r0, #0
 80076bc:	f04f 0c0a 	mov.w	ip, #10
 80076c0:	4621      	mov	r1, r4
 80076c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80076c6:	3b30      	subs	r3, #48	@ 0x30
 80076c8:	2b09      	cmp	r3, #9
 80076ca:	d94b      	bls.n	8007764 <_svfiprintf_r+0x17c>
 80076cc:	b1b0      	cbz	r0, 80076fc <_svfiprintf_r+0x114>
 80076ce:	9207      	str	r2, [sp, #28]
 80076d0:	e014      	b.n	80076fc <_svfiprintf_r+0x114>
 80076d2:	eba0 0308 	sub.w	r3, r0, r8
 80076d6:	fa09 f303 	lsl.w	r3, r9, r3
 80076da:	4313      	orrs	r3, r2
 80076dc:	9304      	str	r3, [sp, #16]
 80076de:	46a2      	mov	sl, r4
 80076e0:	e7d2      	b.n	8007688 <_svfiprintf_r+0xa0>
 80076e2:	9b03      	ldr	r3, [sp, #12]
 80076e4:	1d19      	adds	r1, r3, #4
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	9103      	str	r1, [sp, #12]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	bfbb      	ittet	lt
 80076ee:	425b      	neglt	r3, r3
 80076f0:	f042 0202 	orrlt.w	r2, r2, #2
 80076f4:	9307      	strge	r3, [sp, #28]
 80076f6:	9307      	strlt	r3, [sp, #28]
 80076f8:	bfb8      	it	lt
 80076fa:	9204      	strlt	r2, [sp, #16]
 80076fc:	7823      	ldrb	r3, [r4, #0]
 80076fe:	2b2e      	cmp	r3, #46	@ 0x2e
 8007700:	d10a      	bne.n	8007718 <_svfiprintf_r+0x130>
 8007702:	7863      	ldrb	r3, [r4, #1]
 8007704:	2b2a      	cmp	r3, #42	@ 0x2a
 8007706:	d132      	bne.n	800776e <_svfiprintf_r+0x186>
 8007708:	9b03      	ldr	r3, [sp, #12]
 800770a:	1d1a      	adds	r2, r3, #4
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	9203      	str	r2, [sp, #12]
 8007710:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007714:	3402      	adds	r4, #2
 8007716:	9305      	str	r3, [sp, #20]
 8007718:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80077dc <_svfiprintf_r+0x1f4>
 800771c:	7821      	ldrb	r1, [r4, #0]
 800771e:	2203      	movs	r2, #3
 8007720:	4650      	mov	r0, sl
 8007722:	f7f8 fdc5 	bl	80002b0 <memchr>
 8007726:	b138      	cbz	r0, 8007738 <_svfiprintf_r+0x150>
 8007728:	9b04      	ldr	r3, [sp, #16]
 800772a:	eba0 000a 	sub.w	r0, r0, sl
 800772e:	2240      	movs	r2, #64	@ 0x40
 8007730:	4082      	lsls	r2, r0
 8007732:	4313      	orrs	r3, r2
 8007734:	3401      	adds	r4, #1
 8007736:	9304      	str	r3, [sp, #16]
 8007738:	f814 1b01 	ldrb.w	r1, [r4], #1
 800773c:	4824      	ldr	r0, [pc, #144]	@ (80077d0 <_svfiprintf_r+0x1e8>)
 800773e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007742:	2206      	movs	r2, #6
 8007744:	f7f8 fdb4 	bl	80002b0 <memchr>
 8007748:	2800      	cmp	r0, #0
 800774a:	d036      	beq.n	80077ba <_svfiprintf_r+0x1d2>
 800774c:	4b21      	ldr	r3, [pc, #132]	@ (80077d4 <_svfiprintf_r+0x1ec>)
 800774e:	bb1b      	cbnz	r3, 8007798 <_svfiprintf_r+0x1b0>
 8007750:	9b03      	ldr	r3, [sp, #12]
 8007752:	3307      	adds	r3, #7
 8007754:	f023 0307 	bic.w	r3, r3, #7
 8007758:	3308      	adds	r3, #8
 800775a:	9303      	str	r3, [sp, #12]
 800775c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800775e:	4433      	add	r3, r6
 8007760:	9309      	str	r3, [sp, #36]	@ 0x24
 8007762:	e76a      	b.n	800763a <_svfiprintf_r+0x52>
 8007764:	fb0c 3202 	mla	r2, ip, r2, r3
 8007768:	460c      	mov	r4, r1
 800776a:	2001      	movs	r0, #1
 800776c:	e7a8      	b.n	80076c0 <_svfiprintf_r+0xd8>
 800776e:	2300      	movs	r3, #0
 8007770:	3401      	adds	r4, #1
 8007772:	9305      	str	r3, [sp, #20]
 8007774:	4619      	mov	r1, r3
 8007776:	f04f 0c0a 	mov.w	ip, #10
 800777a:	4620      	mov	r0, r4
 800777c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007780:	3a30      	subs	r2, #48	@ 0x30
 8007782:	2a09      	cmp	r2, #9
 8007784:	d903      	bls.n	800778e <_svfiprintf_r+0x1a6>
 8007786:	2b00      	cmp	r3, #0
 8007788:	d0c6      	beq.n	8007718 <_svfiprintf_r+0x130>
 800778a:	9105      	str	r1, [sp, #20]
 800778c:	e7c4      	b.n	8007718 <_svfiprintf_r+0x130>
 800778e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007792:	4604      	mov	r4, r0
 8007794:	2301      	movs	r3, #1
 8007796:	e7f0      	b.n	800777a <_svfiprintf_r+0x192>
 8007798:	ab03      	add	r3, sp, #12
 800779a:	9300      	str	r3, [sp, #0]
 800779c:	462a      	mov	r2, r5
 800779e:	4b0e      	ldr	r3, [pc, #56]	@ (80077d8 <_svfiprintf_r+0x1f0>)
 80077a0:	a904      	add	r1, sp, #16
 80077a2:	4638      	mov	r0, r7
 80077a4:	f3af 8000 	nop.w
 80077a8:	1c42      	adds	r2, r0, #1
 80077aa:	4606      	mov	r6, r0
 80077ac:	d1d6      	bne.n	800775c <_svfiprintf_r+0x174>
 80077ae:	89ab      	ldrh	r3, [r5, #12]
 80077b0:	065b      	lsls	r3, r3, #25
 80077b2:	f53f af2d 	bmi.w	8007610 <_svfiprintf_r+0x28>
 80077b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80077b8:	e72c      	b.n	8007614 <_svfiprintf_r+0x2c>
 80077ba:	ab03      	add	r3, sp, #12
 80077bc:	9300      	str	r3, [sp, #0]
 80077be:	462a      	mov	r2, r5
 80077c0:	4b05      	ldr	r3, [pc, #20]	@ (80077d8 <_svfiprintf_r+0x1f0>)
 80077c2:	a904      	add	r1, sp, #16
 80077c4:	4638      	mov	r0, r7
 80077c6:	f000 f879 	bl	80078bc <_printf_i>
 80077ca:	e7ed      	b.n	80077a8 <_svfiprintf_r+0x1c0>
 80077cc:	08007dbc 	.word	0x08007dbc
 80077d0:	08007dc6 	.word	0x08007dc6
 80077d4:	00000000 	.word	0x00000000
 80077d8:	08007531 	.word	0x08007531
 80077dc:	08007dc2 	.word	0x08007dc2

080077e0 <_printf_common>:
 80077e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077e4:	4616      	mov	r6, r2
 80077e6:	4698      	mov	r8, r3
 80077e8:	688a      	ldr	r2, [r1, #8]
 80077ea:	690b      	ldr	r3, [r1, #16]
 80077ec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80077f0:	4293      	cmp	r3, r2
 80077f2:	bfb8      	it	lt
 80077f4:	4613      	movlt	r3, r2
 80077f6:	6033      	str	r3, [r6, #0]
 80077f8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80077fc:	4607      	mov	r7, r0
 80077fe:	460c      	mov	r4, r1
 8007800:	b10a      	cbz	r2, 8007806 <_printf_common+0x26>
 8007802:	3301      	adds	r3, #1
 8007804:	6033      	str	r3, [r6, #0]
 8007806:	6823      	ldr	r3, [r4, #0]
 8007808:	0699      	lsls	r1, r3, #26
 800780a:	bf42      	ittt	mi
 800780c:	6833      	ldrmi	r3, [r6, #0]
 800780e:	3302      	addmi	r3, #2
 8007810:	6033      	strmi	r3, [r6, #0]
 8007812:	6825      	ldr	r5, [r4, #0]
 8007814:	f015 0506 	ands.w	r5, r5, #6
 8007818:	d106      	bne.n	8007828 <_printf_common+0x48>
 800781a:	f104 0a19 	add.w	sl, r4, #25
 800781e:	68e3      	ldr	r3, [r4, #12]
 8007820:	6832      	ldr	r2, [r6, #0]
 8007822:	1a9b      	subs	r3, r3, r2
 8007824:	42ab      	cmp	r3, r5
 8007826:	dc26      	bgt.n	8007876 <_printf_common+0x96>
 8007828:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800782c:	6822      	ldr	r2, [r4, #0]
 800782e:	3b00      	subs	r3, #0
 8007830:	bf18      	it	ne
 8007832:	2301      	movne	r3, #1
 8007834:	0692      	lsls	r2, r2, #26
 8007836:	d42b      	bmi.n	8007890 <_printf_common+0xb0>
 8007838:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800783c:	4641      	mov	r1, r8
 800783e:	4638      	mov	r0, r7
 8007840:	47c8      	blx	r9
 8007842:	3001      	adds	r0, #1
 8007844:	d01e      	beq.n	8007884 <_printf_common+0xa4>
 8007846:	6823      	ldr	r3, [r4, #0]
 8007848:	6922      	ldr	r2, [r4, #16]
 800784a:	f003 0306 	and.w	r3, r3, #6
 800784e:	2b04      	cmp	r3, #4
 8007850:	bf02      	ittt	eq
 8007852:	68e5      	ldreq	r5, [r4, #12]
 8007854:	6833      	ldreq	r3, [r6, #0]
 8007856:	1aed      	subeq	r5, r5, r3
 8007858:	68a3      	ldr	r3, [r4, #8]
 800785a:	bf0c      	ite	eq
 800785c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007860:	2500      	movne	r5, #0
 8007862:	4293      	cmp	r3, r2
 8007864:	bfc4      	itt	gt
 8007866:	1a9b      	subgt	r3, r3, r2
 8007868:	18ed      	addgt	r5, r5, r3
 800786a:	2600      	movs	r6, #0
 800786c:	341a      	adds	r4, #26
 800786e:	42b5      	cmp	r5, r6
 8007870:	d11a      	bne.n	80078a8 <_printf_common+0xc8>
 8007872:	2000      	movs	r0, #0
 8007874:	e008      	b.n	8007888 <_printf_common+0xa8>
 8007876:	2301      	movs	r3, #1
 8007878:	4652      	mov	r2, sl
 800787a:	4641      	mov	r1, r8
 800787c:	4638      	mov	r0, r7
 800787e:	47c8      	blx	r9
 8007880:	3001      	adds	r0, #1
 8007882:	d103      	bne.n	800788c <_printf_common+0xac>
 8007884:	f04f 30ff 	mov.w	r0, #4294967295
 8007888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800788c:	3501      	adds	r5, #1
 800788e:	e7c6      	b.n	800781e <_printf_common+0x3e>
 8007890:	18e1      	adds	r1, r4, r3
 8007892:	1c5a      	adds	r2, r3, #1
 8007894:	2030      	movs	r0, #48	@ 0x30
 8007896:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800789a:	4422      	add	r2, r4
 800789c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80078a0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80078a4:	3302      	adds	r3, #2
 80078a6:	e7c7      	b.n	8007838 <_printf_common+0x58>
 80078a8:	2301      	movs	r3, #1
 80078aa:	4622      	mov	r2, r4
 80078ac:	4641      	mov	r1, r8
 80078ae:	4638      	mov	r0, r7
 80078b0:	47c8      	blx	r9
 80078b2:	3001      	adds	r0, #1
 80078b4:	d0e6      	beq.n	8007884 <_printf_common+0xa4>
 80078b6:	3601      	adds	r6, #1
 80078b8:	e7d9      	b.n	800786e <_printf_common+0x8e>
	...

080078bc <_printf_i>:
 80078bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80078c0:	7e0f      	ldrb	r7, [r1, #24]
 80078c2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80078c4:	2f78      	cmp	r7, #120	@ 0x78
 80078c6:	4691      	mov	r9, r2
 80078c8:	4680      	mov	r8, r0
 80078ca:	460c      	mov	r4, r1
 80078cc:	469a      	mov	sl, r3
 80078ce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80078d2:	d807      	bhi.n	80078e4 <_printf_i+0x28>
 80078d4:	2f62      	cmp	r7, #98	@ 0x62
 80078d6:	d80a      	bhi.n	80078ee <_printf_i+0x32>
 80078d8:	2f00      	cmp	r7, #0
 80078da:	f000 80d2 	beq.w	8007a82 <_printf_i+0x1c6>
 80078de:	2f58      	cmp	r7, #88	@ 0x58
 80078e0:	f000 80b9 	beq.w	8007a56 <_printf_i+0x19a>
 80078e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80078e8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80078ec:	e03a      	b.n	8007964 <_printf_i+0xa8>
 80078ee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80078f2:	2b15      	cmp	r3, #21
 80078f4:	d8f6      	bhi.n	80078e4 <_printf_i+0x28>
 80078f6:	a101      	add	r1, pc, #4	@ (adr r1, 80078fc <_printf_i+0x40>)
 80078f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80078fc:	08007955 	.word	0x08007955
 8007900:	08007969 	.word	0x08007969
 8007904:	080078e5 	.word	0x080078e5
 8007908:	080078e5 	.word	0x080078e5
 800790c:	080078e5 	.word	0x080078e5
 8007910:	080078e5 	.word	0x080078e5
 8007914:	08007969 	.word	0x08007969
 8007918:	080078e5 	.word	0x080078e5
 800791c:	080078e5 	.word	0x080078e5
 8007920:	080078e5 	.word	0x080078e5
 8007924:	080078e5 	.word	0x080078e5
 8007928:	08007a69 	.word	0x08007a69
 800792c:	08007993 	.word	0x08007993
 8007930:	08007a23 	.word	0x08007a23
 8007934:	080078e5 	.word	0x080078e5
 8007938:	080078e5 	.word	0x080078e5
 800793c:	08007a8b 	.word	0x08007a8b
 8007940:	080078e5 	.word	0x080078e5
 8007944:	08007993 	.word	0x08007993
 8007948:	080078e5 	.word	0x080078e5
 800794c:	080078e5 	.word	0x080078e5
 8007950:	08007a2b 	.word	0x08007a2b
 8007954:	6833      	ldr	r3, [r6, #0]
 8007956:	1d1a      	adds	r2, r3, #4
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	6032      	str	r2, [r6, #0]
 800795c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007960:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007964:	2301      	movs	r3, #1
 8007966:	e09d      	b.n	8007aa4 <_printf_i+0x1e8>
 8007968:	6833      	ldr	r3, [r6, #0]
 800796a:	6820      	ldr	r0, [r4, #0]
 800796c:	1d19      	adds	r1, r3, #4
 800796e:	6031      	str	r1, [r6, #0]
 8007970:	0606      	lsls	r6, r0, #24
 8007972:	d501      	bpl.n	8007978 <_printf_i+0xbc>
 8007974:	681d      	ldr	r5, [r3, #0]
 8007976:	e003      	b.n	8007980 <_printf_i+0xc4>
 8007978:	0645      	lsls	r5, r0, #25
 800797a:	d5fb      	bpl.n	8007974 <_printf_i+0xb8>
 800797c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007980:	2d00      	cmp	r5, #0
 8007982:	da03      	bge.n	800798c <_printf_i+0xd0>
 8007984:	232d      	movs	r3, #45	@ 0x2d
 8007986:	426d      	negs	r5, r5
 8007988:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800798c:	4859      	ldr	r0, [pc, #356]	@ (8007af4 <_printf_i+0x238>)
 800798e:	230a      	movs	r3, #10
 8007990:	e011      	b.n	80079b6 <_printf_i+0xfa>
 8007992:	6821      	ldr	r1, [r4, #0]
 8007994:	6833      	ldr	r3, [r6, #0]
 8007996:	0608      	lsls	r0, r1, #24
 8007998:	f853 5b04 	ldr.w	r5, [r3], #4
 800799c:	d402      	bmi.n	80079a4 <_printf_i+0xe8>
 800799e:	0649      	lsls	r1, r1, #25
 80079a0:	bf48      	it	mi
 80079a2:	b2ad      	uxthmi	r5, r5
 80079a4:	2f6f      	cmp	r7, #111	@ 0x6f
 80079a6:	4853      	ldr	r0, [pc, #332]	@ (8007af4 <_printf_i+0x238>)
 80079a8:	6033      	str	r3, [r6, #0]
 80079aa:	bf14      	ite	ne
 80079ac:	230a      	movne	r3, #10
 80079ae:	2308      	moveq	r3, #8
 80079b0:	2100      	movs	r1, #0
 80079b2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80079b6:	6866      	ldr	r6, [r4, #4]
 80079b8:	60a6      	str	r6, [r4, #8]
 80079ba:	2e00      	cmp	r6, #0
 80079bc:	bfa2      	ittt	ge
 80079be:	6821      	ldrge	r1, [r4, #0]
 80079c0:	f021 0104 	bicge.w	r1, r1, #4
 80079c4:	6021      	strge	r1, [r4, #0]
 80079c6:	b90d      	cbnz	r5, 80079cc <_printf_i+0x110>
 80079c8:	2e00      	cmp	r6, #0
 80079ca:	d04b      	beq.n	8007a64 <_printf_i+0x1a8>
 80079cc:	4616      	mov	r6, r2
 80079ce:	fbb5 f1f3 	udiv	r1, r5, r3
 80079d2:	fb03 5711 	mls	r7, r3, r1, r5
 80079d6:	5dc7      	ldrb	r7, [r0, r7]
 80079d8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80079dc:	462f      	mov	r7, r5
 80079de:	42bb      	cmp	r3, r7
 80079e0:	460d      	mov	r5, r1
 80079e2:	d9f4      	bls.n	80079ce <_printf_i+0x112>
 80079e4:	2b08      	cmp	r3, #8
 80079e6:	d10b      	bne.n	8007a00 <_printf_i+0x144>
 80079e8:	6823      	ldr	r3, [r4, #0]
 80079ea:	07df      	lsls	r7, r3, #31
 80079ec:	d508      	bpl.n	8007a00 <_printf_i+0x144>
 80079ee:	6923      	ldr	r3, [r4, #16]
 80079f0:	6861      	ldr	r1, [r4, #4]
 80079f2:	4299      	cmp	r1, r3
 80079f4:	bfde      	ittt	le
 80079f6:	2330      	movle	r3, #48	@ 0x30
 80079f8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80079fc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007a00:	1b92      	subs	r2, r2, r6
 8007a02:	6122      	str	r2, [r4, #16]
 8007a04:	f8cd a000 	str.w	sl, [sp]
 8007a08:	464b      	mov	r3, r9
 8007a0a:	aa03      	add	r2, sp, #12
 8007a0c:	4621      	mov	r1, r4
 8007a0e:	4640      	mov	r0, r8
 8007a10:	f7ff fee6 	bl	80077e0 <_printf_common>
 8007a14:	3001      	adds	r0, #1
 8007a16:	d14a      	bne.n	8007aae <_printf_i+0x1f2>
 8007a18:	f04f 30ff 	mov.w	r0, #4294967295
 8007a1c:	b004      	add	sp, #16
 8007a1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a22:	6823      	ldr	r3, [r4, #0]
 8007a24:	f043 0320 	orr.w	r3, r3, #32
 8007a28:	6023      	str	r3, [r4, #0]
 8007a2a:	4833      	ldr	r0, [pc, #204]	@ (8007af8 <_printf_i+0x23c>)
 8007a2c:	2778      	movs	r7, #120	@ 0x78
 8007a2e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007a32:	6823      	ldr	r3, [r4, #0]
 8007a34:	6831      	ldr	r1, [r6, #0]
 8007a36:	061f      	lsls	r7, r3, #24
 8007a38:	f851 5b04 	ldr.w	r5, [r1], #4
 8007a3c:	d402      	bmi.n	8007a44 <_printf_i+0x188>
 8007a3e:	065f      	lsls	r7, r3, #25
 8007a40:	bf48      	it	mi
 8007a42:	b2ad      	uxthmi	r5, r5
 8007a44:	6031      	str	r1, [r6, #0]
 8007a46:	07d9      	lsls	r1, r3, #31
 8007a48:	bf44      	itt	mi
 8007a4a:	f043 0320 	orrmi.w	r3, r3, #32
 8007a4e:	6023      	strmi	r3, [r4, #0]
 8007a50:	b11d      	cbz	r5, 8007a5a <_printf_i+0x19e>
 8007a52:	2310      	movs	r3, #16
 8007a54:	e7ac      	b.n	80079b0 <_printf_i+0xf4>
 8007a56:	4827      	ldr	r0, [pc, #156]	@ (8007af4 <_printf_i+0x238>)
 8007a58:	e7e9      	b.n	8007a2e <_printf_i+0x172>
 8007a5a:	6823      	ldr	r3, [r4, #0]
 8007a5c:	f023 0320 	bic.w	r3, r3, #32
 8007a60:	6023      	str	r3, [r4, #0]
 8007a62:	e7f6      	b.n	8007a52 <_printf_i+0x196>
 8007a64:	4616      	mov	r6, r2
 8007a66:	e7bd      	b.n	80079e4 <_printf_i+0x128>
 8007a68:	6833      	ldr	r3, [r6, #0]
 8007a6a:	6825      	ldr	r5, [r4, #0]
 8007a6c:	6961      	ldr	r1, [r4, #20]
 8007a6e:	1d18      	adds	r0, r3, #4
 8007a70:	6030      	str	r0, [r6, #0]
 8007a72:	062e      	lsls	r6, r5, #24
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	d501      	bpl.n	8007a7c <_printf_i+0x1c0>
 8007a78:	6019      	str	r1, [r3, #0]
 8007a7a:	e002      	b.n	8007a82 <_printf_i+0x1c6>
 8007a7c:	0668      	lsls	r0, r5, #25
 8007a7e:	d5fb      	bpl.n	8007a78 <_printf_i+0x1bc>
 8007a80:	8019      	strh	r1, [r3, #0]
 8007a82:	2300      	movs	r3, #0
 8007a84:	6123      	str	r3, [r4, #16]
 8007a86:	4616      	mov	r6, r2
 8007a88:	e7bc      	b.n	8007a04 <_printf_i+0x148>
 8007a8a:	6833      	ldr	r3, [r6, #0]
 8007a8c:	1d1a      	adds	r2, r3, #4
 8007a8e:	6032      	str	r2, [r6, #0]
 8007a90:	681e      	ldr	r6, [r3, #0]
 8007a92:	6862      	ldr	r2, [r4, #4]
 8007a94:	2100      	movs	r1, #0
 8007a96:	4630      	mov	r0, r6
 8007a98:	f7f8 fc0a 	bl	80002b0 <memchr>
 8007a9c:	b108      	cbz	r0, 8007aa2 <_printf_i+0x1e6>
 8007a9e:	1b80      	subs	r0, r0, r6
 8007aa0:	6060      	str	r0, [r4, #4]
 8007aa2:	6863      	ldr	r3, [r4, #4]
 8007aa4:	6123      	str	r3, [r4, #16]
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007aac:	e7aa      	b.n	8007a04 <_printf_i+0x148>
 8007aae:	6923      	ldr	r3, [r4, #16]
 8007ab0:	4632      	mov	r2, r6
 8007ab2:	4649      	mov	r1, r9
 8007ab4:	4640      	mov	r0, r8
 8007ab6:	47d0      	blx	sl
 8007ab8:	3001      	adds	r0, #1
 8007aba:	d0ad      	beq.n	8007a18 <_printf_i+0x15c>
 8007abc:	6823      	ldr	r3, [r4, #0]
 8007abe:	079b      	lsls	r3, r3, #30
 8007ac0:	d413      	bmi.n	8007aea <_printf_i+0x22e>
 8007ac2:	68e0      	ldr	r0, [r4, #12]
 8007ac4:	9b03      	ldr	r3, [sp, #12]
 8007ac6:	4298      	cmp	r0, r3
 8007ac8:	bfb8      	it	lt
 8007aca:	4618      	movlt	r0, r3
 8007acc:	e7a6      	b.n	8007a1c <_printf_i+0x160>
 8007ace:	2301      	movs	r3, #1
 8007ad0:	4632      	mov	r2, r6
 8007ad2:	4649      	mov	r1, r9
 8007ad4:	4640      	mov	r0, r8
 8007ad6:	47d0      	blx	sl
 8007ad8:	3001      	adds	r0, #1
 8007ada:	d09d      	beq.n	8007a18 <_printf_i+0x15c>
 8007adc:	3501      	adds	r5, #1
 8007ade:	68e3      	ldr	r3, [r4, #12]
 8007ae0:	9903      	ldr	r1, [sp, #12]
 8007ae2:	1a5b      	subs	r3, r3, r1
 8007ae4:	42ab      	cmp	r3, r5
 8007ae6:	dcf2      	bgt.n	8007ace <_printf_i+0x212>
 8007ae8:	e7eb      	b.n	8007ac2 <_printf_i+0x206>
 8007aea:	2500      	movs	r5, #0
 8007aec:	f104 0619 	add.w	r6, r4, #25
 8007af0:	e7f5      	b.n	8007ade <_printf_i+0x222>
 8007af2:	bf00      	nop
 8007af4:	08007dcd 	.word	0x08007dcd
 8007af8:	08007dde 	.word	0x08007dde

08007afc <memmove>:
 8007afc:	4288      	cmp	r0, r1
 8007afe:	b510      	push	{r4, lr}
 8007b00:	eb01 0402 	add.w	r4, r1, r2
 8007b04:	d902      	bls.n	8007b0c <memmove+0x10>
 8007b06:	4284      	cmp	r4, r0
 8007b08:	4623      	mov	r3, r4
 8007b0a:	d807      	bhi.n	8007b1c <memmove+0x20>
 8007b0c:	1e43      	subs	r3, r0, #1
 8007b0e:	42a1      	cmp	r1, r4
 8007b10:	d008      	beq.n	8007b24 <memmove+0x28>
 8007b12:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007b16:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007b1a:	e7f8      	b.n	8007b0e <memmove+0x12>
 8007b1c:	4402      	add	r2, r0
 8007b1e:	4601      	mov	r1, r0
 8007b20:	428a      	cmp	r2, r1
 8007b22:	d100      	bne.n	8007b26 <memmove+0x2a>
 8007b24:	bd10      	pop	{r4, pc}
 8007b26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007b2a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007b2e:	e7f7      	b.n	8007b20 <memmove+0x24>

08007b30 <_sbrk_r>:
 8007b30:	b538      	push	{r3, r4, r5, lr}
 8007b32:	4d06      	ldr	r5, [pc, #24]	@ (8007b4c <_sbrk_r+0x1c>)
 8007b34:	2300      	movs	r3, #0
 8007b36:	4604      	mov	r4, r0
 8007b38:	4608      	mov	r0, r1
 8007b3a:	602b      	str	r3, [r5, #0]
 8007b3c:	f000 f83e 	bl	8007bbc <_sbrk>
 8007b40:	1c43      	adds	r3, r0, #1
 8007b42:	d102      	bne.n	8007b4a <_sbrk_r+0x1a>
 8007b44:	682b      	ldr	r3, [r5, #0]
 8007b46:	b103      	cbz	r3, 8007b4a <_sbrk_r+0x1a>
 8007b48:	6023      	str	r3, [r4, #0]
 8007b4a:	bd38      	pop	{r3, r4, r5, pc}
 8007b4c:	20014630 	.word	0x20014630

08007b50 <_realloc_r>:
 8007b50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b54:	4680      	mov	r8, r0
 8007b56:	4615      	mov	r5, r2
 8007b58:	460c      	mov	r4, r1
 8007b5a:	b921      	cbnz	r1, 8007b66 <_realloc_r+0x16>
 8007b5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b60:	4611      	mov	r1, r2
 8007b62:	f7ff bc59 	b.w	8007418 <_malloc_r>
 8007b66:	b92a      	cbnz	r2, 8007b74 <_realloc_r+0x24>
 8007b68:	f7ff fbea 	bl	8007340 <_free_r>
 8007b6c:	2400      	movs	r4, #0
 8007b6e:	4620      	mov	r0, r4
 8007b70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b74:	f000 f81a 	bl	8007bac <_malloc_usable_size_r>
 8007b78:	4285      	cmp	r5, r0
 8007b7a:	4606      	mov	r6, r0
 8007b7c:	d802      	bhi.n	8007b84 <_realloc_r+0x34>
 8007b7e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007b82:	d8f4      	bhi.n	8007b6e <_realloc_r+0x1e>
 8007b84:	4629      	mov	r1, r5
 8007b86:	4640      	mov	r0, r8
 8007b88:	f7ff fc46 	bl	8007418 <_malloc_r>
 8007b8c:	4607      	mov	r7, r0
 8007b8e:	2800      	cmp	r0, #0
 8007b90:	d0ec      	beq.n	8007b6c <_realloc_r+0x1c>
 8007b92:	42b5      	cmp	r5, r6
 8007b94:	462a      	mov	r2, r5
 8007b96:	4621      	mov	r1, r4
 8007b98:	bf28      	it	cs
 8007b9a:	4632      	movcs	r2, r6
 8007b9c:	f7ff fbc2 	bl	8007324 <memcpy>
 8007ba0:	4621      	mov	r1, r4
 8007ba2:	4640      	mov	r0, r8
 8007ba4:	f7ff fbcc 	bl	8007340 <_free_r>
 8007ba8:	463c      	mov	r4, r7
 8007baa:	e7e0      	b.n	8007b6e <_realloc_r+0x1e>

08007bac <_malloc_usable_size_r>:
 8007bac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007bb0:	1f18      	subs	r0, r3, #4
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	bfbc      	itt	lt
 8007bb6:	580b      	ldrlt	r3, [r1, r0]
 8007bb8:	18c0      	addlt	r0, r0, r3
 8007bba:	4770      	bx	lr

08007bbc <_sbrk>:
 8007bbc:	4a04      	ldr	r2, [pc, #16]	@ (8007bd0 <_sbrk+0x14>)
 8007bbe:	6811      	ldr	r1, [r2, #0]
 8007bc0:	4603      	mov	r3, r0
 8007bc2:	b909      	cbnz	r1, 8007bc8 <_sbrk+0xc>
 8007bc4:	4903      	ldr	r1, [pc, #12]	@ (8007bd4 <_sbrk+0x18>)
 8007bc6:	6011      	str	r1, [r2, #0]
 8007bc8:	6810      	ldr	r0, [r2, #0]
 8007bca:	4403      	add	r3, r0
 8007bcc:	6013      	str	r3, [r2, #0]
 8007bce:	4770      	bx	lr
 8007bd0:	20014640 	.word	0x20014640
 8007bd4:	20014648 	.word	0x20014648

08007bd8 <_init>:
 8007bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bda:	bf00      	nop
 8007bdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bde:	bc08      	pop	{r3}
 8007be0:	469e      	mov	lr, r3
 8007be2:	4770      	bx	lr

08007be4 <_fini>:
 8007be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007be6:	bf00      	nop
 8007be8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bea:	bc08      	pop	{r3}
 8007bec:	469e      	mov	lr, r3
 8007bee:	4770      	bx	lr
