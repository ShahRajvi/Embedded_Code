
FreeRTOS_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006adc  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  08006cac  08006cac  00007cac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006df4  08006df4  00008070  2**0
                  CONTENTS
  4 .ARM          00000008  08006df4  08006df4  00007df4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006dfc  08006dfc  00008070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006dfc  08006dfc  00007dfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006e00  08006e00  00007e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08006e04  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000145d4  20000070  08006e74  00008070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20014644  08006e74  00008644  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014f7a  00000000  00000000  000080a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033fc  00000000  00000000  0001d01a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001440  00000000  00000000  00020418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f85  00000000  00000000  00021858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000253bf  00000000  00000000  000227dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018654  00000000  00000000  00047b9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000df895  00000000  00000000  000601f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013fa85  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a70  00000000  00000000  0013fac8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000b7  00000000  00000000  00145538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006c94 	.word	0x08006c94

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08006c94 	.word	0x08006c94

08000210 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000210:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000212:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000216:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 80002a0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800021a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800021e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000222:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000224:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000226:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000228:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800022a:	d332      	bcc.n	8000292 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800022c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800022e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000230:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000232:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000234:	d314      	bcc.n	8000260 <_CheckCase2>

08000236 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000236:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000238:	19d0      	adds	r0, r2, r7
 800023a:	bf00      	nop

0800023c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000240:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000244:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000246:	d005      	beq.n	8000254 <_CSDone>
        LDRB     R3,[R1], #+1
 8000248:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000250:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000252:	d1f3      	bne.n	800023c <_LoopCopyStraight>

08000254 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000254:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000258:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800025a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800025e:	4770      	bx	lr

08000260 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000260:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000262:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000264:	d319      	bcc.n	800029a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000266:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000268:	1b12      	subs	r2, r2, r4

0800026a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800026a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800026e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000272:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000274:	d1f9      	bne.n	800026a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000276:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000278:	d005      	beq.n	8000286 <_No2ChunkNeeded>

0800027a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000282:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyAfterWrapAround>

08000286 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000286:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800028a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800028c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000290:	4770      	bx	lr

08000292 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000292:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000294:	3801      	subs	r0, #1
        CMP      R0,R2
 8000296:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000298:	d2cd      	bcs.n	8000236 <_Case4>

0800029a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800029a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800029c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800029e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002a0:	20012f20 	.word	0x20012f20

080002a4 <__aeabi_uldivmod>:
 80002a4:	b953      	cbnz	r3, 80002bc <__aeabi_uldivmod+0x18>
 80002a6:	b94a      	cbnz	r2, 80002bc <__aeabi_uldivmod+0x18>
 80002a8:	2900      	cmp	r1, #0
 80002aa:	bf08      	it	eq
 80002ac:	2800      	cmpeq	r0, #0
 80002ae:	bf1c      	itt	ne
 80002b0:	f04f 31ff 	movne.w	r1, #4294967295
 80002b4:	f04f 30ff 	movne.w	r0, #4294967295
 80002b8:	f000 b96a 	b.w	8000590 <__aeabi_idiv0>
 80002bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80002c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c4:	f000 f806 	bl	80002d4 <__udivmoddi4>
 80002c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002d0:	b004      	add	sp, #16
 80002d2:	4770      	bx	lr

080002d4 <__udivmoddi4>:
 80002d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d8:	9d08      	ldr	r5, [sp, #32]
 80002da:	460c      	mov	r4, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14e      	bne.n	800037e <__udivmoddi4+0xaa>
 80002e0:	4694      	mov	ip, r2
 80002e2:	458c      	cmp	ip, r1
 80002e4:	4686      	mov	lr, r0
 80002e6:	fab2 f282 	clz	r2, r2
 80002ea:	d962      	bls.n	80003b2 <__udivmoddi4+0xde>
 80002ec:	b14a      	cbz	r2, 8000302 <__udivmoddi4+0x2e>
 80002ee:	f1c2 0320 	rsb	r3, r2, #32
 80002f2:	4091      	lsls	r1, r2
 80002f4:	fa20 f303 	lsr.w	r3, r0, r3
 80002f8:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fc:	4319      	orrs	r1, r3
 80002fe:	fa00 fe02 	lsl.w	lr, r0, r2
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f f68c 	uxth.w	r6, ip
 800030a:	fbb1 f4f7 	udiv	r4, r1, r7
 800030e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000312:	fb07 1114 	mls	r1, r7, r4, r1
 8000316:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031a:	fb04 f106 	mul.w	r1, r4, r6
 800031e:	4299      	cmp	r1, r3
 8000320:	d90a      	bls.n	8000338 <__udivmoddi4+0x64>
 8000322:	eb1c 0303 	adds.w	r3, ip, r3
 8000326:	f104 30ff 	add.w	r0, r4, #4294967295
 800032a:	f080 8112 	bcs.w	8000552 <__udivmoddi4+0x27e>
 800032e:	4299      	cmp	r1, r3
 8000330:	f240 810f 	bls.w	8000552 <__udivmoddi4+0x27e>
 8000334:	3c02      	subs	r4, #2
 8000336:	4463      	add	r3, ip
 8000338:	1a59      	subs	r1, r3, r1
 800033a:	fa1f f38e 	uxth.w	r3, lr
 800033e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000342:	fb07 1110 	mls	r1, r7, r0, r1
 8000346:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034a:	fb00 f606 	mul.w	r6, r0, r6
 800034e:	429e      	cmp	r6, r3
 8000350:	d90a      	bls.n	8000368 <__udivmoddi4+0x94>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f100 31ff 	add.w	r1, r0, #4294967295
 800035a:	f080 80fc 	bcs.w	8000556 <__udivmoddi4+0x282>
 800035e:	429e      	cmp	r6, r3
 8000360:	f240 80f9 	bls.w	8000556 <__udivmoddi4+0x282>
 8000364:	4463      	add	r3, ip
 8000366:	3802      	subs	r0, #2
 8000368:	1b9b      	subs	r3, r3, r6
 800036a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036e:	2100      	movs	r1, #0
 8000370:	b11d      	cbz	r5, 800037a <__udivmoddi4+0xa6>
 8000372:	40d3      	lsrs	r3, r2
 8000374:	2200      	movs	r2, #0
 8000376:	e9c5 3200 	strd	r3, r2, [r5]
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	428b      	cmp	r3, r1
 8000380:	d905      	bls.n	800038e <__udivmoddi4+0xba>
 8000382:	b10d      	cbz	r5, 8000388 <__udivmoddi4+0xb4>
 8000384:	e9c5 0100 	strd	r0, r1, [r5]
 8000388:	2100      	movs	r1, #0
 800038a:	4608      	mov	r0, r1
 800038c:	e7f5      	b.n	800037a <__udivmoddi4+0xa6>
 800038e:	fab3 f183 	clz	r1, r3
 8000392:	2900      	cmp	r1, #0
 8000394:	d146      	bne.n	8000424 <__udivmoddi4+0x150>
 8000396:	42a3      	cmp	r3, r4
 8000398:	d302      	bcc.n	80003a0 <__udivmoddi4+0xcc>
 800039a:	4290      	cmp	r0, r2
 800039c:	f0c0 80f0 	bcc.w	8000580 <__udivmoddi4+0x2ac>
 80003a0:	1a86      	subs	r6, r0, r2
 80003a2:	eb64 0303 	sbc.w	r3, r4, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	2d00      	cmp	r5, #0
 80003aa:	d0e6      	beq.n	800037a <__udivmoddi4+0xa6>
 80003ac:	e9c5 6300 	strd	r6, r3, [r5]
 80003b0:	e7e3      	b.n	800037a <__udivmoddi4+0xa6>
 80003b2:	2a00      	cmp	r2, #0
 80003b4:	f040 8090 	bne.w	80004d8 <__udivmoddi4+0x204>
 80003b8:	eba1 040c 	sub.w	r4, r1, ip
 80003bc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003c0:	fa1f f78c 	uxth.w	r7, ip
 80003c4:	2101      	movs	r1, #1
 80003c6:	fbb4 f6f8 	udiv	r6, r4, r8
 80003ca:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ce:	fb08 4416 	mls	r4, r8, r6, r4
 80003d2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d6:	fb07 f006 	mul.w	r0, r7, r6
 80003da:	4298      	cmp	r0, r3
 80003dc:	d908      	bls.n	80003f0 <__udivmoddi4+0x11c>
 80003de:	eb1c 0303 	adds.w	r3, ip, r3
 80003e2:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e6:	d202      	bcs.n	80003ee <__udivmoddi4+0x11a>
 80003e8:	4298      	cmp	r0, r3
 80003ea:	f200 80cd 	bhi.w	8000588 <__udivmoddi4+0x2b4>
 80003ee:	4626      	mov	r6, r4
 80003f0:	1a1c      	subs	r4, r3, r0
 80003f2:	fa1f f38e 	uxth.w	r3, lr
 80003f6:	fbb4 f0f8 	udiv	r0, r4, r8
 80003fa:	fb08 4410 	mls	r4, r8, r0, r4
 80003fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000402:	fb00 f707 	mul.w	r7, r0, r7
 8000406:	429f      	cmp	r7, r3
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x148>
 800040a:	eb1c 0303 	adds.w	r3, ip, r3
 800040e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x146>
 8000414:	429f      	cmp	r7, r3
 8000416:	f200 80b0 	bhi.w	800057a <__udivmoddi4+0x2a6>
 800041a:	4620      	mov	r0, r4
 800041c:	1bdb      	subs	r3, r3, r7
 800041e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000422:	e7a5      	b.n	8000370 <__udivmoddi4+0x9c>
 8000424:	f1c1 0620 	rsb	r6, r1, #32
 8000428:	408b      	lsls	r3, r1
 800042a:	fa22 f706 	lsr.w	r7, r2, r6
 800042e:	431f      	orrs	r7, r3
 8000430:	fa20 fc06 	lsr.w	ip, r0, r6
 8000434:	fa04 f301 	lsl.w	r3, r4, r1
 8000438:	ea43 030c 	orr.w	r3, r3, ip
 800043c:	40f4      	lsrs	r4, r6
 800043e:	fa00 f801 	lsl.w	r8, r0, r1
 8000442:	0c38      	lsrs	r0, r7, #16
 8000444:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000448:	fbb4 fef0 	udiv	lr, r4, r0
 800044c:	fa1f fc87 	uxth.w	ip, r7
 8000450:	fb00 441e 	mls	r4, r0, lr, r4
 8000454:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000458:	fb0e f90c 	mul.w	r9, lr, ip
 800045c:	45a1      	cmp	r9, r4
 800045e:	fa02 f201 	lsl.w	r2, r2, r1
 8000462:	d90a      	bls.n	800047a <__udivmoddi4+0x1a6>
 8000464:	193c      	adds	r4, r7, r4
 8000466:	f10e 3aff 	add.w	sl, lr, #4294967295
 800046a:	f080 8084 	bcs.w	8000576 <__udivmoddi4+0x2a2>
 800046e:	45a1      	cmp	r9, r4
 8000470:	f240 8081 	bls.w	8000576 <__udivmoddi4+0x2a2>
 8000474:	f1ae 0e02 	sub.w	lr, lr, #2
 8000478:	443c      	add	r4, r7
 800047a:	eba4 0409 	sub.w	r4, r4, r9
 800047e:	fa1f f983 	uxth.w	r9, r3
 8000482:	fbb4 f3f0 	udiv	r3, r4, r0
 8000486:	fb00 4413 	mls	r4, r0, r3, r4
 800048a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000492:	45a4      	cmp	ip, r4
 8000494:	d907      	bls.n	80004a6 <__udivmoddi4+0x1d2>
 8000496:	193c      	adds	r4, r7, r4
 8000498:	f103 30ff 	add.w	r0, r3, #4294967295
 800049c:	d267      	bcs.n	800056e <__udivmoddi4+0x29a>
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d965      	bls.n	800056e <__udivmoddi4+0x29a>
 80004a2:	3b02      	subs	r3, #2
 80004a4:	443c      	add	r4, r7
 80004a6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004aa:	fba0 9302 	umull	r9, r3, r0, r2
 80004ae:	eba4 040c 	sub.w	r4, r4, ip
 80004b2:	429c      	cmp	r4, r3
 80004b4:	46ce      	mov	lr, r9
 80004b6:	469c      	mov	ip, r3
 80004b8:	d351      	bcc.n	800055e <__udivmoddi4+0x28a>
 80004ba:	d04e      	beq.n	800055a <__udivmoddi4+0x286>
 80004bc:	b155      	cbz	r5, 80004d4 <__udivmoddi4+0x200>
 80004be:	ebb8 030e 	subs.w	r3, r8, lr
 80004c2:	eb64 040c 	sbc.w	r4, r4, ip
 80004c6:	fa04 f606 	lsl.w	r6, r4, r6
 80004ca:	40cb      	lsrs	r3, r1
 80004cc:	431e      	orrs	r6, r3
 80004ce:	40cc      	lsrs	r4, r1
 80004d0:	e9c5 6400 	strd	r6, r4, [r5]
 80004d4:	2100      	movs	r1, #0
 80004d6:	e750      	b.n	800037a <__udivmoddi4+0xa6>
 80004d8:	f1c2 0320 	rsb	r3, r2, #32
 80004dc:	fa20 f103 	lsr.w	r1, r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa24 f303 	lsr.w	r3, r4, r3
 80004e8:	4094      	lsls	r4, r2
 80004ea:	430c      	orrs	r4, r1
 80004ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004f0:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f4:	fa1f f78c 	uxth.w	r7, ip
 80004f8:	fbb3 f0f8 	udiv	r0, r3, r8
 80004fc:	fb08 3110 	mls	r1, r8, r0, r3
 8000500:	0c23      	lsrs	r3, r4, #16
 8000502:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000506:	fb00 f107 	mul.w	r1, r0, r7
 800050a:	4299      	cmp	r1, r3
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x24c>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 36ff 	add.w	r6, r0, #4294967295
 8000516:	d22c      	bcs.n	8000572 <__udivmoddi4+0x29e>
 8000518:	4299      	cmp	r1, r3
 800051a:	d92a      	bls.n	8000572 <__udivmoddi4+0x29e>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1a5b      	subs	r3, r3, r1
 8000522:	b2a4      	uxth	r4, r4
 8000524:	fbb3 f1f8 	udiv	r1, r3, r8
 8000528:	fb08 3311 	mls	r3, r8, r1, r3
 800052c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000530:	fb01 f307 	mul.w	r3, r1, r7
 8000534:	42a3      	cmp	r3, r4
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x276>
 8000538:	eb1c 0404 	adds.w	r4, ip, r4
 800053c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000540:	d213      	bcs.n	800056a <__udivmoddi4+0x296>
 8000542:	42a3      	cmp	r3, r4
 8000544:	d911      	bls.n	800056a <__udivmoddi4+0x296>
 8000546:	3902      	subs	r1, #2
 8000548:	4464      	add	r4, ip
 800054a:	1ae4      	subs	r4, r4, r3
 800054c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000550:	e739      	b.n	80003c6 <__udivmoddi4+0xf2>
 8000552:	4604      	mov	r4, r0
 8000554:	e6f0      	b.n	8000338 <__udivmoddi4+0x64>
 8000556:	4608      	mov	r0, r1
 8000558:	e706      	b.n	8000368 <__udivmoddi4+0x94>
 800055a:	45c8      	cmp	r8, r9
 800055c:	d2ae      	bcs.n	80004bc <__udivmoddi4+0x1e8>
 800055e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000562:	eb63 0c07 	sbc.w	ip, r3, r7
 8000566:	3801      	subs	r0, #1
 8000568:	e7a8      	b.n	80004bc <__udivmoddi4+0x1e8>
 800056a:	4631      	mov	r1, r6
 800056c:	e7ed      	b.n	800054a <__udivmoddi4+0x276>
 800056e:	4603      	mov	r3, r0
 8000570:	e799      	b.n	80004a6 <__udivmoddi4+0x1d2>
 8000572:	4630      	mov	r0, r6
 8000574:	e7d4      	b.n	8000520 <__udivmoddi4+0x24c>
 8000576:	46d6      	mov	lr, sl
 8000578:	e77f      	b.n	800047a <__udivmoddi4+0x1a6>
 800057a:	4463      	add	r3, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e74d      	b.n	800041c <__udivmoddi4+0x148>
 8000580:	4606      	mov	r6, r0
 8000582:	4623      	mov	r3, r4
 8000584:	4608      	mov	r0, r1
 8000586:	e70f      	b.n	80003a8 <__udivmoddi4+0xd4>
 8000588:	3e02      	subs	r6, #2
 800058a:	4463      	add	r3, ip
 800058c:	e730      	b.n	80003f0 <__udivmoddi4+0x11c>
 800058e:	bf00      	nop

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b088      	sub	sp, #32
 8000598:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800059a:	f000 fad9 	bl	8000b50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059e:	f000 f853 	bl	8000648 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a2:	f000 f8bf 	bl	8000724 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */


  // Enable Cycle Counter CYCCNT. Refer to datasheet of arm-M4 for details. Set the 0th bit to 1
  DWT_CTRL &= (1<<0);
 80005a6:	4b21      	ldr	r3, [pc, #132]	@ (800062c <main+0x98>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	4a20      	ldr	r2, [pc, #128]	@ (800062c <main+0x98>)
 80005ac:	f003 0301 	and.w	r3, r3, #1
 80005b0:	6013      	str	r3, [r2, #0]

  // Start segger recording:
  SEGGER_SYSVIEW_Conf();
 80005b2:	f004 f8c3 	bl	800473c <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 80005b6:	f005 f92f 	bl	8005818 <SEGGER_SYSVIEW_Start>

  status = xTaskCreate(task1_handler, "Task-1",200, "Hello World from Task 1", 2, &task1_handle );
 80005ba:	f107 0308 	add.w	r3, r7, #8
 80005be:	9301      	str	r3, [sp, #4]
 80005c0:	2302      	movs	r3, #2
 80005c2:	9300      	str	r3, [sp, #0]
 80005c4:	4b1a      	ldr	r3, [pc, #104]	@ (8000630 <main+0x9c>)
 80005c6:	22c8      	movs	r2, #200	@ 0xc8
 80005c8:	491a      	ldr	r1, [pc, #104]	@ (8000634 <main+0xa0>)
 80005ca:	481b      	ldr	r0, [pc, #108]	@ (8000638 <main+0xa4>)
 80005cc:	f002 f9e8 	bl	80029a0 <xTaskCreate>
 80005d0:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 80005d2:	697b      	ldr	r3, [r7, #20]
 80005d4:	2b01      	cmp	r3, #1
 80005d6:	d00b      	beq.n	80005f0 <main+0x5c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80005dc:	f383 8811 	msr	BASEPRI, r3
 80005e0:	f3bf 8f6f 	isb	sy
 80005e4:	f3bf 8f4f 	dsb	sy
 80005e8:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005ea:	bf00      	nop
 80005ec:	bf00      	nop
 80005ee:	e7fd      	b.n	80005ec <main+0x58>

  status = xTaskCreate(task2_handler, "Task-2",200, "Hello World from Task 2", 2, &task2_handle );
 80005f0:	1d3b      	adds	r3, r7, #4
 80005f2:	9301      	str	r3, [sp, #4]
 80005f4:	2302      	movs	r3, #2
 80005f6:	9300      	str	r3, [sp, #0]
 80005f8:	4b10      	ldr	r3, [pc, #64]	@ (800063c <main+0xa8>)
 80005fa:	22c8      	movs	r2, #200	@ 0xc8
 80005fc:	4910      	ldr	r1, [pc, #64]	@ (8000640 <main+0xac>)
 80005fe:	4811      	ldr	r0, [pc, #68]	@ (8000644 <main+0xb0>)
 8000600:	f002 f9ce 	bl	80029a0 <xTaskCreate>
 8000604:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 8000606:	697b      	ldr	r3, [r7, #20]
 8000608:	2b01      	cmp	r3, #1
 800060a:	d00b      	beq.n	8000624 <main+0x90>
        __asm volatile
 800060c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000610:	f383 8811 	msr	BASEPRI, r3
 8000614:	f3bf 8f6f 	isb	sy
 8000618:	f3bf 8f4f 	dsb	sy
 800061c:	60fb      	str	r3, [r7, #12]
    }
 800061e:	bf00      	nop
 8000620:	bf00      	nop
 8000622:	e7fd      	b.n	8000620 <main+0x8c>
  // start FreeRTOS scheduler
  vTaskStartScheduler();
 8000624:	f002 fb38 	bl	8002c98 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000628:	bf00      	nop
 800062a:	e7fd      	b.n	8000628 <main+0x94>
 800062c:	e0001000 	.word	0xe0001000
 8000630:	08006cac 	.word	0x08006cac
 8000634:	08006cc4 	.word	0x08006cc4
 8000638:	08000821 	.word	0x08000821
 800063c:	08006ccc 	.word	0x08006ccc
 8000640:	08006ce4 	.word	0x08006ce4
 8000644:	08000849 	.word	0x08000849

08000648 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b094      	sub	sp, #80	@ 0x50
 800064c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064e:	f107 031c 	add.w	r3, r7, #28
 8000652:	2234      	movs	r2, #52	@ 0x34
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f006 f864 	bl	8006724 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800065c:	f107 0308 	add.w	r3, r7, #8
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]
 800066a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800066c:	2300      	movs	r3, #0
 800066e:	607b      	str	r3, [r7, #4]
 8000670:	4b2a      	ldr	r3, [pc, #168]	@ (800071c <SystemClock_Config+0xd4>)
 8000672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000674:	4a29      	ldr	r2, [pc, #164]	@ (800071c <SystemClock_Config+0xd4>)
 8000676:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800067a:	6413      	str	r3, [r2, #64]	@ 0x40
 800067c:	4b27      	ldr	r3, [pc, #156]	@ (800071c <SystemClock_Config+0xd4>)
 800067e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000680:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000684:	607b      	str	r3, [r7, #4]
 8000686:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000688:	2300      	movs	r3, #0
 800068a:	603b      	str	r3, [r7, #0]
 800068c:	4b24      	ldr	r3, [pc, #144]	@ (8000720 <SystemClock_Config+0xd8>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000694:	4a22      	ldr	r2, [pc, #136]	@ (8000720 <SystemClock_Config+0xd8>)
 8000696:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800069a:	6013      	str	r3, [r2, #0]
 800069c:	4b20      	ldr	r3, [pc, #128]	@ (8000720 <SystemClock_Config+0xd8>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006a4:	603b      	str	r3, [r7, #0]
 80006a6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006a8:	2302      	movs	r3, #2
 80006aa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006ac:	2301      	movs	r3, #1
 80006ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b0:	2310      	movs	r3, #16
 80006b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b4:	2302      	movs	r3, #2
 80006b6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006b8:	2300      	movs	r3, #0
 80006ba:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006bc:	2310      	movs	r3, #16
 80006be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006c0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80006c4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006c6:	2304      	movs	r3, #4
 80006c8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006ca:	2302      	movs	r3, #2
 80006cc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006ce:	2302      	movs	r3, #2
 80006d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d2:	f107 031c 	add.w	r3, r7, #28
 80006d6:	4618      	mov	r0, r3
 80006d8:	f001 f874 	bl	80017c4 <HAL_RCC_OscConfig>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80006e2:	f000 f8d7 	bl	8000894 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e6:	230f      	movs	r3, #15
 80006e8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ea:	2302      	movs	r3, #2
 80006ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ee:	2300      	movs	r3, #0
 80006f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f8:	2300      	movs	r3, #0
 80006fa:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006fc:	f107 0308 	add.w	r3, r7, #8
 8000700:	2102      	movs	r1, #2
 8000702:	4618      	mov	r0, r3
 8000704:	f000 fcf6 	bl	80010f4 <HAL_RCC_ClockConfig>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800070e:	f000 f8c1 	bl	8000894 <Error_Handler>
  }
}
 8000712:	bf00      	nop
 8000714:	3750      	adds	r7, #80	@ 0x50
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	40023800 	.word	0x40023800
 8000720:	40007000 	.word	0x40007000

08000724 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b08a      	sub	sp, #40	@ 0x28
 8000728:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072a:	f107 0314 	add.w	r3, r7, #20
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	605a      	str	r2, [r3, #4]
 8000734:	609a      	str	r2, [r3, #8]
 8000736:	60da      	str	r2, [r3, #12]
 8000738:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	613b      	str	r3, [r7, #16]
 800073e:	4b35      	ldr	r3, [pc, #212]	@ (8000814 <MX_GPIO_Init+0xf0>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000742:	4a34      	ldr	r2, [pc, #208]	@ (8000814 <MX_GPIO_Init+0xf0>)
 8000744:	f043 0304 	orr.w	r3, r3, #4
 8000748:	6313      	str	r3, [r2, #48]	@ 0x30
 800074a:	4b32      	ldr	r3, [pc, #200]	@ (8000814 <MX_GPIO_Init+0xf0>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074e:	f003 0304 	and.w	r3, r3, #4
 8000752:	613b      	str	r3, [r7, #16]
 8000754:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	60fb      	str	r3, [r7, #12]
 800075a:	4b2e      	ldr	r3, [pc, #184]	@ (8000814 <MX_GPIO_Init+0xf0>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075e:	4a2d      	ldr	r2, [pc, #180]	@ (8000814 <MX_GPIO_Init+0xf0>)
 8000760:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000764:	6313      	str	r3, [r2, #48]	@ 0x30
 8000766:	4b2b      	ldr	r3, [pc, #172]	@ (8000814 <MX_GPIO_Init+0xf0>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800076e:	60fb      	str	r3, [r7, #12]
 8000770:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	60bb      	str	r3, [r7, #8]
 8000776:	4b27      	ldr	r3, [pc, #156]	@ (8000814 <MX_GPIO_Init+0xf0>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077a:	4a26      	ldr	r2, [pc, #152]	@ (8000814 <MX_GPIO_Init+0xf0>)
 800077c:	f043 0301 	orr.w	r3, r3, #1
 8000780:	6313      	str	r3, [r2, #48]	@ 0x30
 8000782:	4b24      	ldr	r3, [pc, #144]	@ (8000814 <MX_GPIO_Init+0xf0>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000786:	f003 0301 	and.w	r3, r3, #1
 800078a:	60bb      	str	r3, [r7, #8]
 800078c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	607b      	str	r3, [r7, #4]
 8000792:	4b20      	ldr	r3, [pc, #128]	@ (8000814 <MX_GPIO_Init+0xf0>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000796:	4a1f      	ldr	r2, [pc, #124]	@ (8000814 <MX_GPIO_Init+0xf0>)
 8000798:	f043 0302 	orr.w	r3, r3, #2
 800079c:	6313      	str	r3, [r2, #48]	@ 0x30
 800079e:	4b1d      	ldr	r3, [pc, #116]	@ (8000814 <MX_GPIO_Init+0xf0>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a2:	f003 0302 	and.w	r3, r3, #2
 80007a6:	607b      	str	r3, [r7, #4]
 80007a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007aa:	2200      	movs	r2, #0
 80007ac:	2120      	movs	r1, #32
 80007ae:	481a      	ldr	r0, [pc, #104]	@ (8000818 <MX_GPIO_Init+0xf4>)
 80007b0:	f000 fc86 	bl	80010c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007b4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007ba:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80007be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c0:	2300      	movs	r3, #0
 80007c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007c4:	f107 0314 	add.w	r3, r7, #20
 80007c8:	4619      	mov	r1, r3
 80007ca:	4814      	ldr	r0, [pc, #80]	@ (800081c <MX_GPIO_Init+0xf8>)
 80007cc:	f000 fae4 	bl	8000d98 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80007d0:	230c      	movs	r3, #12
 80007d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d4:	2302      	movs	r3, #2
 80007d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d8:	2300      	movs	r3, #0
 80007da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007dc:	2303      	movs	r3, #3
 80007de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007e0:	2307      	movs	r3, #7
 80007e2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e4:	f107 0314 	add.w	r3, r7, #20
 80007e8:	4619      	mov	r1, r3
 80007ea:	480b      	ldr	r0, [pc, #44]	@ (8000818 <MX_GPIO_Init+0xf4>)
 80007ec:	f000 fad4 	bl	8000d98 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007f0:	2320      	movs	r3, #32
 80007f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f4:	2301      	movs	r3, #1
 80007f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f8:	2300      	movs	r3, #0
 80007fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fc:	2300      	movs	r3, #0
 80007fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000800:	f107 0314 	add.w	r3, r7, #20
 8000804:	4619      	mov	r1, r3
 8000806:	4804      	ldr	r0, [pc, #16]	@ (8000818 <MX_GPIO_Init+0xf4>)
 8000808:	f000 fac6 	bl	8000d98 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800080c:	bf00      	nop
 800080e:	3728      	adds	r7, #40	@ 0x28
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	40023800 	.word	0x40023800
 8000818:	40020000 	.word	0x40020000
 800081c:	40020800 	.word	0x40020800

08000820 <task1_handler>:

/* USER CODE BEGIN 4 */

static void task1_handler(void* parameters){
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
	while(1){
		printf("%s\n", (char*) parameters);
 8000828:	6878      	ldr	r0, [r7, #4]
 800082a:	f005 fe8b 	bl	8006544 <puts>
		// Cooperative scheduling
		taskYIELD();
 800082e:	4b05      	ldr	r3, [pc, #20]	@ (8000844 <task1_handler+0x24>)
 8000830:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000834:	601a      	str	r2, [r3, #0]
 8000836:	f3bf 8f4f 	dsb	sy
 800083a:	f3bf 8f6f 	isb	sy
		printf("%s\n", (char*) parameters);
 800083e:	bf00      	nop
 8000840:	e7f2      	b.n	8000828 <task1_handler+0x8>
 8000842:	bf00      	nop
 8000844:	e000ed04 	.word	0xe000ed04

08000848 <task2_handler>:
	}

}

static void task2_handler(void* parameters){
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
	while(1){
		printf("%s\n", (char*)parameters);
 8000850:	6878      	ldr	r0, [r7, #4]
 8000852:	f005 fe77 	bl	8006544 <puts>
		// Cooperative scheduling
		taskYIELD();
 8000856:	4b05      	ldr	r3, [pc, #20]	@ (800086c <task2_handler+0x24>)
 8000858:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800085c:	601a      	str	r2, [r3, #0]
 800085e:	f3bf 8f4f 	dsb	sy
 8000862:	f3bf 8f6f 	isb	sy
		printf("%s\n", (char*)parameters);
 8000866:	bf00      	nop
 8000868:	e7f2      	b.n	8000850 <task2_handler+0x8>
 800086a:	bf00      	nop
 800086c:	e000ed04 	.word	0xe000ed04

08000870 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a04      	ldr	r2, [pc, #16]	@ (8000890 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800087e:	4293      	cmp	r3, r2
 8000880:	d101      	bne.n	8000886 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000882:	f000 f987 	bl	8000b94 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000886:	bf00      	nop
 8000888:	3708      	adds	r7, #8
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	40001000 	.word	0x40001000

08000894 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000898:	b672      	cpsid	i
}
 800089a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800089c:	bf00      	nop
 800089e:	e7fd      	b.n	800089c <Error_Handler+0x8>

080008a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	607b      	str	r3, [r7, #4]
 80008aa:	4b10      	ldr	r3, [pc, #64]	@ (80008ec <HAL_MspInit+0x4c>)
 80008ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008ae:	4a0f      	ldr	r2, [pc, #60]	@ (80008ec <HAL_MspInit+0x4c>)
 80008b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80008b6:	4b0d      	ldr	r3, [pc, #52]	@ (80008ec <HAL_MspInit+0x4c>)
 80008b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008be:	607b      	str	r3, [r7, #4]
 80008c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	603b      	str	r3, [r7, #0]
 80008c6:	4b09      	ldr	r3, [pc, #36]	@ (80008ec <HAL_MspInit+0x4c>)
 80008c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ca:	4a08      	ldr	r2, [pc, #32]	@ (80008ec <HAL_MspInit+0x4c>)
 80008cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80008d2:	4b06      	ldr	r3, [pc, #24]	@ (80008ec <HAL_MspInit+0x4c>)
 80008d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008da:	603b      	str	r3, [r7, #0]
 80008dc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 80008de:	f003 fb9d 	bl	800401c <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 80008e2:	bf00      	nop
 80008e4:	3708      	adds	r7, #8
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	40023800 	.word	0x40023800

080008f0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b08e      	sub	sp, #56	@ 0x38
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80008f8:	2300      	movs	r3, #0
 80008fa:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80008fc:	2300      	movs	r3, #0
 80008fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000900:	2300      	movs	r3, #0
 8000902:	60fb      	str	r3, [r7, #12]
 8000904:	4b33      	ldr	r3, [pc, #204]	@ (80009d4 <HAL_InitTick+0xe4>)
 8000906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000908:	4a32      	ldr	r2, [pc, #200]	@ (80009d4 <HAL_InitTick+0xe4>)
 800090a:	f043 0310 	orr.w	r3, r3, #16
 800090e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000910:	4b30      	ldr	r3, [pc, #192]	@ (80009d4 <HAL_InitTick+0xe4>)
 8000912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000914:	f003 0310 	and.w	r3, r3, #16
 8000918:	60fb      	str	r3, [r7, #12]
 800091a:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800091c:	f107 0210 	add.w	r2, r7, #16
 8000920:	f107 0314 	add.w	r3, r7, #20
 8000924:	4611      	mov	r1, r2
 8000926:	4618      	mov	r0, r3
 8000928:	f000 fcea 	bl	8001300 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800092c:	6a3b      	ldr	r3, [r7, #32]
 800092e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000930:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000932:	2b00      	cmp	r3, #0
 8000934:	d103      	bne.n	800093e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000936:	f000 fccf 	bl	80012d8 <HAL_RCC_GetPCLK1Freq>
 800093a:	6378      	str	r0, [r7, #52]	@ 0x34
 800093c:	e004      	b.n	8000948 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800093e:	f000 fccb 	bl	80012d8 <HAL_RCC_GetPCLK1Freq>
 8000942:	4603      	mov	r3, r0
 8000944:	005b      	lsls	r3, r3, #1
 8000946:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000948:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800094a:	4a23      	ldr	r2, [pc, #140]	@ (80009d8 <HAL_InitTick+0xe8>)
 800094c:	fba2 2303 	umull	r2, r3, r2, r3
 8000950:	0c9b      	lsrs	r3, r3, #18
 8000952:	3b01      	subs	r3, #1
 8000954:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000956:	4b21      	ldr	r3, [pc, #132]	@ (80009dc <HAL_InitTick+0xec>)
 8000958:	4a21      	ldr	r2, [pc, #132]	@ (80009e0 <HAL_InitTick+0xf0>)
 800095a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800095c:	4b1f      	ldr	r3, [pc, #124]	@ (80009dc <HAL_InitTick+0xec>)
 800095e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000962:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000964:	4a1d      	ldr	r2, [pc, #116]	@ (80009dc <HAL_InitTick+0xec>)
 8000966:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000968:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800096a:	4b1c      	ldr	r3, [pc, #112]	@ (80009dc <HAL_InitTick+0xec>)
 800096c:	2200      	movs	r2, #0
 800096e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000970:	4b1a      	ldr	r3, [pc, #104]	@ (80009dc <HAL_InitTick+0xec>)
 8000972:	2200      	movs	r2, #0
 8000974:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000976:	4b19      	ldr	r3, [pc, #100]	@ (80009dc <HAL_InitTick+0xec>)
 8000978:	2200      	movs	r2, #0
 800097a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800097c:	4817      	ldr	r0, [pc, #92]	@ (80009dc <HAL_InitTick+0xec>)
 800097e:	f001 f9bf 	bl	8001d00 <HAL_TIM_Base_Init>
 8000982:	4603      	mov	r3, r0
 8000984:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000988:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800098c:	2b00      	cmp	r3, #0
 800098e:	d11b      	bne.n	80009c8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000990:	4812      	ldr	r0, [pc, #72]	@ (80009dc <HAL_InitTick+0xec>)
 8000992:	f001 fa0f 	bl	8001db4 <HAL_TIM_Base_Start_IT>
 8000996:	4603      	mov	r3, r0
 8000998:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800099c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d111      	bne.n	80009c8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80009a4:	2036      	movs	r0, #54	@ 0x36
 80009a6:	f000 f9e9 	bl	8000d7c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	2b0f      	cmp	r3, #15
 80009ae:	d808      	bhi.n	80009c2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80009b0:	2200      	movs	r2, #0
 80009b2:	6879      	ldr	r1, [r7, #4]
 80009b4:	2036      	movs	r0, #54	@ 0x36
 80009b6:	f000 f9c5 	bl	8000d44 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009ba:	4a0a      	ldr	r2, [pc, #40]	@ (80009e4 <HAL_InitTick+0xf4>)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	6013      	str	r3, [r2, #0]
 80009c0:	e002      	b.n	80009c8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80009c2:	2301      	movs	r3, #1
 80009c4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80009c8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80009cc:	4618      	mov	r0, r3
 80009ce:	3738      	adds	r7, #56	@ 0x38
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	40023800 	.word	0x40023800
 80009d8:	431bde83 	.word	0x431bde83
 80009dc:	2000008c 	.word	0x2000008c
 80009e0:	40001000 	.word	0x40001000
 80009e4:	20000004 	.word	0x20000004

080009e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009ec:	bf00      	nop
 80009ee:	e7fd      	b.n	80009ec <NMI_Handler+0x4>

080009f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009f4:	bf00      	nop
 80009f6:	e7fd      	b.n	80009f4 <HardFault_Handler+0x4>

080009f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009fc:	bf00      	nop
 80009fe:	e7fd      	b.n	80009fc <MemManage_Handler+0x4>

08000a00 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a04:	bf00      	nop
 8000a06:	e7fd      	b.n	8000a04 <BusFault_Handler+0x4>

08000a08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a0c:	bf00      	nop
 8000a0e:	e7fd      	b.n	8000a0c <UsageFault_Handler+0x4>

08000a10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a14:	bf00      	nop
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
	...

08000a20 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000a24:	4802      	ldr	r0, [pc, #8]	@ (8000a30 <TIM6_DAC_IRQHandler+0x10>)
 8000a26:	f001 fa35 	bl	8001e94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000a2a:	bf00      	nop
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	2000008c 	.word	0x2000008c

08000a34 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b086      	sub	sp, #24
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	60f8      	str	r0, [r7, #12]
 8000a3c:	60b9      	str	r1, [r7, #8]
 8000a3e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a40:	2300      	movs	r3, #0
 8000a42:	617b      	str	r3, [r7, #20]
 8000a44:	e00a      	b.n	8000a5c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a46:	f3af 8000 	nop.w
 8000a4a:	4601      	mov	r1, r0
 8000a4c:	68bb      	ldr	r3, [r7, #8]
 8000a4e:	1c5a      	adds	r2, r3, #1
 8000a50:	60ba      	str	r2, [r7, #8]
 8000a52:	b2ca      	uxtb	r2, r1
 8000a54:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a56:	697b      	ldr	r3, [r7, #20]
 8000a58:	3301      	adds	r3, #1
 8000a5a:	617b      	str	r3, [r7, #20]
 8000a5c:	697a      	ldr	r2, [r7, #20]
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	429a      	cmp	r2, r3
 8000a62:	dbf0      	blt.n	8000a46 <_read+0x12>
  }

  return len;
 8000a64:	687b      	ldr	r3, [r7, #4]
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	3718      	adds	r7, #24
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}

08000a6e <_close>:
  }
  return len;
}

int _close(int file)
{
 8000a6e:	b480      	push	{r7}
 8000a70:	b083      	sub	sp, #12
 8000a72:	af00      	add	r7, sp, #0
 8000a74:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	370c      	adds	r7, #12
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr

08000a86 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a86:	b480      	push	{r7}
 8000a88:	b083      	sub	sp, #12
 8000a8a:	af00      	add	r7, sp, #0
 8000a8c:	6078      	str	r0, [r7, #4]
 8000a8e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a96:	605a      	str	r2, [r3, #4]
  return 0;
 8000a98:	2300      	movs	r3, #0
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	370c      	adds	r7, #12
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr

08000aa6 <_isatty>:

int _isatty(int file)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	b083      	sub	sp, #12
 8000aaa:	af00      	add	r7, sp, #0
 8000aac:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000aae:	2301      	movs	r3, #1
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	370c      	adds	r7, #12
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr

08000abc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b085      	sub	sp, #20
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	60f8      	str	r0, [r7, #12]
 8000ac4:	60b9      	str	r1, [r7, #8]
 8000ac6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ac8:	2300      	movs	r3, #0
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	3714      	adds	r7, #20
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
	...

08000ad8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000adc:	4b06      	ldr	r3, [pc, #24]	@ (8000af8 <SystemInit+0x20>)
 8000ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ae2:	4a05      	ldr	r2, [pc, #20]	@ (8000af8 <SystemInit+0x20>)
 8000ae4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ae8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000aec:	bf00      	nop
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	e000ed00 	.word	0xe000ed00

08000afc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000afc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b34 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000b00:	f7ff ffea 	bl	8000ad8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b04:	480c      	ldr	r0, [pc, #48]	@ (8000b38 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b06:	490d      	ldr	r1, [pc, #52]	@ (8000b3c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b08:	4a0d      	ldr	r2, [pc, #52]	@ (8000b40 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b0c:	e002      	b.n	8000b14 <LoopCopyDataInit>

08000b0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b12:	3304      	adds	r3, #4

08000b14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b18:	d3f9      	bcc.n	8000b0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b1a:	4a0a      	ldr	r2, [pc, #40]	@ (8000b44 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b1c:	4c0a      	ldr	r4, [pc, #40]	@ (8000b48 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b20:	e001      	b.n	8000b26 <LoopFillZerobss>

08000b22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b24:	3204      	adds	r2, #4

08000b26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b28:	d3fb      	bcc.n	8000b22 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000b2a:	f005 fe37 	bl	800679c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b2e:	f7ff fd31 	bl	8000594 <main>
  bx  lr    
 8000b32:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b34:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b3c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000b40:	08006e04 	.word	0x08006e04
  ldr r2, =_sbss
 8000b44:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000b48:	20014644 	.word	0x20014644

08000b4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b4c:	e7fe      	b.n	8000b4c <ADC_IRQHandler>
	...

08000b50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b54:	4b0e      	ldr	r3, [pc, #56]	@ (8000b90 <HAL_Init+0x40>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a0d      	ldr	r2, [pc, #52]	@ (8000b90 <HAL_Init+0x40>)
 8000b5a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b60:	4b0b      	ldr	r3, [pc, #44]	@ (8000b90 <HAL_Init+0x40>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a0a      	ldr	r2, [pc, #40]	@ (8000b90 <HAL_Init+0x40>)
 8000b66:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b6c:	4b08      	ldr	r3, [pc, #32]	@ (8000b90 <HAL_Init+0x40>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a07      	ldr	r2, [pc, #28]	@ (8000b90 <HAL_Init+0x40>)
 8000b72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b78:	2003      	movs	r0, #3
 8000b7a:	f000 f8d8 	bl	8000d2e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b7e:	2000      	movs	r0, #0
 8000b80:	f7ff feb6 	bl	80008f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b84:	f7ff fe8c 	bl	80008a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b88:	2300      	movs	r3, #0
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40023c00 	.word	0x40023c00

08000b94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b98:	4b06      	ldr	r3, [pc, #24]	@ (8000bb4 <HAL_IncTick+0x20>)
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	461a      	mov	r2, r3
 8000b9e:	4b06      	ldr	r3, [pc, #24]	@ (8000bb8 <HAL_IncTick+0x24>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4413      	add	r3, r2
 8000ba4:	4a04      	ldr	r2, [pc, #16]	@ (8000bb8 <HAL_IncTick+0x24>)
 8000ba6:	6013      	str	r3, [r2, #0]
}
 8000ba8:	bf00      	nop
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	20000008 	.word	0x20000008
 8000bb8:	200000d4 	.word	0x200000d4

08000bbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  return uwTick;
 8000bc0:	4b03      	ldr	r3, [pc, #12]	@ (8000bd0 <HAL_GetTick+0x14>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	200000d4 	.word	0x200000d4

08000bd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b085      	sub	sp, #20
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	f003 0307 	and.w	r3, r3, #7
 8000be2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000be4:	4b0c      	ldr	r3, [pc, #48]	@ (8000c18 <__NVIC_SetPriorityGrouping+0x44>)
 8000be6:	68db      	ldr	r3, [r3, #12]
 8000be8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bea:	68ba      	ldr	r2, [r7, #8]
 8000bec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bfc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c06:	4a04      	ldr	r2, [pc, #16]	@ (8000c18 <__NVIC_SetPriorityGrouping+0x44>)
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	60d3      	str	r3, [r2, #12]
}
 8000c0c:	bf00      	nop
 8000c0e:	3714      	adds	r7, #20
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr
 8000c18:	e000ed00 	.word	0xe000ed00

08000c1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c20:	4b04      	ldr	r3, [pc, #16]	@ (8000c34 <__NVIC_GetPriorityGrouping+0x18>)
 8000c22:	68db      	ldr	r3, [r3, #12]
 8000c24:	0a1b      	lsrs	r3, r3, #8
 8000c26:	f003 0307 	and.w	r3, r3, #7
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr
 8000c34:	e000ed00 	.word	0xe000ed00

08000c38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	4603      	mov	r3, r0
 8000c40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	db0b      	blt.n	8000c62 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c4a:	79fb      	ldrb	r3, [r7, #7]
 8000c4c:	f003 021f 	and.w	r2, r3, #31
 8000c50:	4907      	ldr	r1, [pc, #28]	@ (8000c70 <__NVIC_EnableIRQ+0x38>)
 8000c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c56:	095b      	lsrs	r3, r3, #5
 8000c58:	2001      	movs	r0, #1
 8000c5a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c62:	bf00      	nop
 8000c64:	370c      	adds	r7, #12
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	e000e100 	.word	0xe000e100

08000c74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	6039      	str	r1, [r7, #0]
 8000c7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	db0a      	blt.n	8000c9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	b2da      	uxtb	r2, r3
 8000c8c:	490c      	ldr	r1, [pc, #48]	@ (8000cc0 <__NVIC_SetPriority+0x4c>)
 8000c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c92:	0112      	lsls	r2, r2, #4
 8000c94:	b2d2      	uxtb	r2, r2
 8000c96:	440b      	add	r3, r1
 8000c98:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c9c:	e00a      	b.n	8000cb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	b2da      	uxtb	r2, r3
 8000ca2:	4908      	ldr	r1, [pc, #32]	@ (8000cc4 <__NVIC_SetPriority+0x50>)
 8000ca4:	79fb      	ldrb	r3, [r7, #7]
 8000ca6:	f003 030f 	and.w	r3, r3, #15
 8000caa:	3b04      	subs	r3, #4
 8000cac:	0112      	lsls	r2, r2, #4
 8000cae:	b2d2      	uxtb	r2, r2
 8000cb0:	440b      	add	r3, r1
 8000cb2:	761a      	strb	r2, [r3, #24]
}
 8000cb4:	bf00      	nop
 8000cb6:	370c      	adds	r7, #12
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr
 8000cc0:	e000e100 	.word	0xe000e100
 8000cc4:	e000ed00 	.word	0xe000ed00

08000cc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b089      	sub	sp, #36	@ 0x24
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	60f8      	str	r0, [r7, #12]
 8000cd0:	60b9      	str	r1, [r7, #8]
 8000cd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	f003 0307 	and.w	r3, r3, #7
 8000cda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cdc:	69fb      	ldr	r3, [r7, #28]
 8000cde:	f1c3 0307 	rsb	r3, r3, #7
 8000ce2:	2b04      	cmp	r3, #4
 8000ce4:	bf28      	it	cs
 8000ce6:	2304      	movcs	r3, #4
 8000ce8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	3304      	adds	r3, #4
 8000cee:	2b06      	cmp	r3, #6
 8000cf0:	d902      	bls.n	8000cf8 <NVIC_EncodePriority+0x30>
 8000cf2:	69fb      	ldr	r3, [r7, #28]
 8000cf4:	3b03      	subs	r3, #3
 8000cf6:	e000      	b.n	8000cfa <NVIC_EncodePriority+0x32>
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cfc:	f04f 32ff 	mov.w	r2, #4294967295
 8000d00:	69bb      	ldr	r3, [r7, #24]
 8000d02:	fa02 f303 	lsl.w	r3, r2, r3
 8000d06:	43da      	mvns	r2, r3
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	401a      	ands	r2, r3
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d10:	f04f 31ff 	mov.w	r1, #4294967295
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	fa01 f303 	lsl.w	r3, r1, r3
 8000d1a:	43d9      	mvns	r1, r3
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d20:	4313      	orrs	r3, r2
         );
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3724      	adds	r7, #36	@ 0x24
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr

08000d2e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d2e:	b580      	push	{r7, lr}
 8000d30:	b082      	sub	sp, #8
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d36:	6878      	ldr	r0, [r7, #4]
 8000d38:	f7ff ff4c 	bl	8000bd4 <__NVIC_SetPriorityGrouping>
}
 8000d3c:	bf00      	nop
 8000d3e:	3708      	adds	r7, #8
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}

08000d44 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b086      	sub	sp, #24
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	60b9      	str	r1, [r7, #8]
 8000d4e:	607a      	str	r2, [r7, #4]
 8000d50:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d52:	2300      	movs	r3, #0
 8000d54:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d56:	f7ff ff61 	bl	8000c1c <__NVIC_GetPriorityGrouping>
 8000d5a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d5c:	687a      	ldr	r2, [r7, #4]
 8000d5e:	68b9      	ldr	r1, [r7, #8]
 8000d60:	6978      	ldr	r0, [r7, #20]
 8000d62:	f7ff ffb1 	bl	8000cc8 <NVIC_EncodePriority>
 8000d66:	4602      	mov	r2, r0
 8000d68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d6c:	4611      	mov	r1, r2
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f7ff ff80 	bl	8000c74 <__NVIC_SetPriority>
}
 8000d74:	bf00      	nop
 8000d76:	3718      	adds	r7, #24
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	4603      	mov	r3, r0
 8000d84:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f7ff ff54 	bl	8000c38 <__NVIC_EnableIRQ>
}
 8000d90:	bf00      	nop
 8000d92:	3708      	adds	r7, #8
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b089      	sub	sp, #36	@ 0x24
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
 8000da0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000da2:	2300      	movs	r3, #0
 8000da4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000da6:	2300      	movs	r3, #0
 8000da8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000daa:	2300      	movs	r3, #0
 8000dac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dae:	2300      	movs	r3, #0
 8000db0:	61fb      	str	r3, [r7, #28]
 8000db2:	e165      	b.n	8001080 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000db4:	2201      	movs	r2, #1
 8000db6:	69fb      	ldr	r3, [r7, #28]
 8000db8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	697a      	ldr	r2, [r7, #20]
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000dc8:	693a      	ldr	r2, [r7, #16]
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	f040 8154 	bne.w	800107a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	f003 0303 	and.w	r3, r3, #3
 8000dda:	2b01      	cmp	r3, #1
 8000ddc:	d005      	beq.n	8000dea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000de6:	2b02      	cmp	r3, #2
 8000de8:	d130      	bne.n	8000e4c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	689b      	ldr	r3, [r3, #8]
 8000dee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000df0:	69fb      	ldr	r3, [r7, #28]
 8000df2:	005b      	lsls	r3, r3, #1
 8000df4:	2203      	movs	r2, #3
 8000df6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfa:	43db      	mvns	r3, r3
 8000dfc:	69ba      	ldr	r2, [r7, #24]
 8000dfe:	4013      	ands	r3, r2
 8000e00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	68da      	ldr	r2, [r3, #12]
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	005b      	lsls	r3, r3, #1
 8000e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0e:	69ba      	ldr	r2, [r7, #24]
 8000e10:	4313      	orrs	r3, r2
 8000e12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	69ba      	ldr	r2, [r7, #24]
 8000e18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e20:	2201      	movs	r2, #1
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	fa02 f303 	lsl.w	r3, r2, r3
 8000e28:	43db      	mvns	r3, r3
 8000e2a:	69ba      	ldr	r2, [r7, #24]
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	091b      	lsrs	r3, r3, #4
 8000e36:	f003 0201 	and.w	r2, r3, #1
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e40:	69ba      	ldr	r2, [r7, #24]
 8000e42:	4313      	orrs	r3, r2
 8000e44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	69ba      	ldr	r2, [r7, #24]
 8000e4a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	f003 0303 	and.w	r3, r3, #3
 8000e54:	2b03      	cmp	r3, #3
 8000e56:	d017      	beq.n	8000e88 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	68db      	ldr	r3, [r3, #12]
 8000e5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	005b      	lsls	r3, r3, #1
 8000e62:	2203      	movs	r2, #3
 8000e64:	fa02 f303 	lsl.w	r3, r2, r3
 8000e68:	43db      	mvns	r3, r3
 8000e6a:	69ba      	ldr	r2, [r7, #24]
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	689a      	ldr	r2, [r3, #8]
 8000e74:	69fb      	ldr	r3, [r7, #28]
 8000e76:	005b      	lsls	r3, r3, #1
 8000e78:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7c:	69ba      	ldr	r2, [r7, #24]
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	69ba      	ldr	r2, [r7, #24]
 8000e86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	f003 0303 	and.w	r3, r3, #3
 8000e90:	2b02      	cmp	r3, #2
 8000e92:	d123      	bne.n	8000edc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e94:	69fb      	ldr	r3, [r7, #28]
 8000e96:	08da      	lsrs	r2, r3, #3
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	3208      	adds	r2, #8
 8000e9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ea0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	f003 0307 	and.w	r3, r3, #7
 8000ea8:	009b      	lsls	r3, r3, #2
 8000eaa:	220f      	movs	r2, #15
 8000eac:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb0:	43db      	mvns	r3, r3
 8000eb2:	69ba      	ldr	r2, [r7, #24]
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	691a      	ldr	r2, [r3, #16]
 8000ebc:	69fb      	ldr	r3, [r7, #28]
 8000ebe:	f003 0307 	and.w	r3, r3, #7
 8000ec2:	009b      	lsls	r3, r3, #2
 8000ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec8:	69ba      	ldr	r2, [r7, #24]
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	08da      	lsrs	r2, r3, #3
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	3208      	adds	r2, #8
 8000ed6:	69b9      	ldr	r1, [r7, #24]
 8000ed8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	005b      	lsls	r3, r3, #1
 8000ee6:	2203      	movs	r2, #3
 8000ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eec:	43db      	mvns	r3, r3
 8000eee:	69ba      	ldr	r2, [r7, #24]
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	f003 0203 	and.w	r2, r3, #3
 8000efc:	69fb      	ldr	r3, [r7, #28]
 8000efe:	005b      	lsls	r3, r3, #1
 8000f00:	fa02 f303 	lsl.w	r3, r2, r3
 8000f04:	69ba      	ldr	r2, [r7, #24]
 8000f06:	4313      	orrs	r3, r2
 8000f08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	69ba      	ldr	r2, [r7, #24]
 8000f0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	f000 80ae 	beq.w	800107a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f1e:	2300      	movs	r3, #0
 8000f20:	60fb      	str	r3, [r7, #12]
 8000f22:	4b5d      	ldr	r3, [pc, #372]	@ (8001098 <HAL_GPIO_Init+0x300>)
 8000f24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f26:	4a5c      	ldr	r2, [pc, #368]	@ (8001098 <HAL_GPIO_Init+0x300>)
 8000f28:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f2e:	4b5a      	ldr	r3, [pc, #360]	@ (8001098 <HAL_GPIO_Init+0x300>)
 8000f30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f36:	60fb      	str	r3, [r7, #12]
 8000f38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f3a:	4a58      	ldr	r2, [pc, #352]	@ (800109c <HAL_GPIO_Init+0x304>)
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	089b      	lsrs	r3, r3, #2
 8000f40:	3302      	adds	r3, #2
 8000f42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f48:	69fb      	ldr	r3, [r7, #28]
 8000f4a:	f003 0303 	and.w	r3, r3, #3
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	220f      	movs	r2, #15
 8000f52:	fa02 f303 	lsl.w	r3, r2, r3
 8000f56:	43db      	mvns	r3, r3
 8000f58:	69ba      	ldr	r2, [r7, #24]
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4a4f      	ldr	r2, [pc, #316]	@ (80010a0 <HAL_GPIO_Init+0x308>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d025      	beq.n	8000fb2 <HAL_GPIO_Init+0x21a>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4a4e      	ldr	r2, [pc, #312]	@ (80010a4 <HAL_GPIO_Init+0x30c>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d01f      	beq.n	8000fae <HAL_GPIO_Init+0x216>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4a4d      	ldr	r2, [pc, #308]	@ (80010a8 <HAL_GPIO_Init+0x310>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d019      	beq.n	8000faa <HAL_GPIO_Init+0x212>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4a4c      	ldr	r2, [pc, #304]	@ (80010ac <HAL_GPIO_Init+0x314>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d013      	beq.n	8000fa6 <HAL_GPIO_Init+0x20e>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4a4b      	ldr	r2, [pc, #300]	@ (80010b0 <HAL_GPIO_Init+0x318>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d00d      	beq.n	8000fa2 <HAL_GPIO_Init+0x20a>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4a4a      	ldr	r2, [pc, #296]	@ (80010b4 <HAL_GPIO_Init+0x31c>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d007      	beq.n	8000f9e <HAL_GPIO_Init+0x206>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4a49      	ldr	r2, [pc, #292]	@ (80010b8 <HAL_GPIO_Init+0x320>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d101      	bne.n	8000f9a <HAL_GPIO_Init+0x202>
 8000f96:	2306      	movs	r3, #6
 8000f98:	e00c      	b.n	8000fb4 <HAL_GPIO_Init+0x21c>
 8000f9a:	2307      	movs	r3, #7
 8000f9c:	e00a      	b.n	8000fb4 <HAL_GPIO_Init+0x21c>
 8000f9e:	2305      	movs	r3, #5
 8000fa0:	e008      	b.n	8000fb4 <HAL_GPIO_Init+0x21c>
 8000fa2:	2304      	movs	r3, #4
 8000fa4:	e006      	b.n	8000fb4 <HAL_GPIO_Init+0x21c>
 8000fa6:	2303      	movs	r3, #3
 8000fa8:	e004      	b.n	8000fb4 <HAL_GPIO_Init+0x21c>
 8000faa:	2302      	movs	r3, #2
 8000fac:	e002      	b.n	8000fb4 <HAL_GPIO_Init+0x21c>
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e000      	b.n	8000fb4 <HAL_GPIO_Init+0x21c>
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	69fa      	ldr	r2, [r7, #28]
 8000fb6:	f002 0203 	and.w	r2, r2, #3
 8000fba:	0092      	lsls	r2, r2, #2
 8000fbc:	4093      	lsls	r3, r2
 8000fbe:	69ba      	ldr	r2, [r7, #24]
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fc4:	4935      	ldr	r1, [pc, #212]	@ (800109c <HAL_GPIO_Init+0x304>)
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	089b      	lsrs	r3, r3, #2
 8000fca:	3302      	adds	r3, #2
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fd2:	4b3a      	ldr	r3, [pc, #232]	@ (80010bc <HAL_GPIO_Init+0x324>)
 8000fd4:	689b      	ldr	r3, [r3, #8]
 8000fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	43db      	mvns	r3, r3
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	4013      	ands	r3, r2
 8000fe0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d003      	beq.n	8000ff6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ff6:	4a31      	ldr	r2, [pc, #196]	@ (80010bc <HAL_GPIO_Init+0x324>)
 8000ff8:	69bb      	ldr	r3, [r7, #24]
 8000ffa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ffc:	4b2f      	ldr	r3, [pc, #188]	@ (80010bc <HAL_GPIO_Init+0x324>)
 8000ffe:	68db      	ldr	r3, [r3, #12]
 8001000:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001002:	693b      	ldr	r3, [r7, #16]
 8001004:	43db      	mvns	r3, r3
 8001006:	69ba      	ldr	r2, [r7, #24]
 8001008:	4013      	ands	r3, r2
 800100a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001014:	2b00      	cmp	r3, #0
 8001016:	d003      	beq.n	8001020 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	693b      	ldr	r3, [r7, #16]
 800101c:	4313      	orrs	r3, r2
 800101e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001020:	4a26      	ldr	r2, [pc, #152]	@ (80010bc <HAL_GPIO_Init+0x324>)
 8001022:	69bb      	ldr	r3, [r7, #24]
 8001024:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001026:	4b25      	ldr	r3, [pc, #148]	@ (80010bc <HAL_GPIO_Init+0x324>)
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	43db      	mvns	r3, r3
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	4013      	ands	r3, r2
 8001034:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800103e:	2b00      	cmp	r3, #0
 8001040:	d003      	beq.n	800104a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001042:	69ba      	ldr	r2, [r7, #24]
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	4313      	orrs	r3, r2
 8001048:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800104a:	4a1c      	ldr	r2, [pc, #112]	@ (80010bc <HAL_GPIO_Init+0x324>)
 800104c:	69bb      	ldr	r3, [r7, #24]
 800104e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001050:	4b1a      	ldr	r3, [pc, #104]	@ (80010bc <HAL_GPIO_Init+0x324>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	43db      	mvns	r3, r3
 800105a:	69ba      	ldr	r2, [r7, #24]
 800105c:	4013      	ands	r3, r2
 800105e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001068:	2b00      	cmp	r3, #0
 800106a:	d003      	beq.n	8001074 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	693b      	ldr	r3, [r7, #16]
 8001070:	4313      	orrs	r3, r2
 8001072:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001074:	4a11      	ldr	r2, [pc, #68]	@ (80010bc <HAL_GPIO_Init+0x324>)
 8001076:	69bb      	ldr	r3, [r7, #24]
 8001078:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	3301      	adds	r3, #1
 800107e:	61fb      	str	r3, [r7, #28]
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	2b0f      	cmp	r3, #15
 8001084:	f67f ae96 	bls.w	8000db4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001088:	bf00      	nop
 800108a:	bf00      	nop
 800108c:	3724      	adds	r7, #36	@ 0x24
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	40023800 	.word	0x40023800
 800109c:	40013800 	.word	0x40013800
 80010a0:	40020000 	.word	0x40020000
 80010a4:	40020400 	.word	0x40020400
 80010a8:	40020800 	.word	0x40020800
 80010ac:	40020c00 	.word	0x40020c00
 80010b0:	40021000 	.word	0x40021000
 80010b4:	40021400 	.word	0x40021400
 80010b8:	40021800 	.word	0x40021800
 80010bc:	40013c00 	.word	0x40013c00

080010c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	460b      	mov	r3, r1
 80010ca:	807b      	strh	r3, [r7, #2]
 80010cc:	4613      	mov	r3, r2
 80010ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010d0:	787b      	ldrb	r3, [r7, #1]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d003      	beq.n	80010de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010d6:	887a      	ldrh	r2, [r7, #2]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010dc:	e003      	b.n	80010e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010de:	887b      	ldrh	r3, [r7, #2]
 80010e0:	041a      	lsls	r2, r3, #16
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	619a      	str	r2, [r3, #24]
}
 80010e6:	bf00      	nop
 80010e8:	370c      	adds	r7, #12
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
	...

080010f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d101      	bne.n	8001108 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001104:	2301      	movs	r3, #1
 8001106:	e0cc      	b.n	80012a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001108:	4b68      	ldr	r3, [pc, #416]	@ (80012ac <HAL_RCC_ClockConfig+0x1b8>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f003 030f 	and.w	r3, r3, #15
 8001110:	683a      	ldr	r2, [r7, #0]
 8001112:	429a      	cmp	r2, r3
 8001114:	d90c      	bls.n	8001130 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001116:	4b65      	ldr	r3, [pc, #404]	@ (80012ac <HAL_RCC_ClockConfig+0x1b8>)
 8001118:	683a      	ldr	r2, [r7, #0]
 800111a:	b2d2      	uxtb	r2, r2
 800111c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800111e:	4b63      	ldr	r3, [pc, #396]	@ (80012ac <HAL_RCC_ClockConfig+0x1b8>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f003 030f 	and.w	r3, r3, #15
 8001126:	683a      	ldr	r2, [r7, #0]
 8001128:	429a      	cmp	r2, r3
 800112a:	d001      	beq.n	8001130 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800112c:	2301      	movs	r3, #1
 800112e:	e0b8      	b.n	80012a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f003 0302 	and.w	r3, r3, #2
 8001138:	2b00      	cmp	r3, #0
 800113a:	d020      	beq.n	800117e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f003 0304 	and.w	r3, r3, #4
 8001144:	2b00      	cmp	r3, #0
 8001146:	d005      	beq.n	8001154 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001148:	4b59      	ldr	r3, [pc, #356]	@ (80012b0 <HAL_RCC_ClockConfig+0x1bc>)
 800114a:	689b      	ldr	r3, [r3, #8]
 800114c:	4a58      	ldr	r2, [pc, #352]	@ (80012b0 <HAL_RCC_ClockConfig+0x1bc>)
 800114e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001152:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f003 0308 	and.w	r3, r3, #8
 800115c:	2b00      	cmp	r3, #0
 800115e:	d005      	beq.n	800116c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001160:	4b53      	ldr	r3, [pc, #332]	@ (80012b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	4a52      	ldr	r2, [pc, #328]	@ (80012b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001166:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800116a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800116c:	4b50      	ldr	r3, [pc, #320]	@ (80012b0 <HAL_RCC_ClockConfig+0x1bc>)
 800116e:	689b      	ldr	r3, [r3, #8]
 8001170:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	689b      	ldr	r3, [r3, #8]
 8001178:	494d      	ldr	r1, [pc, #308]	@ (80012b0 <HAL_RCC_ClockConfig+0x1bc>)
 800117a:	4313      	orrs	r3, r2
 800117c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f003 0301 	and.w	r3, r3, #1
 8001186:	2b00      	cmp	r3, #0
 8001188:	d044      	beq.n	8001214 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	2b01      	cmp	r3, #1
 8001190:	d107      	bne.n	80011a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001192:	4b47      	ldr	r3, [pc, #284]	@ (80012b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800119a:	2b00      	cmp	r3, #0
 800119c:	d119      	bne.n	80011d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800119e:	2301      	movs	r3, #1
 80011a0:	e07f      	b.n	80012a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	2b02      	cmp	r3, #2
 80011a8:	d003      	beq.n	80011b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011ae:	2b03      	cmp	r3, #3
 80011b0:	d107      	bne.n	80011c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011b2:	4b3f      	ldr	r3, [pc, #252]	@ (80012b0 <HAL_RCC_ClockConfig+0x1bc>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d109      	bne.n	80011d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	e06f      	b.n	80012a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011c2:	4b3b      	ldr	r3, [pc, #236]	@ (80012b0 <HAL_RCC_ClockConfig+0x1bc>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f003 0302 	and.w	r3, r3, #2
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d101      	bne.n	80011d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
 80011d0:	e067      	b.n	80012a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011d2:	4b37      	ldr	r3, [pc, #220]	@ (80012b0 <HAL_RCC_ClockConfig+0x1bc>)
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	f023 0203 	bic.w	r2, r3, #3
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	4934      	ldr	r1, [pc, #208]	@ (80012b0 <HAL_RCC_ClockConfig+0x1bc>)
 80011e0:	4313      	orrs	r3, r2
 80011e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80011e4:	f7ff fcea 	bl	8000bbc <HAL_GetTick>
 80011e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011ea:	e00a      	b.n	8001202 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011ec:	f7ff fce6 	bl	8000bbc <HAL_GetTick>
 80011f0:	4602      	mov	r2, r0
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d901      	bls.n	8001202 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80011fe:	2303      	movs	r3, #3
 8001200:	e04f      	b.n	80012a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001202:	4b2b      	ldr	r3, [pc, #172]	@ (80012b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001204:	689b      	ldr	r3, [r3, #8]
 8001206:	f003 020c 	and.w	r2, r3, #12
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	009b      	lsls	r3, r3, #2
 8001210:	429a      	cmp	r2, r3
 8001212:	d1eb      	bne.n	80011ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001214:	4b25      	ldr	r3, [pc, #148]	@ (80012ac <HAL_RCC_ClockConfig+0x1b8>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f003 030f 	and.w	r3, r3, #15
 800121c:	683a      	ldr	r2, [r7, #0]
 800121e:	429a      	cmp	r2, r3
 8001220:	d20c      	bcs.n	800123c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001222:	4b22      	ldr	r3, [pc, #136]	@ (80012ac <HAL_RCC_ClockConfig+0x1b8>)
 8001224:	683a      	ldr	r2, [r7, #0]
 8001226:	b2d2      	uxtb	r2, r2
 8001228:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800122a:	4b20      	ldr	r3, [pc, #128]	@ (80012ac <HAL_RCC_ClockConfig+0x1b8>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f003 030f 	and.w	r3, r3, #15
 8001232:	683a      	ldr	r2, [r7, #0]
 8001234:	429a      	cmp	r2, r3
 8001236:	d001      	beq.n	800123c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001238:	2301      	movs	r3, #1
 800123a:	e032      	b.n	80012a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f003 0304 	and.w	r3, r3, #4
 8001244:	2b00      	cmp	r3, #0
 8001246:	d008      	beq.n	800125a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001248:	4b19      	ldr	r3, [pc, #100]	@ (80012b0 <HAL_RCC_ClockConfig+0x1bc>)
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	68db      	ldr	r3, [r3, #12]
 8001254:	4916      	ldr	r1, [pc, #88]	@ (80012b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001256:	4313      	orrs	r3, r2
 8001258:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f003 0308 	and.w	r3, r3, #8
 8001262:	2b00      	cmp	r3, #0
 8001264:	d009      	beq.n	800127a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001266:	4b12      	ldr	r3, [pc, #72]	@ (80012b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	691b      	ldr	r3, [r3, #16]
 8001272:	00db      	lsls	r3, r3, #3
 8001274:	490e      	ldr	r1, [pc, #56]	@ (80012b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001276:	4313      	orrs	r3, r2
 8001278:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800127a:	f000 f873 	bl	8001364 <HAL_RCC_GetSysClockFreq>
 800127e:	4602      	mov	r2, r0
 8001280:	4b0b      	ldr	r3, [pc, #44]	@ (80012b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	091b      	lsrs	r3, r3, #4
 8001286:	f003 030f 	and.w	r3, r3, #15
 800128a:	490a      	ldr	r1, [pc, #40]	@ (80012b4 <HAL_RCC_ClockConfig+0x1c0>)
 800128c:	5ccb      	ldrb	r3, [r1, r3]
 800128e:	fa22 f303 	lsr.w	r3, r2, r3
 8001292:	4a09      	ldr	r2, [pc, #36]	@ (80012b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001294:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001296:	4b09      	ldr	r3, [pc, #36]	@ (80012bc <HAL_RCC_ClockConfig+0x1c8>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4618      	mov	r0, r3
 800129c:	f7ff fb28 	bl	80008f0 <HAL_InitTick>

  return HAL_OK;
 80012a0:	2300      	movs	r3, #0
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3710      	adds	r7, #16
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	40023c00 	.word	0x40023c00
 80012b0:	40023800 	.word	0x40023800
 80012b4:	08006dc8 	.word	0x08006dc8
 80012b8:	20000000 	.word	0x20000000
 80012bc:	20000004 	.word	0x20000004

080012c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80012c4:	4b03      	ldr	r3, [pc, #12]	@ (80012d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80012c6:	681b      	ldr	r3, [r3, #0]
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	20000000 	.word	0x20000000

080012d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80012dc:	f7ff fff0 	bl	80012c0 <HAL_RCC_GetHCLKFreq>
 80012e0:	4602      	mov	r2, r0
 80012e2:	4b05      	ldr	r3, [pc, #20]	@ (80012f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	0a9b      	lsrs	r3, r3, #10
 80012e8:	f003 0307 	and.w	r3, r3, #7
 80012ec:	4903      	ldr	r1, [pc, #12]	@ (80012fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80012ee:	5ccb      	ldrb	r3, [r1, r3]
 80012f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	40023800 	.word	0x40023800
 80012fc:	08006dd8 	.word	0x08006dd8

08001300 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	220f      	movs	r2, #15
 800130e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001310:	4b12      	ldr	r3, [pc, #72]	@ (800135c <HAL_RCC_GetClockConfig+0x5c>)
 8001312:	689b      	ldr	r3, [r3, #8]
 8001314:	f003 0203 	and.w	r2, r3, #3
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800131c:	4b0f      	ldr	r3, [pc, #60]	@ (800135c <HAL_RCC_GetClockConfig+0x5c>)
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001328:	4b0c      	ldr	r3, [pc, #48]	@ (800135c <HAL_RCC_GetClockConfig+0x5c>)
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001334:	4b09      	ldr	r3, [pc, #36]	@ (800135c <HAL_RCC_GetClockConfig+0x5c>)
 8001336:	689b      	ldr	r3, [r3, #8]
 8001338:	08db      	lsrs	r3, r3, #3
 800133a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001342:	4b07      	ldr	r3, [pc, #28]	@ (8001360 <HAL_RCC_GetClockConfig+0x60>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f003 020f 	and.w	r2, r3, #15
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	601a      	str	r2, [r3, #0]
}
 800134e:	bf00      	nop
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	40023800 	.word	0x40023800
 8001360:	40023c00 	.word	0x40023c00

08001364 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001364:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001368:	b0ae      	sub	sp, #184	@ 0xb8
 800136a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800136c:	2300      	movs	r3, #0
 800136e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001372:	2300      	movs	r3, #0
 8001374:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001378:	2300      	movs	r3, #0
 800137a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800137e:	2300      	movs	r3, #0
 8001380:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001384:	2300      	movs	r3, #0
 8001386:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800138a:	4bcb      	ldr	r3, [pc, #812]	@ (80016b8 <HAL_RCC_GetSysClockFreq+0x354>)
 800138c:	689b      	ldr	r3, [r3, #8]
 800138e:	f003 030c 	and.w	r3, r3, #12
 8001392:	2b0c      	cmp	r3, #12
 8001394:	f200 8206 	bhi.w	80017a4 <HAL_RCC_GetSysClockFreq+0x440>
 8001398:	a201      	add	r2, pc, #4	@ (adr r2, 80013a0 <HAL_RCC_GetSysClockFreq+0x3c>)
 800139a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800139e:	bf00      	nop
 80013a0:	080013d5 	.word	0x080013d5
 80013a4:	080017a5 	.word	0x080017a5
 80013a8:	080017a5 	.word	0x080017a5
 80013ac:	080017a5 	.word	0x080017a5
 80013b0:	080013dd 	.word	0x080013dd
 80013b4:	080017a5 	.word	0x080017a5
 80013b8:	080017a5 	.word	0x080017a5
 80013bc:	080017a5 	.word	0x080017a5
 80013c0:	080013e5 	.word	0x080013e5
 80013c4:	080017a5 	.word	0x080017a5
 80013c8:	080017a5 	.word	0x080017a5
 80013cc:	080017a5 	.word	0x080017a5
 80013d0:	080015d5 	.word	0x080015d5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80013d4:	4bb9      	ldr	r3, [pc, #740]	@ (80016bc <HAL_RCC_GetSysClockFreq+0x358>)
 80013d6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 80013da:	e1e7      	b.n	80017ac <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80013dc:	4bb8      	ldr	r3, [pc, #736]	@ (80016c0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80013de:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80013e2:	e1e3      	b.n	80017ac <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80013e4:	4bb4      	ldr	r3, [pc, #720]	@ (80016b8 <HAL_RCC_GetSysClockFreq+0x354>)
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80013ec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80013f0:	4bb1      	ldr	r3, [pc, #708]	@ (80016b8 <HAL_RCC_GetSysClockFreq+0x354>)
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d071      	beq.n	80014e0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013fc:	4bae      	ldr	r3, [pc, #696]	@ (80016b8 <HAL_RCC_GetSysClockFreq+0x354>)
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	099b      	lsrs	r3, r3, #6
 8001402:	2200      	movs	r2, #0
 8001404:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001408:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800140c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001410:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001414:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001418:	2300      	movs	r3, #0
 800141a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800141e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001422:	4622      	mov	r2, r4
 8001424:	462b      	mov	r3, r5
 8001426:	f04f 0000 	mov.w	r0, #0
 800142a:	f04f 0100 	mov.w	r1, #0
 800142e:	0159      	lsls	r1, r3, #5
 8001430:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001434:	0150      	lsls	r0, r2, #5
 8001436:	4602      	mov	r2, r0
 8001438:	460b      	mov	r3, r1
 800143a:	4621      	mov	r1, r4
 800143c:	1a51      	subs	r1, r2, r1
 800143e:	6439      	str	r1, [r7, #64]	@ 0x40
 8001440:	4629      	mov	r1, r5
 8001442:	eb63 0301 	sbc.w	r3, r3, r1
 8001446:	647b      	str	r3, [r7, #68]	@ 0x44
 8001448:	f04f 0200 	mov.w	r2, #0
 800144c:	f04f 0300 	mov.w	r3, #0
 8001450:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001454:	4649      	mov	r1, r9
 8001456:	018b      	lsls	r3, r1, #6
 8001458:	4641      	mov	r1, r8
 800145a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800145e:	4641      	mov	r1, r8
 8001460:	018a      	lsls	r2, r1, #6
 8001462:	4641      	mov	r1, r8
 8001464:	1a51      	subs	r1, r2, r1
 8001466:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001468:	4649      	mov	r1, r9
 800146a:	eb63 0301 	sbc.w	r3, r3, r1
 800146e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001470:	f04f 0200 	mov.w	r2, #0
 8001474:	f04f 0300 	mov.w	r3, #0
 8001478:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800147c:	4649      	mov	r1, r9
 800147e:	00cb      	lsls	r3, r1, #3
 8001480:	4641      	mov	r1, r8
 8001482:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001486:	4641      	mov	r1, r8
 8001488:	00ca      	lsls	r2, r1, #3
 800148a:	4610      	mov	r0, r2
 800148c:	4619      	mov	r1, r3
 800148e:	4603      	mov	r3, r0
 8001490:	4622      	mov	r2, r4
 8001492:	189b      	adds	r3, r3, r2
 8001494:	633b      	str	r3, [r7, #48]	@ 0x30
 8001496:	462b      	mov	r3, r5
 8001498:	460a      	mov	r2, r1
 800149a:	eb42 0303 	adc.w	r3, r2, r3
 800149e:	637b      	str	r3, [r7, #52]	@ 0x34
 80014a0:	f04f 0200 	mov.w	r2, #0
 80014a4:	f04f 0300 	mov.w	r3, #0
 80014a8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80014ac:	4629      	mov	r1, r5
 80014ae:	024b      	lsls	r3, r1, #9
 80014b0:	4621      	mov	r1, r4
 80014b2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80014b6:	4621      	mov	r1, r4
 80014b8:	024a      	lsls	r2, r1, #9
 80014ba:	4610      	mov	r0, r2
 80014bc:	4619      	mov	r1, r3
 80014be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80014c2:	2200      	movs	r2, #0
 80014c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80014c8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80014cc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80014d0:	f7fe fee8 	bl	80002a4 <__aeabi_uldivmod>
 80014d4:	4602      	mov	r2, r0
 80014d6:	460b      	mov	r3, r1
 80014d8:	4613      	mov	r3, r2
 80014da:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80014de:	e067      	b.n	80015b0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014e0:	4b75      	ldr	r3, [pc, #468]	@ (80016b8 <HAL_RCC_GetSysClockFreq+0x354>)
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	099b      	lsrs	r3, r3, #6
 80014e6:	2200      	movs	r2, #0
 80014e8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80014ec:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80014f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80014f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80014f8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80014fa:	2300      	movs	r3, #0
 80014fc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80014fe:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001502:	4622      	mov	r2, r4
 8001504:	462b      	mov	r3, r5
 8001506:	f04f 0000 	mov.w	r0, #0
 800150a:	f04f 0100 	mov.w	r1, #0
 800150e:	0159      	lsls	r1, r3, #5
 8001510:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001514:	0150      	lsls	r0, r2, #5
 8001516:	4602      	mov	r2, r0
 8001518:	460b      	mov	r3, r1
 800151a:	4621      	mov	r1, r4
 800151c:	1a51      	subs	r1, r2, r1
 800151e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001520:	4629      	mov	r1, r5
 8001522:	eb63 0301 	sbc.w	r3, r3, r1
 8001526:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001528:	f04f 0200 	mov.w	r2, #0
 800152c:	f04f 0300 	mov.w	r3, #0
 8001530:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001534:	4649      	mov	r1, r9
 8001536:	018b      	lsls	r3, r1, #6
 8001538:	4641      	mov	r1, r8
 800153a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800153e:	4641      	mov	r1, r8
 8001540:	018a      	lsls	r2, r1, #6
 8001542:	4641      	mov	r1, r8
 8001544:	ebb2 0a01 	subs.w	sl, r2, r1
 8001548:	4649      	mov	r1, r9
 800154a:	eb63 0b01 	sbc.w	fp, r3, r1
 800154e:	f04f 0200 	mov.w	r2, #0
 8001552:	f04f 0300 	mov.w	r3, #0
 8001556:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800155a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800155e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001562:	4692      	mov	sl, r2
 8001564:	469b      	mov	fp, r3
 8001566:	4623      	mov	r3, r4
 8001568:	eb1a 0303 	adds.w	r3, sl, r3
 800156c:	623b      	str	r3, [r7, #32]
 800156e:	462b      	mov	r3, r5
 8001570:	eb4b 0303 	adc.w	r3, fp, r3
 8001574:	627b      	str	r3, [r7, #36]	@ 0x24
 8001576:	f04f 0200 	mov.w	r2, #0
 800157a:	f04f 0300 	mov.w	r3, #0
 800157e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001582:	4629      	mov	r1, r5
 8001584:	028b      	lsls	r3, r1, #10
 8001586:	4621      	mov	r1, r4
 8001588:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800158c:	4621      	mov	r1, r4
 800158e:	028a      	lsls	r2, r1, #10
 8001590:	4610      	mov	r0, r2
 8001592:	4619      	mov	r1, r3
 8001594:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001598:	2200      	movs	r2, #0
 800159a:	673b      	str	r3, [r7, #112]	@ 0x70
 800159c:	677a      	str	r2, [r7, #116]	@ 0x74
 800159e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80015a2:	f7fe fe7f 	bl	80002a4 <__aeabi_uldivmod>
 80015a6:	4602      	mov	r2, r0
 80015a8:	460b      	mov	r3, r1
 80015aa:	4613      	mov	r3, r2
 80015ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80015b0:	4b41      	ldr	r3, [pc, #260]	@ (80016b8 <HAL_RCC_GetSysClockFreq+0x354>)
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	0c1b      	lsrs	r3, r3, #16
 80015b6:	f003 0303 	and.w	r3, r3, #3
 80015ba:	3301      	adds	r3, #1
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 80015c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80015c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80015ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80015d2:	e0eb      	b.n	80017ac <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015d4:	4b38      	ldr	r3, [pc, #224]	@ (80016b8 <HAL_RCC_GetSysClockFreq+0x354>)
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80015dc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015e0:	4b35      	ldr	r3, [pc, #212]	@ (80016b8 <HAL_RCC_GetSysClockFreq+0x354>)
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d06b      	beq.n	80016c4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015ec:	4b32      	ldr	r3, [pc, #200]	@ (80016b8 <HAL_RCC_GetSysClockFreq+0x354>)
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	099b      	lsrs	r3, r3, #6
 80015f2:	2200      	movs	r2, #0
 80015f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80015f6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80015f8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80015fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80015fe:	663b      	str	r3, [r7, #96]	@ 0x60
 8001600:	2300      	movs	r3, #0
 8001602:	667b      	str	r3, [r7, #100]	@ 0x64
 8001604:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001608:	4622      	mov	r2, r4
 800160a:	462b      	mov	r3, r5
 800160c:	f04f 0000 	mov.w	r0, #0
 8001610:	f04f 0100 	mov.w	r1, #0
 8001614:	0159      	lsls	r1, r3, #5
 8001616:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800161a:	0150      	lsls	r0, r2, #5
 800161c:	4602      	mov	r2, r0
 800161e:	460b      	mov	r3, r1
 8001620:	4621      	mov	r1, r4
 8001622:	1a51      	subs	r1, r2, r1
 8001624:	61b9      	str	r1, [r7, #24]
 8001626:	4629      	mov	r1, r5
 8001628:	eb63 0301 	sbc.w	r3, r3, r1
 800162c:	61fb      	str	r3, [r7, #28]
 800162e:	f04f 0200 	mov.w	r2, #0
 8001632:	f04f 0300 	mov.w	r3, #0
 8001636:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800163a:	4659      	mov	r1, fp
 800163c:	018b      	lsls	r3, r1, #6
 800163e:	4651      	mov	r1, sl
 8001640:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001644:	4651      	mov	r1, sl
 8001646:	018a      	lsls	r2, r1, #6
 8001648:	4651      	mov	r1, sl
 800164a:	ebb2 0801 	subs.w	r8, r2, r1
 800164e:	4659      	mov	r1, fp
 8001650:	eb63 0901 	sbc.w	r9, r3, r1
 8001654:	f04f 0200 	mov.w	r2, #0
 8001658:	f04f 0300 	mov.w	r3, #0
 800165c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001660:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001664:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001668:	4690      	mov	r8, r2
 800166a:	4699      	mov	r9, r3
 800166c:	4623      	mov	r3, r4
 800166e:	eb18 0303 	adds.w	r3, r8, r3
 8001672:	613b      	str	r3, [r7, #16]
 8001674:	462b      	mov	r3, r5
 8001676:	eb49 0303 	adc.w	r3, r9, r3
 800167a:	617b      	str	r3, [r7, #20]
 800167c:	f04f 0200 	mov.w	r2, #0
 8001680:	f04f 0300 	mov.w	r3, #0
 8001684:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001688:	4629      	mov	r1, r5
 800168a:	024b      	lsls	r3, r1, #9
 800168c:	4621      	mov	r1, r4
 800168e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001692:	4621      	mov	r1, r4
 8001694:	024a      	lsls	r2, r1, #9
 8001696:	4610      	mov	r0, r2
 8001698:	4619      	mov	r1, r3
 800169a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800169e:	2200      	movs	r2, #0
 80016a0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80016a2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80016a4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80016a8:	f7fe fdfc 	bl	80002a4 <__aeabi_uldivmod>
 80016ac:	4602      	mov	r2, r0
 80016ae:	460b      	mov	r3, r1
 80016b0:	4613      	mov	r3, r2
 80016b2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80016b6:	e065      	b.n	8001784 <HAL_RCC_GetSysClockFreq+0x420>
 80016b8:	40023800 	.word	0x40023800
 80016bc:	00f42400 	.word	0x00f42400
 80016c0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016c4:	4b3d      	ldr	r3, [pc, #244]	@ (80017bc <HAL_RCC_GetSysClockFreq+0x458>)
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	099b      	lsrs	r3, r3, #6
 80016ca:	2200      	movs	r2, #0
 80016cc:	4618      	mov	r0, r3
 80016ce:	4611      	mov	r1, r2
 80016d0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80016d4:	653b      	str	r3, [r7, #80]	@ 0x50
 80016d6:	2300      	movs	r3, #0
 80016d8:	657b      	str	r3, [r7, #84]	@ 0x54
 80016da:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80016de:	4642      	mov	r2, r8
 80016e0:	464b      	mov	r3, r9
 80016e2:	f04f 0000 	mov.w	r0, #0
 80016e6:	f04f 0100 	mov.w	r1, #0
 80016ea:	0159      	lsls	r1, r3, #5
 80016ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016f0:	0150      	lsls	r0, r2, #5
 80016f2:	4602      	mov	r2, r0
 80016f4:	460b      	mov	r3, r1
 80016f6:	4641      	mov	r1, r8
 80016f8:	1a51      	subs	r1, r2, r1
 80016fa:	60b9      	str	r1, [r7, #8]
 80016fc:	4649      	mov	r1, r9
 80016fe:	eb63 0301 	sbc.w	r3, r3, r1
 8001702:	60fb      	str	r3, [r7, #12]
 8001704:	f04f 0200 	mov.w	r2, #0
 8001708:	f04f 0300 	mov.w	r3, #0
 800170c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001710:	4659      	mov	r1, fp
 8001712:	018b      	lsls	r3, r1, #6
 8001714:	4651      	mov	r1, sl
 8001716:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800171a:	4651      	mov	r1, sl
 800171c:	018a      	lsls	r2, r1, #6
 800171e:	4651      	mov	r1, sl
 8001720:	1a54      	subs	r4, r2, r1
 8001722:	4659      	mov	r1, fp
 8001724:	eb63 0501 	sbc.w	r5, r3, r1
 8001728:	f04f 0200 	mov.w	r2, #0
 800172c:	f04f 0300 	mov.w	r3, #0
 8001730:	00eb      	lsls	r3, r5, #3
 8001732:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001736:	00e2      	lsls	r2, r4, #3
 8001738:	4614      	mov	r4, r2
 800173a:	461d      	mov	r5, r3
 800173c:	4643      	mov	r3, r8
 800173e:	18e3      	adds	r3, r4, r3
 8001740:	603b      	str	r3, [r7, #0]
 8001742:	464b      	mov	r3, r9
 8001744:	eb45 0303 	adc.w	r3, r5, r3
 8001748:	607b      	str	r3, [r7, #4]
 800174a:	f04f 0200 	mov.w	r2, #0
 800174e:	f04f 0300 	mov.w	r3, #0
 8001752:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001756:	4629      	mov	r1, r5
 8001758:	028b      	lsls	r3, r1, #10
 800175a:	4621      	mov	r1, r4
 800175c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001760:	4621      	mov	r1, r4
 8001762:	028a      	lsls	r2, r1, #10
 8001764:	4610      	mov	r0, r2
 8001766:	4619      	mov	r1, r3
 8001768:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800176c:	2200      	movs	r2, #0
 800176e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001770:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001772:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001776:	f7fe fd95 	bl	80002a4 <__aeabi_uldivmod>
 800177a:	4602      	mov	r2, r0
 800177c:	460b      	mov	r3, r1
 800177e:	4613      	mov	r3, r2
 8001780:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001784:	4b0d      	ldr	r3, [pc, #52]	@ (80017bc <HAL_RCC_GetSysClockFreq+0x458>)
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	0f1b      	lsrs	r3, r3, #28
 800178a:	f003 0307 	and.w	r3, r3, #7
 800178e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8001792:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001796:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800179a:	fbb2 f3f3 	udiv	r3, r2, r3
 800179e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80017a2:	e003      	b.n	80017ac <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80017a4:	4b06      	ldr	r3, [pc, #24]	@ (80017c0 <HAL_RCC_GetSysClockFreq+0x45c>)
 80017a6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80017aa:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017ac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	37b8      	adds	r7, #184	@ 0xb8
 80017b4:	46bd      	mov	sp, r7
 80017b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017ba:	bf00      	nop
 80017bc:	40023800 	.word	0x40023800
 80017c0:	00f42400 	.word	0x00f42400

080017c4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b086      	sub	sp, #24
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d101      	bne.n	80017d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e28d      	b.n	8001cf2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 0301 	and.w	r3, r3, #1
 80017de:	2b00      	cmp	r3, #0
 80017e0:	f000 8083 	beq.w	80018ea <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80017e4:	4b94      	ldr	r3, [pc, #592]	@ (8001a38 <HAL_RCC_OscConfig+0x274>)
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	f003 030c 	and.w	r3, r3, #12
 80017ec:	2b04      	cmp	r3, #4
 80017ee:	d019      	beq.n	8001824 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80017f0:	4b91      	ldr	r3, [pc, #580]	@ (8001a38 <HAL_RCC_OscConfig+0x274>)
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80017f8:	2b08      	cmp	r3, #8
 80017fa:	d106      	bne.n	800180a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80017fc:	4b8e      	ldr	r3, [pc, #568]	@ (8001a38 <HAL_RCC_OscConfig+0x274>)
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001804:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001808:	d00c      	beq.n	8001824 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800180a:	4b8b      	ldr	r3, [pc, #556]	@ (8001a38 <HAL_RCC_OscConfig+0x274>)
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001812:	2b0c      	cmp	r3, #12
 8001814:	d112      	bne.n	800183c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001816:	4b88      	ldr	r3, [pc, #544]	@ (8001a38 <HAL_RCC_OscConfig+0x274>)
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800181e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001822:	d10b      	bne.n	800183c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001824:	4b84      	ldr	r3, [pc, #528]	@ (8001a38 <HAL_RCC_OscConfig+0x274>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800182c:	2b00      	cmp	r3, #0
 800182e:	d05b      	beq.n	80018e8 <HAL_RCC_OscConfig+0x124>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d157      	bne.n	80018e8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	e25a      	b.n	8001cf2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001844:	d106      	bne.n	8001854 <HAL_RCC_OscConfig+0x90>
 8001846:	4b7c      	ldr	r3, [pc, #496]	@ (8001a38 <HAL_RCC_OscConfig+0x274>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a7b      	ldr	r2, [pc, #492]	@ (8001a38 <HAL_RCC_OscConfig+0x274>)
 800184c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001850:	6013      	str	r3, [r2, #0]
 8001852:	e01d      	b.n	8001890 <HAL_RCC_OscConfig+0xcc>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800185c:	d10c      	bne.n	8001878 <HAL_RCC_OscConfig+0xb4>
 800185e:	4b76      	ldr	r3, [pc, #472]	@ (8001a38 <HAL_RCC_OscConfig+0x274>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a75      	ldr	r2, [pc, #468]	@ (8001a38 <HAL_RCC_OscConfig+0x274>)
 8001864:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001868:	6013      	str	r3, [r2, #0]
 800186a:	4b73      	ldr	r3, [pc, #460]	@ (8001a38 <HAL_RCC_OscConfig+0x274>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a72      	ldr	r2, [pc, #456]	@ (8001a38 <HAL_RCC_OscConfig+0x274>)
 8001870:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001874:	6013      	str	r3, [r2, #0]
 8001876:	e00b      	b.n	8001890 <HAL_RCC_OscConfig+0xcc>
 8001878:	4b6f      	ldr	r3, [pc, #444]	@ (8001a38 <HAL_RCC_OscConfig+0x274>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a6e      	ldr	r2, [pc, #440]	@ (8001a38 <HAL_RCC_OscConfig+0x274>)
 800187e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001882:	6013      	str	r3, [r2, #0]
 8001884:	4b6c      	ldr	r3, [pc, #432]	@ (8001a38 <HAL_RCC_OscConfig+0x274>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a6b      	ldr	r2, [pc, #428]	@ (8001a38 <HAL_RCC_OscConfig+0x274>)
 800188a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800188e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d013      	beq.n	80018c0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001898:	f7ff f990 	bl	8000bbc <HAL_GetTick>
 800189c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800189e:	e008      	b.n	80018b2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018a0:	f7ff f98c 	bl	8000bbc <HAL_GetTick>
 80018a4:	4602      	mov	r2, r0
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	2b64      	cmp	r3, #100	@ 0x64
 80018ac:	d901      	bls.n	80018b2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80018ae:	2303      	movs	r3, #3
 80018b0:	e21f      	b.n	8001cf2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018b2:	4b61      	ldr	r3, [pc, #388]	@ (8001a38 <HAL_RCC_OscConfig+0x274>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d0f0      	beq.n	80018a0 <HAL_RCC_OscConfig+0xdc>
 80018be:	e014      	b.n	80018ea <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018c0:	f7ff f97c 	bl	8000bbc <HAL_GetTick>
 80018c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018c6:	e008      	b.n	80018da <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018c8:	f7ff f978 	bl	8000bbc <HAL_GetTick>
 80018cc:	4602      	mov	r2, r0
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	2b64      	cmp	r3, #100	@ 0x64
 80018d4:	d901      	bls.n	80018da <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80018d6:	2303      	movs	r3, #3
 80018d8:	e20b      	b.n	8001cf2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018da:	4b57      	ldr	r3, [pc, #348]	@ (8001a38 <HAL_RCC_OscConfig+0x274>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d1f0      	bne.n	80018c8 <HAL_RCC_OscConfig+0x104>
 80018e6:	e000      	b.n	80018ea <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 0302 	and.w	r3, r3, #2
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d06f      	beq.n	80019d6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80018f6:	4b50      	ldr	r3, [pc, #320]	@ (8001a38 <HAL_RCC_OscConfig+0x274>)
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	f003 030c 	and.w	r3, r3, #12
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d017      	beq.n	8001932 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001902:	4b4d      	ldr	r3, [pc, #308]	@ (8001a38 <HAL_RCC_OscConfig+0x274>)
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800190a:	2b08      	cmp	r3, #8
 800190c:	d105      	bne.n	800191a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800190e:	4b4a      	ldr	r3, [pc, #296]	@ (8001a38 <HAL_RCC_OscConfig+0x274>)
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d00b      	beq.n	8001932 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800191a:	4b47      	ldr	r3, [pc, #284]	@ (8001a38 <HAL_RCC_OscConfig+0x274>)
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001922:	2b0c      	cmp	r3, #12
 8001924:	d11c      	bne.n	8001960 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001926:	4b44      	ldr	r3, [pc, #272]	@ (8001a38 <HAL_RCC_OscConfig+0x274>)
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d116      	bne.n	8001960 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001932:	4b41      	ldr	r3, [pc, #260]	@ (8001a38 <HAL_RCC_OscConfig+0x274>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 0302 	and.w	r3, r3, #2
 800193a:	2b00      	cmp	r3, #0
 800193c:	d005      	beq.n	800194a <HAL_RCC_OscConfig+0x186>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	68db      	ldr	r3, [r3, #12]
 8001942:	2b01      	cmp	r3, #1
 8001944:	d001      	beq.n	800194a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e1d3      	b.n	8001cf2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800194a:	4b3b      	ldr	r3, [pc, #236]	@ (8001a38 <HAL_RCC_OscConfig+0x274>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	691b      	ldr	r3, [r3, #16]
 8001956:	00db      	lsls	r3, r3, #3
 8001958:	4937      	ldr	r1, [pc, #220]	@ (8001a38 <HAL_RCC_OscConfig+0x274>)
 800195a:	4313      	orrs	r3, r2
 800195c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800195e:	e03a      	b.n	80019d6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d020      	beq.n	80019aa <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001968:	4b34      	ldr	r3, [pc, #208]	@ (8001a3c <HAL_RCC_OscConfig+0x278>)
 800196a:	2201      	movs	r2, #1
 800196c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800196e:	f7ff f925 	bl	8000bbc <HAL_GetTick>
 8001972:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001974:	e008      	b.n	8001988 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001976:	f7ff f921 	bl	8000bbc <HAL_GetTick>
 800197a:	4602      	mov	r2, r0
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	1ad3      	subs	r3, r2, r3
 8001980:	2b02      	cmp	r3, #2
 8001982:	d901      	bls.n	8001988 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001984:	2303      	movs	r3, #3
 8001986:	e1b4      	b.n	8001cf2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001988:	4b2b      	ldr	r3, [pc, #172]	@ (8001a38 <HAL_RCC_OscConfig+0x274>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 0302 	and.w	r3, r3, #2
 8001990:	2b00      	cmp	r3, #0
 8001992:	d0f0      	beq.n	8001976 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001994:	4b28      	ldr	r3, [pc, #160]	@ (8001a38 <HAL_RCC_OscConfig+0x274>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	691b      	ldr	r3, [r3, #16]
 80019a0:	00db      	lsls	r3, r3, #3
 80019a2:	4925      	ldr	r1, [pc, #148]	@ (8001a38 <HAL_RCC_OscConfig+0x274>)
 80019a4:	4313      	orrs	r3, r2
 80019a6:	600b      	str	r3, [r1, #0]
 80019a8:	e015      	b.n	80019d6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019aa:	4b24      	ldr	r3, [pc, #144]	@ (8001a3c <HAL_RCC_OscConfig+0x278>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019b0:	f7ff f904 	bl	8000bbc <HAL_GetTick>
 80019b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019b6:	e008      	b.n	80019ca <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019b8:	f7ff f900 	bl	8000bbc <HAL_GetTick>
 80019bc:	4602      	mov	r2, r0
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	d901      	bls.n	80019ca <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80019c6:	2303      	movs	r3, #3
 80019c8:	e193      	b.n	8001cf2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019ca:	4b1b      	ldr	r3, [pc, #108]	@ (8001a38 <HAL_RCC_OscConfig+0x274>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 0302 	and.w	r3, r3, #2
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d1f0      	bne.n	80019b8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0308 	and.w	r3, r3, #8
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d036      	beq.n	8001a50 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	695b      	ldr	r3, [r3, #20]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d016      	beq.n	8001a18 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019ea:	4b15      	ldr	r3, [pc, #84]	@ (8001a40 <HAL_RCC_OscConfig+0x27c>)
 80019ec:	2201      	movs	r2, #1
 80019ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019f0:	f7ff f8e4 	bl	8000bbc <HAL_GetTick>
 80019f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019f6:	e008      	b.n	8001a0a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019f8:	f7ff f8e0 	bl	8000bbc <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d901      	bls.n	8001a0a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001a06:	2303      	movs	r3, #3
 8001a08:	e173      	b.n	8001cf2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a0a:	4b0b      	ldr	r3, [pc, #44]	@ (8001a38 <HAL_RCC_OscConfig+0x274>)
 8001a0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a0e:	f003 0302 	and.w	r3, r3, #2
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d0f0      	beq.n	80019f8 <HAL_RCC_OscConfig+0x234>
 8001a16:	e01b      	b.n	8001a50 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a18:	4b09      	ldr	r3, [pc, #36]	@ (8001a40 <HAL_RCC_OscConfig+0x27c>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a1e:	f7ff f8cd 	bl	8000bbc <HAL_GetTick>
 8001a22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a24:	e00e      	b.n	8001a44 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a26:	f7ff f8c9 	bl	8000bbc <HAL_GetTick>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	2b02      	cmp	r3, #2
 8001a32:	d907      	bls.n	8001a44 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001a34:	2303      	movs	r3, #3
 8001a36:	e15c      	b.n	8001cf2 <HAL_RCC_OscConfig+0x52e>
 8001a38:	40023800 	.word	0x40023800
 8001a3c:	42470000 	.word	0x42470000
 8001a40:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a44:	4b8a      	ldr	r3, [pc, #552]	@ (8001c70 <HAL_RCC_OscConfig+0x4ac>)
 8001a46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a48:	f003 0302 	and.w	r3, r3, #2
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d1ea      	bne.n	8001a26 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0304 	and.w	r3, r3, #4
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	f000 8097 	beq.w	8001b8c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a62:	4b83      	ldr	r3, [pc, #524]	@ (8001c70 <HAL_RCC_OscConfig+0x4ac>)
 8001a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d10f      	bne.n	8001a8e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a6e:	2300      	movs	r3, #0
 8001a70:	60bb      	str	r3, [r7, #8]
 8001a72:	4b7f      	ldr	r3, [pc, #508]	@ (8001c70 <HAL_RCC_OscConfig+0x4ac>)
 8001a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a76:	4a7e      	ldr	r2, [pc, #504]	@ (8001c70 <HAL_RCC_OscConfig+0x4ac>)
 8001a78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a7e:	4b7c      	ldr	r3, [pc, #496]	@ (8001c70 <HAL_RCC_OscConfig+0x4ac>)
 8001a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a86:	60bb      	str	r3, [r7, #8]
 8001a88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a8e:	4b79      	ldr	r3, [pc, #484]	@ (8001c74 <HAL_RCC_OscConfig+0x4b0>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d118      	bne.n	8001acc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a9a:	4b76      	ldr	r3, [pc, #472]	@ (8001c74 <HAL_RCC_OscConfig+0x4b0>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a75      	ldr	r2, [pc, #468]	@ (8001c74 <HAL_RCC_OscConfig+0x4b0>)
 8001aa0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001aa4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001aa6:	f7ff f889 	bl	8000bbc <HAL_GetTick>
 8001aaa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aac:	e008      	b.n	8001ac0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001aae:	f7ff f885 	bl	8000bbc <HAL_GetTick>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	d901      	bls.n	8001ac0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001abc:	2303      	movs	r3, #3
 8001abe:	e118      	b.n	8001cf2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ac0:	4b6c      	ldr	r3, [pc, #432]	@ (8001c74 <HAL_RCC_OscConfig+0x4b0>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d0f0      	beq.n	8001aae <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d106      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x31e>
 8001ad4:	4b66      	ldr	r3, [pc, #408]	@ (8001c70 <HAL_RCC_OscConfig+0x4ac>)
 8001ad6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ad8:	4a65      	ldr	r2, [pc, #404]	@ (8001c70 <HAL_RCC_OscConfig+0x4ac>)
 8001ada:	f043 0301 	orr.w	r3, r3, #1
 8001ade:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ae0:	e01c      	b.n	8001b1c <HAL_RCC_OscConfig+0x358>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	2b05      	cmp	r3, #5
 8001ae8:	d10c      	bne.n	8001b04 <HAL_RCC_OscConfig+0x340>
 8001aea:	4b61      	ldr	r3, [pc, #388]	@ (8001c70 <HAL_RCC_OscConfig+0x4ac>)
 8001aec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001aee:	4a60      	ldr	r2, [pc, #384]	@ (8001c70 <HAL_RCC_OscConfig+0x4ac>)
 8001af0:	f043 0304 	orr.w	r3, r3, #4
 8001af4:	6713      	str	r3, [r2, #112]	@ 0x70
 8001af6:	4b5e      	ldr	r3, [pc, #376]	@ (8001c70 <HAL_RCC_OscConfig+0x4ac>)
 8001af8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001afa:	4a5d      	ldr	r2, [pc, #372]	@ (8001c70 <HAL_RCC_OscConfig+0x4ac>)
 8001afc:	f043 0301 	orr.w	r3, r3, #1
 8001b00:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b02:	e00b      	b.n	8001b1c <HAL_RCC_OscConfig+0x358>
 8001b04:	4b5a      	ldr	r3, [pc, #360]	@ (8001c70 <HAL_RCC_OscConfig+0x4ac>)
 8001b06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b08:	4a59      	ldr	r2, [pc, #356]	@ (8001c70 <HAL_RCC_OscConfig+0x4ac>)
 8001b0a:	f023 0301 	bic.w	r3, r3, #1
 8001b0e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b10:	4b57      	ldr	r3, [pc, #348]	@ (8001c70 <HAL_RCC_OscConfig+0x4ac>)
 8001b12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b14:	4a56      	ldr	r2, [pc, #344]	@ (8001c70 <HAL_RCC_OscConfig+0x4ac>)
 8001b16:	f023 0304 	bic.w	r3, r3, #4
 8001b1a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d015      	beq.n	8001b50 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b24:	f7ff f84a 	bl	8000bbc <HAL_GetTick>
 8001b28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b2a:	e00a      	b.n	8001b42 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b2c:	f7ff f846 	bl	8000bbc <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d901      	bls.n	8001b42 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	e0d7      	b.n	8001cf2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b42:	4b4b      	ldr	r3, [pc, #300]	@ (8001c70 <HAL_RCC_OscConfig+0x4ac>)
 8001b44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b46:	f003 0302 	and.w	r3, r3, #2
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d0ee      	beq.n	8001b2c <HAL_RCC_OscConfig+0x368>
 8001b4e:	e014      	b.n	8001b7a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b50:	f7ff f834 	bl	8000bbc <HAL_GetTick>
 8001b54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b56:	e00a      	b.n	8001b6e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b58:	f7ff f830 	bl	8000bbc <HAL_GetTick>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d901      	bls.n	8001b6e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e0c1      	b.n	8001cf2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b6e:	4b40      	ldr	r3, [pc, #256]	@ (8001c70 <HAL_RCC_OscConfig+0x4ac>)
 8001b70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b72:	f003 0302 	and.w	r3, r3, #2
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d1ee      	bne.n	8001b58 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b7a:	7dfb      	ldrb	r3, [r7, #23]
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d105      	bne.n	8001b8c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b80:	4b3b      	ldr	r3, [pc, #236]	@ (8001c70 <HAL_RCC_OscConfig+0x4ac>)
 8001b82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b84:	4a3a      	ldr	r2, [pc, #232]	@ (8001c70 <HAL_RCC_OscConfig+0x4ac>)
 8001b86:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b8a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	699b      	ldr	r3, [r3, #24]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	f000 80ad 	beq.w	8001cf0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b96:	4b36      	ldr	r3, [pc, #216]	@ (8001c70 <HAL_RCC_OscConfig+0x4ac>)
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	f003 030c 	and.w	r3, r3, #12
 8001b9e:	2b08      	cmp	r3, #8
 8001ba0:	d060      	beq.n	8001c64 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	699b      	ldr	r3, [r3, #24]
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	d145      	bne.n	8001c36 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001baa:	4b33      	ldr	r3, [pc, #204]	@ (8001c78 <HAL_RCC_OscConfig+0x4b4>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bb0:	f7ff f804 	bl	8000bbc <HAL_GetTick>
 8001bb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bb6:	e008      	b.n	8001bca <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bb8:	f7ff f800 	bl	8000bbc <HAL_GetTick>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	d901      	bls.n	8001bca <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	e093      	b.n	8001cf2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bca:	4b29      	ldr	r3, [pc, #164]	@ (8001c70 <HAL_RCC_OscConfig+0x4ac>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d1f0      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	69da      	ldr	r2, [r3, #28]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6a1b      	ldr	r3, [r3, #32]
 8001bde:	431a      	orrs	r2, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001be4:	019b      	lsls	r3, r3, #6
 8001be6:	431a      	orrs	r2, r3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bec:	085b      	lsrs	r3, r3, #1
 8001bee:	3b01      	subs	r3, #1
 8001bf0:	041b      	lsls	r3, r3, #16
 8001bf2:	431a      	orrs	r2, r3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bf8:	061b      	lsls	r3, r3, #24
 8001bfa:	431a      	orrs	r2, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c00:	071b      	lsls	r3, r3, #28
 8001c02:	491b      	ldr	r1, [pc, #108]	@ (8001c70 <HAL_RCC_OscConfig+0x4ac>)
 8001c04:	4313      	orrs	r3, r2
 8001c06:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c08:	4b1b      	ldr	r3, [pc, #108]	@ (8001c78 <HAL_RCC_OscConfig+0x4b4>)
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c0e:	f7fe ffd5 	bl	8000bbc <HAL_GetTick>
 8001c12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c14:	e008      	b.n	8001c28 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c16:	f7fe ffd1 	bl	8000bbc <HAL_GetTick>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	1ad3      	subs	r3, r2, r3
 8001c20:	2b02      	cmp	r3, #2
 8001c22:	d901      	bls.n	8001c28 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001c24:	2303      	movs	r3, #3
 8001c26:	e064      	b.n	8001cf2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c28:	4b11      	ldr	r3, [pc, #68]	@ (8001c70 <HAL_RCC_OscConfig+0x4ac>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d0f0      	beq.n	8001c16 <HAL_RCC_OscConfig+0x452>
 8001c34:	e05c      	b.n	8001cf0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c36:	4b10      	ldr	r3, [pc, #64]	@ (8001c78 <HAL_RCC_OscConfig+0x4b4>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c3c:	f7fe ffbe 	bl	8000bbc <HAL_GetTick>
 8001c40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c42:	e008      	b.n	8001c56 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c44:	f7fe ffba 	bl	8000bbc <HAL_GetTick>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d901      	bls.n	8001c56 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001c52:	2303      	movs	r3, #3
 8001c54:	e04d      	b.n	8001cf2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c56:	4b06      	ldr	r3, [pc, #24]	@ (8001c70 <HAL_RCC_OscConfig+0x4ac>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d1f0      	bne.n	8001c44 <HAL_RCC_OscConfig+0x480>
 8001c62:	e045      	b.n	8001cf0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	699b      	ldr	r3, [r3, #24]
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d107      	bne.n	8001c7c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e040      	b.n	8001cf2 <HAL_RCC_OscConfig+0x52e>
 8001c70:	40023800 	.word	0x40023800
 8001c74:	40007000 	.word	0x40007000
 8001c78:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001c7c:	4b1f      	ldr	r3, [pc, #124]	@ (8001cfc <HAL_RCC_OscConfig+0x538>)
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	699b      	ldr	r3, [r3, #24]
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d030      	beq.n	8001cec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d129      	bne.n	8001cec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	d122      	bne.n	8001cec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ca6:	68fa      	ldr	r2, [r7, #12]
 8001ca8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001cac:	4013      	ands	r3, r2
 8001cae:	687a      	ldr	r2, [r7, #4]
 8001cb0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001cb2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d119      	bne.n	8001cec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cc2:	085b      	lsrs	r3, r3, #1
 8001cc4:	3b01      	subs	r3, #1
 8001cc6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d10f      	bne.n	8001cec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cd6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d107      	bne.n	8001cec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ce6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d001      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	e000      	b.n	8001cf2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001cf0:	2300      	movs	r3, #0
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3718      	adds	r7, #24
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	40023800 	.word	0x40023800

08001d00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d101      	bne.n	8001d12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e041      	b.n	8001d96 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d106      	bne.n	8001d2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2200      	movs	r2, #0
 8001d22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f000 f839 	bl	8001d9e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2202      	movs	r2, #2
 8001d30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	3304      	adds	r3, #4
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	4610      	mov	r0, r2
 8001d40:	f000 f9c0 	bl	80020c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2201      	movs	r2, #1
 8001d48:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2201      	movs	r2, #1
 8001d58:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2201      	movs	r2, #1
 8001d60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2201      	movs	r2, #1
 8001d68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2201      	movs	r2, #1
 8001d70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2201      	movs	r2, #1
 8001d78:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2201      	movs	r2, #1
 8001d88:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2201      	movs	r2, #1
 8001d90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001d94:	2300      	movs	r3, #0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}

08001d9e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001d9e:	b480      	push	{r7}
 8001da0:	b083      	sub	sp, #12
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001da6:	bf00      	nop
 8001da8:	370c      	adds	r7, #12
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
	...

08001db4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b085      	sub	sp, #20
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d001      	beq.n	8001dcc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e04e      	b.n	8001e6a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2202      	movs	r2, #2
 8001dd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	68da      	ldr	r2, [r3, #12]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f042 0201 	orr.w	r2, r2, #1
 8001de2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a23      	ldr	r2, [pc, #140]	@ (8001e78 <HAL_TIM_Base_Start_IT+0xc4>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d022      	beq.n	8001e34 <HAL_TIM_Base_Start_IT+0x80>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001df6:	d01d      	beq.n	8001e34 <HAL_TIM_Base_Start_IT+0x80>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a1f      	ldr	r2, [pc, #124]	@ (8001e7c <HAL_TIM_Base_Start_IT+0xc8>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d018      	beq.n	8001e34 <HAL_TIM_Base_Start_IT+0x80>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a1e      	ldr	r2, [pc, #120]	@ (8001e80 <HAL_TIM_Base_Start_IT+0xcc>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d013      	beq.n	8001e34 <HAL_TIM_Base_Start_IT+0x80>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a1c      	ldr	r2, [pc, #112]	@ (8001e84 <HAL_TIM_Base_Start_IT+0xd0>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d00e      	beq.n	8001e34 <HAL_TIM_Base_Start_IT+0x80>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a1b      	ldr	r2, [pc, #108]	@ (8001e88 <HAL_TIM_Base_Start_IT+0xd4>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d009      	beq.n	8001e34 <HAL_TIM_Base_Start_IT+0x80>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a19      	ldr	r2, [pc, #100]	@ (8001e8c <HAL_TIM_Base_Start_IT+0xd8>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d004      	beq.n	8001e34 <HAL_TIM_Base_Start_IT+0x80>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a18      	ldr	r2, [pc, #96]	@ (8001e90 <HAL_TIM_Base_Start_IT+0xdc>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d111      	bne.n	8001e58 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	f003 0307 	and.w	r3, r3, #7
 8001e3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	2b06      	cmp	r3, #6
 8001e44:	d010      	beq.n	8001e68 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f042 0201 	orr.w	r2, r2, #1
 8001e54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e56:	e007      	b.n	8001e68 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f042 0201 	orr.w	r2, r2, #1
 8001e66:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e68:	2300      	movs	r3, #0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3714      	adds	r7, #20
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	40010000 	.word	0x40010000
 8001e7c:	40000400 	.word	0x40000400
 8001e80:	40000800 	.word	0x40000800
 8001e84:	40000c00 	.word	0x40000c00
 8001e88:	40010400 	.word	0x40010400
 8001e8c:	40014000 	.word	0x40014000
 8001e90:	40001800 	.word	0x40001800

08001e94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	68db      	ldr	r3, [r3, #12]
 8001ea2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	691b      	ldr	r3, [r3, #16]
 8001eaa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	f003 0302 	and.w	r3, r3, #2
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d020      	beq.n	8001ef8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	f003 0302 	and.w	r3, r3, #2
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d01b      	beq.n	8001ef8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f06f 0202 	mvn.w	r2, #2
 8001ec8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2201      	movs	r2, #1
 8001ece:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	699b      	ldr	r3, [r3, #24]
 8001ed6:	f003 0303 	and.w	r3, r3, #3
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d003      	beq.n	8001ee6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f000 f8d2 	bl	8002088 <HAL_TIM_IC_CaptureCallback>
 8001ee4:	e005      	b.n	8001ef2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f000 f8c4 	bl	8002074 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f000 f8d5 	bl	800209c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	f003 0304 	and.w	r3, r3, #4
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d020      	beq.n	8001f44 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	f003 0304 	and.w	r3, r3, #4
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d01b      	beq.n	8001f44 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f06f 0204 	mvn.w	r2, #4
 8001f14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2202      	movs	r2, #2
 8001f1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	699b      	ldr	r3, [r3, #24]
 8001f22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d003      	beq.n	8001f32 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f000 f8ac 	bl	8002088 <HAL_TIM_IC_CaptureCallback>
 8001f30:	e005      	b.n	8001f3e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f000 f89e 	bl	8002074 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f000 f8af 	bl	800209c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2200      	movs	r2, #0
 8001f42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	f003 0308 	and.w	r3, r3, #8
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d020      	beq.n	8001f90 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	f003 0308 	and.w	r3, r3, #8
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d01b      	beq.n	8001f90 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f06f 0208 	mvn.w	r2, #8
 8001f60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2204      	movs	r2, #4
 8001f66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	69db      	ldr	r3, [r3, #28]
 8001f6e:	f003 0303 	and.w	r3, r3, #3
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d003      	beq.n	8001f7e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f000 f886 	bl	8002088 <HAL_TIM_IC_CaptureCallback>
 8001f7c:	e005      	b.n	8001f8a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f000 f878 	bl	8002074 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f000 f889 	bl	800209c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	f003 0310 	and.w	r3, r3, #16
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d020      	beq.n	8001fdc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	f003 0310 	and.w	r3, r3, #16
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d01b      	beq.n	8001fdc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f06f 0210 	mvn.w	r2, #16
 8001fac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2208      	movs	r2, #8
 8001fb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	69db      	ldr	r3, [r3, #28]
 8001fba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d003      	beq.n	8001fca <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f000 f860 	bl	8002088 <HAL_TIM_IC_CaptureCallback>
 8001fc8:	e005      	b.n	8001fd6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f000 f852 	bl	8002074 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f000 f863 	bl	800209c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	f003 0301 	and.w	r3, r3, #1
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d00c      	beq.n	8002000 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	f003 0301 	and.w	r3, r3, #1
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d007      	beq.n	8002000 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f06f 0201 	mvn.w	r2, #1
 8001ff8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f7fe fc38 	bl	8000870 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002006:	2b00      	cmp	r3, #0
 8002008:	d00c      	beq.n	8002024 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002010:	2b00      	cmp	r3, #0
 8002012:	d007      	beq.n	8002024 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800201c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f000 f906 	bl	8002230 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800202a:	2b00      	cmp	r3, #0
 800202c:	d00c      	beq.n	8002048 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002034:	2b00      	cmp	r3, #0
 8002036:	d007      	beq.n	8002048 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002040:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f000 f834 	bl	80020b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	f003 0320 	and.w	r3, r3, #32
 800204e:	2b00      	cmp	r3, #0
 8002050:	d00c      	beq.n	800206c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	f003 0320 	and.w	r3, r3, #32
 8002058:	2b00      	cmp	r3, #0
 800205a:	d007      	beq.n	800206c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f06f 0220 	mvn.w	r2, #32
 8002064:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f000 f8d8 	bl	800221c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800206c:	bf00      	nop
 800206e:	3710      	adds	r7, #16
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}

08002074 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800207c:	bf00      	nop
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002090:	bf00      	nop
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80020a4:	bf00      	nop
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr

080020b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80020b8:	bf00      	nop
 80020ba:	370c      	adds	r7, #12
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b085      	sub	sp, #20
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	4a46      	ldr	r2, [pc, #280]	@ (80021f0 <TIM_Base_SetConfig+0x12c>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d013      	beq.n	8002104 <TIM_Base_SetConfig+0x40>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020e2:	d00f      	beq.n	8002104 <TIM_Base_SetConfig+0x40>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	4a43      	ldr	r2, [pc, #268]	@ (80021f4 <TIM_Base_SetConfig+0x130>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d00b      	beq.n	8002104 <TIM_Base_SetConfig+0x40>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	4a42      	ldr	r2, [pc, #264]	@ (80021f8 <TIM_Base_SetConfig+0x134>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d007      	beq.n	8002104 <TIM_Base_SetConfig+0x40>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	4a41      	ldr	r2, [pc, #260]	@ (80021fc <TIM_Base_SetConfig+0x138>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d003      	beq.n	8002104 <TIM_Base_SetConfig+0x40>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	4a40      	ldr	r2, [pc, #256]	@ (8002200 <TIM_Base_SetConfig+0x13c>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d108      	bne.n	8002116 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800210a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	68fa      	ldr	r2, [r7, #12]
 8002112:	4313      	orrs	r3, r2
 8002114:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4a35      	ldr	r2, [pc, #212]	@ (80021f0 <TIM_Base_SetConfig+0x12c>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d02b      	beq.n	8002176 <TIM_Base_SetConfig+0xb2>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002124:	d027      	beq.n	8002176 <TIM_Base_SetConfig+0xb2>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4a32      	ldr	r2, [pc, #200]	@ (80021f4 <TIM_Base_SetConfig+0x130>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d023      	beq.n	8002176 <TIM_Base_SetConfig+0xb2>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4a31      	ldr	r2, [pc, #196]	@ (80021f8 <TIM_Base_SetConfig+0x134>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d01f      	beq.n	8002176 <TIM_Base_SetConfig+0xb2>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4a30      	ldr	r2, [pc, #192]	@ (80021fc <TIM_Base_SetConfig+0x138>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d01b      	beq.n	8002176 <TIM_Base_SetConfig+0xb2>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4a2f      	ldr	r2, [pc, #188]	@ (8002200 <TIM_Base_SetConfig+0x13c>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d017      	beq.n	8002176 <TIM_Base_SetConfig+0xb2>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4a2e      	ldr	r2, [pc, #184]	@ (8002204 <TIM_Base_SetConfig+0x140>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d013      	beq.n	8002176 <TIM_Base_SetConfig+0xb2>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a2d      	ldr	r2, [pc, #180]	@ (8002208 <TIM_Base_SetConfig+0x144>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d00f      	beq.n	8002176 <TIM_Base_SetConfig+0xb2>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4a2c      	ldr	r2, [pc, #176]	@ (800220c <TIM_Base_SetConfig+0x148>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d00b      	beq.n	8002176 <TIM_Base_SetConfig+0xb2>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4a2b      	ldr	r2, [pc, #172]	@ (8002210 <TIM_Base_SetConfig+0x14c>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d007      	beq.n	8002176 <TIM_Base_SetConfig+0xb2>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a2a      	ldr	r2, [pc, #168]	@ (8002214 <TIM_Base_SetConfig+0x150>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d003      	beq.n	8002176 <TIM_Base_SetConfig+0xb2>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a29      	ldr	r2, [pc, #164]	@ (8002218 <TIM_Base_SetConfig+0x154>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d108      	bne.n	8002188 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800217c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	68db      	ldr	r3, [r3, #12]
 8002182:	68fa      	ldr	r2, [r7, #12]
 8002184:	4313      	orrs	r3, r2
 8002186:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	695b      	ldr	r3, [r3, #20]
 8002192:	4313      	orrs	r3, r2
 8002194:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	68fa      	ldr	r2, [r7, #12]
 800219a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	689a      	ldr	r2, [r3, #8]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	4a10      	ldr	r2, [pc, #64]	@ (80021f0 <TIM_Base_SetConfig+0x12c>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d003      	beq.n	80021bc <TIM_Base_SetConfig+0xf8>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	4a12      	ldr	r2, [pc, #72]	@ (8002200 <TIM_Base_SetConfig+0x13c>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d103      	bne.n	80021c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	691a      	ldr	r2, [r3, #16]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2201      	movs	r2, #1
 80021c8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	691b      	ldr	r3, [r3, #16]
 80021ce:	f003 0301 	and.w	r3, r3, #1
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d105      	bne.n	80021e2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	691b      	ldr	r3, [r3, #16]
 80021da:	f023 0201 	bic.w	r2, r3, #1
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	611a      	str	r2, [r3, #16]
  }
}
 80021e2:	bf00      	nop
 80021e4:	3714      	adds	r7, #20
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	40010000 	.word	0x40010000
 80021f4:	40000400 	.word	0x40000400
 80021f8:	40000800 	.word	0x40000800
 80021fc:	40000c00 	.word	0x40000c00
 8002200:	40010400 	.word	0x40010400
 8002204:	40014000 	.word	0x40014000
 8002208:	40014400 	.word	0x40014400
 800220c:	40014800 	.word	0x40014800
 8002210:	40001800 	.word	0x40001800
 8002214:	40001c00 	.word	0x40001c00
 8002218:	40002000 	.word	0x40002000

0800221c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002224:	bf00      	nop
 8002226:	370c      	adds	r7, #12
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr

08002230 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002238:	bf00      	nop
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f103 0208 	add.w	r2, r3, #8
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	f04f 32ff 	mov.w	r2, #4294967295
 800225c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	f103 0208 	add.w	r2, r3, #8
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	f103 0208 	add.w	r2, r3, #8
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2200      	movs	r2, #0
 8002276:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002278:	bf00      	nop
 800227a:	370c      	adds	r7, #12
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr

08002284 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2200      	movs	r2, #0
 8002290:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002292:	bf00      	nop
 8002294:	370c      	adds	r7, #12
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr

0800229e <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800229e:	b480      	push	{r7}
 80022a0:	b085      	sub	sp, #20
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	6078      	str	r0, [r7, #4]
 80022a6:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022b4:	d103      	bne.n	80022be <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	691b      	ldr	r3, [r3, #16]
 80022ba:	60fb      	str	r3, [r7, #12]
 80022bc:	e00c      	b.n	80022d8 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	3308      	adds	r3, #8
 80022c2:	60fb      	str	r3, [r7, #12]
 80022c4:	e002      	b.n	80022cc <vListInsert+0x2e>
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	60fb      	str	r3, [r7, #12]
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	68ba      	ldr	r2, [r7, #8]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d2f6      	bcs.n	80022c6 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	685a      	ldr	r2, [r3, #4]
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	683a      	ldr	r2, [r7, #0]
 80022e6:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	68fa      	ldr	r2, [r7, #12]
 80022ec:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	683a      	ldr	r2, [r7, #0]
 80022f2:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	1c5a      	adds	r2, r3, #1
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	601a      	str	r2, [r3, #0]
}
 8002304:	bf00      	nop
 8002306:	3714      	adds	r7, #20
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr

08002310 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002310:	b480      	push	{r7}
 8002312:	b085      	sub	sp, #20
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	691b      	ldr	r3, [r3, #16]
 800231c:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	6892      	ldr	r2, [r2, #8]
 8002326:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	6852      	ldr	r2, [r2, #4]
 8002330:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	429a      	cmp	r2, r3
 800233a:	d103      	bne.n	8002344 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	689a      	ldr	r2, [r3, #8]
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2200      	movs	r2, #0
 8002348:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	1e5a      	subs	r2, r3, #1
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
}
 8002358:	4618      	mov	r0, r3
 800235a:	3714      	adds	r7, #20
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr

08002364 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b086      	sub	sp, #24
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800236e:	2301      	movs	r3, #1
 8002370:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d10b      	bne.n	8002394 <xQueueGenericReset+0x30>
        __asm volatile
 800237c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002380:	f383 8811 	msr	BASEPRI, r3
 8002384:	f3bf 8f6f 	isb	sy
 8002388:	f3bf 8f4f 	dsb	sy
 800238c:	60fb      	str	r3, [r7, #12]
    }
 800238e:	bf00      	nop
 8002390:	bf00      	nop
 8002392:	e7fd      	b.n	8002390 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d052      	beq.n	8002440 <xQueueGenericReset+0xdc>
        ( pxQueue->uxLength >= 1U ) &&
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d04e      	beq.n	8002440 <xQueueGenericReset+0xdc>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023aa:	2100      	movs	r1, #0
 80023ac:	fba3 2302 	umull	r2, r3, r3, r2
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d000      	beq.n	80023b6 <xQueueGenericReset+0x52>
 80023b4:	2101      	movs	r1, #1
 80023b6:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d141      	bne.n	8002440 <xQueueGenericReset+0xdc>
    {
        taskENTER_CRITICAL();
 80023bc:	f001 feae 	bl	800411c <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023c8:	6939      	ldr	r1, [r7, #16]
 80023ca:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80023cc:	fb01 f303 	mul.w	r3, r1, r3
 80023d0:	441a      	add	r2, r3
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	2200      	movs	r2, #0
 80023da:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023ec:	3b01      	subs	r3, #1
 80023ee:	6939      	ldr	r1, [r7, #16]
 80023f0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80023f2:	fb01 f303 	mul.w	r3, r1, r3
 80023f6:	441a      	add	r2, r3
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	22ff      	movs	r2, #255	@ 0xff
 8002400:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	22ff      	movs	r2, #255	@ 0xff
 8002408:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d109      	bne.n	8002426 <xQueueGenericReset+0xc2>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	691b      	ldr	r3, [r3, #16]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d00f      	beq.n	800243a <xQueueGenericReset+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	3310      	adds	r3, #16
 800241e:	4618      	mov	r0, r3
 8002420:	f000 ff90 	bl	8003344 <xTaskRemoveFromEventList>
 8002424:	e009      	b.n	800243a <xQueueGenericReset+0xd6>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	3310      	adds	r3, #16
 800242a:	4618      	mov	r0, r3
 800242c:	f7ff ff0a 	bl	8002244 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	3324      	adds	r3, #36	@ 0x24
 8002434:	4618      	mov	r0, r3
 8002436:	f7ff ff05 	bl	8002244 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 800243a:	f001 fea1 	bl	8004180 <vPortExitCritical>
 800243e:	e001      	b.n	8002444 <xQueueGenericReset+0xe0>
    }
    else
    {
        xReturn = pdFAIL;
 8002440:	2300      	movs	r3, #0
 8002442:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d10b      	bne.n	8002462 <xQueueGenericReset+0xfe>
        __asm volatile
 800244a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800244e:	f383 8811 	msr	BASEPRI, r3
 8002452:	f3bf 8f6f 	isb	sy
 8002456:	f3bf 8f4f 	dsb	sy
 800245a:	60bb      	str	r3, [r7, #8]
    }
 800245c:	bf00      	nop
 800245e:	bf00      	nop
 8002460:	e7fd      	b.n	800245e <xQueueGenericReset+0xfa>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8002462:	697b      	ldr	r3, [r7, #20]
}
 8002464:	4618      	mov	r0, r3
 8002466:	3718      	adds	r7, #24
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}

0800246c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 800246c:	b580      	push	{r7, lr}
 800246e:	b08a      	sub	sp, #40	@ 0x28
 8002470:	af02      	add	r7, sp, #8
 8002472:	60f8      	str	r0, [r7, #12]
 8002474:	60b9      	str	r1, [r7, #8]
 8002476:	4613      	mov	r3, r2
 8002478:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 800247a:	2300      	movs	r3, #0
 800247c:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d02e      	beq.n	80024e2 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002484:	2100      	movs	r1, #0
 8002486:	68ba      	ldr	r2, [r7, #8]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	fba3 2302 	umull	r2, r3, r3, r2
 800248e:	2b00      	cmp	r3, #0
 8002490:	d000      	beq.n	8002494 <xQueueGenericCreate+0x28>
 8002492:	2101      	movs	r1, #1
 8002494:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002496:	2b00      	cmp	r3, #0
 8002498:	d123      	bne.n	80024e2 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	68ba      	ldr	r2, [r7, #8]
 800249e:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80024a2:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 80024a6:	d81c      	bhi.n	80024e2 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	68ba      	ldr	r2, [r7, #8]
 80024ac:	fb02 f303 	mul.w	r3, r2, r3
 80024b0:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80024b2:	69bb      	ldr	r3, [r7, #24]
 80024b4:	3350      	adds	r3, #80	@ 0x50
 80024b6:	4618      	mov	r0, r3
 80024b8:	f001 ff62 	bl	8004380 <pvPortMalloc>
 80024bc:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d01d      	beq.n	8002500 <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	3350      	adds	r3, #80	@ 0x50
 80024cc:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80024ce:	79fa      	ldrb	r2, [r7, #7]
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	9300      	str	r3, [sp, #0]
 80024d4:	4613      	mov	r3, r2
 80024d6:	697a      	ldr	r2, [r7, #20]
 80024d8:	68b9      	ldr	r1, [r7, #8]
 80024da:	68f8      	ldr	r0, [r7, #12]
 80024dc:	f000 f815 	bl	800250a <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 80024e0:	e00e      	b.n	8002500 <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d10b      	bne.n	8002500 <xQueueGenericCreate+0x94>
        __asm volatile
 80024e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024ec:	f383 8811 	msr	BASEPRI, r3
 80024f0:	f3bf 8f6f 	isb	sy
 80024f4:	f3bf 8f4f 	dsb	sy
 80024f8:	613b      	str	r3, [r7, #16]
    }
 80024fa:	bf00      	nop
 80024fc:	bf00      	nop
 80024fe:	e7fd      	b.n	80024fc <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002500:	69fb      	ldr	r3, [r7, #28]
    }
 8002502:	4618      	mov	r0, r3
 8002504:	3720      	adds	r7, #32
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}

0800250a <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800250a:	b580      	push	{r7, lr}
 800250c:	b084      	sub	sp, #16
 800250e:	af00      	add	r7, sp, #0
 8002510:	60f8      	str	r0, [r7, #12]
 8002512:	60b9      	str	r1, [r7, #8]
 8002514:	607a      	str	r2, [r7, #4]
 8002516:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d103      	bne.n	8002526 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800251e:	69bb      	ldr	r3, [r7, #24]
 8002520:	69ba      	ldr	r2, [r7, #24]
 8002522:	601a      	str	r2, [r3, #0]
 8002524:	e002      	b.n	800252c <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	687a      	ldr	r2, [r7, #4]
 800252a:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800252c:	69bb      	ldr	r3, [r7, #24]
 800252e:	68fa      	ldr	r2, [r7, #12]
 8002530:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002532:	69bb      	ldr	r3, [r7, #24]
 8002534:	68ba      	ldr	r2, [r7, #8]
 8002536:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002538:	2101      	movs	r1, #1
 800253a:	69b8      	ldr	r0, [r7, #24]
 800253c:	f7ff ff12 	bl	8002364 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8002540:	69bb      	ldr	r3, [r7, #24]
 8002542:	78fa      	ldrb	r2, [r7, #3]
 8002544:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    {
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8002548:	78fb      	ldrb	r3, [r7, #3]
 800254a:	68ba      	ldr	r2, [r7, #8]
 800254c:	68f9      	ldr	r1, [r7, #12]
 800254e:	2073      	movs	r0, #115	@ 0x73
 8002550:	f003 f85a 	bl	8005608 <SEGGER_SYSVIEW_RecordU32x3>
}
 8002554:	bf00      	nop
 8002556:	3710      	adds	r7, #16
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}

0800255c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800255c:	b590      	push	{r4, r7, lr}
 800255e:	b08f      	sub	sp, #60	@ 0x3c
 8002560:	af02      	add	r7, sp, #8
 8002562:	60f8      	str	r0, [r7, #12]
 8002564:	60b9      	str	r1, [r7, #8]
 8002566:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002568:	2300      	movs	r3, #0
 800256a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002570:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002572:	2b00      	cmp	r3, #0
 8002574:	d10b      	bne.n	800258e <xQueueReceive+0x32>
        __asm volatile
 8002576:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800257a:	f383 8811 	msr	BASEPRI, r3
 800257e:	f3bf 8f6f 	isb	sy
 8002582:	f3bf 8f4f 	dsb	sy
 8002586:	623b      	str	r3, [r7, #32]
    }
 8002588:	bf00      	nop
 800258a:	bf00      	nop
 800258c:	e7fd      	b.n	800258a <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d103      	bne.n	800259c <xQueueReceive+0x40>
 8002594:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002598:	2b00      	cmp	r3, #0
 800259a:	d101      	bne.n	80025a0 <xQueueReceive+0x44>
 800259c:	2301      	movs	r3, #1
 800259e:	e000      	b.n	80025a2 <xQueueReceive+0x46>
 80025a0:	2300      	movs	r3, #0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d10b      	bne.n	80025be <xQueueReceive+0x62>
        __asm volatile
 80025a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025aa:	f383 8811 	msr	BASEPRI, r3
 80025ae:	f3bf 8f6f 	isb	sy
 80025b2:	f3bf 8f4f 	dsb	sy
 80025b6:	61fb      	str	r3, [r7, #28]
    }
 80025b8:	bf00      	nop
 80025ba:	bf00      	nop
 80025bc:	e7fd      	b.n	80025ba <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80025be:	f001 f8d1 	bl	8003764 <xTaskGetSchedulerState>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d102      	bne.n	80025ce <xQueueReceive+0x72>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d101      	bne.n	80025d2 <xQueueReceive+0x76>
 80025ce:	2301      	movs	r3, #1
 80025d0:	e000      	b.n	80025d4 <xQueueReceive+0x78>
 80025d2:	2300      	movs	r3, #0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d10b      	bne.n	80025f0 <xQueueReceive+0x94>
        __asm volatile
 80025d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025dc:	f383 8811 	msr	BASEPRI, r3
 80025e0:	f3bf 8f6f 	isb	sy
 80025e4:	f3bf 8f4f 	dsb	sy
 80025e8:	61bb      	str	r3, [r7, #24]
    }
 80025ea:	bf00      	nop
 80025ec:	bf00      	nop
 80025ee:	e7fd      	b.n	80025ec <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80025f0:	f001 fd94 	bl	800411c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80025f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025f8:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80025fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d024      	beq.n	800264a <xQueueReceive+0xee>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002600:	68b9      	ldr	r1, [r7, #8]
 8002602:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002604:	f000 f8b2 	bl	800276c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8002608:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800260a:	4618      	mov	r0, r3
 800260c:	f003 fd28 	bl	8006060 <SEGGER_SYSVIEW_ShrinkId>
 8002610:	4604      	mov	r4, r0
 8002612:	2000      	movs	r0, #0
 8002614:	f003 fd24 	bl	8006060 <SEGGER_SYSVIEW_ShrinkId>
 8002618:	4602      	mov	r2, r0
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2101      	movs	r1, #1
 800261e:	9100      	str	r1, [sp, #0]
 8002620:	4621      	mov	r1, r4
 8002622:	205c      	movs	r0, #92	@ 0x5c
 8002624:	f003 f866 	bl	80056f4 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800262a:	1e5a      	subs	r2, r3, #1
 800262c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800262e:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002630:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002632:	691b      	ldr	r3, [r3, #16]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d004      	beq.n	8002642 <xQueueReceive+0xe6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002638:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800263a:	3310      	adds	r3, #16
 800263c:	4618      	mov	r0, r3
 800263e:	f000 fe81 	bl	8003344 <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002642:	f001 fd9d 	bl	8004180 <vPortExitCritical>
                return pdPASS;
 8002646:	2301      	movs	r3, #1
 8002648:	e08a      	b.n	8002760 <xQueueReceive+0x204>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d113      	bne.n	8002678 <xQueueReceive+0x11c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002650:	f001 fd96 	bl	8004180 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002654:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002656:	4618      	mov	r0, r3
 8002658:	f003 fd02 	bl	8006060 <SEGGER_SYSVIEW_ShrinkId>
 800265c:	4604      	mov	r4, r0
 800265e:	2000      	movs	r0, #0
 8002660:	f003 fcfe 	bl	8006060 <SEGGER_SYSVIEW_ShrinkId>
 8002664:	4602      	mov	r2, r0
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2101      	movs	r1, #1
 800266a:	9100      	str	r1, [sp, #0]
 800266c:	4621      	mov	r1, r4
 800266e:	205c      	movs	r0, #92	@ 0x5c
 8002670:	f003 f840 	bl	80056f4 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8002674:	2300      	movs	r3, #0
 8002676:	e073      	b.n	8002760 <xQueueReceive+0x204>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002678:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800267a:	2b00      	cmp	r3, #0
 800267c:	d106      	bne.n	800268c <xQueueReceive+0x130>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800267e:	f107 0310 	add.w	r3, r7, #16
 8002682:	4618      	mov	r0, r3
 8002684:	f000 ff38 	bl	80034f8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002688:	2301      	movs	r3, #1
 800268a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800268c:	f001 fd78 	bl	8004180 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002690:	f000 fb64 	bl	8002d5c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002694:	f001 fd42 	bl	800411c <vPortEnterCritical>
 8002698:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800269a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800269e:	b25b      	sxtb	r3, r3
 80026a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026a4:	d103      	bne.n	80026ae <xQueueReceive+0x152>
 80026a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026a8:	2200      	movs	r2, #0
 80026aa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80026ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026b0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80026b4:	b25b      	sxtb	r3, r3
 80026b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026ba:	d103      	bne.n	80026c4 <xQueueReceive+0x168>
 80026bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026be:	2200      	movs	r2, #0
 80026c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80026c4:	f001 fd5c 	bl	8004180 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80026c8:	1d3a      	adds	r2, r7, #4
 80026ca:	f107 0310 	add.w	r3, r7, #16
 80026ce:	4611      	mov	r1, r2
 80026d0:	4618      	mov	r0, r3
 80026d2:	f000 ff27 	bl	8003524 <xTaskCheckForTimeOut>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d124      	bne.n	8002726 <xQueueReceive+0x1ca>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80026dc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80026de:	f000 f8bd 	bl	800285c <prvIsQueueEmpty>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d018      	beq.n	800271a <xQueueReceive+0x1be>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80026e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026ea:	3324      	adds	r3, #36	@ 0x24
 80026ec:	687a      	ldr	r2, [r7, #4]
 80026ee:	4611      	mov	r1, r2
 80026f0:	4618      	mov	r0, r3
 80026f2:	f000 fdb7 	bl	8003264 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80026f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80026f8:	f000 f85e 	bl	80027b8 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80026fc:	f000 fb3c 	bl	8002d78 <xTaskResumeAll>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	f47f af74 	bne.w	80025f0 <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 8002708:	4b17      	ldr	r3, [pc, #92]	@ (8002768 <xQueueReceive+0x20c>)
 800270a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800270e:	601a      	str	r2, [r3, #0]
 8002710:	f3bf 8f4f 	dsb	sy
 8002714:	f3bf 8f6f 	isb	sy
 8002718:	e76a      	b.n	80025f0 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800271a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800271c:	f000 f84c 	bl	80027b8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002720:	f000 fb2a 	bl	8002d78 <xTaskResumeAll>
 8002724:	e764      	b.n	80025f0 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002726:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002728:	f000 f846 	bl	80027b8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800272c:	f000 fb24 	bl	8002d78 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002730:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002732:	f000 f893 	bl	800285c <prvIsQueueEmpty>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	f43f af59 	beq.w	80025f0 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 800273e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002740:	4618      	mov	r0, r3
 8002742:	f003 fc8d 	bl	8006060 <SEGGER_SYSVIEW_ShrinkId>
 8002746:	4604      	mov	r4, r0
 8002748:	2000      	movs	r0, #0
 800274a:	f003 fc89 	bl	8006060 <SEGGER_SYSVIEW_ShrinkId>
 800274e:	4602      	mov	r2, r0
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2101      	movs	r1, #1
 8002754:	9100      	str	r1, [sp, #0]
 8002756:	4621      	mov	r1, r4
 8002758:	205c      	movs	r0, #92	@ 0x5c
 800275a:	f002 ffcb 	bl	80056f4 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 800275e:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002760:	4618      	mov	r0, r3
 8002762:	3734      	adds	r7, #52	@ 0x34
 8002764:	46bd      	mov	sp, r7
 8002766:	bd90      	pop	{r4, r7, pc}
 8002768:	e000ed04 	.word	0xe000ed04

0800276c <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
 8002774:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800277a:	2b00      	cmp	r3, #0
 800277c:	d018      	beq.n	80027b0 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	68da      	ldr	r2, [r3, #12]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002786:	441a      	add	r2, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	68da      	ldr	r2, [r3, #12]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	429a      	cmp	r2, r3
 8002796:	d303      	bcc.n	80027a0 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	68d9      	ldr	r1, [r3, #12]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a8:	461a      	mov	r2, r3
 80027aa:	6838      	ldr	r0, [r7, #0]
 80027ac:	f004 f81d 	bl	80067ea <memcpy>
    }
}
 80027b0:	bf00      	nop
 80027b2:	3708      	adds	r7, #8
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}

080027b8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b084      	sub	sp, #16
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80027c0:	f001 fcac 	bl	800411c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80027ca:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80027cc:	e011      	b.n	80027f2 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d012      	beq.n	80027fc <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	3324      	adds	r3, #36	@ 0x24
 80027da:	4618      	mov	r0, r3
 80027dc:	f000 fdb2 	bl	8003344 <xTaskRemoveFromEventList>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d001      	beq.n	80027ea <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 80027e6:	f000 ff05 	bl	80035f4 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80027ea:	7bfb      	ldrb	r3, [r7, #15]
 80027ec:	3b01      	subs	r3, #1
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80027f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	dce9      	bgt.n	80027ce <prvUnlockQueue+0x16>
 80027fa:	e000      	b.n	80027fe <prvUnlockQueue+0x46>
                    break;
 80027fc:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	22ff      	movs	r2, #255	@ 0xff
 8002802:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8002806:	f001 fcbb 	bl	8004180 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800280a:	f001 fc87 	bl	800411c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002814:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002816:	e011      	b.n	800283c <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	691b      	ldr	r3, [r3, #16]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d012      	beq.n	8002846 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	3310      	adds	r3, #16
 8002824:	4618      	mov	r0, r3
 8002826:	f000 fd8d 	bl	8003344 <xTaskRemoveFromEventList>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d001      	beq.n	8002834 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002830:	f000 fee0 	bl	80035f4 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002834:	7bbb      	ldrb	r3, [r7, #14]
 8002836:	3b01      	subs	r3, #1
 8002838:	b2db      	uxtb	r3, r3
 800283a:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800283c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002840:	2b00      	cmp	r3, #0
 8002842:	dce9      	bgt.n	8002818 <prvUnlockQueue+0x60>
 8002844:	e000      	b.n	8002848 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002846:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	22ff      	movs	r2, #255	@ 0xff
 800284c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8002850:	f001 fc96 	bl	8004180 <vPortExitCritical>
}
 8002854:	bf00      	nop
 8002856:	3710      	adds	r7, #16
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}

0800285c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b084      	sub	sp, #16
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002864:	f001 fc5a 	bl	800411c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800286c:	2b00      	cmp	r3, #0
 800286e:	d102      	bne.n	8002876 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002870:	2301      	movs	r3, #1
 8002872:	60fb      	str	r3, [r7, #12]
 8002874:	e001      	b.n	800287a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002876:	2300      	movs	r3, #0
 8002878:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800287a:	f001 fc81 	bl	8004180 <vPortExitCritical>

    return xReturn;
 800287e:	68fb      	ldr	r3, [r7, #12]
}
 8002880:	4618      	mov	r0, r3
 8002882:	3710      	adds	r7, #16
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}

08002888 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002888:	b580      	push	{r7, lr}
 800288a:	b086      	sub	sp, #24
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8002892:	2300      	movs	r3, #0
 8002894:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d10b      	bne.n	80028b4 <vQueueAddToRegistry+0x2c>
        __asm volatile
 800289c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028a0:	f383 8811 	msr	BASEPRI, r3
 80028a4:	f3bf 8f6f 	isb	sy
 80028a8:	f3bf 8f4f 	dsb	sy
 80028ac:	60fb      	str	r3, [r7, #12]
    }
 80028ae:	bf00      	nop
 80028b0:	bf00      	nop
 80028b2:	e7fd      	b.n	80028b0 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d024      	beq.n	8002904 <vQueueAddToRegistry+0x7c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80028ba:	2300      	movs	r3, #0
 80028bc:	617b      	str	r3, [r7, #20]
 80028be:	e01e      	b.n	80028fe <vQueueAddToRegistry+0x76>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80028c0:	4a1c      	ldr	r2, [pc, #112]	@ (8002934 <vQueueAddToRegistry+0xac>)
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	00db      	lsls	r3, r3, #3
 80028c6:	4413      	add	r3, r2
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d105      	bne.n	80028dc <vQueueAddToRegistry+0x54>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	00db      	lsls	r3, r3, #3
 80028d4:	4a17      	ldr	r2, [pc, #92]	@ (8002934 <vQueueAddToRegistry+0xac>)
 80028d6:	4413      	add	r3, r2
 80028d8:	613b      	str	r3, [r7, #16]
                    break;
 80028da:	e013      	b.n	8002904 <vQueueAddToRegistry+0x7c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d10a      	bne.n	80028f8 <vQueueAddToRegistry+0x70>
 80028e2:	4a14      	ldr	r2, [pc, #80]	@ (8002934 <vQueueAddToRegistry+0xac>)
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d104      	bne.n	80028f8 <vQueueAddToRegistry+0x70>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	00db      	lsls	r3, r3, #3
 80028f2:	4a10      	ldr	r2, [pc, #64]	@ (8002934 <vQueueAddToRegistry+0xac>)
 80028f4:	4413      	add	r3, r2
 80028f6:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	3301      	adds	r3, #1
 80028fc:	617b      	str	r3, [r7, #20]
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	2b07      	cmp	r3, #7
 8002902:	d9dd      	bls.n	80028c0 <vQueueAddToRegistry+0x38>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d00f      	beq.n	800292a <vQueueAddToRegistry+0xa2>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	683a      	ldr	r2, [r7, #0]
 800290e:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4618      	mov	r0, r3
 800291a:	f003 fba1 	bl	8006060 <SEGGER_SYSVIEW_ShrinkId>
 800291e:	4601      	mov	r1, r0
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	461a      	mov	r2, r3
 8002924:	2071      	movs	r0, #113	@ 0x71
 8002926:	f002 fe15 	bl	8005554 <SEGGER_SYSVIEW_RecordU32x2>
        }
    }
 800292a:	bf00      	nop
 800292c:	3718      	adds	r7, #24
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	200000d8 	.word	0x200000d8

08002938 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002938:	b580      	push	{r7, lr}
 800293a:	b086      	sub	sp, #24
 800293c:	af00      	add	r7, sp, #0
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	60b9      	str	r1, [r7, #8]
 8002942:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002948:	f001 fbe8 	bl	800411c <vPortEnterCritical>
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002952:	b25b      	sxtb	r3, r3
 8002954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002958:	d103      	bne.n	8002962 <vQueueWaitForMessageRestricted+0x2a>
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	2200      	movs	r2, #0
 800295e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002968:	b25b      	sxtb	r3, r3
 800296a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800296e:	d103      	bne.n	8002978 <vQueueWaitForMessageRestricted+0x40>
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	2200      	movs	r2, #0
 8002974:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002978:	f001 fc02 	bl	8004180 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002980:	2b00      	cmp	r3, #0
 8002982:	d106      	bne.n	8002992 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	3324      	adds	r3, #36	@ 0x24
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	68b9      	ldr	r1, [r7, #8]
 800298c:	4618      	mov	r0, r3
 800298e:	f000 fc8f 	bl	80032b0 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002992:	6978      	ldr	r0, [r7, #20]
 8002994:	f7ff ff10 	bl	80027b8 <prvUnlockQueue>
    }
 8002998:	bf00      	nop
 800299a:	3718      	adds	r7, #24
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}

080029a0 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b08c      	sub	sp, #48	@ 0x30
 80029a4:	af04      	add	r7, sp, #16
 80029a6:	60f8      	str	r0, [r7, #12]
 80029a8:	60b9      	str	r1, [r7, #8]
 80029aa:	603b      	str	r3, [r7, #0]
 80029ac:	4613      	mov	r3, r2
 80029ae:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80029b0:	88fb      	ldrh	r3, [r7, #6]
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	4618      	mov	r0, r3
 80029b6:	f001 fce3 	bl	8004380 <pvPortMalloc>
 80029ba:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d013      	beq.n	80029ea <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80029c2:	2058      	movs	r0, #88	@ 0x58
 80029c4:	f001 fcdc 	bl	8004380 <pvPortMalloc>
 80029c8:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d008      	beq.n	80029e2 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80029d0:	2258      	movs	r2, #88	@ 0x58
 80029d2:	2100      	movs	r1, #0
 80029d4:	69f8      	ldr	r0, [r7, #28]
 80029d6:	f003 fea5 	bl	8006724 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	697a      	ldr	r2, [r7, #20]
 80029de:	631a      	str	r2, [r3, #48]	@ 0x30
 80029e0:	e005      	b.n	80029ee <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80029e2:	6978      	ldr	r0, [r7, #20]
 80029e4:	f001 fd88 	bl	80044f8 <vPortFree>
 80029e8:	e001      	b.n	80029ee <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80029ea:	2300      	movs	r3, #0
 80029ec:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d013      	beq.n	8002a1c <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80029f4:	88fa      	ldrh	r2, [r7, #6]
 80029f6:	2300      	movs	r3, #0
 80029f8:	9303      	str	r3, [sp, #12]
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	9302      	str	r3, [sp, #8]
 80029fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a00:	9301      	str	r3, [sp, #4]
 8002a02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a04:	9300      	str	r3, [sp, #0]
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	68b9      	ldr	r1, [r7, #8]
 8002a0a:	68f8      	ldr	r0, [r7, #12]
 8002a0c:	f000 f80e 	bl	8002a2c <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002a10:	69f8      	ldr	r0, [r7, #28]
 8002a12:	f000 f89b 	bl	8002b4c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002a16:	2301      	movs	r3, #1
 8002a18:	61bb      	str	r3, [r7, #24]
 8002a1a:	e002      	b.n	8002a22 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002a1c:	f04f 33ff 	mov.w	r3, #4294967295
 8002a20:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002a22:	69bb      	ldr	r3, [r7, #24]
    }
 8002a24:	4618      	mov	r0, r3
 8002a26:	3720      	adds	r7, #32
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}

08002a2c <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b088      	sub	sp, #32
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	60f8      	str	r0, [r7, #12]
 8002a34:	60b9      	str	r1, [r7, #8]
 8002a36:	607a      	str	r2, [r7, #4]
 8002a38:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002a3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a3c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	461a      	mov	r2, r3
 8002a44:	21a5      	movs	r1, #165	@ 0xa5
 8002a46:	f003 fe6d 	bl	8006724 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002a4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a4c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002a54:	3b01      	subs	r3, #1
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	4413      	add	r3, r2
 8002a5a:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002a5c:	69bb      	ldr	r3, [r7, #24]
 8002a5e:	f023 0307 	bic.w	r3, r3, #7
 8002a62:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002a64:	69bb      	ldr	r3, [r7, #24]
 8002a66:	f003 0307 	and.w	r3, r3, #7
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d00b      	beq.n	8002a86 <prvInitialiseNewTask+0x5a>
        __asm volatile
 8002a6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a72:	f383 8811 	msr	BASEPRI, r3
 8002a76:	f3bf 8f6f 	isb	sy
 8002a7a:	f3bf 8f4f 	dsb	sy
 8002a7e:	617b      	str	r3, [r7, #20]
    }
 8002a80:	bf00      	nop
 8002a82:	bf00      	nop
 8002a84:	e7fd      	b.n	8002a82 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d01e      	beq.n	8002aca <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	61fb      	str	r3, [r7, #28]
 8002a90:	e012      	b.n	8002ab8 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002a92:	68ba      	ldr	r2, [r7, #8]
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	4413      	add	r3, r2
 8002a98:	7819      	ldrb	r1, [r3, #0]
 8002a9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	4413      	add	r3, r2
 8002aa0:	3334      	adds	r3, #52	@ 0x34
 8002aa2:	460a      	mov	r2, r1
 8002aa4:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002aa6:	68ba      	ldr	r2, [r7, #8]
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	4413      	add	r3, r2
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d006      	beq.n	8002ac0 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	61fb      	str	r3, [r7, #28]
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	2b09      	cmp	r3, #9
 8002abc:	d9e9      	bls.n	8002a92 <prvInitialiseNewTask+0x66>
 8002abe:	e000      	b.n	8002ac2 <prvInitialiseNewTask+0x96>
            {
                break;
 8002ac0:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002ac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002aca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002acc:	2b04      	cmp	r3, #4
 8002ace:	d90b      	bls.n	8002ae8 <prvInitialiseNewTask+0xbc>
        __asm volatile
 8002ad0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ad4:	f383 8811 	msr	BASEPRI, r3
 8002ad8:	f3bf 8f6f 	isb	sy
 8002adc:	f3bf 8f4f 	dsb	sy
 8002ae0:	613b      	str	r3, [r7, #16]
    }
 8002ae2:	bf00      	nop
 8002ae4:	bf00      	nop
 8002ae6:	e7fd      	b.n	8002ae4 <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002ae8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002aea:	2b04      	cmp	r3, #4
 8002aec:	d901      	bls.n	8002af2 <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002aee:	2304      	movs	r3, #4
 8002af0:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002af2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002af4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002af6:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8002af8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002afa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002afc:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002afe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b00:	3304      	adds	r3, #4
 8002b02:	4618      	mov	r0, r3
 8002b04:	f7ff fbbe 	bl	8002284 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002b08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b0a:	3318      	adds	r3, #24
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f7ff fbb9 	bl	8002284 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002b12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b14:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b16:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b1a:	f1c3 0205 	rsb	r2, r3, #5
 8002b1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b20:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002b22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b26:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002b28:	683a      	ldr	r2, [r7, #0]
 8002b2a:	68f9      	ldr	r1, [r7, #12]
 8002b2c:	69b8      	ldr	r0, [r7, #24]
 8002b2e:	f001 f943 	bl	8003db8 <pxPortInitialiseStack>
 8002b32:	4602      	mov	r2, r0
 8002b34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b36:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002b38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d002      	beq.n	8002b44 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002b3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b42:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002b44:	bf00      	nop
 8002b46:	3720      	adds	r7, #32
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002b4c:	b5b0      	push	{r4, r5, r7, lr}
 8002b4e:	b086      	sub	sp, #24
 8002b50:	af02      	add	r7, sp, #8
 8002b52:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002b54:	f001 fae2 	bl	800411c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002b58:	4b49      	ldr	r3, [pc, #292]	@ (8002c80 <prvAddNewTaskToReadyList+0x134>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	3301      	adds	r3, #1
 8002b5e:	4a48      	ldr	r2, [pc, #288]	@ (8002c80 <prvAddNewTaskToReadyList+0x134>)
 8002b60:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002b62:	4b48      	ldr	r3, [pc, #288]	@ (8002c84 <prvAddNewTaskToReadyList+0x138>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d109      	bne.n	8002b7e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002b6a:	4a46      	ldr	r2, [pc, #280]	@ (8002c84 <prvAddNewTaskToReadyList+0x138>)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002b70:	4b43      	ldr	r3, [pc, #268]	@ (8002c80 <prvAddNewTaskToReadyList+0x134>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d110      	bne.n	8002b9a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002b78:	f000 fd5a 	bl	8003630 <prvInitialiseTaskLists>
 8002b7c:	e00d      	b.n	8002b9a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002b7e:	4b42      	ldr	r3, [pc, #264]	@ (8002c88 <prvAddNewTaskToReadyList+0x13c>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d109      	bne.n	8002b9a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002b86:	4b3f      	ldr	r3, [pc, #252]	@ (8002c84 <prvAddNewTaskToReadyList+0x138>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d802      	bhi.n	8002b9a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002b94:	4a3b      	ldr	r2, [pc, #236]	@ (8002c84 <prvAddNewTaskToReadyList+0x138>)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002b9a:	4b3c      	ldr	r3, [pc, #240]	@ (8002c8c <prvAddNewTaskToReadyList+0x140>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	3301      	adds	r3, #1
 8002ba0:	4a3a      	ldr	r2, [pc, #232]	@ (8002c8c <prvAddNewTaskToReadyList+0x140>)
 8002ba2:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002ba4:	4b39      	ldr	r3, [pc, #228]	@ (8002c8c <prvAddNewTaskToReadyList+0x140>)
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d016      	beq.n	8002be0 <prvAddNewTaskToReadyList+0x94>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f003 f98d 	bl	8005ed4 <SEGGER_SYSVIEW_OnTaskCreate>
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bca:	461d      	mov	r5, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	461c      	mov	r4, r3
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bd6:	1ae3      	subs	r3, r4, r3
 8002bd8:	9300      	str	r3, [sp, #0]
 8002bda:	462b      	mov	r3, r5
 8002bdc:	f001 fe50 	bl	8004880 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	4618      	mov	r0, r3
 8002be4:	f003 f9fa 	bl	8005fdc <SEGGER_SYSVIEW_OnTaskStartReady>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bec:	2201      	movs	r2, #1
 8002bee:	409a      	lsls	r2, r3
 8002bf0:	4b27      	ldr	r3, [pc, #156]	@ (8002c90 <prvAddNewTaskToReadyList+0x144>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	4a26      	ldr	r2, [pc, #152]	@ (8002c90 <prvAddNewTaskToReadyList+0x144>)
 8002bf8:	6013      	str	r3, [r2, #0]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002bfe:	4925      	ldr	r1, [pc, #148]	@ (8002c94 <prvAddNewTaskToReadyList+0x148>)
 8002c00:	4613      	mov	r3, r2
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	4413      	add	r3, r2
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	440b      	add	r3, r1
 8002c0a:	3304      	adds	r3, #4
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	60fb      	str	r3, [r7, #12]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	68fa      	ldr	r2, [r7, #12]
 8002c14:	609a      	str	r2, [r3, #8]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	689a      	ldr	r2, [r3, #8]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	60da      	str	r2, [r3, #12]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	3204      	adds	r2, #4
 8002c26:	605a      	str	r2, [r3, #4]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	1d1a      	adds	r2, r3, #4
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	609a      	str	r2, [r3, #8]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c34:	4613      	mov	r3, r2
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	4413      	add	r3, r2
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	4a15      	ldr	r2, [pc, #84]	@ (8002c94 <prvAddNewTaskToReadyList+0x148>)
 8002c3e:	441a      	add	r2, r3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	615a      	str	r2, [r3, #20]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c48:	4912      	ldr	r1, [pc, #72]	@ (8002c94 <prvAddNewTaskToReadyList+0x148>)
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	4413      	add	r3, r2
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	440b      	add	r3, r1
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	1c59      	adds	r1, r3, #1
 8002c58:	480e      	ldr	r0, [pc, #56]	@ (8002c94 <prvAddNewTaskToReadyList+0x148>)
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	4413      	add	r3, r2
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	4403      	add	r3, r0
 8002c64:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002c66:	f001 fa8b 	bl	8004180 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002c6a:	4b07      	ldr	r3, [pc, #28]	@ (8002c88 <prvAddNewTaskToReadyList+0x13c>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d001      	beq.n	8002c76 <prvAddNewTaskToReadyList+0x12a>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002c72:	4b04      	ldr	r3, [pc, #16]	@ (8002c84 <prvAddNewTaskToReadyList+0x138>)
 8002c74:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002c76:	bf00      	nop
 8002c78:	3710      	adds	r7, #16
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bdb0      	pop	{r4, r5, r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	200001f0 	.word	0x200001f0
 8002c84:	20000118 	.word	0x20000118
 8002c88:	200001fc 	.word	0x200001fc
 8002c8c:	2000020c 	.word	0x2000020c
 8002c90:	200001f8 	.word	0x200001f8
 8002c94:	2000011c 	.word	0x2000011c

08002c98 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b086      	sub	sp, #24
 8002c9c:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8002c9e:	4b27      	ldr	r3, [pc, #156]	@ (8002d3c <vTaskStartScheduler+0xa4>)
 8002ca0:	9301      	str	r3, [sp, #4]
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	9300      	str	r3, [sp, #0]
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	2282      	movs	r2, #130	@ 0x82
 8002caa:	4925      	ldr	r1, [pc, #148]	@ (8002d40 <vTaskStartScheduler+0xa8>)
 8002cac:	4825      	ldr	r0, [pc, #148]	@ (8002d44 <vTaskStartScheduler+0xac>)
 8002cae:	f7ff fe77 	bl	80029a0 <xTaskCreate>
 8002cb2:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d102      	bne.n	8002cc0 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8002cba:	f000 fdf1 	bl	80038a0 <xTimerCreateTimerTask>
 8002cbe:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d124      	bne.n	8002d10 <vTaskStartScheduler+0x78>
        __asm volatile
 8002cc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cca:	f383 8811 	msr	BASEPRI, r3
 8002cce:	f3bf 8f6f 	isb	sy
 8002cd2:	f3bf 8f4f 	dsb	sy
 8002cd6:	60bb      	str	r3, [r7, #8]
    }
 8002cd8:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8002cda:	4b1b      	ldr	r3, [pc, #108]	@ (8002d48 <vTaskStartScheduler+0xb0>)
 8002cdc:	f04f 32ff 	mov.w	r2, #4294967295
 8002ce0:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002ce2:	4b1a      	ldr	r3, [pc, #104]	@ (8002d4c <vTaskStartScheduler+0xb4>)
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002ce8:	4b19      	ldr	r3, [pc, #100]	@ (8002d50 <vTaskStartScheduler+0xb8>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002cee:	4b19      	ldr	r3, [pc, #100]	@ (8002d54 <vTaskStartScheduler+0xbc>)
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	4b12      	ldr	r3, [pc, #72]	@ (8002d3c <vTaskStartScheduler+0xa4>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d102      	bne.n	8002d00 <vTaskStartScheduler+0x68>
 8002cfa:	f003 f8cf 	bl	8005e9c <SEGGER_SYSVIEW_OnIdle>
 8002cfe:	e004      	b.n	8002d0a <vTaskStartScheduler+0x72>
 8002d00:	4b14      	ldr	r3, [pc, #80]	@ (8002d54 <vTaskStartScheduler+0xbc>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4618      	mov	r0, r3
 8002d06:	f003 f927 	bl	8005f58 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8002d0a:	f001 f8e3 	bl	8003ed4 <xPortStartScheduler>
 8002d0e:	e00f      	b.n	8002d30 <vTaskStartScheduler+0x98>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d16:	d10b      	bne.n	8002d30 <vTaskStartScheduler+0x98>
        __asm volatile
 8002d18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d1c:	f383 8811 	msr	BASEPRI, r3
 8002d20:	f3bf 8f6f 	isb	sy
 8002d24:	f3bf 8f4f 	dsb	sy
 8002d28:	607b      	str	r3, [r7, #4]
    }
 8002d2a:	bf00      	nop
 8002d2c:	bf00      	nop
 8002d2e:	e7fd      	b.n	8002d2c <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002d30:	4b09      	ldr	r3, [pc, #36]	@ (8002d58 <vTaskStartScheduler+0xc0>)
 8002d32:	681b      	ldr	r3, [r3, #0]
}
 8002d34:	bf00      	nop
 8002d36:	3710      	adds	r7, #16
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	20000214 	.word	0x20000214
 8002d40:	08006cec 	.word	0x08006cec
 8002d44:	0800360d 	.word	0x0800360d
 8002d48:	20000210 	.word	0x20000210
 8002d4c:	200001fc 	.word	0x200001fc
 8002d50:	200001f4 	.word	0x200001f4
 8002d54:	20000118 	.word	0x20000118
 8002d58:	2000000c 	.word	0x2000000c

08002d5c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002d60:	4b04      	ldr	r3, [pc, #16]	@ (8002d74 <vTaskSuspendAll+0x18>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	3301      	adds	r3, #1
 8002d66:	4a03      	ldr	r2, [pc, #12]	@ (8002d74 <vTaskSuspendAll+0x18>)
 8002d68:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002d6a:	bf00      	nop
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr
 8002d74:	20000218 	.word	0x20000218

08002d78 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b088      	sub	sp, #32
 8002d7c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002d82:	2300      	movs	r3, #0
 8002d84:	617b      	str	r3, [r7, #20]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002d86:	4b6d      	ldr	r3, [pc, #436]	@ (8002f3c <xTaskResumeAll+0x1c4>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d10b      	bne.n	8002da6 <xTaskResumeAll+0x2e>
        __asm volatile
 8002d8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d92:	f383 8811 	msr	BASEPRI, r3
 8002d96:	f3bf 8f6f 	isb	sy
 8002d9a:	f3bf 8f4f 	dsb	sy
 8002d9e:	607b      	str	r3, [r7, #4]
    }
 8002da0:	bf00      	nop
 8002da2:	bf00      	nop
 8002da4:	e7fd      	b.n	8002da2 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002da6:	f001 f9b9 	bl	800411c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002daa:	4b64      	ldr	r3, [pc, #400]	@ (8002f3c <xTaskResumeAll+0x1c4>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	3b01      	subs	r3, #1
 8002db0:	4a62      	ldr	r2, [pc, #392]	@ (8002f3c <xTaskResumeAll+0x1c4>)
 8002db2:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002db4:	4b61      	ldr	r3, [pc, #388]	@ (8002f3c <xTaskResumeAll+0x1c4>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	f040 80b8 	bne.w	8002f2e <xTaskResumeAll+0x1b6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002dbe:	4b60      	ldr	r3, [pc, #384]	@ (8002f40 <xTaskResumeAll+0x1c8>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	f000 80b3 	beq.w	8002f2e <xTaskResumeAll+0x1b6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002dc8:	e08e      	b.n	8002ee8 <xTaskResumeAll+0x170>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002dca:	4b5e      	ldr	r3, [pc, #376]	@ (8002f44 <xTaskResumeAll+0x1cc>)
 8002dcc:	68db      	ldr	r3, [r3, #12]
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dd6:	613b      	str	r3, [r7, #16]
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	69db      	ldr	r3, [r3, #28]
 8002ddc:	69fa      	ldr	r2, [r7, #28]
 8002dde:	6a12      	ldr	r2, [r2, #32]
 8002de0:	609a      	str	r2, [r3, #8]
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	6a1b      	ldr	r3, [r3, #32]
 8002de6:	69fa      	ldr	r2, [r7, #28]
 8002de8:	69d2      	ldr	r2, [r2, #28]
 8002dea:	605a      	str	r2, [r3, #4]
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	685a      	ldr	r2, [r3, #4]
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	3318      	adds	r3, #24
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d103      	bne.n	8002e00 <xTaskResumeAll+0x88>
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	6a1a      	ldr	r2, [r3, #32]
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	605a      	str	r2, [r3, #4]
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	2200      	movs	r2, #0
 8002e04:	629a      	str	r2, [r3, #40]	@ 0x28
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	1e5a      	subs	r2, r3, #1
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	695b      	ldr	r3, [r3, #20]
 8002e14:	60fb      	str	r3, [r7, #12]
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	69fa      	ldr	r2, [r7, #28]
 8002e1c:	68d2      	ldr	r2, [r2, #12]
 8002e1e:	609a      	str	r2, [r3, #8]
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	69fa      	ldr	r2, [r7, #28]
 8002e26:	6892      	ldr	r2, [r2, #8]
 8002e28:	605a      	str	r2, [r3, #4]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	685a      	ldr	r2, [r3, #4]
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	3304      	adds	r3, #4
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d103      	bne.n	8002e3e <xTaskResumeAll+0xc6>
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	68da      	ldr	r2, [r3, #12]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	605a      	str	r2, [r3, #4]
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	2200      	movs	r2, #0
 8002e42:	615a      	str	r2, [r3, #20]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	1e5a      	subs	r2, r3, #1
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	4618      	mov	r0, r3
 8002e52:	f003 f8c3 	bl	8005fdc <SEGGER_SYSVIEW_OnTaskStartReady>
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	409a      	lsls	r2, r3
 8002e5e:	4b3a      	ldr	r3, [pc, #232]	@ (8002f48 <xTaskResumeAll+0x1d0>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	4a38      	ldr	r2, [pc, #224]	@ (8002f48 <xTaskResumeAll+0x1d0>)
 8002e66:	6013      	str	r3, [r2, #0]
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e6c:	4937      	ldr	r1, [pc, #220]	@ (8002f4c <xTaskResumeAll+0x1d4>)
 8002e6e:	4613      	mov	r3, r2
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	4413      	add	r3, r2
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	440b      	add	r3, r1
 8002e78:	3304      	adds	r3, #4
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	60bb      	str	r3, [r7, #8]
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	68ba      	ldr	r2, [r7, #8]
 8002e82:	609a      	str	r2, [r3, #8]
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	689a      	ldr	r2, [r3, #8]
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	60da      	str	r2, [r3, #12]
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	69fa      	ldr	r2, [r7, #28]
 8002e92:	3204      	adds	r2, #4
 8002e94:	605a      	str	r2, [r3, #4]
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	1d1a      	adds	r2, r3, #4
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	609a      	str	r2, [r3, #8]
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	4413      	add	r3, r2
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	4a28      	ldr	r2, [pc, #160]	@ (8002f4c <xTaskResumeAll+0x1d4>)
 8002eac:	441a      	add	r2, r3
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	615a      	str	r2, [r3, #20]
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002eb6:	4925      	ldr	r1, [pc, #148]	@ (8002f4c <xTaskResumeAll+0x1d4>)
 8002eb8:	4613      	mov	r3, r2
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	4413      	add	r3, r2
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	440b      	add	r3, r1
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	1c59      	adds	r1, r3, #1
 8002ec6:	4821      	ldr	r0, [pc, #132]	@ (8002f4c <xTaskResumeAll+0x1d4>)
 8002ec8:	4613      	mov	r3, r2
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	4413      	add	r3, r2
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	4403      	add	r3, r0
 8002ed2:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ed8:	4b1d      	ldr	r3, [pc, #116]	@ (8002f50 <xTaskResumeAll+0x1d8>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d302      	bcc.n	8002ee8 <xTaskResumeAll+0x170>
                    {
                        xYieldPending = pdTRUE;
 8002ee2:	4b1c      	ldr	r3, [pc, #112]	@ (8002f54 <xTaskResumeAll+0x1dc>)
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002ee8:	4b16      	ldr	r3, [pc, #88]	@ (8002f44 <xTaskResumeAll+0x1cc>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	f47f af6c 	bne.w	8002dca <xTaskResumeAll+0x52>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d001      	beq.n	8002efc <xTaskResumeAll+0x184>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002ef8:	f000 fc18 	bl	800372c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002efc:	4b16      	ldr	r3, [pc, #88]	@ (8002f58 <xTaskResumeAll+0x1e0>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	61bb      	str	r3, [r7, #24]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d010      	beq.n	8002f2a <xTaskResumeAll+0x1b2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002f08:	f000 f84a 	bl	8002fa0 <xTaskIncrementTick>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d002      	beq.n	8002f18 <xTaskResumeAll+0x1a0>
                            {
                                xYieldPending = pdTRUE;
 8002f12:	4b10      	ldr	r3, [pc, #64]	@ (8002f54 <xTaskResumeAll+0x1dc>)
 8002f14:	2201      	movs	r2, #1
 8002f16:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002f18:	69bb      	ldr	r3, [r7, #24]
 8002f1a:	3b01      	subs	r3, #1
 8002f1c:	61bb      	str	r3, [r7, #24]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002f1e:	69bb      	ldr	r3, [r7, #24]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d1f1      	bne.n	8002f08 <xTaskResumeAll+0x190>

                        xPendedTicks = 0;
 8002f24:	4b0c      	ldr	r3, [pc, #48]	@ (8002f58 <xTaskResumeAll+0x1e0>)
 8002f26:	2200      	movs	r2, #0
 8002f28:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002f2a:	4b0a      	ldr	r3, [pc, #40]	@ (8002f54 <xTaskResumeAll+0x1dc>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002f2e:	f001 f927 	bl	8004180 <vPortExitCritical>

    return xAlreadyYielded;
 8002f32:	697b      	ldr	r3, [r7, #20]
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3720      	adds	r7, #32
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}
 8002f3c:	20000218 	.word	0x20000218
 8002f40:	200001f0 	.word	0x200001f0
 8002f44:	200001b0 	.word	0x200001b0
 8002f48:	200001f8 	.word	0x200001f8
 8002f4c:	2000011c 	.word	0x2000011c
 8002f50:	20000118 	.word	0x20000118
 8002f54:	20000204 	.word	0x20000204
 8002f58:	20000200 	.word	0x20000200

08002f5c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b083      	sub	sp, #12
 8002f60:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8002f62:	4b05      	ldr	r3, [pc, #20]	@ (8002f78 <xTaskGetTickCount+0x1c>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8002f68:	687b      	ldr	r3, [r7, #4]
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	370c      	adds	r7, #12
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr
 8002f76:	bf00      	nop
 8002f78:	200001f4 	.word	0x200001f4

08002f7c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b082      	sub	sp, #8
 8002f80:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002f82:	f001 f9bb 	bl	80042fc <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002f86:	2300      	movs	r3, #0
 8002f88:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8002f8a:	4b04      	ldr	r3, [pc, #16]	@ (8002f9c <xTaskGetTickCountFromISR+0x20>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002f90:	683b      	ldr	r3, [r7, #0]
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3708      	adds	r7, #8
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	200001f4 	.word	0x200001f4

08002fa0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b08a      	sub	sp, #40	@ 0x28
 8002fa4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002faa:	4b70      	ldr	r3, [pc, #448]	@ (800316c <xTaskIncrementTick+0x1cc>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	f040 80d2 	bne.w	8003158 <xTaskIncrementTick+0x1b8>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002fb4:	4b6e      	ldr	r3, [pc, #440]	@ (8003170 <xTaskIncrementTick+0x1d0>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	3301      	adds	r3, #1
 8002fba:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002fbc:	4a6c      	ldr	r2, [pc, #432]	@ (8003170 <xTaskIncrementTick+0x1d0>)
 8002fbe:	6a3b      	ldr	r3, [r7, #32]
 8002fc0:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002fc2:	6a3b      	ldr	r3, [r7, #32]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d121      	bne.n	800300c <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8002fc8:	4b6a      	ldr	r3, [pc, #424]	@ (8003174 <xTaskIncrementTick+0x1d4>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d00b      	beq.n	8002fea <xTaskIncrementTick+0x4a>
        __asm volatile
 8002fd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fd6:	f383 8811 	msr	BASEPRI, r3
 8002fda:	f3bf 8f6f 	isb	sy
 8002fde:	f3bf 8f4f 	dsb	sy
 8002fe2:	607b      	str	r3, [r7, #4]
    }
 8002fe4:	bf00      	nop
 8002fe6:	bf00      	nop
 8002fe8:	e7fd      	b.n	8002fe6 <xTaskIncrementTick+0x46>
 8002fea:	4b62      	ldr	r3, [pc, #392]	@ (8003174 <xTaskIncrementTick+0x1d4>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	61fb      	str	r3, [r7, #28]
 8002ff0:	4b61      	ldr	r3, [pc, #388]	@ (8003178 <xTaskIncrementTick+0x1d8>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a5f      	ldr	r2, [pc, #380]	@ (8003174 <xTaskIncrementTick+0x1d4>)
 8002ff6:	6013      	str	r3, [r2, #0]
 8002ff8:	4a5f      	ldr	r2, [pc, #380]	@ (8003178 <xTaskIncrementTick+0x1d8>)
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	6013      	str	r3, [r2, #0]
 8002ffe:	4b5f      	ldr	r3, [pc, #380]	@ (800317c <xTaskIncrementTick+0x1dc>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	3301      	adds	r3, #1
 8003004:	4a5d      	ldr	r2, [pc, #372]	@ (800317c <xTaskIncrementTick+0x1dc>)
 8003006:	6013      	str	r3, [r2, #0]
 8003008:	f000 fb90 	bl	800372c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800300c:	4b5c      	ldr	r3, [pc, #368]	@ (8003180 <xTaskIncrementTick+0x1e0>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	6a3a      	ldr	r2, [r7, #32]
 8003012:	429a      	cmp	r2, r3
 8003014:	f0c0 80a5 	bcc.w	8003162 <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003018:	4b56      	ldr	r3, [pc, #344]	@ (8003174 <xTaskIncrementTick+0x1d4>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d104      	bne.n	800302c <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003022:	4b57      	ldr	r3, [pc, #348]	@ (8003180 <xTaskIncrementTick+0x1e0>)
 8003024:	f04f 32ff 	mov.w	r2, #4294967295
 8003028:	601a      	str	r2, [r3, #0]
                    break;
 800302a:	e09a      	b.n	8003162 <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800302c:	4b51      	ldr	r3, [pc, #324]	@ (8003174 <xTaskIncrementTick+0x1d4>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	68db      	ldr	r3, [r3, #12]
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003036:	69bb      	ldr	r3, [r7, #24]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 800303c:	6a3a      	ldr	r2, [r7, #32]
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	429a      	cmp	r2, r3
 8003042:	d203      	bcs.n	800304c <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003044:	4a4e      	ldr	r2, [pc, #312]	@ (8003180 <xTaskIncrementTick+0x1e0>)
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 800304a:	e08a      	b.n	8003162 <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800304c:	69bb      	ldr	r3, [r7, #24]
 800304e:	695b      	ldr	r3, [r3, #20]
 8003050:	613b      	str	r3, [r7, #16]
 8003052:	69bb      	ldr	r3, [r7, #24]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	69ba      	ldr	r2, [r7, #24]
 8003058:	68d2      	ldr	r2, [r2, #12]
 800305a:	609a      	str	r2, [r3, #8]
 800305c:	69bb      	ldr	r3, [r7, #24]
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	69ba      	ldr	r2, [r7, #24]
 8003062:	6892      	ldr	r2, [r2, #8]
 8003064:	605a      	str	r2, [r3, #4]
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	685a      	ldr	r2, [r3, #4]
 800306a:	69bb      	ldr	r3, [r7, #24]
 800306c:	3304      	adds	r3, #4
 800306e:	429a      	cmp	r2, r3
 8003070:	d103      	bne.n	800307a <xTaskIncrementTick+0xda>
 8003072:	69bb      	ldr	r3, [r7, #24]
 8003074:	68da      	ldr	r2, [r3, #12]
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	605a      	str	r2, [r3, #4]
 800307a:	69bb      	ldr	r3, [r7, #24]
 800307c:	2200      	movs	r2, #0
 800307e:	615a      	str	r2, [r3, #20]
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	1e5a      	subs	r2, r3, #1
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800308a:	69bb      	ldr	r3, [r7, #24]
 800308c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800308e:	2b00      	cmp	r3, #0
 8003090:	d01e      	beq.n	80030d0 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003092:	69bb      	ldr	r3, [r7, #24]
 8003094:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003096:	60fb      	str	r3, [r7, #12]
 8003098:	69bb      	ldr	r3, [r7, #24]
 800309a:	69db      	ldr	r3, [r3, #28]
 800309c:	69ba      	ldr	r2, [r7, #24]
 800309e:	6a12      	ldr	r2, [r2, #32]
 80030a0:	609a      	str	r2, [r3, #8]
 80030a2:	69bb      	ldr	r3, [r7, #24]
 80030a4:	6a1b      	ldr	r3, [r3, #32]
 80030a6:	69ba      	ldr	r2, [r7, #24]
 80030a8:	69d2      	ldr	r2, [r2, #28]
 80030aa:	605a      	str	r2, [r3, #4]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	685a      	ldr	r2, [r3, #4]
 80030b0:	69bb      	ldr	r3, [r7, #24]
 80030b2:	3318      	adds	r3, #24
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d103      	bne.n	80030c0 <xTaskIncrementTick+0x120>
 80030b8:	69bb      	ldr	r3, [r7, #24]
 80030ba:	6a1a      	ldr	r2, [r3, #32]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	605a      	str	r2, [r3, #4]
 80030c0:	69bb      	ldr	r3, [r7, #24]
 80030c2:	2200      	movs	r2, #0
 80030c4:	629a      	str	r2, [r3, #40]	@ 0x28
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	1e5a      	subs	r2, r3, #1
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80030d0:	69bb      	ldr	r3, [r7, #24]
 80030d2:	4618      	mov	r0, r3
 80030d4:	f002 ff82 	bl	8005fdc <SEGGER_SYSVIEW_OnTaskStartReady>
 80030d8:	69bb      	ldr	r3, [r7, #24]
 80030da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030dc:	2201      	movs	r2, #1
 80030de:	409a      	lsls	r2, r3
 80030e0:	4b28      	ldr	r3, [pc, #160]	@ (8003184 <xTaskIncrementTick+0x1e4>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4313      	orrs	r3, r2
 80030e6:	4a27      	ldr	r2, [pc, #156]	@ (8003184 <xTaskIncrementTick+0x1e4>)
 80030e8:	6013      	str	r3, [r2, #0]
 80030ea:	69bb      	ldr	r3, [r7, #24]
 80030ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030ee:	4926      	ldr	r1, [pc, #152]	@ (8003188 <xTaskIncrementTick+0x1e8>)
 80030f0:	4613      	mov	r3, r2
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	4413      	add	r3, r2
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	440b      	add	r3, r1
 80030fa:	3304      	adds	r3, #4
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	60bb      	str	r3, [r7, #8]
 8003100:	69bb      	ldr	r3, [r7, #24]
 8003102:	68ba      	ldr	r2, [r7, #8]
 8003104:	609a      	str	r2, [r3, #8]
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	689a      	ldr	r2, [r3, #8]
 800310a:	69bb      	ldr	r3, [r7, #24]
 800310c:	60da      	str	r2, [r3, #12]
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	69ba      	ldr	r2, [r7, #24]
 8003114:	3204      	adds	r2, #4
 8003116:	605a      	str	r2, [r3, #4]
 8003118:	69bb      	ldr	r3, [r7, #24]
 800311a:	1d1a      	adds	r2, r3, #4
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	609a      	str	r2, [r3, #8]
 8003120:	69bb      	ldr	r3, [r7, #24]
 8003122:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003124:	4613      	mov	r3, r2
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	4413      	add	r3, r2
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	4a16      	ldr	r2, [pc, #88]	@ (8003188 <xTaskIncrementTick+0x1e8>)
 800312e:	441a      	add	r2, r3
 8003130:	69bb      	ldr	r3, [r7, #24]
 8003132:	615a      	str	r2, [r3, #20]
 8003134:	69bb      	ldr	r3, [r7, #24]
 8003136:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003138:	4913      	ldr	r1, [pc, #76]	@ (8003188 <xTaskIncrementTick+0x1e8>)
 800313a:	4613      	mov	r3, r2
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	4413      	add	r3, r2
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	440b      	add	r3, r1
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	1c59      	adds	r1, r3, #1
 8003148:	480f      	ldr	r0, [pc, #60]	@ (8003188 <xTaskIncrementTick+0x1e8>)
 800314a:	4613      	mov	r3, r2
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	4413      	add	r3, r2
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	4403      	add	r3, r0
 8003154:	6019      	str	r1, [r3, #0]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003156:	e75f      	b.n	8003018 <xTaskIncrementTick+0x78>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003158:	4b0c      	ldr	r3, [pc, #48]	@ (800318c <xTaskIncrementTick+0x1ec>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	3301      	adds	r3, #1
 800315e:	4a0b      	ldr	r2, [pc, #44]	@ (800318c <xTaskIncrementTick+0x1ec>)
 8003160:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8003162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003164:	4618      	mov	r0, r3
 8003166:	3728      	adds	r7, #40	@ 0x28
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}
 800316c:	20000218 	.word	0x20000218
 8003170:	200001f4 	.word	0x200001f4
 8003174:	200001a8 	.word	0x200001a8
 8003178:	200001ac 	.word	0x200001ac
 800317c:	20000208 	.word	0x20000208
 8003180:	20000210 	.word	0x20000210
 8003184:	200001f8 	.word	0x200001f8
 8003188:	2000011c 	.word	0x2000011c
 800318c:	20000200 	.word	0x20000200

08003190 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b086      	sub	sp, #24
 8003194:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003196:	4b2d      	ldr	r3, [pc, #180]	@ (800324c <vTaskSwitchContext+0xbc>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d003      	beq.n	80031a6 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800319e:	4b2c      	ldr	r3, [pc, #176]	@ (8003250 <vTaskSwitchContext+0xc0>)
 80031a0:	2201      	movs	r2, #1
 80031a2:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 80031a4:	e04e      	b.n	8003244 <vTaskSwitchContext+0xb4>
        xYieldPending = pdFALSE;
 80031a6:	4b2a      	ldr	r3, [pc, #168]	@ (8003250 <vTaskSwitchContext+0xc0>)
 80031a8:	2200      	movs	r2, #0
 80031aa:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80031ac:	4b29      	ldr	r3, [pc, #164]	@ (8003254 <vTaskSwitchContext+0xc4>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	fab3 f383 	clz	r3, r3
 80031b8:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80031ba:	7afb      	ldrb	r3, [r7, #11]
 80031bc:	f1c3 031f 	rsb	r3, r3, #31
 80031c0:	617b      	str	r3, [r7, #20]
 80031c2:	4925      	ldr	r1, [pc, #148]	@ (8003258 <vTaskSwitchContext+0xc8>)
 80031c4:	697a      	ldr	r2, [r7, #20]
 80031c6:	4613      	mov	r3, r2
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	4413      	add	r3, r2
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	440b      	add	r3, r1
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d10b      	bne.n	80031ee <vTaskSwitchContext+0x5e>
        __asm volatile
 80031d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031da:	f383 8811 	msr	BASEPRI, r3
 80031de:	f3bf 8f6f 	isb	sy
 80031e2:	f3bf 8f4f 	dsb	sy
 80031e6:	607b      	str	r3, [r7, #4]
    }
 80031e8:	bf00      	nop
 80031ea:	bf00      	nop
 80031ec:	e7fd      	b.n	80031ea <vTaskSwitchContext+0x5a>
 80031ee:	697a      	ldr	r2, [r7, #20]
 80031f0:	4613      	mov	r3, r2
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	4413      	add	r3, r2
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	4a17      	ldr	r2, [pc, #92]	@ (8003258 <vTaskSwitchContext+0xc8>)
 80031fa:	4413      	add	r3, r2
 80031fc:	613b      	str	r3, [r7, #16]
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	685a      	ldr	r2, [r3, #4]
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	605a      	str	r2, [r3, #4]
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	685a      	ldr	r2, [r3, #4]
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	3308      	adds	r3, #8
 8003210:	429a      	cmp	r2, r3
 8003212:	d104      	bne.n	800321e <vTaskSwitchContext+0x8e>
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	685a      	ldr	r2, [r3, #4]
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	605a      	str	r2, [r3, #4]
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	4a0d      	ldr	r2, [pc, #52]	@ (800325c <vTaskSwitchContext+0xcc>)
 8003226:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8003228:	4b0c      	ldr	r3, [pc, #48]	@ (800325c <vTaskSwitchContext+0xcc>)
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	4b0c      	ldr	r3, [pc, #48]	@ (8003260 <vTaskSwitchContext+0xd0>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	429a      	cmp	r2, r3
 8003232:	d102      	bne.n	800323a <vTaskSwitchContext+0xaa>
 8003234:	f002 fe32 	bl	8005e9c <SEGGER_SYSVIEW_OnIdle>
}
 8003238:	e004      	b.n	8003244 <vTaskSwitchContext+0xb4>
        traceTASK_SWITCHED_IN();
 800323a:	4b08      	ldr	r3, [pc, #32]	@ (800325c <vTaskSwitchContext+0xcc>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4618      	mov	r0, r3
 8003240:	f002 fe8a 	bl	8005f58 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8003244:	bf00      	nop
 8003246:	3718      	adds	r7, #24
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}
 800324c:	20000218 	.word	0x20000218
 8003250:	20000204 	.word	0x20000204
 8003254:	200001f8 	.word	0x200001f8
 8003258:	2000011c 	.word	0x2000011c
 800325c:	20000118 	.word	0x20000118
 8003260:	20000214 	.word	0x20000214

08003264 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b084      	sub	sp, #16
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d10b      	bne.n	800328c <vTaskPlaceOnEventList+0x28>
        __asm volatile
 8003274:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003278:	f383 8811 	msr	BASEPRI, r3
 800327c:	f3bf 8f6f 	isb	sy
 8003280:	f3bf 8f4f 	dsb	sy
 8003284:	60fb      	str	r3, [r7, #12]
    }
 8003286:	bf00      	nop
 8003288:	bf00      	nop
 800328a:	e7fd      	b.n	8003288 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800328c:	4b07      	ldr	r3, [pc, #28]	@ (80032ac <vTaskPlaceOnEventList+0x48>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	3318      	adds	r3, #24
 8003292:	4619      	mov	r1, r3
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	f7ff f802 	bl	800229e <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800329a:	2101      	movs	r1, #1
 800329c:	6838      	ldr	r0, [r7, #0]
 800329e:	f000 fa7f 	bl	80037a0 <prvAddCurrentTaskToDelayedList>
}
 80032a2:	bf00      	nop
 80032a4:	3710      	adds	r7, #16
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	20000118 	.word	0x20000118

080032b0 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b086      	sub	sp, #24
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	60f8      	str	r0, [r7, #12]
 80032b8:	60b9      	str	r1, [r7, #8]
 80032ba:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d10b      	bne.n	80032da <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 80032c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032c6:	f383 8811 	msr	BASEPRI, r3
 80032ca:	f3bf 8f6f 	isb	sy
 80032ce:	f3bf 8f4f 	dsb	sy
 80032d2:	613b      	str	r3, [r7, #16]
    }
 80032d4:	bf00      	nop
 80032d6:	bf00      	nop
 80032d8:	e7fd      	b.n	80032d6 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	617b      	str	r3, [r7, #20]
 80032e0:	4b17      	ldr	r3, [pc, #92]	@ (8003340 <vTaskPlaceOnEventListRestricted+0x90>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	697a      	ldr	r2, [r7, #20]
 80032e6:	61da      	str	r2, [r3, #28]
 80032e8:	4b15      	ldr	r3, [pc, #84]	@ (8003340 <vTaskPlaceOnEventListRestricted+0x90>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	697a      	ldr	r2, [r7, #20]
 80032ee:	6892      	ldr	r2, [r2, #8]
 80032f0:	621a      	str	r2, [r3, #32]
 80032f2:	4b13      	ldr	r3, [pc, #76]	@ (8003340 <vTaskPlaceOnEventListRestricted+0x90>)
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	3218      	adds	r2, #24
 80032fc:	605a      	str	r2, [r3, #4]
 80032fe:	4b10      	ldr	r3, [pc, #64]	@ (8003340 <vTaskPlaceOnEventListRestricted+0x90>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f103 0218 	add.w	r2, r3, #24
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	609a      	str	r2, [r3, #8]
 800330a:	4b0d      	ldr	r3, [pc, #52]	@ (8003340 <vTaskPlaceOnEventListRestricted+0x90>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	68fa      	ldr	r2, [r7, #12]
 8003310:	629a      	str	r2, [r3, #40]	@ 0x28
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	1c5a      	adds	r2, r3, #1
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d002      	beq.n	8003328 <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 8003322:	f04f 33ff 	mov.w	r3, #4294967295
 8003326:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8003328:	2024      	movs	r0, #36	@ 0x24
 800332a:	f002 f8b9 	bl	80054a0 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800332e:	6879      	ldr	r1, [r7, #4]
 8003330:	68b8      	ldr	r0, [r7, #8]
 8003332:	f000 fa35 	bl	80037a0 <prvAddCurrentTaskToDelayedList>
    }
 8003336:	bf00      	nop
 8003338:	3718      	adds	r7, #24
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	20000118 	.word	0x20000118

08003344 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b08a      	sub	sp, #40	@ 0x28
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	68db      	ldr	r3, [r3, #12]
 8003352:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8003354:	6a3b      	ldr	r3, [r7, #32]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d10b      	bne.n	8003372 <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 800335a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800335e:	f383 8811 	msr	BASEPRI, r3
 8003362:	f3bf 8f6f 	isb	sy
 8003366:	f3bf 8f4f 	dsb	sy
 800336a:	60fb      	str	r3, [r7, #12]
    }
 800336c:	bf00      	nop
 800336e:	bf00      	nop
 8003370:	e7fd      	b.n	800336e <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8003372:	6a3b      	ldr	r3, [r7, #32]
 8003374:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003376:	61fb      	str	r3, [r7, #28]
 8003378:	6a3b      	ldr	r3, [r7, #32]
 800337a:	69db      	ldr	r3, [r3, #28]
 800337c:	6a3a      	ldr	r2, [r7, #32]
 800337e:	6a12      	ldr	r2, [r2, #32]
 8003380:	609a      	str	r2, [r3, #8]
 8003382:	6a3b      	ldr	r3, [r7, #32]
 8003384:	6a1b      	ldr	r3, [r3, #32]
 8003386:	6a3a      	ldr	r2, [r7, #32]
 8003388:	69d2      	ldr	r2, [r2, #28]
 800338a:	605a      	str	r2, [r3, #4]
 800338c:	69fb      	ldr	r3, [r7, #28]
 800338e:	685a      	ldr	r2, [r3, #4]
 8003390:	6a3b      	ldr	r3, [r7, #32]
 8003392:	3318      	adds	r3, #24
 8003394:	429a      	cmp	r2, r3
 8003396:	d103      	bne.n	80033a0 <xTaskRemoveFromEventList+0x5c>
 8003398:	6a3b      	ldr	r3, [r7, #32]
 800339a:	6a1a      	ldr	r2, [r3, #32]
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	605a      	str	r2, [r3, #4]
 80033a0:	6a3b      	ldr	r3, [r7, #32]
 80033a2:	2200      	movs	r2, #0
 80033a4:	629a      	str	r2, [r3, #40]	@ 0x28
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	1e5a      	subs	r2, r3, #1
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80033b0:	4b4b      	ldr	r3, [pc, #300]	@ (80034e0 <xTaskRemoveFromEventList+0x19c>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d162      	bne.n	800347e <xTaskRemoveFromEventList+0x13a>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80033b8:	6a3b      	ldr	r3, [r7, #32]
 80033ba:	695b      	ldr	r3, [r3, #20]
 80033bc:	617b      	str	r3, [r7, #20]
 80033be:	6a3b      	ldr	r3, [r7, #32]
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	6a3a      	ldr	r2, [r7, #32]
 80033c4:	68d2      	ldr	r2, [r2, #12]
 80033c6:	609a      	str	r2, [r3, #8]
 80033c8:	6a3b      	ldr	r3, [r7, #32]
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	6a3a      	ldr	r2, [r7, #32]
 80033ce:	6892      	ldr	r2, [r2, #8]
 80033d0:	605a      	str	r2, [r3, #4]
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	685a      	ldr	r2, [r3, #4]
 80033d6:	6a3b      	ldr	r3, [r7, #32]
 80033d8:	3304      	adds	r3, #4
 80033da:	429a      	cmp	r2, r3
 80033dc:	d103      	bne.n	80033e6 <xTaskRemoveFromEventList+0xa2>
 80033de:	6a3b      	ldr	r3, [r7, #32]
 80033e0:	68da      	ldr	r2, [r3, #12]
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	605a      	str	r2, [r3, #4]
 80033e6:	6a3b      	ldr	r3, [r7, #32]
 80033e8:	2200      	movs	r2, #0
 80033ea:	615a      	str	r2, [r3, #20]
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	1e5a      	subs	r2, r3, #1
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80033f6:	6a3b      	ldr	r3, [r7, #32]
 80033f8:	4618      	mov	r0, r3
 80033fa:	f002 fdef 	bl	8005fdc <SEGGER_SYSVIEW_OnTaskStartReady>
 80033fe:	6a3b      	ldr	r3, [r7, #32]
 8003400:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003402:	2201      	movs	r2, #1
 8003404:	409a      	lsls	r2, r3
 8003406:	4b37      	ldr	r3, [pc, #220]	@ (80034e4 <xTaskRemoveFromEventList+0x1a0>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4313      	orrs	r3, r2
 800340c:	4a35      	ldr	r2, [pc, #212]	@ (80034e4 <xTaskRemoveFromEventList+0x1a0>)
 800340e:	6013      	str	r3, [r2, #0]
 8003410:	6a3b      	ldr	r3, [r7, #32]
 8003412:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003414:	4934      	ldr	r1, [pc, #208]	@ (80034e8 <xTaskRemoveFromEventList+0x1a4>)
 8003416:	4613      	mov	r3, r2
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	4413      	add	r3, r2
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	440b      	add	r3, r1
 8003420:	3304      	adds	r3, #4
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	613b      	str	r3, [r7, #16]
 8003426:	6a3b      	ldr	r3, [r7, #32]
 8003428:	693a      	ldr	r2, [r7, #16]
 800342a:	609a      	str	r2, [r3, #8]
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	689a      	ldr	r2, [r3, #8]
 8003430:	6a3b      	ldr	r3, [r7, #32]
 8003432:	60da      	str	r2, [r3, #12]
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	6a3a      	ldr	r2, [r7, #32]
 800343a:	3204      	adds	r2, #4
 800343c:	605a      	str	r2, [r3, #4]
 800343e:	6a3b      	ldr	r3, [r7, #32]
 8003440:	1d1a      	adds	r2, r3, #4
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	609a      	str	r2, [r3, #8]
 8003446:	6a3b      	ldr	r3, [r7, #32]
 8003448:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800344a:	4613      	mov	r3, r2
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	4413      	add	r3, r2
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	4a25      	ldr	r2, [pc, #148]	@ (80034e8 <xTaskRemoveFromEventList+0x1a4>)
 8003454:	441a      	add	r2, r3
 8003456:	6a3b      	ldr	r3, [r7, #32]
 8003458:	615a      	str	r2, [r3, #20]
 800345a:	6a3b      	ldr	r3, [r7, #32]
 800345c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800345e:	4922      	ldr	r1, [pc, #136]	@ (80034e8 <xTaskRemoveFromEventList+0x1a4>)
 8003460:	4613      	mov	r3, r2
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	4413      	add	r3, r2
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	440b      	add	r3, r1
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	1c59      	adds	r1, r3, #1
 800346e:	481e      	ldr	r0, [pc, #120]	@ (80034e8 <xTaskRemoveFromEventList+0x1a4>)
 8003470:	4613      	mov	r3, r2
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	4413      	add	r3, r2
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	4403      	add	r3, r0
 800347a:	6019      	str	r1, [r3, #0]
 800347c:	e01b      	b.n	80034b6 <xTaskRemoveFromEventList+0x172>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800347e:	4b1b      	ldr	r3, [pc, #108]	@ (80034ec <xTaskRemoveFromEventList+0x1a8>)
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	61bb      	str	r3, [r7, #24]
 8003484:	6a3b      	ldr	r3, [r7, #32]
 8003486:	69ba      	ldr	r2, [r7, #24]
 8003488:	61da      	str	r2, [r3, #28]
 800348a:	69bb      	ldr	r3, [r7, #24]
 800348c:	689a      	ldr	r2, [r3, #8]
 800348e:	6a3b      	ldr	r3, [r7, #32]
 8003490:	621a      	str	r2, [r3, #32]
 8003492:	69bb      	ldr	r3, [r7, #24]
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	6a3a      	ldr	r2, [r7, #32]
 8003498:	3218      	adds	r2, #24
 800349a:	605a      	str	r2, [r3, #4]
 800349c:	6a3b      	ldr	r3, [r7, #32]
 800349e:	f103 0218 	add.w	r2, r3, #24
 80034a2:	69bb      	ldr	r3, [r7, #24]
 80034a4:	609a      	str	r2, [r3, #8]
 80034a6:	6a3b      	ldr	r3, [r7, #32]
 80034a8:	4a10      	ldr	r2, [pc, #64]	@ (80034ec <xTaskRemoveFromEventList+0x1a8>)
 80034aa:	629a      	str	r2, [r3, #40]	@ 0x28
 80034ac:	4b0f      	ldr	r3, [pc, #60]	@ (80034ec <xTaskRemoveFromEventList+0x1a8>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	3301      	adds	r3, #1
 80034b2:	4a0e      	ldr	r2, [pc, #56]	@ (80034ec <xTaskRemoveFromEventList+0x1a8>)
 80034b4:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80034b6:	6a3b      	ldr	r3, [r7, #32]
 80034b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034ba:	4b0d      	ldr	r3, [pc, #52]	@ (80034f0 <xTaskRemoveFromEventList+0x1ac>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d905      	bls.n	80034d0 <xTaskRemoveFromEventList+0x18c>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80034c4:	2301      	movs	r3, #1
 80034c6:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80034c8:	4b0a      	ldr	r3, [pc, #40]	@ (80034f4 <xTaskRemoveFromEventList+0x1b0>)
 80034ca:	2201      	movs	r2, #1
 80034cc:	601a      	str	r2, [r3, #0]
 80034ce:	e001      	b.n	80034d4 <xTaskRemoveFromEventList+0x190>
    }
    else
    {
        xReturn = pdFALSE;
 80034d0:	2300      	movs	r3, #0
 80034d2:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    return xReturn;
 80034d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3728      	adds	r7, #40	@ 0x28
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	20000218 	.word	0x20000218
 80034e4:	200001f8 	.word	0x200001f8
 80034e8:	2000011c 	.word	0x2000011c
 80034ec:	200001b0 	.word	0x200001b0
 80034f0:	20000118 	.word	0x20000118
 80034f4:	20000204 	.word	0x20000204

080034f8 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003500:	4b06      	ldr	r3, [pc, #24]	@ (800351c <vTaskInternalSetTimeOutState+0x24>)
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003508:	4b05      	ldr	r3, [pc, #20]	@ (8003520 <vTaskInternalSetTimeOutState+0x28>)
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	605a      	str	r2, [r3, #4]
}
 8003510:	bf00      	nop
 8003512:	370c      	adds	r7, #12
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr
 800351c:	20000208 	.word	0x20000208
 8003520:	200001f4 	.word	0x200001f4

08003524 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b088      	sub	sp, #32
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d10b      	bne.n	800354c <xTaskCheckForTimeOut+0x28>
        __asm volatile
 8003534:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003538:	f383 8811 	msr	BASEPRI, r3
 800353c:	f3bf 8f6f 	isb	sy
 8003540:	f3bf 8f4f 	dsb	sy
 8003544:	613b      	str	r3, [r7, #16]
    }
 8003546:	bf00      	nop
 8003548:	bf00      	nop
 800354a:	e7fd      	b.n	8003548 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d10b      	bne.n	800356a <xTaskCheckForTimeOut+0x46>
        __asm volatile
 8003552:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003556:	f383 8811 	msr	BASEPRI, r3
 800355a:	f3bf 8f6f 	isb	sy
 800355e:	f3bf 8f4f 	dsb	sy
 8003562:	60fb      	str	r3, [r7, #12]
    }
 8003564:	bf00      	nop
 8003566:	bf00      	nop
 8003568:	e7fd      	b.n	8003566 <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 800356a:	f000 fdd7 	bl	800411c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800356e:	4b1f      	ldr	r3, [pc, #124]	@ (80035ec <xTaskCheckForTimeOut+0xc8>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	69ba      	ldr	r2, [r7, #24]
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003586:	d102      	bne.n	800358e <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003588:	2300      	movs	r3, #0
 800358a:	61fb      	str	r3, [r7, #28]
 800358c:	e026      	b.n	80035dc <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	4b17      	ldr	r3, [pc, #92]	@ (80035f0 <xTaskCheckForTimeOut+0xcc>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	429a      	cmp	r2, r3
 8003598:	d00a      	beq.n	80035b0 <xTaskCheckForTimeOut+0x8c>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	69ba      	ldr	r2, [r7, #24]
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d305      	bcc.n	80035b0 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80035a4:	2301      	movs	r3, #1
 80035a6:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	2200      	movs	r2, #0
 80035ac:	601a      	str	r2, [r3, #0]
 80035ae:	e015      	b.n	80035dc <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	697a      	ldr	r2, [r7, #20]
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d20b      	bcs.n	80035d2 <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	1ad2      	subs	r2, r2, r3
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f7ff ff96 	bl	80034f8 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80035cc:	2300      	movs	r3, #0
 80035ce:	61fb      	str	r3, [r7, #28]
 80035d0:	e004      	b.n	80035dc <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	2200      	movs	r2, #0
 80035d6:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80035d8:	2301      	movs	r3, #1
 80035da:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80035dc:	f000 fdd0 	bl	8004180 <vPortExitCritical>

    return xReturn;
 80035e0:	69fb      	ldr	r3, [r7, #28]
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3720      	adds	r7, #32
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	200001f4 	.word	0x200001f4
 80035f0:	20000208 	.word	0x20000208

080035f4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80035f4:	b480      	push	{r7}
 80035f6:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80035f8:	4b03      	ldr	r3, [pc, #12]	@ (8003608 <vTaskMissedYield+0x14>)
 80035fa:	2201      	movs	r2, #1
 80035fc:	601a      	str	r2, [r3, #0]
}
 80035fe:	bf00      	nop
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr
 8003608:	20000204 	.word	0x20000204

0800360c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b082      	sub	sp, #8
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003614:	f000 f84c 	bl	80036b0 <prvCheckTasksWaitingTermination>
        {
            /* If we are not using preemption we keep forcing a task switch to
             * see if any other task has become available.  If we are using
             * preemption we don't need to do this as any task becoming available
             * will automatically get the processor anyway. */
            taskYIELD();
 8003618:	4b04      	ldr	r3, [pc, #16]	@ (800362c <prvIdleTask+0x20>)
 800361a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800361e:	601a      	str	r2, [r3, #0]
 8003620:	f3bf 8f4f 	dsb	sy
 8003624:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003628:	bf00      	nop
 800362a:	e7f3      	b.n	8003614 <prvIdleTask+0x8>
 800362c:	e000ed04 	.word	0xe000ed04

08003630 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b082      	sub	sp, #8
 8003634:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003636:	2300      	movs	r3, #0
 8003638:	607b      	str	r3, [r7, #4]
 800363a:	e00c      	b.n	8003656 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800363c:	687a      	ldr	r2, [r7, #4]
 800363e:	4613      	mov	r3, r2
 8003640:	009b      	lsls	r3, r3, #2
 8003642:	4413      	add	r3, r2
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	4a12      	ldr	r2, [pc, #72]	@ (8003690 <prvInitialiseTaskLists+0x60>)
 8003648:	4413      	add	r3, r2
 800364a:	4618      	mov	r0, r3
 800364c:	f7fe fdfa 	bl	8002244 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	3301      	adds	r3, #1
 8003654:	607b      	str	r3, [r7, #4]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2b04      	cmp	r3, #4
 800365a:	d9ef      	bls.n	800363c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800365c:	480d      	ldr	r0, [pc, #52]	@ (8003694 <prvInitialiseTaskLists+0x64>)
 800365e:	f7fe fdf1 	bl	8002244 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003662:	480d      	ldr	r0, [pc, #52]	@ (8003698 <prvInitialiseTaskLists+0x68>)
 8003664:	f7fe fdee 	bl	8002244 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003668:	480c      	ldr	r0, [pc, #48]	@ (800369c <prvInitialiseTaskLists+0x6c>)
 800366a:	f7fe fdeb 	bl	8002244 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800366e:	480c      	ldr	r0, [pc, #48]	@ (80036a0 <prvInitialiseTaskLists+0x70>)
 8003670:	f7fe fde8 	bl	8002244 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8003674:	480b      	ldr	r0, [pc, #44]	@ (80036a4 <prvInitialiseTaskLists+0x74>)
 8003676:	f7fe fde5 	bl	8002244 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800367a:	4b0b      	ldr	r3, [pc, #44]	@ (80036a8 <prvInitialiseTaskLists+0x78>)
 800367c:	4a05      	ldr	r2, [pc, #20]	@ (8003694 <prvInitialiseTaskLists+0x64>)
 800367e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003680:	4b0a      	ldr	r3, [pc, #40]	@ (80036ac <prvInitialiseTaskLists+0x7c>)
 8003682:	4a05      	ldr	r2, [pc, #20]	@ (8003698 <prvInitialiseTaskLists+0x68>)
 8003684:	601a      	str	r2, [r3, #0]
}
 8003686:	bf00      	nop
 8003688:	3708      	adds	r7, #8
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	2000011c 	.word	0x2000011c
 8003694:	20000180 	.word	0x20000180
 8003698:	20000194 	.word	0x20000194
 800369c:	200001b0 	.word	0x200001b0
 80036a0:	200001c4 	.word	0x200001c4
 80036a4:	200001dc 	.word	0x200001dc
 80036a8:	200001a8 	.word	0x200001a8
 80036ac:	200001ac 	.word	0x200001ac

080036b0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b082      	sub	sp, #8
 80036b4:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80036b6:	e019      	b.n	80036ec <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 80036b8:	f000 fd30 	bl	800411c <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80036bc:	4b10      	ldr	r3, [pc, #64]	@ (8003700 <prvCheckTasksWaitingTermination+0x50>)
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	68db      	ldr	r3, [r3, #12]
 80036c2:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	3304      	adds	r3, #4
 80036c8:	4618      	mov	r0, r3
 80036ca:	f7fe fe21 	bl	8002310 <uxListRemove>
                --uxCurrentNumberOfTasks;
 80036ce:	4b0d      	ldr	r3, [pc, #52]	@ (8003704 <prvCheckTasksWaitingTermination+0x54>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	3b01      	subs	r3, #1
 80036d4:	4a0b      	ldr	r2, [pc, #44]	@ (8003704 <prvCheckTasksWaitingTermination+0x54>)
 80036d6:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 80036d8:	4b0b      	ldr	r3, [pc, #44]	@ (8003708 <prvCheckTasksWaitingTermination+0x58>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	3b01      	subs	r3, #1
 80036de:	4a0a      	ldr	r2, [pc, #40]	@ (8003708 <prvCheckTasksWaitingTermination+0x58>)
 80036e0:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 80036e2:	f000 fd4d 	bl	8004180 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f000 f810 	bl	800370c <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80036ec:	4b06      	ldr	r3, [pc, #24]	@ (8003708 <prvCheckTasksWaitingTermination+0x58>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d1e1      	bne.n	80036b8 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 80036f4:	bf00      	nop
 80036f6:	bf00      	nop
 80036f8:	3708      	adds	r7, #8
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	bf00      	nop
 8003700:	200001c4 	.word	0x200001c4
 8003704:	200001f0 	.word	0x200001f0
 8003708:	200001d8 	.word	0x200001d8

0800370c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800370c:	b580      	push	{r7, lr}
 800370e:	b082      	sub	sp, #8
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003718:	4618      	mov	r0, r3
 800371a:	f000 feed 	bl	80044f8 <vPortFree>
            vPortFree( pxTCB );
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f000 feea 	bl	80044f8 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003724:	bf00      	nop
 8003726:	3708      	adds	r7, #8
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}

0800372c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800372c:	b480      	push	{r7}
 800372e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003730:	4b0a      	ldr	r3, [pc, #40]	@ (800375c <prvResetNextTaskUnblockTime+0x30>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d104      	bne.n	8003744 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800373a:	4b09      	ldr	r3, [pc, #36]	@ (8003760 <prvResetNextTaskUnblockTime+0x34>)
 800373c:	f04f 32ff 	mov.w	r2, #4294967295
 8003740:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003742:	e005      	b.n	8003750 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003744:	4b05      	ldr	r3, [pc, #20]	@ (800375c <prvResetNextTaskUnblockTime+0x30>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	68db      	ldr	r3, [r3, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a04      	ldr	r2, [pc, #16]	@ (8003760 <prvResetNextTaskUnblockTime+0x34>)
 800374e:	6013      	str	r3, [r2, #0]
}
 8003750:	bf00      	nop
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr
 800375a:	bf00      	nop
 800375c:	200001a8 	.word	0x200001a8
 8003760:	20000210 	.word	0x20000210

08003764 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003764:	b480      	push	{r7}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800376a:	4b0b      	ldr	r3, [pc, #44]	@ (8003798 <xTaskGetSchedulerState+0x34>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d102      	bne.n	8003778 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003772:	2301      	movs	r3, #1
 8003774:	607b      	str	r3, [r7, #4]
 8003776:	e008      	b.n	800378a <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003778:	4b08      	ldr	r3, [pc, #32]	@ (800379c <xTaskGetSchedulerState+0x38>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d102      	bne.n	8003786 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003780:	2302      	movs	r3, #2
 8003782:	607b      	str	r3, [r7, #4]
 8003784:	e001      	b.n	800378a <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003786:	2300      	movs	r3, #0
 8003788:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800378a:	687b      	ldr	r3, [r7, #4]
    }
 800378c:	4618      	mov	r0, r3
 800378e:	370c      	adds	r7, #12
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr
 8003798:	200001fc 	.word	0x200001fc
 800379c:	20000218 	.word	0x20000218

080037a0 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b086      	sub	sp, #24
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80037aa:	4b36      	ldr	r3, [pc, #216]	@ (8003884 <prvAddCurrentTaskToDelayedList+0xe4>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80037b0:	4b35      	ldr	r3, [pc, #212]	@ (8003888 <prvAddCurrentTaskToDelayedList+0xe8>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	3304      	adds	r3, #4
 80037b6:	4618      	mov	r0, r3
 80037b8:	f7fe fdaa 	bl	8002310 <uxListRemove>
 80037bc:	4603      	mov	r3, r0
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d10b      	bne.n	80037da <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80037c2:	4b31      	ldr	r3, [pc, #196]	@ (8003888 <prvAddCurrentTaskToDelayedList+0xe8>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037c8:	2201      	movs	r2, #1
 80037ca:	fa02 f303 	lsl.w	r3, r2, r3
 80037ce:	43da      	mvns	r2, r3
 80037d0:	4b2e      	ldr	r3, [pc, #184]	@ (800388c <prvAddCurrentTaskToDelayedList+0xec>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4013      	ands	r3, r2
 80037d6:	4a2d      	ldr	r2, [pc, #180]	@ (800388c <prvAddCurrentTaskToDelayedList+0xec>)
 80037d8:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037e0:	d124      	bne.n	800382c <prvAddCurrentTaskToDelayedList+0x8c>
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d021      	beq.n	800382c <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80037e8:	4b29      	ldr	r3, [pc, #164]	@ (8003890 <prvAddCurrentTaskToDelayedList+0xf0>)
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	613b      	str	r3, [r7, #16]
 80037ee:	4b26      	ldr	r3, [pc, #152]	@ (8003888 <prvAddCurrentTaskToDelayedList+0xe8>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	693a      	ldr	r2, [r7, #16]
 80037f4:	609a      	str	r2, [r3, #8]
 80037f6:	4b24      	ldr	r3, [pc, #144]	@ (8003888 <prvAddCurrentTaskToDelayedList+0xe8>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	693a      	ldr	r2, [r7, #16]
 80037fc:	6892      	ldr	r2, [r2, #8]
 80037fe:	60da      	str	r2, [r3, #12]
 8003800:	4b21      	ldr	r3, [pc, #132]	@ (8003888 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	3204      	adds	r2, #4
 800380a:	605a      	str	r2, [r3, #4]
 800380c:	4b1e      	ldr	r3, [pc, #120]	@ (8003888 <prvAddCurrentTaskToDelayedList+0xe8>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	1d1a      	adds	r2, r3, #4
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	609a      	str	r2, [r3, #8]
 8003816:	4b1c      	ldr	r3, [pc, #112]	@ (8003888 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a1d      	ldr	r2, [pc, #116]	@ (8003890 <prvAddCurrentTaskToDelayedList+0xf0>)
 800381c:	615a      	str	r2, [r3, #20]
 800381e:	4b1c      	ldr	r3, [pc, #112]	@ (8003890 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	3301      	adds	r3, #1
 8003824:	4a1a      	ldr	r2, [pc, #104]	@ (8003890 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003826:	6013      	str	r3, [r2, #0]
 8003828:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800382a:	e026      	b.n	800387a <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 800382c:	697a      	ldr	r2, [r7, #20]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4413      	add	r3, r2
 8003832:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003834:	4b14      	ldr	r3, [pc, #80]	@ (8003888 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	68fa      	ldr	r2, [r7, #12]
 800383a:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 800383c:	68fa      	ldr	r2, [r7, #12]
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	429a      	cmp	r2, r3
 8003842:	d209      	bcs.n	8003858 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003844:	4b13      	ldr	r3, [pc, #76]	@ (8003894 <prvAddCurrentTaskToDelayedList+0xf4>)
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	4b0f      	ldr	r3, [pc, #60]	@ (8003888 <prvAddCurrentTaskToDelayedList+0xe8>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	3304      	adds	r3, #4
 800384e:	4619      	mov	r1, r3
 8003850:	4610      	mov	r0, r2
 8003852:	f7fe fd24 	bl	800229e <vListInsert>
}
 8003856:	e010      	b.n	800387a <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003858:	4b0f      	ldr	r3, [pc, #60]	@ (8003898 <prvAddCurrentTaskToDelayedList+0xf8>)
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	4b0a      	ldr	r3, [pc, #40]	@ (8003888 <prvAddCurrentTaskToDelayedList+0xe8>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	3304      	adds	r3, #4
 8003862:	4619      	mov	r1, r3
 8003864:	4610      	mov	r0, r2
 8003866:	f7fe fd1a 	bl	800229e <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800386a:	4b0c      	ldr	r3, [pc, #48]	@ (800389c <prvAddCurrentTaskToDelayedList+0xfc>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	68fa      	ldr	r2, [r7, #12]
 8003870:	429a      	cmp	r2, r3
 8003872:	d202      	bcs.n	800387a <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8003874:	4a09      	ldr	r2, [pc, #36]	@ (800389c <prvAddCurrentTaskToDelayedList+0xfc>)
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	6013      	str	r3, [r2, #0]
}
 800387a:	bf00      	nop
 800387c:	3718      	adds	r7, #24
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	200001f4 	.word	0x200001f4
 8003888:	20000118 	.word	0x20000118
 800388c:	200001f8 	.word	0x200001f8
 8003890:	200001dc 	.word	0x200001dc
 8003894:	200001ac 	.word	0x200001ac
 8003898:	200001a8 	.word	0x200001a8
 800389c:	20000210 	.word	0x20000210

080038a0 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b084      	sub	sp, #16
 80038a4:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80038a6:	2300      	movs	r3, #0
 80038a8:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80038aa:	f000 fa4f 	bl	8003d4c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80038ae:	4b12      	ldr	r3, [pc, #72]	@ (80038f8 <xTimerCreateTimerTask+0x58>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d00b      	beq.n	80038ce <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 80038b6:	4b11      	ldr	r3, [pc, #68]	@ (80038fc <xTimerCreateTimerTask+0x5c>)
 80038b8:	9301      	str	r3, [sp, #4]
 80038ba:	2302      	movs	r3, #2
 80038bc:	9300      	str	r3, [sp, #0]
 80038be:	2300      	movs	r3, #0
 80038c0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80038c4:	490e      	ldr	r1, [pc, #56]	@ (8003900 <xTimerCreateTimerTask+0x60>)
 80038c6:	480f      	ldr	r0, [pc, #60]	@ (8003904 <xTimerCreateTimerTask+0x64>)
 80038c8:	f7ff f86a 	bl	80029a0 <xTaskCreate>
 80038cc:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d10b      	bne.n	80038ec <xTimerCreateTimerTask+0x4c>
        __asm volatile
 80038d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038d8:	f383 8811 	msr	BASEPRI, r3
 80038dc:	f3bf 8f6f 	isb	sy
 80038e0:	f3bf 8f4f 	dsb	sy
 80038e4:	603b      	str	r3, [r7, #0]
    }
 80038e6:	bf00      	nop
 80038e8:	bf00      	nop
 80038ea:	e7fd      	b.n	80038e8 <xTimerCreateTimerTask+0x48>
        return xReturn;
 80038ec:	687b      	ldr	r3, [r7, #4]
    }
 80038ee:	4618      	mov	r0, r3
 80038f0:	3708      	adds	r7, #8
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	2000024c 	.word	0x2000024c
 80038fc:	20000250 	.word	0x20000250
 8003900:	08006cf4 	.word	0x08006cf4
 8003904:	080039ad 	.word	0x080039ad

08003908 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	60f8      	str	r0, [r7, #12]
 8003910:	60b9      	str	r1, [r7, #8]
 8003912:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003914:	e008      	b.n	8003928 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	699b      	ldr	r3, [r3, #24]
 800391a:	68ba      	ldr	r2, [r7, #8]
 800391c:	4413      	add	r3, r2
 800391e:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	6a1b      	ldr	r3, [r3, #32]
 8003924:	68f8      	ldr	r0, [r7, #12]
 8003926:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	699a      	ldr	r2, [r3, #24]
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	18d1      	adds	r1, r2, r3
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	68f8      	ldr	r0, [r7, #12]
 8003936:	f000 f8df 	bl	8003af8 <prvInsertTimerInActiveList>
 800393a:	4603      	mov	r3, r0
 800393c:	2b00      	cmp	r3, #0
 800393e:	d1ea      	bne.n	8003916 <prvReloadTimer+0xe>
        }
    }
 8003940:	bf00      	nop
 8003942:	bf00      	nop
 8003944:	3710      	adds	r7, #16
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
	...

0800394c <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800394c:	b580      	push	{r7, lr}
 800394e:	b084      	sub	sp, #16
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003956:	4b14      	ldr	r3, [pc, #80]	@ (80039a8 <prvProcessExpiredTimer+0x5c>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	3304      	adds	r3, #4
 8003964:	4618      	mov	r0, r3
 8003966:	f7fe fcd3 	bl	8002310 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003970:	f003 0304 	and.w	r3, r3, #4
 8003974:	2b00      	cmp	r3, #0
 8003976:	d005      	beq.n	8003984 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8003978:	683a      	ldr	r2, [r7, #0]
 800397a:	6879      	ldr	r1, [r7, #4]
 800397c:	68f8      	ldr	r0, [r7, #12]
 800397e:	f7ff ffc3 	bl	8003908 <prvReloadTimer>
 8003982:	e008      	b.n	8003996 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800398a:	f023 0301 	bic.w	r3, r3, #1
 800398e:	b2da      	uxtb	r2, r3
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	6a1b      	ldr	r3, [r3, #32]
 800399a:	68f8      	ldr	r0, [r7, #12]
 800399c:	4798      	blx	r3
    }
 800399e:	bf00      	nop
 80039a0:	3710      	adds	r7, #16
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	20000244 	.word	0x20000244

080039ac <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b084      	sub	sp, #16
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80039b4:	f107 0308 	add.w	r3, r7, #8
 80039b8:	4618      	mov	r0, r3
 80039ba:	f000 f859 	bl	8003a70 <prvGetNextExpireTime>
 80039be:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	4619      	mov	r1, r3
 80039c4:	68f8      	ldr	r0, [r7, #12]
 80039c6:	f000 f805 	bl	80039d4 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80039ca:	f000 f8d7 	bl	8003b7c <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80039ce:	bf00      	nop
 80039d0:	e7f0      	b.n	80039b4 <prvTimerTask+0x8>
	...

080039d4 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80039de:	f7ff f9bd 	bl	8002d5c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80039e2:	f107 0308 	add.w	r3, r7, #8
 80039e6:	4618      	mov	r0, r3
 80039e8:	f000 f866 	bl	8003ab8 <prvSampleTimeNow>
 80039ec:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d130      	bne.n	8003a56 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d10a      	bne.n	8003a10 <prvProcessTimerOrBlockTask+0x3c>
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d806      	bhi.n	8003a10 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003a02:	f7ff f9b9 	bl	8002d78 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003a06:	68f9      	ldr	r1, [r7, #12]
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	f7ff ff9f 	bl	800394c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003a0e:	e024      	b.n	8003a5a <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d008      	beq.n	8003a28 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003a16:	4b13      	ldr	r3, [pc, #76]	@ (8003a64 <prvProcessTimerOrBlockTask+0x90>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d101      	bne.n	8003a24 <prvProcessTimerOrBlockTask+0x50>
 8003a20:	2301      	movs	r3, #1
 8003a22:	e000      	b.n	8003a26 <prvProcessTimerOrBlockTask+0x52>
 8003a24:	2300      	movs	r3, #0
 8003a26:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003a28:	4b0f      	ldr	r3, [pc, #60]	@ (8003a68 <prvProcessTimerOrBlockTask+0x94>)
 8003a2a:	6818      	ldr	r0, [r3, #0]
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	683a      	ldr	r2, [r7, #0]
 8003a34:	4619      	mov	r1, r3
 8003a36:	f7fe ff7f 	bl	8002938 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003a3a:	f7ff f99d 	bl	8002d78 <xTaskResumeAll>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d10a      	bne.n	8003a5a <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003a44:	4b09      	ldr	r3, [pc, #36]	@ (8003a6c <prvProcessTimerOrBlockTask+0x98>)
 8003a46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a4a:	601a      	str	r2, [r3, #0]
 8003a4c:	f3bf 8f4f 	dsb	sy
 8003a50:	f3bf 8f6f 	isb	sy
    }
 8003a54:	e001      	b.n	8003a5a <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003a56:	f7ff f98f 	bl	8002d78 <xTaskResumeAll>
    }
 8003a5a:	bf00      	nop
 8003a5c:	3710      	adds	r7, #16
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	20000248 	.word	0x20000248
 8003a68:	2000024c 	.word	0x2000024c
 8003a6c:	e000ed04 	.word	0xe000ed04

08003a70 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003a70:	b480      	push	{r7}
 8003a72:	b085      	sub	sp, #20
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003a78:	4b0e      	ldr	r3, [pc, #56]	@ (8003ab4 <prvGetNextExpireTime+0x44>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d101      	bne.n	8003a86 <prvGetNextExpireTime+0x16>
 8003a82:	2201      	movs	r2, #1
 8003a84:	e000      	b.n	8003a88 <prvGetNextExpireTime+0x18>
 8003a86:	2200      	movs	r2, #0
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d105      	bne.n	8003aa0 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003a94:	4b07      	ldr	r3, [pc, #28]	@ (8003ab4 <prvGetNextExpireTime+0x44>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	60fb      	str	r3, [r7, #12]
 8003a9e:	e001      	b.n	8003aa4 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
    }
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3714      	adds	r7, #20
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr
 8003ab2:	bf00      	nop
 8003ab4:	20000244 	.word	0x20000244

08003ab8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b084      	sub	sp, #16
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003ac0:	f7ff fa4c 	bl	8002f5c <xTaskGetTickCount>
 8003ac4:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003ac6:	4b0b      	ldr	r3, [pc, #44]	@ (8003af4 <prvSampleTimeNow+0x3c>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	68fa      	ldr	r2, [r7, #12]
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d205      	bcs.n	8003adc <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003ad0:	f000 f916 	bl	8003d00 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	601a      	str	r2, [r3, #0]
 8003ada:	e002      	b.n	8003ae2 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003ae2:	4a04      	ldr	r2, [pc, #16]	@ (8003af4 <prvSampleTimeNow+0x3c>)
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
    }
 8003aea:	4618      	mov	r0, r3
 8003aec:	3710      	adds	r7, #16
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	20000254 	.word	0x20000254

08003af8 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b086      	sub	sp, #24
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	60f8      	str	r0, [r7, #12]
 8003b00:	60b9      	str	r1, [r7, #8]
 8003b02:	607a      	str	r2, [r7, #4]
 8003b04:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003b06:	2300      	movs	r3, #0
 8003b08:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	68ba      	ldr	r2, [r7, #8]
 8003b0e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	68fa      	ldr	r2, [r7, #12]
 8003b14:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003b16:	68ba      	ldr	r2, [r7, #8]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d812      	bhi.n	8003b44 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	1ad2      	subs	r2, r2, r3
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	699b      	ldr	r3, [r3, #24]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d302      	bcc.n	8003b32 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	617b      	str	r3, [r7, #20]
 8003b30:	e01b      	b.n	8003b6a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003b32:	4b10      	ldr	r3, [pc, #64]	@ (8003b74 <prvInsertTimerInActiveList+0x7c>)
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	3304      	adds	r3, #4
 8003b3a:	4619      	mov	r1, r3
 8003b3c:	4610      	mov	r0, r2
 8003b3e:	f7fe fbae 	bl	800229e <vListInsert>
 8003b42:	e012      	b.n	8003b6a <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003b44:	687a      	ldr	r2, [r7, #4]
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d206      	bcs.n	8003b5a <prvInsertTimerInActiveList+0x62>
 8003b4c:	68ba      	ldr	r2, [r7, #8]
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d302      	bcc.n	8003b5a <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003b54:	2301      	movs	r3, #1
 8003b56:	617b      	str	r3, [r7, #20]
 8003b58:	e007      	b.n	8003b6a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003b5a:	4b07      	ldr	r3, [pc, #28]	@ (8003b78 <prvInsertTimerInActiveList+0x80>)
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	3304      	adds	r3, #4
 8003b62:	4619      	mov	r1, r3
 8003b64:	4610      	mov	r0, r2
 8003b66:	f7fe fb9a 	bl	800229e <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003b6a:	697b      	ldr	r3, [r7, #20]
    }
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3718      	adds	r7, #24
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	20000248 	.word	0x20000248
 8003b78:	20000244 	.word	0x20000244

08003b7c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b088      	sub	sp, #32
 8003b80:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003b82:	e0a9      	b.n	8003cd8 <prvProcessReceivedCommands+0x15c>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	f2c0 80a6 	blt.w	8003cd8 <prvProcessReceivedCommands+0x15c>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003b90:	69fb      	ldr	r3, [r7, #28]
 8003b92:	695b      	ldr	r3, [r3, #20]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d004      	beq.n	8003ba2 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003b98:	69fb      	ldr	r3, [r7, #28]
 8003b9a:	3304      	adds	r3, #4
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f7fe fbb7 	bl	8002310 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003ba2:	1d3b      	adds	r3, r7, #4
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f7ff ff87 	bl	8003ab8 <prvSampleTimeNow>
 8003baa:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	3b01      	subs	r3, #1
 8003bb0:	2b08      	cmp	r3, #8
 8003bb2:	f200 808e 	bhi.w	8003cd2 <prvProcessReceivedCommands+0x156>
 8003bb6:	a201      	add	r2, pc, #4	@ (adr r2, 8003bbc <prvProcessReceivedCommands+0x40>)
 8003bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bbc:	08003be1 	.word	0x08003be1
 8003bc0:	08003be1 	.word	0x08003be1
 8003bc4:	08003c49 	.word	0x08003c49
 8003bc8:	08003c5d 	.word	0x08003c5d
 8003bcc:	08003ca9 	.word	0x08003ca9
 8003bd0:	08003be1 	.word	0x08003be1
 8003bd4:	08003be1 	.word	0x08003be1
 8003bd8:	08003c49 	.word	0x08003c49
 8003bdc:	08003c5d 	.word	0x08003c5d
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003be6:	f043 0301 	orr.w	r3, r3, #1
 8003bea:	b2da      	uxtb	r2, r3
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003bf2:	68fa      	ldr	r2, [r7, #12]
 8003bf4:	69fb      	ldr	r3, [r7, #28]
 8003bf6:	699b      	ldr	r3, [r3, #24]
 8003bf8:	18d1      	adds	r1, r2, r3
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	69ba      	ldr	r2, [r7, #24]
 8003bfe:	69f8      	ldr	r0, [r7, #28]
 8003c00:	f7ff ff7a 	bl	8003af8 <prvInsertTimerInActiveList>
 8003c04:	4603      	mov	r3, r0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d065      	beq.n	8003cd6 <prvProcessReceivedCommands+0x15a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003c0a:	69fb      	ldr	r3, [r7, #28]
 8003c0c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003c10:	f003 0304 	and.w	r3, r3, #4
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d009      	beq.n	8003c2c <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8003c18:	68fa      	ldr	r2, [r7, #12]
 8003c1a:	69fb      	ldr	r3, [r7, #28]
 8003c1c:	699b      	ldr	r3, [r3, #24]
 8003c1e:	4413      	add	r3, r2
 8003c20:	69ba      	ldr	r2, [r7, #24]
 8003c22:	4619      	mov	r1, r3
 8003c24:	69f8      	ldr	r0, [r7, #28]
 8003c26:	f7ff fe6f 	bl	8003908 <prvReloadTimer>
 8003c2a:	e008      	b.n	8003c3e <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003c32:	f023 0301 	bic.w	r3, r3, #1
 8003c36:	b2da      	uxtb	r2, r3
 8003c38:	69fb      	ldr	r3, [r7, #28]
 8003c3a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003c3e:	69fb      	ldr	r3, [r7, #28]
 8003c40:	6a1b      	ldr	r3, [r3, #32]
 8003c42:	69f8      	ldr	r0, [r7, #28]
 8003c44:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8003c46:	e046      	b.n	8003cd6 <prvProcessReceivedCommands+0x15a>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003c48:	69fb      	ldr	r3, [r7, #28]
 8003c4a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003c4e:	f023 0301 	bic.w	r3, r3, #1
 8003c52:	b2da      	uxtb	r2, r3
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8003c5a:	e03d      	b.n	8003cd8 <prvProcessReceivedCommands+0x15c>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003c5c:	69fb      	ldr	r3, [r7, #28]
 8003c5e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003c62:	f043 0301 	orr.w	r3, r3, #1
 8003c66:	b2da      	uxtb	r2, r3
 8003c68:	69fb      	ldr	r3, [r7, #28]
 8003c6a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003c6e:	68fa      	ldr	r2, [r7, #12]
 8003c70:	69fb      	ldr	r3, [r7, #28]
 8003c72:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	699b      	ldr	r3, [r3, #24]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d10b      	bne.n	8003c94 <prvProcessReceivedCommands+0x118>
        __asm volatile
 8003c7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c80:	f383 8811 	msr	BASEPRI, r3
 8003c84:	f3bf 8f6f 	isb	sy
 8003c88:	f3bf 8f4f 	dsb	sy
 8003c8c:	617b      	str	r3, [r7, #20]
    }
 8003c8e:	bf00      	nop
 8003c90:	bf00      	nop
 8003c92:	e7fd      	b.n	8003c90 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	699a      	ldr	r2, [r3, #24]
 8003c98:	69bb      	ldr	r3, [r7, #24]
 8003c9a:	18d1      	adds	r1, r2, r3
 8003c9c:	69bb      	ldr	r3, [r7, #24]
 8003c9e:	69ba      	ldr	r2, [r7, #24]
 8003ca0:	69f8      	ldr	r0, [r7, #28]
 8003ca2:	f7ff ff29 	bl	8003af8 <prvInsertTimerInActiveList>
                        break;
 8003ca6:	e017      	b.n	8003cd8 <prvProcessReceivedCommands+0x15c>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003ca8:	69fb      	ldr	r3, [r7, #28]
 8003caa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003cae:	f003 0302 	and.w	r3, r3, #2
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d103      	bne.n	8003cbe <prvProcessReceivedCommands+0x142>
                            {
                                vPortFree( pxTimer );
 8003cb6:	69f8      	ldr	r0, [r7, #28]
 8003cb8:	f000 fc1e 	bl	80044f8 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003cbc:	e00c      	b.n	8003cd8 <prvProcessReceivedCommands+0x15c>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003cbe:	69fb      	ldr	r3, [r7, #28]
 8003cc0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003cc4:	f023 0301 	bic.w	r3, r3, #1
 8003cc8:	b2da      	uxtb	r2, r3
 8003cca:	69fb      	ldr	r3, [r7, #28]
 8003ccc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8003cd0:	e002      	b.n	8003cd8 <prvProcessReceivedCommands+0x15c>

                    default:
                        /* Don't expect to get here. */
                        break;
 8003cd2:	bf00      	nop
 8003cd4:	e000      	b.n	8003cd8 <prvProcessReceivedCommands+0x15c>
                        break;
 8003cd6:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003cd8:	4b08      	ldr	r3, [pc, #32]	@ (8003cfc <prvProcessReceivedCommands+0x180>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f107 0108 	add.w	r1, r7, #8
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f7fe fc3a 	bl	800255c <xQueueReceive>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	f47f af4a 	bne.w	8003b84 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8003cf0:	bf00      	nop
 8003cf2:	bf00      	nop
 8003cf4:	3720      	adds	r7, #32
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
 8003cfa:	bf00      	nop
 8003cfc:	2000024c 	.word	0x2000024c

08003d00 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b082      	sub	sp, #8
 8003d04:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003d06:	e009      	b.n	8003d1c <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003d08:	4b0e      	ldr	r3, [pc, #56]	@ (8003d44 <prvSwitchTimerLists+0x44>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	68db      	ldr	r3, [r3, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8003d12:	f04f 31ff 	mov.w	r1, #4294967295
 8003d16:	6838      	ldr	r0, [r7, #0]
 8003d18:	f7ff fe18 	bl	800394c <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003d1c:	4b09      	ldr	r3, [pc, #36]	@ (8003d44 <prvSwitchTimerLists+0x44>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d1f0      	bne.n	8003d08 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8003d26:	4b07      	ldr	r3, [pc, #28]	@ (8003d44 <prvSwitchTimerLists+0x44>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8003d2c:	4b06      	ldr	r3, [pc, #24]	@ (8003d48 <prvSwitchTimerLists+0x48>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a04      	ldr	r2, [pc, #16]	@ (8003d44 <prvSwitchTimerLists+0x44>)
 8003d32:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003d34:	4a04      	ldr	r2, [pc, #16]	@ (8003d48 <prvSwitchTimerLists+0x48>)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6013      	str	r3, [r2, #0]
    }
 8003d3a:	bf00      	nop
 8003d3c:	3708      	adds	r7, #8
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}
 8003d42:	bf00      	nop
 8003d44:	20000244 	.word	0x20000244
 8003d48:	20000248 	.word	0x20000248

08003d4c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003d50:	f000 f9e4 	bl	800411c <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003d54:	4b12      	ldr	r3, [pc, #72]	@ (8003da0 <prvCheckForValidListAndQueue+0x54>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d11d      	bne.n	8003d98 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8003d5c:	4811      	ldr	r0, [pc, #68]	@ (8003da4 <prvCheckForValidListAndQueue+0x58>)
 8003d5e:	f7fe fa71 	bl	8002244 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003d62:	4811      	ldr	r0, [pc, #68]	@ (8003da8 <prvCheckForValidListAndQueue+0x5c>)
 8003d64:	f7fe fa6e 	bl	8002244 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003d68:	4b10      	ldr	r3, [pc, #64]	@ (8003dac <prvCheckForValidListAndQueue+0x60>)
 8003d6a:	4a0e      	ldr	r2, [pc, #56]	@ (8003da4 <prvCheckForValidListAndQueue+0x58>)
 8003d6c:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003d6e:	4b10      	ldr	r3, [pc, #64]	@ (8003db0 <prvCheckForValidListAndQueue+0x64>)
 8003d70:	4a0d      	ldr	r2, [pc, #52]	@ (8003da8 <prvCheckForValidListAndQueue+0x5c>)
 8003d72:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003d74:	2200      	movs	r2, #0
 8003d76:	210c      	movs	r1, #12
 8003d78:	200a      	movs	r0, #10
 8003d7a:	f7fe fb77 	bl	800246c <xQueueGenericCreate>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	4a07      	ldr	r2, [pc, #28]	@ (8003da0 <prvCheckForValidListAndQueue+0x54>)
 8003d82:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8003d84:	4b06      	ldr	r3, [pc, #24]	@ (8003da0 <prvCheckForValidListAndQueue+0x54>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d005      	beq.n	8003d98 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003d8c:	4b04      	ldr	r3, [pc, #16]	@ (8003da0 <prvCheckForValidListAndQueue+0x54>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4908      	ldr	r1, [pc, #32]	@ (8003db4 <prvCheckForValidListAndQueue+0x68>)
 8003d92:	4618      	mov	r0, r3
 8003d94:	f7fe fd78 	bl	8002888 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003d98:	f000 f9f2 	bl	8004180 <vPortExitCritical>
    }
 8003d9c:	bf00      	nop
 8003d9e:	bd80      	pop	{r7, pc}
 8003da0:	2000024c 	.word	0x2000024c
 8003da4:	2000021c 	.word	0x2000021c
 8003da8:	20000230 	.word	0x20000230
 8003dac:	20000244 	.word	0x20000244
 8003db0:	20000248 	.word	0x20000248
 8003db4:	08006cfc 	.word	0x08006cfc

08003db8 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003db8:	b480      	push	{r7}
 8003dba:	b085      	sub	sp, #20
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	60f8      	str	r0, [r7, #12]
 8003dc0:	60b9      	str	r1, [r7, #8]
 8003dc2:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	3b04      	subs	r3, #4
 8003dc8:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003dd0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	3b04      	subs	r3, #4
 8003dd6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	f023 0201 	bic.w	r2, r3, #1
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	3b04      	subs	r3, #4
 8003de6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003de8:	4a0c      	ldr	r2, [pc, #48]	@ (8003e1c <pxPortInitialiseStack+0x64>)
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	3b14      	subs	r3, #20
 8003df2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003df4:	687a      	ldr	r2, [r7, #4]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	3b04      	subs	r3, #4
 8003dfe:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f06f 0202 	mvn.w	r2, #2
 8003e06:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	3b20      	subs	r3, #32
 8003e0c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	3714      	adds	r7, #20
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr
 8003e1c:	08003e21 	.word	0x08003e21

08003e20 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003e20:	b480      	push	{r7}
 8003e22:	b085      	sub	sp, #20
 8003e24:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003e26:	2300      	movs	r3, #0
 8003e28:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003e2a:	4b13      	ldr	r3, [pc, #76]	@ (8003e78 <prvTaskExitError+0x58>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e32:	d00b      	beq.n	8003e4c <prvTaskExitError+0x2c>
        __asm volatile
 8003e34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e38:	f383 8811 	msr	BASEPRI, r3
 8003e3c:	f3bf 8f6f 	isb	sy
 8003e40:	f3bf 8f4f 	dsb	sy
 8003e44:	60fb      	str	r3, [r7, #12]
    }
 8003e46:	bf00      	nop
 8003e48:	bf00      	nop
 8003e4a:	e7fd      	b.n	8003e48 <prvTaskExitError+0x28>
        __asm volatile
 8003e4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e50:	f383 8811 	msr	BASEPRI, r3
 8003e54:	f3bf 8f6f 	isb	sy
 8003e58:	f3bf 8f4f 	dsb	sy
 8003e5c:	60bb      	str	r3, [r7, #8]
    }
 8003e5e:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003e60:	bf00      	nop
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d0fc      	beq.n	8003e62 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003e68:	bf00      	nop
 8003e6a:	bf00      	nop
 8003e6c:	3714      	adds	r7, #20
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr
 8003e76:	bf00      	nop
 8003e78:	20000010 	.word	0x20000010
 8003e7c:	00000000 	.word	0x00000000

08003e80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003e80:	4b07      	ldr	r3, [pc, #28]	@ (8003ea0 <pxCurrentTCBConst2>)
 8003e82:	6819      	ldr	r1, [r3, #0]
 8003e84:	6808      	ldr	r0, [r1, #0]
 8003e86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e8a:	f380 8809 	msr	PSP, r0
 8003e8e:	f3bf 8f6f 	isb	sy
 8003e92:	f04f 0000 	mov.w	r0, #0
 8003e96:	f380 8811 	msr	BASEPRI, r0
 8003e9a:	4770      	bx	lr
 8003e9c:	f3af 8000 	nop.w

08003ea0 <pxCurrentTCBConst2>:
 8003ea0:	20000118 	.word	0x20000118
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003ea4:	bf00      	nop
 8003ea6:	bf00      	nop

08003ea8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003ea8:	4808      	ldr	r0, [pc, #32]	@ (8003ecc <prvPortStartFirstTask+0x24>)
 8003eaa:	6800      	ldr	r0, [r0, #0]
 8003eac:	6800      	ldr	r0, [r0, #0]
 8003eae:	f380 8808 	msr	MSP, r0
 8003eb2:	f04f 0000 	mov.w	r0, #0
 8003eb6:	f380 8814 	msr	CONTROL, r0
 8003eba:	b662      	cpsie	i
 8003ebc:	b661      	cpsie	f
 8003ebe:	f3bf 8f4f 	dsb	sy
 8003ec2:	f3bf 8f6f 	isb	sy
 8003ec6:	df00      	svc	0
 8003ec8:	bf00      	nop
 8003eca:	0000      	.short	0x0000
 8003ecc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003ed0:	bf00      	nop
 8003ed2:	bf00      	nop

08003ed4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b086      	sub	sp, #24
 8003ed8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003eda:	4b47      	ldr	r3, [pc, #284]	@ (8003ff8 <xPortStartScheduler+0x124>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a47      	ldr	r2, [pc, #284]	@ (8003ffc <xPortStartScheduler+0x128>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d10b      	bne.n	8003efc <xPortStartScheduler+0x28>
        __asm volatile
 8003ee4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ee8:	f383 8811 	msr	BASEPRI, r3
 8003eec:	f3bf 8f6f 	isb	sy
 8003ef0:	f3bf 8f4f 	dsb	sy
 8003ef4:	613b      	str	r3, [r7, #16]
    }
 8003ef6:	bf00      	nop
 8003ef8:	bf00      	nop
 8003efa:	e7fd      	b.n	8003ef8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003efc:	4b3e      	ldr	r3, [pc, #248]	@ (8003ff8 <xPortStartScheduler+0x124>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a3f      	ldr	r2, [pc, #252]	@ (8004000 <xPortStartScheduler+0x12c>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d10b      	bne.n	8003f1e <xPortStartScheduler+0x4a>
        __asm volatile
 8003f06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f0a:	f383 8811 	msr	BASEPRI, r3
 8003f0e:	f3bf 8f6f 	isb	sy
 8003f12:	f3bf 8f4f 	dsb	sy
 8003f16:	60fb      	str	r3, [r7, #12]
    }
 8003f18:	bf00      	nop
 8003f1a:	bf00      	nop
 8003f1c:	e7fd      	b.n	8003f1a <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003f1e:	4b39      	ldr	r3, [pc, #228]	@ (8004004 <xPortStartScheduler+0x130>)
 8003f20:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	781b      	ldrb	r3, [r3, #0]
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	22ff      	movs	r2, #255	@ 0xff
 8003f2e:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	781b      	ldrb	r3, [r3, #0]
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003f38:	78fb      	ldrb	r3, [r7, #3]
 8003f3a:	b2db      	uxtb	r3, r3
 8003f3c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003f40:	b2da      	uxtb	r2, r3
 8003f42:	4b31      	ldr	r3, [pc, #196]	@ (8004008 <xPortStartScheduler+0x134>)
 8003f44:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003f46:	4b31      	ldr	r3, [pc, #196]	@ (800400c <xPortStartScheduler+0x138>)
 8003f48:	2207      	movs	r2, #7
 8003f4a:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003f4c:	e009      	b.n	8003f62 <xPortStartScheduler+0x8e>
        {
            ulMaxPRIGROUPValue--;
 8003f4e:	4b2f      	ldr	r3, [pc, #188]	@ (800400c <xPortStartScheduler+0x138>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	3b01      	subs	r3, #1
 8003f54:	4a2d      	ldr	r2, [pc, #180]	@ (800400c <xPortStartScheduler+0x138>)
 8003f56:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003f58:	78fb      	ldrb	r3, [r7, #3]
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	005b      	lsls	r3, r3, #1
 8003f5e:	b2db      	uxtb	r3, r3
 8003f60:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003f62:	78fb      	ldrb	r3, [r7, #3]
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f6a:	2b80      	cmp	r3, #128	@ 0x80
 8003f6c:	d0ef      	beq.n	8003f4e <xPortStartScheduler+0x7a>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003f6e:	4b27      	ldr	r3, [pc, #156]	@ (800400c <xPortStartScheduler+0x138>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f1c3 0307 	rsb	r3, r3, #7
 8003f76:	2b04      	cmp	r3, #4
 8003f78:	d00b      	beq.n	8003f92 <xPortStartScheduler+0xbe>
        __asm volatile
 8003f7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f7e:	f383 8811 	msr	BASEPRI, r3
 8003f82:	f3bf 8f6f 	isb	sy
 8003f86:	f3bf 8f4f 	dsb	sy
 8003f8a:	60bb      	str	r3, [r7, #8]
    }
 8003f8c:	bf00      	nop
 8003f8e:	bf00      	nop
 8003f90:	e7fd      	b.n	8003f8e <xPortStartScheduler+0xba>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003f92:	4b1e      	ldr	r3, [pc, #120]	@ (800400c <xPortStartScheduler+0x138>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	021b      	lsls	r3, r3, #8
 8003f98:	4a1c      	ldr	r2, [pc, #112]	@ (800400c <xPortStartScheduler+0x138>)
 8003f9a:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003f9c:	4b1b      	ldr	r3, [pc, #108]	@ (800400c <xPortStartScheduler+0x138>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003fa4:	4a19      	ldr	r2, [pc, #100]	@ (800400c <xPortStartScheduler+0x138>)
 8003fa6:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	b2da      	uxtb	r2, r3
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003fb0:	4b17      	ldr	r3, [pc, #92]	@ (8004010 <xPortStartScheduler+0x13c>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a16      	ldr	r2, [pc, #88]	@ (8004010 <xPortStartScheduler+0x13c>)
 8003fb6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003fba:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003fbc:	4b14      	ldr	r3, [pc, #80]	@ (8004010 <xPortStartScheduler+0x13c>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a13      	ldr	r2, [pc, #76]	@ (8004010 <xPortStartScheduler+0x13c>)
 8003fc2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8003fc6:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003fc8:	f000 f968 	bl	800429c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003fcc:	4b11      	ldr	r3, [pc, #68]	@ (8004014 <xPortStartScheduler+0x140>)
 8003fce:	2200      	movs	r2, #0
 8003fd0:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8003fd2:	f000 f987 	bl	80042e4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003fd6:	4b10      	ldr	r3, [pc, #64]	@ (8004018 <xPortStartScheduler+0x144>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a0f      	ldr	r2, [pc, #60]	@ (8004018 <xPortStartScheduler+0x144>)
 8003fdc:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8003fe0:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003fe2:	f7ff ff61 	bl	8003ea8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003fe6:	f7ff f8d3 	bl	8003190 <vTaskSwitchContext>
    prvTaskExitError();
 8003fea:	f7ff ff19 	bl	8003e20 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003fee:	2300      	movs	r3, #0
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3718      	adds	r7, #24
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	e000ed00 	.word	0xe000ed00
 8003ffc:	410fc271 	.word	0x410fc271
 8004000:	410fc270 	.word	0x410fc270
 8004004:	e000e400 	.word	0xe000e400
 8004008:	20000258 	.word	0x20000258
 800400c:	2000025c 	.word	0x2000025c
 8004010:	e000ed20 	.word	0xe000ed20
 8004014:	20000010 	.word	0x20000010
 8004018:	e000ef34 	.word	0xe000ef34

0800401c <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 800401c:	b480      	push	{r7}
 800401e:	b087      	sub	sp, #28
 8004020:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004022:	4b38      	ldr	r3, [pc, #224]	@ (8004104 <vInitPrioGroupValue+0xe8>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a38      	ldr	r2, [pc, #224]	@ (8004108 <vInitPrioGroupValue+0xec>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d10b      	bne.n	8004044 <vInitPrioGroupValue+0x28>
        __asm volatile
 800402c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004030:	f383 8811 	msr	BASEPRI, r3
 8004034:	f3bf 8f6f 	isb	sy
 8004038:	f3bf 8f4f 	dsb	sy
 800403c:	613b      	str	r3, [r7, #16]
    }
 800403e:	bf00      	nop
 8004040:	bf00      	nop
 8004042:	e7fd      	b.n	8004040 <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004044:	4b2f      	ldr	r3, [pc, #188]	@ (8004104 <vInitPrioGroupValue+0xe8>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a30      	ldr	r2, [pc, #192]	@ (800410c <vInitPrioGroupValue+0xf0>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d10b      	bne.n	8004066 <vInitPrioGroupValue+0x4a>
        __asm volatile
 800404e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004052:	f383 8811 	msr	BASEPRI, r3
 8004056:	f3bf 8f6f 	isb	sy
 800405a:	f3bf 8f4f 	dsb	sy
 800405e:	60fb      	str	r3, [r7, #12]
    }
 8004060:	bf00      	nop
 8004062:	bf00      	nop
 8004064:	e7fd      	b.n	8004062 <vInitPrioGroupValue+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004066:	4b2a      	ldr	r3, [pc, #168]	@ (8004110 <vInitPrioGroupValue+0xf4>)
 8004068:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	781b      	ldrb	r3, [r3, #0]
 800406e:	b2db      	uxtb	r3, r3
 8004070:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	22ff      	movs	r2, #255	@ 0xff
 8004076:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	781b      	ldrb	r3, [r3, #0]
 800407c:	b2db      	uxtb	r3, r3
 800407e:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004080:	78fb      	ldrb	r3, [r7, #3]
 8004082:	b2db      	uxtb	r3, r3
 8004084:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004088:	b2da      	uxtb	r2, r3
 800408a:	4b22      	ldr	r3, [pc, #136]	@ (8004114 <vInitPrioGroupValue+0xf8>)
 800408c:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800408e:	4b22      	ldr	r3, [pc, #136]	@ (8004118 <vInitPrioGroupValue+0xfc>)
 8004090:	2207      	movs	r2, #7
 8004092:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004094:	e009      	b.n	80040aa <vInitPrioGroupValue+0x8e>
            {
                ulMaxPRIGROUPValue--;
 8004096:	4b20      	ldr	r3, [pc, #128]	@ (8004118 <vInitPrioGroupValue+0xfc>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	3b01      	subs	r3, #1
 800409c:	4a1e      	ldr	r2, [pc, #120]	@ (8004118 <vInitPrioGroupValue+0xfc>)
 800409e:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80040a0:	78fb      	ldrb	r3, [r7, #3]
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	005b      	lsls	r3, r3, #1
 80040a6:	b2db      	uxtb	r3, r3
 80040a8:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80040aa:	78fb      	ldrb	r3, [r7, #3]
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040b2:	2b80      	cmp	r3, #128	@ 0x80
 80040b4:	d0ef      	beq.n	8004096 <vInitPrioGroupValue+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80040b6:	4b18      	ldr	r3, [pc, #96]	@ (8004118 <vInitPrioGroupValue+0xfc>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f1c3 0307 	rsb	r3, r3, #7
 80040be:	2b04      	cmp	r3, #4
 80040c0:	d00b      	beq.n	80040da <vInitPrioGroupValue+0xbe>
        __asm volatile
 80040c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040c6:	f383 8811 	msr	BASEPRI, r3
 80040ca:	f3bf 8f6f 	isb	sy
 80040ce:	f3bf 8f4f 	dsb	sy
 80040d2:	60bb      	str	r3, [r7, #8]
    }
 80040d4:	bf00      	nop
 80040d6:	bf00      	nop
 80040d8:	e7fd      	b.n	80040d6 <vInitPrioGroupValue+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80040da:	4b0f      	ldr	r3, [pc, #60]	@ (8004118 <vInitPrioGroupValue+0xfc>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	021b      	lsls	r3, r3, #8
 80040e0:	4a0d      	ldr	r2, [pc, #52]	@ (8004118 <vInitPrioGroupValue+0xfc>)
 80040e2:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80040e4:	4b0c      	ldr	r3, [pc, #48]	@ (8004118 <vInitPrioGroupValue+0xfc>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80040ec:	4a0a      	ldr	r2, [pc, #40]	@ (8004118 <vInitPrioGroupValue+0xfc>)
 80040ee:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	b2da      	uxtb	r2, r3
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 80040f8:	bf00      	nop
 80040fa:	371c      	adds	r7, #28
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr
 8004104:	e000ed00 	.word	0xe000ed00
 8004108:	410fc271 	.word	0x410fc271
 800410c:	410fc270 	.word	0x410fc270
 8004110:	e000e400 	.word	0xe000e400
 8004114:	20000258 	.word	0x20000258
 8004118:	2000025c 	.word	0x2000025c

0800411c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800411c:	b480      	push	{r7}
 800411e:	b083      	sub	sp, #12
 8004120:	af00      	add	r7, sp, #0
        __asm volatile
 8004122:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004126:	f383 8811 	msr	BASEPRI, r3
 800412a:	f3bf 8f6f 	isb	sy
 800412e:	f3bf 8f4f 	dsb	sy
 8004132:	607b      	str	r3, [r7, #4]
    }
 8004134:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004136:	4b10      	ldr	r3, [pc, #64]	@ (8004178 <vPortEnterCritical+0x5c>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	3301      	adds	r3, #1
 800413c:	4a0e      	ldr	r2, [pc, #56]	@ (8004178 <vPortEnterCritical+0x5c>)
 800413e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004140:	4b0d      	ldr	r3, [pc, #52]	@ (8004178 <vPortEnterCritical+0x5c>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	2b01      	cmp	r3, #1
 8004146:	d110      	bne.n	800416a <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004148:	4b0c      	ldr	r3, [pc, #48]	@ (800417c <vPortEnterCritical+0x60>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	b2db      	uxtb	r3, r3
 800414e:	2b00      	cmp	r3, #0
 8004150:	d00b      	beq.n	800416a <vPortEnterCritical+0x4e>
        __asm volatile
 8004152:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004156:	f383 8811 	msr	BASEPRI, r3
 800415a:	f3bf 8f6f 	isb	sy
 800415e:	f3bf 8f4f 	dsb	sy
 8004162:	603b      	str	r3, [r7, #0]
    }
 8004164:	bf00      	nop
 8004166:	bf00      	nop
 8004168:	e7fd      	b.n	8004166 <vPortEnterCritical+0x4a>
    }
}
 800416a:	bf00      	nop
 800416c:	370c      	adds	r7, #12
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr
 8004176:	bf00      	nop
 8004178:	20000010 	.word	0x20000010
 800417c:	e000ed04 	.word	0xe000ed04

08004180 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004180:	b480      	push	{r7}
 8004182:	b083      	sub	sp, #12
 8004184:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8004186:	4b12      	ldr	r3, [pc, #72]	@ (80041d0 <vPortExitCritical+0x50>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d10b      	bne.n	80041a6 <vPortExitCritical+0x26>
        __asm volatile
 800418e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004192:	f383 8811 	msr	BASEPRI, r3
 8004196:	f3bf 8f6f 	isb	sy
 800419a:	f3bf 8f4f 	dsb	sy
 800419e:	607b      	str	r3, [r7, #4]
    }
 80041a0:	bf00      	nop
 80041a2:	bf00      	nop
 80041a4:	e7fd      	b.n	80041a2 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80041a6:	4b0a      	ldr	r3, [pc, #40]	@ (80041d0 <vPortExitCritical+0x50>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	3b01      	subs	r3, #1
 80041ac:	4a08      	ldr	r2, [pc, #32]	@ (80041d0 <vPortExitCritical+0x50>)
 80041ae:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80041b0:	4b07      	ldr	r3, [pc, #28]	@ (80041d0 <vPortExitCritical+0x50>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d105      	bne.n	80041c4 <vPortExitCritical+0x44>
 80041b8:	2300      	movs	r3, #0
 80041ba:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80041c2:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80041c4:	bf00      	nop
 80041c6:	370c      	adds	r7, #12
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr
 80041d0:	20000010 	.word	0x20000010
	...

080041e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80041e0:	f3ef 8009 	mrs	r0, PSP
 80041e4:	f3bf 8f6f 	isb	sy
 80041e8:	4b15      	ldr	r3, [pc, #84]	@ (8004240 <pxCurrentTCBConst>)
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	f01e 0f10 	tst.w	lr, #16
 80041f0:	bf08      	it	eq
 80041f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80041f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041fa:	6010      	str	r0, [r2, #0]
 80041fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004200:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004204:	f380 8811 	msr	BASEPRI, r0
 8004208:	f3bf 8f4f 	dsb	sy
 800420c:	f3bf 8f6f 	isb	sy
 8004210:	f7fe ffbe 	bl	8003190 <vTaskSwitchContext>
 8004214:	f04f 0000 	mov.w	r0, #0
 8004218:	f380 8811 	msr	BASEPRI, r0
 800421c:	bc09      	pop	{r0, r3}
 800421e:	6819      	ldr	r1, [r3, #0]
 8004220:	6808      	ldr	r0, [r1, #0]
 8004222:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004226:	f01e 0f10 	tst.w	lr, #16
 800422a:	bf08      	it	eq
 800422c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004230:	f380 8809 	msr	PSP, r0
 8004234:	f3bf 8f6f 	isb	sy
 8004238:	4770      	bx	lr
 800423a:	bf00      	nop
 800423c:	f3af 8000 	nop.w

08004240 <pxCurrentTCBConst>:
 8004240:	20000118 	.word	0x20000118
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004244:	bf00      	nop
 8004246:	bf00      	nop

08004248 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b082      	sub	sp, #8
 800424c:	af00      	add	r7, sp, #0
        __asm volatile
 800424e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004252:	f383 8811 	msr	BASEPRI, r3
 8004256:	f3bf 8f6f 	isb	sy
 800425a:	f3bf 8f4f 	dsb	sy
 800425e:	607b      	str	r3, [r7, #4]
    }
 8004260:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004262:	f001 fda1 	bl	8005da8 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004266:	f7fe fe9b 	bl	8002fa0 <xTaskIncrementTick>
 800426a:	4603      	mov	r3, r0
 800426c:	2b00      	cmp	r3, #0
 800426e:	d006      	beq.n	800427e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8004270:	f001 fdf8 	bl	8005e64 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004274:	4b08      	ldr	r3, [pc, #32]	@ (8004298 <SysTick_Handler+0x50>)
 8004276:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800427a:	601a      	str	r2, [r3, #0]
 800427c:	e001      	b.n	8004282 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800427e:	f001 fdd5 	bl	8005e2c <SEGGER_SYSVIEW_RecordExitISR>
 8004282:	2300      	movs	r3, #0
 8004284:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	f383 8811 	msr	BASEPRI, r3
    }
 800428c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800428e:	bf00      	nop
 8004290:	3708      	adds	r7, #8
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}
 8004296:	bf00      	nop
 8004298:	e000ed04 	.word	0xe000ed04

0800429c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800429c:	b480      	push	{r7}
 800429e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80042a0:	4b0b      	ldr	r3, [pc, #44]	@ (80042d0 <vPortSetupTimerInterrupt+0x34>)
 80042a2:	2200      	movs	r2, #0
 80042a4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80042a6:	4b0b      	ldr	r3, [pc, #44]	@ (80042d4 <vPortSetupTimerInterrupt+0x38>)
 80042a8:	2200      	movs	r2, #0
 80042aa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80042ac:	4b0a      	ldr	r3, [pc, #40]	@ (80042d8 <vPortSetupTimerInterrupt+0x3c>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a0a      	ldr	r2, [pc, #40]	@ (80042dc <vPortSetupTimerInterrupt+0x40>)
 80042b2:	fba2 2303 	umull	r2, r3, r2, r3
 80042b6:	099b      	lsrs	r3, r3, #6
 80042b8:	4a09      	ldr	r2, [pc, #36]	@ (80042e0 <vPortSetupTimerInterrupt+0x44>)
 80042ba:	3b01      	subs	r3, #1
 80042bc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80042be:	4b04      	ldr	r3, [pc, #16]	@ (80042d0 <vPortSetupTimerInterrupt+0x34>)
 80042c0:	2207      	movs	r2, #7
 80042c2:	601a      	str	r2, [r3, #0]
}
 80042c4:	bf00      	nop
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr
 80042ce:	bf00      	nop
 80042d0:	e000e010 	.word	0xe000e010
 80042d4:	e000e018 	.word	0xe000e018
 80042d8:	20000000 	.word	0x20000000
 80042dc:	10624dd3 	.word	0x10624dd3
 80042e0:	e000e014 	.word	0xe000e014

080042e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80042e4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80042f4 <vPortEnableVFP+0x10>
 80042e8:	6801      	ldr	r1, [r0, #0]
 80042ea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80042ee:	6001      	str	r1, [r0, #0]
 80042f0:	4770      	bx	lr
 80042f2:	0000      	.short	0x0000
 80042f4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80042f8:	bf00      	nop
 80042fa:	bf00      	nop

080042fc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80042fc:	b480      	push	{r7}
 80042fe:	b085      	sub	sp, #20
 8004300:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004302:	f3ef 8305 	mrs	r3, IPSR
 8004306:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2b0f      	cmp	r3, #15
 800430c:	d915      	bls.n	800433a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800430e:	4a18      	ldr	r2, [pc, #96]	@ (8004370 <vPortValidateInterruptPriority+0x74>)
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	4413      	add	r3, r2
 8004314:	781b      	ldrb	r3, [r3, #0]
 8004316:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004318:	4b16      	ldr	r3, [pc, #88]	@ (8004374 <vPortValidateInterruptPriority+0x78>)
 800431a:	781b      	ldrb	r3, [r3, #0]
 800431c:	7afa      	ldrb	r2, [r7, #11]
 800431e:	429a      	cmp	r2, r3
 8004320:	d20b      	bcs.n	800433a <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 8004322:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004326:	f383 8811 	msr	BASEPRI, r3
 800432a:	f3bf 8f6f 	isb	sy
 800432e:	f3bf 8f4f 	dsb	sy
 8004332:	607b      	str	r3, [r7, #4]
    }
 8004334:	bf00      	nop
 8004336:	bf00      	nop
 8004338:	e7fd      	b.n	8004336 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800433a:	4b0f      	ldr	r3, [pc, #60]	@ (8004378 <vPortValidateInterruptPriority+0x7c>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004342:	4b0e      	ldr	r3, [pc, #56]	@ (800437c <vPortValidateInterruptPriority+0x80>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	429a      	cmp	r2, r3
 8004348:	d90b      	bls.n	8004362 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 800434a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800434e:	f383 8811 	msr	BASEPRI, r3
 8004352:	f3bf 8f6f 	isb	sy
 8004356:	f3bf 8f4f 	dsb	sy
 800435a:	603b      	str	r3, [r7, #0]
    }
 800435c:	bf00      	nop
 800435e:	bf00      	nop
 8004360:	e7fd      	b.n	800435e <vPortValidateInterruptPriority+0x62>
    }
 8004362:	bf00      	nop
 8004364:	3714      	adds	r7, #20
 8004366:	46bd      	mov	sp, r7
 8004368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436c:	4770      	bx	lr
 800436e:	bf00      	nop
 8004370:	e000e3f0 	.word	0xe000e3f0
 8004374:	20000258 	.word	0x20000258
 8004378:	e000ed0c 	.word	0xe000ed0c
 800437c:	2000025c 	.word	0x2000025c

08004380 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b08a      	sub	sp, #40	@ 0x28
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8004388:	2300      	movs	r3, #0
 800438a:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 800438c:	f7fe fce6 	bl	8002d5c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8004390:	4b54      	ldr	r3, [pc, #336]	@ (80044e4 <pvPortMalloc+0x164>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d101      	bne.n	800439c <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004398:	f000 f90c 	bl	80045b4 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d012      	beq.n	80043c8 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 80043a2:	2208      	movs	r2, #8
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f003 0307 	and.w	r3, r3, #7
 80043aa:	1ad3      	subs	r3, r2, r3
 80043ac:	3308      	adds	r3, #8
 80043ae:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 80043b0:	69bb      	ldr	r3, [r7, #24]
 80043b2:	43db      	mvns	r3, r3
 80043b4:	687a      	ldr	r2, [r7, #4]
 80043b6:	429a      	cmp	r2, r3
 80043b8:	d804      	bhi.n	80043c4 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 80043ba:	687a      	ldr	r2, [r7, #4]
 80043bc:	69bb      	ldr	r3, [r7, #24]
 80043be:	4413      	add	r3, r2
 80043c0:	607b      	str	r3, [r7, #4]
 80043c2:	e001      	b.n	80043c8 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 80043c4:	2300      	movs	r3, #0
 80043c6:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	db71      	blt.n	80044b2 <pvPortMalloc+0x132>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d06e      	beq.n	80044b2 <pvPortMalloc+0x132>
 80043d4:	4b44      	ldr	r3, [pc, #272]	@ (80044e8 <pvPortMalloc+0x168>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	687a      	ldr	r2, [r7, #4]
 80043da:	429a      	cmp	r2, r3
 80043dc:	d869      	bhi.n	80044b2 <pvPortMalloc+0x132>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80043de:	4b43      	ldr	r3, [pc, #268]	@ (80044ec <pvPortMalloc+0x16c>)
 80043e0:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80043e2:	4b42      	ldr	r3, [pc, #264]	@ (80044ec <pvPortMalloc+0x16c>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80043e8:	e004      	b.n	80043f4 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 80043ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ec:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80043ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80043f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	687a      	ldr	r2, [r7, #4]
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d903      	bls.n	8004406 <pvPortMalloc+0x86>
 80043fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d1f1      	bne.n	80043ea <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004406:	4b37      	ldr	r3, [pc, #220]	@ (80044e4 <pvPortMalloc+0x164>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800440c:	429a      	cmp	r2, r3
 800440e:	d050      	beq.n	80044b2 <pvPortMalloc+0x132>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004410:	6a3b      	ldr	r3, [r7, #32]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	2208      	movs	r2, #8
 8004416:	4413      	add	r3, r2
 8004418:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800441a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	6a3b      	ldr	r3, [r7, #32]
 8004420:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004424:	685a      	ldr	r2, [r3, #4]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	1ad2      	subs	r2, r2, r3
 800442a:	2308      	movs	r3, #8
 800442c:	005b      	lsls	r3, r3, #1
 800442e:	429a      	cmp	r2, r3
 8004430:	d920      	bls.n	8004474 <pvPortMalloc+0xf4>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004432:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	4413      	add	r3, r2
 8004438:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	f003 0307 	and.w	r3, r3, #7
 8004440:	2b00      	cmp	r3, #0
 8004442:	d00b      	beq.n	800445c <pvPortMalloc+0xdc>
        __asm volatile
 8004444:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004448:	f383 8811 	msr	BASEPRI, r3
 800444c:	f3bf 8f6f 	isb	sy
 8004450:	f3bf 8f4f 	dsb	sy
 8004454:	613b      	str	r3, [r7, #16]
    }
 8004456:	bf00      	nop
 8004458:	bf00      	nop
 800445a:	e7fd      	b.n	8004458 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800445c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800445e:	685a      	ldr	r2, [r3, #4]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	1ad2      	subs	r2, r2, r3
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800446a:	687a      	ldr	r2, [r7, #4]
 800446c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800446e:	6978      	ldr	r0, [r7, #20]
 8004470:	f000 f8fc 	bl	800466c <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004474:	4b1c      	ldr	r3, [pc, #112]	@ (80044e8 <pvPortMalloc+0x168>)
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	4a1a      	ldr	r2, [pc, #104]	@ (80044e8 <pvPortMalloc+0x168>)
 8004480:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004482:	4b19      	ldr	r3, [pc, #100]	@ (80044e8 <pvPortMalloc+0x168>)
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	4b1a      	ldr	r3, [pc, #104]	@ (80044f0 <pvPortMalloc+0x170>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	429a      	cmp	r2, r3
 800448c:	d203      	bcs.n	8004496 <pvPortMalloc+0x116>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800448e:	4b16      	ldr	r3, [pc, #88]	@ (80044e8 <pvPortMalloc+0x168>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a17      	ldr	r2, [pc, #92]	@ (80044f0 <pvPortMalloc+0x170>)
 8004494:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8004496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800449e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044a0:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80044a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044a4:	2200      	movs	r2, #0
 80044a6:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80044a8:	4b12      	ldr	r3, [pc, #72]	@ (80044f4 <pvPortMalloc+0x174>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	3301      	adds	r3, #1
 80044ae:	4a11      	ldr	r2, [pc, #68]	@ (80044f4 <pvPortMalloc+0x174>)
 80044b0:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80044b2:	f7fe fc61 	bl	8002d78 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80044b6:	69fb      	ldr	r3, [r7, #28]
 80044b8:	f003 0307 	and.w	r3, r3, #7
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d00b      	beq.n	80044d8 <pvPortMalloc+0x158>
        __asm volatile
 80044c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044c4:	f383 8811 	msr	BASEPRI, r3
 80044c8:	f3bf 8f6f 	isb	sy
 80044cc:	f3bf 8f4f 	dsb	sy
 80044d0:	60fb      	str	r3, [r7, #12]
    }
 80044d2:	bf00      	nop
 80044d4:	bf00      	nop
 80044d6:	e7fd      	b.n	80044d4 <pvPortMalloc+0x154>
    return pvReturn;
 80044d8:	69fb      	ldr	r3, [r7, #28]
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3728      	adds	r7, #40	@ 0x28
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}
 80044e2:	bf00      	nop
 80044e4:	20012e68 	.word	0x20012e68
 80044e8:	20012e6c 	.word	0x20012e6c
 80044ec:	20012e60 	.word	0x20012e60
 80044f0:	20012e70 	.word	0x20012e70
 80044f4:	20012e74 	.word	0x20012e74

080044f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b086      	sub	sp, #24
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d04b      	beq.n	80045a2 <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800450a:	2308      	movs	r3, #8
 800450c:	425b      	negs	r3, r3
 800450e:	697a      	ldr	r2, [r7, #20]
 8004510:	4413      	add	r3, r2
 8004512:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	2b00      	cmp	r3, #0
 800451e:	db0b      	blt.n	8004538 <vPortFree+0x40>
        __asm volatile
 8004520:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004524:	f383 8811 	msr	BASEPRI, r3
 8004528:	f3bf 8f6f 	isb	sy
 800452c:	f3bf 8f4f 	dsb	sy
 8004530:	60fb      	str	r3, [r7, #12]
    }
 8004532:	bf00      	nop
 8004534:	bf00      	nop
 8004536:	e7fd      	b.n	8004534 <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d00b      	beq.n	8004558 <vPortFree+0x60>
        __asm volatile
 8004540:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004544:	f383 8811 	msr	BASEPRI, r3
 8004548:	f3bf 8f6f 	isb	sy
 800454c:	f3bf 8f4f 	dsb	sy
 8004550:	60bb      	str	r3, [r7, #8]
    }
 8004552:	bf00      	nop
 8004554:	bf00      	nop
 8004556:	e7fd      	b.n	8004554 <vPortFree+0x5c>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	0fdb      	lsrs	r3, r3, #31
 800455e:	f003 0301 	and.w	r3, r3, #1
 8004562:	b2db      	uxtb	r3, r3
 8004564:	2b00      	cmp	r3, #0
 8004566:	d01c      	beq.n	80045a2 <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d118      	bne.n	80045a2 <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 800457c:	f7fe fbee 	bl	8002d5c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	685a      	ldr	r2, [r3, #4]
 8004584:	4b09      	ldr	r3, [pc, #36]	@ (80045ac <vPortFree+0xb4>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4413      	add	r3, r2
 800458a:	4a08      	ldr	r2, [pc, #32]	@ (80045ac <vPortFree+0xb4>)
 800458c:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800458e:	6938      	ldr	r0, [r7, #16]
 8004590:	f000 f86c 	bl	800466c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004594:	4b06      	ldr	r3, [pc, #24]	@ (80045b0 <vPortFree+0xb8>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	3301      	adds	r3, #1
 800459a:	4a05      	ldr	r2, [pc, #20]	@ (80045b0 <vPortFree+0xb8>)
 800459c:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800459e:	f7fe fbeb 	bl	8002d78 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80045a2:	bf00      	nop
 80045a4:	3718      	adds	r7, #24
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}
 80045aa:	bf00      	nop
 80045ac:	20012e6c 	.word	0x20012e6c
 80045b0:	20012e78 	.word	0x20012e78

080045b4 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80045b4:	b480      	push	{r7}
 80045b6:	b085      	sub	sp, #20
 80045b8:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80045ba:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 80045be:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 80045c0:	4b25      	ldr	r3, [pc, #148]	@ (8004658 <prvHeapInit+0xa4>)
 80045c2:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	f003 0307 	and.w	r3, r3, #7
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d00c      	beq.n	80045e8 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	3307      	adds	r3, #7
 80045d2:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f023 0307 	bic.w	r3, r3, #7
 80045da:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 80045dc:	68ba      	ldr	r2, [r7, #8]
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	4a1d      	ldr	r2, [pc, #116]	@ (8004658 <prvHeapInit+0xa4>)
 80045e4:	4413      	add	r3, r2
 80045e6:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80045ec:	4a1b      	ldr	r2, [pc, #108]	@ (800465c <prvHeapInit+0xa8>)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80045f2:	4b1a      	ldr	r3, [pc, #104]	@ (800465c <prvHeapInit+0xa8>)
 80045f4:	2200      	movs	r2, #0
 80045f6:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	68ba      	ldr	r2, [r7, #8]
 80045fc:	4413      	add	r3, r2
 80045fe:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004600:	2208      	movs	r2, #8
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	1a9b      	subs	r3, r3, r2
 8004606:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f023 0307 	bic.w	r3, r3, #7
 800460e:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	4a13      	ldr	r2, [pc, #76]	@ (8004660 <prvHeapInit+0xac>)
 8004614:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004616:	4b12      	ldr	r3, [pc, #72]	@ (8004660 <prvHeapInit+0xac>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	2200      	movs	r2, #0
 800461c:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800461e:	4b10      	ldr	r3, [pc, #64]	@ (8004660 <prvHeapInit+0xac>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	2200      	movs	r2, #0
 8004624:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	68fa      	ldr	r2, [r7, #12]
 800462e:	1ad2      	subs	r2, r2, r3
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004634:	4b0a      	ldr	r3, [pc, #40]	@ (8004660 <prvHeapInit+0xac>)
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	4a08      	ldr	r2, [pc, #32]	@ (8004664 <prvHeapInit+0xb0>)
 8004642:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	4a07      	ldr	r2, [pc, #28]	@ (8004668 <prvHeapInit+0xb4>)
 800464a:	6013      	str	r3, [r2, #0]
}
 800464c:	bf00      	nop
 800464e:	3714      	adds	r7, #20
 8004650:	46bd      	mov	sp, r7
 8004652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004656:	4770      	bx	lr
 8004658:	20000260 	.word	0x20000260
 800465c:	20012e60 	.word	0x20012e60
 8004660:	20012e68 	.word	0x20012e68
 8004664:	20012e70 	.word	0x20012e70
 8004668:	20012e6c 	.word	0x20012e6c

0800466c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800466c:	b480      	push	{r7}
 800466e:	b085      	sub	sp, #20
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004674:	4b28      	ldr	r3, [pc, #160]	@ (8004718 <prvInsertBlockIntoFreeList+0xac>)
 8004676:	60fb      	str	r3, [r7, #12]
 8004678:	e002      	b.n	8004680 <prvInsertBlockIntoFreeList+0x14>
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	60fb      	str	r3, [r7, #12]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	687a      	ldr	r2, [r7, #4]
 8004686:	429a      	cmp	r2, r3
 8004688:	d8f7      	bhi.n	800467a <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	68ba      	ldr	r2, [r7, #8]
 8004694:	4413      	add	r3, r2
 8004696:	687a      	ldr	r2, [r7, #4]
 8004698:	429a      	cmp	r2, r3
 800469a:	d108      	bne.n	80046ae <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	685a      	ldr	r2, [r3, #4]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	441a      	add	r2, r3
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	68ba      	ldr	r2, [r7, #8]
 80046b8:	441a      	add	r2, r3
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	429a      	cmp	r2, r3
 80046c0:	d118      	bne.n	80046f4 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	4b15      	ldr	r3, [pc, #84]	@ (800471c <prvInsertBlockIntoFreeList+0xb0>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	429a      	cmp	r2, r3
 80046cc:	d00d      	beq.n	80046ea <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	685a      	ldr	r2, [r3, #4]
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	441a      	add	r2, r3
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	601a      	str	r2, [r3, #0]
 80046e8:	e008      	b.n	80046fc <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80046ea:	4b0c      	ldr	r3, [pc, #48]	@ (800471c <prvInsertBlockIntoFreeList+0xb0>)
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	601a      	str	r2, [r3, #0]
 80046f2:	e003      	b.n	80046fc <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80046fc:	68fa      	ldr	r2, [r7, #12]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	429a      	cmp	r2, r3
 8004702:	d002      	beq.n	800470a <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800470a:	bf00      	nop
 800470c:	3714      	adds	r7, #20
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr
 8004716:	bf00      	nop
 8004718:	20012e60 	.word	0x20012e60
 800471c:	20012e68 	.word	0x20012e68

08004720 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004720:	b580      	push	{r7, lr}
 8004722:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004724:	4803      	ldr	r0, [pc, #12]	@ (8004734 <_cbSendSystemDesc+0x14>)
 8004726:	f001 fae9 	bl	8005cfc <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800472a:	4803      	ldr	r0, [pc, #12]	@ (8004738 <_cbSendSystemDesc+0x18>)
 800472c:	f001 fae6 	bl	8005cfc <SEGGER_SYSVIEW_SendSysDesc>
}
 8004730:	bf00      	nop
 8004732:	bd80      	pop	{r7, pc}
 8004734:	08006d04 	.word	0x08006d04
 8004738:	08006d40 	.word	0x08006d40

0800473c <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 800473c:	b580      	push	{r7, lr}
 800473e:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004740:	4b06      	ldr	r3, [pc, #24]	@ (800475c <SEGGER_SYSVIEW_Conf+0x20>)
 8004742:	6818      	ldr	r0, [r3, #0]
 8004744:	4b05      	ldr	r3, [pc, #20]	@ (800475c <SEGGER_SYSVIEW_Conf+0x20>)
 8004746:	6819      	ldr	r1, [r3, #0]
 8004748:	4b05      	ldr	r3, [pc, #20]	@ (8004760 <SEGGER_SYSVIEW_Conf+0x24>)
 800474a:	4a06      	ldr	r2, [pc, #24]	@ (8004764 <SEGGER_SYSVIEW_Conf+0x28>)
 800474c:	f000 fe54 	bl	80053f8 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004750:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8004754:	f000 fe94 	bl	8005480 <SEGGER_SYSVIEW_SetRAMBase>
}
 8004758:	bf00      	nop
 800475a:	bd80      	pop	{r7, pc}
 800475c:	20000000 	.word	0x20000000
 8004760:	08004721 	.word	0x08004721
 8004764:	08006de0 	.word	0x08006de0

08004768 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004768:	b5f0      	push	{r4, r5, r6, r7, lr}
 800476a:	b085      	sub	sp, #20
 800476c:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 800476e:	2300      	movs	r3, #0
 8004770:	607b      	str	r3, [r7, #4]
 8004772:	e033      	b.n	80047dc <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004774:	491e      	ldr	r1, [pc, #120]	@ (80047f0 <_cbSendTaskList+0x88>)
 8004776:	687a      	ldr	r2, [r7, #4]
 8004778:	4613      	mov	r3, r2
 800477a:	009b      	lsls	r3, r3, #2
 800477c:	4413      	add	r3, r2
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	440b      	add	r3, r1
 8004782:	6818      	ldr	r0, [r3, #0]
 8004784:	491a      	ldr	r1, [pc, #104]	@ (80047f0 <_cbSendTaskList+0x88>)
 8004786:	687a      	ldr	r2, [r7, #4]
 8004788:	4613      	mov	r3, r2
 800478a:	009b      	lsls	r3, r3, #2
 800478c:	4413      	add	r3, r2
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	440b      	add	r3, r1
 8004792:	3304      	adds	r3, #4
 8004794:	6819      	ldr	r1, [r3, #0]
 8004796:	4c16      	ldr	r4, [pc, #88]	@ (80047f0 <_cbSendTaskList+0x88>)
 8004798:	687a      	ldr	r2, [r7, #4]
 800479a:	4613      	mov	r3, r2
 800479c:	009b      	lsls	r3, r3, #2
 800479e:	4413      	add	r3, r2
 80047a0:	009b      	lsls	r3, r3, #2
 80047a2:	4423      	add	r3, r4
 80047a4:	3308      	adds	r3, #8
 80047a6:	681c      	ldr	r4, [r3, #0]
 80047a8:	4d11      	ldr	r5, [pc, #68]	@ (80047f0 <_cbSendTaskList+0x88>)
 80047aa:	687a      	ldr	r2, [r7, #4]
 80047ac:	4613      	mov	r3, r2
 80047ae:	009b      	lsls	r3, r3, #2
 80047b0:	4413      	add	r3, r2
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	442b      	add	r3, r5
 80047b6:	330c      	adds	r3, #12
 80047b8:	681d      	ldr	r5, [r3, #0]
 80047ba:	4e0d      	ldr	r6, [pc, #52]	@ (80047f0 <_cbSendTaskList+0x88>)
 80047bc:	687a      	ldr	r2, [r7, #4]
 80047be:	4613      	mov	r3, r2
 80047c0:	009b      	lsls	r3, r3, #2
 80047c2:	4413      	add	r3, r2
 80047c4:	009b      	lsls	r3, r3, #2
 80047c6:	4433      	add	r3, r6
 80047c8:	3310      	adds	r3, #16
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	9300      	str	r3, [sp, #0]
 80047ce:	462b      	mov	r3, r5
 80047d0:	4622      	mov	r2, r4
 80047d2:	f000 f8bd 	bl	8004950 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	3301      	adds	r3, #1
 80047da:	607b      	str	r3, [r7, #4]
 80047dc:	4b05      	ldr	r3, [pc, #20]	@ (80047f4 <_cbSendTaskList+0x8c>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	687a      	ldr	r2, [r7, #4]
 80047e2:	429a      	cmp	r2, r3
 80047e4:	d3c6      	bcc.n	8004774 <_cbSendTaskList+0xc>
  }
}
 80047e6:	bf00      	nop
 80047e8:	bf00      	nop
 80047ea:	370c      	adds	r7, #12
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80047f0:	20012e7c 	.word	0x20012e7c
 80047f4:	20012f1c 	.word	0x20012f1c

080047f8 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 80047f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047fc:	b082      	sub	sp, #8
 80047fe:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004800:	f7fe fbbc 	bl	8002f7c <xTaskGetTickCountFromISR>
 8004804:	4603      	mov	r3, r0
 8004806:	2200      	movs	r2, #0
 8004808:	469a      	mov	sl, r3
 800480a:	4693      	mov	fp, r2
 800480c:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004810:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004814:	4602      	mov	r2, r0
 8004816:	460b      	mov	r3, r1
 8004818:	f04f 0a00 	mov.w	sl, #0
 800481c:	f04f 0b00 	mov.w	fp, #0
 8004820:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8004824:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8004828:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 800482c:	4652      	mov	r2, sl
 800482e:	465b      	mov	r3, fp
 8004830:	1a14      	subs	r4, r2, r0
 8004832:	eb63 0501 	sbc.w	r5, r3, r1
 8004836:	f04f 0200 	mov.w	r2, #0
 800483a:	f04f 0300 	mov.w	r3, #0
 800483e:	00ab      	lsls	r3, r5, #2
 8004840:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8004844:	00a2      	lsls	r2, r4, #2
 8004846:	4614      	mov	r4, r2
 8004848:	461d      	mov	r5, r3
 800484a:	eb14 0800 	adds.w	r8, r4, r0
 800484e:	eb45 0901 	adc.w	r9, r5, r1
 8004852:	f04f 0200 	mov.w	r2, #0
 8004856:	f04f 0300 	mov.w	r3, #0
 800485a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800485e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004862:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004866:	4690      	mov	r8, r2
 8004868:	4699      	mov	r9, r3
 800486a:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 800486e:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004872:	4610      	mov	r0, r2
 8004874:	4619      	mov	r1, r3
 8004876:	3708      	adds	r7, #8
 8004878:	46bd      	mov	sp, r7
 800487a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08004880 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004880:	b580      	push	{r7, lr}
 8004882:	b086      	sub	sp, #24
 8004884:	af02      	add	r7, sp, #8
 8004886:	60f8      	str	r0, [r7, #12]
 8004888:	60b9      	str	r1, [r7, #8]
 800488a:	607a      	str	r2, [r7, #4]
 800488c:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 800488e:	2205      	movs	r2, #5
 8004890:	492b      	ldr	r1, [pc, #172]	@ (8004940 <SYSVIEW_AddTask+0xc0>)
 8004892:	68b8      	ldr	r0, [r7, #8]
 8004894:	f001 ff36 	bl	8006704 <memcmp>
 8004898:	4603      	mov	r3, r0
 800489a:	2b00      	cmp	r3, #0
 800489c:	d04b      	beq.n	8004936 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 800489e:	4b29      	ldr	r3, [pc, #164]	@ (8004944 <SYSVIEW_AddTask+0xc4>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	2b07      	cmp	r3, #7
 80048a4:	d903      	bls.n	80048ae <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80048a6:	4828      	ldr	r0, [pc, #160]	@ (8004948 <SYSVIEW_AddTask+0xc8>)
 80048a8:	f001 fcc6 	bl	8006238 <SEGGER_SYSVIEW_Warn>
    return;
 80048ac:	e044      	b.n	8004938 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80048ae:	4b25      	ldr	r3, [pc, #148]	@ (8004944 <SYSVIEW_AddTask+0xc4>)
 80048b0:	681a      	ldr	r2, [r3, #0]
 80048b2:	4926      	ldr	r1, [pc, #152]	@ (800494c <SYSVIEW_AddTask+0xcc>)
 80048b4:	4613      	mov	r3, r2
 80048b6:	009b      	lsls	r3, r3, #2
 80048b8:	4413      	add	r3, r2
 80048ba:	009b      	lsls	r3, r3, #2
 80048bc:	440b      	add	r3, r1
 80048be:	68fa      	ldr	r2, [r7, #12]
 80048c0:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80048c2:	4b20      	ldr	r3, [pc, #128]	@ (8004944 <SYSVIEW_AddTask+0xc4>)
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	4921      	ldr	r1, [pc, #132]	@ (800494c <SYSVIEW_AddTask+0xcc>)
 80048c8:	4613      	mov	r3, r2
 80048ca:	009b      	lsls	r3, r3, #2
 80048cc:	4413      	add	r3, r2
 80048ce:	009b      	lsls	r3, r3, #2
 80048d0:	440b      	add	r3, r1
 80048d2:	3304      	adds	r3, #4
 80048d4:	68ba      	ldr	r2, [r7, #8]
 80048d6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80048d8:	4b1a      	ldr	r3, [pc, #104]	@ (8004944 <SYSVIEW_AddTask+0xc4>)
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	491b      	ldr	r1, [pc, #108]	@ (800494c <SYSVIEW_AddTask+0xcc>)
 80048de:	4613      	mov	r3, r2
 80048e0:	009b      	lsls	r3, r3, #2
 80048e2:	4413      	add	r3, r2
 80048e4:	009b      	lsls	r3, r3, #2
 80048e6:	440b      	add	r3, r1
 80048e8:	3308      	adds	r3, #8
 80048ea:	687a      	ldr	r2, [r7, #4]
 80048ec:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80048ee:	4b15      	ldr	r3, [pc, #84]	@ (8004944 <SYSVIEW_AddTask+0xc4>)
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	4916      	ldr	r1, [pc, #88]	@ (800494c <SYSVIEW_AddTask+0xcc>)
 80048f4:	4613      	mov	r3, r2
 80048f6:	009b      	lsls	r3, r3, #2
 80048f8:	4413      	add	r3, r2
 80048fa:	009b      	lsls	r3, r3, #2
 80048fc:	440b      	add	r3, r1
 80048fe:	330c      	adds	r3, #12
 8004900:	683a      	ldr	r2, [r7, #0]
 8004902:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004904:	4b0f      	ldr	r3, [pc, #60]	@ (8004944 <SYSVIEW_AddTask+0xc4>)
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	4910      	ldr	r1, [pc, #64]	@ (800494c <SYSVIEW_AddTask+0xcc>)
 800490a:	4613      	mov	r3, r2
 800490c:	009b      	lsls	r3, r3, #2
 800490e:	4413      	add	r3, r2
 8004910:	009b      	lsls	r3, r3, #2
 8004912:	440b      	add	r3, r1
 8004914:	3310      	adds	r3, #16
 8004916:	69ba      	ldr	r2, [r7, #24]
 8004918:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800491a:	4b0a      	ldr	r3, [pc, #40]	@ (8004944 <SYSVIEW_AddTask+0xc4>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	3301      	adds	r3, #1
 8004920:	4a08      	ldr	r2, [pc, #32]	@ (8004944 <SYSVIEW_AddTask+0xc4>)
 8004922:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004924:	69bb      	ldr	r3, [r7, #24]
 8004926:	9300      	str	r3, [sp, #0]
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	687a      	ldr	r2, [r7, #4]
 800492c:	68b9      	ldr	r1, [r7, #8]
 800492e:	68f8      	ldr	r0, [r7, #12]
 8004930:	f000 f80e 	bl	8004950 <SYSVIEW_SendTaskInfo>
 8004934:	e000      	b.n	8004938 <SYSVIEW_AddTask+0xb8>
    return;
 8004936:	bf00      	nop

}
 8004938:	3710      	adds	r7, #16
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
 800493e:	bf00      	nop
 8004940:	08006d50 	.word	0x08006d50
 8004944:	20012f1c 	.word	0x20012f1c
 8004948:	08006d58 	.word	0x08006d58
 800494c:	20012e7c 	.word	0x20012e7c

08004950 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004950:	b580      	push	{r7, lr}
 8004952:	b08a      	sub	sp, #40	@ 0x28
 8004954:	af00      	add	r7, sp, #0
 8004956:	60f8      	str	r0, [r7, #12]
 8004958:	60b9      	str	r1, [r7, #8]
 800495a:	607a      	str	r2, [r7, #4]
 800495c:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800495e:	f107 0314 	add.w	r3, r7, #20
 8004962:	2214      	movs	r2, #20
 8004964:	2100      	movs	r1, #0
 8004966:	4618      	mov	r0, r3
 8004968:	f001 fedc 	bl	8006724 <memset>
  TaskInfo.TaskID     = TaskID;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 800497c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800497e:	627b      	str	r3, [r7, #36]	@ 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004980:	f107 0314 	add.w	r3, r7, #20
 8004984:	4618      	mov	r0, r3
 8004986:	f001 f8c1 	bl	8005b0c <SEGGER_SYSVIEW_SendTaskInfo>
}
 800498a:	bf00      	nop
 800498c:	3728      	adds	r7, #40	@ 0x28
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}
	...

08004994 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8004994:	b480      	push	{r7}
 8004996:	b083      	sub	sp, #12
 8004998:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800499a:	4b24      	ldr	r3, [pc, #144]	@ (8004a2c <_DoInit+0x98>)
 800499c:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2203      	movs	r2, #3
 80049a2:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2203      	movs	r2, #3
 80049a8:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	4a20      	ldr	r2, [pc, #128]	@ (8004a30 <_DoInit+0x9c>)
 80049ae:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	4a20      	ldr	r2, [pc, #128]	@ (8004a34 <_DoInit+0xa0>)
 80049b4:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80049bc:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2200      	movs	r2, #0
 80049c2:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2200      	movs	r2, #0
 80049c8:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2200      	movs	r2, #0
 80049ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	4a17      	ldr	r2, [pc, #92]	@ (8004a30 <_DoInit+0x9c>)
 80049d4:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	4a17      	ldr	r2, [pc, #92]	@ (8004a38 <_DoInit+0xa4>)
 80049da:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2210      	movs	r2, #16
 80049e0:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2200      	movs	r2, #0
 80049ec:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2200      	movs	r2, #0
 80049f2:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	3307      	adds	r3, #7
 80049f8:	4a10      	ldr	r2, [pc, #64]	@ (8004a3c <_DoInit+0xa8>)
 80049fa:	6810      	ldr	r0, [r2, #0]
 80049fc:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80049fe:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4a0e      	ldr	r2, [pc, #56]	@ (8004a40 <_DoInit+0xac>)
 8004a06:	6810      	ldr	r0, [r2, #0]
 8004a08:	6018      	str	r0, [r3, #0]
 8004a0a:	8891      	ldrh	r1, [r2, #4]
 8004a0c:	7992      	ldrb	r2, [r2, #6]
 8004a0e:	8099      	strh	r1, [r3, #4]
 8004a10:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004a12:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2220      	movs	r2, #32
 8004a1a:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004a1c:	f3bf 8f5f 	dmb	sy
}
 8004a20:	bf00      	nop
 8004a22:	370c      	adds	r7, #12
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr
 8004a2c:	20012f20 	.word	0x20012f20
 8004a30:	08006da8 	.word	0x08006da8
 8004a34:	20012fc8 	.word	0x20012fc8
 8004a38:	200133c8 	.word	0x200133c8
 8004a3c:	08006db4 	.word	0x08006db4
 8004a40:	08006db8 	.word	0x08006db8

08004a44 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b08a      	sub	sp, #40	@ 0x28
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	60f8      	str	r0, [r7, #12]
 8004a4c:	60b9      	str	r1, [r7, #8]
 8004a4e:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8004a50:	2300      	movs	r3, #0
 8004a52:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	691b      	ldr	r3, [r3, #16]
 8004a5e:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8004a60:	69ba      	ldr	r2, [r7, #24]
 8004a62:	69fb      	ldr	r3, [r7, #28]
 8004a64:	429a      	cmp	r2, r3
 8004a66:	d905      	bls.n	8004a74 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8004a68:	69ba      	ldr	r2, [r7, #24]
 8004a6a:	69fb      	ldr	r3, [r7, #28]
 8004a6c:	1ad3      	subs	r3, r2, r3
 8004a6e:	3b01      	subs	r3, #1
 8004a70:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a72:	e007      	b.n	8004a84 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	689a      	ldr	r2, [r3, #8]
 8004a78:	69b9      	ldr	r1, [r7, #24]
 8004a7a:	69fb      	ldr	r3, [r7, #28]
 8004a7c:	1acb      	subs	r3, r1, r3
 8004a7e:	4413      	add	r3, r2
 8004a80:	3b01      	subs	r3, #1
 8004a82:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	689a      	ldr	r2, [r3, #8]
 8004a88:	69fb      	ldr	r3, [r7, #28]
 8004a8a:	1ad3      	subs	r3, r2, r3
 8004a8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	bf28      	it	cs
 8004a92:	4613      	movcs	r3, r2
 8004a94:	627b      	str	r3, [r7, #36]	@ 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8004a96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	bf28      	it	cs
 8004a9e:	4613      	movcs	r3, r2
 8004aa0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	685a      	ldr	r2, [r3, #4]
 8004aa6:	69fb      	ldr	r3, [r7, #28]
 8004aa8:	4413      	add	r3, r2
 8004aaa:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8004aac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004aae:	68b9      	ldr	r1, [r7, #8]
 8004ab0:	6978      	ldr	r0, [r7, #20]
 8004ab2:	f001 fe9a 	bl	80067ea <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8004ab6:	6a3a      	ldr	r2, [r7, #32]
 8004ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aba:	4413      	add	r3, r2
 8004abc:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8004abe:	68ba      	ldr	r2, [r7, #8]
 8004ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ac2:	4413      	add	r3, r2
 8004ac4:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8004ac6:	687a      	ldr	r2, [r7, #4]
 8004ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aca:	1ad3      	subs	r3, r2, r3
 8004acc:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8004ace:	69fa      	ldr	r2, [r7, #28]
 8004ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ad2:	4413      	add	r3, r2
 8004ad4:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	69fa      	ldr	r2, [r7, #28]
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d101      	bne.n	8004ae4 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004ae4:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	69fa      	ldr	r2, [r7, #28]
 8004aec:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d1b2      	bne.n	8004a5a <_WriteBlocking+0x16>
  return NumBytesWritten;
 8004af4:	6a3b      	ldr	r3, [r7, #32]
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3728      	adds	r7, #40	@ 0x28
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}

08004afe <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8004afe:	b580      	push	{r7, lr}
 8004b00:	b088      	sub	sp, #32
 8004b02:	af00      	add	r7, sp, #0
 8004b04:	60f8      	str	r0, [r7, #12]
 8004b06:	60b9      	str	r1, [r7, #8]
 8004b08:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	68db      	ldr	r3, [r3, #12]
 8004b0e:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	689a      	ldr	r2, [r3, #8]
 8004b14:	69fb      	ldr	r3, [r7, #28]
 8004b16:	1ad3      	subs	r3, r2, r3
 8004b18:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8004b1a:	69ba      	ldr	r2, [r7, #24]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	429a      	cmp	r2, r3
 8004b20:	d911      	bls.n	8004b46 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	685a      	ldr	r2, [r3, #4]
 8004b26:	69fb      	ldr	r3, [r7, #28]
 8004b28:	4413      	add	r3, r2
 8004b2a:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8004b2c:	687a      	ldr	r2, [r7, #4]
 8004b2e:	68b9      	ldr	r1, [r7, #8]
 8004b30:	6938      	ldr	r0, [r7, #16]
 8004b32:	f001 fe5a 	bl	80067ea <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004b36:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8004b3a:	69fa      	ldr	r2, [r7, #28]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	441a      	add	r2, r3
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8004b44:	e01f      	b.n	8004b86 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8004b46:	69bb      	ldr	r3, [r7, #24]
 8004b48:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	685a      	ldr	r2, [r3, #4]
 8004b4e:	69fb      	ldr	r3, [r7, #28]
 8004b50:	4413      	add	r3, r2
 8004b52:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8004b54:	697a      	ldr	r2, [r7, #20]
 8004b56:	68b9      	ldr	r1, [r7, #8]
 8004b58:	6938      	ldr	r0, [r7, #16]
 8004b5a:	f001 fe46 	bl	80067ea <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	69bb      	ldr	r3, [r7, #24]
 8004b62:	1ad3      	subs	r3, r2, r3
 8004b64:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8004b6c:	68ba      	ldr	r2, [r7, #8]
 8004b6e:	69bb      	ldr	r3, [r7, #24]
 8004b70:	4413      	add	r3, r2
 8004b72:	697a      	ldr	r2, [r7, #20]
 8004b74:	4619      	mov	r1, r3
 8004b76:	6938      	ldr	r0, [r7, #16]
 8004b78:	f001 fe37 	bl	80067ea <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004b7c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	697a      	ldr	r2, [r7, #20]
 8004b84:	60da      	str	r2, [r3, #12]
}
 8004b86:	bf00      	nop
 8004b88:	3720      	adds	r7, #32
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}

08004b8e <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8004b8e:	b480      	push	{r7}
 8004b90:	b087      	sub	sp, #28
 8004b92:	af00      	add	r7, sp, #0
 8004b94:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	691b      	ldr	r3, [r3, #16]
 8004b9a:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	68db      	ldr	r3, [r3, #12]
 8004ba0:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8004ba2:	693a      	ldr	r2, [r7, #16]
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d808      	bhi.n	8004bbc <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	689a      	ldr	r2, [r3, #8]
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	1ad2      	subs	r2, r2, r3
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	4413      	add	r3, r2
 8004bb6:	3b01      	subs	r3, #1
 8004bb8:	617b      	str	r3, [r7, #20]
 8004bba:	e004      	b.n	8004bc6 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8004bbc:	693a      	ldr	r2, [r7, #16]
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	1ad3      	subs	r3, r2, r3
 8004bc2:	3b01      	subs	r3, #1
 8004bc4:	617b      	str	r3, [r7, #20]
  }
  return r;
 8004bc6:	697b      	ldr	r3, [r7, #20]
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	371c      	adds	r7, #28
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr

08004bd4 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b08c      	sub	sp, #48	@ 0x30
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	60f8      	str	r0, [r7, #12]
 8004bdc:	60b9      	str	r1, [r7, #8]
 8004bde:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004be0:	4b3e      	ldr	r3, [pc, #248]	@ (8004cdc <SEGGER_RTT_ReadNoLock+0x108>)
 8004be2:	623b      	str	r3, [r7, #32]
 8004be4:	6a3b      	ldr	r3, [r7, #32]
 8004be6:	781b      	ldrb	r3, [r3, #0]
 8004be8:	b2db      	uxtb	r3, r3
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d101      	bne.n	8004bf2 <SEGGER_RTT_ReadNoLock+0x1e>
 8004bee:	f7ff fed1 	bl	8004994 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004bf2:	68fa      	ldr	r2, [r7, #12]
 8004bf4:	4613      	mov	r3, r2
 8004bf6:	005b      	lsls	r3, r3, #1
 8004bf8:	4413      	add	r3, r2
 8004bfa:	00db      	lsls	r3, r3, #3
 8004bfc:	3360      	adds	r3, #96	@ 0x60
 8004bfe:	4a37      	ldr	r2, [pc, #220]	@ (8004cdc <SEGGER_RTT_ReadNoLock+0x108>)
 8004c00:	4413      	add	r3, r2
 8004c02:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8004c08:	69fb      	ldr	r3, [r7, #28]
 8004c0a:	691b      	ldr	r3, [r3, #16]
 8004c0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8004c0e:	69fb      	ldr	r3, [r7, #28]
 8004c10:	68db      	ldr	r3, [r3, #12]
 8004c12:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004c14:	2300      	movs	r3, #0
 8004c16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004c18:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004c1a:	69bb      	ldr	r3, [r7, #24]
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	d92b      	bls.n	8004c78 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004c20:	69fb      	ldr	r3, [r7, #28]
 8004c22:	689a      	ldr	r2, [r3, #8]
 8004c24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c26:	1ad3      	subs	r3, r2, r3
 8004c28:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004c2a:	697a      	ldr	r2, [r7, #20]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	bf28      	it	cs
 8004c32:	4613      	movcs	r3, r2
 8004c34:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004c36:	69fb      	ldr	r3, [r7, #28]
 8004c38:	685a      	ldr	r2, [r3, #4]
 8004c3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c3c:	4413      	add	r3, r2
 8004c3e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004c40:	697a      	ldr	r2, [r7, #20]
 8004c42:	6939      	ldr	r1, [r7, #16]
 8004c44:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004c46:	f001 fdd0 	bl	80067ea <memcpy>
    NumBytesRead += NumBytesRem;
 8004c4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	4413      	add	r3, r2
 8004c50:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8004c52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	4413      	add	r3, r2
 8004c58:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8004c5a:	687a      	ldr	r2, [r7, #4]
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	1ad3      	subs	r3, r2, r3
 8004c60:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004c62:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	4413      	add	r3, r2
 8004c68:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004c6a:	69fb      	ldr	r3, [r7, #28]
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d101      	bne.n	8004c78 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8004c74:	2300      	movs	r3, #0
 8004c76:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004c78:	69ba      	ldr	r2, [r7, #24]
 8004c7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c7c:	1ad3      	subs	r3, r2, r3
 8004c7e:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004c80:	697a      	ldr	r2, [r7, #20]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	4293      	cmp	r3, r2
 8004c86:	bf28      	it	cs
 8004c88:	4613      	movcs	r3, r2
 8004c8a:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d019      	beq.n	8004cc6 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004c92:	69fb      	ldr	r3, [r7, #28]
 8004c94:	685a      	ldr	r2, [r3, #4]
 8004c96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c98:	4413      	add	r3, r2
 8004c9a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004c9c:	697a      	ldr	r2, [r7, #20]
 8004c9e:	6939      	ldr	r1, [r7, #16]
 8004ca0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004ca2:	f001 fda2 	bl	80067ea <memcpy>
    NumBytesRead += NumBytesRem;
 8004ca6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	4413      	add	r3, r2
 8004cac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8004cae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	4413      	add	r3, r2
 8004cb4:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8004cb6:	687a      	ldr	r2, [r7, #4]
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	1ad3      	subs	r3, r2, r3
 8004cbc:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004cbe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	4413      	add	r3, r2
 8004cc4:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 8004cc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d002      	beq.n	8004cd2 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004ccc:	69fb      	ldr	r3, [r7, #28]
 8004cce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004cd0:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004cd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3730      	adds	r7, #48	@ 0x30
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}
 8004cdc:	20012f20 	.word	0x20012f20

08004ce0 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b088      	sub	sp, #32
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	60f8      	str	r0, [r7, #12]
 8004ce8:	60b9      	str	r1, [r7, #8]
 8004cea:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	1c5a      	adds	r2, r3, #1
 8004cf4:	4613      	mov	r3, r2
 8004cf6:	005b      	lsls	r3, r3, #1
 8004cf8:	4413      	add	r3, r2
 8004cfa:	00db      	lsls	r3, r3, #3
 8004cfc:	4a1f      	ldr	r2, [pc, #124]	@ (8004d7c <SEGGER_RTT_WriteNoLock+0x9c>)
 8004cfe:	4413      	add	r3, r2
 8004d00:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	695b      	ldr	r3, [r3, #20]
 8004d06:	2b02      	cmp	r3, #2
 8004d08:	d029      	beq.n	8004d5e <SEGGER_RTT_WriteNoLock+0x7e>
 8004d0a:	2b02      	cmp	r3, #2
 8004d0c:	d82e      	bhi.n	8004d6c <SEGGER_RTT_WriteNoLock+0x8c>
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d002      	beq.n	8004d18 <SEGGER_RTT_WriteNoLock+0x38>
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	d013      	beq.n	8004d3e <SEGGER_RTT_WriteNoLock+0x5e>
 8004d16:	e029      	b.n	8004d6c <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8004d18:	6978      	ldr	r0, [r7, #20]
 8004d1a:	f7ff ff38 	bl	8004b8e <_GetAvailWriteSpace>
 8004d1e:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8004d20:	693a      	ldr	r2, [r7, #16]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d202      	bcs.n	8004d2e <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8004d2c:	e021      	b.n	8004d72 <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8004d32:	687a      	ldr	r2, [r7, #4]
 8004d34:	69b9      	ldr	r1, [r7, #24]
 8004d36:	6978      	ldr	r0, [r7, #20]
 8004d38:	f7ff fee1 	bl	8004afe <_WriteNoCheck>
    break;
 8004d3c:	e019      	b.n	8004d72 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8004d3e:	6978      	ldr	r0, [r7, #20]
 8004d40:	f7ff ff25 	bl	8004b8e <_GetAvailWriteSpace>
 8004d44:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8004d46:	687a      	ldr	r2, [r7, #4]
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	bf28      	it	cs
 8004d4e:	4613      	movcs	r3, r2
 8004d50:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8004d52:	69fa      	ldr	r2, [r7, #28]
 8004d54:	69b9      	ldr	r1, [r7, #24]
 8004d56:	6978      	ldr	r0, [r7, #20]
 8004d58:	f7ff fed1 	bl	8004afe <_WriteNoCheck>
    break;
 8004d5c:	e009      	b.n	8004d72 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	69b9      	ldr	r1, [r7, #24]
 8004d62:	6978      	ldr	r0, [r7, #20]
 8004d64:	f7ff fe6e 	bl	8004a44 <_WriteBlocking>
 8004d68:	61f8      	str	r0, [r7, #28]
    break;
 8004d6a:	e002      	b.n	8004d72 <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	61fb      	str	r3, [r7, #28]
    break;
 8004d70:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8004d72:	69fb      	ldr	r3, [r7, #28]
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	3720      	adds	r7, #32
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}
 8004d7c:	20012f20 	.word	0x20012f20

08004d80 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b088      	sub	sp, #32
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	60f8      	str	r0, [r7, #12]
 8004d88:	60b9      	str	r1, [r7, #8]
 8004d8a:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8004d8c:	4b0e      	ldr	r3, [pc, #56]	@ (8004dc8 <SEGGER_RTT_Write+0x48>)
 8004d8e:	61fb      	str	r3, [r7, #28]
 8004d90:	69fb      	ldr	r3, [r7, #28]
 8004d92:	781b      	ldrb	r3, [r3, #0]
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d101      	bne.n	8004d9e <SEGGER_RTT_Write+0x1e>
 8004d9a:	f7ff fdfb 	bl	8004994 <_DoInit>
  SEGGER_RTT_LOCK();
 8004d9e:	f3ef 8311 	mrs	r3, BASEPRI
 8004da2:	f04f 0120 	mov.w	r1, #32
 8004da6:	f381 8811 	msr	BASEPRI, r1
 8004daa:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8004dac:	687a      	ldr	r2, [r7, #4]
 8004dae:	68b9      	ldr	r1, [r7, #8]
 8004db0:	68f8      	ldr	r0, [r7, #12]
 8004db2:	f7ff ff95 	bl	8004ce0 <SEGGER_RTT_WriteNoLock>
 8004db6:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8004db8:	69bb      	ldr	r3, [r7, #24]
 8004dba:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8004dbe:	697b      	ldr	r3, [r7, #20]
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	3720      	adds	r7, #32
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}
 8004dc8:	20012f20 	.word	0x20012f20

08004dcc <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b088      	sub	sp, #32
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	60f8      	str	r0, [r7, #12]
 8004dd4:	60b9      	str	r1, [r7, #8]
 8004dd6:	607a      	str	r2, [r7, #4]
 8004dd8:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8004dda:	4b3d      	ldr	r3, [pc, #244]	@ (8004ed0 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004ddc:	61bb      	str	r3, [r7, #24]
 8004dde:	69bb      	ldr	r3, [r7, #24]
 8004de0:	781b      	ldrb	r3, [r3, #0]
 8004de2:	b2db      	uxtb	r3, r3
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d101      	bne.n	8004dec <SEGGER_RTT_AllocUpBuffer+0x20>
 8004de8:	f7ff fdd4 	bl	8004994 <_DoInit>
  SEGGER_RTT_LOCK();
 8004dec:	f3ef 8311 	mrs	r3, BASEPRI
 8004df0:	f04f 0120 	mov.w	r1, #32
 8004df4:	f381 8811 	msr	BASEPRI, r1
 8004df8:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004dfa:	4b35      	ldr	r3, [pc, #212]	@ (8004ed0 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004dfc:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8004e02:	6939      	ldr	r1, [r7, #16]
 8004e04:	69fb      	ldr	r3, [r7, #28]
 8004e06:	1c5a      	adds	r2, r3, #1
 8004e08:	4613      	mov	r3, r2
 8004e0a:	005b      	lsls	r3, r3, #1
 8004e0c:	4413      	add	r3, r2
 8004e0e:	00db      	lsls	r3, r3, #3
 8004e10:	440b      	add	r3, r1
 8004e12:	3304      	adds	r3, #4
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d008      	beq.n	8004e2c <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8004e1a:	69fb      	ldr	r3, [r7, #28]
 8004e1c:	3301      	adds	r3, #1
 8004e1e:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	691b      	ldr	r3, [r3, #16]
 8004e24:	69fa      	ldr	r2, [r7, #28]
 8004e26:	429a      	cmp	r2, r3
 8004e28:	dbeb      	blt.n	8004e02 <SEGGER_RTT_AllocUpBuffer+0x36>
 8004e2a:	e000      	b.n	8004e2e <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8004e2c:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	691b      	ldr	r3, [r3, #16]
 8004e32:	69fa      	ldr	r2, [r7, #28]
 8004e34:	429a      	cmp	r2, r3
 8004e36:	da3f      	bge.n	8004eb8 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8004e38:	6939      	ldr	r1, [r7, #16]
 8004e3a:	69fb      	ldr	r3, [r7, #28]
 8004e3c:	1c5a      	adds	r2, r3, #1
 8004e3e:	4613      	mov	r3, r2
 8004e40:	005b      	lsls	r3, r3, #1
 8004e42:	4413      	add	r3, r2
 8004e44:	00db      	lsls	r3, r3, #3
 8004e46:	440b      	add	r3, r1
 8004e48:	68fa      	ldr	r2, [r7, #12]
 8004e4a:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8004e4c:	6939      	ldr	r1, [r7, #16]
 8004e4e:	69fb      	ldr	r3, [r7, #28]
 8004e50:	1c5a      	adds	r2, r3, #1
 8004e52:	4613      	mov	r3, r2
 8004e54:	005b      	lsls	r3, r3, #1
 8004e56:	4413      	add	r3, r2
 8004e58:	00db      	lsls	r3, r3, #3
 8004e5a:	440b      	add	r3, r1
 8004e5c:	3304      	adds	r3, #4
 8004e5e:	68ba      	ldr	r2, [r7, #8]
 8004e60:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8004e62:	6939      	ldr	r1, [r7, #16]
 8004e64:	69fa      	ldr	r2, [r7, #28]
 8004e66:	4613      	mov	r3, r2
 8004e68:	005b      	lsls	r3, r3, #1
 8004e6a:	4413      	add	r3, r2
 8004e6c:	00db      	lsls	r3, r3, #3
 8004e6e:	440b      	add	r3, r1
 8004e70:	3320      	adds	r3, #32
 8004e72:	687a      	ldr	r2, [r7, #4]
 8004e74:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8004e76:	6939      	ldr	r1, [r7, #16]
 8004e78:	69fa      	ldr	r2, [r7, #28]
 8004e7a:	4613      	mov	r3, r2
 8004e7c:	005b      	lsls	r3, r3, #1
 8004e7e:	4413      	add	r3, r2
 8004e80:	00db      	lsls	r3, r3, #3
 8004e82:	440b      	add	r3, r1
 8004e84:	3328      	adds	r3, #40	@ 0x28
 8004e86:	2200      	movs	r2, #0
 8004e88:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8004e8a:	6939      	ldr	r1, [r7, #16]
 8004e8c:	69fa      	ldr	r2, [r7, #28]
 8004e8e:	4613      	mov	r3, r2
 8004e90:	005b      	lsls	r3, r3, #1
 8004e92:	4413      	add	r3, r2
 8004e94:	00db      	lsls	r3, r3, #3
 8004e96:	440b      	add	r3, r1
 8004e98:	3324      	adds	r3, #36	@ 0x24
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8004e9e:	6939      	ldr	r1, [r7, #16]
 8004ea0:	69fa      	ldr	r2, [r7, #28]
 8004ea2:	4613      	mov	r3, r2
 8004ea4:	005b      	lsls	r3, r3, #1
 8004ea6:	4413      	add	r3, r2
 8004ea8:	00db      	lsls	r3, r3, #3
 8004eaa:	440b      	add	r3, r1
 8004eac:	332c      	adds	r3, #44	@ 0x2c
 8004eae:	683a      	ldr	r2, [r7, #0]
 8004eb0:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004eb2:	f3bf 8f5f 	dmb	sy
 8004eb6:	e002      	b.n	8004ebe <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8004eb8:	f04f 33ff 	mov.w	r3, #4294967295
 8004ebc:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8004ec4:	69fb      	ldr	r3, [r7, #28]
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3720      	adds	r7, #32
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}
 8004ece:	bf00      	nop
 8004ed0:	20012f20 	.word	0x20012f20

08004ed4 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b088      	sub	sp, #32
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	60f8      	str	r0, [r7, #12]
 8004edc:	60b9      	str	r1, [r7, #8]
 8004ede:	607a      	str	r2, [r7, #4]
 8004ee0:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8004ee2:	4b33      	ldr	r3, [pc, #204]	@ (8004fb0 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8004ee4:	61bb      	str	r3, [r7, #24]
 8004ee6:	69bb      	ldr	r3, [r7, #24]
 8004ee8:	781b      	ldrb	r3, [r3, #0]
 8004eea:	b2db      	uxtb	r3, r3
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d101      	bne.n	8004ef4 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8004ef0:	f7ff fd50 	bl	8004994 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004ef4:	4b2e      	ldr	r3, [pc, #184]	@ (8004fb0 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8004ef6:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	695b      	ldr	r3, [r3, #20]
 8004efc:	461a      	mov	r2, r3
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d24d      	bcs.n	8004fa0 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 8004f04:	f3ef 8311 	mrs	r3, BASEPRI
 8004f08:	f04f 0120 	mov.w	r1, #32
 8004f0c:	f381 8811 	msr	BASEPRI, r1
 8004f10:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d031      	beq.n	8004f7c <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8004f18:	6979      	ldr	r1, [r7, #20]
 8004f1a:	68fa      	ldr	r2, [r7, #12]
 8004f1c:	4613      	mov	r3, r2
 8004f1e:	005b      	lsls	r3, r3, #1
 8004f20:	4413      	add	r3, r2
 8004f22:	00db      	lsls	r3, r3, #3
 8004f24:	440b      	add	r3, r1
 8004f26:	3360      	adds	r3, #96	@ 0x60
 8004f28:	68ba      	ldr	r2, [r7, #8]
 8004f2a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8004f2c:	6979      	ldr	r1, [r7, #20]
 8004f2e:	68fa      	ldr	r2, [r7, #12]
 8004f30:	4613      	mov	r3, r2
 8004f32:	005b      	lsls	r3, r3, #1
 8004f34:	4413      	add	r3, r2
 8004f36:	00db      	lsls	r3, r3, #3
 8004f38:	440b      	add	r3, r1
 8004f3a:	3364      	adds	r3, #100	@ 0x64
 8004f3c:	687a      	ldr	r2, [r7, #4]
 8004f3e:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8004f40:	6979      	ldr	r1, [r7, #20]
 8004f42:	68fa      	ldr	r2, [r7, #12]
 8004f44:	4613      	mov	r3, r2
 8004f46:	005b      	lsls	r3, r3, #1
 8004f48:	4413      	add	r3, r2
 8004f4a:	00db      	lsls	r3, r3, #3
 8004f4c:	440b      	add	r3, r1
 8004f4e:	3368      	adds	r3, #104	@ 0x68
 8004f50:	683a      	ldr	r2, [r7, #0]
 8004f52:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 8004f54:	6979      	ldr	r1, [r7, #20]
 8004f56:	68fa      	ldr	r2, [r7, #12]
 8004f58:	4613      	mov	r3, r2
 8004f5a:	005b      	lsls	r3, r3, #1
 8004f5c:	4413      	add	r3, r2
 8004f5e:	00db      	lsls	r3, r3, #3
 8004f60:	440b      	add	r3, r1
 8004f62:	3370      	adds	r3, #112	@ 0x70
 8004f64:	2200      	movs	r2, #0
 8004f66:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8004f68:	6979      	ldr	r1, [r7, #20]
 8004f6a:	68fa      	ldr	r2, [r7, #12]
 8004f6c:	4613      	mov	r3, r2
 8004f6e:	005b      	lsls	r3, r3, #1
 8004f70:	4413      	add	r3, r2
 8004f72:	00db      	lsls	r3, r3, #3
 8004f74:	440b      	add	r3, r1
 8004f76:	336c      	adds	r3, #108	@ 0x6c
 8004f78:	2200      	movs	r2, #0
 8004f7a:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8004f7c:	6979      	ldr	r1, [r7, #20]
 8004f7e:	68fa      	ldr	r2, [r7, #12]
 8004f80:	4613      	mov	r3, r2
 8004f82:	005b      	lsls	r3, r3, #1
 8004f84:	4413      	add	r3, r2
 8004f86:	00db      	lsls	r3, r3, #3
 8004f88:	440b      	add	r3, r1
 8004f8a:	3374      	adds	r3, #116	@ 0x74
 8004f8c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004f8e:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004f90:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	61fb      	str	r3, [r7, #28]
 8004f9e:	e002      	b.n	8004fa6 <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8004fa0:	f04f 33ff 	mov.w	r3, #4294967295
 8004fa4:	61fb      	str	r3, [r7, #28]
  }
  return r;
 8004fa6:	69fb      	ldr	r3, [r7, #28]
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3720      	adds	r7, #32
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}
 8004fb0:	20012f20 	.word	0x20012f20

08004fb4 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8004fb4:	b480      	push	{r7}
 8004fb6:	b087      	sub	sp, #28
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	60f8      	str	r0, [r7, #12]
 8004fbc:	60b9      	str	r1, [r7, #8]
 8004fbe:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8004fc4:	e002      	b.n	8004fcc <_EncodeStr+0x18>
    Len++;
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	3301      	adds	r3, #1
 8004fca:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8004fcc:	68ba      	ldr	r2, [r7, #8]
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	4413      	add	r3, r2
 8004fd2:	781b      	ldrb	r3, [r3, #0]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d1f6      	bne.n	8004fc6 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8004fd8:	693a      	ldr	r2, [r7, #16]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	d901      	bls.n	8004fe4 <_EncodeStr+0x30>
    Len = Limit;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	2bfe      	cmp	r3, #254	@ 0xfe
 8004fe8:	d806      	bhi.n	8004ff8 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	1c5a      	adds	r2, r3, #1
 8004fee:	60fa      	str	r2, [r7, #12]
 8004ff0:	693a      	ldr	r2, [r7, #16]
 8004ff2:	b2d2      	uxtb	r2, r2
 8004ff4:	701a      	strb	r2, [r3, #0]
 8004ff6:	e011      	b.n	800501c <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	1c5a      	adds	r2, r3, #1
 8004ffc:	60fa      	str	r2, [r7, #12]
 8004ffe:	22ff      	movs	r2, #255	@ 0xff
 8005000:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	1c5a      	adds	r2, r3, #1
 8005006:	60fa      	str	r2, [r7, #12]
 8005008:	693a      	ldr	r2, [r7, #16]
 800500a:	b2d2      	uxtb	r2, r2
 800500c:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	0a19      	lsrs	r1, r3, #8
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	1c5a      	adds	r2, r3, #1
 8005016:	60fa      	str	r2, [r7, #12]
 8005018:	b2ca      	uxtb	r2, r1
 800501a:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 800501c:	2300      	movs	r3, #0
 800501e:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005020:	e00a      	b.n	8005038 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8005022:	68ba      	ldr	r2, [r7, #8]
 8005024:	1c53      	adds	r3, r2, #1
 8005026:	60bb      	str	r3, [r7, #8]
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	1c59      	adds	r1, r3, #1
 800502c:	60f9      	str	r1, [r7, #12]
 800502e:	7812      	ldrb	r2, [r2, #0]
 8005030:	701a      	strb	r2, [r3, #0]
    n++;
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	3301      	adds	r3, #1
 8005036:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005038:	697a      	ldr	r2, [r7, #20]
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	429a      	cmp	r2, r3
 800503e:	d3f0      	bcc.n	8005022 <_EncodeStr+0x6e>
  }
  return pPayload;
 8005040:	68fb      	ldr	r3, [r7, #12]
}
 8005042:	4618      	mov	r0, r3
 8005044:	371c      	adds	r7, #28
 8005046:	46bd      	mov	sp, r7
 8005048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504c:	4770      	bx	lr

0800504e <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800504e:	b480      	push	{r7}
 8005050:	b083      	sub	sp, #12
 8005052:	af00      	add	r7, sp, #0
 8005054:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	3304      	adds	r3, #4
}
 800505a:	4618      	mov	r0, r3
 800505c:	370c      	adds	r7, #12
 800505e:	46bd      	mov	sp, r7
 8005060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005064:	4770      	bx	lr
	...

08005068 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8005068:	b580      	push	{r7, lr}
 800506a:	b082      	sub	sp, #8
 800506c:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800506e:	4b35      	ldr	r3, [pc, #212]	@ (8005144 <_HandleIncomingPacket+0xdc>)
 8005070:	7e1b      	ldrb	r3, [r3, #24]
 8005072:	4618      	mov	r0, r3
 8005074:	1cfb      	adds	r3, r7, #3
 8005076:	2201      	movs	r2, #1
 8005078:	4619      	mov	r1, r3
 800507a:	f7ff fdab 	bl	8004bd4 <SEGGER_RTT_ReadNoLock>
 800507e:	4603      	mov	r3, r0
 8005080:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2b00      	cmp	r3, #0
 8005086:	dd59      	ble.n	800513c <_HandleIncomingPacket+0xd4>
    switch (Cmd) {
 8005088:	78fb      	ldrb	r3, [r7, #3]
 800508a:	2b80      	cmp	r3, #128	@ 0x80
 800508c:	d032      	beq.n	80050f4 <_HandleIncomingPacket+0x8c>
 800508e:	2b80      	cmp	r3, #128	@ 0x80
 8005090:	dc42      	bgt.n	8005118 <_HandleIncomingPacket+0xb0>
 8005092:	2b07      	cmp	r3, #7
 8005094:	dc16      	bgt.n	80050c4 <_HandleIncomingPacket+0x5c>
 8005096:	2b00      	cmp	r3, #0
 8005098:	dd3e      	ble.n	8005118 <_HandleIncomingPacket+0xb0>
 800509a:	3b01      	subs	r3, #1
 800509c:	2b06      	cmp	r3, #6
 800509e:	d83b      	bhi.n	8005118 <_HandleIncomingPacket+0xb0>
 80050a0:	a201      	add	r2, pc, #4	@ (adr r2, 80050a8 <_HandleIncomingPacket+0x40>)
 80050a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050a6:	bf00      	nop
 80050a8:	080050cb 	.word	0x080050cb
 80050ac:	080050d1 	.word	0x080050d1
 80050b0:	080050d7 	.word	0x080050d7
 80050b4:	080050dd 	.word	0x080050dd
 80050b8:	080050e3 	.word	0x080050e3
 80050bc:	080050e9 	.word	0x080050e9
 80050c0:	080050ef 	.word	0x080050ef
 80050c4:	2b7f      	cmp	r3, #127	@ 0x7f
 80050c6:	d034      	beq.n	8005132 <_HandleIncomingPacket+0xca>
 80050c8:	e026      	b.n	8005118 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80050ca:	f000 fba5 	bl	8005818 <SEGGER_SYSVIEW_Start>
      break;
 80050ce:	e035      	b.n	800513c <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80050d0:	f000 fc5c 	bl	800598c <SEGGER_SYSVIEW_Stop>
      break;
 80050d4:	e032      	b.n	800513c <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80050d6:	f000 fe35 	bl	8005d44 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80050da:	e02f      	b.n	800513c <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80050dc:	f000 fdfa 	bl	8005cd4 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80050e0:	e02c      	b.n	800513c <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80050e2:	f000 fc79 	bl	80059d8 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80050e6:	e029      	b.n	800513c <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80050e8:	f001 f868 	bl	80061bc <SEGGER_SYSVIEW_SendNumModules>
      break;
 80050ec:	e026      	b.n	800513c <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80050ee:	f001 f847 	bl	8006180 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80050f2:	e023      	b.n	800513c <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80050f4:	4b13      	ldr	r3, [pc, #76]	@ (8005144 <_HandleIncomingPacket+0xdc>)
 80050f6:	7e1b      	ldrb	r3, [r3, #24]
 80050f8:	4618      	mov	r0, r3
 80050fa:	1cfb      	adds	r3, r7, #3
 80050fc:	2201      	movs	r2, #1
 80050fe:	4619      	mov	r1, r3
 8005100:	f7ff fd68 	bl	8004bd4 <SEGGER_RTT_ReadNoLock>
 8005104:	4603      	mov	r3, r0
 8005106:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2b00      	cmp	r3, #0
 800510c:	dd13      	ble.n	8005136 <_HandleIncomingPacket+0xce>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800510e:	78fb      	ldrb	r3, [r7, #3]
 8005110:	4618      	mov	r0, r3
 8005112:	f000 ffb5 	bl	8006080 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8005116:	e00e      	b.n	8005136 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005118:	78fb      	ldrb	r3, [r7, #3]
 800511a:	b25b      	sxtb	r3, r3
 800511c:	2b00      	cmp	r3, #0
 800511e:	da0c      	bge.n	800513a <_HandleIncomingPacket+0xd2>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005120:	4b08      	ldr	r3, [pc, #32]	@ (8005144 <_HandleIncomingPacket+0xdc>)
 8005122:	7e1b      	ldrb	r3, [r3, #24]
 8005124:	4618      	mov	r0, r3
 8005126:	1cfb      	adds	r3, r7, #3
 8005128:	2201      	movs	r2, #1
 800512a:	4619      	mov	r1, r3
 800512c:	f7ff fd52 	bl	8004bd4 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8005130:	e003      	b.n	800513a <_HandleIncomingPacket+0xd2>
      break;
 8005132:	bf00      	nop
 8005134:	e002      	b.n	800513c <_HandleIncomingPacket+0xd4>
      break;
 8005136:	bf00      	nop
 8005138:	e000      	b.n	800513c <_HandleIncomingPacket+0xd4>
      break;
 800513a:	bf00      	nop
    }
  }
}
 800513c:	bf00      	nop
 800513e:	3708      	adds	r7, #8
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}
 8005144:	200143e0 	.word	0x200143e0

08005148 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005148:	b580      	push	{r7, lr}
 800514a:	b08c      	sub	sp, #48	@ 0x30
 800514c:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800514e:	2301      	movs	r3, #1
 8005150:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8005152:	1d3b      	adds	r3, r7, #4
 8005154:	3301      	adds	r3, #1
 8005156:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005158:	69fb      	ldr	r3, [r7, #28]
 800515a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800515c:	4b31      	ldr	r3, [pc, #196]	@ (8005224 <_TrySendOverflowPacket+0xdc>)
 800515e:	695b      	ldr	r3, [r3, #20]
 8005160:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005162:	e00b      	b.n	800517c <_TrySendOverflowPacket+0x34>
 8005164:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005166:	b2da      	uxtb	r2, r3
 8005168:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800516a:	1c59      	adds	r1, r3, #1
 800516c:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800516e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005172:	b2d2      	uxtb	r2, r2
 8005174:	701a      	strb	r2, [r3, #0]
 8005176:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005178:	09db      	lsrs	r3, r3, #7
 800517a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800517c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800517e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005180:	d8f0      	bhi.n	8005164 <_TrySendOverflowPacket+0x1c>
 8005182:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005184:	1c5a      	adds	r2, r3, #1
 8005186:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005188:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800518a:	b2d2      	uxtb	r2, r2
 800518c:	701a      	strb	r2, [r3, #0]
 800518e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005190:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005192:	4b25      	ldr	r3, [pc, #148]	@ (8005228 <_TrySendOverflowPacket+0xe0>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005198:	4b22      	ldr	r3, [pc, #136]	@ (8005224 <_TrySendOverflowPacket+0xdc>)
 800519a:	68db      	ldr	r3, [r3, #12]
 800519c:	69ba      	ldr	r2, [r7, #24]
 800519e:	1ad3      	subs	r3, r2, r3
 80051a0:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80051a2:	69fb      	ldr	r3, [r7, #28]
 80051a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	623b      	str	r3, [r7, #32]
 80051aa:	e00b      	b.n	80051c4 <_TrySendOverflowPacket+0x7c>
 80051ac:	6a3b      	ldr	r3, [r7, #32]
 80051ae:	b2da      	uxtb	r2, r3
 80051b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051b2:	1c59      	adds	r1, r3, #1
 80051b4:	6279      	str	r1, [r7, #36]	@ 0x24
 80051b6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80051ba:	b2d2      	uxtb	r2, r2
 80051bc:	701a      	strb	r2, [r3, #0]
 80051be:	6a3b      	ldr	r3, [r7, #32]
 80051c0:	09db      	lsrs	r3, r3, #7
 80051c2:	623b      	str	r3, [r7, #32]
 80051c4:	6a3b      	ldr	r3, [r7, #32]
 80051c6:	2b7f      	cmp	r3, #127	@ 0x7f
 80051c8:	d8f0      	bhi.n	80051ac <_TrySendOverflowPacket+0x64>
 80051ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051cc:	1c5a      	adds	r2, r3, #1
 80051ce:	627a      	str	r2, [r7, #36]	@ 0x24
 80051d0:	6a3a      	ldr	r2, [r7, #32]
 80051d2:	b2d2      	uxtb	r2, r2
 80051d4:	701a      	strb	r2, [r3, #0]
 80051d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051d8:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 80051da:	4b12      	ldr	r3, [pc, #72]	@ (8005224 <_TrySendOverflowPacket+0xdc>)
 80051dc:	785b      	ldrb	r3, [r3, #1]
 80051de:	4618      	mov	r0, r3
 80051e0:	1d3b      	adds	r3, r7, #4
 80051e2:	69fa      	ldr	r2, [r7, #28]
 80051e4:	1ad3      	subs	r3, r2, r3
 80051e6:	461a      	mov	r2, r3
 80051e8:	1d3b      	adds	r3, r7, #4
 80051ea:	4619      	mov	r1, r3
 80051ec:	f7fb f810 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80051f0:	4603      	mov	r3, r0
 80051f2:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d009      	beq.n	800520e <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80051fa:	4a0a      	ldr	r2, [pc, #40]	@ (8005224 <_TrySendOverflowPacket+0xdc>)
 80051fc:	69bb      	ldr	r3, [r7, #24]
 80051fe:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005200:	4b08      	ldr	r3, [pc, #32]	@ (8005224 <_TrySendOverflowPacket+0xdc>)
 8005202:	781b      	ldrb	r3, [r3, #0]
 8005204:	3b01      	subs	r3, #1
 8005206:	b2da      	uxtb	r2, r3
 8005208:	4b06      	ldr	r3, [pc, #24]	@ (8005224 <_TrySendOverflowPacket+0xdc>)
 800520a:	701a      	strb	r2, [r3, #0]
 800520c:	e004      	b.n	8005218 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800520e:	4b05      	ldr	r3, [pc, #20]	@ (8005224 <_TrySendOverflowPacket+0xdc>)
 8005210:	695b      	ldr	r3, [r3, #20]
 8005212:	3301      	adds	r3, #1
 8005214:	4a03      	ldr	r2, [pc, #12]	@ (8005224 <_TrySendOverflowPacket+0xdc>)
 8005216:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005218:	693b      	ldr	r3, [r7, #16]
}
 800521a:	4618      	mov	r0, r3
 800521c:	3730      	adds	r7, #48	@ 0x30
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}
 8005222:	bf00      	nop
 8005224:	200143e0 	.word	0x200143e0
 8005228:	e0001004 	.word	0xe0001004

0800522c <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 800522c:	b580      	push	{r7, lr}
 800522e:	b08a      	sub	sp, #40	@ 0x28
 8005230:	af00      	add	r7, sp, #0
 8005232:	60f8      	str	r0, [r7, #12]
 8005234:	60b9      	str	r1, [r7, #8]
 8005236:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005238:	4b6c      	ldr	r3, [pc, #432]	@ (80053ec <_SendPacket+0x1c0>)
 800523a:	781b      	ldrb	r3, [r3, #0]
 800523c:	2b01      	cmp	r3, #1
 800523e:	d010      	beq.n	8005262 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005240:	4b6a      	ldr	r3, [pc, #424]	@ (80053ec <_SendPacket+0x1c0>)
 8005242:	781b      	ldrb	r3, [r3, #0]
 8005244:	2b00      	cmp	r3, #0
 8005246:	f000 80a3 	beq.w	8005390 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800524a:	4b68      	ldr	r3, [pc, #416]	@ (80053ec <_SendPacket+0x1c0>)
 800524c:	781b      	ldrb	r3, [r3, #0]
 800524e:	2b02      	cmp	r3, #2
 8005250:	d109      	bne.n	8005266 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8005252:	f7ff ff79 	bl	8005148 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8005256:	4b65      	ldr	r3, [pc, #404]	@ (80053ec <_SendPacket+0x1c0>)
 8005258:	781b      	ldrb	r3, [r3, #0]
 800525a:	2b01      	cmp	r3, #1
 800525c:	f040 809a 	bne.w	8005394 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 8005260:	e001      	b.n	8005266 <_SendPacket+0x3a>
    goto Send;
 8005262:	bf00      	nop
 8005264:	e000      	b.n	8005268 <_SendPacket+0x3c>
Send:
 8005266:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2b1f      	cmp	r3, #31
 800526c:	d809      	bhi.n	8005282 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800526e:	4b5f      	ldr	r3, [pc, #380]	@ (80053ec <_SendPacket+0x1c0>)
 8005270:	69da      	ldr	r2, [r3, #28]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	fa22 f303 	lsr.w	r3, r2, r3
 8005278:	f003 0301 	and.w	r3, r3, #1
 800527c:	2b00      	cmp	r3, #0
 800527e:	f040 808b 	bne.w	8005398 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2b17      	cmp	r3, #23
 8005286:	d807      	bhi.n	8005298 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	3b01      	subs	r3, #1
 800528c:	60fb      	str	r3, [r7, #12]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	b2da      	uxtb	r2, r3
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	701a      	strb	r2, [r3, #0]
 8005296:	e03d      	b.n	8005314 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8005298:	68ba      	ldr	r2, [r7, #8]
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	1ad3      	subs	r3, r2, r3
 800529e:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 80052a0:	69fb      	ldr	r3, [r7, #28]
 80052a2:	2b7f      	cmp	r3, #127	@ 0x7f
 80052a4:	d912      	bls.n	80052cc <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 80052a6:	69fb      	ldr	r3, [r7, #28]
 80052a8:	09da      	lsrs	r2, r3, #7
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	3b01      	subs	r3, #1
 80052ae:	60fb      	str	r3, [r7, #12]
 80052b0:	b2d2      	uxtb	r2, r2
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 80052b6:	69fb      	ldr	r3, [r7, #28]
 80052b8:	b2db      	uxtb	r3, r3
 80052ba:	68fa      	ldr	r2, [r7, #12]
 80052bc:	3a01      	subs	r2, #1
 80052be:	60fa      	str	r2, [r7, #12]
 80052c0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80052c4:	b2da      	uxtb	r2, r3
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	701a      	strb	r2, [r3, #0]
 80052ca:	e006      	b.n	80052da <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	3b01      	subs	r3, #1
 80052d0:	60fb      	str	r3, [r7, #12]
 80052d2:	69fb      	ldr	r3, [r7, #28]
 80052d4:	b2da      	uxtb	r2, r3
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2b7f      	cmp	r3, #127	@ 0x7f
 80052de:	d912      	bls.n	8005306 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	09da      	lsrs	r2, r3, #7
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	3b01      	subs	r3, #1
 80052e8:	60fb      	str	r3, [r7, #12]
 80052ea:	b2d2      	uxtb	r2, r2
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	b2db      	uxtb	r3, r3
 80052f4:	68fa      	ldr	r2, [r7, #12]
 80052f6:	3a01      	subs	r2, #1
 80052f8:	60fa      	str	r2, [r7, #12]
 80052fa:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80052fe:	b2da      	uxtb	r2, r3
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	701a      	strb	r2, [r3, #0]
 8005304:	e006      	b.n	8005314 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	3b01      	subs	r3, #1
 800530a:	60fb      	str	r3, [r7, #12]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	b2da      	uxtb	r2, r3
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005314:	4b36      	ldr	r3, [pc, #216]	@ (80053f0 <_SendPacket+0x1c4>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800531a:	4b34      	ldr	r3, [pc, #208]	@ (80053ec <_SendPacket+0x1c0>)
 800531c:	68db      	ldr	r3, [r3, #12]
 800531e:	69ba      	ldr	r2, [r7, #24]
 8005320:	1ad3      	subs	r3, r2, r3
 8005322:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	627b      	str	r3, [r7, #36]	@ 0x24
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	623b      	str	r3, [r7, #32]
 800532c:	e00b      	b.n	8005346 <_SendPacket+0x11a>
 800532e:	6a3b      	ldr	r3, [r7, #32]
 8005330:	b2da      	uxtb	r2, r3
 8005332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005334:	1c59      	adds	r1, r3, #1
 8005336:	6279      	str	r1, [r7, #36]	@ 0x24
 8005338:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800533c:	b2d2      	uxtb	r2, r2
 800533e:	701a      	strb	r2, [r3, #0]
 8005340:	6a3b      	ldr	r3, [r7, #32]
 8005342:	09db      	lsrs	r3, r3, #7
 8005344:	623b      	str	r3, [r7, #32]
 8005346:	6a3b      	ldr	r3, [r7, #32]
 8005348:	2b7f      	cmp	r3, #127	@ 0x7f
 800534a:	d8f0      	bhi.n	800532e <_SendPacket+0x102>
 800534c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800534e:	1c5a      	adds	r2, r3, #1
 8005350:	627a      	str	r2, [r7, #36]	@ 0x24
 8005352:	6a3a      	ldr	r2, [r7, #32]
 8005354:	b2d2      	uxtb	r2, r2
 8005356:	701a      	strb	r2, [r3, #0]
 8005358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800535a:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 800535c:	4b23      	ldr	r3, [pc, #140]	@ (80053ec <_SendPacket+0x1c0>)
 800535e:	785b      	ldrb	r3, [r3, #1]
 8005360:	4618      	mov	r0, r3
 8005362:	68ba      	ldr	r2, [r7, #8]
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	1ad3      	subs	r3, r2, r3
 8005368:	461a      	mov	r2, r3
 800536a:	68f9      	ldr	r1, [r7, #12]
 800536c:	f7fa ff50 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005370:	4603      	mov	r3, r0
 8005372:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d003      	beq.n	8005382 <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800537a:	4a1c      	ldr	r2, [pc, #112]	@ (80053ec <_SendPacket+0x1c0>)
 800537c:	69bb      	ldr	r3, [r7, #24]
 800537e:	60d3      	str	r3, [r2, #12]
 8005380:	e00b      	b.n	800539a <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8005382:	4b1a      	ldr	r3, [pc, #104]	@ (80053ec <_SendPacket+0x1c0>)
 8005384:	781b      	ldrb	r3, [r3, #0]
 8005386:	3301      	adds	r3, #1
 8005388:	b2da      	uxtb	r2, r3
 800538a:	4b18      	ldr	r3, [pc, #96]	@ (80053ec <_SendPacket+0x1c0>)
 800538c:	701a      	strb	r2, [r3, #0]
 800538e:	e004      	b.n	800539a <_SendPacket+0x16e>
    goto SendDone;
 8005390:	bf00      	nop
 8005392:	e002      	b.n	800539a <_SendPacket+0x16e>
      goto SendDone;
 8005394:	bf00      	nop
 8005396:	e000      	b.n	800539a <_SendPacket+0x16e>
      goto SendDone;
 8005398:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800539a:	4b14      	ldr	r3, [pc, #80]	@ (80053ec <_SendPacket+0x1c0>)
 800539c:	7e1b      	ldrb	r3, [r3, #24]
 800539e:	4619      	mov	r1, r3
 80053a0:	4a14      	ldr	r2, [pc, #80]	@ (80053f4 <_SendPacket+0x1c8>)
 80053a2:	460b      	mov	r3, r1
 80053a4:	005b      	lsls	r3, r3, #1
 80053a6:	440b      	add	r3, r1
 80053a8:	00db      	lsls	r3, r3, #3
 80053aa:	4413      	add	r3, r2
 80053ac:	336c      	adds	r3, #108	@ 0x6c
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	4b0e      	ldr	r3, [pc, #56]	@ (80053ec <_SendPacket+0x1c0>)
 80053b2:	7e1b      	ldrb	r3, [r3, #24]
 80053b4:	4618      	mov	r0, r3
 80053b6:	490f      	ldr	r1, [pc, #60]	@ (80053f4 <_SendPacket+0x1c8>)
 80053b8:	4603      	mov	r3, r0
 80053ba:	005b      	lsls	r3, r3, #1
 80053bc:	4403      	add	r3, r0
 80053be:	00db      	lsls	r3, r3, #3
 80053c0:	440b      	add	r3, r1
 80053c2:	3370      	adds	r3, #112	@ 0x70
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	429a      	cmp	r2, r3
 80053c8:	d00b      	beq.n	80053e2 <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80053ca:	4b08      	ldr	r3, [pc, #32]	@ (80053ec <_SendPacket+0x1c0>)
 80053cc:	789b      	ldrb	r3, [r3, #2]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d107      	bne.n	80053e2 <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80053d2:	4b06      	ldr	r3, [pc, #24]	@ (80053ec <_SendPacket+0x1c0>)
 80053d4:	2201      	movs	r2, #1
 80053d6:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80053d8:	f7ff fe46 	bl	8005068 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80053dc:	4b03      	ldr	r3, [pc, #12]	@ (80053ec <_SendPacket+0x1c0>)
 80053de:	2200      	movs	r2, #0
 80053e0:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80053e2:	bf00      	nop
 80053e4:	3728      	adds	r7, #40	@ 0x28
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}
 80053ea:	bf00      	nop
 80053ec:	200143e0 	.word	0x200143e0
 80053f0:	e0001004 	.word	0xe0001004
 80053f4:	20012f20 	.word	0x20012f20

080053f8 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b086      	sub	sp, #24
 80053fc:	af02      	add	r7, sp, #8
 80053fe:	60f8      	str	r0, [r7, #12]
 8005400:	60b9      	str	r1, [r7, #8]
 8005402:	607a      	str	r2, [r7, #4]
 8005404:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005406:	2300      	movs	r3, #0
 8005408:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800540c:	4917      	ldr	r1, [pc, #92]	@ (800546c <SEGGER_SYSVIEW_Init+0x74>)
 800540e:	4818      	ldr	r0, [pc, #96]	@ (8005470 <SEGGER_SYSVIEW_Init+0x78>)
 8005410:	f7ff fcdc 	bl	8004dcc <SEGGER_RTT_AllocUpBuffer>
 8005414:	4603      	mov	r3, r0
 8005416:	b2da      	uxtb	r2, r3
 8005418:	4b16      	ldr	r3, [pc, #88]	@ (8005474 <SEGGER_SYSVIEW_Init+0x7c>)
 800541a:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 800541c:	4b15      	ldr	r3, [pc, #84]	@ (8005474 <SEGGER_SYSVIEW_Init+0x7c>)
 800541e:	785a      	ldrb	r2, [r3, #1]
 8005420:	4b14      	ldr	r3, [pc, #80]	@ (8005474 <SEGGER_SYSVIEW_Init+0x7c>)
 8005422:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005424:	4b13      	ldr	r3, [pc, #76]	@ (8005474 <SEGGER_SYSVIEW_Init+0x7c>)
 8005426:	7e1b      	ldrb	r3, [r3, #24]
 8005428:	4618      	mov	r0, r3
 800542a:	2300      	movs	r3, #0
 800542c:	9300      	str	r3, [sp, #0]
 800542e:	2308      	movs	r3, #8
 8005430:	4a11      	ldr	r2, [pc, #68]	@ (8005478 <SEGGER_SYSVIEW_Init+0x80>)
 8005432:	490f      	ldr	r1, [pc, #60]	@ (8005470 <SEGGER_SYSVIEW_Init+0x78>)
 8005434:	f7ff fd4e 	bl	8004ed4 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8005438:	4b0e      	ldr	r3, [pc, #56]	@ (8005474 <SEGGER_SYSVIEW_Init+0x7c>)
 800543a:	2200      	movs	r2, #0
 800543c:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800543e:	4b0f      	ldr	r3, [pc, #60]	@ (800547c <SEGGER_SYSVIEW_Init+0x84>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a0c      	ldr	r2, [pc, #48]	@ (8005474 <SEGGER_SYSVIEW_Init+0x7c>)
 8005444:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8005446:	4a0b      	ldr	r2, [pc, #44]	@ (8005474 <SEGGER_SYSVIEW_Init+0x7c>)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 800544c:	4a09      	ldr	r2, [pc, #36]	@ (8005474 <SEGGER_SYSVIEW_Init+0x7c>)
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8005452:	4a08      	ldr	r2, [pc, #32]	@ (8005474 <SEGGER_SYSVIEW_Init+0x7c>)
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8005458:	4a06      	ldr	r2, [pc, #24]	@ (8005474 <SEGGER_SYSVIEW_Init+0x7c>)
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800545e:	4b05      	ldr	r3, [pc, #20]	@ (8005474 <SEGGER_SYSVIEW_Init+0x7c>)
 8005460:	2200      	movs	r2, #0
 8005462:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8005464:	bf00      	nop
 8005466:	3710      	adds	r7, #16
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}
 800546c:	200133d8 	.word	0x200133d8
 8005470:	08006dc0 	.word	0x08006dc0
 8005474:	200143e0 	.word	0x200143e0
 8005478:	200143d8 	.word	0x200143d8
 800547c:	e0001004 	.word	0xe0001004

08005480 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8005480:	b480      	push	{r7}
 8005482:	b083      	sub	sp, #12
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8005488:	4a04      	ldr	r2, [pc, #16]	@ (800549c <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6113      	str	r3, [r2, #16]
}
 800548e:	bf00      	nop
 8005490:	370c      	adds	r7, #12
 8005492:	46bd      	mov	sp, r7
 8005494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005498:	4770      	bx	lr
 800549a:	bf00      	nop
 800549c:	200143e0 	.word	0x200143e0

080054a0 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b084      	sub	sp, #16
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80054a8:	f3ef 8311 	mrs	r3, BASEPRI
 80054ac:	f04f 0120 	mov.w	r1, #32
 80054b0:	f381 8811 	msr	BASEPRI, r1
 80054b4:	60fb      	str	r3, [r7, #12]
 80054b6:	4808      	ldr	r0, [pc, #32]	@ (80054d8 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80054b8:	f7ff fdc9 	bl	800504e <_PreparePacket>
 80054bc:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80054be:	687a      	ldr	r2, [r7, #4]
 80054c0:	68b9      	ldr	r1, [r7, #8]
 80054c2:	68b8      	ldr	r0, [r7, #8]
 80054c4:	f7ff feb2 	bl	800522c <_SendPacket>
  RECORD_END();
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f383 8811 	msr	BASEPRI, r3
}
 80054ce:	bf00      	nop
 80054d0:	3710      	adds	r7, #16
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}
 80054d6:	bf00      	nop
 80054d8:	20014410 	.word	0x20014410

080054dc <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80054dc:	b580      	push	{r7, lr}
 80054de:	b088      	sub	sp, #32
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
 80054e4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80054e6:	f3ef 8311 	mrs	r3, BASEPRI
 80054ea:	f04f 0120 	mov.w	r1, #32
 80054ee:	f381 8811 	msr	BASEPRI, r1
 80054f2:	617b      	str	r3, [r7, #20]
 80054f4:	4816      	ldr	r0, [pc, #88]	@ (8005550 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80054f6:	f7ff fdaa 	bl	800504e <_PreparePacket>
 80054fa:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	61fb      	str	r3, [r7, #28]
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	61bb      	str	r3, [r7, #24]
 8005508:	e00b      	b.n	8005522 <SEGGER_SYSVIEW_RecordU32+0x46>
 800550a:	69bb      	ldr	r3, [r7, #24]
 800550c:	b2da      	uxtb	r2, r3
 800550e:	69fb      	ldr	r3, [r7, #28]
 8005510:	1c59      	adds	r1, r3, #1
 8005512:	61f9      	str	r1, [r7, #28]
 8005514:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005518:	b2d2      	uxtb	r2, r2
 800551a:	701a      	strb	r2, [r3, #0]
 800551c:	69bb      	ldr	r3, [r7, #24]
 800551e:	09db      	lsrs	r3, r3, #7
 8005520:	61bb      	str	r3, [r7, #24]
 8005522:	69bb      	ldr	r3, [r7, #24]
 8005524:	2b7f      	cmp	r3, #127	@ 0x7f
 8005526:	d8f0      	bhi.n	800550a <SEGGER_SYSVIEW_RecordU32+0x2e>
 8005528:	69fb      	ldr	r3, [r7, #28]
 800552a:	1c5a      	adds	r2, r3, #1
 800552c:	61fa      	str	r2, [r7, #28]
 800552e:	69ba      	ldr	r2, [r7, #24]
 8005530:	b2d2      	uxtb	r2, r2
 8005532:	701a      	strb	r2, [r3, #0]
 8005534:	69fb      	ldr	r3, [r7, #28]
 8005536:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005538:	687a      	ldr	r2, [r7, #4]
 800553a:	68f9      	ldr	r1, [r7, #12]
 800553c:	6938      	ldr	r0, [r7, #16]
 800553e:	f7ff fe75 	bl	800522c <_SendPacket>
  RECORD_END();
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	f383 8811 	msr	BASEPRI, r3
}
 8005548:	bf00      	nop
 800554a:	3720      	adds	r7, #32
 800554c:	46bd      	mov	sp, r7
 800554e:	bd80      	pop	{r7, pc}
 8005550:	20014410 	.word	0x20014410

08005554 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8005554:	b580      	push	{r7, lr}
 8005556:	b08c      	sub	sp, #48	@ 0x30
 8005558:	af00      	add	r7, sp, #0
 800555a:	60f8      	str	r0, [r7, #12]
 800555c:	60b9      	str	r1, [r7, #8]
 800555e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005560:	f3ef 8311 	mrs	r3, BASEPRI
 8005564:	f04f 0120 	mov.w	r1, #32
 8005568:	f381 8811 	msr	BASEPRI, r1
 800556c:	61fb      	str	r3, [r7, #28]
 800556e:	4825      	ldr	r0, [pc, #148]	@ (8005604 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8005570:	f7ff fd6d 	bl	800504e <_PreparePacket>
 8005574:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005576:	69bb      	ldr	r3, [r7, #24]
 8005578:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005582:	e00b      	b.n	800559c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8005584:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005586:	b2da      	uxtb	r2, r3
 8005588:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800558a:	1c59      	adds	r1, r3, #1
 800558c:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800558e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005592:	b2d2      	uxtb	r2, r2
 8005594:	701a      	strb	r2, [r3, #0]
 8005596:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005598:	09db      	lsrs	r3, r3, #7
 800559a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800559c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800559e:	2b7f      	cmp	r3, #127	@ 0x7f
 80055a0:	d8f0      	bhi.n	8005584 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80055a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055a4:	1c5a      	adds	r2, r3, #1
 80055a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80055a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80055aa:	b2d2      	uxtb	r2, r2
 80055ac:	701a      	strb	r2, [r3, #0]
 80055ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055b0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	623b      	str	r3, [r7, #32]
 80055ba:	e00b      	b.n	80055d4 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80055bc:	6a3b      	ldr	r3, [r7, #32]
 80055be:	b2da      	uxtb	r2, r3
 80055c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055c2:	1c59      	adds	r1, r3, #1
 80055c4:	6279      	str	r1, [r7, #36]	@ 0x24
 80055c6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80055ca:	b2d2      	uxtb	r2, r2
 80055cc:	701a      	strb	r2, [r3, #0]
 80055ce:	6a3b      	ldr	r3, [r7, #32]
 80055d0:	09db      	lsrs	r3, r3, #7
 80055d2:	623b      	str	r3, [r7, #32]
 80055d4:	6a3b      	ldr	r3, [r7, #32]
 80055d6:	2b7f      	cmp	r3, #127	@ 0x7f
 80055d8:	d8f0      	bhi.n	80055bc <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80055da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055dc:	1c5a      	adds	r2, r3, #1
 80055de:	627a      	str	r2, [r7, #36]	@ 0x24
 80055e0:	6a3a      	ldr	r2, [r7, #32]
 80055e2:	b2d2      	uxtb	r2, r2
 80055e4:	701a      	strb	r2, [r3, #0]
 80055e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055e8:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80055ea:	68fa      	ldr	r2, [r7, #12]
 80055ec:	6979      	ldr	r1, [r7, #20]
 80055ee:	69b8      	ldr	r0, [r7, #24]
 80055f0:	f7ff fe1c 	bl	800522c <_SendPacket>
  RECORD_END();
 80055f4:	69fb      	ldr	r3, [r7, #28]
 80055f6:	f383 8811 	msr	BASEPRI, r3
}
 80055fa:	bf00      	nop
 80055fc:	3730      	adds	r7, #48	@ 0x30
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}
 8005602:	bf00      	nop
 8005604:	20014410 	.word	0x20014410

08005608 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8005608:	b580      	push	{r7, lr}
 800560a:	b08e      	sub	sp, #56	@ 0x38
 800560c:	af00      	add	r7, sp, #0
 800560e:	60f8      	str	r0, [r7, #12]
 8005610:	60b9      	str	r1, [r7, #8]
 8005612:	607a      	str	r2, [r7, #4]
 8005614:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8005616:	f3ef 8311 	mrs	r3, BASEPRI
 800561a:	f04f 0120 	mov.w	r1, #32
 800561e:	f381 8811 	msr	BASEPRI, r1
 8005622:	61fb      	str	r3, [r7, #28]
 8005624:	4832      	ldr	r0, [pc, #200]	@ (80056f0 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8005626:	f7ff fd12 	bl	800504e <_PreparePacket>
 800562a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800562c:	69bb      	ldr	r3, [r7, #24]
 800562e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	637b      	str	r3, [r7, #52]	@ 0x34
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	633b      	str	r3, [r7, #48]	@ 0x30
 8005638:	e00b      	b.n	8005652 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 800563a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800563c:	b2da      	uxtb	r2, r3
 800563e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005640:	1c59      	adds	r1, r3, #1
 8005642:	6379      	str	r1, [r7, #52]	@ 0x34
 8005644:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005648:	b2d2      	uxtb	r2, r2
 800564a:	701a      	strb	r2, [r3, #0]
 800564c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800564e:	09db      	lsrs	r3, r3, #7
 8005650:	633b      	str	r3, [r7, #48]	@ 0x30
 8005652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005654:	2b7f      	cmp	r3, #127	@ 0x7f
 8005656:	d8f0      	bhi.n	800563a <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8005658:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800565a:	1c5a      	adds	r2, r3, #1
 800565c:	637a      	str	r2, [r7, #52]	@ 0x34
 800565e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005660:	b2d2      	uxtb	r2, r2
 8005662:	701a      	strb	r2, [r3, #0]
 8005664:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005666:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005670:	e00b      	b.n	800568a <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8005672:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005674:	b2da      	uxtb	r2, r3
 8005676:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005678:	1c59      	adds	r1, r3, #1
 800567a:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800567c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005680:	b2d2      	uxtb	r2, r2
 8005682:	701a      	strb	r2, [r3, #0]
 8005684:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005686:	09db      	lsrs	r3, r3, #7
 8005688:	62bb      	str	r3, [r7, #40]	@ 0x28
 800568a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800568c:	2b7f      	cmp	r3, #127	@ 0x7f
 800568e:	d8f0      	bhi.n	8005672 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8005690:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005692:	1c5a      	adds	r2, r3, #1
 8005694:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005696:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005698:	b2d2      	uxtb	r2, r2
 800569a:	701a      	strb	r2, [r3, #0]
 800569c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800569e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	623b      	str	r3, [r7, #32]
 80056a8:	e00b      	b.n	80056c2 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 80056aa:	6a3b      	ldr	r3, [r7, #32]
 80056ac:	b2da      	uxtb	r2, r3
 80056ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056b0:	1c59      	adds	r1, r3, #1
 80056b2:	6279      	str	r1, [r7, #36]	@ 0x24
 80056b4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80056b8:	b2d2      	uxtb	r2, r2
 80056ba:	701a      	strb	r2, [r3, #0]
 80056bc:	6a3b      	ldr	r3, [r7, #32]
 80056be:	09db      	lsrs	r3, r3, #7
 80056c0:	623b      	str	r3, [r7, #32]
 80056c2:	6a3b      	ldr	r3, [r7, #32]
 80056c4:	2b7f      	cmp	r3, #127	@ 0x7f
 80056c6:	d8f0      	bhi.n	80056aa <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 80056c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ca:	1c5a      	adds	r2, r3, #1
 80056cc:	627a      	str	r2, [r7, #36]	@ 0x24
 80056ce:	6a3a      	ldr	r2, [r7, #32]
 80056d0:	b2d2      	uxtb	r2, r2
 80056d2:	701a      	strb	r2, [r3, #0]
 80056d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056d6:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80056d8:	68fa      	ldr	r2, [r7, #12]
 80056da:	6979      	ldr	r1, [r7, #20]
 80056dc:	69b8      	ldr	r0, [r7, #24]
 80056de:	f7ff fda5 	bl	800522c <_SendPacket>
  RECORD_END();
 80056e2:	69fb      	ldr	r3, [r7, #28]
 80056e4:	f383 8811 	msr	BASEPRI, r3
}
 80056e8:	bf00      	nop
 80056ea:	3738      	adds	r7, #56	@ 0x38
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}
 80056f0:	20014410 	.word	0x20014410

080056f4 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b090      	sub	sp, #64	@ 0x40
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	60f8      	str	r0, [r7, #12]
 80056fc:	60b9      	str	r1, [r7, #8]
 80056fe:	607a      	str	r2, [r7, #4]
 8005700:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005702:	f3ef 8311 	mrs	r3, BASEPRI
 8005706:	f04f 0120 	mov.w	r1, #32
 800570a:	f381 8811 	msr	BASEPRI, r1
 800570e:	61fb      	str	r3, [r7, #28]
 8005710:	4840      	ldr	r0, [pc, #256]	@ (8005814 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8005712:	f7ff fc9c 	bl	800504e <_PreparePacket>
 8005716:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005718:	69bb      	ldr	r3, [r7, #24]
 800571a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005724:	e00b      	b.n	800573e <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8005726:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005728:	b2da      	uxtb	r2, r3
 800572a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800572c:	1c59      	adds	r1, r3, #1
 800572e:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8005730:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005734:	b2d2      	uxtb	r2, r2
 8005736:	701a      	strb	r2, [r3, #0]
 8005738:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800573a:	09db      	lsrs	r3, r3, #7
 800573c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800573e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005740:	2b7f      	cmp	r3, #127	@ 0x7f
 8005742:	d8f0      	bhi.n	8005726 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8005744:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005746:	1c5a      	adds	r2, r3, #1
 8005748:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800574a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800574c:	b2d2      	uxtb	r2, r2
 800574e:	701a      	strb	r2, [r3, #0]
 8005750:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005752:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	637b      	str	r3, [r7, #52]	@ 0x34
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	633b      	str	r3, [r7, #48]	@ 0x30
 800575c:	e00b      	b.n	8005776 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800575e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005760:	b2da      	uxtb	r2, r3
 8005762:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005764:	1c59      	adds	r1, r3, #1
 8005766:	6379      	str	r1, [r7, #52]	@ 0x34
 8005768:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800576c:	b2d2      	uxtb	r2, r2
 800576e:	701a      	strb	r2, [r3, #0]
 8005770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005772:	09db      	lsrs	r3, r3, #7
 8005774:	633b      	str	r3, [r7, #48]	@ 0x30
 8005776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005778:	2b7f      	cmp	r3, #127	@ 0x7f
 800577a:	d8f0      	bhi.n	800575e <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 800577c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800577e:	1c5a      	adds	r2, r3, #1
 8005780:	637a      	str	r2, [r7, #52]	@ 0x34
 8005782:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005784:	b2d2      	uxtb	r2, r2
 8005786:	701a      	strb	r2, [r3, #0]
 8005788:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800578a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005794:	e00b      	b.n	80057ae <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8005796:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005798:	b2da      	uxtb	r2, r3
 800579a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800579c:	1c59      	adds	r1, r3, #1
 800579e:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80057a0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80057a4:	b2d2      	uxtb	r2, r2
 80057a6:	701a      	strb	r2, [r3, #0]
 80057a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057aa:	09db      	lsrs	r3, r3, #7
 80057ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80057ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057b0:	2b7f      	cmp	r3, #127	@ 0x7f
 80057b2:	d8f0      	bhi.n	8005796 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 80057b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057b6:	1c5a      	adds	r2, r3, #1
 80057b8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80057ba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80057bc:	b2d2      	uxtb	r2, r2
 80057be:	701a      	strb	r2, [r3, #0]
 80057c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057c2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80057c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80057ca:	623b      	str	r3, [r7, #32]
 80057cc:	e00b      	b.n	80057e6 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 80057ce:	6a3b      	ldr	r3, [r7, #32]
 80057d0:	b2da      	uxtb	r2, r3
 80057d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057d4:	1c59      	adds	r1, r3, #1
 80057d6:	6279      	str	r1, [r7, #36]	@ 0x24
 80057d8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80057dc:	b2d2      	uxtb	r2, r2
 80057de:	701a      	strb	r2, [r3, #0]
 80057e0:	6a3b      	ldr	r3, [r7, #32]
 80057e2:	09db      	lsrs	r3, r3, #7
 80057e4:	623b      	str	r3, [r7, #32]
 80057e6:	6a3b      	ldr	r3, [r7, #32]
 80057e8:	2b7f      	cmp	r3, #127	@ 0x7f
 80057ea:	d8f0      	bhi.n	80057ce <SEGGER_SYSVIEW_RecordU32x4+0xda>
 80057ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057ee:	1c5a      	adds	r2, r3, #1
 80057f0:	627a      	str	r2, [r7, #36]	@ 0x24
 80057f2:	6a3a      	ldr	r2, [r7, #32]
 80057f4:	b2d2      	uxtb	r2, r2
 80057f6:	701a      	strb	r2, [r3, #0]
 80057f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057fa:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80057fc:	68fa      	ldr	r2, [r7, #12]
 80057fe:	6979      	ldr	r1, [r7, #20]
 8005800:	69b8      	ldr	r0, [r7, #24]
 8005802:	f7ff fd13 	bl	800522c <_SendPacket>
  RECORD_END();
 8005806:	69fb      	ldr	r3, [r7, #28]
 8005808:	f383 8811 	msr	BASEPRI, r3
}
 800580c:	bf00      	nop
 800580e:	3740      	adds	r7, #64	@ 0x40
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}
 8005814:	20014410 	.word	0x20014410

08005818 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8005818:	b580      	push	{r7, lr}
 800581a:	b08c      	sub	sp, #48	@ 0x30
 800581c:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800581e:	4b58      	ldr	r3, [pc, #352]	@ (8005980 <SEGGER_SYSVIEW_Start+0x168>)
 8005820:	2201      	movs	r2, #1
 8005822:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8005824:	f3ef 8311 	mrs	r3, BASEPRI
 8005828:	f04f 0120 	mov.w	r1, #32
 800582c:	f381 8811 	msr	BASEPRI, r1
 8005830:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8005832:	4b53      	ldr	r3, [pc, #332]	@ (8005980 <SEGGER_SYSVIEW_Start+0x168>)
 8005834:	785b      	ldrb	r3, [r3, #1]
 8005836:	220a      	movs	r2, #10
 8005838:	4952      	ldr	r1, [pc, #328]	@ (8005984 <SEGGER_SYSVIEW_Start+0x16c>)
 800583a:	4618      	mov	r0, r3
 800583c:	f7fa fce8 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8005846:	200a      	movs	r0, #10
 8005848:	f7ff fe2a 	bl	80054a0 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800584c:	f3ef 8311 	mrs	r3, BASEPRI
 8005850:	f04f 0120 	mov.w	r1, #32
 8005854:	f381 8811 	msr	BASEPRI, r1
 8005858:	60bb      	str	r3, [r7, #8]
 800585a:	484b      	ldr	r0, [pc, #300]	@ (8005988 <SEGGER_SYSVIEW_Start+0x170>)
 800585c:	f7ff fbf7 	bl	800504e <_PreparePacket>
 8005860:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800586a:	4b45      	ldr	r3, [pc, #276]	@ (8005980 <SEGGER_SYSVIEW_Start+0x168>)
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005870:	e00b      	b.n	800588a <SEGGER_SYSVIEW_Start+0x72>
 8005872:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005874:	b2da      	uxtb	r2, r3
 8005876:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005878:	1c59      	adds	r1, r3, #1
 800587a:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800587c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005880:	b2d2      	uxtb	r2, r2
 8005882:	701a      	strb	r2, [r3, #0]
 8005884:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005886:	09db      	lsrs	r3, r3, #7
 8005888:	62bb      	str	r3, [r7, #40]	@ 0x28
 800588a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800588c:	2b7f      	cmp	r3, #127	@ 0x7f
 800588e:	d8f0      	bhi.n	8005872 <SEGGER_SYSVIEW_Start+0x5a>
 8005890:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005892:	1c5a      	adds	r2, r3, #1
 8005894:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005896:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005898:	b2d2      	uxtb	r2, r2
 800589a:	701a      	strb	r2, [r3, #0]
 800589c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800589e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80058a4:	4b36      	ldr	r3, [pc, #216]	@ (8005980 <SEGGER_SYSVIEW_Start+0x168>)
 80058a6:	689b      	ldr	r3, [r3, #8]
 80058a8:	623b      	str	r3, [r7, #32]
 80058aa:	e00b      	b.n	80058c4 <SEGGER_SYSVIEW_Start+0xac>
 80058ac:	6a3b      	ldr	r3, [r7, #32]
 80058ae:	b2da      	uxtb	r2, r3
 80058b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058b2:	1c59      	adds	r1, r3, #1
 80058b4:	6279      	str	r1, [r7, #36]	@ 0x24
 80058b6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80058ba:	b2d2      	uxtb	r2, r2
 80058bc:	701a      	strb	r2, [r3, #0]
 80058be:	6a3b      	ldr	r3, [r7, #32]
 80058c0:	09db      	lsrs	r3, r3, #7
 80058c2:	623b      	str	r3, [r7, #32]
 80058c4:	6a3b      	ldr	r3, [r7, #32]
 80058c6:	2b7f      	cmp	r3, #127	@ 0x7f
 80058c8:	d8f0      	bhi.n	80058ac <SEGGER_SYSVIEW_Start+0x94>
 80058ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058cc:	1c5a      	adds	r2, r3, #1
 80058ce:	627a      	str	r2, [r7, #36]	@ 0x24
 80058d0:	6a3a      	ldr	r2, [r7, #32]
 80058d2:	b2d2      	uxtb	r2, r2
 80058d4:	701a      	strb	r2, [r3, #0]
 80058d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058d8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	61fb      	str	r3, [r7, #28]
 80058de:	4b28      	ldr	r3, [pc, #160]	@ (8005980 <SEGGER_SYSVIEW_Start+0x168>)
 80058e0:	691b      	ldr	r3, [r3, #16]
 80058e2:	61bb      	str	r3, [r7, #24]
 80058e4:	e00b      	b.n	80058fe <SEGGER_SYSVIEW_Start+0xe6>
 80058e6:	69bb      	ldr	r3, [r7, #24]
 80058e8:	b2da      	uxtb	r2, r3
 80058ea:	69fb      	ldr	r3, [r7, #28]
 80058ec:	1c59      	adds	r1, r3, #1
 80058ee:	61f9      	str	r1, [r7, #28]
 80058f0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80058f4:	b2d2      	uxtb	r2, r2
 80058f6:	701a      	strb	r2, [r3, #0]
 80058f8:	69bb      	ldr	r3, [r7, #24]
 80058fa:	09db      	lsrs	r3, r3, #7
 80058fc:	61bb      	str	r3, [r7, #24]
 80058fe:	69bb      	ldr	r3, [r7, #24]
 8005900:	2b7f      	cmp	r3, #127	@ 0x7f
 8005902:	d8f0      	bhi.n	80058e6 <SEGGER_SYSVIEW_Start+0xce>
 8005904:	69fb      	ldr	r3, [r7, #28]
 8005906:	1c5a      	adds	r2, r3, #1
 8005908:	61fa      	str	r2, [r7, #28]
 800590a:	69ba      	ldr	r2, [r7, #24]
 800590c:	b2d2      	uxtb	r2, r2
 800590e:	701a      	strb	r2, [r3, #0]
 8005910:	69fb      	ldr	r3, [r7, #28]
 8005912:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	617b      	str	r3, [r7, #20]
 8005918:	2300      	movs	r3, #0
 800591a:	613b      	str	r3, [r7, #16]
 800591c:	e00b      	b.n	8005936 <SEGGER_SYSVIEW_Start+0x11e>
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	b2da      	uxtb	r2, r3
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	1c59      	adds	r1, r3, #1
 8005926:	6179      	str	r1, [r7, #20]
 8005928:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800592c:	b2d2      	uxtb	r2, r2
 800592e:	701a      	strb	r2, [r3, #0]
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	09db      	lsrs	r3, r3, #7
 8005934:	613b      	str	r3, [r7, #16]
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	2b7f      	cmp	r3, #127	@ 0x7f
 800593a:	d8f0      	bhi.n	800591e <SEGGER_SYSVIEW_Start+0x106>
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	1c5a      	adds	r2, r3, #1
 8005940:	617a      	str	r2, [r7, #20]
 8005942:	693a      	ldr	r2, [r7, #16]
 8005944:	b2d2      	uxtb	r2, r2
 8005946:	701a      	strb	r2, [r3, #0]
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800594c:	2218      	movs	r2, #24
 800594e:	6839      	ldr	r1, [r7, #0]
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	f7ff fc6b 	bl	800522c <_SendPacket>
      RECORD_END();
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800595c:	4b08      	ldr	r3, [pc, #32]	@ (8005980 <SEGGER_SYSVIEW_Start+0x168>)
 800595e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005960:	2b00      	cmp	r3, #0
 8005962:	d002      	beq.n	800596a <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8005964:	4b06      	ldr	r3, [pc, #24]	@ (8005980 <SEGGER_SYSVIEW_Start+0x168>)
 8005966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005968:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800596a:	f000 f9eb 	bl	8005d44 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800596e:	f000 f9b1 	bl	8005cd4 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8005972:	f000 fc23 	bl	80061bc <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8005976:	bf00      	nop
 8005978:	3730      	adds	r7, #48	@ 0x30
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}
 800597e:	bf00      	nop
 8005980:	200143e0 	.word	0x200143e0
 8005984:	08006de8 	.word	0x08006de8
 8005988:	20014410 	.word	0x20014410

0800598c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 800598c:	b580      	push	{r7, lr}
 800598e:	b082      	sub	sp, #8
 8005990:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005992:	f3ef 8311 	mrs	r3, BASEPRI
 8005996:	f04f 0120 	mov.w	r1, #32
 800599a:	f381 8811 	msr	BASEPRI, r1
 800599e:	607b      	str	r3, [r7, #4]
 80059a0:	480b      	ldr	r0, [pc, #44]	@ (80059d0 <SEGGER_SYSVIEW_Stop+0x44>)
 80059a2:	f7ff fb54 	bl	800504e <_PreparePacket>
 80059a6:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80059a8:	4b0a      	ldr	r3, [pc, #40]	@ (80059d4 <SEGGER_SYSVIEW_Stop+0x48>)
 80059aa:	781b      	ldrb	r3, [r3, #0]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d007      	beq.n	80059c0 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80059b0:	220b      	movs	r2, #11
 80059b2:	6839      	ldr	r1, [r7, #0]
 80059b4:	6838      	ldr	r0, [r7, #0]
 80059b6:	f7ff fc39 	bl	800522c <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80059ba:	4b06      	ldr	r3, [pc, #24]	@ (80059d4 <SEGGER_SYSVIEW_Stop+0x48>)
 80059bc:	2200      	movs	r2, #0
 80059be:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f383 8811 	msr	BASEPRI, r3
}
 80059c6:	bf00      	nop
 80059c8:	3708      	adds	r7, #8
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}
 80059ce:	bf00      	nop
 80059d0:	20014410 	.word	0x20014410
 80059d4:	200143e0 	.word	0x200143e0

080059d8 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80059d8:	b580      	push	{r7, lr}
 80059da:	b08c      	sub	sp, #48	@ 0x30
 80059dc:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80059de:	f3ef 8311 	mrs	r3, BASEPRI
 80059e2:	f04f 0120 	mov.w	r1, #32
 80059e6:	f381 8811 	msr	BASEPRI, r1
 80059ea:	60fb      	str	r3, [r7, #12]
 80059ec:	4845      	ldr	r0, [pc, #276]	@ (8005b04 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80059ee:	f7ff fb2e 	bl	800504e <_PreparePacket>
 80059f2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80059fc:	4b42      	ldr	r3, [pc, #264]	@ (8005b08 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005a02:	e00b      	b.n	8005a1c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8005a04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a06:	b2da      	uxtb	r2, r3
 8005a08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a0a:	1c59      	adds	r1, r3, #1
 8005a0c:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005a0e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005a12:	b2d2      	uxtb	r2, r2
 8005a14:	701a      	strb	r2, [r3, #0]
 8005a16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a18:	09db      	lsrs	r3, r3, #7
 8005a1a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005a1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a1e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005a20:	d8f0      	bhi.n	8005a04 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8005a22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a24:	1c5a      	adds	r2, r3, #1
 8005a26:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005a28:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005a2a:	b2d2      	uxtb	r2, r2
 8005a2c:	701a      	strb	r2, [r3, #0]
 8005a2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a30:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a36:	4b34      	ldr	r3, [pc, #208]	@ (8005b08 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	623b      	str	r3, [r7, #32]
 8005a3c:	e00b      	b.n	8005a56 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8005a3e:	6a3b      	ldr	r3, [r7, #32]
 8005a40:	b2da      	uxtb	r2, r3
 8005a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a44:	1c59      	adds	r1, r3, #1
 8005a46:	6279      	str	r1, [r7, #36]	@ 0x24
 8005a48:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005a4c:	b2d2      	uxtb	r2, r2
 8005a4e:	701a      	strb	r2, [r3, #0]
 8005a50:	6a3b      	ldr	r3, [r7, #32]
 8005a52:	09db      	lsrs	r3, r3, #7
 8005a54:	623b      	str	r3, [r7, #32]
 8005a56:	6a3b      	ldr	r3, [r7, #32]
 8005a58:	2b7f      	cmp	r3, #127	@ 0x7f
 8005a5a:	d8f0      	bhi.n	8005a3e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8005a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a5e:	1c5a      	adds	r2, r3, #1
 8005a60:	627a      	str	r2, [r7, #36]	@ 0x24
 8005a62:	6a3a      	ldr	r2, [r7, #32]
 8005a64:	b2d2      	uxtb	r2, r2
 8005a66:	701a      	strb	r2, [r3, #0]
 8005a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a6a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	61fb      	str	r3, [r7, #28]
 8005a70:	4b25      	ldr	r3, [pc, #148]	@ (8005b08 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005a72:	691b      	ldr	r3, [r3, #16]
 8005a74:	61bb      	str	r3, [r7, #24]
 8005a76:	e00b      	b.n	8005a90 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8005a78:	69bb      	ldr	r3, [r7, #24]
 8005a7a:	b2da      	uxtb	r2, r3
 8005a7c:	69fb      	ldr	r3, [r7, #28]
 8005a7e:	1c59      	adds	r1, r3, #1
 8005a80:	61f9      	str	r1, [r7, #28]
 8005a82:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005a86:	b2d2      	uxtb	r2, r2
 8005a88:	701a      	strb	r2, [r3, #0]
 8005a8a:	69bb      	ldr	r3, [r7, #24]
 8005a8c:	09db      	lsrs	r3, r3, #7
 8005a8e:	61bb      	str	r3, [r7, #24]
 8005a90:	69bb      	ldr	r3, [r7, #24]
 8005a92:	2b7f      	cmp	r3, #127	@ 0x7f
 8005a94:	d8f0      	bhi.n	8005a78 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8005a96:	69fb      	ldr	r3, [r7, #28]
 8005a98:	1c5a      	adds	r2, r3, #1
 8005a9a:	61fa      	str	r2, [r7, #28]
 8005a9c:	69ba      	ldr	r2, [r7, #24]
 8005a9e:	b2d2      	uxtb	r2, r2
 8005aa0:	701a      	strb	r2, [r3, #0]
 8005aa2:	69fb      	ldr	r3, [r7, #28]
 8005aa4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	617b      	str	r3, [r7, #20]
 8005aaa:	2300      	movs	r3, #0
 8005aac:	613b      	str	r3, [r7, #16]
 8005aae:	e00b      	b.n	8005ac8 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	b2da      	uxtb	r2, r3
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	1c59      	adds	r1, r3, #1
 8005ab8:	6179      	str	r1, [r7, #20]
 8005aba:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005abe:	b2d2      	uxtb	r2, r2
 8005ac0:	701a      	strb	r2, [r3, #0]
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	09db      	lsrs	r3, r3, #7
 8005ac6:	613b      	str	r3, [r7, #16]
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	2b7f      	cmp	r3, #127	@ 0x7f
 8005acc:	d8f0      	bhi.n	8005ab0 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	1c5a      	adds	r2, r3, #1
 8005ad2:	617a      	str	r2, [r7, #20]
 8005ad4:	693a      	ldr	r2, [r7, #16]
 8005ad6:	b2d2      	uxtb	r2, r2
 8005ad8:	701a      	strb	r2, [r3, #0]
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005ade:	2218      	movs	r2, #24
 8005ae0:	6879      	ldr	r1, [r7, #4]
 8005ae2:	68b8      	ldr	r0, [r7, #8]
 8005ae4:	f7ff fba2 	bl	800522c <_SendPacket>
  RECORD_END();
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005aee:	4b06      	ldr	r3, [pc, #24]	@ (8005b08 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d002      	beq.n	8005afc <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8005af6:	4b04      	ldr	r3, [pc, #16]	@ (8005b08 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005afa:	4798      	blx	r3
  }
}
 8005afc:	bf00      	nop
 8005afe:	3730      	adds	r7, #48	@ 0x30
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bd80      	pop	{r7, pc}
 8005b04:	20014410 	.word	0x20014410
 8005b08:	200143e0 	.word	0x200143e0

08005b0c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b092      	sub	sp, #72	@ 0x48
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8005b14:	f3ef 8311 	mrs	r3, BASEPRI
 8005b18:	f04f 0120 	mov.w	r1, #32
 8005b1c:	f381 8811 	msr	BASEPRI, r1
 8005b20:	617b      	str	r3, [r7, #20]
 8005b22:	486a      	ldr	r0, [pc, #424]	@ (8005ccc <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8005b24:	f7ff fa93 	bl	800504e <_PreparePacket>
 8005b28:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681a      	ldr	r2, [r3, #0]
 8005b36:	4b66      	ldr	r3, [pc, #408]	@ (8005cd0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005b38:	691b      	ldr	r3, [r3, #16]
 8005b3a:	1ad3      	subs	r3, r2, r3
 8005b3c:	643b      	str	r3, [r7, #64]	@ 0x40
 8005b3e:	e00b      	b.n	8005b58 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8005b40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b42:	b2da      	uxtb	r2, r3
 8005b44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b46:	1c59      	adds	r1, r3, #1
 8005b48:	6479      	str	r1, [r7, #68]	@ 0x44
 8005b4a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005b4e:	b2d2      	uxtb	r2, r2
 8005b50:	701a      	strb	r2, [r3, #0]
 8005b52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b54:	09db      	lsrs	r3, r3, #7
 8005b56:	643b      	str	r3, [r7, #64]	@ 0x40
 8005b58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b5a:	2b7f      	cmp	r3, #127	@ 0x7f
 8005b5c:	d8f0      	bhi.n	8005b40 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8005b5e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b60:	1c5a      	adds	r2, r3, #1
 8005b62:	647a      	str	r2, [r7, #68]	@ 0x44
 8005b64:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005b66:	b2d2      	uxtb	r2, r2
 8005b68:	701a      	strb	r2, [r3, #0]
 8005b6a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b6c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	689b      	ldr	r3, [r3, #8]
 8005b76:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005b78:	e00b      	b.n	8005b92 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8005b7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b7c:	b2da      	uxtb	r2, r3
 8005b7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b80:	1c59      	adds	r1, r3, #1
 8005b82:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8005b84:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005b88:	b2d2      	uxtb	r2, r2
 8005b8a:	701a      	strb	r2, [r3, #0]
 8005b8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b8e:	09db      	lsrs	r3, r3, #7
 8005b90:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005b92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b94:	2b7f      	cmp	r3, #127	@ 0x7f
 8005b96:	d8f0      	bhi.n	8005b7a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8005b98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b9a:	1c5a      	adds	r2, r3, #1
 8005b9c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005b9e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005ba0:	b2d2      	uxtb	r2, r2
 8005ba2:	701a      	strb	r2, [r3, #0]
 8005ba4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ba6:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	2220      	movs	r2, #32
 8005bae:	4619      	mov	r1, r3
 8005bb0:	68f8      	ldr	r0, [r7, #12]
 8005bb2:	f7ff f9ff 	bl	8004fb4 <_EncodeStr>
 8005bb6:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8005bb8:	2209      	movs	r2, #9
 8005bba:	68f9      	ldr	r1, [r7, #12]
 8005bbc:	6938      	ldr	r0, [r7, #16]
 8005bbe:	f7ff fb35 	bl	800522c <_SendPacket>
  //
  pPayload = pPayloadStart;
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	637b      	str	r3, [r7, #52]	@ 0x34
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681a      	ldr	r2, [r3, #0]
 8005bce:	4b40      	ldr	r3, [pc, #256]	@ (8005cd0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005bd0:	691b      	ldr	r3, [r3, #16]
 8005bd2:	1ad3      	subs	r3, r2, r3
 8005bd4:	633b      	str	r3, [r7, #48]	@ 0x30
 8005bd6:	e00b      	b.n	8005bf0 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8005bd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bda:	b2da      	uxtb	r2, r3
 8005bdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bde:	1c59      	adds	r1, r3, #1
 8005be0:	6379      	str	r1, [r7, #52]	@ 0x34
 8005be2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005be6:	b2d2      	uxtb	r2, r2
 8005be8:	701a      	strb	r2, [r3, #0]
 8005bea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bec:	09db      	lsrs	r3, r3, #7
 8005bee:	633b      	str	r3, [r7, #48]	@ 0x30
 8005bf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bf2:	2b7f      	cmp	r3, #127	@ 0x7f
 8005bf4:	d8f0      	bhi.n	8005bd8 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8005bf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bf8:	1c5a      	adds	r2, r3, #1
 8005bfa:	637a      	str	r2, [r7, #52]	@ 0x34
 8005bfc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005bfe:	b2d2      	uxtb	r2, r2
 8005c00:	701a      	strb	r2, [r3, #0]
 8005c02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c04:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	68db      	ldr	r3, [r3, #12]
 8005c0e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005c10:	e00b      	b.n	8005c2a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8005c12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c14:	b2da      	uxtb	r2, r3
 8005c16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c18:	1c59      	adds	r1, r3, #1
 8005c1a:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005c1c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005c20:	b2d2      	uxtb	r2, r2
 8005c22:	701a      	strb	r2, [r3, #0]
 8005c24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c26:	09db      	lsrs	r3, r3, #7
 8005c28:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005c2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c2c:	2b7f      	cmp	r3, #127	@ 0x7f
 8005c2e:	d8f0      	bhi.n	8005c12 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8005c30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c32:	1c5a      	adds	r2, r3, #1
 8005c34:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005c36:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005c38:	b2d2      	uxtb	r2, r2
 8005c3a:	701a      	strb	r2, [r3, #0]
 8005c3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c3e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	691b      	ldr	r3, [r3, #16]
 8005c48:	623b      	str	r3, [r7, #32]
 8005c4a:	e00b      	b.n	8005c64 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8005c4c:	6a3b      	ldr	r3, [r7, #32]
 8005c4e:	b2da      	uxtb	r2, r3
 8005c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c52:	1c59      	adds	r1, r3, #1
 8005c54:	6279      	str	r1, [r7, #36]	@ 0x24
 8005c56:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005c5a:	b2d2      	uxtb	r2, r2
 8005c5c:	701a      	strb	r2, [r3, #0]
 8005c5e:	6a3b      	ldr	r3, [r7, #32]
 8005c60:	09db      	lsrs	r3, r3, #7
 8005c62:	623b      	str	r3, [r7, #32]
 8005c64:	6a3b      	ldr	r3, [r7, #32]
 8005c66:	2b7f      	cmp	r3, #127	@ 0x7f
 8005c68:	d8f0      	bhi.n	8005c4c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8005c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c6c:	1c5a      	adds	r2, r3, #1
 8005c6e:	627a      	str	r2, [r7, #36]	@ 0x24
 8005c70:	6a3a      	ldr	r2, [r7, #32]
 8005c72:	b2d2      	uxtb	r2, r2
 8005c74:	701a      	strb	r2, [r3, #0]
 8005c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c78:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	61fb      	str	r3, [r7, #28]
 8005c7e:	2300      	movs	r3, #0
 8005c80:	61bb      	str	r3, [r7, #24]
 8005c82:	e00b      	b.n	8005c9c <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8005c84:	69bb      	ldr	r3, [r7, #24]
 8005c86:	b2da      	uxtb	r2, r3
 8005c88:	69fb      	ldr	r3, [r7, #28]
 8005c8a:	1c59      	adds	r1, r3, #1
 8005c8c:	61f9      	str	r1, [r7, #28]
 8005c8e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005c92:	b2d2      	uxtb	r2, r2
 8005c94:	701a      	strb	r2, [r3, #0]
 8005c96:	69bb      	ldr	r3, [r7, #24]
 8005c98:	09db      	lsrs	r3, r3, #7
 8005c9a:	61bb      	str	r3, [r7, #24]
 8005c9c:	69bb      	ldr	r3, [r7, #24]
 8005c9e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005ca0:	d8f0      	bhi.n	8005c84 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8005ca2:	69fb      	ldr	r3, [r7, #28]
 8005ca4:	1c5a      	adds	r2, r3, #1
 8005ca6:	61fa      	str	r2, [r7, #28]
 8005ca8:	69ba      	ldr	r2, [r7, #24]
 8005caa:	b2d2      	uxtb	r2, r2
 8005cac:	701a      	strb	r2, [r3, #0]
 8005cae:	69fb      	ldr	r3, [r7, #28]
 8005cb0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8005cb2:	2215      	movs	r2, #21
 8005cb4:	68f9      	ldr	r1, [r7, #12]
 8005cb6:	6938      	ldr	r0, [r7, #16]
 8005cb8:	f7ff fab8 	bl	800522c <_SendPacket>
  RECORD_END();
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	f383 8811 	msr	BASEPRI, r3
}
 8005cc2:	bf00      	nop
 8005cc4:	3748      	adds	r7, #72	@ 0x48
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}
 8005cca:	bf00      	nop
 8005ccc:	20014410 	.word	0x20014410
 8005cd0:	200143e0 	.word	0x200143e0

08005cd4 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8005cd8:	4b07      	ldr	r3, [pc, #28]	@ (8005cf8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005cda:	6a1b      	ldr	r3, [r3, #32]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d008      	beq.n	8005cf2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8005ce0:	4b05      	ldr	r3, [pc, #20]	@ (8005cf8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005ce2:	6a1b      	ldr	r3, [r3, #32]
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d003      	beq.n	8005cf2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8005cea:	4b03      	ldr	r3, [pc, #12]	@ (8005cf8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005cec:	6a1b      	ldr	r3, [r3, #32]
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	4798      	blx	r3
  }
}
 8005cf2:	bf00      	nop
 8005cf4:	bd80      	pop	{r7, pc}
 8005cf6:	bf00      	nop
 8005cf8:	200143e0 	.word	0x200143e0

08005cfc <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b086      	sub	sp, #24
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005d04:	f3ef 8311 	mrs	r3, BASEPRI
 8005d08:	f04f 0120 	mov.w	r1, #32
 8005d0c:	f381 8811 	msr	BASEPRI, r1
 8005d10:	617b      	str	r3, [r7, #20]
 8005d12:	480b      	ldr	r0, [pc, #44]	@ (8005d40 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8005d14:	f7ff f99b 	bl	800504e <_PreparePacket>
 8005d18:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005d1a:	2280      	movs	r2, #128	@ 0x80
 8005d1c:	6879      	ldr	r1, [r7, #4]
 8005d1e:	6938      	ldr	r0, [r7, #16]
 8005d20:	f7ff f948 	bl	8004fb4 <_EncodeStr>
 8005d24:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8005d26:	220e      	movs	r2, #14
 8005d28:	68f9      	ldr	r1, [r7, #12]
 8005d2a:	6938      	ldr	r0, [r7, #16]
 8005d2c:	f7ff fa7e 	bl	800522c <_SendPacket>
  RECORD_END();
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	f383 8811 	msr	BASEPRI, r3
}
 8005d36:	bf00      	nop
 8005d38:	3718      	adds	r7, #24
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}
 8005d3e:	bf00      	nop
 8005d40:	20014410 	.word	0x20014410

08005d44 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8005d44:	b590      	push	{r4, r7, lr}
 8005d46:	b083      	sub	sp, #12
 8005d48:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8005d4a:	4b15      	ldr	r3, [pc, #84]	@ (8005da0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005d4c:	6a1b      	ldr	r3, [r3, #32]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d01a      	beq.n	8005d88 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8005d52:	4b13      	ldr	r3, [pc, #76]	@ (8005da0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005d54:	6a1b      	ldr	r3, [r3, #32]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d015      	beq.n	8005d88 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8005d5c:	4b10      	ldr	r3, [pc, #64]	@ (8005da0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005d5e:	6a1b      	ldr	r3, [r3, #32]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4798      	blx	r3
 8005d64:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005d68:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8005d6a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d6e:	f04f 0200 	mov.w	r2, #0
 8005d72:	f04f 0300 	mov.w	r3, #0
 8005d76:	000a      	movs	r2, r1
 8005d78:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005d7a:	4613      	mov	r3, r2
 8005d7c:	461a      	mov	r2, r3
 8005d7e:	4621      	mov	r1, r4
 8005d80:	200d      	movs	r0, #13
 8005d82:	f7ff fbe7 	bl	8005554 <SEGGER_SYSVIEW_RecordU32x2>
 8005d86:	e006      	b.n	8005d96 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8005d88:	4b06      	ldr	r3, [pc, #24]	@ (8005da4 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4619      	mov	r1, r3
 8005d8e:	200c      	movs	r0, #12
 8005d90:	f7ff fba4 	bl	80054dc <SEGGER_SYSVIEW_RecordU32>
  }
}
 8005d94:	bf00      	nop
 8005d96:	bf00      	nop
 8005d98:	370c      	adds	r7, #12
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd90      	pop	{r4, r7, pc}
 8005d9e:	bf00      	nop
 8005da0:	200143e0 	.word	0x200143e0
 8005da4:	e0001004 	.word	0xe0001004

08005da8 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b086      	sub	sp, #24
 8005dac:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005dae:	f3ef 8311 	mrs	r3, BASEPRI
 8005db2:	f04f 0120 	mov.w	r1, #32
 8005db6:	f381 8811 	msr	BASEPRI, r1
 8005dba:	60fb      	str	r3, [r7, #12]
 8005dbc:	4819      	ldr	r0, [pc, #100]	@ (8005e24 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8005dbe:	f7ff f946 	bl	800504e <_PreparePacket>
 8005dc2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8005dc8:	4b17      	ldr	r3, [pc, #92]	@ (8005e28 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dd0:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	617b      	str	r3, [r7, #20]
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	613b      	str	r3, [r7, #16]
 8005dda:	e00b      	b.n	8005df4 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	b2da      	uxtb	r2, r3
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	1c59      	adds	r1, r3, #1
 8005de4:	6179      	str	r1, [r7, #20]
 8005de6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005dea:	b2d2      	uxtb	r2, r2
 8005dec:	701a      	strb	r2, [r3, #0]
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	09db      	lsrs	r3, r3, #7
 8005df2:	613b      	str	r3, [r7, #16]
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	2b7f      	cmp	r3, #127	@ 0x7f
 8005df8:	d8f0      	bhi.n	8005ddc <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	1c5a      	adds	r2, r3, #1
 8005dfe:	617a      	str	r2, [r7, #20]
 8005e00:	693a      	ldr	r2, [r7, #16]
 8005e02:	b2d2      	uxtb	r2, r2
 8005e04:	701a      	strb	r2, [r3, #0]
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8005e0a:	2202      	movs	r2, #2
 8005e0c:	6879      	ldr	r1, [r7, #4]
 8005e0e:	68b8      	ldr	r0, [r7, #8]
 8005e10:	f7ff fa0c 	bl	800522c <_SendPacket>
  RECORD_END();
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f383 8811 	msr	BASEPRI, r3
}
 8005e1a:	bf00      	nop
 8005e1c:	3718      	adds	r7, #24
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}
 8005e22:	bf00      	nop
 8005e24:	20014410 	.word	0x20014410
 8005e28:	e000ed04 	.word	0xe000ed04

08005e2c <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b082      	sub	sp, #8
 8005e30:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005e32:	f3ef 8311 	mrs	r3, BASEPRI
 8005e36:	f04f 0120 	mov.w	r1, #32
 8005e3a:	f381 8811 	msr	BASEPRI, r1
 8005e3e:	607b      	str	r3, [r7, #4]
 8005e40:	4807      	ldr	r0, [pc, #28]	@ (8005e60 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8005e42:	f7ff f904 	bl	800504e <_PreparePacket>
 8005e46:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8005e48:	2203      	movs	r2, #3
 8005e4a:	6839      	ldr	r1, [r7, #0]
 8005e4c:	6838      	ldr	r0, [r7, #0]
 8005e4e:	f7ff f9ed 	bl	800522c <_SendPacket>
  RECORD_END();
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f383 8811 	msr	BASEPRI, r3
}
 8005e58:	bf00      	nop
 8005e5a:	3708      	adds	r7, #8
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}
 8005e60:	20014410 	.word	0x20014410

08005e64 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b082      	sub	sp, #8
 8005e68:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005e6a:	f3ef 8311 	mrs	r3, BASEPRI
 8005e6e:	f04f 0120 	mov.w	r1, #32
 8005e72:	f381 8811 	msr	BASEPRI, r1
 8005e76:	607b      	str	r3, [r7, #4]
 8005e78:	4807      	ldr	r0, [pc, #28]	@ (8005e98 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8005e7a:	f7ff f8e8 	bl	800504e <_PreparePacket>
 8005e7e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8005e80:	2212      	movs	r2, #18
 8005e82:	6839      	ldr	r1, [r7, #0]
 8005e84:	6838      	ldr	r0, [r7, #0]
 8005e86:	f7ff f9d1 	bl	800522c <_SendPacket>
  RECORD_END();
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f383 8811 	msr	BASEPRI, r3
}
 8005e90:	bf00      	nop
 8005e92:	3708      	adds	r7, #8
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}
 8005e98:	20014410 	.word	0x20014410

08005e9c <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b082      	sub	sp, #8
 8005ea0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005ea2:	f3ef 8311 	mrs	r3, BASEPRI
 8005ea6:	f04f 0120 	mov.w	r1, #32
 8005eaa:	f381 8811 	msr	BASEPRI, r1
 8005eae:	607b      	str	r3, [r7, #4]
 8005eb0:	4807      	ldr	r0, [pc, #28]	@ (8005ed0 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8005eb2:	f7ff f8cc 	bl	800504e <_PreparePacket>
 8005eb6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8005eb8:	2211      	movs	r2, #17
 8005eba:	6839      	ldr	r1, [r7, #0]
 8005ebc:	6838      	ldr	r0, [r7, #0]
 8005ebe:	f7ff f9b5 	bl	800522c <_SendPacket>
  RECORD_END();
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	f383 8811 	msr	BASEPRI, r3
}
 8005ec8:	bf00      	nop
 8005eca:	3708      	adds	r7, #8
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bd80      	pop	{r7, pc}
 8005ed0:	20014410 	.word	0x20014410

08005ed4 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b088      	sub	sp, #32
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005edc:	f3ef 8311 	mrs	r3, BASEPRI
 8005ee0:	f04f 0120 	mov.w	r1, #32
 8005ee4:	f381 8811 	msr	BASEPRI, r1
 8005ee8:	617b      	str	r3, [r7, #20]
 8005eea:	4819      	ldr	r0, [pc, #100]	@ (8005f50 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8005eec:	f7ff f8af 	bl	800504e <_PreparePacket>
 8005ef0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005ef6:	4b17      	ldr	r3, [pc, #92]	@ (8005f54 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8005ef8:	691b      	ldr	r3, [r3, #16]
 8005efa:	687a      	ldr	r2, [r7, #4]
 8005efc:	1ad3      	subs	r3, r2, r3
 8005efe:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	61fb      	str	r3, [r7, #28]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	61bb      	str	r3, [r7, #24]
 8005f08:	e00b      	b.n	8005f22 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8005f0a:	69bb      	ldr	r3, [r7, #24]
 8005f0c:	b2da      	uxtb	r2, r3
 8005f0e:	69fb      	ldr	r3, [r7, #28]
 8005f10:	1c59      	adds	r1, r3, #1
 8005f12:	61f9      	str	r1, [r7, #28]
 8005f14:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005f18:	b2d2      	uxtb	r2, r2
 8005f1a:	701a      	strb	r2, [r3, #0]
 8005f1c:	69bb      	ldr	r3, [r7, #24]
 8005f1e:	09db      	lsrs	r3, r3, #7
 8005f20:	61bb      	str	r3, [r7, #24]
 8005f22:	69bb      	ldr	r3, [r7, #24]
 8005f24:	2b7f      	cmp	r3, #127	@ 0x7f
 8005f26:	d8f0      	bhi.n	8005f0a <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8005f28:	69fb      	ldr	r3, [r7, #28]
 8005f2a:	1c5a      	adds	r2, r3, #1
 8005f2c:	61fa      	str	r2, [r7, #28]
 8005f2e:	69ba      	ldr	r2, [r7, #24]
 8005f30:	b2d2      	uxtb	r2, r2
 8005f32:	701a      	strb	r2, [r3, #0]
 8005f34:	69fb      	ldr	r3, [r7, #28]
 8005f36:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8005f38:	2208      	movs	r2, #8
 8005f3a:	68f9      	ldr	r1, [r7, #12]
 8005f3c:	6938      	ldr	r0, [r7, #16]
 8005f3e:	f7ff f975 	bl	800522c <_SendPacket>
  RECORD_END();
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	f383 8811 	msr	BASEPRI, r3
}
 8005f48:	bf00      	nop
 8005f4a:	3720      	adds	r7, #32
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}
 8005f50:	20014410 	.word	0x20014410
 8005f54:	200143e0 	.word	0x200143e0

08005f58 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b088      	sub	sp, #32
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005f60:	f3ef 8311 	mrs	r3, BASEPRI
 8005f64:	f04f 0120 	mov.w	r1, #32
 8005f68:	f381 8811 	msr	BASEPRI, r1
 8005f6c:	617b      	str	r3, [r7, #20]
 8005f6e:	4819      	ldr	r0, [pc, #100]	@ (8005fd4 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8005f70:	f7ff f86d 	bl	800504e <_PreparePacket>
 8005f74:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005f7a:	4b17      	ldr	r3, [pc, #92]	@ (8005fd8 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8005f7c:	691b      	ldr	r3, [r3, #16]
 8005f7e:	687a      	ldr	r2, [r7, #4]
 8005f80:	1ad3      	subs	r3, r2, r3
 8005f82:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	61fb      	str	r3, [r7, #28]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	61bb      	str	r3, [r7, #24]
 8005f8c:	e00b      	b.n	8005fa6 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8005f8e:	69bb      	ldr	r3, [r7, #24]
 8005f90:	b2da      	uxtb	r2, r3
 8005f92:	69fb      	ldr	r3, [r7, #28]
 8005f94:	1c59      	adds	r1, r3, #1
 8005f96:	61f9      	str	r1, [r7, #28]
 8005f98:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005f9c:	b2d2      	uxtb	r2, r2
 8005f9e:	701a      	strb	r2, [r3, #0]
 8005fa0:	69bb      	ldr	r3, [r7, #24]
 8005fa2:	09db      	lsrs	r3, r3, #7
 8005fa4:	61bb      	str	r3, [r7, #24]
 8005fa6:	69bb      	ldr	r3, [r7, #24]
 8005fa8:	2b7f      	cmp	r3, #127	@ 0x7f
 8005faa:	d8f0      	bhi.n	8005f8e <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8005fac:	69fb      	ldr	r3, [r7, #28]
 8005fae:	1c5a      	adds	r2, r3, #1
 8005fb0:	61fa      	str	r2, [r7, #28]
 8005fb2:	69ba      	ldr	r2, [r7, #24]
 8005fb4:	b2d2      	uxtb	r2, r2
 8005fb6:	701a      	strb	r2, [r3, #0]
 8005fb8:	69fb      	ldr	r3, [r7, #28]
 8005fba:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8005fbc:	2204      	movs	r2, #4
 8005fbe:	68f9      	ldr	r1, [r7, #12]
 8005fc0:	6938      	ldr	r0, [r7, #16]
 8005fc2:	f7ff f933 	bl	800522c <_SendPacket>
  RECORD_END();
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	f383 8811 	msr	BASEPRI, r3
}
 8005fcc:	bf00      	nop
 8005fce:	3720      	adds	r7, #32
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}
 8005fd4:	20014410 	.word	0x20014410
 8005fd8:	200143e0 	.word	0x200143e0

08005fdc <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b088      	sub	sp, #32
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005fe4:	f3ef 8311 	mrs	r3, BASEPRI
 8005fe8:	f04f 0120 	mov.w	r1, #32
 8005fec:	f381 8811 	msr	BASEPRI, r1
 8005ff0:	617b      	str	r3, [r7, #20]
 8005ff2:	4819      	ldr	r0, [pc, #100]	@ (8006058 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8005ff4:	f7ff f82b 	bl	800504e <_PreparePacket>
 8005ff8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005ffe:	4b17      	ldr	r3, [pc, #92]	@ (800605c <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006000:	691b      	ldr	r3, [r3, #16]
 8006002:	687a      	ldr	r2, [r7, #4]
 8006004:	1ad3      	subs	r3, r2, r3
 8006006:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	61fb      	str	r3, [r7, #28]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	61bb      	str	r3, [r7, #24]
 8006010:	e00b      	b.n	800602a <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8006012:	69bb      	ldr	r3, [r7, #24]
 8006014:	b2da      	uxtb	r2, r3
 8006016:	69fb      	ldr	r3, [r7, #28]
 8006018:	1c59      	adds	r1, r3, #1
 800601a:	61f9      	str	r1, [r7, #28]
 800601c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006020:	b2d2      	uxtb	r2, r2
 8006022:	701a      	strb	r2, [r3, #0]
 8006024:	69bb      	ldr	r3, [r7, #24]
 8006026:	09db      	lsrs	r3, r3, #7
 8006028:	61bb      	str	r3, [r7, #24]
 800602a:	69bb      	ldr	r3, [r7, #24]
 800602c:	2b7f      	cmp	r3, #127	@ 0x7f
 800602e:	d8f0      	bhi.n	8006012 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006030:	69fb      	ldr	r3, [r7, #28]
 8006032:	1c5a      	adds	r2, r3, #1
 8006034:	61fa      	str	r2, [r7, #28]
 8006036:	69ba      	ldr	r2, [r7, #24]
 8006038:	b2d2      	uxtb	r2, r2
 800603a:	701a      	strb	r2, [r3, #0]
 800603c:	69fb      	ldr	r3, [r7, #28]
 800603e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006040:	2206      	movs	r2, #6
 8006042:	68f9      	ldr	r1, [r7, #12]
 8006044:	6938      	ldr	r0, [r7, #16]
 8006046:	f7ff f8f1 	bl	800522c <_SendPacket>
  RECORD_END();
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	f383 8811 	msr	BASEPRI, r3
}
 8006050:	bf00      	nop
 8006052:	3720      	adds	r7, #32
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}
 8006058:	20014410 	.word	0x20014410
 800605c:	200143e0 	.word	0x200143e0

08006060 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006060:	b480      	push	{r7}
 8006062:	b083      	sub	sp, #12
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006068:	4b04      	ldr	r3, [pc, #16]	@ (800607c <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800606a:	691b      	ldr	r3, [r3, #16]
 800606c:	687a      	ldr	r2, [r7, #4]
 800606e:	1ad3      	subs	r3, r2, r3
}
 8006070:	4618      	mov	r0, r3
 8006072:	370c      	adds	r7, #12
 8006074:	46bd      	mov	sp, r7
 8006076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607a:	4770      	bx	lr
 800607c:	200143e0 	.word	0x200143e0

08006080 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006080:	b580      	push	{r7, lr}
 8006082:	b08c      	sub	sp, #48	@ 0x30
 8006084:	af00      	add	r7, sp, #0
 8006086:	4603      	mov	r3, r0
 8006088:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800608a:	4b3b      	ldr	r3, [pc, #236]	@ (8006178 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d06d      	beq.n	800616e <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8006092:	4b39      	ldr	r3, [pc, #228]	@ (8006178 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006098:	2300      	movs	r3, #0
 800609a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800609c:	e008      	b.n	80060b0 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800609e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060a0:	691b      	ldr	r3, [r3, #16]
 80060a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 80060a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d007      	beq.n	80060ba <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80060aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060ac:	3301      	adds	r3, #1
 80060ae:	62bb      	str	r3, [r7, #40]	@ 0x28
 80060b0:	79fb      	ldrb	r3, [r7, #7]
 80060b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80060b4:	429a      	cmp	r2, r3
 80060b6:	d3f2      	bcc.n	800609e <SEGGER_SYSVIEW_SendModule+0x1e>
 80060b8:	e000      	b.n	80060bc <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80060ba:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80060bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d055      	beq.n	800616e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80060c2:	f3ef 8311 	mrs	r3, BASEPRI
 80060c6:	f04f 0120 	mov.w	r1, #32
 80060ca:	f381 8811 	msr	BASEPRI, r1
 80060ce:	617b      	str	r3, [r7, #20]
 80060d0:	482a      	ldr	r0, [pc, #168]	@ (800617c <SEGGER_SYSVIEW_SendModule+0xfc>)
 80060d2:	f7fe ffbc 	bl	800504e <_PreparePacket>
 80060d6:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	627b      	str	r3, [r7, #36]	@ 0x24
 80060e0:	79fb      	ldrb	r3, [r7, #7]
 80060e2:	623b      	str	r3, [r7, #32]
 80060e4:	e00b      	b.n	80060fe <SEGGER_SYSVIEW_SendModule+0x7e>
 80060e6:	6a3b      	ldr	r3, [r7, #32]
 80060e8:	b2da      	uxtb	r2, r3
 80060ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060ec:	1c59      	adds	r1, r3, #1
 80060ee:	6279      	str	r1, [r7, #36]	@ 0x24
 80060f0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80060f4:	b2d2      	uxtb	r2, r2
 80060f6:	701a      	strb	r2, [r3, #0]
 80060f8:	6a3b      	ldr	r3, [r7, #32]
 80060fa:	09db      	lsrs	r3, r3, #7
 80060fc:	623b      	str	r3, [r7, #32]
 80060fe:	6a3b      	ldr	r3, [r7, #32]
 8006100:	2b7f      	cmp	r3, #127	@ 0x7f
 8006102:	d8f0      	bhi.n	80060e6 <SEGGER_SYSVIEW_SendModule+0x66>
 8006104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006106:	1c5a      	adds	r2, r3, #1
 8006108:	627a      	str	r2, [r7, #36]	@ 0x24
 800610a:	6a3a      	ldr	r2, [r7, #32]
 800610c:	b2d2      	uxtb	r2, r2
 800610e:	701a      	strb	r2, [r3, #0]
 8006110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006112:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	61fb      	str	r3, [r7, #28]
 8006118:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800611a:	689b      	ldr	r3, [r3, #8]
 800611c:	61bb      	str	r3, [r7, #24]
 800611e:	e00b      	b.n	8006138 <SEGGER_SYSVIEW_SendModule+0xb8>
 8006120:	69bb      	ldr	r3, [r7, #24]
 8006122:	b2da      	uxtb	r2, r3
 8006124:	69fb      	ldr	r3, [r7, #28]
 8006126:	1c59      	adds	r1, r3, #1
 8006128:	61f9      	str	r1, [r7, #28]
 800612a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800612e:	b2d2      	uxtb	r2, r2
 8006130:	701a      	strb	r2, [r3, #0]
 8006132:	69bb      	ldr	r3, [r7, #24]
 8006134:	09db      	lsrs	r3, r3, #7
 8006136:	61bb      	str	r3, [r7, #24]
 8006138:	69bb      	ldr	r3, [r7, #24]
 800613a:	2b7f      	cmp	r3, #127	@ 0x7f
 800613c:	d8f0      	bhi.n	8006120 <SEGGER_SYSVIEW_SendModule+0xa0>
 800613e:	69fb      	ldr	r3, [r7, #28]
 8006140:	1c5a      	adds	r2, r3, #1
 8006142:	61fa      	str	r2, [r7, #28]
 8006144:	69ba      	ldr	r2, [r7, #24]
 8006146:	b2d2      	uxtb	r2, r2
 8006148:	701a      	strb	r2, [r3, #0]
 800614a:	69fb      	ldr	r3, [r7, #28]
 800614c:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800614e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	2280      	movs	r2, #128	@ 0x80
 8006154:	4619      	mov	r1, r3
 8006156:	68f8      	ldr	r0, [r7, #12]
 8006158:	f7fe ff2c 	bl	8004fb4 <_EncodeStr>
 800615c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800615e:	2216      	movs	r2, #22
 8006160:	68f9      	ldr	r1, [r7, #12]
 8006162:	6938      	ldr	r0, [r7, #16]
 8006164:	f7ff f862 	bl	800522c <_SendPacket>
      RECORD_END();
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800616e:	bf00      	nop
 8006170:	3730      	adds	r7, #48	@ 0x30
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}
 8006176:	bf00      	nop
 8006178:	20014408 	.word	0x20014408
 800617c:	20014410 	.word	0x20014410

08006180 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006180:	b580      	push	{r7, lr}
 8006182:	b082      	sub	sp, #8
 8006184:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8006186:	4b0c      	ldr	r3, [pc, #48]	@ (80061b8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d00f      	beq.n	80061ae <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800618e:	4b0a      	ldr	r3, [pc, #40]	@ (80061b8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	68db      	ldr	r3, [r3, #12]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d002      	beq.n	80061a2 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	68db      	ldr	r3, [r3, #12]
 80061a0:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	691b      	ldr	r3, [r3, #16]
 80061a6:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d1f2      	bne.n	8006194 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80061ae:	bf00      	nop
 80061b0:	3708      	adds	r7, #8
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}
 80061b6:	bf00      	nop
 80061b8:	20014408 	.word	0x20014408

080061bc <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80061bc:	b580      	push	{r7, lr}
 80061be:	b086      	sub	sp, #24
 80061c0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80061c2:	f3ef 8311 	mrs	r3, BASEPRI
 80061c6:	f04f 0120 	mov.w	r1, #32
 80061ca:	f381 8811 	msr	BASEPRI, r1
 80061ce:	60fb      	str	r3, [r7, #12]
 80061d0:	4817      	ldr	r0, [pc, #92]	@ (8006230 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80061d2:	f7fe ff3c 	bl	800504e <_PreparePacket>
 80061d6:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	617b      	str	r3, [r7, #20]
 80061e0:	4b14      	ldr	r3, [pc, #80]	@ (8006234 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80061e2:	781b      	ldrb	r3, [r3, #0]
 80061e4:	613b      	str	r3, [r7, #16]
 80061e6:	e00b      	b.n	8006200 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	b2da      	uxtb	r2, r3
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	1c59      	adds	r1, r3, #1
 80061f0:	6179      	str	r1, [r7, #20]
 80061f2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80061f6:	b2d2      	uxtb	r2, r2
 80061f8:	701a      	strb	r2, [r3, #0]
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	09db      	lsrs	r3, r3, #7
 80061fe:	613b      	str	r3, [r7, #16]
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	2b7f      	cmp	r3, #127	@ 0x7f
 8006204:	d8f0      	bhi.n	80061e8 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	1c5a      	adds	r2, r3, #1
 800620a:	617a      	str	r2, [r7, #20]
 800620c:	693a      	ldr	r2, [r7, #16]
 800620e:	b2d2      	uxtb	r2, r2
 8006210:	701a      	strb	r2, [r3, #0]
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8006216:	221b      	movs	r2, #27
 8006218:	6879      	ldr	r1, [r7, #4]
 800621a:	68b8      	ldr	r0, [r7, #8]
 800621c:	f7ff f806 	bl	800522c <_SendPacket>
  RECORD_END();
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	f383 8811 	msr	BASEPRI, r3
}
 8006226:	bf00      	nop
 8006228:	3718      	adds	r7, #24
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}
 800622e:	bf00      	nop
 8006230:	20014410 	.word	0x20014410
 8006234:	2001440c 	.word	0x2001440c

08006238 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006238:	b580      	push	{r7, lr}
 800623a:	b08a      	sub	sp, #40	@ 0x28
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006240:	f3ef 8311 	mrs	r3, BASEPRI
 8006244:	f04f 0120 	mov.w	r1, #32
 8006248:	f381 8811 	msr	BASEPRI, r1
 800624c:	617b      	str	r3, [r7, #20]
 800624e:	4827      	ldr	r0, [pc, #156]	@ (80062ec <SEGGER_SYSVIEW_Warn+0xb4>)
 8006250:	f7fe fefd 	bl	800504e <_PreparePacket>
 8006254:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006256:	2280      	movs	r2, #128	@ 0x80
 8006258:	6879      	ldr	r1, [r7, #4]
 800625a:	6938      	ldr	r0, [r7, #16]
 800625c:	f7fe feaa 	bl	8004fb4 <_EncodeStr>
 8006260:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	627b      	str	r3, [r7, #36]	@ 0x24
 8006266:	2301      	movs	r3, #1
 8006268:	623b      	str	r3, [r7, #32]
 800626a:	e00b      	b.n	8006284 <SEGGER_SYSVIEW_Warn+0x4c>
 800626c:	6a3b      	ldr	r3, [r7, #32]
 800626e:	b2da      	uxtb	r2, r3
 8006270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006272:	1c59      	adds	r1, r3, #1
 8006274:	6279      	str	r1, [r7, #36]	@ 0x24
 8006276:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800627a:	b2d2      	uxtb	r2, r2
 800627c:	701a      	strb	r2, [r3, #0]
 800627e:	6a3b      	ldr	r3, [r7, #32]
 8006280:	09db      	lsrs	r3, r3, #7
 8006282:	623b      	str	r3, [r7, #32]
 8006284:	6a3b      	ldr	r3, [r7, #32]
 8006286:	2b7f      	cmp	r3, #127	@ 0x7f
 8006288:	d8f0      	bhi.n	800626c <SEGGER_SYSVIEW_Warn+0x34>
 800628a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800628c:	1c5a      	adds	r2, r3, #1
 800628e:	627a      	str	r2, [r7, #36]	@ 0x24
 8006290:	6a3a      	ldr	r2, [r7, #32]
 8006292:	b2d2      	uxtb	r2, r2
 8006294:	701a      	strb	r2, [r3, #0]
 8006296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006298:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	61fb      	str	r3, [r7, #28]
 800629e:	2300      	movs	r3, #0
 80062a0:	61bb      	str	r3, [r7, #24]
 80062a2:	e00b      	b.n	80062bc <SEGGER_SYSVIEW_Warn+0x84>
 80062a4:	69bb      	ldr	r3, [r7, #24]
 80062a6:	b2da      	uxtb	r2, r3
 80062a8:	69fb      	ldr	r3, [r7, #28]
 80062aa:	1c59      	adds	r1, r3, #1
 80062ac:	61f9      	str	r1, [r7, #28]
 80062ae:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80062b2:	b2d2      	uxtb	r2, r2
 80062b4:	701a      	strb	r2, [r3, #0]
 80062b6:	69bb      	ldr	r3, [r7, #24]
 80062b8:	09db      	lsrs	r3, r3, #7
 80062ba:	61bb      	str	r3, [r7, #24]
 80062bc:	69bb      	ldr	r3, [r7, #24]
 80062be:	2b7f      	cmp	r3, #127	@ 0x7f
 80062c0:	d8f0      	bhi.n	80062a4 <SEGGER_SYSVIEW_Warn+0x6c>
 80062c2:	69fb      	ldr	r3, [r7, #28]
 80062c4:	1c5a      	adds	r2, r3, #1
 80062c6:	61fa      	str	r2, [r7, #28]
 80062c8:	69ba      	ldr	r2, [r7, #24]
 80062ca:	b2d2      	uxtb	r2, r2
 80062cc:	701a      	strb	r2, [r3, #0]
 80062ce:	69fb      	ldr	r3, [r7, #28]
 80062d0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80062d2:	221a      	movs	r2, #26
 80062d4:	68f9      	ldr	r1, [r7, #12]
 80062d6:	6938      	ldr	r0, [r7, #16]
 80062d8:	f7fe ffa8 	bl	800522c <_SendPacket>
  RECORD_END();
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	f383 8811 	msr	BASEPRI, r3
}
 80062e2:	bf00      	nop
 80062e4:	3728      	adds	r7, #40	@ 0x28
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}
 80062ea:	bf00      	nop
 80062ec:	20014410 	.word	0x20014410

080062f0 <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b084      	sub	sp, #16
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	60f8      	str	r0, [r7, #12]
 80062f8:	60b9      	str	r1, [r7, #8]
 80062fa:	607a      	str	r2, [r7, #4]
 80062fc:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 80062fe:	683a      	ldr	r2, [r7, #0]
 8006300:	6879      	ldr	r1, [r7, #4]
 8006302:	2000      	movs	r0, #0
 8006304:	f7fe fd3c 	bl	8004d80 <SEGGER_RTT_Write>
  return len;
 8006308:	683b      	ldr	r3, [r7, #0]
}
 800630a:	4618      	mov	r0, r3
 800630c:	3710      	adds	r7, #16
 800630e:	46bd      	mov	sp, r7
 8006310:	bd80      	pop	{r7, pc}
	...

08006314 <std>:
 8006314:	2300      	movs	r3, #0
 8006316:	b510      	push	{r4, lr}
 8006318:	4604      	mov	r4, r0
 800631a:	e9c0 3300 	strd	r3, r3, [r0]
 800631e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006322:	6083      	str	r3, [r0, #8]
 8006324:	8181      	strh	r1, [r0, #12]
 8006326:	6643      	str	r3, [r0, #100]	@ 0x64
 8006328:	81c2      	strh	r2, [r0, #14]
 800632a:	6183      	str	r3, [r0, #24]
 800632c:	4619      	mov	r1, r3
 800632e:	2208      	movs	r2, #8
 8006330:	305c      	adds	r0, #92	@ 0x5c
 8006332:	f000 f9f7 	bl	8006724 <memset>
 8006336:	4b0d      	ldr	r3, [pc, #52]	@ (800636c <std+0x58>)
 8006338:	6263      	str	r3, [r4, #36]	@ 0x24
 800633a:	4b0d      	ldr	r3, [pc, #52]	@ (8006370 <std+0x5c>)
 800633c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800633e:	4b0d      	ldr	r3, [pc, #52]	@ (8006374 <std+0x60>)
 8006340:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006342:	4b0d      	ldr	r3, [pc, #52]	@ (8006378 <std+0x64>)
 8006344:	6323      	str	r3, [r4, #48]	@ 0x30
 8006346:	4b0d      	ldr	r3, [pc, #52]	@ (800637c <std+0x68>)
 8006348:	6224      	str	r4, [r4, #32]
 800634a:	429c      	cmp	r4, r3
 800634c:	d006      	beq.n	800635c <std+0x48>
 800634e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006352:	4294      	cmp	r4, r2
 8006354:	d002      	beq.n	800635c <std+0x48>
 8006356:	33d0      	adds	r3, #208	@ 0xd0
 8006358:	429c      	cmp	r4, r3
 800635a:	d105      	bne.n	8006368 <std+0x54>
 800635c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006360:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006364:	f000 ba3e 	b.w	80067e4 <__retarget_lock_init_recursive>
 8006368:	bd10      	pop	{r4, pc}
 800636a:	bf00      	nop
 800636c:	08006555 	.word	0x08006555
 8006370:	08006577 	.word	0x08006577
 8006374:	080065af 	.word	0x080065af
 8006378:	080065d3 	.word	0x080065d3
 800637c:	200144f4 	.word	0x200144f4

08006380 <stdio_exit_handler>:
 8006380:	4a02      	ldr	r2, [pc, #8]	@ (800638c <stdio_exit_handler+0xc>)
 8006382:	4903      	ldr	r1, [pc, #12]	@ (8006390 <stdio_exit_handler+0x10>)
 8006384:	4803      	ldr	r0, [pc, #12]	@ (8006394 <stdio_exit_handler+0x14>)
 8006386:	f000 b869 	b.w	800645c <_fwalk_sglue>
 800638a:	bf00      	nop
 800638c:	20000014 	.word	0x20000014
 8006390:	08006b01 	.word	0x08006b01
 8006394:	20000024 	.word	0x20000024

08006398 <cleanup_stdio>:
 8006398:	6841      	ldr	r1, [r0, #4]
 800639a:	4b0c      	ldr	r3, [pc, #48]	@ (80063cc <cleanup_stdio+0x34>)
 800639c:	4299      	cmp	r1, r3
 800639e:	b510      	push	{r4, lr}
 80063a0:	4604      	mov	r4, r0
 80063a2:	d001      	beq.n	80063a8 <cleanup_stdio+0x10>
 80063a4:	f000 fbac 	bl	8006b00 <_fflush_r>
 80063a8:	68a1      	ldr	r1, [r4, #8]
 80063aa:	4b09      	ldr	r3, [pc, #36]	@ (80063d0 <cleanup_stdio+0x38>)
 80063ac:	4299      	cmp	r1, r3
 80063ae:	d002      	beq.n	80063b6 <cleanup_stdio+0x1e>
 80063b0:	4620      	mov	r0, r4
 80063b2:	f000 fba5 	bl	8006b00 <_fflush_r>
 80063b6:	68e1      	ldr	r1, [r4, #12]
 80063b8:	4b06      	ldr	r3, [pc, #24]	@ (80063d4 <cleanup_stdio+0x3c>)
 80063ba:	4299      	cmp	r1, r3
 80063bc:	d004      	beq.n	80063c8 <cleanup_stdio+0x30>
 80063be:	4620      	mov	r0, r4
 80063c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063c4:	f000 bb9c 	b.w	8006b00 <_fflush_r>
 80063c8:	bd10      	pop	{r4, pc}
 80063ca:	bf00      	nop
 80063cc:	200144f4 	.word	0x200144f4
 80063d0:	2001455c 	.word	0x2001455c
 80063d4:	200145c4 	.word	0x200145c4

080063d8 <global_stdio_init.part.0>:
 80063d8:	b510      	push	{r4, lr}
 80063da:	4b0b      	ldr	r3, [pc, #44]	@ (8006408 <global_stdio_init.part.0+0x30>)
 80063dc:	4c0b      	ldr	r4, [pc, #44]	@ (800640c <global_stdio_init.part.0+0x34>)
 80063de:	4a0c      	ldr	r2, [pc, #48]	@ (8006410 <global_stdio_init.part.0+0x38>)
 80063e0:	601a      	str	r2, [r3, #0]
 80063e2:	4620      	mov	r0, r4
 80063e4:	2200      	movs	r2, #0
 80063e6:	2104      	movs	r1, #4
 80063e8:	f7ff ff94 	bl	8006314 <std>
 80063ec:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80063f0:	2201      	movs	r2, #1
 80063f2:	2109      	movs	r1, #9
 80063f4:	f7ff ff8e 	bl	8006314 <std>
 80063f8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80063fc:	2202      	movs	r2, #2
 80063fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006402:	2112      	movs	r1, #18
 8006404:	f7ff bf86 	b.w	8006314 <std>
 8006408:	2001462c 	.word	0x2001462c
 800640c:	200144f4 	.word	0x200144f4
 8006410:	08006381 	.word	0x08006381

08006414 <__sfp_lock_acquire>:
 8006414:	4801      	ldr	r0, [pc, #4]	@ (800641c <__sfp_lock_acquire+0x8>)
 8006416:	f000 b9e6 	b.w	80067e6 <__retarget_lock_acquire_recursive>
 800641a:	bf00      	nop
 800641c:	20014635 	.word	0x20014635

08006420 <__sfp_lock_release>:
 8006420:	4801      	ldr	r0, [pc, #4]	@ (8006428 <__sfp_lock_release+0x8>)
 8006422:	f000 b9e1 	b.w	80067e8 <__retarget_lock_release_recursive>
 8006426:	bf00      	nop
 8006428:	20014635 	.word	0x20014635

0800642c <__sinit>:
 800642c:	b510      	push	{r4, lr}
 800642e:	4604      	mov	r4, r0
 8006430:	f7ff fff0 	bl	8006414 <__sfp_lock_acquire>
 8006434:	6a23      	ldr	r3, [r4, #32]
 8006436:	b11b      	cbz	r3, 8006440 <__sinit+0x14>
 8006438:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800643c:	f7ff bff0 	b.w	8006420 <__sfp_lock_release>
 8006440:	4b04      	ldr	r3, [pc, #16]	@ (8006454 <__sinit+0x28>)
 8006442:	6223      	str	r3, [r4, #32]
 8006444:	4b04      	ldr	r3, [pc, #16]	@ (8006458 <__sinit+0x2c>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d1f5      	bne.n	8006438 <__sinit+0xc>
 800644c:	f7ff ffc4 	bl	80063d8 <global_stdio_init.part.0>
 8006450:	e7f2      	b.n	8006438 <__sinit+0xc>
 8006452:	bf00      	nop
 8006454:	08006399 	.word	0x08006399
 8006458:	2001462c 	.word	0x2001462c

0800645c <_fwalk_sglue>:
 800645c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006460:	4607      	mov	r7, r0
 8006462:	4688      	mov	r8, r1
 8006464:	4614      	mov	r4, r2
 8006466:	2600      	movs	r6, #0
 8006468:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800646c:	f1b9 0901 	subs.w	r9, r9, #1
 8006470:	d505      	bpl.n	800647e <_fwalk_sglue+0x22>
 8006472:	6824      	ldr	r4, [r4, #0]
 8006474:	2c00      	cmp	r4, #0
 8006476:	d1f7      	bne.n	8006468 <_fwalk_sglue+0xc>
 8006478:	4630      	mov	r0, r6
 800647a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800647e:	89ab      	ldrh	r3, [r5, #12]
 8006480:	2b01      	cmp	r3, #1
 8006482:	d907      	bls.n	8006494 <_fwalk_sglue+0x38>
 8006484:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006488:	3301      	adds	r3, #1
 800648a:	d003      	beq.n	8006494 <_fwalk_sglue+0x38>
 800648c:	4629      	mov	r1, r5
 800648e:	4638      	mov	r0, r7
 8006490:	47c0      	blx	r8
 8006492:	4306      	orrs	r6, r0
 8006494:	3568      	adds	r5, #104	@ 0x68
 8006496:	e7e9      	b.n	800646c <_fwalk_sglue+0x10>

08006498 <_puts_r>:
 8006498:	6a03      	ldr	r3, [r0, #32]
 800649a:	b570      	push	{r4, r5, r6, lr}
 800649c:	6884      	ldr	r4, [r0, #8]
 800649e:	4605      	mov	r5, r0
 80064a0:	460e      	mov	r6, r1
 80064a2:	b90b      	cbnz	r3, 80064a8 <_puts_r+0x10>
 80064a4:	f7ff ffc2 	bl	800642c <__sinit>
 80064a8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80064aa:	07db      	lsls	r3, r3, #31
 80064ac:	d405      	bmi.n	80064ba <_puts_r+0x22>
 80064ae:	89a3      	ldrh	r3, [r4, #12]
 80064b0:	0598      	lsls	r0, r3, #22
 80064b2:	d402      	bmi.n	80064ba <_puts_r+0x22>
 80064b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80064b6:	f000 f996 	bl	80067e6 <__retarget_lock_acquire_recursive>
 80064ba:	89a3      	ldrh	r3, [r4, #12]
 80064bc:	0719      	lsls	r1, r3, #28
 80064be:	d502      	bpl.n	80064c6 <_puts_r+0x2e>
 80064c0:	6923      	ldr	r3, [r4, #16]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d135      	bne.n	8006532 <_puts_r+0x9a>
 80064c6:	4621      	mov	r1, r4
 80064c8:	4628      	mov	r0, r5
 80064ca:	f000 f8c5 	bl	8006658 <__swsetup_r>
 80064ce:	b380      	cbz	r0, 8006532 <_puts_r+0x9a>
 80064d0:	f04f 35ff 	mov.w	r5, #4294967295
 80064d4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80064d6:	07da      	lsls	r2, r3, #31
 80064d8:	d405      	bmi.n	80064e6 <_puts_r+0x4e>
 80064da:	89a3      	ldrh	r3, [r4, #12]
 80064dc:	059b      	lsls	r3, r3, #22
 80064de:	d402      	bmi.n	80064e6 <_puts_r+0x4e>
 80064e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80064e2:	f000 f981 	bl	80067e8 <__retarget_lock_release_recursive>
 80064e6:	4628      	mov	r0, r5
 80064e8:	bd70      	pop	{r4, r5, r6, pc}
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	da04      	bge.n	80064f8 <_puts_r+0x60>
 80064ee:	69a2      	ldr	r2, [r4, #24]
 80064f0:	429a      	cmp	r2, r3
 80064f2:	dc17      	bgt.n	8006524 <_puts_r+0x8c>
 80064f4:	290a      	cmp	r1, #10
 80064f6:	d015      	beq.n	8006524 <_puts_r+0x8c>
 80064f8:	6823      	ldr	r3, [r4, #0]
 80064fa:	1c5a      	adds	r2, r3, #1
 80064fc:	6022      	str	r2, [r4, #0]
 80064fe:	7019      	strb	r1, [r3, #0]
 8006500:	68a3      	ldr	r3, [r4, #8]
 8006502:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006506:	3b01      	subs	r3, #1
 8006508:	60a3      	str	r3, [r4, #8]
 800650a:	2900      	cmp	r1, #0
 800650c:	d1ed      	bne.n	80064ea <_puts_r+0x52>
 800650e:	2b00      	cmp	r3, #0
 8006510:	da11      	bge.n	8006536 <_puts_r+0x9e>
 8006512:	4622      	mov	r2, r4
 8006514:	210a      	movs	r1, #10
 8006516:	4628      	mov	r0, r5
 8006518:	f000 f85f 	bl	80065da <__swbuf_r>
 800651c:	3001      	adds	r0, #1
 800651e:	d0d7      	beq.n	80064d0 <_puts_r+0x38>
 8006520:	250a      	movs	r5, #10
 8006522:	e7d7      	b.n	80064d4 <_puts_r+0x3c>
 8006524:	4622      	mov	r2, r4
 8006526:	4628      	mov	r0, r5
 8006528:	f000 f857 	bl	80065da <__swbuf_r>
 800652c:	3001      	adds	r0, #1
 800652e:	d1e7      	bne.n	8006500 <_puts_r+0x68>
 8006530:	e7ce      	b.n	80064d0 <_puts_r+0x38>
 8006532:	3e01      	subs	r6, #1
 8006534:	e7e4      	b.n	8006500 <_puts_r+0x68>
 8006536:	6823      	ldr	r3, [r4, #0]
 8006538:	1c5a      	adds	r2, r3, #1
 800653a:	6022      	str	r2, [r4, #0]
 800653c:	220a      	movs	r2, #10
 800653e:	701a      	strb	r2, [r3, #0]
 8006540:	e7ee      	b.n	8006520 <_puts_r+0x88>
	...

08006544 <puts>:
 8006544:	4b02      	ldr	r3, [pc, #8]	@ (8006550 <puts+0xc>)
 8006546:	4601      	mov	r1, r0
 8006548:	6818      	ldr	r0, [r3, #0]
 800654a:	f7ff bfa5 	b.w	8006498 <_puts_r>
 800654e:	bf00      	nop
 8006550:	20000020 	.word	0x20000020

08006554 <__sread>:
 8006554:	b510      	push	{r4, lr}
 8006556:	460c      	mov	r4, r1
 8006558:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800655c:	f000 f90c 	bl	8006778 <_read_r>
 8006560:	2800      	cmp	r0, #0
 8006562:	bfab      	itete	ge
 8006564:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006566:	89a3      	ldrhlt	r3, [r4, #12]
 8006568:	181b      	addge	r3, r3, r0
 800656a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800656e:	bfac      	ite	ge
 8006570:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006572:	81a3      	strhlt	r3, [r4, #12]
 8006574:	bd10      	pop	{r4, pc}

08006576 <__swrite>:
 8006576:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800657a:	461f      	mov	r7, r3
 800657c:	898b      	ldrh	r3, [r1, #12]
 800657e:	05db      	lsls	r3, r3, #23
 8006580:	4605      	mov	r5, r0
 8006582:	460c      	mov	r4, r1
 8006584:	4616      	mov	r6, r2
 8006586:	d505      	bpl.n	8006594 <__swrite+0x1e>
 8006588:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800658c:	2302      	movs	r3, #2
 800658e:	2200      	movs	r2, #0
 8006590:	f000 f8e0 	bl	8006754 <_lseek_r>
 8006594:	89a3      	ldrh	r3, [r4, #12]
 8006596:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800659a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800659e:	81a3      	strh	r3, [r4, #12]
 80065a0:	4632      	mov	r2, r6
 80065a2:	463b      	mov	r3, r7
 80065a4:	4628      	mov	r0, r5
 80065a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80065aa:	f7ff bea1 	b.w	80062f0 <_write_r>

080065ae <__sseek>:
 80065ae:	b510      	push	{r4, lr}
 80065b0:	460c      	mov	r4, r1
 80065b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065b6:	f000 f8cd 	bl	8006754 <_lseek_r>
 80065ba:	1c43      	adds	r3, r0, #1
 80065bc:	89a3      	ldrh	r3, [r4, #12]
 80065be:	bf15      	itete	ne
 80065c0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80065c2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80065c6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80065ca:	81a3      	strheq	r3, [r4, #12]
 80065cc:	bf18      	it	ne
 80065ce:	81a3      	strhne	r3, [r4, #12]
 80065d0:	bd10      	pop	{r4, pc}

080065d2 <__sclose>:
 80065d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065d6:	f000 b8ad 	b.w	8006734 <_close_r>

080065da <__swbuf_r>:
 80065da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065dc:	460e      	mov	r6, r1
 80065de:	4614      	mov	r4, r2
 80065e0:	4605      	mov	r5, r0
 80065e2:	b118      	cbz	r0, 80065ec <__swbuf_r+0x12>
 80065e4:	6a03      	ldr	r3, [r0, #32]
 80065e6:	b90b      	cbnz	r3, 80065ec <__swbuf_r+0x12>
 80065e8:	f7ff ff20 	bl	800642c <__sinit>
 80065ec:	69a3      	ldr	r3, [r4, #24]
 80065ee:	60a3      	str	r3, [r4, #8]
 80065f0:	89a3      	ldrh	r3, [r4, #12]
 80065f2:	071a      	lsls	r2, r3, #28
 80065f4:	d501      	bpl.n	80065fa <__swbuf_r+0x20>
 80065f6:	6923      	ldr	r3, [r4, #16]
 80065f8:	b943      	cbnz	r3, 800660c <__swbuf_r+0x32>
 80065fa:	4621      	mov	r1, r4
 80065fc:	4628      	mov	r0, r5
 80065fe:	f000 f82b 	bl	8006658 <__swsetup_r>
 8006602:	b118      	cbz	r0, 800660c <__swbuf_r+0x32>
 8006604:	f04f 37ff 	mov.w	r7, #4294967295
 8006608:	4638      	mov	r0, r7
 800660a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800660c:	6823      	ldr	r3, [r4, #0]
 800660e:	6922      	ldr	r2, [r4, #16]
 8006610:	1a98      	subs	r0, r3, r2
 8006612:	6963      	ldr	r3, [r4, #20]
 8006614:	b2f6      	uxtb	r6, r6
 8006616:	4283      	cmp	r3, r0
 8006618:	4637      	mov	r7, r6
 800661a:	dc05      	bgt.n	8006628 <__swbuf_r+0x4e>
 800661c:	4621      	mov	r1, r4
 800661e:	4628      	mov	r0, r5
 8006620:	f000 fa6e 	bl	8006b00 <_fflush_r>
 8006624:	2800      	cmp	r0, #0
 8006626:	d1ed      	bne.n	8006604 <__swbuf_r+0x2a>
 8006628:	68a3      	ldr	r3, [r4, #8]
 800662a:	3b01      	subs	r3, #1
 800662c:	60a3      	str	r3, [r4, #8]
 800662e:	6823      	ldr	r3, [r4, #0]
 8006630:	1c5a      	adds	r2, r3, #1
 8006632:	6022      	str	r2, [r4, #0]
 8006634:	701e      	strb	r6, [r3, #0]
 8006636:	6962      	ldr	r2, [r4, #20]
 8006638:	1c43      	adds	r3, r0, #1
 800663a:	429a      	cmp	r2, r3
 800663c:	d004      	beq.n	8006648 <__swbuf_r+0x6e>
 800663e:	89a3      	ldrh	r3, [r4, #12]
 8006640:	07db      	lsls	r3, r3, #31
 8006642:	d5e1      	bpl.n	8006608 <__swbuf_r+0x2e>
 8006644:	2e0a      	cmp	r6, #10
 8006646:	d1df      	bne.n	8006608 <__swbuf_r+0x2e>
 8006648:	4621      	mov	r1, r4
 800664a:	4628      	mov	r0, r5
 800664c:	f000 fa58 	bl	8006b00 <_fflush_r>
 8006650:	2800      	cmp	r0, #0
 8006652:	d0d9      	beq.n	8006608 <__swbuf_r+0x2e>
 8006654:	e7d6      	b.n	8006604 <__swbuf_r+0x2a>
	...

08006658 <__swsetup_r>:
 8006658:	b538      	push	{r3, r4, r5, lr}
 800665a:	4b29      	ldr	r3, [pc, #164]	@ (8006700 <__swsetup_r+0xa8>)
 800665c:	4605      	mov	r5, r0
 800665e:	6818      	ldr	r0, [r3, #0]
 8006660:	460c      	mov	r4, r1
 8006662:	b118      	cbz	r0, 800666c <__swsetup_r+0x14>
 8006664:	6a03      	ldr	r3, [r0, #32]
 8006666:	b90b      	cbnz	r3, 800666c <__swsetup_r+0x14>
 8006668:	f7ff fee0 	bl	800642c <__sinit>
 800666c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006670:	0719      	lsls	r1, r3, #28
 8006672:	d422      	bmi.n	80066ba <__swsetup_r+0x62>
 8006674:	06da      	lsls	r2, r3, #27
 8006676:	d407      	bmi.n	8006688 <__swsetup_r+0x30>
 8006678:	2209      	movs	r2, #9
 800667a:	602a      	str	r2, [r5, #0]
 800667c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006680:	81a3      	strh	r3, [r4, #12]
 8006682:	f04f 30ff 	mov.w	r0, #4294967295
 8006686:	e033      	b.n	80066f0 <__swsetup_r+0x98>
 8006688:	0758      	lsls	r0, r3, #29
 800668a:	d512      	bpl.n	80066b2 <__swsetup_r+0x5a>
 800668c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800668e:	b141      	cbz	r1, 80066a2 <__swsetup_r+0x4a>
 8006690:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006694:	4299      	cmp	r1, r3
 8006696:	d002      	beq.n	800669e <__swsetup_r+0x46>
 8006698:	4628      	mov	r0, r5
 800669a:	f000 f8b5 	bl	8006808 <_free_r>
 800669e:	2300      	movs	r3, #0
 80066a0:	6363      	str	r3, [r4, #52]	@ 0x34
 80066a2:	89a3      	ldrh	r3, [r4, #12]
 80066a4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80066a8:	81a3      	strh	r3, [r4, #12]
 80066aa:	2300      	movs	r3, #0
 80066ac:	6063      	str	r3, [r4, #4]
 80066ae:	6923      	ldr	r3, [r4, #16]
 80066b0:	6023      	str	r3, [r4, #0]
 80066b2:	89a3      	ldrh	r3, [r4, #12]
 80066b4:	f043 0308 	orr.w	r3, r3, #8
 80066b8:	81a3      	strh	r3, [r4, #12]
 80066ba:	6923      	ldr	r3, [r4, #16]
 80066bc:	b94b      	cbnz	r3, 80066d2 <__swsetup_r+0x7a>
 80066be:	89a3      	ldrh	r3, [r4, #12]
 80066c0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80066c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80066c8:	d003      	beq.n	80066d2 <__swsetup_r+0x7a>
 80066ca:	4621      	mov	r1, r4
 80066cc:	4628      	mov	r0, r5
 80066ce:	f000 fa65 	bl	8006b9c <__smakebuf_r>
 80066d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80066d6:	f013 0201 	ands.w	r2, r3, #1
 80066da:	d00a      	beq.n	80066f2 <__swsetup_r+0x9a>
 80066dc:	2200      	movs	r2, #0
 80066de:	60a2      	str	r2, [r4, #8]
 80066e0:	6962      	ldr	r2, [r4, #20]
 80066e2:	4252      	negs	r2, r2
 80066e4:	61a2      	str	r2, [r4, #24]
 80066e6:	6922      	ldr	r2, [r4, #16]
 80066e8:	b942      	cbnz	r2, 80066fc <__swsetup_r+0xa4>
 80066ea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80066ee:	d1c5      	bne.n	800667c <__swsetup_r+0x24>
 80066f0:	bd38      	pop	{r3, r4, r5, pc}
 80066f2:	0799      	lsls	r1, r3, #30
 80066f4:	bf58      	it	pl
 80066f6:	6962      	ldrpl	r2, [r4, #20]
 80066f8:	60a2      	str	r2, [r4, #8]
 80066fa:	e7f4      	b.n	80066e6 <__swsetup_r+0x8e>
 80066fc:	2000      	movs	r0, #0
 80066fe:	e7f7      	b.n	80066f0 <__swsetup_r+0x98>
 8006700:	20000020 	.word	0x20000020

08006704 <memcmp>:
 8006704:	b510      	push	{r4, lr}
 8006706:	3901      	subs	r1, #1
 8006708:	4402      	add	r2, r0
 800670a:	4290      	cmp	r0, r2
 800670c:	d101      	bne.n	8006712 <memcmp+0xe>
 800670e:	2000      	movs	r0, #0
 8006710:	e005      	b.n	800671e <memcmp+0x1a>
 8006712:	7803      	ldrb	r3, [r0, #0]
 8006714:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006718:	42a3      	cmp	r3, r4
 800671a:	d001      	beq.n	8006720 <memcmp+0x1c>
 800671c:	1b18      	subs	r0, r3, r4
 800671e:	bd10      	pop	{r4, pc}
 8006720:	3001      	adds	r0, #1
 8006722:	e7f2      	b.n	800670a <memcmp+0x6>

08006724 <memset>:
 8006724:	4402      	add	r2, r0
 8006726:	4603      	mov	r3, r0
 8006728:	4293      	cmp	r3, r2
 800672a:	d100      	bne.n	800672e <memset+0xa>
 800672c:	4770      	bx	lr
 800672e:	f803 1b01 	strb.w	r1, [r3], #1
 8006732:	e7f9      	b.n	8006728 <memset+0x4>

08006734 <_close_r>:
 8006734:	b538      	push	{r3, r4, r5, lr}
 8006736:	4d06      	ldr	r5, [pc, #24]	@ (8006750 <_close_r+0x1c>)
 8006738:	2300      	movs	r3, #0
 800673a:	4604      	mov	r4, r0
 800673c:	4608      	mov	r0, r1
 800673e:	602b      	str	r3, [r5, #0]
 8006740:	f7fa f995 	bl	8000a6e <_close>
 8006744:	1c43      	adds	r3, r0, #1
 8006746:	d102      	bne.n	800674e <_close_r+0x1a>
 8006748:	682b      	ldr	r3, [r5, #0]
 800674a:	b103      	cbz	r3, 800674e <_close_r+0x1a>
 800674c:	6023      	str	r3, [r4, #0]
 800674e:	bd38      	pop	{r3, r4, r5, pc}
 8006750:	20014630 	.word	0x20014630

08006754 <_lseek_r>:
 8006754:	b538      	push	{r3, r4, r5, lr}
 8006756:	4d07      	ldr	r5, [pc, #28]	@ (8006774 <_lseek_r+0x20>)
 8006758:	4604      	mov	r4, r0
 800675a:	4608      	mov	r0, r1
 800675c:	4611      	mov	r1, r2
 800675e:	2200      	movs	r2, #0
 8006760:	602a      	str	r2, [r5, #0]
 8006762:	461a      	mov	r2, r3
 8006764:	f7fa f9aa 	bl	8000abc <_lseek>
 8006768:	1c43      	adds	r3, r0, #1
 800676a:	d102      	bne.n	8006772 <_lseek_r+0x1e>
 800676c:	682b      	ldr	r3, [r5, #0]
 800676e:	b103      	cbz	r3, 8006772 <_lseek_r+0x1e>
 8006770:	6023      	str	r3, [r4, #0]
 8006772:	bd38      	pop	{r3, r4, r5, pc}
 8006774:	20014630 	.word	0x20014630

08006778 <_read_r>:
 8006778:	b538      	push	{r3, r4, r5, lr}
 800677a:	4d07      	ldr	r5, [pc, #28]	@ (8006798 <_read_r+0x20>)
 800677c:	4604      	mov	r4, r0
 800677e:	4608      	mov	r0, r1
 8006780:	4611      	mov	r1, r2
 8006782:	2200      	movs	r2, #0
 8006784:	602a      	str	r2, [r5, #0]
 8006786:	461a      	mov	r2, r3
 8006788:	f7fa f954 	bl	8000a34 <_read>
 800678c:	1c43      	adds	r3, r0, #1
 800678e:	d102      	bne.n	8006796 <_read_r+0x1e>
 8006790:	682b      	ldr	r3, [r5, #0]
 8006792:	b103      	cbz	r3, 8006796 <_read_r+0x1e>
 8006794:	6023      	str	r3, [r4, #0]
 8006796:	bd38      	pop	{r3, r4, r5, pc}
 8006798:	20014630 	.word	0x20014630

0800679c <__libc_init_array>:
 800679c:	b570      	push	{r4, r5, r6, lr}
 800679e:	4d0d      	ldr	r5, [pc, #52]	@ (80067d4 <__libc_init_array+0x38>)
 80067a0:	4c0d      	ldr	r4, [pc, #52]	@ (80067d8 <__libc_init_array+0x3c>)
 80067a2:	1b64      	subs	r4, r4, r5
 80067a4:	10a4      	asrs	r4, r4, #2
 80067a6:	2600      	movs	r6, #0
 80067a8:	42a6      	cmp	r6, r4
 80067aa:	d109      	bne.n	80067c0 <__libc_init_array+0x24>
 80067ac:	4d0b      	ldr	r5, [pc, #44]	@ (80067dc <__libc_init_array+0x40>)
 80067ae:	4c0c      	ldr	r4, [pc, #48]	@ (80067e0 <__libc_init_array+0x44>)
 80067b0:	f000 fa70 	bl	8006c94 <_init>
 80067b4:	1b64      	subs	r4, r4, r5
 80067b6:	10a4      	asrs	r4, r4, #2
 80067b8:	2600      	movs	r6, #0
 80067ba:	42a6      	cmp	r6, r4
 80067bc:	d105      	bne.n	80067ca <__libc_init_array+0x2e>
 80067be:	bd70      	pop	{r4, r5, r6, pc}
 80067c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80067c4:	4798      	blx	r3
 80067c6:	3601      	adds	r6, #1
 80067c8:	e7ee      	b.n	80067a8 <__libc_init_array+0xc>
 80067ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80067ce:	4798      	blx	r3
 80067d0:	3601      	adds	r6, #1
 80067d2:	e7f2      	b.n	80067ba <__libc_init_array+0x1e>
 80067d4:	08006dfc 	.word	0x08006dfc
 80067d8:	08006dfc 	.word	0x08006dfc
 80067dc:	08006dfc 	.word	0x08006dfc
 80067e0:	08006e00 	.word	0x08006e00

080067e4 <__retarget_lock_init_recursive>:
 80067e4:	4770      	bx	lr

080067e6 <__retarget_lock_acquire_recursive>:
 80067e6:	4770      	bx	lr

080067e8 <__retarget_lock_release_recursive>:
 80067e8:	4770      	bx	lr

080067ea <memcpy>:
 80067ea:	440a      	add	r2, r1
 80067ec:	4291      	cmp	r1, r2
 80067ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80067f2:	d100      	bne.n	80067f6 <memcpy+0xc>
 80067f4:	4770      	bx	lr
 80067f6:	b510      	push	{r4, lr}
 80067f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80067fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006800:	4291      	cmp	r1, r2
 8006802:	d1f9      	bne.n	80067f8 <memcpy+0xe>
 8006804:	bd10      	pop	{r4, pc}
	...

08006808 <_free_r>:
 8006808:	b538      	push	{r3, r4, r5, lr}
 800680a:	4605      	mov	r5, r0
 800680c:	2900      	cmp	r1, #0
 800680e:	d041      	beq.n	8006894 <_free_r+0x8c>
 8006810:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006814:	1f0c      	subs	r4, r1, #4
 8006816:	2b00      	cmp	r3, #0
 8006818:	bfb8      	it	lt
 800681a:	18e4      	addlt	r4, r4, r3
 800681c:	f000 f8e0 	bl	80069e0 <__malloc_lock>
 8006820:	4a1d      	ldr	r2, [pc, #116]	@ (8006898 <_free_r+0x90>)
 8006822:	6813      	ldr	r3, [r2, #0]
 8006824:	b933      	cbnz	r3, 8006834 <_free_r+0x2c>
 8006826:	6063      	str	r3, [r4, #4]
 8006828:	6014      	str	r4, [r2, #0]
 800682a:	4628      	mov	r0, r5
 800682c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006830:	f000 b8dc 	b.w	80069ec <__malloc_unlock>
 8006834:	42a3      	cmp	r3, r4
 8006836:	d908      	bls.n	800684a <_free_r+0x42>
 8006838:	6820      	ldr	r0, [r4, #0]
 800683a:	1821      	adds	r1, r4, r0
 800683c:	428b      	cmp	r3, r1
 800683e:	bf01      	itttt	eq
 8006840:	6819      	ldreq	r1, [r3, #0]
 8006842:	685b      	ldreq	r3, [r3, #4]
 8006844:	1809      	addeq	r1, r1, r0
 8006846:	6021      	streq	r1, [r4, #0]
 8006848:	e7ed      	b.n	8006826 <_free_r+0x1e>
 800684a:	461a      	mov	r2, r3
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	b10b      	cbz	r3, 8006854 <_free_r+0x4c>
 8006850:	42a3      	cmp	r3, r4
 8006852:	d9fa      	bls.n	800684a <_free_r+0x42>
 8006854:	6811      	ldr	r1, [r2, #0]
 8006856:	1850      	adds	r0, r2, r1
 8006858:	42a0      	cmp	r0, r4
 800685a:	d10b      	bne.n	8006874 <_free_r+0x6c>
 800685c:	6820      	ldr	r0, [r4, #0]
 800685e:	4401      	add	r1, r0
 8006860:	1850      	adds	r0, r2, r1
 8006862:	4283      	cmp	r3, r0
 8006864:	6011      	str	r1, [r2, #0]
 8006866:	d1e0      	bne.n	800682a <_free_r+0x22>
 8006868:	6818      	ldr	r0, [r3, #0]
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	6053      	str	r3, [r2, #4]
 800686e:	4408      	add	r0, r1
 8006870:	6010      	str	r0, [r2, #0]
 8006872:	e7da      	b.n	800682a <_free_r+0x22>
 8006874:	d902      	bls.n	800687c <_free_r+0x74>
 8006876:	230c      	movs	r3, #12
 8006878:	602b      	str	r3, [r5, #0]
 800687a:	e7d6      	b.n	800682a <_free_r+0x22>
 800687c:	6820      	ldr	r0, [r4, #0]
 800687e:	1821      	adds	r1, r4, r0
 8006880:	428b      	cmp	r3, r1
 8006882:	bf04      	itt	eq
 8006884:	6819      	ldreq	r1, [r3, #0]
 8006886:	685b      	ldreq	r3, [r3, #4]
 8006888:	6063      	str	r3, [r4, #4]
 800688a:	bf04      	itt	eq
 800688c:	1809      	addeq	r1, r1, r0
 800688e:	6021      	streq	r1, [r4, #0]
 8006890:	6054      	str	r4, [r2, #4]
 8006892:	e7ca      	b.n	800682a <_free_r+0x22>
 8006894:	bd38      	pop	{r3, r4, r5, pc}
 8006896:	bf00      	nop
 8006898:	2001463c 	.word	0x2001463c

0800689c <sbrk_aligned>:
 800689c:	b570      	push	{r4, r5, r6, lr}
 800689e:	4e0f      	ldr	r6, [pc, #60]	@ (80068dc <sbrk_aligned+0x40>)
 80068a0:	460c      	mov	r4, r1
 80068a2:	6831      	ldr	r1, [r6, #0]
 80068a4:	4605      	mov	r5, r0
 80068a6:	b911      	cbnz	r1, 80068ae <sbrk_aligned+0x12>
 80068a8:	f000 f9d6 	bl	8006c58 <_sbrk_r>
 80068ac:	6030      	str	r0, [r6, #0]
 80068ae:	4621      	mov	r1, r4
 80068b0:	4628      	mov	r0, r5
 80068b2:	f000 f9d1 	bl	8006c58 <_sbrk_r>
 80068b6:	1c43      	adds	r3, r0, #1
 80068b8:	d103      	bne.n	80068c2 <sbrk_aligned+0x26>
 80068ba:	f04f 34ff 	mov.w	r4, #4294967295
 80068be:	4620      	mov	r0, r4
 80068c0:	bd70      	pop	{r4, r5, r6, pc}
 80068c2:	1cc4      	adds	r4, r0, #3
 80068c4:	f024 0403 	bic.w	r4, r4, #3
 80068c8:	42a0      	cmp	r0, r4
 80068ca:	d0f8      	beq.n	80068be <sbrk_aligned+0x22>
 80068cc:	1a21      	subs	r1, r4, r0
 80068ce:	4628      	mov	r0, r5
 80068d0:	f000 f9c2 	bl	8006c58 <_sbrk_r>
 80068d4:	3001      	adds	r0, #1
 80068d6:	d1f2      	bne.n	80068be <sbrk_aligned+0x22>
 80068d8:	e7ef      	b.n	80068ba <sbrk_aligned+0x1e>
 80068da:	bf00      	nop
 80068dc:	20014638 	.word	0x20014638

080068e0 <_malloc_r>:
 80068e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068e4:	1ccd      	adds	r5, r1, #3
 80068e6:	f025 0503 	bic.w	r5, r5, #3
 80068ea:	3508      	adds	r5, #8
 80068ec:	2d0c      	cmp	r5, #12
 80068ee:	bf38      	it	cc
 80068f0:	250c      	movcc	r5, #12
 80068f2:	2d00      	cmp	r5, #0
 80068f4:	4606      	mov	r6, r0
 80068f6:	db01      	blt.n	80068fc <_malloc_r+0x1c>
 80068f8:	42a9      	cmp	r1, r5
 80068fa:	d904      	bls.n	8006906 <_malloc_r+0x26>
 80068fc:	230c      	movs	r3, #12
 80068fe:	6033      	str	r3, [r6, #0]
 8006900:	2000      	movs	r0, #0
 8006902:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006906:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80069dc <_malloc_r+0xfc>
 800690a:	f000 f869 	bl	80069e0 <__malloc_lock>
 800690e:	f8d8 3000 	ldr.w	r3, [r8]
 8006912:	461c      	mov	r4, r3
 8006914:	bb44      	cbnz	r4, 8006968 <_malloc_r+0x88>
 8006916:	4629      	mov	r1, r5
 8006918:	4630      	mov	r0, r6
 800691a:	f7ff ffbf 	bl	800689c <sbrk_aligned>
 800691e:	1c43      	adds	r3, r0, #1
 8006920:	4604      	mov	r4, r0
 8006922:	d158      	bne.n	80069d6 <_malloc_r+0xf6>
 8006924:	f8d8 4000 	ldr.w	r4, [r8]
 8006928:	4627      	mov	r7, r4
 800692a:	2f00      	cmp	r7, #0
 800692c:	d143      	bne.n	80069b6 <_malloc_r+0xd6>
 800692e:	2c00      	cmp	r4, #0
 8006930:	d04b      	beq.n	80069ca <_malloc_r+0xea>
 8006932:	6823      	ldr	r3, [r4, #0]
 8006934:	4639      	mov	r1, r7
 8006936:	4630      	mov	r0, r6
 8006938:	eb04 0903 	add.w	r9, r4, r3
 800693c:	f000 f98c 	bl	8006c58 <_sbrk_r>
 8006940:	4581      	cmp	r9, r0
 8006942:	d142      	bne.n	80069ca <_malloc_r+0xea>
 8006944:	6821      	ldr	r1, [r4, #0]
 8006946:	1a6d      	subs	r5, r5, r1
 8006948:	4629      	mov	r1, r5
 800694a:	4630      	mov	r0, r6
 800694c:	f7ff ffa6 	bl	800689c <sbrk_aligned>
 8006950:	3001      	adds	r0, #1
 8006952:	d03a      	beq.n	80069ca <_malloc_r+0xea>
 8006954:	6823      	ldr	r3, [r4, #0]
 8006956:	442b      	add	r3, r5
 8006958:	6023      	str	r3, [r4, #0]
 800695a:	f8d8 3000 	ldr.w	r3, [r8]
 800695e:	685a      	ldr	r2, [r3, #4]
 8006960:	bb62      	cbnz	r2, 80069bc <_malloc_r+0xdc>
 8006962:	f8c8 7000 	str.w	r7, [r8]
 8006966:	e00f      	b.n	8006988 <_malloc_r+0xa8>
 8006968:	6822      	ldr	r2, [r4, #0]
 800696a:	1b52      	subs	r2, r2, r5
 800696c:	d420      	bmi.n	80069b0 <_malloc_r+0xd0>
 800696e:	2a0b      	cmp	r2, #11
 8006970:	d917      	bls.n	80069a2 <_malloc_r+0xc2>
 8006972:	1961      	adds	r1, r4, r5
 8006974:	42a3      	cmp	r3, r4
 8006976:	6025      	str	r5, [r4, #0]
 8006978:	bf18      	it	ne
 800697a:	6059      	strne	r1, [r3, #4]
 800697c:	6863      	ldr	r3, [r4, #4]
 800697e:	bf08      	it	eq
 8006980:	f8c8 1000 	streq.w	r1, [r8]
 8006984:	5162      	str	r2, [r4, r5]
 8006986:	604b      	str	r3, [r1, #4]
 8006988:	4630      	mov	r0, r6
 800698a:	f000 f82f 	bl	80069ec <__malloc_unlock>
 800698e:	f104 000b 	add.w	r0, r4, #11
 8006992:	1d23      	adds	r3, r4, #4
 8006994:	f020 0007 	bic.w	r0, r0, #7
 8006998:	1ac2      	subs	r2, r0, r3
 800699a:	bf1c      	itt	ne
 800699c:	1a1b      	subne	r3, r3, r0
 800699e:	50a3      	strne	r3, [r4, r2]
 80069a0:	e7af      	b.n	8006902 <_malloc_r+0x22>
 80069a2:	6862      	ldr	r2, [r4, #4]
 80069a4:	42a3      	cmp	r3, r4
 80069a6:	bf0c      	ite	eq
 80069a8:	f8c8 2000 	streq.w	r2, [r8]
 80069ac:	605a      	strne	r2, [r3, #4]
 80069ae:	e7eb      	b.n	8006988 <_malloc_r+0xa8>
 80069b0:	4623      	mov	r3, r4
 80069b2:	6864      	ldr	r4, [r4, #4]
 80069b4:	e7ae      	b.n	8006914 <_malloc_r+0x34>
 80069b6:	463c      	mov	r4, r7
 80069b8:	687f      	ldr	r7, [r7, #4]
 80069ba:	e7b6      	b.n	800692a <_malloc_r+0x4a>
 80069bc:	461a      	mov	r2, r3
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	42a3      	cmp	r3, r4
 80069c2:	d1fb      	bne.n	80069bc <_malloc_r+0xdc>
 80069c4:	2300      	movs	r3, #0
 80069c6:	6053      	str	r3, [r2, #4]
 80069c8:	e7de      	b.n	8006988 <_malloc_r+0xa8>
 80069ca:	230c      	movs	r3, #12
 80069cc:	6033      	str	r3, [r6, #0]
 80069ce:	4630      	mov	r0, r6
 80069d0:	f000 f80c 	bl	80069ec <__malloc_unlock>
 80069d4:	e794      	b.n	8006900 <_malloc_r+0x20>
 80069d6:	6005      	str	r5, [r0, #0]
 80069d8:	e7d6      	b.n	8006988 <_malloc_r+0xa8>
 80069da:	bf00      	nop
 80069dc:	2001463c 	.word	0x2001463c

080069e0 <__malloc_lock>:
 80069e0:	4801      	ldr	r0, [pc, #4]	@ (80069e8 <__malloc_lock+0x8>)
 80069e2:	f7ff bf00 	b.w	80067e6 <__retarget_lock_acquire_recursive>
 80069e6:	bf00      	nop
 80069e8:	20014634 	.word	0x20014634

080069ec <__malloc_unlock>:
 80069ec:	4801      	ldr	r0, [pc, #4]	@ (80069f4 <__malloc_unlock+0x8>)
 80069ee:	f7ff befb 	b.w	80067e8 <__retarget_lock_release_recursive>
 80069f2:	bf00      	nop
 80069f4:	20014634 	.word	0x20014634

080069f8 <__sflush_r>:
 80069f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80069fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a00:	0716      	lsls	r6, r2, #28
 8006a02:	4605      	mov	r5, r0
 8006a04:	460c      	mov	r4, r1
 8006a06:	d454      	bmi.n	8006ab2 <__sflush_r+0xba>
 8006a08:	684b      	ldr	r3, [r1, #4]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	dc02      	bgt.n	8006a14 <__sflush_r+0x1c>
 8006a0e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	dd48      	ble.n	8006aa6 <__sflush_r+0xae>
 8006a14:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006a16:	2e00      	cmp	r6, #0
 8006a18:	d045      	beq.n	8006aa6 <__sflush_r+0xae>
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006a20:	682f      	ldr	r7, [r5, #0]
 8006a22:	6a21      	ldr	r1, [r4, #32]
 8006a24:	602b      	str	r3, [r5, #0]
 8006a26:	d030      	beq.n	8006a8a <__sflush_r+0x92>
 8006a28:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006a2a:	89a3      	ldrh	r3, [r4, #12]
 8006a2c:	0759      	lsls	r1, r3, #29
 8006a2e:	d505      	bpl.n	8006a3c <__sflush_r+0x44>
 8006a30:	6863      	ldr	r3, [r4, #4]
 8006a32:	1ad2      	subs	r2, r2, r3
 8006a34:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006a36:	b10b      	cbz	r3, 8006a3c <__sflush_r+0x44>
 8006a38:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006a3a:	1ad2      	subs	r2, r2, r3
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006a40:	6a21      	ldr	r1, [r4, #32]
 8006a42:	4628      	mov	r0, r5
 8006a44:	47b0      	blx	r6
 8006a46:	1c43      	adds	r3, r0, #1
 8006a48:	89a3      	ldrh	r3, [r4, #12]
 8006a4a:	d106      	bne.n	8006a5a <__sflush_r+0x62>
 8006a4c:	6829      	ldr	r1, [r5, #0]
 8006a4e:	291d      	cmp	r1, #29
 8006a50:	d82b      	bhi.n	8006aaa <__sflush_r+0xb2>
 8006a52:	4a2a      	ldr	r2, [pc, #168]	@ (8006afc <__sflush_r+0x104>)
 8006a54:	410a      	asrs	r2, r1
 8006a56:	07d6      	lsls	r6, r2, #31
 8006a58:	d427      	bmi.n	8006aaa <__sflush_r+0xb2>
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	6062      	str	r2, [r4, #4]
 8006a5e:	04d9      	lsls	r1, r3, #19
 8006a60:	6922      	ldr	r2, [r4, #16]
 8006a62:	6022      	str	r2, [r4, #0]
 8006a64:	d504      	bpl.n	8006a70 <__sflush_r+0x78>
 8006a66:	1c42      	adds	r2, r0, #1
 8006a68:	d101      	bne.n	8006a6e <__sflush_r+0x76>
 8006a6a:	682b      	ldr	r3, [r5, #0]
 8006a6c:	b903      	cbnz	r3, 8006a70 <__sflush_r+0x78>
 8006a6e:	6560      	str	r0, [r4, #84]	@ 0x54
 8006a70:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006a72:	602f      	str	r7, [r5, #0]
 8006a74:	b1b9      	cbz	r1, 8006aa6 <__sflush_r+0xae>
 8006a76:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006a7a:	4299      	cmp	r1, r3
 8006a7c:	d002      	beq.n	8006a84 <__sflush_r+0x8c>
 8006a7e:	4628      	mov	r0, r5
 8006a80:	f7ff fec2 	bl	8006808 <_free_r>
 8006a84:	2300      	movs	r3, #0
 8006a86:	6363      	str	r3, [r4, #52]	@ 0x34
 8006a88:	e00d      	b.n	8006aa6 <__sflush_r+0xae>
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	4628      	mov	r0, r5
 8006a8e:	47b0      	blx	r6
 8006a90:	4602      	mov	r2, r0
 8006a92:	1c50      	adds	r0, r2, #1
 8006a94:	d1c9      	bne.n	8006a2a <__sflush_r+0x32>
 8006a96:	682b      	ldr	r3, [r5, #0]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d0c6      	beq.n	8006a2a <__sflush_r+0x32>
 8006a9c:	2b1d      	cmp	r3, #29
 8006a9e:	d001      	beq.n	8006aa4 <__sflush_r+0xac>
 8006aa0:	2b16      	cmp	r3, #22
 8006aa2:	d11e      	bne.n	8006ae2 <__sflush_r+0xea>
 8006aa4:	602f      	str	r7, [r5, #0]
 8006aa6:	2000      	movs	r0, #0
 8006aa8:	e022      	b.n	8006af0 <__sflush_r+0xf8>
 8006aaa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006aae:	b21b      	sxth	r3, r3
 8006ab0:	e01b      	b.n	8006aea <__sflush_r+0xf2>
 8006ab2:	690f      	ldr	r7, [r1, #16]
 8006ab4:	2f00      	cmp	r7, #0
 8006ab6:	d0f6      	beq.n	8006aa6 <__sflush_r+0xae>
 8006ab8:	0793      	lsls	r3, r2, #30
 8006aba:	680e      	ldr	r6, [r1, #0]
 8006abc:	bf08      	it	eq
 8006abe:	694b      	ldreq	r3, [r1, #20]
 8006ac0:	600f      	str	r7, [r1, #0]
 8006ac2:	bf18      	it	ne
 8006ac4:	2300      	movne	r3, #0
 8006ac6:	eba6 0807 	sub.w	r8, r6, r7
 8006aca:	608b      	str	r3, [r1, #8]
 8006acc:	f1b8 0f00 	cmp.w	r8, #0
 8006ad0:	dde9      	ble.n	8006aa6 <__sflush_r+0xae>
 8006ad2:	6a21      	ldr	r1, [r4, #32]
 8006ad4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006ad6:	4643      	mov	r3, r8
 8006ad8:	463a      	mov	r2, r7
 8006ada:	4628      	mov	r0, r5
 8006adc:	47b0      	blx	r6
 8006ade:	2800      	cmp	r0, #0
 8006ae0:	dc08      	bgt.n	8006af4 <__sflush_r+0xfc>
 8006ae2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ae6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006aea:	81a3      	strh	r3, [r4, #12]
 8006aec:	f04f 30ff 	mov.w	r0, #4294967295
 8006af0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006af4:	4407      	add	r7, r0
 8006af6:	eba8 0800 	sub.w	r8, r8, r0
 8006afa:	e7e7      	b.n	8006acc <__sflush_r+0xd4>
 8006afc:	dfbffffe 	.word	0xdfbffffe

08006b00 <_fflush_r>:
 8006b00:	b538      	push	{r3, r4, r5, lr}
 8006b02:	690b      	ldr	r3, [r1, #16]
 8006b04:	4605      	mov	r5, r0
 8006b06:	460c      	mov	r4, r1
 8006b08:	b913      	cbnz	r3, 8006b10 <_fflush_r+0x10>
 8006b0a:	2500      	movs	r5, #0
 8006b0c:	4628      	mov	r0, r5
 8006b0e:	bd38      	pop	{r3, r4, r5, pc}
 8006b10:	b118      	cbz	r0, 8006b1a <_fflush_r+0x1a>
 8006b12:	6a03      	ldr	r3, [r0, #32]
 8006b14:	b90b      	cbnz	r3, 8006b1a <_fflush_r+0x1a>
 8006b16:	f7ff fc89 	bl	800642c <__sinit>
 8006b1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d0f3      	beq.n	8006b0a <_fflush_r+0xa>
 8006b22:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006b24:	07d0      	lsls	r0, r2, #31
 8006b26:	d404      	bmi.n	8006b32 <_fflush_r+0x32>
 8006b28:	0599      	lsls	r1, r3, #22
 8006b2a:	d402      	bmi.n	8006b32 <_fflush_r+0x32>
 8006b2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006b2e:	f7ff fe5a 	bl	80067e6 <__retarget_lock_acquire_recursive>
 8006b32:	4628      	mov	r0, r5
 8006b34:	4621      	mov	r1, r4
 8006b36:	f7ff ff5f 	bl	80069f8 <__sflush_r>
 8006b3a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006b3c:	07da      	lsls	r2, r3, #31
 8006b3e:	4605      	mov	r5, r0
 8006b40:	d4e4      	bmi.n	8006b0c <_fflush_r+0xc>
 8006b42:	89a3      	ldrh	r3, [r4, #12]
 8006b44:	059b      	lsls	r3, r3, #22
 8006b46:	d4e1      	bmi.n	8006b0c <_fflush_r+0xc>
 8006b48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006b4a:	f7ff fe4d 	bl	80067e8 <__retarget_lock_release_recursive>
 8006b4e:	e7dd      	b.n	8006b0c <_fflush_r+0xc>

08006b50 <__swhatbuf_r>:
 8006b50:	b570      	push	{r4, r5, r6, lr}
 8006b52:	460c      	mov	r4, r1
 8006b54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b58:	2900      	cmp	r1, #0
 8006b5a:	b096      	sub	sp, #88	@ 0x58
 8006b5c:	4615      	mov	r5, r2
 8006b5e:	461e      	mov	r6, r3
 8006b60:	da0d      	bge.n	8006b7e <__swhatbuf_r+0x2e>
 8006b62:	89a3      	ldrh	r3, [r4, #12]
 8006b64:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006b68:	f04f 0100 	mov.w	r1, #0
 8006b6c:	bf14      	ite	ne
 8006b6e:	2340      	movne	r3, #64	@ 0x40
 8006b70:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006b74:	2000      	movs	r0, #0
 8006b76:	6031      	str	r1, [r6, #0]
 8006b78:	602b      	str	r3, [r5, #0]
 8006b7a:	b016      	add	sp, #88	@ 0x58
 8006b7c:	bd70      	pop	{r4, r5, r6, pc}
 8006b7e:	466a      	mov	r2, sp
 8006b80:	f000 f848 	bl	8006c14 <_fstat_r>
 8006b84:	2800      	cmp	r0, #0
 8006b86:	dbec      	blt.n	8006b62 <__swhatbuf_r+0x12>
 8006b88:	9901      	ldr	r1, [sp, #4]
 8006b8a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006b8e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006b92:	4259      	negs	r1, r3
 8006b94:	4159      	adcs	r1, r3
 8006b96:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006b9a:	e7eb      	b.n	8006b74 <__swhatbuf_r+0x24>

08006b9c <__smakebuf_r>:
 8006b9c:	898b      	ldrh	r3, [r1, #12]
 8006b9e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006ba0:	079d      	lsls	r5, r3, #30
 8006ba2:	4606      	mov	r6, r0
 8006ba4:	460c      	mov	r4, r1
 8006ba6:	d507      	bpl.n	8006bb8 <__smakebuf_r+0x1c>
 8006ba8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006bac:	6023      	str	r3, [r4, #0]
 8006bae:	6123      	str	r3, [r4, #16]
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	6163      	str	r3, [r4, #20]
 8006bb4:	b003      	add	sp, #12
 8006bb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006bb8:	ab01      	add	r3, sp, #4
 8006bba:	466a      	mov	r2, sp
 8006bbc:	f7ff ffc8 	bl	8006b50 <__swhatbuf_r>
 8006bc0:	9f00      	ldr	r7, [sp, #0]
 8006bc2:	4605      	mov	r5, r0
 8006bc4:	4639      	mov	r1, r7
 8006bc6:	4630      	mov	r0, r6
 8006bc8:	f7ff fe8a 	bl	80068e0 <_malloc_r>
 8006bcc:	b948      	cbnz	r0, 8006be2 <__smakebuf_r+0x46>
 8006bce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006bd2:	059a      	lsls	r2, r3, #22
 8006bd4:	d4ee      	bmi.n	8006bb4 <__smakebuf_r+0x18>
 8006bd6:	f023 0303 	bic.w	r3, r3, #3
 8006bda:	f043 0302 	orr.w	r3, r3, #2
 8006bde:	81a3      	strh	r3, [r4, #12]
 8006be0:	e7e2      	b.n	8006ba8 <__smakebuf_r+0xc>
 8006be2:	89a3      	ldrh	r3, [r4, #12]
 8006be4:	6020      	str	r0, [r4, #0]
 8006be6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bea:	81a3      	strh	r3, [r4, #12]
 8006bec:	9b01      	ldr	r3, [sp, #4]
 8006bee:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006bf2:	b15b      	cbz	r3, 8006c0c <__smakebuf_r+0x70>
 8006bf4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006bf8:	4630      	mov	r0, r6
 8006bfa:	f000 f81d 	bl	8006c38 <_isatty_r>
 8006bfe:	b128      	cbz	r0, 8006c0c <__smakebuf_r+0x70>
 8006c00:	89a3      	ldrh	r3, [r4, #12]
 8006c02:	f023 0303 	bic.w	r3, r3, #3
 8006c06:	f043 0301 	orr.w	r3, r3, #1
 8006c0a:	81a3      	strh	r3, [r4, #12]
 8006c0c:	89a3      	ldrh	r3, [r4, #12]
 8006c0e:	431d      	orrs	r5, r3
 8006c10:	81a5      	strh	r5, [r4, #12]
 8006c12:	e7cf      	b.n	8006bb4 <__smakebuf_r+0x18>

08006c14 <_fstat_r>:
 8006c14:	b538      	push	{r3, r4, r5, lr}
 8006c16:	4d07      	ldr	r5, [pc, #28]	@ (8006c34 <_fstat_r+0x20>)
 8006c18:	2300      	movs	r3, #0
 8006c1a:	4604      	mov	r4, r0
 8006c1c:	4608      	mov	r0, r1
 8006c1e:	4611      	mov	r1, r2
 8006c20:	602b      	str	r3, [r5, #0]
 8006c22:	f7f9 ff30 	bl	8000a86 <_fstat>
 8006c26:	1c43      	adds	r3, r0, #1
 8006c28:	d102      	bne.n	8006c30 <_fstat_r+0x1c>
 8006c2a:	682b      	ldr	r3, [r5, #0]
 8006c2c:	b103      	cbz	r3, 8006c30 <_fstat_r+0x1c>
 8006c2e:	6023      	str	r3, [r4, #0]
 8006c30:	bd38      	pop	{r3, r4, r5, pc}
 8006c32:	bf00      	nop
 8006c34:	20014630 	.word	0x20014630

08006c38 <_isatty_r>:
 8006c38:	b538      	push	{r3, r4, r5, lr}
 8006c3a:	4d06      	ldr	r5, [pc, #24]	@ (8006c54 <_isatty_r+0x1c>)
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	4604      	mov	r4, r0
 8006c40:	4608      	mov	r0, r1
 8006c42:	602b      	str	r3, [r5, #0]
 8006c44:	f7f9 ff2f 	bl	8000aa6 <_isatty>
 8006c48:	1c43      	adds	r3, r0, #1
 8006c4a:	d102      	bne.n	8006c52 <_isatty_r+0x1a>
 8006c4c:	682b      	ldr	r3, [r5, #0]
 8006c4e:	b103      	cbz	r3, 8006c52 <_isatty_r+0x1a>
 8006c50:	6023      	str	r3, [r4, #0]
 8006c52:	bd38      	pop	{r3, r4, r5, pc}
 8006c54:	20014630 	.word	0x20014630

08006c58 <_sbrk_r>:
 8006c58:	b538      	push	{r3, r4, r5, lr}
 8006c5a:	4d06      	ldr	r5, [pc, #24]	@ (8006c74 <_sbrk_r+0x1c>)
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	4604      	mov	r4, r0
 8006c60:	4608      	mov	r0, r1
 8006c62:	602b      	str	r3, [r5, #0]
 8006c64:	f000 f808 	bl	8006c78 <_sbrk>
 8006c68:	1c43      	adds	r3, r0, #1
 8006c6a:	d102      	bne.n	8006c72 <_sbrk_r+0x1a>
 8006c6c:	682b      	ldr	r3, [r5, #0]
 8006c6e:	b103      	cbz	r3, 8006c72 <_sbrk_r+0x1a>
 8006c70:	6023      	str	r3, [r4, #0]
 8006c72:	bd38      	pop	{r3, r4, r5, pc}
 8006c74:	20014630 	.word	0x20014630

08006c78 <_sbrk>:
 8006c78:	4a04      	ldr	r2, [pc, #16]	@ (8006c8c <_sbrk+0x14>)
 8006c7a:	6811      	ldr	r1, [r2, #0]
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	b909      	cbnz	r1, 8006c84 <_sbrk+0xc>
 8006c80:	4903      	ldr	r1, [pc, #12]	@ (8006c90 <_sbrk+0x18>)
 8006c82:	6011      	str	r1, [r2, #0]
 8006c84:	6810      	ldr	r0, [r2, #0]
 8006c86:	4403      	add	r3, r0
 8006c88:	6013      	str	r3, [r2, #0]
 8006c8a:	4770      	bx	lr
 8006c8c:	20014640 	.word	0x20014640
 8006c90:	20014648 	.word	0x20014648

08006c94 <_init>:
 8006c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c96:	bf00      	nop
 8006c98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c9a:	bc08      	pop	{r3}
 8006c9c:	469e      	mov	lr, r3
 8006c9e:	4770      	bx	lr

08006ca0 <_fini>:
 8006ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ca2:	bf00      	nop
 8006ca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ca6:	bc08      	pop	{r3}
 8006ca8:	469e      	mov	lr, r3
 8006caa:	4770      	bx	lr
