
FreeRTOS_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e4c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  0800301c  0800301c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003074  08003074  00005010  2**0
                  CONTENTS
  4 .ARM          00000008  08003074  08003074  00004074  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800307c  0800307c  00005010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800307c  0800307c  0000407c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003080  08003080  00004080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08003084  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012d80  20000010  08003094  00005010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20012d90  08003094  00005d90  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c8ec  00000000  00000000  00005040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002255  00000000  00000000  0001192c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cf8  00000000  00000000  00013b88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a01  00000000  00000000  00014880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021f32  00000000  00000000  00015281  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fb00  00000000  00000000  000371b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d586b  00000000  00000000  00046cb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011c51e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000353c  00000000  00000000  0011c564  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000083  00000000  00000000  0011faa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000010 	.word	0x20000010
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003004 	.word	0x08003004

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000014 	.word	0x20000014
 800020c:	08003004 	.word	0x08003004

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b96a 	b.w	80004fc <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	460c      	mov	r4, r1
 8000248:	2b00      	cmp	r3, #0
 800024a:	d14e      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024c:	4694      	mov	ip, r2
 800024e:	458c      	cmp	ip, r1
 8000250:	4686      	mov	lr, r0
 8000252:	fab2 f282 	clz	r2, r2
 8000256:	d962      	bls.n	800031e <__udivmoddi4+0xde>
 8000258:	b14a      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025a:	f1c2 0320 	rsb	r3, r2, #32
 800025e:	4091      	lsls	r1, r2
 8000260:	fa20 f303 	lsr.w	r3, r0, r3
 8000264:	fa0c fc02 	lsl.w	ip, ip, r2
 8000268:	4319      	orrs	r1, r3
 800026a:	fa00 fe02 	lsl.w	lr, r0, r2
 800026e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000272:	fa1f f68c 	uxth.w	r6, ip
 8000276:	fbb1 f4f7 	udiv	r4, r1, r7
 800027a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800027e:	fb07 1114 	mls	r1, r7, r4, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb04 f106 	mul.w	r1, r4, r6
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f104 30ff 	add.w	r0, r4, #4294967295
 8000296:	f080 8112 	bcs.w	80004be <__udivmoddi4+0x27e>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 810f 	bls.w	80004be <__udivmoddi4+0x27e>
 80002a0:	3c02      	subs	r4, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a59      	subs	r1, r3, r1
 80002a6:	fa1f f38e 	uxth.w	r3, lr
 80002aa:	fbb1 f0f7 	udiv	r0, r1, r7
 80002ae:	fb07 1110 	mls	r1, r7, r0, r1
 80002b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002b6:	fb00 f606 	mul.w	r6, r0, r6
 80002ba:	429e      	cmp	r6, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x94>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002c6:	f080 80fc 	bcs.w	80004c2 <__udivmoddi4+0x282>
 80002ca:	429e      	cmp	r6, r3
 80002cc:	f240 80f9 	bls.w	80004c2 <__udivmoddi4+0x282>
 80002d0:	4463      	add	r3, ip
 80002d2:	3802      	subs	r0, #2
 80002d4:	1b9b      	subs	r3, r3, r6
 80002d6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002da:	2100      	movs	r1, #0
 80002dc:	b11d      	cbz	r5, 80002e6 <__udivmoddi4+0xa6>
 80002de:	40d3      	lsrs	r3, r2
 80002e0:	2200      	movs	r2, #0
 80002e2:	e9c5 3200 	strd	r3, r2, [r5]
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d905      	bls.n	80002fa <__udivmoddi4+0xba>
 80002ee:	b10d      	cbz	r5, 80002f4 <__udivmoddi4+0xb4>
 80002f0:	e9c5 0100 	strd	r0, r1, [r5]
 80002f4:	2100      	movs	r1, #0
 80002f6:	4608      	mov	r0, r1
 80002f8:	e7f5      	b.n	80002e6 <__udivmoddi4+0xa6>
 80002fa:	fab3 f183 	clz	r1, r3
 80002fe:	2900      	cmp	r1, #0
 8000300:	d146      	bne.n	8000390 <__udivmoddi4+0x150>
 8000302:	42a3      	cmp	r3, r4
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xcc>
 8000306:	4290      	cmp	r0, r2
 8000308:	f0c0 80f0 	bcc.w	80004ec <__udivmoddi4+0x2ac>
 800030c:	1a86      	subs	r6, r0, r2
 800030e:	eb64 0303 	sbc.w	r3, r4, r3
 8000312:	2001      	movs	r0, #1
 8000314:	2d00      	cmp	r5, #0
 8000316:	d0e6      	beq.n	80002e6 <__udivmoddi4+0xa6>
 8000318:	e9c5 6300 	strd	r6, r3, [r5]
 800031c:	e7e3      	b.n	80002e6 <__udivmoddi4+0xa6>
 800031e:	2a00      	cmp	r2, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x204>
 8000324:	eba1 040c 	sub.w	r4, r1, ip
 8000328:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800032c:	fa1f f78c 	uxth.w	r7, ip
 8000330:	2101      	movs	r1, #1
 8000332:	fbb4 f6f8 	udiv	r6, r4, r8
 8000336:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033a:	fb08 4416 	mls	r4, r8, r6, r4
 800033e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000342:	fb07 f006 	mul.w	r0, r7, r6
 8000346:	4298      	cmp	r0, r3
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x11c>
 800034a:	eb1c 0303 	adds.w	r3, ip, r3
 800034e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x11a>
 8000354:	4298      	cmp	r0, r3
 8000356:	f200 80cd 	bhi.w	80004f4 <__udivmoddi4+0x2b4>
 800035a:	4626      	mov	r6, r4
 800035c:	1a1c      	subs	r4, r3, r0
 800035e:	fa1f f38e 	uxth.w	r3, lr
 8000362:	fbb4 f0f8 	udiv	r0, r4, r8
 8000366:	fb08 4410 	mls	r4, r8, r0, r4
 800036a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036e:	fb00 f707 	mul.w	r7, r0, r7
 8000372:	429f      	cmp	r7, r3
 8000374:	d908      	bls.n	8000388 <__udivmoddi4+0x148>
 8000376:	eb1c 0303 	adds.w	r3, ip, r3
 800037a:	f100 34ff 	add.w	r4, r0, #4294967295
 800037e:	d202      	bcs.n	8000386 <__udivmoddi4+0x146>
 8000380:	429f      	cmp	r7, r3
 8000382:	f200 80b0 	bhi.w	80004e6 <__udivmoddi4+0x2a6>
 8000386:	4620      	mov	r0, r4
 8000388:	1bdb      	subs	r3, r3, r7
 800038a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800038e:	e7a5      	b.n	80002dc <__udivmoddi4+0x9c>
 8000390:	f1c1 0620 	rsb	r6, r1, #32
 8000394:	408b      	lsls	r3, r1
 8000396:	fa22 f706 	lsr.w	r7, r2, r6
 800039a:	431f      	orrs	r7, r3
 800039c:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a0:	fa04 f301 	lsl.w	r3, r4, r1
 80003a4:	ea43 030c 	orr.w	r3, r3, ip
 80003a8:	40f4      	lsrs	r4, r6
 80003aa:	fa00 f801 	lsl.w	r8, r0, r1
 80003ae:	0c38      	lsrs	r0, r7, #16
 80003b0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003b4:	fbb4 fef0 	udiv	lr, r4, r0
 80003b8:	fa1f fc87 	uxth.w	ip, r7
 80003bc:	fb00 441e 	mls	r4, r0, lr, r4
 80003c0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c4:	fb0e f90c 	mul.w	r9, lr, ip
 80003c8:	45a1      	cmp	r9, r4
 80003ca:	fa02 f201 	lsl.w	r2, r2, r1
 80003ce:	d90a      	bls.n	80003e6 <__udivmoddi4+0x1a6>
 80003d0:	193c      	adds	r4, r7, r4
 80003d2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003d6:	f080 8084 	bcs.w	80004e2 <__udivmoddi4+0x2a2>
 80003da:	45a1      	cmp	r9, r4
 80003dc:	f240 8081 	bls.w	80004e2 <__udivmoddi4+0x2a2>
 80003e0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003e4:	443c      	add	r4, r7
 80003e6:	eba4 0409 	sub.w	r4, r4, r9
 80003ea:	fa1f f983 	uxth.w	r9, r3
 80003ee:	fbb4 f3f0 	udiv	r3, r4, r0
 80003f2:	fb00 4413 	mls	r4, r0, r3, r4
 80003f6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003fa:	fb03 fc0c 	mul.w	ip, r3, ip
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d907      	bls.n	8000412 <__udivmoddi4+0x1d2>
 8000402:	193c      	adds	r4, r7, r4
 8000404:	f103 30ff 	add.w	r0, r3, #4294967295
 8000408:	d267      	bcs.n	80004da <__udivmoddi4+0x29a>
 800040a:	45a4      	cmp	ip, r4
 800040c:	d965      	bls.n	80004da <__udivmoddi4+0x29a>
 800040e:	3b02      	subs	r3, #2
 8000410:	443c      	add	r4, r7
 8000412:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000416:	fba0 9302 	umull	r9, r3, r0, r2
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	429c      	cmp	r4, r3
 8000420:	46ce      	mov	lr, r9
 8000422:	469c      	mov	ip, r3
 8000424:	d351      	bcc.n	80004ca <__udivmoddi4+0x28a>
 8000426:	d04e      	beq.n	80004c6 <__udivmoddi4+0x286>
 8000428:	b155      	cbz	r5, 8000440 <__udivmoddi4+0x200>
 800042a:	ebb8 030e 	subs.w	r3, r8, lr
 800042e:	eb64 040c 	sbc.w	r4, r4, ip
 8000432:	fa04 f606 	lsl.w	r6, r4, r6
 8000436:	40cb      	lsrs	r3, r1
 8000438:	431e      	orrs	r6, r3
 800043a:	40cc      	lsrs	r4, r1
 800043c:	e9c5 6400 	strd	r6, r4, [r5]
 8000440:	2100      	movs	r1, #0
 8000442:	e750      	b.n	80002e6 <__udivmoddi4+0xa6>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f103 	lsr.w	r1, r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa24 f303 	lsr.w	r3, r4, r3
 8000454:	4094      	lsls	r4, r2
 8000456:	430c      	orrs	r4, r1
 8000458:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800045c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000460:	fa1f f78c 	uxth.w	r7, ip
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3110 	mls	r1, r8, r0, r3
 800046c:	0c23      	lsrs	r3, r4, #16
 800046e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000472:	fb00 f107 	mul.w	r1, r0, r7
 8000476:	4299      	cmp	r1, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x24c>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000482:	d22c      	bcs.n	80004de <__udivmoddi4+0x29e>
 8000484:	4299      	cmp	r1, r3
 8000486:	d92a      	bls.n	80004de <__udivmoddi4+0x29e>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b2a4      	uxth	r4, r4
 8000490:	fbb3 f1f8 	udiv	r1, r3, r8
 8000494:	fb08 3311 	mls	r3, r8, r1, r3
 8000498:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800049c:	fb01 f307 	mul.w	r3, r1, r7
 80004a0:	42a3      	cmp	r3, r4
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x276>
 80004a4:	eb1c 0404 	adds.w	r4, ip, r4
 80004a8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004ac:	d213      	bcs.n	80004d6 <__udivmoddi4+0x296>
 80004ae:	42a3      	cmp	r3, r4
 80004b0:	d911      	bls.n	80004d6 <__udivmoddi4+0x296>
 80004b2:	3902      	subs	r1, #2
 80004b4:	4464      	add	r4, ip
 80004b6:	1ae4      	subs	r4, r4, r3
 80004b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004bc:	e739      	b.n	8000332 <__udivmoddi4+0xf2>
 80004be:	4604      	mov	r4, r0
 80004c0:	e6f0      	b.n	80002a4 <__udivmoddi4+0x64>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e706      	b.n	80002d4 <__udivmoddi4+0x94>
 80004c6:	45c8      	cmp	r8, r9
 80004c8:	d2ae      	bcs.n	8000428 <__udivmoddi4+0x1e8>
 80004ca:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ce:	eb63 0c07 	sbc.w	ip, r3, r7
 80004d2:	3801      	subs	r0, #1
 80004d4:	e7a8      	b.n	8000428 <__udivmoddi4+0x1e8>
 80004d6:	4631      	mov	r1, r6
 80004d8:	e7ed      	b.n	80004b6 <__udivmoddi4+0x276>
 80004da:	4603      	mov	r3, r0
 80004dc:	e799      	b.n	8000412 <__udivmoddi4+0x1d2>
 80004de:	4630      	mov	r0, r6
 80004e0:	e7d4      	b.n	800048c <__udivmoddi4+0x24c>
 80004e2:	46d6      	mov	lr, sl
 80004e4:	e77f      	b.n	80003e6 <__udivmoddi4+0x1a6>
 80004e6:	4463      	add	r3, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e74d      	b.n	8000388 <__udivmoddi4+0x148>
 80004ec:	4606      	mov	r6, r0
 80004ee:	4623      	mov	r3, r4
 80004f0:	4608      	mov	r0, r1
 80004f2:	e70f      	b.n	8000314 <__udivmoddi4+0xd4>
 80004f4:	3e02      	subs	r6, #2
 80004f6:	4463      	add	r3, ip
 80004f8:	e730      	b.n	800035c <__udivmoddi4+0x11c>
 80004fa:	bf00      	nop

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b088      	sub	sp, #32
 8000504:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000506:	f000 fa65 	bl	80009d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050a:	f000 f845 	bl	8000598 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050e:	f000 f8b1 	bl	8000674 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  status = xTaskCreate(task1_handler, "Task-1",200, "Hello World from Task 1", 2, &task1_handle );
 8000512:	f107 0308 	add.w	r3, r7, #8
 8000516:	9301      	str	r3, [sp, #4]
 8000518:	2302      	movs	r3, #2
 800051a:	9300      	str	r3, [sp, #0]
 800051c:	4b18      	ldr	r3, [pc, #96]	@ (8000580 <main+0x80>)
 800051e:	22c8      	movs	r2, #200	@ 0xc8
 8000520:	4918      	ldr	r1, [pc, #96]	@ (8000584 <main+0x84>)
 8000522:	4819      	ldr	r0, [pc, #100]	@ (8000588 <main+0x88>)
 8000524:	f001 fdfd 	bl	8002122 <xTaskCreate>
 8000528:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 800052a:	697b      	ldr	r3, [r7, #20]
 800052c:	2b01      	cmp	r3, #1
 800052e:	d00b      	beq.n	8000548 <main+0x48>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000530:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000534:	f383 8811 	msr	BASEPRI, r3
 8000538:	f3bf 8f6f 	isb	sy
 800053c:	f3bf 8f4f 	dsb	sy
 8000540:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000542:	bf00      	nop
 8000544:	bf00      	nop
 8000546:	e7fd      	b.n	8000544 <main+0x44>

  status = xTaskCreate(task2_handler, "Task-2",200, "Hello World from Task 2", 2, &task2_handle );
 8000548:	1d3b      	adds	r3, r7, #4
 800054a:	9301      	str	r3, [sp, #4]
 800054c:	2302      	movs	r3, #2
 800054e:	9300      	str	r3, [sp, #0]
 8000550:	4b0e      	ldr	r3, [pc, #56]	@ (800058c <main+0x8c>)
 8000552:	22c8      	movs	r2, #200	@ 0xc8
 8000554:	490e      	ldr	r1, [pc, #56]	@ (8000590 <main+0x90>)
 8000556:	480f      	ldr	r0, [pc, #60]	@ (8000594 <main+0x94>)
 8000558:	f001 fde3 	bl	8002122 <xTaskCreate>
 800055c:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 800055e:	697b      	ldr	r3, [r7, #20]
 8000560:	2b01      	cmp	r3, #1
 8000562:	d00b      	beq.n	800057c <main+0x7c>
        __asm volatile
 8000564:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000568:	f383 8811 	msr	BASEPRI, r3
 800056c:	f3bf 8f6f 	isb	sy
 8000570:	f3bf 8f4f 	dsb	sy
 8000574:	60fb      	str	r3, [r7, #12]
    }
 8000576:	bf00      	nop
 8000578:	bf00      	nop
 800057a:	e7fd      	b.n	8000578 <main+0x78>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800057c:	e7fe      	b.n	800057c <main+0x7c>
 800057e:	bf00      	nop
 8000580:	0800301c 	.word	0x0800301c
 8000584:	08003034 	.word	0x08003034
 8000588:	08000771 	.word	0x08000771
 800058c:	0800303c 	.word	0x0800303c
 8000590:	08003054 	.word	0x08003054
 8000594:	08000785 	.word	0x08000785

08000598 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b094      	sub	sp, #80	@ 0x50
 800059c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059e:	f107 031c 	add.w	r3, r7, #28
 80005a2:	2234      	movs	r2, #52	@ 0x34
 80005a4:	2100      	movs	r1, #0
 80005a6:	4618      	mov	r0, r3
 80005a8:	f002 fd00 	bl	8002fac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ac:	f107 0308 	add.w	r3, r7, #8
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
 80005b4:	605a      	str	r2, [r3, #4]
 80005b6:	609a      	str	r2, [r3, #8]
 80005b8:	60da      	str	r2, [r3, #12]
 80005ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005bc:	2300      	movs	r3, #0
 80005be:	607b      	str	r3, [r7, #4]
 80005c0:	4b2a      	ldr	r3, [pc, #168]	@ (800066c <SystemClock_Config+0xd4>)
 80005c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005c4:	4a29      	ldr	r2, [pc, #164]	@ (800066c <SystemClock_Config+0xd4>)
 80005c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80005cc:	4b27      	ldr	r3, [pc, #156]	@ (800066c <SystemClock_Config+0xd4>)
 80005ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005d4:	607b      	str	r3, [r7, #4]
 80005d6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005d8:	2300      	movs	r3, #0
 80005da:	603b      	str	r3, [r7, #0]
 80005dc:	4b24      	ldr	r3, [pc, #144]	@ (8000670 <SystemClock_Config+0xd8>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80005e4:	4a22      	ldr	r2, [pc, #136]	@ (8000670 <SystemClock_Config+0xd8>)
 80005e6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005ea:	6013      	str	r3, [r2, #0]
 80005ec:	4b20      	ldr	r3, [pc, #128]	@ (8000670 <SystemClock_Config+0xd8>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005f4:	603b      	str	r3, [r7, #0]
 80005f6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005f8:	2302      	movs	r3, #2
 80005fa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005fc:	2301      	movs	r3, #1
 80005fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000600:	2310      	movs	r3, #16
 8000602:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000604:	2302      	movs	r3, #2
 8000606:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000608:	2300      	movs	r3, #0
 800060a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800060c:	2310      	movs	r3, #16
 800060e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000610:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000614:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000616:	2304      	movs	r3, #4
 8000618:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800061a:	2302      	movs	r3, #2
 800061c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800061e:	2302      	movs	r3, #2
 8000620:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000622:	f107 031c 	add.w	r3, r7, #28
 8000626:	4618      	mov	r0, r3
 8000628:	f001 f80e 	bl	8001648 <HAL_RCC_OscConfig>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000632:	f000 f8c3 	bl	80007bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000636:	230f      	movs	r3, #15
 8000638:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800063a:	2302      	movs	r3, #2
 800063c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800063e:	2300      	movs	r3, #0
 8000640:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000642:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000646:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000648:	2300      	movs	r3, #0
 800064a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800064c:	f107 0308 	add.w	r3, r7, #8
 8000650:	2102      	movs	r1, #2
 8000652:	4618      	mov	r0, r3
 8000654:	f000 fc90 	bl	8000f78 <HAL_RCC_ClockConfig>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800065e:	f000 f8ad 	bl	80007bc <Error_Handler>
  }
}
 8000662:	bf00      	nop
 8000664:	3750      	adds	r7, #80	@ 0x50
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	40023800 	.word	0x40023800
 8000670:	40007000 	.word	0x40007000

08000674 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b08a      	sub	sp, #40	@ 0x28
 8000678:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067a:	f107 0314 	add.w	r3, r7, #20
 800067e:	2200      	movs	r2, #0
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	605a      	str	r2, [r3, #4]
 8000684:	609a      	str	r2, [r3, #8]
 8000686:	60da      	str	r2, [r3, #12]
 8000688:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800068a:	2300      	movs	r3, #0
 800068c:	613b      	str	r3, [r7, #16]
 800068e:	4b35      	ldr	r3, [pc, #212]	@ (8000764 <MX_GPIO_Init+0xf0>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000692:	4a34      	ldr	r2, [pc, #208]	@ (8000764 <MX_GPIO_Init+0xf0>)
 8000694:	f043 0304 	orr.w	r3, r3, #4
 8000698:	6313      	str	r3, [r2, #48]	@ 0x30
 800069a:	4b32      	ldr	r3, [pc, #200]	@ (8000764 <MX_GPIO_Init+0xf0>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800069e:	f003 0304 	and.w	r3, r3, #4
 80006a2:	613b      	str	r3, [r7, #16]
 80006a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006a6:	2300      	movs	r3, #0
 80006a8:	60fb      	str	r3, [r7, #12]
 80006aa:	4b2e      	ldr	r3, [pc, #184]	@ (8000764 <MX_GPIO_Init+0xf0>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ae:	4a2d      	ldr	r2, [pc, #180]	@ (8000764 <MX_GPIO_Init+0xf0>)
 80006b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006b6:	4b2b      	ldr	r3, [pc, #172]	@ (8000764 <MX_GPIO_Init+0xf0>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006be:	60fb      	str	r3, [r7, #12]
 80006c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c2:	2300      	movs	r3, #0
 80006c4:	60bb      	str	r3, [r7, #8]
 80006c6:	4b27      	ldr	r3, [pc, #156]	@ (8000764 <MX_GPIO_Init+0xf0>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ca:	4a26      	ldr	r2, [pc, #152]	@ (8000764 <MX_GPIO_Init+0xf0>)
 80006cc:	f043 0301 	orr.w	r3, r3, #1
 80006d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006d2:	4b24      	ldr	r3, [pc, #144]	@ (8000764 <MX_GPIO_Init+0xf0>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d6:	f003 0301 	and.w	r3, r3, #1
 80006da:	60bb      	str	r3, [r7, #8]
 80006dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006de:	2300      	movs	r3, #0
 80006e0:	607b      	str	r3, [r7, #4]
 80006e2:	4b20      	ldr	r3, [pc, #128]	@ (8000764 <MX_GPIO_Init+0xf0>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006e6:	4a1f      	ldr	r2, [pc, #124]	@ (8000764 <MX_GPIO_Init+0xf0>)
 80006e8:	f043 0302 	orr.w	r3, r3, #2
 80006ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ee:	4b1d      	ldr	r3, [pc, #116]	@ (8000764 <MX_GPIO_Init+0xf0>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f2:	f003 0302 	and.w	r3, r3, #2
 80006f6:	607b      	str	r3, [r7, #4]
 80006f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006fa:	2200      	movs	r2, #0
 80006fc:	2120      	movs	r1, #32
 80006fe:	481a      	ldr	r0, [pc, #104]	@ (8000768 <MX_GPIO_Init+0xf4>)
 8000700:	f000 fc20 	bl	8000f44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000704:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000708:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800070a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800070e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000710:	2300      	movs	r3, #0
 8000712:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000714:	f107 0314 	add.w	r3, r7, #20
 8000718:	4619      	mov	r1, r3
 800071a:	4814      	ldr	r0, [pc, #80]	@ (800076c <MX_GPIO_Init+0xf8>)
 800071c:	f000 fa7e 	bl	8000c1c <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000720:	230c      	movs	r3, #12
 8000722:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000724:	2302      	movs	r3, #2
 8000726:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000728:	2300      	movs	r3, #0
 800072a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800072c:	2303      	movs	r3, #3
 800072e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000730:	2307      	movs	r3, #7
 8000732:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000734:	f107 0314 	add.w	r3, r7, #20
 8000738:	4619      	mov	r1, r3
 800073a:	480b      	ldr	r0, [pc, #44]	@ (8000768 <MX_GPIO_Init+0xf4>)
 800073c:	f000 fa6e 	bl	8000c1c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000740:	2320      	movs	r3, #32
 8000742:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000744:	2301      	movs	r3, #1
 8000746:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000748:	2300      	movs	r3, #0
 800074a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074c:	2300      	movs	r3, #0
 800074e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000750:	f107 0314 	add.w	r3, r7, #20
 8000754:	4619      	mov	r1, r3
 8000756:	4804      	ldr	r0, [pc, #16]	@ (8000768 <MX_GPIO_Init+0xf4>)
 8000758:	f000 fa60 	bl	8000c1c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800075c:	bf00      	nop
 800075e:	3728      	adds	r7, #40	@ 0x28
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	40023800 	.word	0x40023800
 8000768:	40020000 	.word	0x40020000
 800076c:	40020800 	.word	0x40020800

08000770 <task1_handler>:

/* USER CODE BEGIN 4 */

static void task1_handler(void* parameters){
 8000770:	b480      	push	{r7}
 8000772:	b083      	sub	sp, #12
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]

}
 8000778:	bf00      	nop
 800077a:	370c      	adds	r7, #12
 800077c:	46bd      	mov	sp, r7
 800077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000782:	4770      	bx	lr

08000784 <task2_handler>:

static void task2_handler(void* parameters){
 8000784:	b480      	push	{r7}
 8000786:	b083      	sub	sp, #12
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]

}
 800078c:	bf00      	nop
 800078e:	370c      	adds	r7, #12
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr

08000798 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a04      	ldr	r2, [pc, #16]	@ (80007b8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007a6:	4293      	cmp	r3, r2
 80007a8:	d101      	bne.n	80007ae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007aa:	f000 f935 	bl	8000a18 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007ae:	bf00      	nop
 80007b0:	3708      	adds	r7, #8
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	40001000 	.word	0x40001000

080007bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007c0:	b672      	cpsid	i
}
 80007c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007c4:	bf00      	nop
 80007c6:	e7fd      	b.n	80007c4 <Error_Handler+0x8>

080007c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	607b      	str	r3, [r7, #4]
 80007d2:	4b10      	ldr	r3, [pc, #64]	@ (8000814 <HAL_MspInit+0x4c>)
 80007d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007d6:	4a0f      	ldr	r2, [pc, #60]	@ (8000814 <HAL_MspInit+0x4c>)
 80007d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80007de:	4b0d      	ldr	r3, [pc, #52]	@ (8000814 <HAL_MspInit+0x4c>)
 80007e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007e6:	607b      	str	r3, [r7, #4]
 80007e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	603b      	str	r3, [r7, #0]
 80007ee:	4b09      	ldr	r3, [pc, #36]	@ (8000814 <HAL_MspInit+0x4c>)
 80007f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007f2:	4a08      	ldr	r2, [pc, #32]	@ (8000814 <HAL_MspInit+0x4c>)
 80007f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80007fa:	4b06      	ldr	r3, [pc, #24]	@ (8000814 <HAL_MspInit+0x4c>)
 80007fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000802:	603b      	str	r3, [r7, #0]
 8000804:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000806:	bf00      	nop
 8000808:	370c      	adds	r7, #12
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	40023800 	.word	0x40023800

08000818 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b08e      	sub	sp, #56	@ 0x38
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000820:	2300      	movs	r3, #0
 8000822:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000824:	2300      	movs	r3, #0
 8000826:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000828:	2300      	movs	r3, #0
 800082a:	60fb      	str	r3, [r7, #12]
 800082c:	4b33      	ldr	r3, [pc, #204]	@ (80008fc <HAL_InitTick+0xe4>)
 800082e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000830:	4a32      	ldr	r2, [pc, #200]	@ (80008fc <HAL_InitTick+0xe4>)
 8000832:	f043 0310 	orr.w	r3, r3, #16
 8000836:	6413      	str	r3, [r2, #64]	@ 0x40
 8000838:	4b30      	ldr	r3, [pc, #192]	@ (80008fc <HAL_InitTick+0xe4>)
 800083a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800083c:	f003 0310 	and.w	r3, r3, #16
 8000840:	60fb      	str	r3, [r7, #12]
 8000842:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000844:	f107 0210 	add.w	r2, r7, #16
 8000848:	f107 0314 	add.w	r3, r7, #20
 800084c:	4611      	mov	r1, r2
 800084e:	4618      	mov	r0, r3
 8000850:	f000 fc98 	bl	8001184 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000854:	6a3b      	ldr	r3, [r7, #32]
 8000856:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000858:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800085a:	2b00      	cmp	r3, #0
 800085c:	d103      	bne.n	8000866 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800085e:	f000 fc7d 	bl	800115c <HAL_RCC_GetPCLK1Freq>
 8000862:	6378      	str	r0, [r7, #52]	@ 0x34
 8000864:	e004      	b.n	8000870 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000866:	f000 fc79 	bl	800115c <HAL_RCC_GetPCLK1Freq>
 800086a:	4603      	mov	r3, r0
 800086c:	005b      	lsls	r3, r3, #1
 800086e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000870:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000872:	4a23      	ldr	r2, [pc, #140]	@ (8000900 <HAL_InitTick+0xe8>)
 8000874:	fba2 2303 	umull	r2, r3, r2, r3
 8000878:	0c9b      	lsrs	r3, r3, #18
 800087a:	3b01      	subs	r3, #1
 800087c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800087e:	4b21      	ldr	r3, [pc, #132]	@ (8000904 <HAL_InitTick+0xec>)
 8000880:	4a21      	ldr	r2, [pc, #132]	@ (8000908 <HAL_InitTick+0xf0>)
 8000882:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000884:	4b1f      	ldr	r3, [pc, #124]	@ (8000904 <HAL_InitTick+0xec>)
 8000886:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800088a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800088c:	4a1d      	ldr	r2, [pc, #116]	@ (8000904 <HAL_InitTick+0xec>)
 800088e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000890:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000892:	4b1c      	ldr	r3, [pc, #112]	@ (8000904 <HAL_InitTick+0xec>)
 8000894:	2200      	movs	r2, #0
 8000896:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000898:	4b1a      	ldr	r3, [pc, #104]	@ (8000904 <HAL_InitTick+0xec>)
 800089a:	2200      	movs	r2, #0
 800089c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800089e:	4b19      	ldr	r3, [pc, #100]	@ (8000904 <HAL_InitTick+0xec>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80008a4:	4817      	ldr	r0, [pc, #92]	@ (8000904 <HAL_InitTick+0xec>)
 80008a6:	f001 f96d 	bl	8001b84 <HAL_TIM_Base_Init>
 80008aa:	4603      	mov	r3, r0
 80008ac:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80008b0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d11b      	bne.n	80008f0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80008b8:	4812      	ldr	r0, [pc, #72]	@ (8000904 <HAL_InitTick+0xec>)
 80008ba:	f001 f9bd 	bl	8001c38 <HAL_TIM_Base_Start_IT>
 80008be:	4603      	mov	r3, r0
 80008c0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80008c4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d111      	bne.n	80008f0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80008cc:	2036      	movs	r0, #54	@ 0x36
 80008ce:	f000 f997 	bl	8000c00 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	2b0f      	cmp	r3, #15
 80008d6:	d808      	bhi.n	80008ea <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80008d8:	2200      	movs	r2, #0
 80008da:	6879      	ldr	r1, [r7, #4]
 80008dc:	2036      	movs	r0, #54	@ 0x36
 80008de:	f000 f973 	bl	8000bc8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008e2:	4a0a      	ldr	r2, [pc, #40]	@ (800090c <HAL_InitTick+0xf4>)
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	6013      	str	r3, [r2, #0]
 80008e8:	e002      	b.n	80008f0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80008ea:	2301      	movs	r3, #1
 80008ec:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80008f0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80008f4:	4618      	mov	r0, r3
 80008f6:	3738      	adds	r7, #56	@ 0x38
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	40023800 	.word	0x40023800
 8000900:	431bde83 	.word	0x431bde83
 8000904:	2000002c 	.word	0x2000002c
 8000908:	40001000 	.word	0x40001000
 800090c:	20000004 	.word	0x20000004

08000910 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000914:	bf00      	nop
 8000916:	e7fd      	b.n	8000914 <NMI_Handler+0x4>

08000918 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800091c:	bf00      	nop
 800091e:	e7fd      	b.n	800091c <HardFault_Handler+0x4>

08000920 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000924:	bf00      	nop
 8000926:	e7fd      	b.n	8000924 <MemManage_Handler+0x4>

08000928 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800092c:	bf00      	nop
 800092e:	e7fd      	b.n	800092c <BusFault_Handler+0x4>

08000930 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000934:	bf00      	nop
 8000936:	e7fd      	b.n	8000934 <UsageFault_Handler+0x4>

08000938 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800093c:	bf00      	nop
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr
	...

08000948 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800094c:	4802      	ldr	r0, [pc, #8]	@ (8000958 <TIM6_DAC_IRQHandler+0x10>)
 800094e:	f001 f9e3 	bl	8001d18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000952:	bf00      	nop
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	2000002c 	.word	0x2000002c

0800095c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000960:	4b06      	ldr	r3, [pc, #24]	@ (800097c <SystemInit+0x20>)
 8000962:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000966:	4a05      	ldr	r2, [pc, #20]	@ (800097c <SystemInit+0x20>)
 8000968:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800096c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000970:	bf00      	nop
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	e000ed00 	.word	0xe000ed00

08000980 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000980:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80009b8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000984:	f7ff ffea 	bl	800095c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000988:	480c      	ldr	r0, [pc, #48]	@ (80009bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800098a:	490d      	ldr	r1, [pc, #52]	@ (80009c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800098c:	4a0d      	ldr	r2, [pc, #52]	@ (80009c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800098e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000990:	e002      	b.n	8000998 <LoopCopyDataInit>

08000992 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000992:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000994:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000996:	3304      	adds	r3, #4

08000998 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000998:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800099a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800099c:	d3f9      	bcc.n	8000992 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800099e:	4a0a      	ldr	r2, [pc, #40]	@ (80009c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80009a0:	4c0a      	ldr	r4, [pc, #40]	@ (80009cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80009a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009a4:	e001      	b.n	80009aa <LoopFillZerobss>

080009a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009a8:	3204      	adds	r2, #4

080009aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009ac:	d3fb      	bcc.n	80009a6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80009ae:	f002 fb05 	bl	8002fbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009b2:	f7ff fda5 	bl	8000500 <main>
  bx  lr    
 80009b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80009b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009c0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80009c4:	08003084 	.word	0x08003084
  ldr r2, =_sbss
 80009c8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80009cc:	20012d90 	.word	0x20012d90

080009d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009d0:	e7fe      	b.n	80009d0 <ADC_IRQHandler>
	...

080009d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009d8:	4b0e      	ldr	r3, [pc, #56]	@ (8000a14 <HAL_Init+0x40>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a0d      	ldr	r2, [pc, #52]	@ (8000a14 <HAL_Init+0x40>)
 80009de:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80009e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009e4:	4b0b      	ldr	r3, [pc, #44]	@ (8000a14 <HAL_Init+0x40>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a0a      	ldr	r2, [pc, #40]	@ (8000a14 <HAL_Init+0x40>)
 80009ea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80009ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009f0:	4b08      	ldr	r3, [pc, #32]	@ (8000a14 <HAL_Init+0x40>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a07      	ldr	r2, [pc, #28]	@ (8000a14 <HAL_Init+0x40>)
 80009f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80009fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009fc:	2003      	movs	r0, #3
 80009fe:	f000 f8d8 	bl	8000bb2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a02:	2000      	movs	r0, #0
 8000a04:	f7ff ff08 	bl	8000818 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a08:	f7ff fede 	bl	80007c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a0c:	2300      	movs	r3, #0
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	40023c00 	.word	0x40023c00

08000a18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a1c:	4b06      	ldr	r3, [pc, #24]	@ (8000a38 <HAL_IncTick+0x20>)
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	461a      	mov	r2, r3
 8000a22:	4b06      	ldr	r3, [pc, #24]	@ (8000a3c <HAL_IncTick+0x24>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	4413      	add	r3, r2
 8000a28:	4a04      	ldr	r2, [pc, #16]	@ (8000a3c <HAL_IncTick+0x24>)
 8000a2a:	6013      	str	r3, [r2, #0]
}
 8000a2c:	bf00      	nop
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	20000008 	.word	0x20000008
 8000a3c:	20000074 	.word	0x20000074

08000a40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  return uwTick;
 8000a44:	4b03      	ldr	r3, [pc, #12]	@ (8000a54 <HAL_GetTick+0x14>)
 8000a46:	681b      	ldr	r3, [r3, #0]
}
 8000a48:	4618      	mov	r0, r3
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	20000074 	.word	0x20000074

08000a58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b085      	sub	sp, #20
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	f003 0307 	and.w	r3, r3, #7
 8000a66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a68:	4b0c      	ldr	r3, [pc, #48]	@ (8000a9c <__NVIC_SetPriorityGrouping+0x44>)
 8000a6a:	68db      	ldr	r3, [r3, #12]
 8000a6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a6e:	68ba      	ldr	r2, [r7, #8]
 8000a70:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a74:	4013      	ands	r3, r2
 8000a76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a7c:	68bb      	ldr	r3, [r7, #8]
 8000a7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a80:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a8a:	4a04      	ldr	r2, [pc, #16]	@ (8000a9c <__NVIC_SetPriorityGrouping+0x44>)
 8000a8c:	68bb      	ldr	r3, [r7, #8]
 8000a8e:	60d3      	str	r3, [r2, #12]
}
 8000a90:	bf00      	nop
 8000a92:	3714      	adds	r7, #20
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr
 8000a9c:	e000ed00 	.word	0xe000ed00

08000aa0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000aa4:	4b04      	ldr	r3, [pc, #16]	@ (8000ab8 <__NVIC_GetPriorityGrouping+0x18>)
 8000aa6:	68db      	ldr	r3, [r3, #12]
 8000aa8:	0a1b      	lsrs	r3, r3, #8
 8000aaa:	f003 0307 	and.w	r3, r3, #7
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr
 8000ab8:	e000ed00 	.word	0xe000ed00

08000abc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	db0b      	blt.n	8000ae6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ace:	79fb      	ldrb	r3, [r7, #7]
 8000ad0:	f003 021f 	and.w	r2, r3, #31
 8000ad4:	4907      	ldr	r1, [pc, #28]	@ (8000af4 <__NVIC_EnableIRQ+0x38>)
 8000ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ada:	095b      	lsrs	r3, r3, #5
 8000adc:	2001      	movs	r0, #1
 8000ade:	fa00 f202 	lsl.w	r2, r0, r2
 8000ae2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ae6:	bf00      	nop
 8000ae8:	370c      	adds	r7, #12
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	e000e100 	.word	0xe000e100

08000af8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	4603      	mov	r3, r0
 8000b00:	6039      	str	r1, [r7, #0]
 8000b02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	db0a      	blt.n	8000b22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	b2da      	uxtb	r2, r3
 8000b10:	490c      	ldr	r1, [pc, #48]	@ (8000b44 <__NVIC_SetPriority+0x4c>)
 8000b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b16:	0112      	lsls	r2, r2, #4
 8000b18:	b2d2      	uxtb	r2, r2
 8000b1a:	440b      	add	r3, r1
 8000b1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b20:	e00a      	b.n	8000b38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	b2da      	uxtb	r2, r3
 8000b26:	4908      	ldr	r1, [pc, #32]	@ (8000b48 <__NVIC_SetPriority+0x50>)
 8000b28:	79fb      	ldrb	r3, [r7, #7]
 8000b2a:	f003 030f 	and.w	r3, r3, #15
 8000b2e:	3b04      	subs	r3, #4
 8000b30:	0112      	lsls	r2, r2, #4
 8000b32:	b2d2      	uxtb	r2, r2
 8000b34:	440b      	add	r3, r1
 8000b36:	761a      	strb	r2, [r3, #24]
}
 8000b38:	bf00      	nop
 8000b3a:	370c      	adds	r7, #12
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr
 8000b44:	e000e100 	.word	0xe000e100
 8000b48:	e000ed00 	.word	0xe000ed00

08000b4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b089      	sub	sp, #36	@ 0x24
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	60f8      	str	r0, [r7, #12]
 8000b54:	60b9      	str	r1, [r7, #8]
 8000b56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	f003 0307 	and.w	r3, r3, #7
 8000b5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b60:	69fb      	ldr	r3, [r7, #28]
 8000b62:	f1c3 0307 	rsb	r3, r3, #7
 8000b66:	2b04      	cmp	r3, #4
 8000b68:	bf28      	it	cs
 8000b6a:	2304      	movcs	r3, #4
 8000b6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b6e:	69fb      	ldr	r3, [r7, #28]
 8000b70:	3304      	adds	r3, #4
 8000b72:	2b06      	cmp	r3, #6
 8000b74:	d902      	bls.n	8000b7c <NVIC_EncodePriority+0x30>
 8000b76:	69fb      	ldr	r3, [r7, #28]
 8000b78:	3b03      	subs	r3, #3
 8000b7a:	e000      	b.n	8000b7e <NVIC_EncodePriority+0x32>
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b80:	f04f 32ff 	mov.w	r2, #4294967295
 8000b84:	69bb      	ldr	r3, [r7, #24]
 8000b86:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8a:	43da      	mvns	r2, r3
 8000b8c:	68bb      	ldr	r3, [r7, #8]
 8000b8e:	401a      	ands	r2, r3
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b94:	f04f 31ff 	mov.w	r1, #4294967295
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b9e:	43d9      	mvns	r1, r3
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ba4:	4313      	orrs	r3, r2
         );
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	3724      	adds	r7, #36	@ 0x24
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr

08000bb2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bb2:	b580      	push	{r7, lr}
 8000bb4:	b082      	sub	sp, #8
 8000bb6:	af00      	add	r7, sp, #0
 8000bb8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bba:	6878      	ldr	r0, [r7, #4]
 8000bbc:	f7ff ff4c 	bl	8000a58 <__NVIC_SetPriorityGrouping>
}
 8000bc0:	bf00      	nop
 8000bc2:	3708      	adds	r7, #8
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}

08000bc8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b086      	sub	sp, #24
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	4603      	mov	r3, r0
 8000bd0:	60b9      	str	r1, [r7, #8]
 8000bd2:	607a      	str	r2, [r7, #4]
 8000bd4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bda:	f7ff ff61 	bl	8000aa0 <__NVIC_GetPriorityGrouping>
 8000bde:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000be0:	687a      	ldr	r2, [r7, #4]
 8000be2:	68b9      	ldr	r1, [r7, #8]
 8000be4:	6978      	ldr	r0, [r7, #20]
 8000be6:	f7ff ffb1 	bl	8000b4c <NVIC_EncodePriority>
 8000bea:	4602      	mov	r2, r0
 8000bec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bf0:	4611      	mov	r1, r2
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f7ff ff80 	bl	8000af8 <__NVIC_SetPriority>
}
 8000bf8:	bf00      	nop
 8000bfa:	3718      	adds	r7, #24
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}

08000c00 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	4603      	mov	r3, r0
 8000c08:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f7ff ff54 	bl	8000abc <__NVIC_EnableIRQ>
}
 8000c14:	bf00      	nop
 8000c16:	3708      	adds	r7, #8
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}

08000c1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b089      	sub	sp, #36	@ 0x24
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
 8000c24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c26:	2300      	movs	r3, #0
 8000c28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c32:	2300      	movs	r3, #0
 8000c34:	61fb      	str	r3, [r7, #28]
 8000c36:	e165      	b.n	8000f04 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c38:	2201      	movs	r2, #1
 8000c3a:	69fb      	ldr	r3, [r7, #28]
 8000c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	697a      	ldr	r2, [r7, #20]
 8000c48:	4013      	ands	r3, r2
 8000c4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c4c:	693a      	ldr	r2, [r7, #16]
 8000c4e:	697b      	ldr	r3, [r7, #20]
 8000c50:	429a      	cmp	r2, r3
 8000c52:	f040 8154 	bne.w	8000efe <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	685b      	ldr	r3, [r3, #4]
 8000c5a:	f003 0303 	and.w	r3, r3, #3
 8000c5e:	2b01      	cmp	r3, #1
 8000c60:	d005      	beq.n	8000c6e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	685b      	ldr	r3, [r3, #4]
 8000c66:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c6a:	2b02      	cmp	r3, #2
 8000c6c:	d130      	bne.n	8000cd0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	689b      	ldr	r3, [r3, #8]
 8000c72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c74:	69fb      	ldr	r3, [r7, #28]
 8000c76:	005b      	lsls	r3, r3, #1
 8000c78:	2203      	movs	r2, #3
 8000c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7e:	43db      	mvns	r3, r3
 8000c80:	69ba      	ldr	r2, [r7, #24]
 8000c82:	4013      	ands	r3, r2
 8000c84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	68da      	ldr	r2, [r3, #12]
 8000c8a:	69fb      	ldr	r3, [r7, #28]
 8000c8c:	005b      	lsls	r3, r3, #1
 8000c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c92:	69ba      	ldr	r2, [r7, #24]
 8000c94:	4313      	orrs	r3, r2
 8000c96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	69ba      	ldr	r2, [r7, #24]
 8000c9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	685b      	ldr	r3, [r3, #4]
 8000ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	69fb      	ldr	r3, [r7, #28]
 8000ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cac:	43db      	mvns	r3, r3
 8000cae:	69ba      	ldr	r2, [r7, #24]
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	091b      	lsrs	r3, r3, #4
 8000cba:	f003 0201 	and.w	r2, r3, #1
 8000cbe:	69fb      	ldr	r3, [r7, #28]
 8000cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc4:	69ba      	ldr	r2, [r7, #24]
 8000cc6:	4313      	orrs	r3, r2
 8000cc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	69ba      	ldr	r2, [r7, #24]
 8000cce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	f003 0303 	and.w	r3, r3, #3
 8000cd8:	2b03      	cmp	r3, #3
 8000cda:	d017      	beq.n	8000d0c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	68db      	ldr	r3, [r3, #12]
 8000ce0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ce2:	69fb      	ldr	r3, [r7, #28]
 8000ce4:	005b      	lsls	r3, r3, #1
 8000ce6:	2203      	movs	r2, #3
 8000ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cec:	43db      	mvns	r3, r3
 8000cee:	69ba      	ldr	r2, [r7, #24]
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	689a      	ldr	r2, [r3, #8]
 8000cf8:	69fb      	ldr	r3, [r7, #28]
 8000cfa:	005b      	lsls	r3, r3, #1
 8000cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000d00:	69ba      	ldr	r2, [r7, #24]
 8000d02:	4313      	orrs	r3, r2
 8000d04:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	69ba      	ldr	r2, [r7, #24]
 8000d0a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	f003 0303 	and.w	r3, r3, #3
 8000d14:	2b02      	cmp	r3, #2
 8000d16:	d123      	bne.n	8000d60 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d18:	69fb      	ldr	r3, [r7, #28]
 8000d1a:	08da      	lsrs	r2, r3, #3
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	3208      	adds	r2, #8
 8000d20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d24:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	f003 0307 	and.w	r3, r3, #7
 8000d2c:	009b      	lsls	r3, r3, #2
 8000d2e:	220f      	movs	r2, #15
 8000d30:	fa02 f303 	lsl.w	r3, r2, r3
 8000d34:	43db      	mvns	r3, r3
 8000d36:	69ba      	ldr	r2, [r7, #24]
 8000d38:	4013      	ands	r3, r2
 8000d3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	691a      	ldr	r2, [r3, #16]
 8000d40:	69fb      	ldr	r3, [r7, #28]
 8000d42:	f003 0307 	and.w	r3, r3, #7
 8000d46:	009b      	lsls	r3, r3, #2
 8000d48:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4c:	69ba      	ldr	r2, [r7, #24]
 8000d4e:	4313      	orrs	r3, r2
 8000d50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d52:	69fb      	ldr	r3, [r7, #28]
 8000d54:	08da      	lsrs	r2, r3, #3
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	3208      	adds	r2, #8
 8000d5a:	69b9      	ldr	r1, [r7, #24]
 8000d5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d66:	69fb      	ldr	r3, [r7, #28]
 8000d68:	005b      	lsls	r3, r3, #1
 8000d6a:	2203      	movs	r2, #3
 8000d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d70:	43db      	mvns	r3, r3
 8000d72:	69ba      	ldr	r2, [r7, #24]
 8000d74:	4013      	ands	r3, r2
 8000d76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	f003 0203 	and.w	r2, r3, #3
 8000d80:	69fb      	ldr	r3, [r7, #28]
 8000d82:	005b      	lsls	r3, r3, #1
 8000d84:	fa02 f303 	lsl.w	r3, r2, r3
 8000d88:	69ba      	ldr	r2, [r7, #24]
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	69ba      	ldr	r2, [r7, #24]
 8000d92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	f000 80ae 	beq.w	8000efe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000da2:	2300      	movs	r3, #0
 8000da4:	60fb      	str	r3, [r7, #12]
 8000da6:	4b5d      	ldr	r3, [pc, #372]	@ (8000f1c <HAL_GPIO_Init+0x300>)
 8000da8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000daa:	4a5c      	ldr	r2, [pc, #368]	@ (8000f1c <HAL_GPIO_Init+0x300>)
 8000dac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000db0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000db2:	4b5a      	ldr	r3, [pc, #360]	@ (8000f1c <HAL_GPIO_Init+0x300>)
 8000db4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000db6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000dba:	60fb      	str	r3, [r7, #12]
 8000dbc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000dbe:	4a58      	ldr	r2, [pc, #352]	@ (8000f20 <HAL_GPIO_Init+0x304>)
 8000dc0:	69fb      	ldr	r3, [r7, #28]
 8000dc2:	089b      	lsrs	r3, r3, #2
 8000dc4:	3302      	adds	r3, #2
 8000dc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000dcc:	69fb      	ldr	r3, [r7, #28]
 8000dce:	f003 0303 	and.w	r3, r3, #3
 8000dd2:	009b      	lsls	r3, r3, #2
 8000dd4:	220f      	movs	r2, #15
 8000dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dda:	43db      	mvns	r3, r3
 8000ddc:	69ba      	ldr	r2, [r7, #24]
 8000dde:	4013      	ands	r3, r2
 8000de0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4a4f      	ldr	r2, [pc, #316]	@ (8000f24 <HAL_GPIO_Init+0x308>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d025      	beq.n	8000e36 <HAL_GPIO_Init+0x21a>
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	4a4e      	ldr	r2, [pc, #312]	@ (8000f28 <HAL_GPIO_Init+0x30c>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d01f      	beq.n	8000e32 <HAL_GPIO_Init+0x216>
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	4a4d      	ldr	r2, [pc, #308]	@ (8000f2c <HAL_GPIO_Init+0x310>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d019      	beq.n	8000e2e <HAL_GPIO_Init+0x212>
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	4a4c      	ldr	r2, [pc, #304]	@ (8000f30 <HAL_GPIO_Init+0x314>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d013      	beq.n	8000e2a <HAL_GPIO_Init+0x20e>
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	4a4b      	ldr	r2, [pc, #300]	@ (8000f34 <HAL_GPIO_Init+0x318>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d00d      	beq.n	8000e26 <HAL_GPIO_Init+0x20a>
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	4a4a      	ldr	r2, [pc, #296]	@ (8000f38 <HAL_GPIO_Init+0x31c>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d007      	beq.n	8000e22 <HAL_GPIO_Init+0x206>
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4a49      	ldr	r2, [pc, #292]	@ (8000f3c <HAL_GPIO_Init+0x320>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d101      	bne.n	8000e1e <HAL_GPIO_Init+0x202>
 8000e1a:	2306      	movs	r3, #6
 8000e1c:	e00c      	b.n	8000e38 <HAL_GPIO_Init+0x21c>
 8000e1e:	2307      	movs	r3, #7
 8000e20:	e00a      	b.n	8000e38 <HAL_GPIO_Init+0x21c>
 8000e22:	2305      	movs	r3, #5
 8000e24:	e008      	b.n	8000e38 <HAL_GPIO_Init+0x21c>
 8000e26:	2304      	movs	r3, #4
 8000e28:	e006      	b.n	8000e38 <HAL_GPIO_Init+0x21c>
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	e004      	b.n	8000e38 <HAL_GPIO_Init+0x21c>
 8000e2e:	2302      	movs	r3, #2
 8000e30:	e002      	b.n	8000e38 <HAL_GPIO_Init+0x21c>
 8000e32:	2301      	movs	r3, #1
 8000e34:	e000      	b.n	8000e38 <HAL_GPIO_Init+0x21c>
 8000e36:	2300      	movs	r3, #0
 8000e38:	69fa      	ldr	r2, [r7, #28]
 8000e3a:	f002 0203 	and.w	r2, r2, #3
 8000e3e:	0092      	lsls	r2, r2, #2
 8000e40:	4093      	lsls	r3, r2
 8000e42:	69ba      	ldr	r2, [r7, #24]
 8000e44:	4313      	orrs	r3, r2
 8000e46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e48:	4935      	ldr	r1, [pc, #212]	@ (8000f20 <HAL_GPIO_Init+0x304>)
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	089b      	lsrs	r3, r3, #2
 8000e4e:	3302      	adds	r3, #2
 8000e50:	69ba      	ldr	r2, [r7, #24]
 8000e52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e56:	4b3a      	ldr	r3, [pc, #232]	@ (8000f40 <HAL_GPIO_Init+0x324>)
 8000e58:	689b      	ldr	r3, [r3, #8]
 8000e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e5c:	693b      	ldr	r3, [r7, #16]
 8000e5e:	43db      	mvns	r3, r3
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	4013      	ands	r3, r2
 8000e64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d003      	beq.n	8000e7a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000e72:	69ba      	ldr	r2, [r7, #24]
 8000e74:	693b      	ldr	r3, [r7, #16]
 8000e76:	4313      	orrs	r3, r2
 8000e78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e7a:	4a31      	ldr	r2, [pc, #196]	@ (8000f40 <HAL_GPIO_Init+0x324>)
 8000e7c:	69bb      	ldr	r3, [r7, #24]
 8000e7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e80:	4b2f      	ldr	r3, [pc, #188]	@ (8000f40 <HAL_GPIO_Init+0x324>)
 8000e82:	68db      	ldr	r3, [r3, #12]
 8000e84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e86:	693b      	ldr	r3, [r7, #16]
 8000e88:	43db      	mvns	r3, r3
 8000e8a:	69ba      	ldr	r2, [r7, #24]
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d003      	beq.n	8000ea4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000e9c:	69ba      	ldr	r2, [r7, #24]
 8000e9e:	693b      	ldr	r3, [r7, #16]
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ea4:	4a26      	ldr	r2, [pc, #152]	@ (8000f40 <HAL_GPIO_Init+0x324>)
 8000ea6:	69bb      	ldr	r3, [r7, #24]
 8000ea8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000eaa:	4b25      	ldr	r3, [pc, #148]	@ (8000f40 <HAL_GPIO_Init+0x324>)
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eb0:	693b      	ldr	r3, [r7, #16]
 8000eb2:	43db      	mvns	r3, r3
 8000eb4:	69ba      	ldr	r2, [r7, #24]
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d003      	beq.n	8000ece <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000ec6:	69ba      	ldr	r2, [r7, #24]
 8000ec8:	693b      	ldr	r3, [r7, #16]
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ece:	4a1c      	ldr	r2, [pc, #112]	@ (8000f40 <HAL_GPIO_Init+0x324>)
 8000ed0:	69bb      	ldr	r3, [r7, #24]
 8000ed2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ed4:	4b1a      	ldr	r3, [pc, #104]	@ (8000f40 <HAL_GPIO_Init+0x324>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eda:	693b      	ldr	r3, [r7, #16]
 8000edc:	43db      	mvns	r3, r3
 8000ede:	69ba      	ldr	r2, [r7, #24]
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d003      	beq.n	8000ef8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000ef0:	69ba      	ldr	r2, [r7, #24]
 8000ef2:	693b      	ldr	r3, [r7, #16]
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ef8:	4a11      	ldr	r2, [pc, #68]	@ (8000f40 <HAL_GPIO_Init+0x324>)
 8000efa:	69bb      	ldr	r3, [r7, #24]
 8000efc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	3301      	adds	r3, #1
 8000f02:	61fb      	str	r3, [r7, #28]
 8000f04:	69fb      	ldr	r3, [r7, #28]
 8000f06:	2b0f      	cmp	r3, #15
 8000f08:	f67f ae96 	bls.w	8000c38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f0c:	bf00      	nop
 8000f0e:	bf00      	nop
 8000f10:	3724      	adds	r7, #36	@ 0x24
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	40023800 	.word	0x40023800
 8000f20:	40013800 	.word	0x40013800
 8000f24:	40020000 	.word	0x40020000
 8000f28:	40020400 	.word	0x40020400
 8000f2c:	40020800 	.word	0x40020800
 8000f30:	40020c00 	.word	0x40020c00
 8000f34:	40021000 	.word	0x40021000
 8000f38:	40021400 	.word	0x40021400
 8000f3c:	40021800 	.word	0x40021800
 8000f40:	40013c00 	.word	0x40013c00

08000f44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	807b      	strh	r3, [r7, #2]
 8000f50:	4613      	mov	r3, r2
 8000f52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f54:	787b      	ldrb	r3, [r7, #1]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d003      	beq.n	8000f62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f5a:	887a      	ldrh	r2, [r7, #2]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f60:	e003      	b.n	8000f6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f62:	887b      	ldrh	r3, [r7, #2]
 8000f64:	041a      	lsls	r2, r3, #16
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	619a      	str	r2, [r3, #24]
}
 8000f6a:	bf00      	nop
 8000f6c:	370c      	adds	r7, #12
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
	...

08000f78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
 8000f80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d101      	bne.n	8000f8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	e0cc      	b.n	8001126 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000f8c:	4b68      	ldr	r3, [pc, #416]	@ (8001130 <HAL_RCC_ClockConfig+0x1b8>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f003 030f 	and.w	r3, r3, #15
 8000f94:	683a      	ldr	r2, [r7, #0]
 8000f96:	429a      	cmp	r2, r3
 8000f98:	d90c      	bls.n	8000fb4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f9a:	4b65      	ldr	r3, [pc, #404]	@ (8001130 <HAL_RCC_ClockConfig+0x1b8>)
 8000f9c:	683a      	ldr	r2, [r7, #0]
 8000f9e:	b2d2      	uxtb	r2, r2
 8000fa0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000fa2:	4b63      	ldr	r3, [pc, #396]	@ (8001130 <HAL_RCC_ClockConfig+0x1b8>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f003 030f 	and.w	r3, r3, #15
 8000faa:	683a      	ldr	r2, [r7, #0]
 8000fac:	429a      	cmp	r2, r3
 8000fae:	d001      	beq.n	8000fb4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	e0b8      	b.n	8001126 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f003 0302 	and.w	r3, r3, #2
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d020      	beq.n	8001002 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f003 0304 	and.w	r3, r3, #4
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d005      	beq.n	8000fd8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000fcc:	4b59      	ldr	r3, [pc, #356]	@ (8001134 <HAL_RCC_ClockConfig+0x1bc>)
 8000fce:	689b      	ldr	r3, [r3, #8]
 8000fd0:	4a58      	ldr	r2, [pc, #352]	@ (8001134 <HAL_RCC_ClockConfig+0x1bc>)
 8000fd2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8000fd6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f003 0308 	and.w	r3, r3, #8
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d005      	beq.n	8000ff0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000fe4:	4b53      	ldr	r3, [pc, #332]	@ (8001134 <HAL_RCC_ClockConfig+0x1bc>)
 8000fe6:	689b      	ldr	r3, [r3, #8]
 8000fe8:	4a52      	ldr	r2, [pc, #328]	@ (8001134 <HAL_RCC_ClockConfig+0x1bc>)
 8000fea:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8000fee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000ff0:	4b50      	ldr	r3, [pc, #320]	@ (8001134 <HAL_RCC_ClockConfig+0x1bc>)
 8000ff2:	689b      	ldr	r3, [r3, #8]
 8000ff4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	689b      	ldr	r3, [r3, #8]
 8000ffc:	494d      	ldr	r1, [pc, #308]	@ (8001134 <HAL_RCC_ClockConfig+0x1bc>)
 8000ffe:	4313      	orrs	r3, r2
 8001000:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f003 0301 	and.w	r3, r3, #1
 800100a:	2b00      	cmp	r3, #0
 800100c:	d044      	beq.n	8001098 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	2b01      	cmp	r3, #1
 8001014:	d107      	bne.n	8001026 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001016:	4b47      	ldr	r3, [pc, #284]	@ (8001134 <HAL_RCC_ClockConfig+0x1bc>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800101e:	2b00      	cmp	r3, #0
 8001020:	d119      	bne.n	8001056 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001022:	2301      	movs	r3, #1
 8001024:	e07f      	b.n	8001126 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	2b02      	cmp	r3, #2
 800102c:	d003      	beq.n	8001036 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001032:	2b03      	cmp	r3, #3
 8001034:	d107      	bne.n	8001046 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001036:	4b3f      	ldr	r3, [pc, #252]	@ (8001134 <HAL_RCC_ClockConfig+0x1bc>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800103e:	2b00      	cmp	r3, #0
 8001040:	d109      	bne.n	8001056 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001042:	2301      	movs	r3, #1
 8001044:	e06f      	b.n	8001126 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001046:	4b3b      	ldr	r3, [pc, #236]	@ (8001134 <HAL_RCC_ClockConfig+0x1bc>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f003 0302 	and.w	r3, r3, #2
 800104e:	2b00      	cmp	r3, #0
 8001050:	d101      	bne.n	8001056 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001052:	2301      	movs	r3, #1
 8001054:	e067      	b.n	8001126 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001056:	4b37      	ldr	r3, [pc, #220]	@ (8001134 <HAL_RCC_ClockConfig+0x1bc>)
 8001058:	689b      	ldr	r3, [r3, #8]
 800105a:	f023 0203 	bic.w	r2, r3, #3
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	4934      	ldr	r1, [pc, #208]	@ (8001134 <HAL_RCC_ClockConfig+0x1bc>)
 8001064:	4313      	orrs	r3, r2
 8001066:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001068:	f7ff fcea 	bl	8000a40 <HAL_GetTick>
 800106c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800106e:	e00a      	b.n	8001086 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001070:	f7ff fce6 	bl	8000a40 <HAL_GetTick>
 8001074:	4602      	mov	r2, r0
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	1ad3      	subs	r3, r2, r3
 800107a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800107e:	4293      	cmp	r3, r2
 8001080:	d901      	bls.n	8001086 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001082:	2303      	movs	r3, #3
 8001084:	e04f      	b.n	8001126 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001086:	4b2b      	ldr	r3, [pc, #172]	@ (8001134 <HAL_RCC_ClockConfig+0x1bc>)
 8001088:	689b      	ldr	r3, [r3, #8]
 800108a:	f003 020c 	and.w	r2, r3, #12
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	429a      	cmp	r2, r3
 8001096:	d1eb      	bne.n	8001070 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001098:	4b25      	ldr	r3, [pc, #148]	@ (8001130 <HAL_RCC_ClockConfig+0x1b8>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f003 030f 	and.w	r3, r3, #15
 80010a0:	683a      	ldr	r2, [r7, #0]
 80010a2:	429a      	cmp	r2, r3
 80010a4:	d20c      	bcs.n	80010c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010a6:	4b22      	ldr	r3, [pc, #136]	@ (8001130 <HAL_RCC_ClockConfig+0x1b8>)
 80010a8:	683a      	ldr	r2, [r7, #0]
 80010aa:	b2d2      	uxtb	r2, r2
 80010ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80010ae:	4b20      	ldr	r3, [pc, #128]	@ (8001130 <HAL_RCC_ClockConfig+0x1b8>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f003 030f 	and.w	r3, r3, #15
 80010b6:	683a      	ldr	r2, [r7, #0]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	d001      	beq.n	80010c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80010bc:	2301      	movs	r3, #1
 80010be:	e032      	b.n	8001126 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f003 0304 	and.w	r3, r3, #4
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d008      	beq.n	80010de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80010cc:	4b19      	ldr	r3, [pc, #100]	@ (8001134 <HAL_RCC_ClockConfig+0x1bc>)
 80010ce:	689b      	ldr	r3, [r3, #8]
 80010d0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	4916      	ldr	r1, [pc, #88]	@ (8001134 <HAL_RCC_ClockConfig+0x1bc>)
 80010da:	4313      	orrs	r3, r2
 80010dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f003 0308 	and.w	r3, r3, #8
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d009      	beq.n	80010fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80010ea:	4b12      	ldr	r3, [pc, #72]	@ (8001134 <HAL_RCC_ClockConfig+0x1bc>)
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	691b      	ldr	r3, [r3, #16]
 80010f6:	00db      	lsls	r3, r3, #3
 80010f8:	490e      	ldr	r1, [pc, #56]	@ (8001134 <HAL_RCC_ClockConfig+0x1bc>)
 80010fa:	4313      	orrs	r3, r2
 80010fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80010fe:	f000 f873 	bl	80011e8 <HAL_RCC_GetSysClockFreq>
 8001102:	4602      	mov	r2, r0
 8001104:	4b0b      	ldr	r3, [pc, #44]	@ (8001134 <HAL_RCC_ClockConfig+0x1bc>)
 8001106:	689b      	ldr	r3, [r3, #8]
 8001108:	091b      	lsrs	r3, r3, #4
 800110a:	f003 030f 	and.w	r3, r3, #15
 800110e:	490a      	ldr	r1, [pc, #40]	@ (8001138 <HAL_RCC_ClockConfig+0x1c0>)
 8001110:	5ccb      	ldrb	r3, [r1, r3]
 8001112:	fa22 f303 	lsr.w	r3, r2, r3
 8001116:	4a09      	ldr	r2, [pc, #36]	@ (800113c <HAL_RCC_ClockConfig+0x1c4>)
 8001118:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800111a:	4b09      	ldr	r3, [pc, #36]	@ (8001140 <HAL_RCC_ClockConfig+0x1c8>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4618      	mov	r0, r3
 8001120:	f7ff fb7a 	bl	8000818 <HAL_InitTick>

  return HAL_OK;
 8001124:	2300      	movs	r3, #0
}
 8001126:	4618      	mov	r0, r3
 8001128:	3710      	adds	r7, #16
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	40023c00 	.word	0x40023c00
 8001134:	40023800 	.word	0x40023800
 8001138:	0800305c 	.word	0x0800305c
 800113c:	20000000 	.word	0x20000000
 8001140:	20000004 	.word	0x20000004

08001144 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001148:	4b03      	ldr	r3, [pc, #12]	@ (8001158 <HAL_RCC_GetHCLKFreq+0x14>)
 800114a:	681b      	ldr	r3, [r3, #0]
}
 800114c:	4618      	mov	r0, r3
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	20000000 	.word	0x20000000

0800115c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001160:	f7ff fff0 	bl	8001144 <HAL_RCC_GetHCLKFreq>
 8001164:	4602      	mov	r2, r0
 8001166:	4b05      	ldr	r3, [pc, #20]	@ (800117c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001168:	689b      	ldr	r3, [r3, #8]
 800116a:	0a9b      	lsrs	r3, r3, #10
 800116c:	f003 0307 	and.w	r3, r3, #7
 8001170:	4903      	ldr	r1, [pc, #12]	@ (8001180 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001172:	5ccb      	ldrb	r3, [r1, r3]
 8001174:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001178:	4618      	mov	r0, r3
 800117a:	bd80      	pop	{r7, pc}
 800117c:	40023800 	.word	0x40023800
 8001180:	0800306c 	.word	0x0800306c

08001184 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
 800118c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	220f      	movs	r2, #15
 8001192:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001194:	4b12      	ldr	r3, [pc, #72]	@ (80011e0 <HAL_RCC_GetClockConfig+0x5c>)
 8001196:	689b      	ldr	r3, [r3, #8]
 8001198:	f003 0203 	and.w	r2, r3, #3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80011a0:	4b0f      	ldr	r3, [pc, #60]	@ (80011e0 <HAL_RCC_GetClockConfig+0x5c>)
 80011a2:	689b      	ldr	r3, [r3, #8]
 80011a4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80011ac:	4b0c      	ldr	r3, [pc, #48]	@ (80011e0 <HAL_RCC_GetClockConfig+0x5c>)
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80011b8:	4b09      	ldr	r3, [pc, #36]	@ (80011e0 <HAL_RCC_GetClockConfig+0x5c>)
 80011ba:	689b      	ldr	r3, [r3, #8]
 80011bc:	08db      	lsrs	r3, r3, #3
 80011be:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80011c6:	4b07      	ldr	r3, [pc, #28]	@ (80011e4 <HAL_RCC_GetClockConfig+0x60>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f003 020f 	and.w	r2, r3, #15
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	601a      	str	r2, [r3, #0]
}
 80011d2:	bf00      	nop
 80011d4:	370c      	adds	r7, #12
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	40023800 	.word	0x40023800
 80011e4:	40023c00 	.word	0x40023c00

080011e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80011e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80011ec:	b0ae      	sub	sp, #184	@ 0xb8
 80011ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80011f0:	2300      	movs	r3, #0
 80011f2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80011f6:	2300      	movs	r3, #0
 80011f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80011fc:	2300      	movs	r3, #0
 80011fe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8001202:	2300      	movs	r3, #0
 8001204:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001208:	2300      	movs	r3, #0
 800120a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800120e:	4bcb      	ldr	r3, [pc, #812]	@ (800153c <HAL_RCC_GetSysClockFreq+0x354>)
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	f003 030c 	and.w	r3, r3, #12
 8001216:	2b0c      	cmp	r3, #12
 8001218:	f200 8206 	bhi.w	8001628 <HAL_RCC_GetSysClockFreq+0x440>
 800121c:	a201      	add	r2, pc, #4	@ (adr r2, 8001224 <HAL_RCC_GetSysClockFreq+0x3c>)
 800121e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001222:	bf00      	nop
 8001224:	08001259 	.word	0x08001259
 8001228:	08001629 	.word	0x08001629
 800122c:	08001629 	.word	0x08001629
 8001230:	08001629 	.word	0x08001629
 8001234:	08001261 	.word	0x08001261
 8001238:	08001629 	.word	0x08001629
 800123c:	08001629 	.word	0x08001629
 8001240:	08001629 	.word	0x08001629
 8001244:	08001269 	.word	0x08001269
 8001248:	08001629 	.word	0x08001629
 800124c:	08001629 	.word	0x08001629
 8001250:	08001629 	.word	0x08001629
 8001254:	08001459 	.word	0x08001459
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001258:	4bb9      	ldr	r3, [pc, #740]	@ (8001540 <HAL_RCC_GetSysClockFreq+0x358>)
 800125a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 800125e:	e1e7      	b.n	8001630 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001260:	4bb8      	ldr	r3, [pc, #736]	@ (8001544 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001262:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001266:	e1e3      	b.n	8001630 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001268:	4bb4      	ldr	r3, [pc, #720]	@ (800153c <HAL_RCC_GetSysClockFreq+0x354>)
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001270:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001274:	4bb1      	ldr	r3, [pc, #708]	@ (800153c <HAL_RCC_GetSysClockFreq+0x354>)
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800127c:	2b00      	cmp	r3, #0
 800127e:	d071      	beq.n	8001364 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001280:	4bae      	ldr	r3, [pc, #696]	@ (800153c <HAL_RCC_GetSysClockFreq+0x354>)
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	099b      	lsrs	r3, r3, #6
 8001286:	2200      	movs	r2, #0
 8001288:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800128c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001290:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001294:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001298:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800129c:	2300      	movs	r3, #0
 800129e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80012a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80012a6:	4622      	mov	r2, r4
 80012a8:	462b      	mov	r3, r5
 80012aa:	f04f 0000 	mov.w	r0, #0
 80012ae:	f04f 0100 	mov.w	r1, #0
 80012b2:	0159      	lsls	r1, r3, #5
 80012b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80012b8:	0150      	lsls	r0, r2, #5
 80012ba:	4602      	mov	r2, r0
 80012bc:	460b      	mov	r3, r1
 80012be:	4621      	mov	r1, r4
 80012c0:	1a51      	subs	r1, r2, r1
 80012c2:	6439      	str	r1, [r7, #64]	@ 0x40
 80012c4:	4629      	mov	r1, r5
 80012c6:	eb63 0301 	sbc.w	r3, r3, r1
 80012ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80012cc:	f04f 0200 	mov.w	r2, #0
 80012d0:	f04f 0300 	mov.w	r3, #0
 80012d4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80012d8:	4649      	mov	r1, r9
 80012da:	018b      	lsls	r3, r1, #6
 80012dc:	4641      	mov	r1, r8
 80012de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80012e2:	4641      	mov	r1, r8
 80012e4:	018a      	lsls	r2, r1, #6
 80012e6:	4641      	mov	r1, r8
 80012e8:	1a51      	subs	r1, r2, r1
 80012ea:	63b9      	str	r1, [r7, #56]	@ 0x38
 80012ec:	4649      	mov	r1, r9
 80012ee:	eb63 0301 	sbc.w	r3, r3, r1
 80012f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80012f4:	f04f 0200 	mov.w	r2, #0
 80012f8:	f04f 0300 	mov.w	r3, #0
 80012fc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001300:	4649      	mov	r1, r9
 8001302:	00cb      	lsls	r3, r1, #3
 8001304:	4641      	mov	r1, r8
 8001306:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800130a:	4641      	mov	r1, r8
 800130c:	00ca      	lsls	r2, r1, #3
 800130e:	4610      	mov	r0, r2
 8001310:	4619      	mov	r1, r3
 8001312:	4603      	mov	r3, r0
 8001314:	4622      	mov	r2, r4
 8001316:	189b      	adds	r3, r3, r2
 8001318:	633b      	str	r3, [r7, #48]	@ 0x30
 800131a:	462b      	mov	r3, r5
 800131c:	460a      	mov	r2, r1
 800131e:	eb42 0303 	adc.w	r3, r2, r3
 8001322:	637b      	str	r3, [r7, #52]	@ 0x34
 8001324:	f04f 0200 	mov.w	r2, #0
 8001328:	f04f 0300 	mov.w	r3, #0
 800132c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001330:	4629      	mov	r1, r5
 8001332:	024b      	lsls	r3, r1, #9
 8001334:	4621      	mov	r1, r4
 8001336:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800133a:	4621      	mov	r1, r4
 800133c:	024a      	lsls	r2, r1, #9
 800133e:	4610      	mov	r0, r2
 8001340:	4619      	mov	r1, r3
 8001342:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001346:	2200      	movs	r2, #0
 8001348:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800134c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001350:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001354:	f7fe ff5c 	bl	8000210 <__aeabi_uldivmod>
 8001358:	4602      	mov	r2, r0
 800135a:	460b      	mov	r3, r1
 800135c:	4613      	mov	r3, r2
 800135e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001362:	e067      	b.n	8001434 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001364:	4b75      	ldr	r3, [pc, #468]	@ (800153c <HAL_RCC_GetSysClockFreq+0x354>)
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	099b      	lsrs	r3, r3, #6
 800136a:	2200      	movs	r2, #0
 800136c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001370:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001374:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001378:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800137c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800137e:	2300      	movs	r3, #0
 8001380:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001382:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001386:	4622      	mov	r2, r4
 8001388:	462b      	mov	r3, r5
 800138a:	f04f 0000 	mov.w	r0, #0
 800138e:	f04f 0100 	mov.w	r1, #0
 8001392:	0159      	lsls	r1, r3, #5
 8001394:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001398:	0150      	lsls	r0, r2, #5
 800139a:	4602      	mov	r2, r0
 800139c:	460b      	mov	r3, r1
 800139e:	4621      	mov	r1, r4
 80013a0:	1a51      	subs	r1, r2, r1
 80013a2:	62b9      	str	r1, [r7, #40]	@ 0x28
 80013a4:	4629      	mov	r1, r5
 80013a6:	eb63 0301 	sbc.w	r3, r3, r1
 80013aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80013ac:	f04f 0200 	mov.w	r2, #0
 80013b0:	f04f 0300 	mov.w	r3, #0
 80013b4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80013b8:	4649      	mov	r1, r9
 80013ba:	018b      	lsls	r3, r1, #6
 80013bc:	4641      	mov	r1, r8
 80013be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80013c2:	4641      	mov	r1, r8
 80013c4:	018a      	lsls	r2, r1, #6
 80013c6:	4641      	mov	r1, r8
 80013c8:	ebb2 0a01 	subs.w	sl, r2, r1
 80013cc:	4649      	mov	r1, r9
 80013ce:	eb63 0b01 	sbc.w	fp, r3, r1
 80013d2:	f04f 0200 	mov.w	r2, #0
 80013d6:	f04f 0300 	mov.w	r3, #0
 80013da:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80013de:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80013e2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80013e6:	4692      	mov	sl, r2
 80013e8:	469b      	mov	fp, r3
 80013ea:	4623      	mov	r3, r4
 80013ec:	eb1a 0303 	adds.w	r3, sl, r3
 80013f0:	623b      	str	r3, [r7, #32]
 80013f2:	462b      	mov	r3, r5
 80013f4:	eb4b 0303 	adc.w	r3, fp, r3
 80013f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80013fa:	f04f 0200 	mov.w	r2, #0
 80013fe:	f04f 0300 	mov.w	r3, #0
 8001402:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001406:	4629      	mov	r1, r5
 8001408:	028b      	lsls	r3, r1, #10
 800140a:	4621      	mov	r1, r4
 800140c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001410:	4621      	mov	r1, r4
 8001412:	028a      	lsls	r2, r1, #10
 8001414:	4610      	mov	r0, r2
 8001416:	4619      	mov	r1, r3
 8001418:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800141c:	2200      	movs	r2, #0
 800141e:	673b      	str	r3, [r7, #112]	@ 0x70
 8001420:	677a      	str	r2, [r7, #116]	@ 0x74
 8001422:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001426:	f7fe fef3 	bl	8000210 <__aeabi_uldivmod>
 800142a:	4602      	mov	r2, r0
 800142c:	460b      	mov	r3, r1
 800142e:	4613      	mov	r3, r2
 8001430:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001434:	4b41      	ldr	r3, [pc, #260]	@ (800153c <HAL_RCC_GetSysClockFreq+0x354>)
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	0c1b      	lsrs	r3, r3, #16
 800143a:	f003 0303 	and.w	r3, r3, #3
 800143e:	3301      	adds	r3, #1
 8001440:	005b      	lsls	r3, r3, #1
 8001442:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8001446:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800144a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800144e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001452:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001456:	e0eb      	b.n	8001630 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001458:	4b38      	ldr	r3, [pc, #224]	@ (800153c <HAL_RCC_GetSysClockFreq+0x354>)
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001460:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001464:	4b35      	ldr	r3, [pc, #212]	@ (800153c <HAL_RCC_GetSysClockFreq+0x354>)
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800146c:	2b00      	cmp	r3, #0
 800146e:	d06b      	beq.n	8001548 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001470:	4b32      	ldr	r3, [pc, #200]	@ (800153c <HAL_RCC_GetSysClockFreq+0x354>)
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	099b      	lsrs	r3, r3, #6
 8001476:	2200      	movs	r2, #0
 8001478:	66bb      	str	r3, [r7, #104]	@ 0x68
 800147a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800147c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800147e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001482:	663b      	str	r3, [r7, #96]	@ 0x60
 8001484:	2300      	movs	r3, #0
 8001486:	667b      	str	r3, [r7, #100]	@ 0x64
 8001488:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800148c:	4622      	mov	r2, r4
 800148e:	462b      	mov	r3, r5
 8001490:	f04f 0000 	mov.w	r0, #0
 8001494:	f04f 0100 	mov.w	r1, #0
 8001498:	0159      	lsls	r1, r3, #5
 800149a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800149e:	0150      	lsls	r0, r2, #5
 80014a0:	4602      	mov	r2, r0
 80014a2:	460b      	mov	r3, r1
 80014a4:	4621      	mov	r1, r4
 80014a6:	1a51      	subs	r1, r2, r1
 80014a8:	61b9      	str	r1, [r7, #24]
 80014aa:	4629      	mov	r1, r5
 80014ac:	eb63 0301 	sbc.w	r3, r3, r1
 80014b0:	61fb      	str	r3, [r7, #28]
 80014b2:	f04f 0200 	mov.w	r2, #0
 80014b6:	f04f 0300 	mov.w	r3, #0
 80014ba:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80014be:	4659      	mov	r1, fp
 80014c0:	018b      	lsls	r3, r1, #6
 80014c2:	4651      	mov	r1, sl
 80014c4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80014c8:	4651      	mov	r1, sl
 80014ca:	018a      	lsls	r2, r1, #6
 80014cc:	4651      	mov	r1, sl
 80014ce:	ebb2 0801 	subs.w	r8, r2, r1
 80014d2:	4659      	mov	r1, fp
 80014d4:	eb63 0901 	sbc.w	r9, r3, r1
 80014d8:	f04f 0200 	mov.w	r2, #0
 80014dc:	f04f 0300 	mov.w	r3, #0
 80014e0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80014e4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80014e8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80014ec:	4690      	mov	r8, r2
 80014ee:	4699      	mov	r9, r3
 80014f0:	4623      	mov	r3, r4
 80014f2:	eb18 0303 	adds.w	r3, r8, r3
 80014f6:	613b      	str	r3, [r7, #16]
 80014f8:	462b      	mov	r3, r5
 80014fa:	eb49 0303 	adc.w	r3, r9, r3
 80014fe:	617b      	str	r3, [r7, #20]
 8001500:	f04f 0200 	mov.w	r2, #0
 8001504:	f04f 0300 	mov.w	r3, #0
 8001508:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800150c:	4629      	mov	r1, r5
 800150e:	024b      	lsls	r3, r1, #9
 8001510:	4621      	mov	r1, r4
 8001512:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001516:	4621      	mov	r1, r4
 8001518:	024a      	lsls	r2, r1, #9
 800151a:	4610      	mov	r0, r2
 800151c:	4619      	mov	r1, r3
 800151e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001522:	2200      	movs	r2, #0
 8001524:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001526:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001528:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800152c:	f7fe fe70 	bl	8000210 <__aeabi_uldivmod>
 8001530:	4602      	mov	r2, r0
 8001532:	460b      	mov	r3, r1
 8001534:	4613      	mov	r3, r2
 8001536:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800153a:	e065      	b.n	8001608 <HAL_RCC_GetSysClockFreq+0x420>
 800153c:	40023800 	.word	0x40023800
 8001540:	00f42400 	.word	0x00f42400
 8001544:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001548:	4b3d      	ldr	r3, [pc, #244]	@ (8001640 <HAL_RCC_GetSysClockFreq+0x458>)
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	099b      	lsrs	r3, r3, #6
 800154e:	2200      	movs	r2, #0
 8001550:	4618      	mov	r0, r3
 8001552:	4611      	mov	r1, r2
 8001554:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001558:	653b      	str	r3, [r7, #80]	@ 0x50
 800155a:	2300      	movs	r3, #0
 800155c:	657b      	str	r3, [r7, #84]	@ 0x54
 800155e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8001562:	4642      	mov	r2, r8
 8001564:	464b      	mov	r3, r9
 8001566:	f04f 0000 	mov.w	r0, #0
 800156a:	f04f 0100 	mov.w	r1, #0
 800156e:	0159      	lsls	r1, r3, #5
 8001570:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001574:	0150      	lsls	r0, r2, #5
 8001576:	4602      	mov	r2, r0
 8001578:	460b      	mov	r3, r1
 800157a:	4641      	mov	r1, r8
 800157c:	1a51      	subs	r1, r2, r1
 800157e:	60b9      	str	r1, [r7, #8]
 8001580:	4649      	mov	r1, r9
 8001582:	eb63 0301 	sbc.w	r3, r3, r1
 8001586:	60fb      	str	r3, [r7, #12]
 8001588:	f04f 0200 	mov.w	r2, #0
 800158c:	f04f 0300 	mov.w	r3, #0
 8001590:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001594:	4659      	mov	r1, fp
 8001596:	018b      	lsls	r3, r1, #6
 8001598:	4651      	mov	r1, sl
 800159a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800159e:	4651      	mov	r1, sl
 80015a0:	018a      	lsls	r2, r1, #6
 80015a2:	4651      	mov	r1, sl
 80015a4:	1a54      	subs	r4, r2, r1
 80015a6:	4659      	mov	r1, fp
 80015a8:	eb63 0501 	sbc.w	r5, r3, r1
 80015ac:	f04f 0200 	mov.w	r2, #0
 80015b0:	f04f 0300 	mov.w	r3, #0
 80015b4:	00eb      	lsls	r3, r5, #3
 80015b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80015ba:	00e2      	lsls	r2, r4, #3
 80015bc:	4614      	mov	r4, r2
 80015be:	461d      	mov	r5, r3
 80015c0:	4643      	mov	r3, r8
 80015c2:	18e3      	adds	r3, r4, r3
 80015c4:	603b      	str	r3, [r7, #0]
 80015c6:	464b      	mov	r3, r9
 80015c8:	eb45 0303 	adc.w	r3, r5, r3
 80015cc:	607b      	str	r3, [r7, #4]
 80015ce:	f04f 0200 	mov.w	r2, #0
 80015d2:	f04f 0300 	mov.w	r3, #0
 80015d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80015da:	4629      	mov	r1, r5
 80015dc:	028b      	lsls	r3, r1, #10
 80015de:	4621      	mov	r1, r4
 80015e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80015e4:	4621      	mov	r1, r4
 80015e6:	028a      	lsls	r2, r1, #10
 80015e8:	4610      	mov	r0, r2
 80015ea:	4619      	mov	r1, r3
 80015ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80015f0:	2200      	movs	r2, #0
 80015f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80015f4:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80015f6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80015fa:	f7fe fe09 	bl	8000210 <__aeabi_uldivmod>
 80015fe:	4602      	mov	r2, r0
 8001600:	460b      	mov	r3, r1
 8001602:	4613      	mov	r3, r2
 8001604:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001608:	4b0d      	ldr	r3, [pc, #52]	@ (8001640 <HAL_RCC_GetSysClockFreq+0x458>)
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	0f1b      	lsrs	r3, r3, #28
 800160e:	f003 0307 	and.w	r3, r3, #7
 8001612:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8001616:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800161a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800161e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001622:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001626:	e003      	b.n	8001630 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001628:	4b06      	ldr	r3, [pc, #24]	@ (8001644 <HAL_RCC_GetSysClockFreq+0x45c>)
 800162a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800162e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001630:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8001634:	4618      	mov	r0, r3
 8001636:	37b8      	adds	r7, #184	@ 0xb8
 8001638:	46bd      	mov	sp, r7
 800163a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800163e:	bf00      	nop
 8001640:	40023800 	.word	0x40023800
 8001644:	00f42400 	.word	0x00f42400

08001648 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b086      	sub	sp, #24
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d101      	bne.n	800165a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e28d      	b.n	8001b76 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 0301 	and.w	r3, r3, #1
 8001662:	2b00      	cmp	r3, #0
 8001664:	f000 8083 	beq.w	800176e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001668:	4b94      	ldr	r3, [pc, #592]	@ (80018bc <HAL_RCC_OscConfig+0x274>)
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	f003 030c 	and.w	r3, r3, #12
 8001670:	2b04      	cmp	r3, #4
 8001672:	d019      	beq.n	80016a8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001674:	4b91      	ldr	r3, [pc, #580]	@ (80018bc <HAL_RCC_OscConfig+0x274>)
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800167c:	2b08      	cmp	r3, #8
 800167e:	d106      	bne.n	800168e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001680:	4b8e      	ldr	r3, [pc, #568]	@ (80018bc <HAL_RCC_OscConfig+0x274>)
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001688:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800168c:	d00c      	beq.n	80016a8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800168e:	4b8b      	ldr	r3, [pc, #556]	@ (80018bc <HAL_RCC_OscConfig+0x274>)
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001696:	2b0c      	cmp	r3, #12
 8001698:	d112      	bne.n	80016c0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800169a:	4b88      	ldr	r3, [pc, #544]	@ (80018bc <HAL_RCC_OscConfig+0x274>)
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80016a2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80016a6:	d10b      	bne.n	80016c0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016a8:	4b84      	ldr	r3, [pc, #528]	@ (80018bc <HAL_RCC_OscConfig+0x274>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d05b      	beq.n	800176c <HAL_RCC_OscConfig+0x124>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d157      	bne.n	800176c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80016bc:	2301      	movs	r3, #1
 80016be:	e25a      	b.n	8001b76 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016c8:	d106      	bne.n	80016d8 <HAL_RCC_OscConfig+0x90>
 80016ca:	4b7c      	ldr	r3, [pc, #496]	@ (80018bc <HAL_RCC_OscConfig+0x274>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a7b      	ldr	r2, [pc, #492]	@ (80018bc <HAL_RCC_OscConfig+0x274>)
 80016d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016d4:	6013      	str	r3, [r2, #0]
 80016d6:	e01d      	b.n	8001714 <HAL_RCC_OscConfig+0xcc>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80016e0:	d10c      	bne.n	80016fc <HAL_RCC_OscConfig+0xb4>
 80016e2:	4b76      	ldr	r3, [pc, #472]	@ (80018bc <HAL_RCC_OscConfig+0x274>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a75      	ldr	r2, [pc, #468]	@ (80018bc <HAL_RCC_OscConfig+0x274>)
 80016e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80016ec:	6013      	str	r3, [r2, #0]
 80016ee:	4b73      	ldr	r3, [pc, #460]	@ (80018bc <HAL_RCC_OscConfig+0x274>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a72      	ldr	r2, [pc, #456]	@ (80018bc <HAL_RCC_OscConfig+0x274>)
 80016f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016f8:	6013      	str	r3, [r2, #0]
 80016fa:	e00b      	b.n	8001714 <HAL_RCC_OscConfig+0xcc>
 80016fc:	4b6f      	ldr	r3, [pc, #444]	@ (80018bc <HAL_RCC_OscConfig+0x274>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a6e      	ldr	r2, [pc, #440]	@ (80018bc <HAL_RCC_OscConfig+0x274>)
 8001702:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001706:	6013      	str	r3, [r2, #0]
 8001708:	4b6c      	ldr	r3, [pc, #432]	@ (80018bc <HAL_RCC_OscConfig+0x274>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a6b      	ldr	r2, [pc, #428]	@ (80018bc <HAL_RCC_OscConfig+0x274>)
 800170e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001712:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d013      	beq.n	8001744 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800171c:	f7ff f990 	bl	8000a40 <HAL_GetTick>
 8001720:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001722:	e008      	b.n	8001736 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001724:	f7ff f98c 	bl	8000a40 <HAL_GetTick>
 8001728:	4602      	mov	r2, r0
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	2b64      	cmp	r3, #100	@ 0x64
 8001730:	d901      	bls.n	8001736 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001732:	2303      	movs	r3, #3
 8001734:	e21f      	b.n	8001b76 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001736:	4b61      	ldr	r3, [pc, #388]	@ (80018bc <HAL_RCC_OscConfig+0x274>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800173e:	2b00      	cmp	r3, #0
 8001740:	d0f0      	beq.n	8001724 <HAL_RCC_OscConfig+0xdc>
 8001742:	e014      	b.n	800176e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001744:	f7ff f97c 	bl	8000a40 <HAL_GetTick>
 8001748:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800174a:	e008      	b.n	800175e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800174c:	f7ff f978 	bl	8000a40 <HAL_GetTick>
 8001750:	4602      	mov	r2, r0
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	2b64      	cmp	r3, #100	@ 0x64
 8001758:	d901      	bls.n	800175e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800175a:	2303      	movs	r3, #3
 800175c:	e20b      	b.n	8001b76 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800175e:	4b57      	ldr	r3, [pc, #348]	@ (80018bc <HAL_RCC_OscConfig+0x274>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001766:	2b00      	cmp	r3, #0
 8001768:	d1f0      	bne.n	800174c <HAL_RCC_OscConfig+0x104>
 800176a:	e000      	b.n	800176e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800176c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 0302 	and.w	r3, r3, #2
 8001776:	2b00      	cmp	r3, #0
 8001778:	d06f      	beq.n	800185a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800177a:	4b50      	ldr	r3, [pc, #320]	@ (80018bc <HAL_RCC_OscConfig+0x274>)
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	f003 030c 	and.w	r3, r3, #12
 8001782:	2b00      	cmp	r3, #0
 8001784:	d017      	beq.n	80017b6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001786:	4b4d      	ldr	r3, [pc, #308]	@ (80018bc <HAL_RCC_OscConfig+0x274>)
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800178e:	2b08      	cmp	r3, #8
 8001790:	d105      	bne.n	800179e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001792:	4b4a      	ldr	r3, [pc, #296]	@ (80018bc <HAL_RCC_OscConfig+0x274>)
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d00b      	beq.n	80017b6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800179e:	4b47      	ldr	r3, [pc, #284]	@ (80018bc <HAL_RCC_OscConfig+0x274>)
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80017a6:	2b0c      	cmp	r3, #12
 80017a8:	d11c      	bne.n	80017e4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017aa:	4b44      	ldr	r3, [pc, #272]	@ (80018bc <HAL_RCC_OscConfig+0x274>)
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d116      	bne.n	80017e4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017b6:	4b41      	ldr	r3, [pc, #260]	@ (80018bc <HAL_RCC_OscConfig+0x274>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 0302 	and.w	r3, r3, #2
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d005      	beq.n	80017ce <HAL_RCC_OscConfig+0x186>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	68db      	ldr	r3, [r3, #12]
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d001      	beq.n	80017ce <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e1d3      	b.n	8001b76 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017ce:	4b3b      	ldr	r3, [pc, #236]	@ (80018bc <HAL_RCC_OscConfig+0x274>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	691b      	ldr	r3, [r3, #16]
 80017da:	00db      	lsls	r3, r3, #3
 80017dc:	4937      	ldr	r1, [pc, #220]	@ (80018bc <HAL_RCC_OscConfig+0x274>)
 80017de:	4313      	orrs	r3, r2
 80017e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017e2:	e03a      	b.n	800185a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d020      	beq.n	800182e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017ec:	4b34      	ldr	r3, [pc, #208]	@ (80018c0 <HAL_RCC_OscConfig+0x278>)
 80017ee:	2201      	movs	r2, #1
 80017f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017f2:	f7ff f925 	bl	8000a40 <HAL_GetTick>
 80017f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017f8:	e008      	b.n	800180c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017fa:	f7ff f921 	bl	8000a40 <HAL_GetTick>
 80017fe:	4602      	mov	r2, r0
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	1ad3      	subs	r3, r2, r3
 8001804:	2b02      	cmp	r3, #2
 8001806:	d901      	bls.n	800180c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001808:	2303      	movs	r3, #3
 800180a:	e1b4      	b.n	8001b76 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800180c:	4b2b      	ldr	r3, [pc, #172]	@ (80018bc <HAL_RCC_OscConfig+0x274>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f003 0302 	and.w	r3, r3, #2
 8001814:	2b00      	cmp	r3, #0
 8001816:	d0f0      	beq.n	80017fa <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001818:	4b28      	ldr	r3, [pc, #160]	@ (80018bc <HAL_RCC_OscConfig+0x274>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	691b      	ldr	r3, [r3, #16]
 8001824:	00db      	lsls	r3, r3, #3
 8001826:	4925      	ldr	r1, [pc, #148]	@ (80018bc <HAL_RCC_OscConfig+0x274>)
 8001828:	4313      	orrs	r3, r2
 800182a:	600b      	str	r3, [r1, #0]
 800182c:	e015      	b.n	800185a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800182e:	4b24      	ldr	r3, [pc, #144]	@ (80018c0 <HAL_RCC_OscConfig+0x278>)
 8001830:	2200      	movs	r2, #0
 8001832:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001834:	f7ff f904 	bl	8000a40 <HAL_GetTick>
 8001838:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800183a:	e008      	b.n	800184e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800183c:	f7ff f900 	bl	8000a40 <HAL_GetTick>
 8001840:	4602      	mov	r2, r0
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	2b02      	cmp	r3, #2
 8001848:	d901      	bls.n	800184e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800184a:	2303      	movs	r3, #3
 800184c:	e193      	b.n	8001b76 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800184e:	4b1b      	ldr	r3, [pc, #108]	@ (80018bc <HAL_RCC_OscConfig+0x274>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 0302 	and.w	r3, r3, #2
 8001856:	2b00      	cmp	r3, #0
 8001858:	d1f0      	bne.n	800183c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 0308 	and.w	r3, r3, #8
 8001862:	2b00      	cmp	r3, #0
 8001864:	d036      	beq.n	80018d4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	695b      	ldr	r3, [r3, #20]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d016      	beq.n	800189c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800186e:	4b15      	ldr	r3, [pc, #84]	@ (80018c4 <HAL_RCC_OscConfig+0x27c>)
 8001870:	2201      	movs	r2, #1
 8001872:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001874:	f7ff f8e4 	bl	8000a40 <HAL_GetTick>
 8001878:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800187a:	e008      	b.n	800188e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800187c:	f7ff f8e0 	bl	8000a40 <HAL_GetTick>
 8001880:	4602      	mov	r2, r0
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	2b02      	cmp	r3, #2
 8001888:	d901      	bls.n	800188e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800188a:	2303      	movs	r3, #3
 800188c:	e173      	b.n	8001b76 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800188e:	4b0b      	ldr	r3, [pc, #44]	@ (80018bc <HAL_RCC_OscConfig+0x274>)
 8001890:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001892:	f003 0302 	and.w	r3, r3, #2
 8001896:	2b00      	cmp	r3, #0
 8001898:	d0f0      	beq.n	800187c <HAL_RCC_OscConfig+0x234>
 800189a:	e01b      	b.n	80018d4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800189c:	4b09      	ldr	r3, [pc, #36]	@ (80018c4 <HAL_RCC_OscConfig+0x27c>)
 800189e:	2200      	movs	r2, #0
 80018a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018a2:	f7ff f8cd 	bl	8000a40 <HAL_GetTick>
 80018a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018a8:	e00e      	b.n	80018c8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018aa:	f7ff f8c9 	bl	8000a40 <HAL_GetTick>
 80018ae:	4602      	mov	r2, r0
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	2b02      	cmp	r3, #2
 80018b6:	d907      	bls.n	80018c8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80018b8:	2303      	movs	r3, #3
 80018ba:	e15c      	b.n	8001b76 <HAL_RCC_OscConfig+0x52e>
 80018bc:	40023800 	.word	0x40023800
 80018c0:	42470000 	.word	0x42470000
 80018c4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018c8:	4b8a      	ldr	r3, [pc, #552]	@ (8001af4 <HAL_RCC_OscConfig+0x4ac>)
 80018ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80018cc:	f003 0302 	and.w	r3, r3, #2
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d1ea      	bne.n	80018aa <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 0304 	and.w	r3, r3, #4
 80018dc:	2b00      	cmp	r3, #0
 80018de:	f000 8097 	beq.w	8001a10 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018e2:	2300      	movs	r3, #0
 80018e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018e6:	4b83      	ldr	r3, [pc, #524]	@ (8001af4 <HAL_RCC_OscConfig+0x4ac>)
 80018e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d10f      	bne.n	8001912 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018f2:	2300      	movs	r3, #0
 80018f4:	60bb      	str	r3, [r7, #8]
 80018f6:	4b7f      	ldr	r3, [pc, #508]	@ (8001af4 <HAL_RCC_OscConfig+0x4ac>)
 80018f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018fa:	4a7e      	ldr	r2, [pc, #504]	@ (8001af4 <HAL_RCC_OscConfig+0x4ac>)
 80018fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001900:	6413      	str	r3, [r2, #64]	@ 0x40
 8001902:	4b7c      	ldr	r3, [pc, #496]	@ (8001af4 <HAL_RCC_OscConfig+0x4ac>)
 8001904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001906:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800190a:	60bb      	str	r3, [r7, #8]
 800190c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800190e:	2301      	movs	r3, #1
 8001910:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001912:	4b79      	ldr	r3, [pc, #484]	@ (8001af8 <HAL_RCC_OscConfig+0x4b0>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800191a:	2b00      	cmp	r3, #0
 800191c:	d118      	bne.n	8001950 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800191e:	4b76      	ldr	r3, [pc, #472]	@ (8001af8 <HAL_RCC_OscConfig+0x4b0>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a75      	ldr	r2, [pc, #468]	@ (8001af8 <HAL_RCC_OscConfig+0x4b0>)
 8001924:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001928:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800192a:	f7ff f889 	bl	8000a40 <HAL_GetTick>
 800192e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001930:	e008      	b.n	8001944 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001932:	f7ff f885 	bl	8000a40 <HAL_GetTick>
 8001936:	4602      	mov	r2, r0
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	1ad3      	subs	r3, r2, r3
 800193c:	2b02      	cmp	r3, #2
 800193e:	d901      	bls.n	8001944 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001940:	2303      	movs	r3, #3
 8001942:	e118      	b.n	8001b76 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001944:	4b6c      	ldr	r3, [pc, #432]	@ (8001af8 <HAL_RCC_OscConfig+0x4b0>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800194c:	2b00      	cmp	r3, #0
 800194e:	d0f0      	beq.n	8001932 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	2b01      	cmp	r3, #1
 8001956:	d106      	bne.n	8001966 <HAL_RCC_OscConfig+0x31e>
 8001958:	4b66      	ldr	r3, [pc, #408]	@ (8001af4 <HAL_RCC_OscConfig+0x4ac>)
 800195a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800195c:	4a65      	ldr	r2, [pc, #404]	@ (8001af4 <HAL_RCC_OscConfig+0x4ac>)
 800195e:	f043 0301 	orr.w	r3, r3, #1
 8001962:	6713      	str	r3, [r2, #112]	@ 0x70
 8001964:	e01c      	b.n	80019a0 <HAL_RCC_OscConfig+0x358>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	2b05      	cmp	r3, #5
 800196c:	d10c      	bne.n	8001988 <HAL_RCC_OscConfig+0x340>
 800196e:	4b61      	ldr	r3, [pc, #388]	@ (8001af4 <HAL_RCC_OscConfig+0x4ac>)
 8001970:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001972:	4a60      	ldr	r2, [pc, #384]	@ (8001af4 <HAL_RCC_OscConfig+0x4ac>)
 8001974:	f043 0304 	orr.w	r3, r3, #4
 8001978:	6713      	str	r3, [r2, #112]	@ 0x70
 800197a:	4b5e      	ldr	r3, [pc, #376]	@ (8001af4 <HAL_RCC_OscConfig+0x4ac>)
 800197c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800197e:	4a5d      	ldr	r2, [pc, #372]	@ (8001af4 <HAL_RCC_OscConfig+0x4ac>)
 8001980:	f043 0301 	orr.w	r3, r3, #1
 8001984:	6713      	str	r3, [r2, #112]	@ 0x70
 8001986:	e00b      	b.n	80019a0 <HAL_RCC_OscConfig+0x358>
 8001988:	4b5a      	ldr	r3, [pc, #360]	@ (8001af4 <HAL_RCC_OscConfig+0x4ac>)
 800198a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800198c:	4a59      	ldr	r2, [pc, #356]	@ (8001af4 <HAL_RCC_OscConfig+0x4ac>)
 800198e:	f023 0301 	bic.w	r3, r3, #1
 8001992:	6713      	str	r3, [r2, #112]	@ 0x70
 8001994:	4b57      	ldr	r3, [pc, #348]	@ (8001af4 <HAL_RCC_OscConfig+0x4ac>)
 8001996:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001998:	4a56      	ldr	r2, [pc, #344]	@ (8001af4 <HAL_RCC_OscConfig+0x4ac>)
 800199a:	f023 0304 	bic.w	r3, r3, #4
 800199e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d015      	beq.n	80019d4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019a8:	f7ff f84a 	bl	8000a40 <HAL_GetTick>
 80019ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019ae:	e00a      	b.n	80019c6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019b0:	f7ff f846 	bl	8000a40 <HAL_GetTick>
 80019b4:	4602      	mov	r2, r0
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019be:	4293      	cmp	r3, r2
 80019c0:	d901      	bls.n	80019c6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80019c2:	2303      	movs	r3, #3
 80019c4:	e0d7      	b.n	8001b76 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019c6:	4b4b      	ldr	r3, [pc, #300]	@ (8001af4 <HAL_RCC_OscConfig+0x4ac>)
 80019c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019ca:	f003 0302 	and.w	r3, r3, #2
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d0ee      	beq.n	80019b0 <HAL_RCC_OscConfig+0x368>
 80019d2:	e014      	b.n	80019fe <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019d4:	f7ff f834 	bl	8000a40 <HAL_GetTick>
 80019d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019da:	e00a      	b.n	80019f2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019dc:	f7ff f830 	bl	8000a40 <HAL_GetTick>
 80019e0:	4602      	mov	r2, r0
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d901      	bls.n	80019f2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e0c1      	b.n	8001b76 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019f2:	4b40      	ldr	r3, [pc, #256]	@ (8001af4 <HAL_RCC_OscConfig+0x4ac>)
 80019f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019f6:	f003 0302 	and.w	r3, r3, #2
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d1ee      	bne.n	80019dc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80019fe:	7dfb      	ldrb	r3, [r7, #23]
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d105      	bne.n	8001a10 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a04:	4b3b      	ldr	r3, [pc, #236]	@ (8001af4 <HAL_RCC_OscConfig+0x4ac>)
 8001a06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a08:	4a3a      	ldr	r2, [pc, #232]	@ (8001af4 <HAL_RCC_OscConfig+0x4ac>)
 8001a0a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a0e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	699b      	ldr	r3, [r3, #24]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	f000 80ad 	beq.w	8001b74 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a1a:	4b36      	ldr	r3, [pc, #216]	@ (8001af4 <HAL_RCC_OscConfig+0x4ac>)
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	f003 030c 	and.w	r3, r3, #12
 8001a22:	2b08      	cmp	r3, #8
 8001a24:	d060      	beq.n	8001ae8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	699b      	ldr	r3, [r3, #24]
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d145      	bne.n	8001aba <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a2e:	4b33      	ldr	r3, [pc, #204]	@ (8001afc <HAL_RCC_OscConfig+0x4b4>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a34:	f7ff f804 	bl	8000a40 <HAL_GetTick>
 8001a38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a3a:	e008      	b.n	8001a4e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a3c:	f7ff f800 	bl	8000a40 <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d901      	bls.n	8001a4e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e093      	b.n	8001b76 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a4e:	4b29      	ldr	r3, [pc, #164]	@ (8001af4 <HAL_RCC_OscConfig+0x4ac>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d1f0      	bne.n	8001a3c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	69da      	ldr	r2, [r3, #28]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6a1b      	ldr	r3, [r3, #32]
 8001a62:	431a      	orrs	r2, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a68:	019b      	lsls	r3, r3, #6
 8001a6a:	431a      	orrs	r2, r3
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a70:	085b      	lsrs	r3, r3, #1
 8001a72:	3b01      	subs	r3, #1
 8001a74:	041b      	lsls	r3, r3, #16
 8001a76:	431a      	orrs	r2, r3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a7c:	061b      	lsls	r3, r3, #24
 8001a7e:	431a      	orrs	r2, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a84:	071b      	lsls	r3, r3, #28
 8001a86:	491b      	ldr	r1, [pc, #108]	@ (8001af4 <HAL_RCC_OscConfig+0x4ac>)
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a8c:	4b1b      	ldr	r3, [pc, #108]	@ (8001afc <HAL_RCC_OscConfig+0x4b4>)
 8001a8e:	2201      	movs	r2, #1
 8001a90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a92:	f7fe ffd5 	bl	8000a40 <HAL_GetTick>
 8001a96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a98:	e008      	b.n	8001aac <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a9a:	f7fe ffd1 	bl	8000a40 <HAL_GetTick>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	d901      	bls.n	8001aac <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	e064      	b.n	8001b76 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aac:	4b11      	ldr	r3, [pc, #68]	@ (8001af4 <HAL_RCC_OscConfig+0x4ac>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d0f0      	beq.n	8001a9a <HAL_RCC_OscConfig+0x452>
 8001ab8:	e05c      	b.n	8001b74 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aba:	4b10      	ldr	r3, [pc, #64]	@ (8001afc <HAL_RCC_OscConfig+0x4b4>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ac0:	f7fe ffbe 	bl	8000a40 <HAL_GetTick>
 8001ac4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ac6:	e008      	b.n	8001ada <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ac8:	f7fe ffba 	bl	8000a40 <HAL_GetTick>
 8001acc:	4602      	mov	r2, r0
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	2b02      	cmp	r3, #2
 8001ad4:	d901      	bls.n	8001ada <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	e04d      	b.n	8001b76 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ada:	4b06      	ldr	r3, [pc, #24]	@ (8001af4 <HAL_RCC_OscConfig+0x4ac>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d1f0      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x480>
 8001ae6:	e045      	b.n	8001b74 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	699b      	ldr	r3, [r3, #24]
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d107      	bne.n	8001b00 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e040      	b.n	8001b76 <HAL_RCC_OscConfig+0x52e>
 8001af4:	40023800 	.word	0x40023800
 8001af8:	40007000 	.word	0x40007000
 8001afc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b00:	4b1f      	ldr	r3, [pc, #124]	@ (8001b80 <HAL_RCC_OscConfig+0x538>)
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	699b      	ldr	r3, [r3, #24]
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d030      	beq.n	8001b70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d129      	bne.n	8001b70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d122      	bne.n	8001b70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b2a:	68fa      	ldr	r2, [r7, #12]
 8001b2c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001b30:	4013      	ands	r3, r2
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001b36:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d119      	bne.n	8001b70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b46:	085b      	lsrs	r3, r3, #1
 8001b48:	3b01      	subs	r3, #1
 8001b4a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d10f      	bne.n	8001b70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b5a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d107      	bne.n	8001b70 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b6a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d001      	beq.n	8001b74 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e000      	b.n	8001b76 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001b74:	2300      	movs	r3, #0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3718      	adds	r7, #24
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	40023800 	.word	0x40023800

08001b84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d101      	bne.n	8001b96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e041      	b.n	8001c1a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d106      	bne.n	8001bb0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f000 f839 	bl	8001c22 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2202      	movs	r2, #2
 8001bb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	3304      	adds	r3, #4
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	4610      	mov	r0, r2
 8001bc4:	f000 f9c0 	bl	8001f48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2201      	movs	r2, #1
 8001bcc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2201      	movs	r2, #1
 8001bdc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2201      	movs	r2, #1
 8001be4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2201      	movs	r2, #1
 8001bec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2201      	movs	r2, #1
 8001c04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2201      	movs	r2, #1
 8001c14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c22:	b480      	push	{r7}
 8001c24:	b083      	sub	sp, #12
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c2a:	bf00      	nop
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
	...

08001c38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b085      	sub	sp, #20
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d001      	beq.n	8001c50 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e04e      	b.n	8001cee <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2202      	movs	r2, #2
 8001c54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	68da      	ldr	r2, [r3, #12]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f042 0201 	orr.w	r2, r2, #1
 8001c66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a23      	ldr	r2, [pc, #140]	@ (8001cfc <HAL_TIM_Base_Start_IT+0xc4>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d022      	beq.n	8001cb8 <HAL_TIM_Base_Start_IT+0x80>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c7a:	d01d      	beq.n	8001cb8 <HAL_TIM_Base_Start_IT+0x80>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a1f      	ldr	r2, [pc, #124]	@ (8001d00 <HAL_TIM_Base_Start_IT+0xc8>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d018      	beq.n	8001cb8 <HAL_TIM_Base_Start_IT+0x80>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a1e      	ldr	r2, [pc, #120]	@ (8001d04 <HAL_TIM_Base_Start_IT+0xcc>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d013      	beq.n	8001cb8 <HAL_TIM_Base_Start_IT+0x80>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a1c      	ldr	r2, [pc, #112]	@ (8001d08 <HAL_TIM_Base_Start_IT+0xd0>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d00e      	beq.n	8001cb8 <HAL_TIM_Base_Start_IT+0x80>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a1b      	ldr	r2, [pc, #108]	@ (8001d0c <HAL_TIM_Base_Start_IT+0xd4>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d009      	beq.n	8001cb8 <HAL_TIM_Base_Start_IT+0x80>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a19      	ldr	r2, [pc, #100]	@ (8001d10 <HAL_TIM_Base_Start_IT+0xd8>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d004      	beq.n	8001cb8 <HAL_TIM_Base_Start_IT+0x80>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a18      	ldr	r2, [pc, #96]	@ (8001d14 <HAL_TIM_Base_Start_IT+0xdc>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d111      	bne.n	8001cdc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	f003 0307 	and.w	r3, r3, #7
 8001cc2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	2b06      	cmp	r3, #6
 8001cc8:	d010      	beq.n	8001cec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f042 0201 	orr.w	r2, r2, #1
 8001cd8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cda:	e007      	b.n	8001cec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f042 0201 	orr.w	r2, r2, #1
 8001cea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001cec:	2300      	movs	r3, #0
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3714      	adds	r7, #20
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	40010000 	.word	0x40010000
 8001d00:	40000400 	.word	0x40000400
 8001d04:	40000800 	.word	0x40000800
 8001d08:	40000c00 	.word	0x40000c00
 8001d0c:	40010400 	.word	0x40010400
 8001d10:	40014000 	.word	0x40014000
 8001d14:	40001800 	.word	0x40001800

08001d18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	68db      	ldr	r3, [r3, #12]
 8001d26:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	691b      	ldr	r3, [r3, #16]
 8001d2e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	f003 0302 	and.w	r3, r3, #2
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d020      	beq.n	8001d7c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	f003 0302 	and.w	r3, r3, #2
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d01b      	beq.n	8001d7c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f06f 0202 	mvn.w	r2, #2
 8001d4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2201      	movs	r2, #1
 8001d52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	699b      	ldr	r3, [r3, #24]
 8001d5a:	f003 0303 	and.w	r3, r3, #3
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d003      	beq.n	8001d6a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f000 f8d2 	bl	8001f0c <HAL_TIM_IC_CaptureCallback>
 8001d68:	e005      	b.n	8001d76 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f000 f8c4 	bl	8001ef8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f000 f8d5 	bl	8001f20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	f003 0304 	and.w	r3, r3, #4
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d020      	beq.n	8001dc8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	f003 0304 	and.w	r3, r3, #4
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d01b      	beq.n	8001dc8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f06f 0204 	mvn.w	r2, #4
 8001d98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2202      	movs	r2, #2
 8001d9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	699b      	ldr	r3, [r3, #24]
 8001da6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d003      	beq.n	8001db6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f000 f8ac 	bl	8001f0c <HAL_TIM_IC_CaptureCallback>
 8001db4:	e005      	b.n	8001dc2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f000 f89e 	bl	8001ef8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	f000 f8af 	bl	8001f20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	f003 0308 	and.w	r3, r3, #8
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d020      	beq.n	8001e14 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	f003 0308 	and.w	r3, r3, #8
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d01b      	beq.n	8001e14 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f06f 0208 	mvn.w	r2, #8
 8001de4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2204      	movs	r2, #4
 8001dea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	69db      	ldr	r3, [r3, #28]
 8001df2:	f003 0303 	and.w	r3, r3, #3
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d003      	beq.n	8001e02 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f000 f886 	bl	8001f0c <HAL_TIM_IC_CaptureCallback>
 8001e00:	e005      	b.n	8001e0e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f000 f878 	bl	8001ef8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	f000 f889 	bl	8001f20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2200      	movs	r2, #0
 8001e12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	f003 0310 	and.w	r3, r3, #16
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d020      	beq.n	8001e60 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	f003 0310 	and.w	r3, r3, #16
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d01b      	beq.n	8001e60 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f06f 0210 	mvn.w	r2, #16
 8001e30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2208      	movs	r2, #8
 8001e36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	69db      	ldr	r3, [r3, #28]
 8001e3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d003      	beq.n	8001e4e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f000 f860 	bl	8001f0c <HAL_TIM_IC_CaptureCallback>
 8001e4c:	e005      	b.n	8001e5a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f000 f852 	bl	8001ef8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f000 f863 	bl	8001f20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	f003 0301 	and.w	r3, r3, #1
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d00c      	beq.n	8001e84 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	f003 0301 	and.w	r3, r3, #1
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d007      	beq.n	8001e84 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f06f 0201 	mvn.w	r2, #1
 8001e7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f7fe fc8a 	bl	8000798 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d00c      	beq.n	8001ea8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d007      	beq.n	8001ea8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001ea0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f000 f906 	bl	80020b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d00c      	beq.n	8001ecc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d007      	beq.n	8001ecc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001ec4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f000 f834 	bl	8001f34 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	f003 0320 	and.w	r3, r3, #32
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d00c      	beq.n	8001ef0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	f003 0320 	and.w	r3, r3, #32
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d007      	beq.n	8001ef0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f06f 0220 	mvn.w	r2, #32
 8001ee8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f000 f8d8 	bl	80020a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ef0:	bf00      	nop
 8001ef2:	3710      	adds	r7, #16
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}

08001ef8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f00:	bf00      	nop
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f14:	bf00      	nop
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f28:	bf00      	nop
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f3c:	bf00      	nop
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b085      	sub	sp, #20
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	4a46      	ldr	r2, [pc, #280]	@ (8002074 <TIM_Base_SetConfig+0x12c>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d013      	beq.n	8001f88 <TIM_Base_SetConfig+0x40>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f66:	d00f      	beq.n	8001f88 <TIM_Base_SetConfig+0x40>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	4a43      	ldr	r2, [pc, #268]	@ (8002078 <TIM_Base_SetConfig+0x130>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d00b      	beq.n	8001f88 <TIM_Base_SetConfig+0x40>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	4a42      	ldr	r2, [pc, #264]	@ (800207c <TIM_Base_SetConfig+0x134>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d007      	beq.n	8001f88 <TIM_Base_SetConfig+0x40>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	4a41      	ldr	r2, [pc, #260]	@ (8002080 <TIM_Base_SetConfig+0x138>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d003      	beq.n	8001f88 <TIM_Base_SetConfig+0x40>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	4a40      	ldr	r2, [pc, #256]	@ (8002084 <TIM_Base_SetConfig+0x13c>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d108      	bne.n	8001f9a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	68fa      	ldr	r2, [r7, #12]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4a35      	ldr	r2, [pc, #212]	@ (8002074 <TIM_Base_SetConfig+0x12c>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d02b      	beq.n	8001ffa <TIM_Base_SetConfig+0xb2>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fa8:	d027      	beq.n	8001ffa <TIM_Base_SetConfig+0xb2>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4a32      	ldr	r2, [pc, #200]	@ (8002078 <TIM_Base_SetConfig+0x130>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d023      	beq.n	8001ffa <TIM_Base_SetConfig+0xb2>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4a31      	ldr	r2, [pc, #196]	@ (800207c <TIM_Base_SetConfig+0x134>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d01f      	beq.n	8001ffa <TIM_Base_SetConfig+0xb2>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4a30      	ldr	r2, [pc, #192]	@ (8002080 <TIM_Base_SetConfig+0x138>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d01b      	beq.n	8001ffa <TIM_Base_SetConfig+0xb2>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4a2f      	ldr	r2, [pc, #188]	@ (8002084 <TIM_Base_SetConfig+0x13c>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d017      	beq.n	8001ffa <TIM_Base_SetConfig+0xb2>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4a2e      	ldr	r2, [pc, #184]	@ (8002088 <TIM_Base_SetConfig+0x140>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d013      	beq.n	8001ffa <TIM_Base_SetConfig+0xb2>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4a2d      	ldr	r2, [pc, #180]	@ (800208c <TIM_Base_SetConfig+0x144>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d00f      	beq.n	8001ffa <TIM_Base_SetConfig+0xb2>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4a2c      	ldr	r2, [pc, #176]	@ (8002090 <TIM_Base_SetConfig+0x148>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d00b      	beq.n	8001ffa <TIM_Base_SetConfig+0xb2>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a2b      	ldr	r2, [pc, #172]	@ (8002094 <TIM_Base_SetConfig+0x14c>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d007      	beq.n	8001ffa <TIM_Base_SetConfig+0xb2>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4a2a      	ldr	r2, [pc, #168]	@ (8002098 <TIM_Base_SetConfig+0x150>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d003      	beq.n	8001ffa <TIM_Base_SetConfig+0xb2>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a29      	ldr	r2, [pc, #164]	@ (800209c <TIM_Base_SetConfig+0x154>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d108      	bne.n	800200c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002000:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	68db      	ldr	r3, [r3, #12]
 8002006:	68fa      	ldr	r2, [r7, #12]
 8002008:	4313      	orrs	r3, r2
 800200a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	695b      	ldr	r3, [r3, #20]
 8002016:	4313      	orrs	r3, r2
 8002018:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	68fa      	ldr	r2, [r7, #12]
 800201e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	689a      	ldr	r2, [r3, #8]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	4a10      	ldr	r2, [pc, #64]	@ (8002074 <TIM_Base_SetConfig+0x12c>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d003      	beq.n	8002040 <TIM_Base_SetConfig+0xf8>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	4a12      	ldr	r2, [pc, #72]	@ (8002084 <TIM_Base_SetConfig+0x13c>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d103      	bne.n	8002048 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	691a      	ldr	r2, [r3, #16]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2201      	movs	r2, #1
 800204c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	691b      	ldr	r3, [r3, #16]
 8002052:	f003 0301 	and.w	r3, r3, #1
 8002056:	2b01      	cmp	r3, #1
 8002058:	d105      	bne.n	8002066 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	691b      	ldr	r3, [r3, #16]
 800205e:	f023 0201 	bic.w	r2, r3, #1
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	611a      	str	r2, [r3, #16]
  }
}
 8002066:	bf00      	nop
 8002068:	3714      	adds	r7, #20
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	40010000 	.word	0x40010000
 8002078:	40000400 	.word	0x40000400
 800207c:	40000800 	.word	0x40000800
 8002080:	40000c00 	.word	0x40000c00
 8002084:	40010400 	.word	0x40010400
 8002088:	40014000 	.word	0x40014000
 800208c:	40014400 	.word	0x40014400
 8002090:	40014800 	.word	0x40014800
 8002094:	40001800 	.word	0x40001800
 8002098:	40001c00 	.word	0x40001c00
 800209c:	40002000 	.word	0x40002000

080020a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80020a8:	bf00      	nop
 80020aa:	370c      	adds	r7, #12
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr

080020b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80020bc:	bf00      	nop
 80020be:	370c      	adds	r7, #12
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr

080020c8 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	f103 0208 	add.w	r2, r3, #8
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	f04f 32ff 	mov.w	r2, #4294967295
 80020e0:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	f103 0208 	add.w	r2, r3, #8
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	f103 0208 	add.w	r2, r3, #8
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2200      	movs	r2, #0
 80020fa:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80020fc:	bf00      	nop
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2200      	movs	r2, #0
 8002114:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002116:	bf00      	nop
 8002118:	370c      	adds	r7, #12
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr

08002122 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002122:	b580      	push	{r7, lr}
 8002124:	b08c      	sub	sp, #48	@ 0x30
 8002126:	af04      	add	r7, sp, #16
 8002128:	60f8      	str	r0, [r7, #12]
 800212a:	60b9      	str	r1, [r7, #8]
 800212c:	603b      	str	r3, [r7, #0]
 800212e:	4613      	mov	r3, r2
 8002130:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002132:	88fb      	ldrh	r3, [r7, #6]
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	4618      	mov	r0, r3
 8002138:	f000 fd68 	bl	8002c0c <pvPortMalloc>
 800213c:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d013      	beq.n	800216c <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002144:	2058      	movs	r0, #88	@ 0x58
 8002146:	f000 fd61 	bl	8002c0c <pvPortMalloc>
 800214a:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d008      	beq.n	8002164 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8002152:	2258      	movs	r2, #88	@ 0x58
 8002154:	2100      	movs	r1, #0
 8002156:	69f8      	ldr	r0, [r7, #28]
 8002158:	f000 ff28 	bl	8002fac <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	697a      	ldr	r2, [r7, #20]
 8002160:	631a      	str	r2, [r3, #48]	@ 0x30
 8002162:	e005      	b.n	8002170 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8002164:	6978      	ldr	r0, [r7, #20]
 8002166:	f000 fe0d 	bl	8002d84 <vPortFree>
 800216a:	e001      	b.n	8002170 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 800216c:	2300      	movs	r3, #0
 800216e:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d013      	beq.n	800219e <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002176:	88fa      	ldrh	r2, [r7, #6]
 8002178:	2300      	movs	r3, #0
 800217a:	9303      	str	r3, [sp, #12]
 800217c:	69fb      	ldr	r3, [r7, #28]
 800217e:	9302      	str	r3, [sp, #8]
 8002180:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002182:	9301      	str	r3, [sp, #4]
 8002184:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002186:	9300      	str	r3, [sp, #0]
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	68b9      	ldr	r1, [r7, #8]
 800218c:	68f8      	ldr	r0, [r7, #12]
 800218e:	f000 f80e 	bl	80021ae <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002192:	69f8      	ldr	r0, [r7, #28]
 8002194:	f000 f89c 	bl	80022d0 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002198:	2301      	movs	r3, #1
 800219a:	61bb      	str	r3, [r7, #24]
 800219c:	e002      	b.n	80021a4 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800219e:	f04f 33ff 	mov.w	r3, #4294967295
 80021a2:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80021a4:	69bb      	ldr	r3, [r7, #24]
    }
 80021a6:	4618      	mov	r0, r3
 80021a8:	3720      	adds	r7, #32
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}

080021ae <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80021ae:	b580      	push	{r7, lr}
 80021b0:	b088      	sub	sp, #32
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	60f8      	str	r0, [r7, #12]
 80021b6:	60b9      	str	r1, [r7, #8]
 80021b8:	607a      	str	r2, [r7, #4]
 80021ba:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80021bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021be:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	461a      	mov	r2, r3
 80021c6:	21a5      	movs	r1, #165	@ 0xa5
 80021c8:	f000 fef0 	bl	8002fac <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80021cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80021d6:	3b01      	subs	r3, #1
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	4413      	add	r3, r2
 80021dc:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	f023 0307 	bic.w	r3, r3, #7
 80021e4:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80021e6:	69bb      	ldr	r3, [r7, #24]
 80021e8:	f003 0307 	and.w	r3, r3, #7
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d00b      	beq.n	8002208 <prvInitialiseNewTask+0x5a>
        __asm volatile
 80021f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021f4:	f383 8811 	msr	BASEPRI, r3
 80021f8:	f3bf 8f6f 	isb	sy
 80021fc:	f3bf 8f4f 	dsb	sy
 8002200:	617b      	str	r3, [r7, #20]
    }
 8002202:	bf00      	nop
 8002204:	bf00      	nop
 8002206:	e7fd      	b.n	8002204 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d01e      	beq.n	800224c <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800220e:	2300      	movs	r3, #0
 8002210:	61fb      	str	r3, [r7, #28]
 8002212:	e012      	b.n	800223a <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002214:	68ba      	ldr	r2, [r7, #8]
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	4413      	add	r3, r2
 800221a:	7819      	ldrb	r1, [r3, #0]
 800221c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	4413      	add	r3, r2
 8002222:	3334      	adds	r3, #52	@ 0x34
 8002224:	460a      	mov	r2, r1
 8002226:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002228:	68ba      	ldr	r2, [r7, #8]
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	4413      	add	r3, r2
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d006      	beq.n	8002242 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	3301      	adds	r3, #1
 8002238:	61fb      	str	r3, [r7, #28]
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	2b09      	cmp	r3, #9
 800223e:	d9e9      	bls.n	8002214 <prvInitialiseNewTask+0x66>
 8002240:	e000      	b.n	8002244 <prvInitialiseNewTask+0x96>
            {
                break;
 8002242:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002244:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002246:	2200      	movs	r2, #0
 8002248:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 800224c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800224e:	2b04      	cmp	r3, #4
 8002250:	d90b      	bls.n	800226a <prvInitialiseNewTask+0xbc>
        __asm volatile
 8002252:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002256:	f383 8811 	msr	BASEPRI, r3
 800225a:	f3bf 8f6f 	isb	sy
 800225e:	f3bf 8f4f 	dsb	sy
 8002262:	613b      	str	r3, [r7, #16]
    }
 8002264:	bf00      	nop
 8002266:	bf00      	nop
 8002268:	e7fd      	b.n	8002266 <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800226a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800226c:	2b04      	cmp	r3, #4
 800226e:	d901      	bls.n	8002274 <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002270:	2304      	movs	r3, #4
 8002272:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002276:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002278:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 800227a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800227c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800227e:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002282:	3304      	adds	r3, #4
 8002284:	4618      	mov	r0, r3
 8002286:	f7ff ff3f 	bl	8002108 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800228a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800228c:	3318      	adds	r3, #24
 800228e:	4618      	mov	r0, r3
 8002290:	f7ff ff3a 	bl	8002108 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002296:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002298:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800229a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800229c:	f1c3 0205 	rsb	r2, r3, #5
 80022a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022a2:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80022a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80022a8:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80022aa:	683a      	ldr	r2, [r7, #0]
 80022ac:	68f9      	ldr	r1, [r7, #12]
 80022ae:	69b8      	ldr	r0, [r7, #24]
 80022b0:	f000 fb7e 	bl	80029b0 <pxPortInitialiseStack>
 80022b4:	4602      	mov	r2, r0
 80022b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022b8:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80022ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d002      	beq.n	80022c6 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80022c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80022c4:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80022c6:	bf00      	nop
 80022c8:	3720      	adds	r7, #32
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
	...

080022d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b084      	sub	sp, #16
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80022d8:	f000 fbe6 	bl	8002aa8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80022dc:	4b40      	ldr	r3, [pc, #256]	@ (80023e0 <prvAddNewTaskToReadyList+0x110>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	3301      	adds	r3, #1
 80022e2:	4a3f      	ldr	r2, [pc, #252]	@ (80023e0 <prvAddNewTaskToReadyList+0x110>)
 80022e4:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80022e6:	4b3f      	ldr	r3, [pc, #252]	@ (80023e4 <prvAddNewTaskToReadyList+0x114>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d109      	bne.n	8002302 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80022ee:	4a3d      	ldr	r2, [pc, #244]	@ (80023e4 <prvAddNewTaskToReadyList+0x114>)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80022f4:	4b3a      	ldr	r3, [pc, #232]	@ (80023e0 <prvAddNewTaskToReadyList+0x110>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d110      	bne.n	800231e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80022fc:	f000 fafc 	bl	80028f8 <prvInitialiseTaskLists>
 8002300:	e00d      	b.n	800231e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002302:	4b39      	ldr	r3, [pc, #228]	@ (80023e8 <prvAddNewTaskToReadyList+0x118>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d109      	bne.n	800231e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800230a:	4b36      	ldr	r3, [pc, #216]	@ (80023e4 <prvAddNewTaskToReadyList+0x114>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002314:	429a      	cmp	r2, r3
 8002316:	d802      	bhi.n	800231e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002318:	4a32      	ldr	r2, [pc, #200]	@ (80023e4 <prvAddNewTaskToReadyList+0x114>)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800231e:	4b33      	ldr	r3, [pc, #204]	@ (80023ec <prvAddNewTaskToReadyList+0x11c>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	3301      	adds	r3, #1
 8002324:	4a31      	ldr	r2, [pc, #196]	@ (80023ec <prvAddNewTaskToReadyList+0x11c>)
 8002326:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002328:	4b30      	ldr	r3, [pc, #192]	@ (80023ec <prvAddNewTaskToReadyList+0x11c>)
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002334:	2201      	movs	r2, #1
 8002336:	409a      	lsls	r2, r3
 8002338:	4b2d      	ldr	r3, [pc, #180]	@ (80023f0 <prvAddNewTaskToReadyList+0x120>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4313      	orrs	r3, r2
 800233e:	4a2c      	ldr	r2, [pc, #176]	@ (80023f0 <prvAddNewTaskToReadyList+0x120>)
 8002340:	6013      	str	r3, [r2, #0]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002346:	492b      	ldr	r1, [pc, #172]	@ (80023f4 <prvAddNewTaskToReadyList+0x124>)
 8002348:	4613      	mov	r3, r2
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	4413      	add	r3, r2
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	440b      	add	r3, r1
 8002352:	3304      	adds	r3, #4
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	60fb      	str	r3, [r7, #12]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	68fa      	ldr	r2, [r7, #12]
 800235c:	609a      	str	r2, [r3, #8]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	689a      	ldr	r2, [r3, #8]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	60da      	str	r2, [r3, #12]
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	3204      	adds	r2, #4
 800236e:	605a      	str	r2, [r3, #4]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	1d1a      	adds	r2, r3, #4
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	609a      	str	r2, [r3, #8]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800237c:	4613      	mov	r3, r2
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	4413      	add	r3, r2
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	4a1b      	ldr	r2, [pc, #108]	@ (80023f4 <prvAddNewTaskToReadyList+0x124>)
 8002386:	441a      	add	r2, r3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	615a      	str	r2, [r3, #20]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002390:	4918      	ldr	r1, [pc, #96]	@ (80023f4 <prvAddNewTaskToReadyList+0x124>)
 8002392:	4613      	mov	r3, r2
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	4413      	add	r3, r2
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	440b      	add	r3, r1
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	1c59      	adds	r1, r3, #1
 80023a0:	4814      	ldr	r0, [pc, #80]	@ (80023f4 <prvAddNewTaskToReadyList+0x124>)
 80023a2:	4613      	mov	r3, r2
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	4413      	add	r3, r2
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	4403      	add	r3, r0
 80023ac:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80023ae:	f000 fbad 	bl	8002b0c <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80023b2:	4b0d      	ldr	r3, [pc, #52]	@ (80023e8 <prvAddNewTaskToReadyList+0x118>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d00e      	beq.n	80023d8 <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80023ba:	4b0a      	ldr	r3, [pc, #40]	@ (80023e4 <prvAddNewTaskToReadyList+0x114>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d207      	bcs.n	80023d8 <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80023c8:	4b0b      	ldr	r3, [pc, #44]	@ (80023f8 <prvAddNewTaskToReadyList+0x128>)
 80023ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80023ce:	601a      	str	r2, [r3, #0]
 80023d0:	f3bf 8f4f 	dsb	sy
 80023d4:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80023d8:	bf00      	nop
 80023da:	3710      	adds	r7, #16
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	2000014c 	.word	0x2000014c
 80023e4:	20000078 	.word	0x20000078
 80023e8:	20000158 	.word	0x20000158
 80023ec:	20000168 	.word	0x20000168
 80023f0:	20000154 	.word	0x20000154
 80023f4:	2000007c 	.word	0x2000007c
 80023f8:	e000ed04 	.word	0xe000ed04

080023fc <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002400:	4b04      	ldr	r3, [pc, #16]	@ (8002414 <vTaskSuspendAll+0x18>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	3301      	adds	r3, #1
 8002406:	4a03      	ldr	r2, [pc, #12]	@ (8002414 <vTaskSuspendAll+0x18>)
 8002408:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800240a:	bf00      	nop
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr
 8002414:	20000170 	.word	0x20000170

08002418 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b088      	sub	sp, #32
 800241c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800241e:	2300      	movs	r3, #0
 8002420:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002422:	2300      	movs	r3, #0
 8002424:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002426:	4b71      	ldr	r3, [pc, #452]	@ (80025ec <xTaskResumeAll+0x1d4>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d10b      	bne.n	8002446 <xTaskResumeAll+0x2e>
        __asm volatile
 800242e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002432:	f383 8811 	msr	BASEPRI, r3
 8002436:	f3bf 8f6f 	isb	sy
 800243a:	f3bf 8f4f 	dsb	sy
 800243e:	607b      	str	r3, [r7, #4]
    }
 8002440:	bf00      	nop
 8002442:	bf00      	nop
 8002444:	e7fd      	b.n	8002442 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002446:	f000 fb2f 	bl	8002aa8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800244a:	4b68      	ldr	r3, [pc, #416]	@ (80025ec <xTaskResumeAll+0x1d4>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	3b01      	subs	r3, #1
 8002450:	4a66      	ldr	r2, [pc, #408]	@ (80025ec <xTaskResumeAll+0x1d4>)
 8002452:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002454:	4b65      	ldr	r3, [pc, #404]	@ (80025ec <xTaskResumeAll+0x1d4>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	2b00      	cmp	r3, #0
 800245a:	f040 80c0 	bne.w	80025de <xTaskResumeAll+0x1c6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800245e:	4b64      	ldr	r3, [pc, #400]	@ (80025f0 <xTaskResumeAll+0x1d8>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	2b00      	cmp	r3, #0
 8002464:	f000 80bb 	beq.w	80025de <xTaskResumeAll+0x1c6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002468:	e08a      	b.n	8002580 <xTaskResumeAll+0x168>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800246a:	4b62      	ldr	r3, [pc, #392]	@ (80025f4 <xTaskResumeAll+0x1dc>)
 800246c:	68db      	ldr	r3, [r3, #12]
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002476:	613b      	str	r3, [r7, #16]
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	69db      	ldr	r3, [r3, #28]
 800247c:	69fa      	ldr	r2, [r7, #28]
 800247e:	6a12      	ldr	r2, [r2, #32]
 8002480:	609a      	str	r2, [r3, #8]
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	6a1b      	ldr	r3, [r3, #32]
 8002486:	69fa      	ldr	r2, [r7, #28]
 8002488:	69d2      	ldr	r2, [r2, #28]
 800248a:	605a      	str	r2, [r3, #4]
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	685a      	ldr	r2, [r3, #4]
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	3318      	adds	r3, #24
 8002494:	429a      	cmp	r2, r3
 8002496:	d103      	bne.n	80024a0 <xTaskResumeAll+0x88>
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	6a1a      	ldr	r2, [r3, #32]
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	605a      	str	r2, [r3, #4]
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	2200      	movs	r2, #0
 80024a4:	629a      	str	r2, [r3, #40]	@ 0x28
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	1e5a      	subs	r2, r3, #1
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	695b      	ldr	r3, [r3, #20]
 80024b4:	60fb      	str	r3, [r7, #12]
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	69fa      	ldr	r2, [r7, #28]
 80024bc:	68d2      	ldr	r2, [r2, #12]
 80024be:	609a      	str	r2, [r3, #8]
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	69fa      	ldr	r2, [r7, #28]
 80024c6:	6892      	ldr	r2, [r2, #8]
 80024c8:	605a      	str	r2, [r3, #4]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	685a      	ldr	r2, [r3, #4]
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	3304      	adds	r3, #4
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d103      	bne.n	80024de <xTaskResumeAll+0xc6>
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	68da      	ldr	r2, [r3, #12]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	605a      	str	r2, [r3, #4]
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	2200      	movs	r2, #0
 80024e2:	615a      	str	r2, [r3, #20]
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	1e5a      	subs	r2, r3, #1
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024f2:	2201      	movs	r2, #1
 80024f4:	409a      	lsls	r2, r3
 80024f6:	4b40      	ldr	r3, [pc, #256]	@ (80025f8 <xTaskResumeAll+0x1e0>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	4a3e      	ldr	r2, [pc, #248]	@ (80025f8 <xTaskResumeAll+0x1e0>)
 80024fe:	6013      	str	r3, [r2, #0]
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002504:	493d      	ldr	r1, [pc, #244]	@ (80025fc <xTaskResumeAll+0x1e4>)
 8002506:	4613      	mov	r3, r2
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	4413      	add	r3, r2
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	440b      	add	r3, r1
 8002510:	3304      	adds	r3, #4
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	60bb      	str	r3, [r7, #8]
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	68ba      	ldr	r2, [r7, #8]
 800251a:	609a      	str	r2, [r3, #8]
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	689a      	ldr	r2, [r3, #8]
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	60da      	str	r2, [r3, #12]
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	69fa      	ldr	r2, [r7, #28]
 800252a:	3204      	adds	r2, #4
 800252c:	605a      	str	r2, [r3, #4]
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	1d1a      	adds	r2, r3, #4
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	609a      	str	r2, [r3, #8]
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800253a:	4613      	mov	r3, r2
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	4413      	add	r3, r2
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	4a2e      	ldr	r2, [pc, #184]	@ (80025fc <xTaskResumeAll+0x1e4>)
 8002544:	441a      	add	r2, r3
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	615a      	str	r2, [r3, #20]
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800254e:	492b      	ldr	r1, [pc, #172]	@ (80025fc <xTaskResumeAll+0x1e4>)
 8002550:	4613      	mov	r3, r2
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	4413      	add	r3, r2
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	440b      	add	r3, r1
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	1c59      	adds	r1, r3, #1
 800255e:	4827      	ldr	r0, [pc, #156]	@ (80025fc <xTaskResumeAll+0x1e4>)
 8002560:	4613      	mov	r3, r2
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	4413      	add	r3, r2
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	4403      	add	r3, r0
 800256a:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002570:	4b23      	ldr	r3, [pc, #140]	@ (8002600 <xTaskResumeAll+0x1e8>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002576:	429a      	cmp	r2, r3
 8002578:	d302      	bcc.n	8002580 <xTaskResumeAll+0x168>
                    {
                        xYieldPending = pdTRUE;
 800257a:	4b22      	ldr	r3, [pc, #136]	@ (8002604 <xTaskResumeAll+0x1ec>)
 800257c:	2201      	movs	r2, #1
 800257e:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002580:	4b1c      	ldr	r3, [pc, #112]	@ (80025f4 <xTaskResumeAll+0x1dc>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	2b00      	cmp	r3, #0
 8002586:	f47f af70 	bne.w	800246a <xTaskResumeAll+0x52>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d001      	beq.n	8002594 <xTaskResumeAll+0x17c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002590:	f000 f9f2 	bl	8002978 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002594:	4b1c      	ldr	r3, [pc, #112]	@ (8002608 <xTaskResumeAll+0x1f0>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d010      	beq.n	80025c2 <xTaskResumeAll+0x1aa>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80025a0:	f000 f836 	bl	8002610 <xTaskIncrementTick>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d002      	beq.n	80025b0 <xTaskResumeAll+0x198>
                            {
                                xYieldPending = pdTRUE;
 80025aa:	4b16      	ldr	r3, [pc, #88]	@ (8002604 <xTaskResumeAll+0x1ec>)
 80025ac:	2201      	movs	r2, #1
 80025ae:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	3b01      	subs	r3, #1
 80025b4:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d1f1      	bne.n	80025a0 <xTaskResumeAll+0x188>

                        xPendedTicks = 0;
 80025bc:	4b12      	ldr	r3, [pc, #72]	@ (8002608 <xTaskResumeAll+0x1f0>)
 80025be:	2200      	movs	r2, #0
 80025c0:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80025c2:	4b10      	ldr	r3, [pc, #64]	@ (8002604 <xTaskResumeAll+0x1ec>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d009      	beq.n	80025de <xTaskResumeAll+0x1c6>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 80025ca:	2301      	movs	r3, #1
 80025cc:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80025ce:	4b0f      	ldr	r3, [pc, #60]	@ (800260c <xTaskResumeAll+0x1f4>)
 80025d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80025d4:	601a      	str	r2, [r3, #0]
 80025d6:	f3bf 8f4f 	dsb	sy
 80025da:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80025de:	f000 fa95 	bl	8002b0c <vPortExitCritical>

    return xAlreadyYielded;
 80025e2:	69bb      	ldr	r3, [r7, #24]
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3720      	adds	r7, #32
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	20000170 	.word	0x20000170
 80025f0:	2000014c 	.word	0x2000014c
 80025f4:	20000110 	.word	0x20000110
 80025f8:	20000154 	.word	0x20000154
 80025fc:	2000007c 	.word	0x2000007c
 8002600:	20000078 	.word	0x20000078
 8002604:	20000160 	.word	0x20000160
 8002608:	2000015c 	.word	0x2000015c
 800260c:	e000ed04 	.word	0xe000ed04

08002610 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b08a      	sub	sp, #40	@ 0x28
 8002614:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002616:	2300      	movs	r3, #0
 8002618:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800261a:	4b7e      	ldr	r3, [pc, #504]	@ (8002814 <xTaskIncrementTick+0x204>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	2b00      	cmp	r3, #0
 8002620:	f040 80ed 	bne.w	80027fe <xTaskIncrementTick+0x1ee>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002624:	4b7c      	ldr	r3, [pc, #496]	@ (8002818 <xTaskIncrementTick+0x208>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	3301      	adds	r3, #1
 800262a:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800262c:	4a7a      	ldr	r2, [pc, #488]	@ (8002818 <xTaskIncrementTick+0x208>)
 800262e:	6a3b      	ldr	r3, [r7, #32]
 8002630:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002632:	6a3b      	ldr	r3, [r7, #32]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d121      	bne.n	800267c <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8002638:	4b78      	ldr	r3, [pc, #480]	@ (800281c <xTaskIncrementTick+0x20c>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d00b      	beq.n	800265a <xTaskIncrementTick+0x4a>
        __asm volatile
 8002642:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002646:	f383 8811 	msr	BASEPRI, r3
 800264a:	f3bf 8f6f 	isb	sy
 800264e:	f3bf 8f4f 	dsb	sy
 8002652:	607b      	str	r3, [r7, #4]
    }
 8002654:	bf00      	nop
 8002656:	bf00      	nop
 8002658:	e7fd      	b.n	8002656 <xTaskIncrementTick+0x46>
 800265a:	4b70      	ldr	r3, [pc, #448]	@ (800281c <xTaskIncrementTick+0x20c>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	61fb      	str	r3, [r7, #28]
 8002660:	4b6f      	ldr	r3, [pc, #444]	@ (8002820 <xTaskIncrementTick+0x210>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a6d      	ldr	r2, [pc, #436]	@ (800281c <xTaskIncrementTick+0x20c>)
 8002666:	6013      	str	r3, [r2, #0]
 8002668:	4a6d      	ldr	r2, [pc, #436]	@ (8002820 <xTaskIncrementTick+0x210>)
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	6013      	str	r3, [r2, #0]
 800266e:	4b6d      	ldr	r3, [pc, #436]	@ (8002824 <xTaskIncrementTick+0x214>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	3301      	adds	r3, #1
 8002674:	4a6b      	ldr	r2, [pc, #428]	@ (8002824 <xTaskIncrementTick+0x214>)
 8002676:	6013      	str	r3, [r2, #0]
 8002678:	f000 f97e 	bl	8002978 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800267c:	4b6a      	ldr	r3, [pc, #424]	@ (8002828 <xTaskIncrementTick+0x218>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	6a3a      	ldr	r2, [r7, #32]
 8002682:	429a      	cmp	r2, r3
 8002684:	f0c0 80a6 	bcc.w	80027d4 <xTaskIncrementTick+0x1c4>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002688:	4b64      	ldr	r3, [pc, #400]	@ (800281c <xTaskIncrementTick+0x20c>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d104      	bne.n	800269c <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002692:	4b65      	ldr	r3, [pc, #404]	@ (8002828 <xTaskIncrementTick+0x218>)
 8002694:	f04f 32ff 	mov.w	r2, #4294967295
 8002698:	601a      	str	r2, [r3, #0]
                    break;
 800269a:	e09b      	b.n	80027d4 <xTaskIncrementTick+0x1c4>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800269c:	4b5f      	ldr	r3, [pc, #380]	@ (800281c <xTaskIncrementTick+0x20c>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80026a6:	69bb      	ldr	r3, [r7, #24]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80026ac:	6a3a      	ldr	r2, [r7, #32]
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d203      	bcs.n	80026bc <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80026b4:	4a5c      	ldr	r2, [pc, #368]	@ (8002828 <xTaskIncrementTick+0x218>)
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80026ba:	e08b      	b.n	80027d4 <xTaskIncrementTick+0x1c4>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80026bc:	69bb      	ldr	r3, [r7, #24]
 80026be:	695b      	ldr	r3, [r3, #20]
 80026c0:	613b      	str	r3, [r7, #16]
 80026c2:	69bb      	ldr	r3, [r7, #24]
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	69ba      	ldr	r2, [r7, #24]
 80026c8:	68d2      	ldr	r2, [r2, #12]
 80026ca:	609a      	str	r2, [r3, #8]
 80026cc:	69bb      	ldr	r3, [r7, #24]
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	69ba      	ldr	r2, [r7, #24]
 80026d2:	6892      	ldr	r2, [r2, #8]
 80026d4:	605a      	str	r2, [r3, #4]
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	685a      	ldr	r2, [r3, #4]
 80026da:	69bb      	ldr	r3, [r7, #24]
 80026dc:	3304      	adds	r3, #4
 80026de:	429a      	cmp	r2, r3
 80026e0:	d103      	bne.n	80026ea <xTaskIncrementTick+0xda>
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	68da      	ldr	r2, [r3, #12]
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	605a      	str	r2, [r3, #4]
 80026ea:	69bb      	ldr	r3, [r7, #24]
 80026ec:	2200      	movs	r2, #0
 80026ee:	615a      	str	r2, [r3, #20]
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	1e5a      	subs	r2, r3, #1
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80026fa:	69bb      	ldr	r3, [r7, #24]
 80026fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d01e      	beq.n	8002740 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002702:	69bb      	ldr	r3, [r7, #24]
 8002704:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002706:	60fb      	str	r3, [r7, #12]
 8002708:	69bb      	ldr	r3, [r7, #24]
 800270a:	69db      	ldr	r3, [r3, #28]
 800270c:	69ba      	ldr	r2, [r7, #24]
 800270e:	6a12      	ldr	r2, [r2, #32]
 8002710:	609a      	str	r2, [r3, #8]
 8002712:	69bb      	ldr	r3, [r7, #24]
 8002714:	6a1b      	ldr	r3, [r3, #32]
 8002716:	69ba      	ldr	r2, [r7, #24]
 8002718:	69d2      	ldr	r2, [r2, #28]
 800271a:	605a      	str	r2, [r3, #4]
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	685a      	ldr	r2, [r3, #4]
 8002720:	69bb      	ldr	r3, [r7, #24]
 8002722:	3318      	adds	r3, #24
 8002724:	429a      	cmp	r2, r3
 8002726:	d103      	bne.n	8002730 <xTaskIncrementTick+0x120>
 8002728:	69bb      	ldr	r3, [r7, #24]
 800272a:	6a1a      	ldr	r2, [r3, #32]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	605a      	str	r2, [r3, #4]
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	2200      	movs	r2, #0
 8002734:	629a      	str	r2, [r3, #40]	@ 0x28
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	1e5a      	subs	r2, r3, #1
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002744:	2201      	movs	r2, #1
 8002746:	409a      	lsls	r2, r3
 8002748:	4b38      	ldr	r3, [pc, #224]	@ (800282c <xTaskIncrementTick+0x21c>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4313      	orrs	r3, r2
 800274e:	4a37      	ldr	r2, [pc, #220]	@ (800282c <xTaskIncrementTick+0x21c>)
 8002750:	6013      	str	r3, [r2, #0]
 8002752:	69bb      	ldr	r3, [r7, #24]
 8002754:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002756:	4936      	ldr	r1, [pc, #216]	@ (8002830 <xTaskIncrementTick+0x220>)
 8002758:	4613      	mov	r3, r2
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	4413      	add	r3, r2
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	440b      	add	r3, r1
 8002762:	3304      	adds	r3, #4
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	60bb      	str	r3, [r7, #8]
 8002768:	69bb      	ldr	r3, [r7, #24]
 800276a:	68ba      	ldr	r2, [r7, #8]
 800276c:	609a      	str	r2, [r3, #8]
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	689a      	ldr	r2, [r3, #8]
 8002772:	69bb      	ldr	r3, [r7, #24]
 8002774:	60da      	str	r2, [r3, #12]
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	69ba      	ldr	r2, [r7, #24]
 800277c:	3204      	adds	r2, #4
 800277e:	605a      	str	r2, [r3, #4]
 8002780:	69bb      	ldr	r3, [r7, #24]
 8002782:	1d1a      	adds	r2, r3, #4
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	609a      	str	r2, [r3, #8]
 8002788:	69bb      	ldr	r3, [r7, #24]
 800278a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800278c:	4613      	mov	r3, r2
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	4413      	add	r3, r2
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	4a26      	ldr	r2, [pc, #152]	@ (8002830 <xTaskIncrementTick+0x220>)
 8002796:	441a      	add	r2, r3
 8002798:	69bb      	ldr	r3, [r7, #24]
 800279a:	615a      	str	r2, [r3, #20]
 800279c:	69bb      	ldr	r3, [r7, #24]
 800279e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80027a0:	4923      	ldr	r1, [pc, #140]	@ (8002830 <xTaskIncrementTick+0x220>)
 80027a2:	4613      	mov	r3, r2
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	4413      	add	r3, r2
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	440b      	add	r3, r1
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	1c59      	adds	r1, r3, #1
 80027b0:	481f      	ldr	r0, [pc, #124]	@ (8002830 <xTaskIncrementTick+0x220>)
 80027b2:	4613      	mov	r3, r2
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	4413      	add	r3, r2
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	4403      	add	r3, r0
 80027bc:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80027be:	69bb      	ldr	r3, [r7, #24]
 80027c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80027c2:	4b1c      	ldr	r3, [pc, #112]	@ (8002834 <xTaskIncrementTick+0x224>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027c8:	429a      	cmp	r2, r3
 80027ca:	f67f af5d 	bls.w	8002688 <xTaskIncrementTick+0x78>
                        {
                            xSwitchRequired = pdTRUE;
 80027ce:	2301      	movs	r3, #1
 80027d0:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80027d2:	e759      	b.n	8002688 <xTaskIncrementTick+0x78>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80027d4:	4b17      	ldr	r3, [pc, #92]	@ (8002834 <xTaskIncrementTick+0x224>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80027da:	4915      	ldr	r1, [pc, #84]	@ (8002830 <xTaskIncrementTick+0x220>)
 80027dc:	4613      	mov	r3, r2
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	4413      	add	r3, r2
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	440b      	add	r3, r1
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d901      	bls.n	80027f0 <xTaskIncrementTick+0x1e0>
            {
                xSwitchRequired = pdTRUE;
 80027ec:	2301      	movs	r3, #1
 80027ee:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 80027f0:	4b11      	ldr	r3, [pc, #68]	@ (8002838 <xTaskIncrementTick+0x228>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d007      	beq.n	8002808 <xTaskIncrementTick+0x1f8>
            {
                xSwitchRequired = pdTRUE;
 80027f8:	2301      	movs	r3, #1
 80027fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80027fc:	e004      	b.n	8002808 <xTaskIncrementTick+0x1f8>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80027fe:	4b0f      	ldr	r3, [pc, #60]	@ (800283c <xTaskIncrementTick+0x22c>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	3301      	adds	r3, #1
 8002804:	4a0d      	ldr	r2, [pc, #52]	@ (800283c <xTaskIncrementTick+0x22c>)
 8002806:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8002808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800280a:	4618      	mov	r0, r3
 800280c:	3728      	adds	r7, #40	@ 0x28
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	20000170 	.word	0x20000170
 8002818:	20000150 	.word	0x20000150
 800281c:	20000108 	.word	0x20000108
 8002820:	2000010c 	.word	0x2000010c
 8002824:	20000164 	.word	0x20000164
 8002828:	2000016c 	.word	0x2000016c
 800282c:	20000154 	.word	0x20000154
 8002830:	2000007c 	.word	0x2000007c
 8002834:	20000078 	.word	0x20000078
 8002838:	20000160 	.word	0x20000160
 800283c:	2000015c 	.word	0x2000015c

08002840 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002840:	b480      	push	{r7}
 8002842:	b087      	sub	sp, #28
 8002844:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002846:	4b27      	ldr	r3, [pc, #156]	@ (80028e4 <vTaskSwitchContext+0xa4>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d003      	beq.n	8002856 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800284e:	4b26      	ldr	r3, [pc, #152]	@ (80028e8 <vTaskSwitchContext+0xa8>)
 8002850:	2201      	movs	r2, #1
 8002852:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8002854:	e040      	b.n	80028d8 <vTaskSwitchContext+0x98>
        xYieldPending = pdFALSE;
 8002856:	4b24      	ldr	r3, [pc, #144]	@ (80028e8 <vTaskSwitchContext+0xa8>)
 8002858:	2200      	movs	r2, #0
 800285a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800285c:	4b23      	ldr	r3, [pc, #140]	@ (80028ec <vTaskSwitchContext+0xac>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	fab3 f383 	clz	r3, r3
 8002868:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800286a:	7afb      	ldrb	r3, [r7, #11]
 800286c:	f1c3 031f 	rsb	r3, r3, #31
 8002870:	617b      	str	r3, [r7, #20]
 8002872:	491f      	ldr	r1, [pc, #124]	@ (80028f0 <vTaskSwitchContext+0xb0>)
 8002874:	697a      	ldr	r2, [r7, #20]
 8002876:	4613      	mov	r3, r2
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	4413      	add	r3, r2
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	440b      	add	r3, r1
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d10b      	bne.n	800289e <vTaskSwitchContext+0x5e>
        __asm volatile
 8002886:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800288a:	f383 8811 	msr	BASEPRI, r3
 800288e:	f3bf 8f6f 	isb	sy
 8002892:	f3bf 8f4f 	dsb	sy
 8002896:	607b      	str	r3, [r7, #4]
    }
 8002898:	bf00      	nop
 800289a:	bf00      	nop
 800289c:	e7fd      	b.n	800289a <vTaskSwitchContext+0x5a>
 800289e:	697a      	ldr	r2, [r7, #20]
 80028a0:	4613      	mov	r3, r2
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	4413      	add	r3, r2
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	4a11      	ldr	r2, [pc, #68]	@ (80028f0 <vTaskSwitchContext+0xb0>)
 80028aa:	4413      	add	r3, r2
 80028ac:	613b      	str	r3, [r7, #16]
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	685a      	ldr	r2, [r3, #4]
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	605a      	str	r2, [r3, #4]
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	685a      	ldr	r2, [r3, #4]
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	3308      	adds	r3, #8
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d104      	bne.n	80028ce <vTaskSwitchContext+0x8e>
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	685a      	ldr	r2, [r3, #4]
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	605a      	str	r2, [r3, #4]
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	4a07      	ldr	r2, [pc, #28]	@ (80028f4 <vTaskSwitchContext+0xb4>)
 80028d6:	6013      	str	r3, [r2, #0]
}
 80028d8:	bf00      	nop
 80028da:	371c      	adds	r7, #28
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr
 80028e4:	20000170 	.word	0x20000170
 80028e8:	20000160 	.word	0x20000160
 80028ec:	20000154 	.word	0x20000154
 80028f0:	2000007c 	.word	0x2000007c
 80028f4:	20000078 	.word	0x20000078

080028f8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80028fe:	2300      	movs	r3, #0
 8002900:	607b      	str	r3, [r7, #4]
 8002902:	e00c      	b.n	800291e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	4613      	mov	r3, r2
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	4413      	add	r3, r2
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	4a12      	ldr	r2, [pc, #72]	@ (8002958 <prvInitialiseTaskLists+0x60>)
 8002910:	4413      	add	r3, r2
 8002912:	4618      	mov	r0, r3
 8002914:	f7ff fbd8 	bl	80020c8 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	3301      	adds	r3, #1
 800291c:	607b      	str	r3, [r7, #4]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2b04      	cmp	r3, #4
 8002922:	d9ef      	bls.n	8002904 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002924:	480d      	ldr	r0, [pc, #52]	@ (800295c <prvInitialiseTaskLists+0x64>)
 8002926:	f7ff fbcf 	bl	80020c8 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800292a:	480d      	ldr	r0, [pc, #52]	@ (8002960 <prvInitialiseTaskLists+0x68>)
 800292c:	f7ff fbcc 	bl	80020c8 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002930:	480c      	ldr	r0, [pc, #48]	@ (8002964 <prvInitialiseTaskLists+0x6c>)
 8002932:	f7ff fbc9 	bl	80020c8 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8002936:	480c      	ldr	r0, [pc, #48]	@ (8002968 <prvInitialiseTaskLists+0x70>)
 8002938:	f7ff fbc6 	bl	80020c8 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 800293c:	480b      	ldr	r0, [pc, #44]	@ (800296c <prvInitialiseTaskLists+0x74>)
 800293e:	f7ff fbc3 	bl	80020c8 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002942:	4b0b      	ldr	r3, [pc, #44]	@ (8002970 <prvInitialiseTaskLists+0x78>)
 8002944:	4a05      	ldr	r2, [pc, #20]	@ (800295c <prvInitialiseTaskLists+0x64>)
 8002946:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002948:	4b0a      	ldr	r3, [pc, #40]	@ (8002974 <prvInitialiseTaskLists+0x7c>)
 800294a:	4a05      	ldr	r2, [pc, #20]	@ (8002960 <prvInitialiseTaskLists+0x68>)
 800294c:	601a      	str	r2, [r3, #0]
}
 800294e:	bf00      	nop
 8002950:	3708      	adds	r7, #8
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	2000007c 	.word	0x2000007c
 800295c:	200000e0 	.word	0x200000e0
 8002960:	200000f4 	.word	0x200000f4
 8002964:	20000110 	.word	0x20000110
 8002968:	20000124 	.word	0x20000124
 800296c:	20000138 	.word	0x20000138
 8002970:	20000108 	.word	0x20000108
 8002974:	2000010c 	.word	0x2000010c

08002978 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002978:	b480      	push	{r7}
 800297a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800297c:	4b0a      	ldr	r3, [pc, #40]	@ (80029a8 <prvResetNextTaskUnblockTime+0x30>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d104      	bne.n	8002990 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002986:	4b09      	ldr	r3, [pc, #36]	@ (80029ac <prvResetNextTaskUnblockTime+0x34>)
 8002988:	f04f 32ff 	mov.w	r2, #4294967295
 800298c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800298e:	e005      	b.n	800299c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002990:	4b05      	ldr	r3, [pc, #20]	@ (80029a8 <prvResetNextTaskUnblockTime+0x30>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a04      	ldr	r2, [pc, #16]	@ (80029ac <prvResetNextTaskUnblockTime+0x34>)
 800299a:	6013      	str	r3, [r2, #0]
}
 800299c:	bf00      	nop
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr
 80029a6:	bf00      	nop
 80029a8:	20000108 	.word	0x20000108
 80029ac:	2000016c 	.word	0x2000016c

080029b0 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80029b0:	b480      	push	{r7}
 80029b2:	b085      	sub	sp, #20
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	60f8      	str	r0, [r7, #12]
 80029b8:	60b9      	str	r1, [r7, #8]
 80029ba:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	3b04      	subs	r3, #4
 80029c0:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80029c8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	3b04      	subs	r3, #4
 80029ce:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	f023 0201 	bic.w	r2, r3, #1
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	3b04      	subs	r3, #4
 80029de:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80029e0:	4a0c      	ldr	r2, [pc, #48]	@ (8002a14 <pxPortInitialiseStack+0x64>)
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	3b14      	subs	r3, #20
 80029ea:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	3b04      	subs	r3, #4
 80029f6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	f06f 0202 	mvn.w	r2, #2
 80029fe:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	3b20      	subs	r3, #32
 8002a04:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002a06:	68fb      	ldr	r3, [r7, #12]
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3714      	adds	r7, #20
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr
 8002a14:	08002a19 	.word	0x08002a19

08002a18 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b085      	sub	sp, #20
 8002a1c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002a22:	4b13      	ldr	r3, [pc, #76]	@ (8002a70 <prvTaskExitError+0x58>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a2a:	d00b      	beq.n	8002a44 <prvTaskExitError+0x2c>
        __asm volatile
 8002a2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a30:	f383 8811 	msr	BASEPRI, r3
 8002a34:	f3bf 8f6f 	isb	sy
 8002a38:	f3bf 8f4f 	dsb	sy
 8002a3c:	60fb      	str	r3, [r7, #12]
    }
 8002a3e:	bf00      	nop
 8002a40:	bf00      	nop
 8002a42:	e7fd      	b.n	8002a40 <prvTaskExitError+0x28>
        __asm volatile
 8002a44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a48:	f383 8811 	msr	BASEPRI, r3
 8002a4c:	f3bf 8f6f 	isb	sy
 8002a50:	f3bf 8f4f 	dsb	sy
 8002a54:	60bb      	str	r3, [r7, #8]
    }
 8002a56:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002a58:	bf00      	nop
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d0fc      	beq.n	8002a5a <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002a60:	bf00      	nop
 8002a62:	bf00      	nop
 8002a64:	3714      	adds	r7, #20
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr
 8002a6e:	bf00      	nop
 8002a70:	2000000c 	.word	0x2000000c
	...

08002a80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002a80:	4b07      	ldr	r3, [pc, #28]	@ (8002aa0 <pxCurrentTCBConst2>)
 8002a82:	6819      	ldr	r1, [r3, #0]
 8002a84:	6808      	ldr	r0, [r1, #0]
 8002a86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a8a:	f380 8809 	msr	PSP, r0
 8002a8e:	f3bf 8f6f 	isb	sy
 8002a92:	f04f 0000 	mov.w	r0, #0
 8002a96:	f380 8811 	msr	BASEPRI, r0
 8002a9a:	4770      	bx	lr
 8002a9c:	f3af 8000 	nop.w

08002aa0 <pxCurrentTCBConst2>:
 8002aa0:	20000078 	.word	0x20000078
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002aa4:	bf00      	nop
 8002aa6:	bf00      	nop

08002aa8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
        __asm volatile
 8002aae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ab2:	f383 8811 	msr	BASEPRI, r3
 8002ab6:	f3bf 8f6f 	isb	sy
 8002aba:	f3bf 8f4f 	dsb	sy
 8002abe:	607b      	str	r3, [r7, #4]
    }
 8002ac0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002ac2:	4b10      	ldr	r3, [pc, #64]	@ (8002b04 <vPortEnterCritical+0x5c>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	3301      	adds	r3, #1
 8002ac8:	4a0e      	ldr	r2, [pc, #56]	@ (8002b04 <vPortEnterCritical+0x5c>)
 8002aca:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8002acc:	4b0d      	ldr	r3, [pc, #52]	@ (8002b04 <vPortEnterCritical+0x5c>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d110      	bne.n	8002af6 <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002ad4:	4b0c      	ldr	r3, [pc, #48]	@ (8002b08 <vPortEnterCritical+0x60>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d00b      	beq.n	8002af6 <vPortEnterCritical+0x4e>
        __asm volatile
 8002ade:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ae2:	f383 8811 	msr	BASEPRI, r3
 8002ae6:	f3bf 8f6f 	isb	sy
 8002aea:	f3bf 8f4f 	dsb	sy
 8002aee:	603b      	str	r3, [r7, #0]
    }
 8002af0:	bf00      	nop
 8002af2:	bf00      	nop
 8002af4:	e7fd      	b.n	8002af2 <vPortEnterCritical+0x4a>
    }
}
 8002af6:	bf00      	nop
 8002af8:	370c      	adds	r7, #12
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop
 8002b04:	2000000c 	.word	0x2000000c
 8002b08:	e000ed04 	.word	0xe000ed04

08002b0c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8002b12:	4b12      	ldr	r3, [pc, #72]	@ (8002b5c <vPortExitCritical+0x50>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d10b      	bne.n	8002b32 <vPortExitCritical+0x26>
        __asm volatile
 8002b1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b1e:	f383 8811 	msr	BASEPRI, r3
 8002b22:	f3bf 8f6f 	isb	sy
 8002b26:	f3bf 8f4f 	dsb	sy
 8002b2a:	607b      	str	r3, [r7, #4]
    }
 8002b2c:	bf00      	nop
 8002b2e:	bf00      	nop
 8002b30:	e7fd      	b.n	8002b2e <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8002b32:	4b0a      	ldr	r3, [pc, #40]	@ (8002b5c <vPortExitCritical+0x50>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	3b01      	subs	r3, #1
 8002b38:	4a08      	ldr	r2, [pc, #32]	@ (8002b5c <vPortExitCritical+0x50>)
 8002b3a:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002b3c:	4b07      	ldr	r3, [pc, #28]	@ (8002b5c <vPortExitCritical+0x50>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d105      	bne.n	8002b50 <vPortExitCritical+0x44>
 8002b44:	2300      	movs	r3, #0
 8002b46:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002b4e:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8002b50:	bf00      	nop
 8002b52:	370c      	adds	r7, #12
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr
 8002b5c:	2000000c 	.word	0x2000000c

08002b60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002b60:	f3ef 8009 	mrs	r0, PSP
 8002b64:	f3bf 8f6f 	isb	sy
 8002b68:	4b15      	ldr	r3, [pc, #84]	@ (8002bc0 <pxCurrentTCBConst>)
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	f01e 0f10 	tst.w	lr, #16
 8002b70:	bf08      	it	eq
 8002b72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002b76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b7a:	6010      	str	r0, [r2, #0]
 8002b7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002b80:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8002b84:	f380 8811 	msr	BASEPRI, r0
 8002b88:	f3bf 8f4f 	dsb	sy
 8002b8c:	f3bf 8f6f 	isb	sy
 8002b90:	f7ff fe56 	bl	8002840 <vTaskSwitchContext>
 8002b94:	f04f 0000 	mov.w	r0, #0
 8002b98:	f380 8811 	msr	BASEPRI, r0
 8002b9c:	bc09      	pop	{r0, r3}
 8002b9e:	6819      	ldr	r1, [r3, #0]
 8002ba0:	6808      	ldr	r0, [r1, #0]
 8002ba2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ba6:	f01e 0f10 	tst.w	lr, #16
 8002baa:	bf08      	it	eq
 8002bac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002bb0:	f380 8809 	msr	PSP, r0
 8002bb4:	f3bf 8f6f 	isb	sy
 8002bb8:	4770      	bx	lr
 8002bba:	bf00      	nop
 8002bbc:	f3af 8000 	nop.w

08002bc0 <pxCurrentTCBConst>:
 8002bc0:	20000078 	.word	0x20000078
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002bc4:	bf00      	nop
 8002bc6:	bf00      	nop

08002bc8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0
        __asm volatile
 8002bce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bd2:	f383 8811 	msr	BASEPRI, r3
 8002bd6:	f3bf 8f6f 	isb	sy
 8002bda:	f3bf 8f4f 	dsb	sy
 8002bde:	607b      	str	r3, [r7, #4]
    }
 8002be0:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002be2:	f7ff fd15 	bl	8002610 <xTaskIncrementTick>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d003      	beq.n	8002bf4 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002bec:	4b06      	ldr	r3, [pc, #24]	@ (8002c08 <SysTick_Handler+0x40>)
 8002bee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002bf2:	601a      	str	r2, [r3, #0]
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	f383 8811 	msr	BASEPRI, r3
    }
 8002bfe:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8002c00:	bf00      	nop
 8002c02:	3708      	adds	r7, #8
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	e000ed04 	.word	0xe000ed04

08002c0c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b08a      	sub	sp, #40	@ 0x28
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8002c14:	2300      	movs	r3, #0
 8002c16:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8002c18:	f7ff fbf0 	bl	80023fc <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8002c1c:	4b54      	ldr	r3, [pc, #336]	@ (8002d70 <pvPortMalloc+0x164>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d101      	bne.n	8002c28 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8002c24:	f000 f90c 	bl	8002e40 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d012      	beq.n	8002c54 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8002c2e:	2208      	movs	r2, #8
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f003 0307 	and.w	r3, r3, #7
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	3308      	adds	r3, #8
 8002c3a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8002c3c:	69bb      	ldr	r3, [r7, #24]
 8002c3e:	43db      	mvns	r3, r3
 8002c40:	687a      	ldr	r2, [r7, #4]
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d804      	bhi.n	8002c50 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	69bb      	ldr	r3, [r7, #24]
 8002c4a:	4413      	add	r3, r2
 8002c4c:	607b      	str	r3, [r7, #4]
 8002c4e:	e001      	b.n	8002c54 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8002c50:	2300      	movs	r3, #0
 8002c52:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	db71      	blt.n	8002d3e <pvPortMalloc+0x132>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d06e      	beq.n	8002d3e <pvPortMalloc+0x132>
 8002c60:	4b44      	ldr	r3, [pc, #272]	@ (8002d74 <pvPortMalloc+0x168>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	687a      	ldr	r2, [r7, #4]
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d869      	bhi.n	8002d3e <pvPortMalloc+0x132>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8002c6a:	4b43      	ldr	r3, [pc, #268]	@ (8002d78 <pvPortMalloc+0x16c>)
 8002c6c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8002c6e:	4b42      	ldr	r3, [pc, #264]	@ (8002d78 <pvPortMalloc+0x16c>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002c74:	e004      	b.n	8002c80 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8002c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c78:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8002c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	687a      	ldr	r2, [r7, #4]
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d903      	bls.n	8002c92 <pvPortMalloc+0x86>
 8002c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d1f1      	bne.n	8002c76 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8002c92:	4b37      	ldr	r3, [pc, #220]	@ (8002d70 <pvPortMalloc+0x164>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d050      	beq.n	8002d3e <pvPortMalloc+0x132>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002c9c:	6a3b      	ldr	r3, [r7, #32]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2208      	movs	r2, #8
 8002ca2:	4413      	add	r3, r2
 8002ca4:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	6a3b      	ldr	r3, [r7, #32]
 8002cac:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cb0:	685a      	ldr	r2, [r3, #4]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	1ad2      	subs	r2, r2, r3
 8002cb6:	2308      	movs	r3, #8
 8002cb8:	005b      	lsls	r3, r3, #1
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d920      	bls.n	8002d00 <pvPortMalloc+0xf4>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002cbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	4413      	add	r3, r2
 8002cc4:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	f003 0307 	and.w	r3, r3, #7
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d00b      	beq.n	8002ce8 <pvPortMalloc+0xdc>
        __asm volatile
 8002cd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cd4:	f383 8811 	msr	BASEPRI, r3
 8002cd8:	f3bf 8f6f 	isb	sy
 8002cdc:	f3bf 8f4f 	dsb	sy
 8002ce0:	613b      	str	r3, [r7, #16]
    }
 8002ce2:	bf00      	nop
 8002ce4:	bf00      	nop
 8002ce6:	e7fd      	b.n	8002ce4 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cea:	685a      	ldr	r2, [r3, #4]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	1ad2      	subs	r2, r2, r3
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8002cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002cfa:	6978      	ldr	r0, [r7, #20]
 8002cfc:	f000 f8fc 	bl	8002ef8 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002d00:	4b1c      	ldr	r3, [pc, #112]	@ (8002d74 <pvPortMalloc+0x168>)
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	4a1a      	ldr	r2, [pc, #104]	@ (8002d74 <pvPortMalloc+0x168>)
 8002d0c:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002d0e:	4b19      	ldr	r3, [pc, #100]	@ (8002d74 <pvPortMalloc+0x168>)
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	4b1a      	ldr	r3, [pc, #104]	@ (8002d7c <pvPortMalloc+0x170>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d203      	bcs.n	8002d22 <pvPortMalloc+0x116>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002d1a:	4b16      	ldr	r3, [pc, #88]	@ (8002d74 <pvPortMalloc+0x168>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a17      	ldr	r2, [pc, #92]	@ (8002d7c <pvPortMalloc+0x170>)
 8002d20:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8002d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d2c:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8002d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d30:	2200      	movs	r2, #0
 8002d32:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8002d34:	4b12      	ldr	r3, [pc, #72]	@ (8002d80 <pvPortMalloc+0x174>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	3301      	adds	r3, #1
 8002d3a:	4a11      	ldr	r2, [pc, #68]	@ (8002d80 <pvPortMalloc+0x174>)
 8002d3c:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8002d3e:	f7ff fb6b 	bl	8002418 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	f003 0307 	and.w	r3, r3, #7
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d00b      	beq.n	8002d64 <pvPortMalloc+0x158>
        __asm volatile
 8002d4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d50:	f383 8811 	msr	BASEPRI, r3
 8002d54:	f3bf 8f6f 	isb	sy
 8002d58:	f3bf 8f4f 	dsb	sy
 8002d5c:	60fb      	str	r3, [r7, #12]
    }
 8002d5e:	bf00      	nop
 8002d60:	bf00      	nop
 8002d62:	e7fd      	b.n	8002d60 <pvPortMalloc+0x154>
    return pvReturn;
 8002d64:	69fb      	ldr	r3, [r7, #28]
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3728      	adds	r7, #40	@ 0x28
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	20012d7c 	.word	0x20012d7c
 8002d74:	20012d80 	.word	0x20012d80
 8002d78:	20012d74 	.word	0x20012d74
 8002d7c:	20012d84 	.word	0x20012d84
 8002d80:	20012d88 	.word	0x20012d88

08002d84 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b086      	sub	sp, #24
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d04b      	beq.n	8002e2e <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8002d96:	2308      	movs	r3, #8
 8002d98:	425b      	negs	r3, r3
 8002d9a:	697a      	ldr	r2, [r7, #20]
 8002d9c:	4413      	add	r3, r2
 8002d9e:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	db0b      	blt.n	8002dc4 <vPortFree+0x40>
        __asm volatile
 8002dac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002db0:	f383 8811 	msr	BASEPRI, r3
 8002db4:	f3bf 8f6f 	isb	sy
 8002db8:	f3bf 8f4f 	dsb	sy
 8002dbc:	60fb      	str	r3, [r7, #12]
    }
 8002dbe:	bf00      	nop
 8002dc0:	bf00      	nop
 8002dc2:	e7fd      	b.n	8002dc0 <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d00b      	beq.n	8002de4 <vPortFree+0x60>
        __asm volatile
 8002dcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002dd0:	f383 8811 	msr	BASEPRI, r3
 8002dd4:	f3bf 8f6f 	isb	sy
 8002dd8:	f3bf 8f4f 	dsb	sy
 8002ddc:	60bb      	str	r3, [r7, #8]
    }
 8002dde:	bf00      	nop
 8002de0:	bf00      	nop
 8002de2:	e7fd      	b.n	8002de0 <vPortFree+0x5c>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	0fdb      	lsrs	r3, r3, #31
 8002dea:	f003 0301 	and.w	r3, r3, #1
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d01c      	beq.n	8002e2e <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d118      	bne.n	8002e2e <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8002e08:	f7ff faf8 	bl	80023fc <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	685a      	ldr	r2, [r3, #4]
 8002e10:	4b09      	ldr	r3, [pc, #36]	@ (8002e38 <vPortFree+0xb4>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4413      	add	r3, r2
 8002e16:	4a08      	ldr	r2, [pc, #32]	@ (8002e38 <vPortFree+0xb4>)
 8002e18:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002e1a:	6938      	ldr	r0, [r7, #16]
 8002e1c:	f000 f86c 	bl	8002ef8 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8002e20:	4b06      	ldr	r3, [pc, #24]	@ (8002e3c <vPortFree+0xb8>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	3301      	adds	r3, #1
 8002e26:	4a05      	ldr	r2, [pc, #20]	@ (8002e3c <vPortFree+0xb8>)
 8002e28:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8002e2a:	f7ff faf5 	bl	8002418 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8002e2e:	bf00      	nop
 8002e30:	3718      	adds	r7, #24
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	20012d80 	.word	0x20012d80
 8002e3c:	20012d8c 	.word	0x20012d8c

08002e40 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8002e40:	b480      	push	{r7}
 8002e42:	b085      	sub	sp, #20
 8002e44:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002e46:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 8002e4a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8002e4c:	4b25      	ldr	r3, [pc, #148]	@ (8002ee4 <prvHeapInit+0xa4>)
 8002e4e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	f003 0307 	and.w	r3, r3, #7
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d00c      	beq.n	8002e74 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	3307      	adds	r3, #7
 8002e5e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f023 0307 	bic.w	r3, r3, #7
 8002e66:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8002e68:	68ba      	ldr	r2, [r7, #8]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	4a1d      	ldr	r2, [pc, #116]	@ (8002ee4 <prvHeapInit+0xa4>)
 8002e70:	4413      	add	r3, r2
 8002e72:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002e78:	4a1b      	ldr	r2, [pc, #108]	@ (8002ee8 <prvHeapInit+0xa8>)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8002e7e:	4b1a      	ldr	r3, [pc, #104]	@ (8002ee8 <prvHeapInit+0xa8>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	68ba      	ldr	r2, [r7, #8]
 8002e88:	4413      	add	r3, r2
 8002e8a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8002e8c:	2208      	movs	r2, #8
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	1a9b      	subs	r3, r3, r2
 8002e92:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f023 0307 	bic.w	r3, r3, #7
 8002e9a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	4a13      	ldr	r2, [pc, #76]	@ (8002eec <prvHeapInit+0xac>)
 8002ea0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8002ea2:	4b12      	ldr	r3, [pc, #72]	@ (8002eec <prvHeapInit+0xac>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8002eaa:	4b10      	ldr	r3, [pc, #64]	@ (8002eec <prvHeapInit+0xac>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	68fa      	ldr	r2, [r7, #12]
 8002eba:	1ad2      	subs	r2, r2, r3
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002ec0:	4b0a      	ldr	r3, [pc, #40]	@ (8002eec <prvHeapInit+0xac>)
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	4a08      	ldr	r2, [pc, #32]	@ (8002ef0 <prvHeapInit+0xb0>)
 8002ece:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	4a07      	ldr	r2, [pc, #28]	@ (8002ef4 <prvHeapInit+0xb4>)
 8002ed6:	6013      	str	r3, [r2, #0]
}
 8002ed8:	bf00      	nop
 8002eda:	3714      	adds	r7, #20
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr
 8002ee4:	20000174 	.word	0x20000174
 8002ee8:	20012d74 	.word	0x20012d74
 8002eec:	20012d7c 	.word	0x20012d7c
 8002ef0:	20012d84 	.word	0x20012d84
 8002ef4:	20012d80 	.word	0x20012d80

08002ef8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b085      	sub	sp, #20
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002f00:	4b28      	ldr	r3, [pc, #160]	@ (8002fa4 <prvInsertBlockIntoFreeList+0xac>)
 8002f02:	60fb      	str	r3, [r7, #12]
 8002f04:	e002      	b.n	8002f0c <prvInsertBlockIntoFreeList+0x14>
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	60fb      	str	r3, [r7, #12]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d8f7      	bhi.n	8002f06 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	68ba      	ldr	r2, [r7, #8]
 8002f20:	4413      	add	r3, r2
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d108      	bne.n	8002f3a <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	685a      	ldr	r2, [r3, #4]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	441a      	add	r2, r3
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	68ba      	ldr	r2, [r7, #8]
 8002f44:	441a      	add	r2, r3
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d118      	bne.n	8002f80 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	4b15      	ldr	r3, [pc, #84]	@ (8002fa8 <prvInsertBlockIntoFreeList+0xb0>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d00d      	beq.n	8002f76 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	685a      	ldr	r2, [r3, #4]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	441a      	add	r2, r3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	601a      	str	r2, [r3, #0]
 8002f74:	e008      	b.n	8002f88 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002f76:	4b0c      	ldr	r3, [pc, #48]	@ (8002fa8 <prvInsertBlockIntoFreeList+0xb0>)
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	601a      	str	r2, [r3, #0]
 8002f7e:	e003      	b.n	8002f88 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8002f88:	68fa      	ldr	r2, [r7, #12]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d002      	beq.n	8002f96 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002f96:	bf00      	nop
 8002f98:	3714      	adds	r7, #20
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr
 8002fa2:	bf00      	nop
 8002fa4:	20012d74 	.word	0x20012d74
 8002fa8:	20012d7c 	.word	0x20012d7c

08002fac <memset>:
 8002fac:	4402      	add	r2, r0
 8002fae:	4603      	mov	r3, r0
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d100      	bne.n	8002fb6 <memset+0xa>
 8002fb4:	4770      	bx	lr
 8002fb6:	f803 1b01 	strb.w	r1, [r3], #1
 8002fba:	e7f9      	b.n	8002fb0 <memset+0x4>

08002fbc <__libc_init_array>:
 8002fbc:	b570      	push	{r4, r5, r6, lr}
 8002fbe:	4d0d      	ldr	r5, [pc, #52]	@ (8002ff4 <__libc_init_array+0x38>)
 8002fc0:	4c0d      	ldr	r4, [pc, #52]	@ (8002ff8 <__libc_init_array+0x3c>)
 8002fc2:	1b64      	subs	r4, r4, r5
 8002fc4:	10a4      	asrs	r4, r4, #2
 8002fc6:	2600      	movs	r6, #0
 8002fc8:	42a6      	cmp	r6, r4
 8002fca:	d109      	bne.n	8002fe0 <__libc_init_array+0x24>
 8002fcc:	4d0b      	ldr	r5, [pc, #44]	@ (8002ffc <__libc_init_array+0x40>)
 8002fce:	4c0c      	ldr	r4, [pc, #48]	@ (8003000 <__libc_init_array+0x44>)
 8002fd0:	f000 f818 	bl	8003004 <_init>
 8002fd4:	1b64      	subs	r4, r4, r5
 8002fd6:	10a4      	asrs	r4, r4, #2
 8002fd8:	2600      	movs	r6, #0
 8002fda:	42a6      	cmp	r6, r4
 8002fdc:	d105      	bne.n	8002fea <__libc_init_array+0x2e>
 8002fde:	bd70      	pop	{r4, r5, r6, pc}
 8002fe0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fe4:	4798      	blx	r3
 8002fe6:	3601      	adds	r6, #1
 8002fe8:	e7ee      	b.n	8002fc8 <__libc_init_array+0xc>
 8002fea:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fee:	4798      	blx	r3
 8002ff0:	3601      	adds	r6, #1
 8002ff2:	e7f2      	b.n	8002fda <__libc_init_array+0x1e>
 8002ff4:	0800307c 	.word	0x0800307c
 8002ff8:	0800307c 	.word	0x0800307c
 8002ffc:	0800307c 	.word	0x0800307c
 8003000:	08003080 	.word	0x08003080

08003004 <_init>:
 8003004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003006:	bf00      	nop
 8003008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800300a:	bc08      	pop	{r3}
 800300c:	469e      	mov	lr, r3
 800300e:	4770      	bx	lr

08003010 <_fini>:
 8003010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003012:	bf00      	nop
 8003014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003016:	bc08      	pop	{r3}
 8003018:	469e      	mov	lr, r3
 800301a:	4770      	bx	lr
