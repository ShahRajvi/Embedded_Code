
FreeRTOS_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c08  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08004dd8  08004dd8  00005dd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e48  08004e48  00006070  2**0
                  CONTENTS
  4 .ARM          00000008  08004e48  08004e48  00005e48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e50  08004e50  00006070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e50  08004e50  00005e50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004e54  08004e54  00005e54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08004e58  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012f5c  20000070  08004ec8  00006070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20012fcc  08004ec8  00006fcc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f621  00000000  00000000  000060a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029d7  00000000  00000000  000156c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fc0  00000000  00000000  00018098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c19  00000000  00000000  00019058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023b83  00000000  00000000  00019c71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000129fd  00000000  00000000  0003d7f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d93b3  00000000  00000000  000501f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001295a4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004770  00000000  00000000  001295e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000083  00000000  00000000  0012dd58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004dc0 	.word	0x08004dc0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08004dc0 	.word	0x08004dc0

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b96a 	b.w	80004fc <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	460c      	mov	r4, r1
 8000248:	2b00      	cmp	r3, #0
 800024a:	d14e      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024c:	4694      	mov	ip, r2
 800024e:	458c      	cmp	ip, r1
 8000250:	4686      	mov	lr, r0
 8000252:	fab2 f282 	clz	r2, r2
 8000256:	d962      	bls.n	800031e <__udivmoddi4+0xde>
 8000258:	b14a      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025a:	f1c2 0320 	rsb	r3, r2, #32
 800025e:	4091      	lsls	r1, r2
 8000260:	fa20 f303 	lsr.w	r3, r0, r3
 8000264:	fa0c fc02 	lsl.w	ip, ip, r2
 8000268:	4319      	orrs	r1, r3
 800026a:	fa00 fe02 	lsl.w	lr, r0, r2
 800026e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000272:	fa1f f68c 	uxth.w	r6, ip
 8000276:	fbb1 f4f7 	udiv	r4, r1, r7
 800027a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800027e:	fb07 1114 	mls	r1, r7, r4, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb04 f106 	mul.w	r1, r4, r6
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f104 30ff 	add.w	r0, r4, #4294967295
 8000296:	f080 8112 	bcs.w	80004be <__udivmoddi4+0x27e>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 810f 	bls.w	80004be <__udivmoddi4+0x27e>
 80002a0:	3c02      	subs	r4, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a59      	subs	r1, r3, r1
 80002a6:	fa1f f38e 	uxth.w	r3, lr
 80002aa:	fbb1 f0f7 	udiv	r0, r1, r7
 80002ae:	fb07 1110 	mls	r1, r7, r0, r1
 80002b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002b6:	fb00 f606 	mul.w	r6, r0, r6
 80002ba:	429e      	cmp	r6, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x94>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002c6:	f080 80fc 	bcs.w	80004c2 <__udivmoddi4+0x282>
 80002ca:	429e      	cmp	r6, r3
 80002cc:	f240 80f9 	bls.w	80004c2 <__udivmoddi4+0x282>
 80002d0:	4463      	add	r3, ip
 80002d2:	3802      	subs	r0, #2
 80002d4:	1b9b      	subs	r3, r3, r6
 80002d6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002da:	2100      	movs	r1, #0
 80002dc:	b11d      	cbz	r5, 80002e6 <__udivmoddi4+0xa6>
 80002de:	40d3      	lsrs	r3, r2
 80002e0:	2200      	movs	r2, #0
 80002e2:	e9c5 3200 	strd	r3, r2, [r5]
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d905      	bls.n	80002fa <__udivmoddi4+0xba>
 80002ee:	b10d      	cbz	r5, 80002f4 <__udivmoddi4+0xb4>
 80002f0:	e9c5 0100 	strd	r0, r1, [r5]
 80002f4:	2100      	movs	r1, #0
 80002f6:	4608      	mov	r0, r1
 80002f8:	e7f5      	b.n	80002e6 <__udivmoddi4+0xa6>
 80002fa:	fab3 f183 	clz	r1, r3
 80002fe:	2900      	cmp	r1, #0
 8000300:	d146      	bne.n	8000390 <__udivmoddi4+0x150>
 8000302:	42a3      	cmp	r3, r4
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xcc>
 8000306:	4290      	cmp	r0, r2
 8000308:	f0c0 80f0 	bcc.w	80004ec <__udivmoddi4+0x2ac>
 800030c:	1a86      	subs	r6, r0, r2
 800030e:	eb64 0303 	sbc.w	r3, r4, r3
 8000312:	2001      	movs	r0, #1
 8000314:	2d00      	cmp	r5, #0
 8000316:	d0e6      	beq.n	80002e6 <__udivmoddi4+0xa6>
 8000318:	e9c5 6300 	strd	r6, r3, [r5]
 800031c:	e7e3      	b.n	80002e6 <__udivmoddi4+0xa6>
 800031e:	2a00      	cmp	r2, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x204>
 8000324:	eba1 040c 	sub.w	r4, r1, ip
 8000328:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800032c:	fa1f f78c 	uxth.w	r7, ip
 8000330:	2101      	movs	r1, #1
 8000332:	fbb4 f6f8 	udiv	r6, r4, r8
 8000336:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033a:	fb08 4416 	mls	r4, r8, r6, r4
 800033e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000342:	fb07 f006 	mul.w	r0, r7, r6
 8000346:	4298      	cmp	r0, r3
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x11c>
 800034a:	eb1c 0303 	adds.w	r3, ip, r3
 800034e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x11a>
 8000354:	4298      	cmp	r0, r3
 8000356:	f200 80cd 	bhi.w	80004f4 <__udivmoddi4+0x2b4>
 800035a:	4626      	mov	r6, r4
 800035c:	1a1c      	subs	r4, r3, r0
 800035e:	fa1f f38e 	uxth.w	r3, lr
 8000362:	fbb4 f0f8 	udiv	r0, r4, r8
 8000366:	fb08 4410 	mls	r4, r8, r0, r4
 800036a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036e:	fb00 f707 	mul.w	r7, r0, r7
 8000372:	429f      	cmp	r7, r3
 8000374:	d908      	bls.n	8000388 <__udivmoddi4+0x148>
 8000376:	eb1c 0303 	adds.w	r3, ip, r3
 800037a:	f100 34ff 	add.w	r4, r0, #4294967295
 800037e:	d202      	bcs.n	8000386 <__udivmoddi4+0x146>
 8000380:	429f      	cmp	r7, r3
 8000382:	f200 80b0 	bhi.w	80004e6 <__udivmoddi4+0x2a6>
 8000386:	4620      	mov	r0, r4
 8000388:	1bdb      	subs	r3, r3, r7
 800038a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800038e:	e7a5      	b.n	80002dc <__udivmoddi4+0x9c>
 8000390:	f1c1 0620 	rsb	r6, r1, #32
 8000394:	408b      	lsls	r3, r1
 8000396:	fa22 f706 	lsr.w	r7, r2, r6
 800039a:	431f      	orrs	r7, r3
 800039c:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a0:	fa04 f301 	lsl.w	r3, r4, r1
 80003a4:	ea43 030c 	orr.w	r3, r3, ip
 80003a8:	40f4      	lsrs	r4, r6
 80003aa:	fa00 f801 	lsl.w	r8, r0, r1
 80003ae:	0c38      	lsrs	r0, r7, #16
 80003b0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003b4:	fbb4 fef0 	udiv	lr, r4, r0
 80003b8:	fa1f fc87 	uxth.w	ip, r7
 80003bc:	fb00 441e 	mls	r4, r0, lr, r4
 80003c0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c4:	fb0e f90c 	mul.w	r9, lr, ip
 80003c8:	45a1      	cmp	r9, r4
 80003ca:	fa02 f201 	lsl.w	r2, r2, r1
 80003ce:	d90a      	bls.n	80003e6 <__udivmoddi4+0x1a6>
 80003d0:	193c      	adds	r4, r7, r4
 80003d2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003d6:	f080 8084 	bcs.w	80004e2 <__udivmoddi4+0x2a2>
 80003da:	45a1      	cmp	r9, r4
 80003dc:	f240 8081 	bls.w	80004e2 <__udivmoddi4+0x2a2>
 80003e0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003e4:	443c      	add	r4, r7
 80003e6:	eba4 0409 	sub.w	r4, r4, r9
 80003ea:	fa1f f983 	uxth.w	r9, r3
 80003ee:	fbb4 f3f0 	udiv	r3, r4, r0
 80003f2:	fb00 4413 	mls	r4, r0, r3, r4
 80003f6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003fa:	fb03 fc0c 	mul.w	ip, r3, ip
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d907      	bls.n	8000412 <__udivmoddi4+0x1d2>
 8000402:	193c      	adds	r4, r7, r4
 8000404:	f103 30ff 	add.w	r0, r3, #4294967295
 8000408:	d267      	bcs.n	80004da <__udivmoddi4+0x29a>
 800040a:	45a4      	cmp	ip, r4
 800040c:	d965      	bls.n	80004da <__udivmoddi4+0x29a>
 800040e:	3b02      	subs	r3, #2
 8000410:	443c      	add	r4, r7
 8000412:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000416:	fba0 9302 	umull	r9, r3, r0, r2
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	429c      	cmp	r4, r3
 8000420:	46ce      	mov	lr, r9
 8000422:	469c      	mov	ip, r3
 8000424:	d351      	bcc.n	80004ca <__udivmoddi4+0x28a>
 8000426:	d04e      	beq.n	80004c6 <__udivmoddi4+0x286>
 8000428:	b155      	cbz	r5, 8000440 <__udivmoddi4+0x200>
 800042a:	ebb8 030e 	subs.w	r3, r8, lr
 800042e:	eb64 040c 	sbc.w	r4, r4, ip
 8000432:	fa04 f606 	lsl.w	r6, r4, r6
 8000436:	40cb      	lsrs	r3, r1
 8000438:	431e      	orrs	r6, r3
 800043a:	40cc      	lsrs	r4, r1
 800043c:	e9c5 6400 	strd	r6, r4, [r5]
 8000440:	2100      	movs	r1, #0
 8000442:	e750      	b.n	80002e6 <__udivmoddi4+0xa6>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f103 	lsr.w	r1, r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa24 f303 	lsr.w	r3, r4, r3
 8000454:	4094      	lsls	r4, r2
 8000456:	430c      	orrs	r4, r1
 8000458:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800045c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000460:	fa1f f78c 	uxth.w	r7, ip
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3110 	mls	r1, r8, r0, r3
 800046c:	0c23      	lsrs	r3, r4, #16
 800046e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000472:	fb00 f107 	mul.w	r1, r0, r7
 8000476:	4299      	cmp	r1, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x24c>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000482:	d22c      	bcs.n	80004de <__udivmoddi4+0x29e>
 8000484:	4299      	cmp	r1, r3
 8000486:	d92a      	bls.n	80004de <__udivmoddi4+0x29e>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b2a4      	uxth	r4, r4
 8000490:	fbb3 f1f8 	udiv	r1, r3, r8
 8000494:	fb08 3311 	mls	r3, r8, r1, r3
 8000498:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800049c:	fb01 f307 	mul.w	r3, r1, r7
 80004a0:	42a3      	cmp	r3, r4
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x276>
 80004a4:	eb1c 0404 	adds.w	r4, ip, r4
 80004a8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004ac:	d213      	bcs.n	80004d6 <__udivmoddi4+0x296>
 80004ae:	42a3      	cmp	r3, r4
 80004b0:	d911      	bls.n	80004d6 <__udivmoddi4+0x296>
 80004b2:	3902      	subs	r1, #2
 80004b4:	4464      	add	r4, ip
 80004b6:	1ae4      	subs	r4, r4, r3
 80004b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004bc:	e739      	b.n	8000332 <__udivmoddi4+0xf2>
 80004be:	4604      	mov	r4, r0
 80004c0:	e6f0      	b.n	80002a4 <__udivmoddi4+0x64>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e706      	b.n	80002d4 <__udivmoddi4+0x94>
 80004c6:	45c8      	cmp	r8, r9
 80004c8:	d2ae      	bcs.n	8000428 <__udivmoddi4+0x1e8>
 80004ca:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ce:	eb63 0c07 	sbc.w	ip, r3, r7
 80004d2:	3801      	subs	r0, #1
 80004d4:	e7a8      	b.n	8000428 <__udivmoddi4+0x1e8>
 80004d6:	4631      	mov	r1, r6
 80004d8:	e7ed      	b.n	80004b6 <__udivmoddi4+0x276>
 80004da:	4603      	mov	r3, r0
 80004dc:	e799      	b.n	8000412 <__udivmoddi4+0x1d2>
 80004de:	4630      	mov	r0, r6
 80004e0:	e7d4      	b.n	800048c <__udivmoddi4+0x24c>
 80004e2:	46d6      	mov	lr, sl
 80004e4:	e77f      	b.n	80003e6 <__udivmoddi4+0x1a6>
 80004e6:	4463      	add	r3, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e74d      	b.n	8000388 <__udivmoddi4+0x148>
 80004ec:	4606      	mov	r6, r0
 80004ee:	4623      	mov	r3, r4
 80004f0:	4608      	mov	r0, r1
 80004f2:	e70f      	b.n	8000314 <__udivmoddi4+0xd4>
 80004f4:	3e02      	subs	r6, #2
 80004f6:	4463      	add	r3, ip
 80004f8:	e730      	b.n	800035c <__udivmoddi4+0x11c>
 80004fa:	bf00      	nop

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b088      	sub	sp, #32
 8000504:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000506:	f000 fb11 	bl	8000b2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050a:	f000 f847 	bl	800059c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050e:	f000 f8b3 	bl	8000678 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  status = xTaskCreate(task1_handler, "Task-1",200, "Hello World from Task 1", 2, &task1_handle );
 8000512:	f107 0308 	add.w	r3, r7, #8
 8000516:	9301      	str	r3, [sp, #4]
 8000518:	2302      	movs	r3, #2
 800051a:	9300      	str	r3, [sp, #0]
 800051c:	4b19      	ldr	r3, [pc, #100]	@ (8000584 <main+0x84>)
 800051e:	22c8      	movs	r2, #200	@ 0xc8
 8000520:	4919      	ldr	r1, [pc, #100]	@ (8000588 <main+0x88>)
 8000522:	481a      	ldr	r0, [pc, #104]	@ (800058c <main+0x8c>)
 8000524:	f002 f9ec 	bl	8002900 <xTaskCreate>
 8000528:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 800052a:	697b      	ldr	r3, [r7, #20]
 800052c:	2b01      	cmp	r3, #1
 800052e:	d00b      	beq.n	8000548 <main+0x48>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000530:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000534:	f383 8811 	msr	BASEPRI, r3
 8000538:	f3bf 8f6f 	isb	sy
 800053c:	f3bf 8f4f 	dsb	sy
 8000540:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000542:	bf00      	nop
 8000544:	bf00      	nop
 8000546:	e7fd      	b.n	8000544 <main+0x44>

  status = xTaskCreate(task2_handler, "Task-2",200, "Hello World from Task 2", 2, &task2_handle );
 8000548:	1d3b      	adds	r3, r7, #4
 800054a:	9301      	str	r3, [sp, #4]
 800054c:	2302      	movs	r3, #2
 800054e:	9300      	str	r3, [sp, #0]
 8000550:	4b0f      	ldr	r3, [pc, #60]	@ (8000590 <main+0x90>)
 8000552:	22c8      	movs	r2, #200	@ 0xc8
 8000554:	490f      	ldr	r1, [pc, #60]	@ (8000594 <main+0x94>)
 8000556:	4810      	ldr	r0, [pc, #64]	@ (8000598 <main+0x98>)
 8000558:	f002 f9d2 	bl	8002900 <xTaskCreate>
 800055c:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 800055e:	697b      	ldr	r3, [r7, #20]
 8000560:	2b01      	cmp	r3, #1
 8000562:	d00b      	beq.n	800057c <main+0x7c>
        __asm volatile
 8000564:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000568:	f383 8811 	msr	BASEPRI, r3
 800056c:	f3bf 8f6f 	isb	sy
 8000570:	f3bf 8f4f 	dsb	sy
 8000574:	60fb      	str	r3, [r7, #12]
    }
 8000576:	bf00      	nop
 8000578:	bf00      	nop
 800057a:	e7fd      	b.n	8000578 <main+0x78>
  // start FreeRTOS scheduler
  vTaskStartScheduler();
 800057c:	f002 fb1e 	bl	8002bbc <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000580:	bf00      	nop
 8000582:	e7fd      	b.n	8000580 <main+0x80>
 8000584:	08004dd8 	.word	0x08004dd8
 8000588:	08004df0 	.word	0x08004df0
 800058c:	08000775 	.word	0x08000775
 8000590:	08004df8 	.word	0x08004df8
 8000594:	08004e10 	.word	0x08004e10
 8000598:	0800079d 	.word	0x0800079d

0800059c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b094      	sub	sp, #80	@ 0x50
 80005a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005a2:	f107 031c 	add.w	r3, r7, #28
 80005a6:	2234      	movs	r2, #52	@ 0x34
 80005a8:	2100      	movs	r1, #0
 80005aa:	4618      	mov	r0, r3
 80005ac:	f004 f93e 	bl	800482c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b0:	f107 0308 	add.w	r3, r7, #8
 80005b4:	2200      	movs	r2, #0
 80005b6:	601a      	str	r2, [r3, #0]
 80005b8:	605a      	str	r2, [r3, #4]
 80005ba:	609a      	str	r2, [r3, #8]
 80005bc:	60da      	str	r2, [r3, #12]
 80005be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c0:	2300      	movs	r3, #0
 80005c2:	607b      	str	r3, [r7, #4]
 80005c4:	4b2a      	ldr	r3, [pc, #168]	@ (8000670 <SystemClock_Config+0xd4>)
 80005c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005c8:	4a29      	ldr	r2, [pc, #164]	@ (8000670 <SystemClock_Config+0xd4>)
 80005ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80005d0:	4b27      	ldr	r3, [pc, #156]	@ (8000670 <SystemClock_Config+0xd4>)
 80005d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005d8:	607b      	str	r3, [r7, #4]
 80005da:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005dc:	2300      	movs	r3, #0
 80005de:	603b      	str	r3, [r7, #0]
 80005e0:	4b24      	ldr	r3, [pc, #144]	@ (8000674 <SystemClock_Config+0xd8>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80005e8:	4a22      	ldr	r2, [pc, #136]	@ (8000674 <SystemClock_Config+0xd8>)
 80005ea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005ee:	6013      	str	r3, [r2, #0]
 80005f0:	4b20      	ldr	r3, [pc, #128]	@ (8000674 <SystemClock_Config+0xd8>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005f8:	603b      	str	r3, [r7, #0]
 80005fa:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005fc:	2302      	movs	r3, #2
 80005fe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000600:	2301      	movs	r3, #1
 8000602:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000604:	2310      	movs	r3, #16
 8000606:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000608:	2302      	movs	r3, #2
 800060a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800060c:	2300      	movs	r3, #0
 800060e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000610:	2310      	movs	r3, #16
 8000612:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000614:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000618:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800061a:	2304      	movs	r3, #4
 800061c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800061e:	2302      	movs	r3, #2
 8000620:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000622:	2302      	movs	r3, #2
 8000624:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000626:	f107 031c 	add.w	r3, r7, #28
 800062a:	4618      	mov	r0, r3
 800062c:	f001 f8b8 	bl	80017a0 <HAL_RCC_OscConfig>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000636:	f000 f8d7 	bl	80007e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800063a:	230f      	movs	r3, #15
 800063c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800063e:	2302      	movs	r3, #2
 8000640:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000642:	2300      	movs	r3, #0
 8000644:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000646:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800064a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800064c:	2300      	movs	r3, #0
 800064e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000650:	f107 0308 	add.w	r3, r7, #8
 8000654:	2102      	movs	r1, #2
 8000656:	4618      	mov	r0, r3
 8000658:	f000 fd3a 	bl	80010d0 <HAL_RCC_ClockConfig>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000662:	f000 f8c1 	bl	80007e8 <Error_Handler>
  }
}
 8000666:	bf00      	nop
 8000668:	3750      	adds	r7, #80	@ 0x50
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	40023800 	.word	0x40023800
 8000674:	40007000 	.word	0x40007000

08000678 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b08a      	sub	sp, #40	@ 0x28
 800067c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067e:	f107 0314 	add.w	r3, r7, #20
 8000682:	2200      	movs	r2, #0
 8000684:	601a      	str	r2, [r3, #0]
 8000686:	605a      	str	r2, [r3, #4]
 8000688:	609a      	str	r2, [r3, #8]
 800068a:	60da      	str	r2, [r3, #12]
 800068c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800068e:	2300      	movs	r3, #0
 8000690:	613b      	str	r3, [r7, #16]
 8000692:	4b35      	ldr	r3, [pc, #212]	@ (8000768 <MX_GPIO_Init+0xf0>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000696:	4a34      	ldr	r2, [pc, #208]	@ (8000768 <MX_GPIO_Init+0xf0>)
 8000698:	f043 0304 	orr.w	r3, r3, #4
 800069c:	6313      	str	r3, [r2, #48]	@ 0x30
 800069e:	4b32      	ldr	r3, [pc, #200]	@ (8000768 <MX_GPIO_Init+0xf0>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a2:	f003 0304 	and.w	r3, r3, #4
 80006a6:	613b      	str	r3, [r7, #16]
 80006a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006aa:	2300      	movs	r3, #0
 80006ac:	60fb      	str	r3, [r7, #12]
 80006ae:	4b2e      	ldr	r3, [pc, #184]	@ (8000768 <MX_GPIO_Init+0xf0>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006b2:	4a2d      	ldr	r2, [pc, #180]	@ (8000768 <MX_GPIO_Init+0xf0>)
 80006b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ba:	4b2b      	ldr	r3, [pc, #172]	@ (8000768 <MX_GPIO_Init+0xf0>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006c2:	60fb      	str	r3, [r7, #12]
 80006c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c6:	2300      	movs	r3, #0
 80006c8:	60bb      	str	r3, [r7, #8]
 80006ca:	4b27      	ldr	r3, [pc, #156]	@ (8000768 <MX_GPIO_Init+0xf0>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ce:	4a26      	ldr	r2, [pc, #152]	@ (8000768 <MX_GPIO_Init+0xf0>)
 80006d0:	f043 0301 	orr.w	r3, r3, #1
 80006d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006d6:	4b24      	ldr	r3, [pc, #144]	@ (8000768 <MX_GPIO_Init+0xf0>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006da:	f003 0301 	and.w	r3, r3, #1
 80006de:	60bb      	str	r3, [r7, #8]
 80006e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006e2:	2300      	movs	r3, #0
 80006e4:	607b      	str	r3, [r7, #4]
 80006e6:	4b20      	ldr	r3, [pc, #128]	@ (8000768 <MX_GPIO_Init+0xf0>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ea:	4a1f      	ldr	r2, [pc, #124]	@ (8000768 <MX_GPIO_Init+0xf0>)
 80006ec:	f043 0302 	orr.w	r3, r3, #2
 80006f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006f2:	4b1d      	ldr	r3, [pc, #116]	@ (8000768 <MX_GPIO_Init+0xf0>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f6:	f003 0302 	and.w	r3, r3, #2
 80006fa:	607b      	str	r3, [r7, #4]
 80006fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006fe:	2200      	movs	r2, #0
 8000700:	2120      	movs	r1, #32
 8000702:	481a      	ldr	r0, [pc, #104]	@ (800076c <MX_GPIO_Init+0xf4>)
 8000704:	f000 fcca 	bl	800109c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000708:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800070c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800070e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000712:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000714:	2300      	movs	r3, #0
 8000716:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000718:	f107 0314 	add.w	r3, r7, #20
 800071c:	4619      	mov	r1, r3
 800071e:	4814      	ldr	r0, [pc, #80]	@ (8000770 <MX_GPIO_Init+0xf8>)
 8000720:	f000 fb28 	bl	8000d74 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000724:	230c      	movs	r3, #12
 8000726:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000728:	2302      	movs	r3, #2
 800072a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072c:	2300      	movs	r3, #0
 800072e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000730:	2303      	movs	r3, #3
 8000732:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000734:	2307      	movs	r3, #7
 8000736:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000738:	f107 0314 	add.w	r3, r7, #20
 800073c:	4619      	mov	r1, r3
 800073e:	480b      	ldr	r0, [pc, #44]	@ (800076c <MX_GPIO_Init+0xf4>)
 8000740:	f000 fb18 	bl	8000d74 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000744:	2320      	movs	r3, #32
 8000746:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000748:	2301      	movs	r3, #1
 800074a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074c:	2300      	movs	r3, #0
 800074e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000750:	2300      	movs	r3, #0
 8000752:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000754:	f107 0314 	add.w	r3, r7, #20
 8000758:	4619      	mov	r1, r3
 800075a:	4804      	ldr	r0, [pc, #16]	@ (800076c <MX_GPIO_Init+0xf4>)
 800075c:	f000 fb0a 	bl	8000d74 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000760:	bf00      	nop
 8000762:	3728      	adds	r7, #40	@ 0x28
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	40023800 	.word	0x40023800
 800076c:	40020000 	.word	0x40020000
 8000770:	40020800 	.word	0x40020800

08000774 <task1_handler>:

/* USER CODE BEGIN 4 */

static void task1_handler(void* parameters){
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
	while(1){
		printf("%s\n", (char*) parameters);
 800077c:	6878      	ldr	r0, [r7, #4]
 800077e:	f003 ff75 	bl	800466c <puts>
		// Cooperative scheduling
		taskYIELD();
 8000782:	4b05      	ldr	r3, [pc, #20]	@ (8000798 <task1_handler+0x24>)
 8000784:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000788:	601a      	str	r2, [r3, #0]
 800078a:	f3bf 8f4f 	dsb	sy
 800078e:	f3bf 8f6f 	isb	sy
		printf("%s\n", (char*) parameters);
 8000792:	bf00      	nop
 8000794:	e7f2      	b.n	800077c <task1_handler+0x8>
 8000796:	bf00      	nop
 8000798:	e000ed04 	.word	0xe000ed04

0800079c <task2_handler>:
	}

}

static void task2_handler(void* parameters){
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
	while(1){
		printf("%s\n", (char*)parameters);
 80007a4:	6878      	ldr	r0, [r7, #4]
 80007a6:	f003 ff61 	bl	800466c <puts>
		// Cooperative scheduling
		taskYIELD();
 80007aa:	4b05      	ldr	r3, [pc, #20]	@ (80007c0 <task2_handler+0x24>)
 80007ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80007b0:	601a      	str	r2, [r3, #0]
 80007b2:	f3bf 8f4f 	dsb	sy
 80007b6:	f3bf 8f6f 	isb	sy
		printf("%s\n", (char*)parameters);
 80007ba:	bf00      	nop
 80007bc:	e7f2      	b.n	80007a4 <task2_handler+0x8>
 80007be:	bf00      	nop
 80007c0:	e000ed04 	.word	0xe000ed04

080007c4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a04      	ldr	r2, [pc, #16]	@ (80007e4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007d2:	4293      	cmp	r3, r2
 80007d4:	d101      	bne.n	80007da <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007d6:	f000 f9cb 	bl	8000b70 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007da:	bf00      	nop
 80007dc:	3708      	adds	r7, #8
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	40001000 	.word	0x40001000

080007e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007ec:	b672      	cpsid	i
}
 80007ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007f0:	bf00      	nop
 80007f2:	e7fd      	b.n	80007f0 <Error_Handler+0x8>

080007f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b083      	sub	sp, #12
 80007f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	607b      	str	r3, [r7, #4]
 80007fe:	4b10      	ldr	r3, [pc, #64]	@ (8000840 <HAL_MspInit+0x4c>)
 8000800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000802:	4a0f      	ldr	r2, [pc, #60]	@ (8000840 <HAL_MspInit+0x4c>)
 8000804:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000808:	6453      	str	r3, [r2, #68]	@ 0x44
 800080a:	4b0d      	ldr	r3, [pc, #52]	@ (8000840 <HAL_MspInit+0x4c>)
 800080c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800080e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	603b      	str	r3, [r7, #0]
 800081a:	4b09      	ldr	r3, [pc, #36]	@ (8000840 <HAL_MspInit+0x4c>)
 800081c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800081e:	4a08      	ldr	r2, [pc, #32]	@ (8000840 <HAL_MspInit+0x4c>)
 8000820:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000824:	6413      	str	r3, [r2, #64]	@ 0x40
 8000826:	4b06      	ldr	r3, [pc, #24]	@ (8000840 <HAL_MspInit+0x4c>)
 8000828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800082a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800082e:	603b      	str	r3, [r7, #0]
 8000830:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000832:	bf00      	nop
 8000834:	370c      	adds	r7, #12
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr
 800083e:	bf00      	nop
 8000840:	40023800 	.word	0x40023800

08000844 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b08e      	sub	sp, #56	@ 0x38
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800084c:	2300      	movs	r3, #0
 800084e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000850:	2300      	movs	r3, #0
 8000852:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000854:	2300      	movs	r3, #0
 8000856:	60fb      	str	r3, [r7, #12]
 8000858:	4b33      	ldr	r3, [pc, #204]	@ (8000928 <HAL_InitTick+0xe4>)
 800085a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800085c:	4a32      	ldr	r2, [pc, #200]	@ (8000928 <HAL_InitTick+0xe4>)
 800085e:	f043 0310 	orr.w	r3, r3, #16
 8000862:	6413      	str	r3, [r2, #64]	@ 0x40
 8000864:	4b30      	ldr	r3, [pc, #192]	@ (8000928 <HAL_InitTick+0xe4>)
 8000866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000868:	f003 0310 	and.w	r3, r3, #16
 800086c:	60fb      	str	r3, [r7, #12]
 800086e:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000870:	f107 0210 	add.w	r2, r7, #16
 8000874:	f107 0314 	add.w	r3, r7, #20
 8000878:	4611      	mov	r1, r2
 800087a:	4618      	mov	r0, r3
 800087c:	f000 fd2e 	bl	80012dc <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000880:	6a3b      	ldr	r3, [r7, #32]
 8000882:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000884:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000886:	2b00      	cmp	r3, #0
 8000888:	d103      	bne.n	8000892 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800088a:	f000 fd13 	bl	80012b4 <HAL_RCC_GetPCLK1Freq>
 800088e:	6378      	str	r0, [r7, #52]	@ 0x34
 8000890:	e004      	b.n	800089c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000892:	f000 fd0f 	bl	80012b4 <HAL_RCC_GetPCLK1Freq>
 8000896:	4603      	mov	r3, r0
 8000898:	005b      	lsls	r3, r3, #1
 800089a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800089c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800089e:	4a23      	ldr	r2, [pc, #140]	@ (800092c <HAL_InitTick+0xe8>)
 80008a0:	fba2 2303 	umull	r2, r3, r2, r3
 80008a4:	0c9b      	lsrs	r3, r3, #18
 80008a6:	3b01      	subs	r3, #1
 80008a8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80008aa:	4b21      	ldr	r3, [pc, #132]	@ (8000930 <HAL_InitTick+0xec>)
 80008ac:	4a21      	ldr	r2, [pc, #132]	@ (8000934 <HAL_InitTick+0xf0>)
 80008ae:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80008b0:	4b1f      	ldr	r3, [pc, #124]	@ (8000930 <HAL_InitTick+0xec>)
 80008b2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80008b6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80008b8:	4a1d      	ldr	r2, [pc, #116]	@ (8000930 <HAL_InitTick+0xec>)
 80008ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80008bc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80008be:	4b1c      	ldr	r3, [pc, #112]	@ (8000930 <HAL_InitTick+0xec>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008c4:	4b1a      	ldr	r3, [pc, #104]	@ (8000930 <HAL_InitTick+0xec>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008ca:	4b19      	ldr	r3, [pc, #100]	@ (8000930 <HAL_InitTick+0xec>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80008d0:	4817      	ldr	r0, [pc, #92]	@ (8000930 <HAL_InitTick+0xec>)
 80008d2:	f001 fa03 	bl	8001cdc <HAL_TIM_Base_Init>
 80008d6:	4603      	mov	r3, r0
 80008d8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80008dc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d11b      	bne.n	800091c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80008e4:	4812      	ldr	r0, [pc, #72]	@ (8000930 <HAL_InitTick+0xec>)
 80008e6:	f001 fa53 	bl	8001d90 <HAL_TIM_Base_Start_IT>
 80008ea:	4603      	mov	r3, r0
 80008ec:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80008f0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d111      	bne.n	800091c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80008f8:	2036      	movs	r0, #54	@ 0x36
 80008fa:	f000 fa2d 	bl	8000d58 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	2b0f      	cmp	r3, #15
 8000902:	d808      	bhi.n	8000916 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000904:	2200      	movs	r2, #0
 8000906:	6879      	ldr	r1, [r7, #4]
 8000908:	2036      	movs	r0, #54	@ 0x36
 800090a:	f000 fa09 	bl	8000d20 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800090e:	4a0a      	ldr	r2, [pc, #40]	@ (8000938 <HAL_InitTick+0xf4>)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	6013      	str	r3, [r2, #0]
 8000914:	e002      	b.n	800091c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000916:	2301      	movs	r3, #1
 8000918:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800091c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000920:	4618      	mov	r0, r3
 8000922:	3738      	adds	r7, #56	@ 0x38
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	40023800 	.word	0x40023800
 800092c:	431bde83 	.word	0x431bde83
 8000930:	2000008c 	.word	0x2000008c
 8000934:	40001000 	.word	0x40001000
 8000938:	20000004 	.word	0x20000004

0800093c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000940:	bf00      	nop
 8000942:	e7fd      	b.n	8000940 <NMI_Handler+0x4>

08000944 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000948:	bf00      	nop
 800094a:	e7fd      	b.n	8000948 <HardFault_Handler+0x4>

0800094c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000950:	bf00      	nop
 8000952:	e7fd      	b.n	8000950 <MemManage_Handler+0x4>

08000954 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000958:	bf00      	nop
 800095a:	e7fd      	b.n	8000958 <BusFault_Handler+0x4>

0800095c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000960:	bf00      	nop
 8000962:	e7fd      	b.n	8000960 <UsageFault_Handler+0x4>

08000964 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000968:	bf00      	nop
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr
	...

08000974 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000978:	4802      	ldr	r0, [pc, #8]	@ (8000984 <TIM6_DAC_IRQHandler+0x10>)
 800097a:	f001 fa79 	bl	8001e70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800097e:	bf00      	nop
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	2000008c 	.word	0x2000008c

08000988 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000988:	b480      	push	{r7}
 800098a:	b083      	sub	sp, #12
 800098c:	af00      	add	r7, sp, #0
 800098e:	4603      	mov	r3, r0
 8000990:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000992:	4b0f      	ldr	r3, [pc, #60]	@ (80009d0 <ITM_SendChar+0x48>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	4a0e      	ldr	r2, [pc, #56]	@ (80009d0 <ITM_SendChar+0x48>)
 8000998:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800099c:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 800099e:	4b0d      	ldr	r3, [pc, #52]	@ (80009d4 <ITM_SendChar+0x4c>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	4a0c      	ldr	r2, [pc, #48]	@ (80009d4 <ITM_SendChar+0x4c>)
 80009a4:	f043 0301 	orr.w	r3, r3, #1
 80009a8:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80009aa:	bf00      	nop
 80009ac:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	f003 0301 	and.w	r3, r3, #1
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d0f8      	beq.n	80009ac <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80009ba:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 80009be:	79fb      	ldrb	r3, [r7, #7]
 80009c0:	6013      	str	r3, [r2, #0]
}
 80009c2:	bf00      	nop
 80009c4:	370c      	adds	r7, #12
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop
 80009d0:	e000edfc 	.word	0xe000edfc
 80009d4:	e0000e00 	.word	0xe0000e00

080009d8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b086      	sub	sp, #24
 80009dc:	af00      	add	r7, sp, #0
 80009de:	60f8      	str	r0, [r7, #12]
 80009e0:	60b9      	str	r1, [r7, #8]
 80009e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009e4:	2300      	movs	r3, #0
 80009e6:	617b      	str	r3, [r7, #20]
 80009e8:	e00a      	b.n	8000a00 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80009ea:	f3af 8000 	nop.w
 80009ee:	4601      	mov	r1, r0
 80009f0:	68bb      	ldr	r3, [r7, #8]
 80009f2:	1c5a      	adds	r2, r3, #1
 80009f4:	60ba      	str	r2, [r7, #8]
 80009f6:	b2ca      	uxtb	r2, r1
 80009f8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009fa:	697b      	ldr	r3, [r7, #20]
 80009fc:	3301      	adds	r3, #1
 80009fe:	617b      	str	r3, [r7, #20]
 8000a00:	697a      	ldr	r2, [r7, #20]
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	429a      	cmp	r2, r3
 8000a06:	dbf0      	blt.n	80009ea <_read+0x12>
  }

  return len;
 8000a08:	687b      	ldr	r3, [r7, #4]
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	3718      	adds	r7, #24
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}

08000a12 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a12:	b580      	push	{r7, lr}
 8000a14:	b086      	sub	sp, #24
 8000a16:	af00      	add	r7, sp, #0
 8000a18:	60f8      	str	r0, [r7, #12]
 8000a1a:	60b9      	str	r1, [r7, #8]
 8000a1c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a1e:	2300      	movs	r3, #0
 8000a20:	617b      	str	r3, [r7, #20]
 8000a22:	e009      	b.n	8000a38 <_write+0x26>
  {
    //__io_putchar(*ptr++);
    ITM_SendChar(*ptr++);
 8000a24:	68bb      	ldr	r3, [r7, #8]
 8000a26:	1c5a      	adds	r2, r3, #1
 8000a28:	60ba      	str	r2, [r7, #8]
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f7ff ffab 	bl	8000988 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a32:	697b      	ldr	r3, [r7, #20]
 8000a34:	3301      	adds	r3, #1
 8000a36:	617b      	str	r3, [r7, #20]
 8000a38:	697a      	ldr	r2, [r7, #20]
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	429a      	cmp	r2, r3
 8000a3e:	dbf1      	blt.n	8000a24 <_write+0x12>
  }
  return len;
 8000a40:	687b      	ldr	r3, [r7, #4]
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	3718      	adds	r7, #24
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}

08000a4a <_close>:

int _close(int file)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	b083      	sub	sp, #12
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a52:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	370c      	adds	r7, #12
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr

08000a62 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a62:	b480      	push	{r7}
 8000a64:	b083      	sub	sp, #12
 8000a66:	af00      	add	r7, sp, #0
 8000a68:	6078      	str	r0, [r7, #4]
 8000a6a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a72:	605a      	str	r2, [r3, #4]
  return 0;
 8000a74:	2300      	movs	r3, #0
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	370c      	adds	r7, #12
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr

08000a82 <_isatty>:

int _isatty(int file)
{
 8000a82:	b480      	push	{r7}
 8000a84:	b083      	sub	sp, #12
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a8a:	2301      	movs	r3, #1
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	370c      	adds	r7, #12
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr

08000a98 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b085      	sub	sp, #20
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	60f8      	str	r0, [r7, #12]
 8000aa0:	60b9      	str	r1, [r7, #8]
 8000aa2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000aa4:	2300      	movs	r3, #0
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	3714      	adds	r7, #20
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
	...

08000ab4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ab8:	4b06      	ldr	r3, [pc, #24]	@ (8000ad4 <SystemInit+0x20>)
 8000aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000abe:	4a05      	ldr	r2, [pc, #20]	@ (8000ad4 <SystemInit+0x20>)
 8000ac0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ac4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ac8:	bf00      	nop
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	e000ed00 	.word	0xe000ed00

08000ad8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ad8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b10 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000adc:	f7ff ffea 	bl	8000ab4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ae0:	480c      	ldr	r0, [pc, #48]	@ (8000b14 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ae2:	490d      	ldr	r1, [pc, #52]	@ (8000b18 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ae4:	4a0d      	ldr	r2, [pc, #52]	@ (8000b1c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ae6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ae8:	e002      	b.n	8000af0 <LoopCopyDataInit>

08000aea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000aec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aee:	3304      	adds	r3, #4

08000af0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000af0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000af2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000af4:	d3f9      	bcc.n	8000aea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000af6:	4a0a      	ldr	r2, [pc, #40]	@ (8000b20 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000af8:	4c0a      	ldr	r4, [pc, #40]	@ (8000b24 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000afa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000afc:	e001      	b.n	8000b02 <LoopFillZerobss>

08000afe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000afe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b00:	3204      	adds	r2, #4

08000b02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b04:	d3fb      	bcc.n	8000afe <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000b06:	f003 fedf 	bl	80048c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b0a:	f7ff fcf9 	bl	8000500 <main>
  bx  lr    
 8000b0e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b10:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b18:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000b1c:	08004e58 	.word	0x08004e58
  ldr r2, =_sbss
 8000b20:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000b24:	20012fcc 	.word	0x20012fcc

08000b28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b28:	e7fe      	b.n	8000b28 <ADC_IRQHandler>
	...

08000b2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b30:	4b0e      	ldr	r3, [pc, #56]	@ (8000b6c <HAL_Init+0x40>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a0d      	ldr	r2, [pc, #52]	@ (8000b6c <HAL_Init+0x40>)
 8000b36:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b3a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b3c:	4b0b      	ldr	r3, [pc, #44]	@ (8000b6c <HAL_Init+0x40>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a0a      	ldr	r2, [pc, #40]	@ (8000b6c <HAL_Init+0x40>)
 8000b42:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b46:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b48:	4b08      	ldr	r3, [pc, #32]	@ (8000b6c <HAL_Init+0x40>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a07      	ldr	r2, [pc, #28]	@ (8000b6c <HAL_Init+0x40>)
 8000b4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b54:	2003      	movs	r0, #3
 8000b56:	f000 f8d8 	bl	8000d0a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b5a:	2000      	movs	r0, #0
 8000b5c:	f7ff fe72 	bl	8000844 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b60:	f7ff fe48 	bl	80007f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b64:	2300      	movs	r3, #0
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40023c00 	.word	0x40023c00

08000b70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b74:	4b06      	ldr	r3, [pc, #24]	@ (8000b90 <HAL_IncTick+0x20>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	461a      	mov	r2, r3
 8000b7a:	4b06      	ldr	r3, [pc, #24]	@ (8000b94 <HAL_IncTick+0x24>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	4413      	add	r3, r2
 8000b80:	4a04      	ldr	r2, [pc, #16]	@ (8000b94 <HAL_IncTick+0x24>)
 8000b82:	6013      	str	r3, [r2, #0]
}
 8000b84:	bf00      	nop
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	20000008 	.word	0x20000008
 8000b94:	200000d4 	.word	0x200000d4

08000b98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b9c:	4b03      	ldr	r3, [pc, #12]	@ (8000bac <HAL_GetTick+0x14>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	200000d4 	.word	0x200000d4

08000bb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b085      	sub	sp, #20
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	f003 0307 	and.w	r3, r3, #7
 8000bbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bc0:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf4 <__NVIC_SetPriorityGrouping+0x44>)
 8000bc2:	68db      	ldr	r3, [r3, #12]
 8000bc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bc6:	68ba      	ldr	r2, [r7, #8]
 8000bc8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000bcc:	4013      	ands	r3, r2
 8000bce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bd8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000bdc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000be0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000be2:	4a04      	ldr	r2, [pc, #16]	@ (8000bf4 <__NVIC_SetPriorityGrouping+0x44>)
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	60d3      	str	r3, [r2, #12]
}
 8000be8:	bf00      	nop
 8000bea:	3714      	adds	r7, #20
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr
 8000bf4:	e000ed00 	.word	0xe000ed00

08000bf8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bfc:	4b04      	ldr	r3, [pc, #16]	@ (8000c10 <__NVIC_GetPriorityGrouping+0x18>)
 8000bfe:	68db      	ldr	r3, [r3, #12]
 8000c00:	0a1b      	lsrs	r3, r3, #8
 8000c02:	f003 0307 	and.w	r3, r3, #7
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr
 8000c10:	e000ed00 	.word	0xe000ed00

08000c14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	db0b      	blt.n	8000c3e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c26:	79fb      	ldrb	r3, [r7, #7]
 8000c28:	f003 021f 	and.w	r2, r3, #31
 8000c2c:	4907      	ldr	r1, [pc, #28]	@ (8000c4c <__NVIC_EnableIRQ+0x38>)
 8000c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c32:	095b      	lsrs	r3, r3, #5
 8000c34:	2001      	movs	r0, #1
 8000c36:	fa00 f202 	lsl.w	r2, r0, r2
 8000c3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c3e:	bf00      	nop
 8000c40:	370c      	adds	r7, #12
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	e000e100 	.word	0xe000e100

08000c50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	4603      	mov	r3, r0
 8000c58:	6039      	str	r1, [r7, #0]
 8000c5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	db0a      	blt.n	8000c7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	b2da      	uxtb	r2, r3
 8000c68:	490c      	ldr	r1, [pc, #48]	@ (8000c9c <__NVIC_SetPriority+0x4c>)
 8000c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6e:	0112      	lsls	r2, r2, #4
 8000c70:	b2d2      	uxtb	r2, r2
 8000c72:	440b      	add	r3, r1
 8000c74:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c78:	e00a      	b.n	8000c90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	b2da      	uxtb	r2, r3
 8000c7e:	4908      	ldr	r1, [pc, #32]	@ (8000ca0 <__NVIC_SetPriority+0x50>)
 8000c80:	79fb      	ldrb	r3, [r7, #7]
 8000c82:	f003 030f 	and.w	r3, r3, #15
 8000c86:	3b04      	subs	r3, #4
 8000c88:	0112      	lsls	r2, r2, #4
 8000c8a:	b2d2      	uxtb	r2, r2
 8000c8c:	440b      	add	r3, r1
 8000c8e:	761a      	strb	r2, [r3, #24]
}
 8000c90:	bf00      	nop
 8000c92:	370c      	adds	r7, #12
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr
 8000c9c:	e000e100 	.word	0xe000e100
 8000ca0:	e000ed00 	.word	0xe000ed00

08000ca4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b089      	sub	sp, #36	@ 0x24
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	60f8      	str	r0, [r7, #12]
 8000cac:	60b9      	str	r1, [r7, #8]
 8000cae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	f003 0307 	and.w	r3, r3, #7
 8000cb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cb8:	69fb      	ldr	r3, [r7, #28]
 8000cba:	f1c3 0307 	rsb	r3, r3, #7
 8000cbe:	2b04      	cmp	r3, #4
 8000cc0:	bf28      	it	cs
 8000cc2:	2304      	movcs	r3, #4
 8000cc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cc6:	69fb      	ldr	r3, [r7, #28]
 8000cc8:	3304      	adds	r3, #4
 8000cca:	2b06      	cmp	r3, #6
 8000ccc:	d902      	bls.n	8000cd4 <NVIC_EncodePriority+0x30>
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	3b03      	subs	r3, #3
 8000cd2:	e000      	b.n	8000cd6 <NVIC_EncodePriority+0x32>
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cd8:	f04f 32ff 	mov.w	r2, #4294967295
 8000cdc:	69bb      	ldr	r3, [r7, #24]
 8000cde:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce2:	43da      	mvns	r2, r3
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	401a      	ands	r2, r3
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cec:	f04f 31ff 	mov.w	r1, #4294967295
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf6:	43d9      	mvns	r1, r3
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cfc:	4313      	orrs	r3, r2
         );
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3724      	adds	r7, #36	@ 0x24
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr

08000d0a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	b082      	sub	sp, #8
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d12:	6878      	ldr	r0, [r7, #4]
 8000d14:	f7ff ff4c 	bl	8000bb0 <__NVIC_SetPriorityGrouping>
}
 8000d18:	bf00      	nop
 8000d1a:	3708      	adds	r7, #8
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}

08000d20 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b086      	sub	sp, #24
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	60b9      	str	r1, [r7, #8]
 8000d2a:	607a      	str	r2, [r7, #4]
 8000d2c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d32:	f7ff ff61 	bl	8000bf8 <__NVIC_GetPriorityGrouping>
 8000d36:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d38:	687a      	ldr	r2, [r7, #4]
 8000d3a:	68b9      	ldr	r1, [r7, #8]
 8000d3c:	6978      	ldr	r0, [r7, #20]
 8000d3e:	f7ff ffb1 	bl	8000ca4 <NVIC_EncodePriority>
 8000d42:	4602      	mov	r2, r0
 8000d44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d48:	4611      	mov	r1, r2
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f7ff ff80 	bl	8000c50 <__NVIC_SetPriority>
}
 8000d50:	bf00      	nop
 8000d52:	3718      	adds	r7, #24
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}

08000d58 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4603      	mov	r3, r0
 8000d60:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d66:	4618      	mov	r0, r3
 8000d68:	f7ff ff54 	bl	8000c14 <__NVIC_EnableIRQ>
}
 8000d6c:	bf00      	nop
 8000d6e:	3708      	adds	r7, #8
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b089      	sub	sp, #36	@ 0x24
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d82:	2300      	movs	r3, #0
 8000d84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d86:	2300      	movs	r3, #0
 8000d88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	61fb      	str	r3, [r7, #28]
 8000d8e:	e165      	b.n	800105c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d90:	2201      	movs	r2, #1
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	fa02 f303 	lsl.w	r3, r2, r3
 8000d98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	697a      	ldr	r2, [r7, #20]
 8000da0:	4013      	ands	r3, r2
 8000da2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000da4:	693a      	ldr	r2, [r7, #16]
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	429a      	cmp	r2, r3
 8000daa:	f040 8154 	bne.w	8001056 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	f003 0303 	and.w	r3, r3, #3
 8000db6:	2b01      	cmp	r3, #1
 8000db8:	d005      	beq.n	8000dc6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dc2:	2b02      	cmp	r3, #2
 8000dc4:	d130      	bne.n	8000e28 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	689b      	ldr	r3, [r3, #8]
 8000dca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000dcc:	69fb      	ldr	r3, [r7, #28]
 8000dce:	005b      	lsls	r3, r3, #1
 8000dd0:	2203      	movs	r2, #3
 8000dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd6:	43db      	mvns	r3, r3
 8000dd8:	69ba      	ldr	r2, [r7, #24]
 8000dda:	4013      	ands	r3, r2
 8000ddc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	68da      	ldr	r2, [r3, #12]
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	005b      	lsls	r3, r3, #1
 8000de6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dea:	69ba      	ldr	r2, [r7, #24]
 8000dec:	4313      	orrs	r3, r2
 8000dee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	69ba      	ldr	r2, [r7, #24]
 8000df4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	fa02 f303 	lsl.w	r3, r2, r3
 8000e04:	43db      	mvns	r3, r3
 8000e06:	69ba      	ldr	r2, [r7, #24]
 8000e08:	4013      	ands	r3, r2
 8000e0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	091b      	lsrs	r3, r3, #4
 8000e12:	f003 0201 	and.w	r2, r3, #1
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1c:	69ba      	ldr	r2, [r7, #24]
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	69ba      	ldr	r2, [r7, #24]
 8000e26:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	f003 0303 	and.w	r3, r3, #3
 8000e30:	2b03      	cmp	r3, #3
 8000e32:	d017      	beq.n	8000e64 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	68db      	ldr	r3, [r3, #12]
 8000e38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	005b      	lsls	r3, r3, #1
 8000e3e:	2203      	movs	r2, #3
 8000e40:	fa02 f303 	lsl.w	r3, r2, r3
 8000e44:	43db      	mvns	r3, r3
 8000e46:	69ba      	ldr	r2, [r7, #24]
 8000e48:	4013      	ands	r3, r2
 8000e4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	689a      	ldr	r2, [r3, #8]
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	005b      	lsls	r3, r3, #1
 8000e54:	fa02 f303 	lsl.w	r3, r2, r3
 8000e58:	69ba      	ldr	r2, [r7, #24]
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	f003 0303 	and.w	r3, r3, #3
 8000e6c:	2b02      	cmp	r3, #2
 8000e6e:	d123      	bne.n	8000eb8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e70:	69fb      	ldr	r3, [r7, #28]
 8000e72:	08da      	lsrs	r2, r3, #3
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	3208      	adds	r2, #8
 8000e78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	f003 0307 	and.w	r3, r3, #7
 8000e84:	009b      	lsls	r3, r3, #2
 8000e86:	220f      	movs	r2, #15
 8000e88:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8c:	43db      	mvns	r3, r3
 8000e8e:	69ba      	ldr	r2, [r7, #24]
 8000e90:	4013      	ands	r3, r2
 8000e92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	691a      	ldr	r2, [r3, #16]
 8000e98:	69fb      	ldr	r3, [r7, #28]
 8000e9a:	f003 0307 	and.w	r3, r3, #7
 8000e9e:	009b      	lsls	r3, r3, #2
 8000ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea4:	69ba      	ldr	r2, [r7, #24]
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	08da      	lsrs	r2, r3, #3
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	3208      	adds	r2, #8
 8000eb2:	69b9      	ldr	r1, [r7, #24]
 8000eb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	005b      	lsls	r3, r3, #1
 8000ec2:	2203      	movs	r2, #3
 8000ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec8:	43db      	mvns	r3, r3
 8000eca:	69ba      	ldr	r2, [r7, #24]
 8000ecc:	4013      	ands	r3, r2
 8000ece:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	f003 0203 	and.w	r2, r3, #3
 8000ed8:	69fb      	ldr	r3, [r7, #28]
 8000eda:	005b      	lsls	r3, r3, #1
 8000edc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee0:	69ba      	ldr	r2, [r7, #24]
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	69ba      	ldr	r2, [r7, #24]
 8000eea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	f000 80ae 	beq.w	8001056 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000efa:	2300      	movs	r3, #0
 8000efc:	60fb      	str	r3, [r7, #12]
 8000efe:	4b5d      	ldr	r3, [pc, #372]	@ (8001074 <HAL_GPIO_Init+0x300>)
 8000f00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f02:	4a5c      	ldr	r2, [pc, #368]	@ (8001074 <HAL_GPIO_Init+0x300>)
 8000f04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f08:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f0a:	4b5a      	ldr	r3, [pc, #360]	@ (8001074 <HAL_GPIO_Init+0x300>)
 8000f0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f16:	4a58      	ldr	r2, [pc, #352]	@ (8001078 <HAL_GPIO_Init+0x304>)
 8000f18:	69fb      	ldr	r3, [r7, #28]
 8000f1a:	089b      	lsrs	r3, r3, #2
 8000f1c:	3302      	adds	r3, #2
 8000f1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f24:	69fb      	ldr	r3, [r7, #28]
 8000f26:	f003 0303 	and.w	r3, r3, #3
 8000f2a:	009b      	lsls	r3, r3, #2
 8000f2c:	220f      	movs	r2, #15
 8000f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f32:	43db      	mvns	r3, r3
 8000f34:	69ba      	ldr	r2, [r7, #24]
 8000f36:	4013      	ands	r3, r2
 8000f38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4a4f      	ldr	r2, [pc, #316]	@ (800107c <HAL_GPIO_Init+0x308>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d025      	beq.n	8000f8e <HAL_GPIO_Init+0x21a>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4a4e      	ldr	r2, [pc, #312]	@ (8001080 <HAL_GPIO_Init+0x30c>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d01f      	beq.n	8000f8a <HAL_GPIO_Init+0x216>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4a4d      	ldr	r2, [pc, #308]	@ (8001084 <HAL_GPIO_Init+0x310>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d019      	beq.n	8000f86 <HAL_GPIO_Init+0x212>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4a4c      	ldr	r2, [pc, #304]	@ (8001088 <HAL_GPIO_Init+0x314>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d013      	beq.n	8000f82 <HAL_GPIO_Init+0x20e>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4a4b      	ldr	r2, [pc, #300]	@ (800108c <HAL_GPIO_Init+0x318>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d00d      	beq.n	8000f7e <HAL_GPIO_Init+0x20a>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4a4a      	ldr	r2, [pc, #296]	@ (8001090 <HAL_GPIO_Init+0x31c>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d007      	beq.n	8000f7a <HAL_GPIO_Init+0x206>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4a49      	ldr	r2, [pc, #292]	@ (8001094 <HAL_GPIO_Init+0x320>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d101      	bne.n	8000f76 <HAL_GPIO_Init+0x202>
 8000f72:	2306      	movs	r3, #6
 8000f74:	e00c      	b.n	8000f90 <HAL_GPIO_Init+0x21c>
 8000f76:	2307      	movs	r3, #7
 8000f78:	e00a      	b.n	8000f90 <HAL_GPIO_Init+0x21c>
 8000f7a:	2305      	movs	r3, #5
 8000f7c:	e008      	b.n	8000f90 <HAL_GPIO_Init+0x21c>
 8000f7e:	2304      	movs	r3, #4
 8000f80:	e006      	b.n	8000f90 <HAL_GPIO_Init+0x21c>
 8000f82:	2303      	movs	r3, #3
 8000f84:	e004      	b.n	8000f90 <HAL_GPIO_Init+0x21c>
 8000f86:	2302      	movs	r3, #2
 8000f88:	e002      	b.n	8000f90 <HAL_GPIO_Init+0x21c>
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	e000      	b.n	8000f90 <HAL_GPIO_Init+0x21c>
 8000f8e:	2300      	movs	r3, #0
 8000f90:	69fa      	ldr	r2, [r7, #28]
 8000f92:	f002 0203 	and.w	r2, r2, #3
 8000f96:	0092      	lsls	r2, r2, #2
 8000f98:	4093      	lsls	r3, r2
 8000f9a:	69ba      	ldr	r2, [r7, #24]
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fa0:	4935      	ldr	r1, [pc, #212]	@ (8001078 <HAL_GPIO_Init+0x304>)
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	089b      	lsrs	r3, r3, #2
 8000fa6:	3302      	adds	r3, #2
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fae:	4b3a      	ldr	r3, [pc, #232]	@ (8001098 <HAL_GPIO_Init+0x324>)
 8000fb0:	689b      	ldr	r3, [r3, #8]
 8000fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	43db      	mvns	r3, r3
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	4013      	ands	r3, r2
 8000fbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d003      	beq.n	8000fd2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000fca:	69ba      	ldr	r2, [r7, #24]
 8000fcc:	693b      	ldr	r3, [r7, #16]
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fd2:	4a31      	ldr	r2, [pc, #196]	@ (8001098 <HAL_GPIO_Init+0x324>)
 8000fd4:	69bb      	ldr	r3, [r7, #24]
 8000fd6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fd8:	4b2f      	ldr	r3, [pc, #188]	@ (8001098 <HAL_GPIO_Init+0x324>)
 8000fda:	68db      	ldr	r3, [r3, #12]
 8000fdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	43db      	mvns	r3, r3
 8000fe2:	69ba      	ldr	r2, [r7, #24]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d003      	beq.n	8000ffc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000ff4:	69ba      	ldr	r2, [r7, #24]
 8000ff6:	693b      	ldr	r3, [r7, #16]
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ffc:	4a26      	ldr	r2, [pc, #152]	@ (8001098 <HAL_GPIO_Init+0x324>)
 8000ffe:	69bb      	ldr	r3, [r7, #24]
 8001000:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001002:	4b25      	ldr	r3, [pc, #148]	@ (8001098 <HAL_GPIO_Init+0x324>)
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	43db      	mvns	r3, r3
 800100c:	69ba      	ldr	r2, [r7, #24]
 800100e:	4013      	ands	r3, r2
 8001010:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800101a:	2b00      	cmp	r3, #0
 800101c:	d003      	beq.n	8001026 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800101e:	69ba      	ldr	r2, [r7, #24]
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	4313      	orrs	r3, r2
 8001024:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001026:	4a1c      	ldr	r2, [pc, #112]	@ (8001098 <HAL_GPIO_Init+0x324>)
 8001028:	69bb      	ldr	r3, [r7, #24]
 800102a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800102c:	4b1a      	ldr	r3, [pc, #104]	@ (8001098 <HAL_GPIO_Init+0x324>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	43db      	mvns	r3, r3
 8001036:	69ba      	ldr	r2, [r7, #24]
 8001038:	4013      	ands	r3, r2
 800103a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001044:	2b00      	cmp	r3, #0
 8001046:	d003      	beq.n	8001050 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	4313      	orrs	r3, r2
 800104e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001050:	4a11      	ldr	r2, [pc, #68]	@ (8001098 <HAL_GPIO_Init+0x324>)
 8001052:	69bb      	ldr	r3, [r7, #24]
 8001054:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	3301      	adds	r3, #1
 800105a:	61fb      	str	r3, [r7, #28]
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	2b0f      	cmp	r3, #15
 8001060:	f67f ae96 	bls.w	8000d90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001064:	bf00      	nop
 8001066:	bf00      	nop
 8001068:	3724      	adds	r7, #36	@ 0x24
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	40023800 	.word	0x40023800
 8001078:	40013800 	.word	0x40013800
 800107c:	40020000 	.word	0x40020000
 8001080:	40020400 	.word	0x40020400
 8001084:	40020800 	.word	0x40020800
 8001088:	40020c00 	.word	0x40020c00
 800108c:	40021000 	.word	0x40021000
 8001090:	40021400 	.word	0x40021400
 8001094:	40021800 	.word	0x40021800
 8001098:	40013c00 	.word	0x40013c00

0800109c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	460b      	mov	r3, r1
 80010a6:	807b      	strh	r3, [r7, #2]
 80010a8:	4613      	mov	r3, r2
 80010aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010ac:	787b      	ldrb	r3, [r7, #1]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d003      	beq.n	80010ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010b2:	887a      	ldrh	r2, [r7, #2]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010b8:	e003      	b.n	80010c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010ba:	887b      	ldrh	r3, [r7, #2]
 80010bc:	041a      	lsls	r2, r3, #16
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	619a      	str	r2, [r3, #24]
}
 80010c2:	bf00      	nop
 80010c4:	370c      	adds	r7, #12
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
	...

080010d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d101      	bne.n	80010e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80010e0:	2301      	movs	r3, #1
 80010e2:	e0cc      	b.n	800127e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80010e4:	4b68      	ldr	r3, [pc, #416]	@ (8001288 <HAL_RCC_ClockConfig+0x1b8>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f003 030f 	and.w	r3, r3, #15
 80010ec:	683a      	ldr	r2, [r7, #0]
 80010ee:	429a      	cmp	r2, r3
 80010f0:	d90c      	bls.n	800110c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010f2:	4b65      	ldr	r3, [pc, #404]	@ (8001288 <HAL_RCC_ClockConfig+0x1b8>)
 80010f4:	683a      	ldr	r2, [r7, #0]
 80010f6:	b2d2      	uxtb	r2, r2
 80010f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80010fa:	4b63      	ldr	r3, [pc, #396]	@ (8001288 <HAL_RCC_ClockConfig+0x1b8>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f003 030f 	and.w	r3, r3, #15
 8001102:	683a      	ldr	r2, [r7, #0]
 8001104:	429a      	cmp	r2, r3
 8001106:	d001      	beq.n	800110c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001108:	2301      	movs	r3, #1
 800110a:	e0b8      	b.n	800127e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f003 0302 	and.w	r3, r3, #2
 8001114:	2b00      	cmp	r3, #0
 8001116:	d020      	beq.n	800115a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f003 0304 	and.w	r3, r3, #4
 8001120:	2b00      	cmp	r3, #0
 8001122:	d005      	beq.n	8001130 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001124:	4b59      	ldr	r3, [pc, #356]	@ (800128c <HAL_RCC_ClockConfig+0x1bc>)
 8001126:	689b      	ldr	r3, [r3, #8]
 8001128:	4a58      	ldr	r2, [pc, #352]	@ (800128c <HAL_RCC_ClockConfig+0x1bc>)
 800112a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800112e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f003 0308 	and.w	r3, r3, #8
 8001138:	2b00      	cmp	r3, #0
 800113a:	d005      	beq.n	8001148 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800113c:	4b53      	ldr	r3, [pc, #332]	@ (800128c <HAL_RCC_ClockConfig+0x1bc>)
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	4a52      	ldr	r2, [pc, #328]	@ (800128c <HAL_RCC_ClockConfig+0x1bc>)
 8001142:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001146:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001148:	4b50      	ldr	r3, [pc, #320]	@ (800128c <HAL_RCC_ClockConfig+0x1bc>)
 800114a:	689b      	ldr	r3, [r3, #8]
 800114c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	689b      	ldr	r3, [r3, #8]
 8001154:	494d      	ldr	r1, [pc, #308]	@ (800128c <HAL_RCC_ClockConfig+0x1bc>)
 8001156:	4313      	orrs	r3, r2
 8001158:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f003 0301 	and.w	r3, r3, #1
 8001162:	2b00      	cmp	r3, #0
 8001164:	d044      	beq.n	80011f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	2b01      	cmp	r3, #1
 800116c:	d107      	bne.n	800117e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800116e:	4b47      	ldr	r3, [pc, #284]	@ (800128c <HAL_RCC_ClockConfig+0x1bc>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001176:	2b00      	cmp	r3, #0
 8001178:	d119      	bne.n	80011ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800117a:	2301      	movs	r3, #1
 800117c:	e07f      	b.n	800127e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	2b02      	cmp	r3, #2
 8001184:	d003      	beq.n	800118e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800118a:	2b03      	cmp	r3, #3
 800118c:	d107      	bne.n	800119e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800118e:	4b3f      	ldr	r3, [pc, #252]	@ (800128c <HAL_RCC_ClockConfig+0x1bc>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001196:	2b00      	cmp	r3, #0
 8001198:	d109      	bne.n	80011ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800119a:	2301      	movs	r3, #1
 800119c:	e06f      	b.n	800127e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800119e:	4b3b      	ldr	r3, [pc, #236]	@ (800128c <HAL_RCC_ClockConfig+0x1bc>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f003 0302 	and.w	r3, r3, #2
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d101      	bne.n	80011ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011aa:	2301      	movs	r3, #1
 80011ac:	e067      	b.n	800127e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011ae:	4b37      	ldr	r3, [pc, #220]	@ (800128c <HAL_RCC_ClockConfig+0x1bc>)
 80011b0:	689b      	ldr	r3, [r3, #8]
 80011b2:	f023 0203 	bic.w	r2, r3, #3
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	4934      	ldr	r1, [pc, #208]	@ (800128c <HAL_RCC_ClockConfig+0x1bc>)
 80011bc:	4313      	orrs	r3, r2
 80011be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80011c0:	f7ff fcea 	bl	8000b98 <HAL_GetTick>
 80011c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011c6:	e00a      	b.n	80011de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011c8:	f7ff fce6 	bl	8000b98 <HAL_GetTick>
 80011cc:	4602      	mov	r2, r0
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d901      	bls.n	80011de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80011da:	2303      	movs	r3, #3
 80011dc:	e04f      	b.n	800127e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011de:	4b2b      	ldr	r3, [pc, #172]	@ (800128c <HAL_RCC_ClockConfig+0x1bc>)
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	f003 020c 	and.w	r2, r3, #12
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	009b      	lsls	r3, r3, #2
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d1eb      	bne.n	80011c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80011f0:	4b25      	ldr	r3, [pc, #148]	@ (8001288 <HAL_RCC_ClockConfig+0x1b8>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f003 030f 	and.w	r3, r3, #15
 80011f8:	683a      	ldr	r2, [r7, #0]
 80011fa:	429a      	cmp	r2, r3
 80011fc:	d20c      	bcs.n	8001218 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011fe:	4b22      	ldr	r3, [pc, #136]	@ (8001288 <HAL_RCC_ClockConfig+0x1b8>)
 8001200:	683a      	ldr	r2, [r7, #0]
 8001202:	b2d2      	uxtb	r2, r2
 8001204:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001206:	4b20      	ldr	r3, [pc, #128]	@ (8001288 <HAL_RCC_ClockConfig+0x1b8>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f003 030f 	and.w	r3, r3, #15
 800120e:	683a      	ldr	r2, [r7, #0]
 8001210:	429a      	cmp	r2, r3
 8001212:	d001      	beq.n	8001218 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001214:	2301      	movs	r3, #1
 8001216:	e032      	b.n	800127e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f003 0304 	and.w	r3, r3, #4
 8001220:	2b00      	cmp	r3, #0
 8001222:	d008      	beq.n	8001236 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001224:	4b19      	ldr	r3, [pc, #100]	@ (800128c <HAL_RCC_ClockConfig+0x1bc>)
 8001226:	689b      	ldr	r3, [r3, #8]
 8001228:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	4916      	ldr	r1, [pc, #88]	@ (800128c <HAL_RCC_ClockConfig+0x1bc>)
 8001232:	4313      	orrs	r3, r2
 8001234:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f003 0308 	and.w	r3, r3, #8
 800123e:	2b00      	cmp	r3, #0
 8001240:	d009      	beq.n	8001256 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001242:	4b12      	ldr	r3, [pc, #72]	@ (800128c <HAL_RCC_ClockConfig+0x1bc>)
 8001244:	689b      	ldr	r3, [r3, #8]
 8001246:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	691b      	ldr	r3, [r3, #16]
 800124e:	00db      	lsls	r3, r3, #3
 8001250:	490e      	ldr	r1, [pc, #56]	@ (800128c <HAL_RCC_ClockConfig+0x1bc>)
 8001252:	4313      	orrs	r3, r2
 8001254:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001256:	f000 f873 	bl	8001340 <HAL_RCC_GetSysClockFreq>
 800125a:	4602      	mov	r2, r0
 800125c:	4b0b      	ldr	r3, [pc, #44]	@ (800128c <HAL_RCC_ClockConfig+0x1bc>)
 800125e:	689b      	ldr	r3, [r3, #8]
 8001260:	091b      	lsrs	r3, r3, #4
 8001262:	f003 030f 	and.w	r3, r3, #15
 8001266:	490a      	ldr	r1, [pc, #40]	@ (8001290 <HAL_RCC_ClockConfig+0x1c0>)
 8001268:	5ccb      	ldrb	r3, [r1, r3]
 800126a:	fa22 f303 	lsr.w	r3, r2, r3
 800126e:	4a09      	ldr	r2, [pc, #36]	@ (8001294 <HAL_RCC_ClockConfig+0x1c4>)
 8001270:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001272:	4b09      	ldr	r3, [pc, #36]	@ (8001298 <HAL_RCC_ClockConfig+0x1c8>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff fae4 	bl	8000844 <HAL_InitTick>

  return HAL_OK;
 800127c:	2300      	movs	r3, #0
}
 800127e:	4618      	mov	r0, r3
 8001280:	3710      	adds	r7, #16
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	40023c00 	.word	0x40023c00
 800128c:	40023800 	.word	0x40023800
 8001290:	08004e30 	.word	0x08004e30
 8001294:	20000000 	.word	0x20000000
 8001298:	20000004 	.word	0x20000004

0800129c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80012a0:	4b03      	ldr	r3, [pc, #12]	@ (80012b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80012a2:	681b      	ldr	r3, [r3, #0]
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	20000000 	.word	0x20000000

080012b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80012b8:	f7ff fff0 	bl	800129c <HAL_RCC_GetHCLKFreq>
 80012bc:	4602      	mov	r2, r0
 80012be:	4b05      	ldr	r3, [pc, #20]	@ (80012d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	0a9b      	lsrs	r3, r3, #10
 80012c4:	f003 0307 	and.w	r3, r3, #7
 80012c8:	4903      	ldr	r1, [pc, #12]	@ (80012d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80012ca:	5ccb      	ldrb	r3, [r1, r3]
 80012cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	40023800 	.word	0x40023800
 80012d8:	08004e40 	.word	0x08004e40

080012dc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
 80012e4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	220f      	movs	r2, #15
 80012ea:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80012ec:	4b12      	ldr	r3, [pc, #72]	@ (8001338 <HAL_RCC_GetClockConfig+0x5c>)
 80012ee:	689b      	ldr	r3, [r3, #8]
 80012f0:	f003 0203 	and.w	r2, r3, #3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80012f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001338 <HAL_RCC_GetClockConfig+0x5c>)
 80012fa:	689b      	ldr	r3, [r3, #8]
 80012fc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001304:	4b0c      	ldr	r3, [pc, #48]	@ (8001338 <HAL_RCC_GetClockConfig+0x5c>)
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001310:	4b09      	ldr	r3, [pc, #36]	@ (8001338 <HAL_RCC_GetClockConfig+0x5c>)
 8001312:	689b      	ldr	r3, [r3, #8]
 8001314:	08db      	lsrs	r3, r3, #3
 8001316:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800131e:	4b07      	ldr	r3, [pc, #28]	@ (800133c <HAL_RCC_GetClockConfig+0x60>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f003 020f 	and.w	r2, r3, #15
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	601a      	str	r2, [r3, #0]
}
 800132a:	bf00      	nop
 800132c:	370c      	adds	r7, #12
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	40023800 	.word	0x40023800
 800133c:	40023c00 	.word	0x40023c00

08001340 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001340:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001344:	b0ae      	sub	sp, #184	@ 0xb8
 8001346:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001348:	2300      	movs	r3, #0
 800134a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800134e:	2300      	movs	r3, #0
 8001350:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001354:	2300      	movs	r3, #0
 8001356:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800135a:	2300      	movs	r3, #0
 800135c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001360:	2300      	movs	r3, #0
 8001362:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001366:	4bcb      	ldr	r3, [pc, #812]	@ (8001694 <HAL_RCC_GetSysClockFreq+0x354>)
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	f003 030c 	and.w	r3, r3, #12
 800136e:	2b0c      	cmp	r3, #12
 8001370:	f200 8206 	bhi.w	8001780 <HAL_RCC_GetSysClockFreq+0x440>
 8001374:	a201      	add	r2, pc, #4	@ (adr r2, 800137c <HAL_RCC_GetSysClockFreq+0x3c>)
 8001376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800137a:	bf00      	nop
 800137c:	080013b1 	.word	0x080013b1
 8001380:	08001781 	.word	0x08001781
 8001384:	08001781 	.word	0x08001781
 8001388:	08001781 	.word	0x08001781
 800138c:	080013b9 	.word	0x080013b9
 8001390:	08001781 	.word	0x08001781
 8001394:	08001781 	.word	0x08001781
 8001398:	08001781 	.word	0x08001781
 800139c:	080013c1 	.word	0x080013c1
 80013a0:	08001781 	.word	0x08001781
 80013a4:	08001781 	.word	0x08001781
 80013a8:	08001781 	.word	0x08001781
 80013ac:	080015b1 	.word	0x080015b1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80013b0:	4bb9      	ldr	r3, [pc, #740]	@ (8001698 <HAL_RCC_GetSysClockFreq+0x358>)
 80013b2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 80013b6:	e1e7      	b.n	8001788 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80013b8:	4bb8      	ldr	r3, [pc, #736]	@ (800169c <HAL_RCC_GetSysClockFreq+0x35c>)
 80013ba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80013be:	e1e3      	b.n	8001788 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80013c0:	4bb4      	ldr	r3, [pc, #720]	@ (8001694 <HAL_RCC_GetSysClockFreq+0x354>)
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80013c8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80013cc:	4bb1      	ldr	r3, [pc, #708]	@ (8001694 <HAL_RCC_GetSysClockFreq+0x354>)
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d071      	beq.n	80014bc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013d8:	4bae      	ldr	r3, [pc, #696]	@ (8001694 <HAL_RCC_GetSysClockFreq+0x354>)
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	099b      	lsrs	r3, r3, #6
 80013de:	2200      	movs	r2, #0
 80013e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80013e4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80013e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80013ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80013f0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80013f4:	2300      	movs	r3, #0
 80013f6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80013fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80013fe:	4622      	mov	r2, r4
 8001400:	462b      	mov	r3, r5
 8001402:	f04f 0000 	mov.w	r0, #0
 8001406:	f04f 0100 	mov.w	r1, #0
 800140a:	0159      	lsls	r1, r3, #5
 800140c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001410:	0150      	lsls	r0, r2, #5
 8001412:	4602      	mov	r2, r0
 8001414:	460b      	mov	r3, r1
 8001416:	4621      	mov	r1, r4
 8001418:	1a51      	subs	r1, r2, r1
 800141a:	6439      	str	r1, [r7, #64]	@ 0x40
 800141c:	4629      	mov	r1, r5
 800141e:	eb63 0301 	sbc.w	r3, r3, r1
 8001422:	647b      	str	r3, [r7, #68]	@ 0x44
 8001424:	f04f 0200 	mov.w	r2, #0
 8001428:	f04f 0300 	mov.w	r3, #0
 800142c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001430:	4649      	mov	r1, r9
 8001432:	018b      	lsls	r3, r1, #6
 8001434:	4641      	mov	r1, r8
 8001436:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800143a:	4641      	mov	r1, r8
 800143c:	018a      	lsls	r2, r1, #6
 800143e:	4641      	mov	r1, r8
 8001440:	1a51      	subs	r1, r2, r1
 8001442:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001444:	4649      	mov	r1, r9
 8001446:	eb63 0301 	sbc.w	r3, r3, r1
 800144a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800144c:	f04f 0200 	mov.w	r2, #0
 8001450:	f04f 0300 	mov.w	r3, #0
 8001454:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001458:	4649      	mov	r1, r9
 800145a:	00cb      	lsls	r3, r1, #3
 800145c:	4641      	mov	r1, r8
 800145e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001462:	4641      	mov	r1, r8
 8001464:	00ca      	lsls	r2, r1, #3
 8001466:	4610      	mov	r0, r2
 8001468:	4619      	mov	r1, r3
 800146a:	4603      	mov	r3, r0
 800146c:	4622      	mov	r2, r4
 800146e:	189b      	adds	r3, r3, r2
 8001470:	633b      	str	r3, [r7, #48]	@ 0x30
 8001472:	462b      	mov	r3, r5
 8001474:	460a      	mov	r2, r1
 8001476:	eb42 0303 	adc.w	r3, r2, r3
 800147a:	637b      	str	r3, [r7, #52]	@ 0x34
 800147c:	f04f 0200 	mov.w	r2, #0
 8001480:	f04f 0300 	mov.w	r3, #0
 8001484:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001488:	4629      	mov	r1, r5
 800148a:	024b      	lsls	r3, r1, #9
 800148c:	4621      	mov	r1, r4
 800148e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001492:	4621      	mov	r1, r4
 8001494:	024a      	lsls	r2, r1, #9
 8001496:	4610      	mov	r0, r2
 8001498:	4619      	mov	r1, r3
 800149a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800149e:	2200      	movs	r2, #0
 80014a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80014a4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80014a8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80014ac:	f7fe feb0 	bl	8000210 <__aeabi_uldivmod>
 80014b0:	4602      	mov	r2, r0
 80014b2:	460b      	mov	r3, r1
 80014b4:	4613      	mov	r3, r2
 80014b6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80014ba:	e067      	b.n	800158c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014bc:	4b75      	ldr	r3, [pc, #468]	@ (8001694 <HAL_RCC_GetSysClockFreq+0x354>)
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	099b      	lsrs	r3, r3, #6
 80014c2:	2200      	movs	r2, #0
 80014c4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80014c8:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80014cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80014d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80014d4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80014d6:	2300      	movs	r3, #0
 80014d8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80014da:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80014de:	4622      	mov	r2, r4
 80014e0:	462b      	mov	r3, r5
 80014e2:	f04f 0000 	mov.w	r0, #0
 80014e6:	f04f 0100 	mov.w	r1, #0
 80014ea:	0159      	lsls	r1, r3, #5
 80014ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80014f0:	0150      	lsls	r0, r2, #5
 80014f2:	4602      	mov	r2, r0
 80014f4:	460b      	mov	r3, r1
 80014f6:	4621      	mov	r1, r4
 80014f8:	1a51      	subs	r1, r2, r1
 80014fa:	62b9      	str	r1, [r7, #40]	@ 0x28
 80014fc:	4629      	mov	r1, r5
 80014fe:	eb63 0301 	sbc.w	r3, r3, r1
 8001502:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001504:	f04f 0200 	mov.w	r2, #0
 8001508:	f04f 0300 	mov.w	r3, #0
 800150c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001510:	4649      	mov	r1, r9
 8001512:	018b      	lsls	r3, r1, #6
 8001514:	4641      	mov	r1, r8
 8001516:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800151a:	4641      	mov	r1, r8
 800151c:	018a      	lsls	r2, r1, #6
 800151e:	4641      	mov	r1, r8
 8001520:	ebb2 0a01 	subs.w	sl, r2, r1
 8001524:	4649      	mov	r1, r9
 8001526:	eb63 0b01 	sbc.w	fp, r3, r1
 800152a:	f04f 0200 	mov.w	r2, #0
 800152e:	f04f 0300 	mov.w	r3, #0
 8001532:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001536:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800153a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800153e:	4692      	mov	sl, r2
 8001540:	469b      	mov	fp, r3
 8001542:	4623      	mov	r3, r4
 8001544:	eb1a 0303 	adds.w	r3, sl, r3
 8001548:	623b      	str	r3, [r7, #32]
 800154a:	462b      	mov	r3, r5
 800154c:	eb4b 0303 	adc.w	r3, fp, r3
 8001550:	627b      	str	r3, [r7, #36]	@ 0x24
 8001552:	f04f 0200 	mov.w	r2, #0
 8001556:	f04f 0300 	mov.w	r3, #0
 800155a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800155e:	4629      	mov	r1, r5
 8001560:	028b      	lsls	r3, r1, #10
 8001562:	4621      	mov	r1, r4
 8001564:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001568:	4621      	mov	r1, r4
 800156a:	028a      	lsls	r2, r1, #10
 800156c:	4610      	mov	r0, r2
 800156e:	4619      	mov	r1, r3
 8001570:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001574:	2200      	movs	r2, #0
 8001576:	673b      	str	r3, [r7, #112]	@ 0x70
 8001578:	677a      	str	r2, [r7, #116]	@ 0x74
 800157a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800157e:	f7fe fe47 	bl	8000210 <__aeabi_uldivmod>
 8001582:	4602      	mov	r2, r0
 8001584:	460b      	mov	r3, r1
 8001586:	4613      	mov	r3, r2
 8001588:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800158c:	4b41      	ldr	r3, [pc, #260]	@ (8001694 <HAL_RCC_GetSysClockFreq+0x354>)
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	0c1b      	lsrs	r3, r3, #16
 8001592:	f003 0303 	and.w	r3, r3, #3
 8001596:	3301      	adds	r3, #1
 8001598:	005b      	lsls	r3, r3, #1
 800159a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 800159e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80015a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80015a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015aa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80015ae:	e0eb      	b.n	8001788 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015b0:	4b38      	ldr	r3, [pc, #224]	@ (8001694 <HAL_RCC_GetSysClockFreq+0x354>)
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80015b8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015bc:	4b35      	ldr	r3, [pc, #212]	@ (8001694 <HAL_RCC_GetSysClockFreq+0x354>)
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d06b      	beq.n	80016a0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015c8:	4b32      	ldr	r3, [pc, #200]	@ (8001694 <HAL_RCC_GetSysClockFreq+0x354>)
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	099b      	lsrs	r3, r3, #6
 80015ce:	2200      	movs	r2, #0
 80015d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80015d2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80015d4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80015d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80015da:	663b      	str	r3, [r7, #96]	@ 0x60
 80015dc:	2300      	movs	r3, #0
 80015de:	667b      	str	r3, [r7, #100]	@ 0x64
 80015e0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80015e4:	4622      	mov	r2, r4
 80015e6:	462b      	mov	r3, r5
 80015e8:	f04f 0000 	mov.w	r0, #0
 80015ec:	f04f 0100 	mov.w	r1, #0
 80015f0:	0159      	lsls	r1, r3, #5
 80015f2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80015f6:	0150      	lsls	r0, r2, #5
 80015f8:	4602      	mov	r2, r0
 80015fa:	460b      	mov	r3, r1
 80015fc:	4621      	mov	r1, r4
 80015fe:	1a51      	subs	r1, r2, r1
 8001600:	61b9      	str	r1, [r7, #24]
 8001602:	4629      	mov	r1, r5
 8001604:	eb63 0301 	sbc.w	r3, r3, r1
 8001608:	61fb      	str	r3, [r7, #28]
 800160a:	f04f 0200 	mov.w	r2, #0
 800160e:	f04f 0300 	mov.w	r3, #0
 8001612:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001616:	4659      	mov	r1, fp
 8001618:	018b      	lsls	r3, r1, #6
 800161a:	4651      	mov	r1, sl
 800161c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001620:	4651      	mov	r1, sl
 8001622:	018a      	lsls	r2, r1, #6
 8001624:	4651      	mov	r1, sl
 8001626:	ebb2 0801 	subs.w	r8, r2, r1
 800162a:	4659      	mov	r1, fp
 800162c:	eb63 0901 	sbc.w	r9, r3, r1
 8001630:	f04f 0200 	mov.w	r2, #0
 8001634:	f04f 0300 	mov.w	r3, #0
 8001638:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800163c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001640:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001644:	4690      	mov	r8, r2
 8001646:	4699      	mov	r9, r3
 8001648:	4623      	mov	r3, r4
 800164a:	eb18 0303 	adds.w	r3, r8, r3
 800164e:	613b      	str	r3, [r7, #16]
 8001650:	462b      	mov	r3, r5
 8001652:	eb49 0303 	adc.w	r3, r9, r3
 8001656:	617b      	str	r3, [r7, #20]
 8001658:	f04f 0200 	mov.w	r2, #0
 800165c:	f04f 0300 	mov.w	r3, #0
 8001660:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001664:	4629      	mov	r1, r5
 8001666:	024b      	lsls	r3, r1, #9
 8001668:	4621      	mov	r1, r4
 800166a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800166e:	4621      	mov	r1, r4
 8001670:	024a      	lsls	r2, r1, #9
 8001672:	4610      	mov	r0, r2
 8001674:	4619      	mov	r1, r3
 8001676:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800167a:	2200      	movs	r2, #0
 800167c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800167e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001680:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001684:	f7fe fdc4 	bl	8000210 <__aeabi_uldivmod>
 8001688:	4602      	mov	r2, r0
 800168a:	460b      	mov	r3, r1
 800168c:	4613      	mov	r3, r2
 800168e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001692:	e065      	b.n	8001760 <HAL_RCC_GetSysClockFreq+0x420>
 8001694:	40023800 	.word	0x40023800
 8001698:	00f42400 	.word	0x00f42400
 800169c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016a0:	4b3d      	ldr	r3, [pc, #244]	@ (8001798 <HAL_RCC_GetSysClockFreq+0x458>)
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	099b      	lsrs	r3, r3, #6
 80016a6:	2200      	movs	r2, #0
 80016a8:	4618      	mov	r0, r3
 80016aa:	4611      	mov	r1, r2
 80016ac:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80016b0:	653b      	str	r3, [r7, #80]	@ 0x50
 80016b2:	2300      	movs	r3, #0
 80016b4:	657b      	str	r3, [r7, #84]	@ 0x54
 80016b6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80016ba:	4642      	mov	r2, r8
 80016bc:	464b      	mov	r3, r9
 80016be:	f04f 0000 	mov.w	r0, #0
 80016c2:	f04f 0100 	mov.w	r1, #0
 80016c6:	0159      	lsls	r1, r3, #5
 80016c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016cc:	0150      	lsls	r0, r2, #5
 80016ce:	4602      	mov	r2, r0
 80016d0:	460b      	mov	r3, r1
 80016d2:	4641      	mov	r1, r8
 80016d4:	1a51      	subs	r1, r2, r1
 80016d6:	60b9      	str	r1, [r7, #8]
 80016d8:	4649      	mov	r1, r9
 80016da:	eb63 0301 	sbc.w	r3, r3, r1
 80016de:	60fb      	str	r3, [r7, #12]
 80016e0:	f04f 0200 	mov.w	r2, #0
 80016e4:	f04f 0300 	mov.w	r3, #0
 80016e8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80016ec:	4659      	mov	r1, fp
 80016ee:	018b      	lsls	r3, r1, #6
 80016f0:	4651      	mov	r1, sl
 80016f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80016f6:	4651      	mov	r1, sl
 80016f8:	018a      	lsls	r2, r1, #6
 80016fa:	4651      	mov	r1, sl
 80016fc:	1a54      	subs	r4, r2, r1
 80016fe:	4659      	mov	r1, fp
 8001700:	eb63 0501 	sbc.w	r5, r3, r1
 8001704:	f04f 0200 	mov.w	r2, #0
 8001708:	f04f 0300 	mov.w	r3, #0
 800170c:	00eb      	lsls	r3, r5, #3
 800170e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001712:	00e2      	lsls	r2, r4, #3
 8001714:	4614      	mov	r4, r2
 8001716:	461d      	mov	r5, r3
 8001718:	4643      	mov	r3, r8
 800171a:	18e3      	adds	r3, r4, r3
 800171c:	603b      	str	r3, [r7, #0]
 800171e:	464b      	mov	r3, r9
 8001720:	eb45 0303 	adc.w	r3, r5, r3
 8001724:	607b      	str	r3, [r7, #4]
 8001726:	f04f 0200 	mov.w	r2, #0
 800172a:	f04f 0300 	mov.w	r3, #0
 800172e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001732:	4629      	mov	r1, r5
 8001734:	028b      	lsls	r3, r1, #10
 8001736:	4621      	mov	r1, r4
 8001738:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800173c:	4621      	mov	r1, r4
 800173e:	028a      	lsls	r2, r1, #10
 8001740:	4610      	mov	r0, r2
 8001742:	4619      	mov	r1, r3
 8001744:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001748:	2200      	movs	r2, #0
 800174a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800174c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800174e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001752:	f7fe fd5d 	bl	8000210 <__aeabi_uldivmod>
 8001756:	4602      	mov	r2, r0
 8001758:	460b      	mov	r3, r1
 800175a:	4613      	mov	r3, r2
 800175c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001760:	4b0d      	ldr	r3, [pc, #52]	@ (8001798 <HAL_RCC_GetSysClockFreq+0x458>)
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	0f1b      	lsrs	r3, r3, #28
 8001766:	f003 0307 	and.w	r3, r3, #7
 800176a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 800176e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001772:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001776:	fbb2 f3f3 	udiv	r3, r2, r3
 800177a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800177e:	e003      	b.n	8001788 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001780:	4b06      	ldr	r3, [pc, #24]	@ (800179c <HAL_RCC_GetSysClockFreq+0x45c>)
 8001782:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001786:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001788:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 800178c:	4618      	mov	r0, r3
 800178e:	37b8      	adds	r7, #184	@ 0xb8
 8001790:	46bd      	mov	sp, r7
 8001792:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001796:	bf00      	nop
 8001798:	40023800 	.word	0x40023800
 800179c:	00f42400 	.word	0x00f42400

080017a0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b086      	sub	sp, #24
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d101      	bne.n	80017b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e28d      	b.n	8001cce <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0301 	and.w	r3, r3, #1
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	f000 8083 	beq.w	80018c6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80017c0:	4b94      	ldr	r3, [pc, #592]	@ (8001a14 <HAL_RCC_OscConfig+0x274>)
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	f003 030c 	and.w	r3, r3, #12
 80017c8:	2b04      	cmp	r3, #4
 80017ca:	d019      	beq.n	8001800 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80017cc:	4b91      	ldr	r3, [pc, #580]	@ (8001a14 <HAL_RCC_OscConfig+0x274>)
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80017d4:	2b08      	cmp	r3, #8
 80017d6:	d106      	bne.n	80017e6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80017d8:	4b8e      	ldr	r3, [pc, #568]	@ (8001a14 <HAL_RCC_OscConfig+0x274>)
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017e0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80017e4:	d00c      	beq.n	8001800 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017e6:	4b8b      	ldr	r3, [pc, #556]	@ (8001a14 <HAL_RCC_OscConfig+0x274>)
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80017ee:	2b0c      	cmp	r3, #12
 80017f0:	d112      	bne.n	8001818 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017f2:	4b88      	ldr	r3, [pc, #544]	@ (8001a14 <HAL_RCC_OscConfig+0x274>)
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017fa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80017fe:	d10b      	bne.n	8001818 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001800:	4b84      	ldr	r3, [pc, #528]	@ (8001a14 <HAL_RCC_OscConfig+0x274>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001808:	2b00      	cmp	r3, #0
 800180a:	d05b      	beq.n	80018c4 <HAL_RCC_OscConfig+0x124>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d157      	bne.n	80018c4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	e25a      	b.n	8001cce <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001820:	d106      	bne.n	8001830 <HAL_RCC_OscConfig+0x90>
 8001822:	4b7c      	ldr	r3, [pc, #496]	@ (8001a14 <HAL_RCC_OscConfig+0x274>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a7b      	ldr	r2, [pc, #492]	@ (8001a14 <HAL_RCC_OscConfig+0x274>)
 8001828:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800182c:	6013      	str	r3, [r2, #0]
 800182e:	e01d      	b.n	800186c <HAL_RCC_OscConfig+0xcc>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001838:	d10c      	bne.n	8001854 <HAL_RCC_OscConfig+0xb4>
 800183a:	4b76      	ldr	r3, [pc, #472]	@ (8001a14 <HAL_RCC_OscConfig+0x274>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a75      	ldr	r2, [pc, #468]	@ (8001a14 <HAL_RCC_OscConfig+0x274>)
 8001840:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001844:	6013      	str	r3, [r2, #0]
 8001846:	4b73      	ldr	r3, [pc, #460]	@ (8001a14 <HAL_RCC_OscConfig+0x274>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a72      	ldr	r2, [pc, #456]	@ (8001a14 <HAL_RCC_OscConfig+0x274>)
 800184c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001850:	6013      	str	r3, [r2, #0]
 8001852:	e00b      	b.n	800186c <HAL_RCC_OscConfig+0xcc>
 8001854:	4b6f      	ldr	r3, [pc, #444]	@ (8001a14 <HAL_RCC_OscConfig+0x274>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a6e      	ldr	r2, [pc, #440]	@ (8001a14 <HAL_RCC_OscConfig+0x274>)
 800185a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800185e:	6013      	str	r3, [r2, #0]
 8001860:	4b6c      	ldr	r3, [pc, #432]	@ (8001a14 <HAL_RCC_OscConfig+0x274>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a6b      	ldr	r2, [pc, #428]	@ (8001a14 <HAL_RCC_OscConfig+0x274>)
 8001866:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800186a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d013      	beq.n	800189c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001874:	f7ff f990 	bl	8000b98 <HAL_GetTick>
 8001878:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800187a:	e008      	b.n	800188e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800187c:	f7ff f98c 	bl	8000b98 <HAL_GetTick>
 8001880:	4602      	mov	r2, r0
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	2b64      	cmp	r3, #100	@ 0x64
 8001888:	d901      	bls.n	800188e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800188a:	2303      	movs	r3, #3
 800188c:	e21f      	b.n	8001cce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800188e:	4b61      	ldr	r3, [pc, #388]	@ (8001a14 <HAL_RCC_OscConfig+0x274>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d0f0      	beq.n	800187c <HAL_RCC_OscConfig+0xdc>
 800189a:	e014      	b.n	80018c6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800189c:	f7ff f97c 	bl	8000b98 <HAL_GetTick>
 80018a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018a2:	e008      	b.n	80018b6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018a4:	f7ff f978 	bl	8000b98 <HAL_GetTick>
 80018a8:	4602      	mov	r2, r0
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	2b64      	cmp	r3, #100	@ 0x64
 80018b0:	d901      	bls.n	80018b6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80018b2:	2303      	movs	r3, #3
 80018b4:	e20b      	b.n	8001cce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018b6:	4b57      	ldr	r3, [pc, #348]	@ (8001a14 <HAL_RCC_OscConfig+0x274>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d1f0      	bne.n	80018a4 <HAL_RCC_OscConfig+0x104>
 80018c2:	e000      	b.n	80018c6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 0302 	and.w	r3, r3, #2
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d06f      	beq.n	80019b2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80018d2:	4b50      	ldr	r3, [pc, #320]	@ (8001a14 <HAL_RCC_OscConfig+0x274>)
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	f003 030c 	and.w	r3, r3, #12
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d017      	beq.n	800190e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80018de:	4b4d      	ldr	r3, [pc, #308]	@ (8001a14 <HAL_RCC_OscConfig+0x274>)
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80018e6:	2b08      	cmp	r3, #8
 80018e8:	d105      	bne.n	80018f6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80018ea:	4b4a      	ldr	r3, [pc, #296]	@ (8001a14 <HAL_RCC_OscConfig+0x274>)
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d00b      	beq.n	800190e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018f6:	4b47      	ldr	r3, [pc, #284]	@ (8001a14 <HAL_RCC_OscConfig+0x274>)
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80018fe:	2b0c      	cmp	r3, #12
 8001900:	d11c      	bne.n	800193c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001902:	4b44      	ldr	r3, [pc, #272]	@ (8001a14 <HAL_RCC_OscConfig+0x274>)
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800190a:	2b00      	cmp	r3, #0
 800190c:	d116      	bne.n	800193c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800190e:	4b41      	ldr	r3, [pc, #260]	@ (8001a14 <HAL_RCC_OscConfig+0x274>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 0302 	and.w	r3, r3, #2
 8001916:	2b00      	cmp	r3, #0
 8001918:	d005      	beq.n	8001926 <HAL_RCC_OscConfig+0x186>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	68db      	ldr	r3, [r3, #12]
 800191e:	2b01      	cmp	r3, #1
 8001920:	d001      	beq.n	8001926 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e1d3      	b.n	8001cce <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001926:	4b3b      	ldr	r3, [pc, #236]	@ (8001a14 <HAL_RCC_OscConfig+0x274>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	691b      	ldr	r3, [r3, #16]
 8001932:	00db      	lsls	r3, r3, #3
 8001934:	4937      	ldr	r1, [pc, #220]	@ (8001a14 <HAL_RCC_OscConfig+0x274>)
 8001936:	4313      	orrs	r3, r2
 8001938:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800193a:	e03a      	b.n	80019b2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d020      	beq.n	8001986 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001944:	4b34      	ldr	r3, [pc, #208]	@ (8001a18 <HAL_RCC_OscConfig+0x278>)
 8001946:	2201      	movs	r2, #1
 8001948:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800194a:	f7ff f925 	bl	8000b98 <HAL_GetTick>
 800194e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001950:	e008      	b.n	8001964 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001952:	f7ff f921 	bl	8000b98 <HAL_GetTick>
 8001956:	4602      	mov	r2, r0
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	2b02      	cmp	r3, #2
 800195e:	d901      	bls.n	8001964 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001960:	2303      	movs	r3, #3
 8001962:	e1b4      	b.n	8001cce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001964:	4b2b      	ldr	r3, [pc, #172]	@ (8001a14 <HAL_RCC_OscConfig+0x274>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 0302 	and.w	r3, r3, #2
 800196c:	2b00      	cmp	r3, #0
 800196e:	d0f0      	beq.n	8001952 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001970:	4b28      	ldr	r3, [pc, #160]	@ (8001a14 <HAL_RCC_OscConfig+0x274>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	691b      	ldr	r3, [r3, #16]
 800197c:	00db      	lsls	r3, r3, #3
 800197e:	4925      	ldr	r1, [pc, #148]	@ (8001a14 <HAL_RCC_OscConfig+0x274>)
 8001980:	4313      	orrs	r3, r2
 8001982:	600b      	str	r3, [r1, #0]
 8001984:	e015      	b.n	80019b2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001986:	4b24      	ldr	r3, [pc, #144]	@ (8001a18 <HAL_RCC_OscConfig+0x278>)
 8001988:	2200      	movs	r2, #0
 800198a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800198c:	f7ff f904 	bl	8000b98 <HAL_GetTick>
 8001990:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001992:	e008      	b.n	80019a6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001994:	f7ff f900 	bl	8000b98 <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d901      	bls.n	80019a6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	e193      	b.n	8001cce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019a6:	4b1b      	ldr	r3, [pc, #108]	@ (8001a14 <HAL_RCC_OscConfig+0x274>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0302 	and.w	r3, r3, #2
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d1f0      	bne.n	8001994 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0308 	and.w	r3, r3, #8
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d036      	beq.n	8001a2c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	695b      	ldr	r3, [r3, #20]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d016      	beq.n	80019f4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019c6:	4b15      	ldr	r3, [pc, #84]	@ (8001a1c <HAL_RCC_OscConfig+0x27c>)
 80019c8:	2201      	movs	r2, #1
 80019ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019cc:	f7ff f8e4 	bl	8000b98 <HAL_GetTick>
 80019d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019d2:	e008      	b.n	80019e6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019d4:	f7ff f8e0 	bl	8000b98 <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d901      	bls.n	80019e6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e173      	b.n	8001cce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001a14 <HAL_RCC_OscConfig+0x274>)
 80019e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80019ea:	f003 0302 	and.w	r3, r3, #2
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d0f0      	beq.n	80019d4 <HAL_RCC_OscConfig+0x234>
 80019f2:	e01b      	b.n	8001a2c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019f4:	4b09      	ldr	r3, [pc, #36]	@ (8001a1c <HAL_RCC_OscConfig+0x27c>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019fa:	f7ff f8cd 	bl	8000b98 <HAL_GetTick>
 80019fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a00:	e00e      	b.n	8001a20 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a02:	f7ff f8c9 	bl	8000b98 <HAL_GetTick>
 8001a06:	4602      	mov	r2, r0
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	2b02      	cmp	r3, #2
 8001a0e:	d907      	bls.n	8001a20 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001a10:	2303      	movs	r3, #3
 8001a12:	e15c      	b.n	8001cce <HAL_RCC_OscConfig+0x52e>
 8001a14:	40023800 	.word	0x40023800
 8001a18:	42470000 	.word	0x42470000
 8001a1c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a20:	4b8a      	ldr	r3, [pc, #552]	@ (8001c4c <HAL_RCC_OscConfig+0x4ac>)
 8001a22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a24:	f003 0302 	and.w	r3, r3, #2
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d1ea      	bne.n	8001a02 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0304 	and.w	r3, r3, #4
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	f000 8097 	beq.w	8001b68 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a3e:	4b83      	ldr	r3, [pc, #524]	@ (8001c4c <HAL_RCC_OscConfig+0x4ac>)
 8001a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d10f      	bne.n	8001a6a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	60bb      	str	r3, [r7, #8]
 8001a4e:	4b7f      	ldr	r3, [pc, #508]	@ (8001c4c <HAL_RCC_OscConfig+0x4ac>)
 8001a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a52:	4a7e      	ldr	r2, [pc, #504]	@ (8001c4c <HAL_RCC_OscConfig+0x4ac>)
 8001a54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a58:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a5a:	4b7c      	ldr	r3, [pc, #496]	@ (8001c4c <HAL_RCC_OscConfig+0x4ac>)
 8001a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a62:	60bb      	str	r3, [r7, #8]
 8001a64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a66:	2301      	movs	r3, #1
 8001a68:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a6a:	4b79      	ldr	r3, [pc, #484]	@ (8001c50 <HAL_RCC_OscConfig+0x4b0>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d118      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a76:	4b76      	ldr	r3, [pc, #472]	@ (8001c50 <HAL_RCC_OscConfig+0x4b0>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a75      	ldr	r2, [pc, #468]	@ (8001c50 <HAL_RCC_OscConfig+0x4b0>)
 8001a7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a82:	f7ff f889 	bl	8000b98 <HAL_GetTick>
 8001a86:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a88:	e008      	b.n	8001a9c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a8a:	f7ff f885 	bl	8000b98 <HAL_GetTick>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	d901      	bls.n	8001a9c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	e118      	b.n	8001cce <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a9c:	4b6c      	ldr	r3, [pc, #432]	@ (8001c50 <HAL_RCC_OscConfig+0x4b0>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d0f0      	beq.n	8001a8a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d106      	bne.n	8001abe <HAL_RCC_OscConfig+0x31e>
 8001ab0:	4b66      	ldr	r3, [pc, #408]	@ (8001c4c <HAL_RCC_OscConfig+0x4ac>)
 8001ab2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ab4:	4a65      	ldr	r2, [pc, #404]	@ (8001c4c <HAL_RCC_OscConfig+0x4ac>)
 8001ab6:	f043 0301 	orr.w	r3, r3, #1
 8001aba:	6713      	str	r3, [r2, #112]	@ 0x70
 8001abc:	e01c      	b.n	8001af8 <HAL_RCC_OscConfig+0x358>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	2b05      	cmp	r3, #5
 8001ac4:	d10c      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x340>
 8001ac6:	4b61      	ldr	r3, [pc, #388]	@ (8001c4c <HAL_RCC_OscConfig+0x4ac>)
 8001ac8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001aca:	4a60      	ldr	r2, [pc, #384]	@ (8001c4c <HAL_RCC_OscConfig+0x4ac>)
 8001acc:	f043 0304 	orr.w	r3, r3, #4
 8001ad0:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ad2:	4b5e      	ldr	r3, [pc, #376]	@ (8001c4c <HAL_RCC_OscConfig+0x4ac>)
 8001ad4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ad6:	4a5d      	ldr	r2, [pc, #372]	@ (8001c4c <HAL_RCC_OscConfig+0x4ac>)
 8001ad8:	f043 0301 	orr.w	r3, r3, #1
 8001adc:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ade:	e00b      	b.n	8001af8 <HAL_RCC_OscConfig+0x358>
 8001ae0:	4b5a      	ldr	r3, [pc, #360]	@ (8001c4c <HAL_RCC_OscConfig+0x4ac>)
 8001ae2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ae4:	4a59      	ldr	r2, [pc, #356]	@ (8001c4c <HAL_RCC_OscConfig+0x4ac>)
 8001ae6:	f023 0301 	bic.w	r3, r3, #1
 8001aea:	6713      	str	r3, [r2, #112]	@ 0x70
 8001aec:	4b57      	ldr	r3, [pc, #348]	@ (8001c4c <HAL_RCC_OscConfig+0x4ac>)
 8001aee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001af0:	4a56      	ldr	r2, [pc, #344]	@ (8001c4c <HAL_RCC_OscConfig+0x4ac>)
 8001af2:	f023 0304 	bic.w	r3, r3, #4
 8001af6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d015      	beq.n	8001b2c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b00:	f7ff f84a 	bl	8000b98 <HAL_GetTick>
 8001b04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b06:	e00a      	b.n	8001b1e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b08:	f7ff f846 	bl	8000b98 <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d901      	bls.n	8001b1e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e0d7      	b.n	8001cce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b1e:	4b4b      	ldr	r3, [pc, #300]	@ (8001c4c <HAL_RCC_OscConfig+0x4ac>)
 8001b20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b22:	f003 0302 	and.w	r3, r3, #2
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d0ee      	beq.n	8001b08 <HAL_RCC_OscConfig+0x368>
 8001b2a:	e014      	b.n	8001b56 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b2c:	f7ff f834 	bl	8000b98 <HAL_GetTick>
 8001b30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b32:	e00a      	b.n	8001b4a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b34:	f7ff f830 	bl	8000b98 <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d901      	bls.n	8001b4a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001b46:	2303      	movs	r3, #3
 8001b48:	e0c1      	b.n	8001cce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b4a:	4b40      	ldr	r3, [pc, #256]	@ (8001c4c <HAL_RCC_OscConfig+0x4ac>)
 8001b4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b4e:	f003 0302 	and.w	r3, r3, #2
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d1ee      	bne.n	8001b34 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b56:	7dfb      	ldrb	r3, [r7, #23]
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d105      	bne.n	8001b68 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b5c:	4b3b      	ldr	r3, [pc, #236]	@ (8001c4c <HAL_RCC_OscConfig+0x4ac>)
 8001b5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b60:	4a3a      	ldr	r2, [pc, #232]	@ (8001c4c <HAL_RCC_OscConfig+0x4ac>)
 8001b62:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b66:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	699b      	ldr	r3, [r3, #24]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	f000 80ad 	beq.w	8001ccc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b72:	4b36      	ldr	r3, [pc, #216]	@ (8001c4c <HAL_RCC_OscConfig+0x4ac>)
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	f003 030c 	and.w	r3, r3, #12
 8001b7a:	2b08      	cmp	r3, #8
 8001b7c:	d060      	beq.n	8001c40 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	699b      	ldr	r3, [r3, #24]
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	d145      	bne.n	8001c12 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b86:	4b33      	ldr	r3, [pc, #204]	@ (8001c54 <HAL_RCC_OscConfig+0x4b4>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b8c:	f7ff f804 	bl	8000b98 <HAL_GetTick>
 8001b90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b92:	e008      	b.n	8001ba6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b94:	f7ff f800 	bl	8000b98 <HAL_GetTick>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	2b02      	cmp	r3, #2
 8001ba0:	d901      	bls.n	8001ba6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e093      	b.n	8001cce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ba6:	4b29      	ldr	r3, [pc, #164]	@ (8001c4c <HAL_RCC_OscConfig+0x4ac>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d1f0      	bne.n	8001b94 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	69da      	ldr	r2, [r3, #28]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6a1b      	ldr	r3, [r3, #32]
 8001bba:	431a      	orrs	r2, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bc0:	019b      	lsls	r3, r3, #6
 8001bc2:	431a      	orrs	r2, r3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bc8:	085b      	lsrs	r3, r3, #1
 8001bca:	3b01      	subs	r3, #1
 8001bcc:	041b      	lsls	r3, r3, #16
 8001bce:	431a      	orrs	r2, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bd4:	061b      	lsls	r3, r3, #24
 8001bd6:	431a      	orrs	r2, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bdc:	071b      	lsls	r3, r3, #28
 8001bde:	491b      	ldr	r1, [pc, #108]	@ (8001c4c <HAL_RCC_OscConfig+0x4ac>)
 8001be0:	4313      	orrs	r3, r2
 8001be2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001be4:	4b1b      	ldr	r3, [pc, #108]	@ (8001c54 <HAL_RCC_OscConfig+0x4b4>)
 8001be6:	2201      	movs	r2, #1
 8001be8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bea:	f7fe ffd5 	bl	8000b98 <HAL_GetTick>
 8001bee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bf0:	e008      	b.n	8001c04 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bf2:	f7fe ffd1 	bl	8000b98 <HAL_GetTick>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	2b02      	cmp	r3, #2
 8001bfe:	d901      	bls.n	8001c04 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001c00:	2303      	movs	r3, #3
 8001c02:	e064      	b.n	8001cce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c04:	4b11      	ldr	r3, [pc, #68]	@ (8001c4c <HAL_RCC_OscConfig+0x4ac>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d0f0      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x452>
 8001c10:	e05c      	b.n	8001ccc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c12:	4b10      	ldr	r3, [pc, #64]	@ (8001c54 <HAL_RCC_OscConfig+0x4b4>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c18:	f7fe ffbe 	bl	8000b98 <HAL_GetTick>
 8001c1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c1e:	e008      	b.n	8001c32 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c20:	f7fe ffba 	bl	8000b98 <HAL_GetTick>
 8001c24:	4602      	mov	r2, r0
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d901      	bls.n	8001c32 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e04d      	b.n	8001cce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c32:	4b06      	ldr	r3, [pc, #24]	@ (8001c4c <HAL_RCC_OscConfig+0x4ac>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d1f0      	bne.n	8001c20 <HAL_RCC_OscConfig+0x480>
 8001c3e:	e045      	b.n	8001ccc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	699b      	ldr	r3, [r3, #24]
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d107      	bne.n	8001c58 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e040      	b.n	8001cce <HAL_RCC_OscConfig+0x52e>
 8001c4c:	40023800 	.word	0x40023800
 8001c50:	40007000 	.word	0x40007000
 8001c54:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001c58:	4b1f      	ldr	r3, [pc, #124]	@ (8001cd8 <HAL_RCC_OscConfig+0x538>)
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	699b      	ldr	r3, [r3, #24]
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d030      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d129      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d122      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c82:	68fa      	ldr	r2, [r7, #12]
 8001c84:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001c88:	4013      	ands	r3, r2
 8001c8a:	687a      	ldr	r2, [r7, #4]
 8001c8c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001c8e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d119      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c9e:	085b      	lsrs	r3, r3, #1
 8001ca0:	3b01      	subs	r3, #1
 8001ca2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d10f      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cb2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d107      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cc2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d001      	beq.n	8001ccc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e000      	b.n	8001cce <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001ccc:	2300      	movs	r3, #0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3718      	adds	r7, #24
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	40023800 	.word	0x40023800

08001cdc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d101      	bne.n	8001cee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e041      	b.n	8001d72 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d106      	bne.n	8001d08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f000 f839 	bl	8001d7a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2202      	movs	r2, #2
 8001d0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	3304      	adds	r3, #4
 8001d18:	4619      	mov	r1, r3
 8001d1a:	4610      	mov	r0, r2
 8001d1c:	f000 f9c0 	bl	80020a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2201      	movs	r2, #1
 8001d24:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2201      	movs	r2, #1
 8001d34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2201      	movs	r2, #1
 8001d44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2201      	movs	r2, #1
 8001d54:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2201      	movs	r2, #1
 8001d64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001d70:	2300      	movs	r3, #0
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3708      	adds	r7, #8
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}

08001d7a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001d7a:	b480      	push	{r7}
 8001d7c:	b083      	sub	sp, #12
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001d82:	bf00      	nop
 8001d84:	370c      	adds	r7, #12
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
	...

08001d90 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b085      	sub	sp, #20
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d001      	beq.n	8001da8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e04e      	b.n	8001e46 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2202      	movs	r2, #2
 8001dac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	68da      	ldr	r2, [r3, #12]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f042 0201 	orr.w	r2, r2, #1
 8001dbe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a23      	ldr	r2, [pc, #140]	@ (8001e54 <HAL_TIM_Base_Start_IT+0xc4>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d022      	beq.n	8001e10 <HAL_TIM_Base_Start_IT+0x80>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001dd2:	d01d      	beq.n	8001e10 <HAL_TIM_Base_Start_IT+0x80>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a1f      	ldr	r2, [pc, #124]	@ (8001e58 <HAL_TIM_Base_Start_IT+0xc8>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d018      	beq.n	8001e10 <HAL_TIM_Base_Start_IT+0x80>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a1e      	ldr	r2, [pc, #120]	@ (8001e5c <HAL_TIM_Base_Start_IT+0xcc>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d013      	beq.n	8001e10 <HAL_TIM_Base_Start_IT+0x80>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a1c      	ldr	r2, [pc, #112]	@ (8001e60 <HAL_TIM_Base_Start_IT+0xd0>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d00e      	beq.n	8001e10 <HAL_TIM_Base_Start_IT+0x80>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a1b      	ldr	r2, [pc, #108]	@ (8001e64 <HAL_TIM_Base_Start_IT+0xd4>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d009      	beq.n	8001e10 <HAL_TIM_Base_Start_IT+0x80>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a19      	ldr	r2, [pc, #100]	@ (8001e68 <HAL_TIM_Base_Start_IT+0xd8>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d004      	beq.n	8001e10 <HAL_TIM_Base_Start_IT+0x80>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a18      	ldr	r2, [pc, #96]	@ (8001e6c <HAL_TIM_Base_Start_IT+0xdc>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d111      	bne.n	8001e34 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	f003 0307 	and.w	r3, r3, #7
 8001e1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	2b06      	cmp	r3, #6
 8001e20:	d010      	beq.n	8001e44 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f042 0201 	orr.w	r2, r2, #1
 8001e30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e32:	e007      	b.n	8001e44 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f042 0201 	orr.w	r2, r2, #1
 8001e42:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e44:	2300      	movs	r3, #0
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3714      	adds	r7, #20
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr
 8001e52:	bf00      	nop
 8001e54:	40010000 	.word	0x40010000
 8001e58:	40000400 	.word	0x40000400
 8001e5c:	40000800 	.word	0x40000800
 8001e60:	40000c00 	.word	0x40000c00
 8001e64:	40010400 	.word	0x40010400
 8001e68:	40014000 	.word	0x40014000
 8001e6c:	40001800 	.word	0x40001800

08001e70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b084      	sub	sp, #16
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	68db      	ldr	r3, [r3, #12]
 8001e7e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	691b      	ldr	r3, [r3, #16]
 8001e86:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	f003 0302 	and.w	r3, r3, #2
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d020      	beq.n	8001ed4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	f003 0302 	and.w	r3, r3, #2
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d01b      	beq.n	8001ed4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f06f 0202 	mvn.w	r2, #2
 8001ea4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	699b      	ldr	r3, [r3, #24]
 8001eb2:	f003 0303 	and.w	r3, r3, #3
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d003      	beq.n	8001ec2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f000 f8d2 	bl	8002064 <HAL_TIM_IC_CaptureCallback>
 8001ec0:	e005      	b.n	8001ece <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f000 f8c4 	bl	8002050 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	f000 f8d5 	bl	8002078 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	f003 0304 	and.w	r3, r3, #4
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d020      	beq.n	8001f20 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	f003 0304 	and.w	r3, r3, #4
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d01b      	beq.n	8001f20 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f06f 0204 	mvn.w	r2, #4
 8001ef0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2202      	movs	r2, #2
 8001ef6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	699b      	ldr	r3, [r3, #24]
 8001efe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d003      	beq.n	8001f0e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f000 f8ac 	bl	8002064 <HAL_TIM_IC_CaptureCallback>
 8001f0c:	e005      	b.n	8001f1a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f000 f89e 	bl	8002050 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f000 f8af 	bl	8002078 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	f003 0308 	and.w	r3, r3, #8
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d020      	beq.n	8001f6c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	f003 0308 	and.w	r3, r3, #8
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d01b      	beq.n	8001f6c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f06f 0208 	mvn.w	r2, #8
 8001f3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2204      	movs	r2, #4
 8001f42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	69db      	ldr	r3, [r3, #28]
 8001f4a:	f003 0303 	and.w	r3, r3, #3
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d003      	beq.n	8001f5a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f000 f886 	bl	8002064 <HAL_TIM_IC_CaptureCallback>
 8001f58:	e005      	b.n	8001f66 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f000 f878 	bl	8002050 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f000 f889 	bl	8002078 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	f003 0310 	and.w	r3, r3, #16
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d020      	beq.n	8001fb8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	f003 0310 	and.w	r3, r3, #16
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d01b      	beq.n	8001fb8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f06f 0210 	mvn.w	r2, #16
 8001f88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2208      	movs	r2, #8
 8001f8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	69db      	ldr	r3, [r3, #28]
 8001f96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d003      	beq.n	8001fa6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f000 f860 	bl	8002064 <HAL_TIM_IC_CaptureCallback>
 8001fa4:	e005      	b.n	8001fb2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f000 f852 	bl	8002050 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	f000 f863 	bl	8002078 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	f003 0301 	and.w	r3, r3, #1
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d00c      	beq.n	8001fdc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	f003 0301 	and.w	r3, r3, #1
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d007      	beq.n	8001fdc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f06f 0201 	mvn.w	r2, #1
 8001fd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f7fe fbf4 	bl	80007c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d00c      	beq.n	8002000 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d007      	beq.n	8002000 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001ff8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f000 f906 	bl	800220c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002006:	2b00      	cmp	r3, #0
 8002008:	d00c      	beq.n	8002024 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002010:	2b00      	cmp	r3, #0
 8002012:	d007      	beq.n	8002024 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800201c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f000 f834 	bl	800208c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	f003 0320 	and.w	r3, r3, #32
 800202a:	2b00      	cmp	r3, #0
 800202c:	d00c      	beq.n	8002048 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	f003 0320 	and.w	r3, r3, #32
 8002034:	2b00      	cmp	r3, #0
 8002036:	d007      	beq.n	8002048 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f06f 0220 	mvn.w	r2, #32
 8002040:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f000 f8d8 	bl	80021f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002048:	bf00      	nop
 800204a:	3710      	adds	r7, #16
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}

08002050 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002058:	bf00      	nop
 800205a:	370c      	adds	r7, #12
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr

08002064 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800206c:	bf00      	nop
 800206e:	370c      	adds	r7, #12
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr

08002078 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002080:	bf00      	nop
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002094:	bf00      	nop
 8002096:	370c      	adds	r7, #12
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b085      	sub	sp, #20
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	4a46      	ldr	r2, [pc, #280]	@ (80021cc <TIM_Base_SetConfig+0x12c>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d013      	beq.n	80020e0 <TIM_Base_SetConfig+0x40>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020be:	d00f      	beq.n	80020e0 <TIM_Base_SetConfig+0x40>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	4a43      	ldr	r2, [pc, #268]	@ (80021d0 <TIM_Base_SetConfig+0x130>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d00b      	beq.n	80020e0 <TIM_Base_SetConfig+0x40>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	4a42      	ldr	r2, [pc, #264]	@ (80021d4 <TIM_Base_SetConfig+0x134>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d007      	beq.n	80020e0 <TIM_Base_SetConfig+0x40>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	4a41      	ldr	r2, [pc, #260]	@ (80021d8 <TIM_Base_SetConfig+0x138>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d003      	beq.n	80020e0 <TIM_Base_SetConfig+0x40>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	4a40      	ldr	r2, [pc, #256]	@ (80021dc <TIM_Base_SetConfig+0x13c>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d108      	bne.n	80020f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80020e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	68fa      	ldr	r2, [r7, #12]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4a35      	ldr	r2, [pc, #212]	@ (80021cc <TIM_Base_SetConfig+0x12c>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d02b      	beq.n	8002152 <TIM_Base_SetConfig+0xb2>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002100:	d027      	beq.n	8002152 <TIM_Base_SetConfig+0xb2>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a32      	ldr	r2, [pc, #200]	@ (80021d0 <TIM_Base_SetConfig+0x130>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d023      	beq.n	8002152 <TIM_Base_SetConfig+0xb2>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4a31      	ldr	r2, [pc, #196]	@ (80021d4 <TIM_Base_SetConfig+0x134>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d01f      	beq.n	8002152 <TIM_Base_SetConfig+0xb2>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a30      	ldr	r2, [pc, #192]	@ (80021d8 <TIM_Base_SetConfig+0x138>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d01b      	beq.n	8002152 <TIM_Base_SetConfig+0xb2>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4a2f      	ldr	r2, [pc, #188]	@ (80021dc <TIM_Base_SetConfig+0x13c>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d017      	beq.n	8002152 <TIM_Base_SetConfig+0xb2>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a2e      	ldr	r2, [pc, #184]	@ (80021e0 <TIM_Base_SetConfig+0x140>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d013      	beq.n	8002152 <TIM_Base_SetConfig+0xb2>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4a2d      	ldr	r2, [pc, #180]	@ (80021e4 <TIM_Base_SetConfig+0x144>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d00f      	beq.n	8002152 <TIM_Base_SetConfig+0xb2>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4a2c      	ldr	r2, [pc, #176]	@ (80021e8 <TIM_Base_SetConfig+0x148>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d00b      	beq.n	8002152 <TIM_Base_SetConfig+0xb2>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4a2b      	ldr	r2, [pc, #172]	@ (80021ec <TIM_Base_SetConfig+0x14c>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d007      	beq.n	8002152 <TIM_Base_SetConfig+0xb2>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4a2a      	ldr	r2, [pc, #168]	@ (80021f0 <TIM_Base_SetConfig+0x150>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d003      	beq.n	8002152 <TIM_Base_SetConfig+0xb2>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4a29      	ldr	r2, [pc, #164]	@ (80021f4 <TIM_Base_SetConfig+0x154>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d108      	bne.n	8002164 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002158:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	68db      	ldr	r3, [r3, #12]
 800215e:	68fa      	ldr	r2, [r7, #12]
 8002160:	4313      	orrs	r3, r2
 8002162:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	695b      	ldr	r3, [r3, #20]
 800216e:	4313      	orrs	r3, r2
 8002170:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	68fa      	ldr	r2, [r7, #12]
 8002176:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	689a      	ldr	r2, [r3, #8]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	4a10      	ldr	r2, [pc, #64]	@ (80021cc <TIM_Base_SetConfig+0x12c>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d003      	beq.n	8002198 <TIM_Base_SetConfig+0xf8>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	4a12      	ldr	r2, [pc, #72]	@ (80021dc <TIM_Base_SetConfig+0x13c>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d103      	bne.n	80021a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	691a      	ldr	r2, [r3, #16]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2201      	movs	r2, #1
 80021a4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	691b      	ldr	r3, [r3, #16]
 80021aa:	f003 0301 	and.w	r3, r3, #1
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d105      	bne.n	80021be <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	691b      	ldr	r3, [r3, #16]
 80021b6:	f023 0201 	bic.w	r2, r3, #1
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	611a      	str	r2, [r3, #16]
  }
}
 80021be:	bf00      	nop
 80021c0:	3714      	adds	r7, #20
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
 80021ca:	bf00      	nop
 80021cc:	40010000 	.word	0x40010000
 80021d0:	40000400 	.word	0x40000400
 80021d4:	40000800 	.word	0x40000800
 80021d8:	40000c00 	.word	0x40000c00
 80021dc:	40010400 	.word	0x40010400
 80021e0:	40014000 	.word	0x40014000
 80021e4:	40014400 	.word	0x40014400
 80021e8:	40014800 	.word	0x40014800
 80021ec:	40001800 	.word	0x40001800
 80021f0:	40001c00 	.word	0x40001c00
 80021f4:	40002000 	.word	0x40002000

080021f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002200:	bf00      	nop
 8002202:	370c      	adds	r7, #12
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr

0800220c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002214:	bf00      	nop
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr

08002220 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f103 0208 	add.w	r2, r3, #8
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	f04f 32ff 	mov.w	r2, #4294967295
 8002238:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f103 0208 	add.w	r2, r3, #8
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	f103 0208 	add.w	r2, r3, #8
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2200      	movs	r2, #0
 8002252:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002254:	bf00      	nop
 8002256:	370c      	adds	r7, #12
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2200      	movs	r2, #0
 800226c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800226e:	bf00      	nop
 8002270:	370c      	adds	r7, #12
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr

0800227a <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800227a:	b480      	push	{r7}
 800227c:	b085      	sub	sp, #20
 800227e:	af00      	add	r7, sp, #0
 8002280:	6078      	str	r0, [r7, #4]
 8002282:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002290:	d103      	bne.n	800229a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	691b      	ldr	r3, [r3, #16]
 8002296:	60fb      	str	r3, [r7, #12]
 8002298:	e00c      	b.n	80022b4 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	3308      	adds	r3, #8
 800229e:	60fb      	str	r3, [r7, #12]
 80022a0:	e002      	b.n	80022a8 <vListInsert+0x2e>
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	60fb      	str	r3, [r7, #12]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	68ba      	ldr	r2, [r7, #8]
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d2f6      	bcs.n	80022a2 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	685a      	ldr	r2, [r3, #4]
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	683a      	ldr	r2, [r7, #0]
 80022c2:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	68fa      	ldr	r2, [r7, #12]
 80022c8:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	683a      	ldr	r2, [r7, #0]
 80022ce:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	1c5a      	adds	r2, r3, #1
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	601a      	str	r2, [r3, #0]
}
 80022e0:	bf00      	nop
 80022e2:	3714      	adds	r7, #20
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr

080022ec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80022ec:	b480      	push	{r7}
 80022ee:	b085      	sub	sp, #20
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	691b      	ldr	r3, [r3, #16]
 80022f8:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	6892      	ldr	r2, [r2, #8]
 8002302:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	6852      	ldr	r2, [r2, #4]
 800230c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	429a      	cmp	r2, r3
 8002316:	d103      	bne.n	8002320 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	689a      	ldr	r2, [r3, #8]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2200      	movs	r2, #0
 8002324:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	1e5a      	subs	r2, r3, #1
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
}
 8002334:	4618      	mov	r0, r3
 8002336:	3714      	adds	r7, #20
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr

08002340 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b086      	sub	sp, #24
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800234a:	2301      	movs	r3, #1
 800234c:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d10b      	bne.n	8002370 <xQueueGenericReset+0x30>
        __asm volatile
 8002358:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800235c:	f383 8811 	msr	BASEPRI, r3
 8002360:	f3bf 8f6f 	isb	sy
 8002364:	f3bf 8f4f 	dsb	sy
 8002368:	60fb      	str	r3, [r7, #12]
    }
 800236a:	bf00      	nop
 800236c:	bf00      	nop
 800236e:	e7fd      	b.n	800236c <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d052      	beq.n	800241c <xQueueGenericReset+0xdc>
        ( pxQueue->uxLength >= 1U ) &&
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 800237a:	2b00      	cmp	r3, #0
 800237c:	d04e      	beq.n	800241c <xQueueGenericReset+0xdc>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002386:	2100      	movs	r1, #0
 8002388:	fba3 2302 	umull	r2, r3, r3, r2
 800238c:	2b00      	cmp	r3, #0
 800238e:	d000      	beq.n	8002392 <xQueueGenericReset+0x52>
 8002390:	2101      	movs	r1, #1
 8002392:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8002394:	2b00      	cmp	r3, #0
 8002396:	d141      	bne.n	800241c <xQueueGenericReset+0xdc>
    {
        taskENTER_CRITICAL();
 8002398:	f001 fd98 	bl	8003ecc <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023a4:	6939      	ldr	r1, [r7, #16]
 80023a6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80023a8:	fb01 f303 	mul.w	r3, r1, r3
 80023ac:	441a      	add	r2, r3
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	2200      	movs	r2, #0
 80023b6:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023c8:	3b01      	subs	r3, #1
 80023ca:	6939      	ldr	r1, [r7, #16]
 80023cc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80023ce:	fb01 f303 	mul.w	r3, r1, r3
 80023d2:	441a      	add	r2, r3
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	22ff      	movs	r2, #255	@ 0xff
 80023dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	22ff      	movs	r2, #255	@ 0xff
 80023e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d109      	bne.n	8002402 <xQueueGenericReset+0xc2>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	691b      	ldr	r3, [r3, #16]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d00f      	beq.n	8002416 <xQueueGenericReset+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	3310      	adds	r3, #16
 80023fa:	4618      	mov	r0, r3
 80023fc:	f000 fef8 	bl	80031f0 <xTaskRemoveFromEventList>
 8002400:	e009      	b.n	8002416 <xQueueGenericReset+0xd6>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	3310      	adds	r3, #16
 8002406:	4618      	mov	r0, r3
 8002408:	f7ff ff0a 	bl	8002220 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	3324      	adds	r3, #36	@ 0x24
 8002410:	4618      	mov	r0, r3
 8002412:	f7ff ff05 	bl	8002220 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8002416:	f001 fd8b 	bl	8003f30 <vPortExitCritical>
 800241a:	e001      	b.n	8002420 <xQueueGenericReset+0xe0>
    }
    else
    {
        xReturn = pdFAIL;
 800241c:	2300      	movs	r3, #0
 800241e:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d10b      	bne.n	800243e <xQueueGenericReset+0xfe>
        __asm volatile
 8002426:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800242a:	f383 8811 	msr	BASEPRI, r3
 800242e:	f3bf 8f6f 	isb	sy
 8002432:	f3bf 8f4f 	dsb	sy
 8002436:	60bb      	str	r3, [r7, #8]
    }
 8002438:	bf00      	nop
 800243a:	bf00      	nop
 800243c:	e7fd      	b.n	800243a <xQueueGenericReset+0xfa>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 800243e:	697b      	ldr	r3, [r7, #20]
}
 8002440:	4618      	mov	r0, r3
 8002442:	3718      	adds	r7, #24
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}

08002448 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002448:	b580      	push	{r7, lr}
 800244a:	b08a      	sub	sp, #40	@ 0x28
 800244c:	af02      	add	r7, sp, #8
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	60b9      	str	r1, [r7, #8]
 8002452:	4613      	mov	r3, r2
 8002454:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8002456:	2300      	movs	r3, #0
 8002458:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d02e      	beq.n	80024be <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002460:	2100      	movs	r1, #0
 8002462:	68ba      	ldr	r2, [r7, #8]
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	fba3 2302 	umull	r2, r3, r3, r2
 800246a:	2b00      	cmp	r3, #0
 800246c:	d000      	beq.n	8002470 <xQueueGenericCreate+0x28>
 800246e:	2101      	movs	r1, #1
 8002470:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002472:	2b00      	cmp	r3, #0
 8002474:	d123      	bne.n	80024be <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	68ba      	ldr	r2, [r7, #8]
 800247a:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800247e:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8002482:	d81c      	bhi.n	80024be <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	68ba      	ldr	r2, [r7, #8]
 8002488:	fb02 f303 	mul.w	r3, r2, r3
 800248c:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	3350      	adds	r3, #80	@ 0x50
 8002492:	4618      	mov	r0, r3
 8002494:	f001 fe02 	bl	800409c <pvPortMalloc>
 8002498:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d01d      	beq.n	80024dc <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	3350      	adds	r3, #80	@ 0x50
 80024a8:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80024aa:	79fa      	ldrb	r2, [r7, #7]
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	9300      	str	r3, [sp, #0]
 80024b0:	4613      	mov	r3, r2
 80024b2:	697a      	ldr	r2, [r7, #20]
 80024b4:	68b9      	ldr	r1, [r7, #8]
 80024b6:	68f8      	ldr	r0, [r7, #12]
 80024b8:	f000 f815 	bl	80024e6 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 80024bc:	e00e      	b.n	80024dc <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d10b      	bne.n	80024dc <xQueueGenericCreate+0x94>
        __asm volatile
 80024c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024c8:	f383 8811 	msr	BASEPRI, r3
 80024cc:	f3bf 8f6f 	isb	sy
 80024d0:	f3bf 8f4f 	dsb	sy
 80024d4:	613b      	str	r3, [r7, #16]
    }
 80024d6:	bf00      	nop
 80024d8:	bf00      	nop
 80024da:	e7fd      	b.n	80024d8 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80024dc:	69fb      	ldr	r3, [r7, #28]
    }
 80024de:	4618      	mov	r0, r3
 80024e0:	3720      	adds	r7, #32
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}

080024e6 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80024e6:	b580      	push	{r7, lr}
 80024e8:	b084      	sub	sp, #16
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	60f8      	str	r0, [r7, #12]
 80024ee:	60b9      	str	r1, [r7, #8]
 80024f0:	607a      	str	r2, [r7, #4]
 80024f2:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d103      	bne.n	8002502 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80024fa:	69bb      	ldr	r3, [r7, #24]
 80024fc:	69ba      	ldr	r2, [r7, #24]
 80024fe:	601a      	str	r2, [r3, #0]
 8002500:	e002      	b.n	8002508 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002502:	69bb      	ldr	r3, [r7, #24]
 8002504:	687a      	ldr	r2, [r7, #4]
 8002506:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002508:	69bb      	ldr	r3, [r7, #24]
 800250a:	68fa      	ldr	r2, [r7, #12]
 800250c:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	68ba      	ldr	r2, [r7, #8]
 8002512:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002514:	2101      	movs	r1, #1
 8002516:	69b8      	ldr	r0, [r7, #24]
 8002518:	f7ff ff12 	bl	8002340 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 800251c:	69bb      	ldr	r3, [r7, #24]
 800251e:	78fa      	ldrb	r2, [r7, #3]
 8002520:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8002524:	bf00      	nop
 8002526:	3710      	adds	r7, #16
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}

0800252c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b08c      	sub	sp, #48	@ 0x30
 8002530:	af00      	add	r7, sp, #0
 8002532:	60f8      	str	r0, [r7, #12]
 8002534:	60b9      	str	r1, [r7, #8]
 8002536:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002538:	2300      	movs	r3, #0
 800253a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002540:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002542:	2b00      	cmp	r3, #0
 8002544:	d10b      	bne.n	800255e <xQueueReceive+0x32>
        __asm volatile
 8002546:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800254a:	f383 8811 	msr	BASEPRI, r3
 800254e:	f3bf 8f6f 	isb	sy
 8002552:	f3bf 8f4f 	dsb	sy
 8002556:	623b      	str	r3, [r7, #32]
    }
 8002558:	bf00      	nop
 800255a:	bf00      	nop
 800255c:	e7fd      	b.n	800255a <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d103      	bne.n	800256c <xQueueReceive+0x40>
 8002564:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002566:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002568:	2b00      	cmp	r3, #0
 800256a:	d101      	bne.n	8002570 <xQueueReceive+0x44>
 800256c:	2301      	movs	r3, #1
 800256e:	e000      	b.n	8002572 <xQueueReceive+0x46>
 8002570:	2300      	movs	r3, #0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d10b      	bne.n	800258e <xQueueReceive+0x62>
        __asm volatile
 8002576:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800257a:	f383 8811 	msr	BASEPRI, r3
 800257e:	f3bf 8f6f 	isb	sy
 8002582:	f3bf 8f4f 	dsb	sy
 8002586:	61fb      	str	r3, [r7, #28]
    }
 8002588:	bf00      	nop
 800258a:	bf00      	nop
 800258c:	e7fd      	b.n	800258a <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800258e:	f001 f83d 	bl	800360c <xTaskGetSchedulerState>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d102      	bne.n	800259e <xQueueReceive+0x72>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d101      	bne.n	80025a2 <xQueueReceive+0x76>
 800259e:	2301      	movs	r3, #1
 80025a0:	e000      	b.n	80025a4 <xQueueReceive+0x78>
 80025a2:	2300      	movs	r3, #0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d10b      	bne.n	80025c0 <xQueueReceive+0x94>
        __asm volatile
 80025a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025ac:	f383 8811 	msr	BASEPRI, r3
 80025b0:	f3bf 8f6f 	isb	sy
 80025b4:	f3bf 8f4f 	dsb	sy
 80025b8:	61bb      	str	r3, [r7, #24]
    }
 80025ba:	bf00      	nop
 80025bc:	bf00      	nop
 80025be:	e7fd      	b.n	80025bc <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80025c0:	f001 fc84 	bl	8003ecc <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80025c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025c8:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80025ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d014      	beq.n	80025fa <xQueueReceive+0xce>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80025d0:	68b9      	ldr	r1, [r7, #8]
 80025d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80025d4:	f000 f882 	bl	80026dc <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80025d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025da:	1e5a      	subs	r2, r3, #1
 80025dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025de:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80025e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025e2:	691b      	ldr	r3, [r3, #16]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d004      	beq.n	80025f2 <xQueueReceive+0xc6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80025e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025ea:	3310      	adds	r3, #16
 80025ec:	4618      	mov	r0, r3
 80025ee:	f000 fdff 	bl	80031f0 <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80025f2:	f001 fc9d 	bl	8003f30 <vPortExitCritical>
                return pdPASS;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e069      	b.n	80026ce <xQueueReceive+0x1a2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d103      	bne.n	8002608 <xQueueReceive+0xdc>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002600:	f001 fc96 	bl	8003f30 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8002604:	2300      	movs	r3, #0
 8002606:	e062      	b.n	80026ce <xQueueReceive+0x1a2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002608:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800260a:	2b00      	cmp	r3, #0
 800260c:	d106      	bne.n	800261c <xQueueReceive+0xf0>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800260e:	f107 0310 	add.w	r3, r7, #16
 8002612:	4618      	mov	r0, r3
 8002614:	f000 fec4 	bl	80033a0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002618:	2301      	movs	r3, #1
 800261a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800261c:	f001 fc88 	bl	8003f30 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002620:	f000 fb1e 	bl	8002c60 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002624:	f001 fc52 	bl	8003ecc <vPortEnterCritical>
 8002628:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800262a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800262e:	b25b      	sxtb	r3, r3
 8002630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002634:	d103      	bne.n	800263e <xQueueReceive+0x112>
 8002636:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002638:	2200      	movs	r2, #0
 800263a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800263e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002640:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002644:	b25b      	sxtb	r3, r3
 8002646:	f1b3 3fff 	cmp.w	r3, #4294967295
 800264a:	d103      	bne.n	8002654 <xQueueReceive+0x128>
 800264c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800264e:	2200      	movs	r2, #0
 8002650:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002654:	f001 fc6c 	bl	8003f30 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002658:	1d3a      	adds	r2, r7, #4
 800265a:	f107 0310 	add.w	r3, r7, #16
 800265e:	4611      	mov	r1, r2
 8002660:	4618      	mov	r0, r3
 8002662:	f000 feb3 	bl	80033cc <xTaskCheckForTimeOut>
 8002666:	4603      	mov	r3, r0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d123      	bne.n	80026b4 <xQueueReceive+0x188>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800266c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800266e:	f000 f8ad 	bl	80027cc <prvIsQueueEmpty>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d017      	beq.n	80026a8 <xQueueReceive+0x17c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002678:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800267a:	3324      	adds	r3, #36	@ 0x24
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	4611      	mov	r1, r2
 8002680:	4618      	mov	r0, r3
 8002682:	f000 fd49 	bl	8003118 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002686:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002688:	f000 f84e 	bl	8002728 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800268c:	f000 faf6 	bl	8002c7c <xTaskResumeAll>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d194      	bne.n	80025c0 <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 8002696:	4b10      	ldr	r3, [pc, #64]	@ (80026d8 <xQueueReceive+0x1ac>)
 8002698:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800269c:	601a      	str	r2, [r3, #0]
 800269e:	f3bf 8f4f 	dsb	sy
 80026a2:	f3bf 8f6f 	isb	sy
 80026a6:	e78b      	b.n	80025c0 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80026a8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80026aa:	f000 f83d 	bl	8002728 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80026ae:	f000 fae5 	bl	8002c7c <xTaskResumeAll>
 80026b2:	e785      	b.n	80025c0 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80026b4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80026b6:	f000 f837 	bl	8002728 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80026ba:	f000 fadf 	bl	8002c7c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80026be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80026c0:	f000 f884 	bl	80027cc <prvIsQueueEmpty>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	f43f af7a 	beq.w	80025c0 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80026cc:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3730      	adds	r7, #48	@ 0x30
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	e000ed04 	.word	0xe000ed04

080026dc <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b082      	sub	sp, #8
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
 80026e4:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d018      	beq.n	8002720 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	68da      	ldr	r2, [r3, #12]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026f6:	441a      	add	r2, r3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	68da      	ldr	r2, [r3, #12]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	429a      	cmp	r2, r3
 8002706:	d303      	bcc.n	8002710 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	68d9      	ldr	r1, [r3, #12]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002718:	461a      	mov	r2, r3
 800271a:	6838      	ldr	r0, [r7, #0]
 800271c:	f002 f8fb 	bl	8004916 <memcpy>
    }
}
 8002720:	bf00      	nop
 8002722:	3708      	adds	r7, #8
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}

08002728 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b084      	sub	sp, #16
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002730:	f001 fbcc 	bl	8003ecc <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800273a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800273c:	e011      	b.n	8002762 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002742:	2b00      	cmp	r3, #0
 8002744:	d012      	beq.n	800276c <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	3324      	adds	r3, #36	@ 0x24
 800274a:	4618      	mov	r0, r3
 800274c:	f000 fd50 	bl	80031f0 <xTaskRemoveFromEventList>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d001      	beq.n	800275a <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8002756:	f000 fea1 	bl	800349c <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800275a:	7bfb      	ldrb	r3, [r7, #15]
 800275c:	3b01      	subs	r3, #1
 800275e:	b2db      	uxtb	r3, r3
 8002760:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002762:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002766:	2b00      	cmp	r3, #0
 8002768:	dce9      	bgt.n	800273e <prvUnlockQueue+0x16>
 800276a:	e000      	b.n	800276e <prvUnlockQueue+0x46>
                    break;
 800276c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	22ff      	movs	r2, #255	@ 0xff
 8002772:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8002776:	f001 fbdb 	bl	8003f30 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800277a:	f001 fba7 	bl	8003ecc <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002784:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002786:	e011      	b.n	80027ac <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	691b      	ldr	r3, [r3, #16]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d012      	beq.n	80027b6 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	3310      	adds	r3, #16
 8002794:	4618      	mov	r0, r3
 8002796:	f000 fd2b 	bl	80031f0 <xTaskRemoveFromEventList>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d001      	beq.n	80027a4 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80027a0:	f000 fe7c 	bl	800349c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80027a4:	7bbb      	ldrb	r3, [r7, #14]
 80027a6:	3b01      	subs	r3, #1
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80027ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	dce9      	bgt.n	8002788 <prvUnlockQueue+0x60>
 80027b4:	e000      	b.n	80027b8 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80027b6:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	22ff      	movs	r2, #255	@ 0xff
 80027bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 80027c0:	f001 fbb6 	bl	8003f30 <vPortExitCritical>
}
 80027c4:	bf00      	nop
 80027c6:	3710      	adds	r7, #16
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}

080027cc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b084      	sub	sp, #16
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80027d4:	f001 fb7a 	bl	8003ecc <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d102      	bne.n	80027e6 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80027e0:	2301      	movs	r3, #1
 80027e2:	60fb      	str	r3, [r7, #12]
 80027e4:	e001      	b.n	80027ea <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80027e6:	2300      	movs	r3, #0
 80027e8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80027ea:	f001 fba1 	bl	8003f30 <vPortExitCritical>

    return xReturn;
 80027ee:	68fb      	ldr	r3, [r7, #12]
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	3710      	adds	r7, #16
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}

080027f8 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80027f8:	b480      	push	{r7}
 80027fa:	b087      	sub	sp, #28
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8002802:	2300      	movs	r3, #0
 8002804:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d10b      	bne.n	8002824 <vQueueAddToRegistry+0x2c>
        __asm volatile
 800280c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002810:	f383 8811 	msr	BASEPRI, r3
 8002814:	f3bf 8f6f 	isb	sy
 8002818:	f3bf 8f4f 	dsb	sy
 800281c:	60fb      	str	r3, [r7, #12]
    }
 800281e:	bf00      	nop
 8002820:	bf00      	nop
 8002822:	e7fd      	b.n	8002820 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d024      	beq.n	8002874 <vQueueAddToRegistry+0x7c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800282a:	2300      	movs	r3, #0
 800282c:	617b      	str	r3, [r7, #20]
 800282e:	e01e      	b.n	800286e <vQueueAddToRegistry+0x76>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8002830:	4a18      	ldr	r2, [pc, #96]	@ (8002894 <vQueueAddToRegistry+0x9c>)
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	00db      	lsls	r3, r3, #3
 8002836:	4413      	add	r3, r2
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	429a      	cmp	r2, r3
 800283e:	d105      	bne.n	800284c <vQueueAddToRegistry+0x54>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	00db      	lsls	r3, r3, #3
 8002844:	4a13      	ldr	r2, [pc, #76]	@ (8002894 <vQueueAddToRegistry+0x9c>)
 8002846:	4413      	add	r3, r2
 8002848:	613b      	str	r3, [r7, #16]
                    break;
 800284a:	e013      	b.n	8002874 <vQueueAddToRegistry+0x7c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d10a      	bne.n	8002868 <vQueueAddToRegistry+0x70>
 8002852:	4a10      	ldr	r2, [pc, #64]	@ (8002894 <vQueueAddToRegistry+0x9c>)
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d104      	bne.n	8002868 <vQueueAddToRegistry+0x70>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	00db      	lsls	r3, r3, #3
 8002862:	4a0c      	ldr	r2, [pc, #48]	@ (8002894 <vQueueAddToRegistry+0x9c>)
 8002864:	4413      	add	r3, r2
 8002866:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	3301      	adds	r3, #1
 800286c:	617b      	str	r3, [r7, #20]
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	2b07      	cmp	r3, #7
 8002872:	d9dd      	bls.n	8002830 <vQueueAddToRegistry+0x38>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d005      	beq.n	8002886 <vQueueAddToRegistry+0x8e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	683a      	ldr	r2, [r7, #0]
 800287e:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8002886:	bf00      	nop
 8002888:	371c      	adds	r7, #28
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
 8002892:	bf00      	nop
 8002894:	200000d8 	.word	0x200000d8

08002898 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002898:	b580      	push	{r7, lr}
 800289a:	b086      	sub	sp, #24
 800289c:	af00      	add	r7, sp, #0
 800289e:	60f8      	str	r0, [r7, #12]
 80028a0:	60b9      	str	r1, [r7, #8]
 80028a2:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80028a8:	f001 fb10 	bl	8003ecc <vPortEnterCritical>
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80028b2:	b25b      	sxtb	r3, r3
 80028b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028b8:	d103      	bne.n	80028c2 <vQueueWaitForMessageRestricted+0x2a>
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	2200      	movs	r2, #0
 80028be:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80028c8:	b25b      	sxtb	r3, r3
 80028ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028ce:	d103      	bne.n	80028d8 <vQueueWaitForMessageRestricted+0x40>
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	2200      	movs	r2, #0
 80028d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80028d8:	f001 fb2a 	bl	8003f30 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d106      	bne.n	80028f2 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	3324      	adds	r3, #36	@ 0x24
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	68b9      	ldr	r1, [r7, #8]
 80028ec:	4618      	mov	r0, r3
 80028ee:	f000 fc39 	bl	8003164 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80028f2:	6978      	ldr	r0, [r7, #20]
 80028f4:	f7ff ff18 	bl	8002728 <prvUnlockQueue>
    }
 80028f8:	bf00      	nop
 80028fa:	3718      	adds	r7, #24
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}

08002900 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002900:	b580      	push	{r7, lr}
 8002902:	b08c      	sub	sp, #48	@ 0x30
 8002904:	af04      	add	r7, sp, #16
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	60b9      	str	r1, [r7, #8]
 800290a:	603b      	str	r3, [r7, #0]
 800290c:	4613      	mov	r3, r2
 800290e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002910:	88fb      	ldrh	r3, [r7, #6]
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	4618      	mov	r0, r3
 8002916:	f001 fbc1 	bl	800409c <pvPortMalloc>
 800291a:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d013      	beq.n	800294a <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002922:	2058      	movs	r0, #88	@ 0x58
 8002924:	f001 fbba 	bl	800409c <pvPortMalloc>
 8002928:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d008      	beq.n	8002942 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8002930:	2258      	movs	r2, #88	@ 0x58
 8002932:	2100      	movs	r1, #0
 8002934:	69f8      	ldr	r0, [r7, #28]
 8002936:	f001 ff79 	bl	800482c <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	697a      	ldr	r2, [r7, #20]
 800293e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002940:	e005      	b.n	800294e <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8002942:	6978      	ldr	r0, [r7, #20]
 8002944:	f001 fc66 	bl	8004214 <vPortFree>
 8002948:	e001      	b.n	800294e <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 800294a:	2300      	movs	r3, #0
 800294c:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d013      	beq.n	800297c <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002954:	88fa      	ldrh	r2, [r7, #6]
 8002956:	2300      	movs	r3, #0
 8002958:	9303      	str	r3, [sp, #12]
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	9302      	str	r3, [sp, #8]
 800295e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002960:	9301      	str	r3, [sp, #4]
 8002962:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002964:	9300      	str	r3, [sp, #0]
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	68b9      	ldr	r1, [r7, #8]
 800296a:	68f8      	ldr	r0, [r7, #12]
 800296c:	f000 f80e 	bl	800298c <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002970:	69f8      	ldr	r0, [r7, #28]
 8002972:	f000 f89b 	bl	8002aac <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002976:	2301      	movs	r3, #1
 8002978:	61bb      	str	r3, [r7, #24]
 800297a:	e002      	b.n	8002982 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800297c:	f04f 33ff 	mov.w	r3, #4294967295
 8002980:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002982:	69bb      	ldr	r3, [r7, #24]
    }
 8002984:	4618      	mov	r0, r3
 8002986:	3720      	adds	r7, #32
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}

0800298c <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b088      	sub	sp, #32
 8002990:	af00      	add	r7, sp, #0
 8002992:	60f8      	str	r0, [r7, #12]
 8002994:	60b9      	str	r1, [r7, #8]
 8002996:	607a      	str	r2, [r7, #4]
 8002998:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800299a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800299c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	461a      	mov	r2, r3
 80029a4:	21a5      	movs	r1, #165	@ 0xa5
 80029a6:	f001 ff41 	bl	800482c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80029aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80029b4:	3b01      	subs	r3, #1
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	4413      	add	r3, r2
 80029ba:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	f023 0307 	bic.w	r3, r3, #7
 80029c2:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80029c4:	69bb      	ldr	r3, [r7, #24]
 80029c6:	f003 0307 	and.w	r3, r3, #7
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d00b      	beq.n	80029e6 <prvInitialiseNewTask+0x5a>
        __asm volatile
 80029ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029d2:	f383 8811 	msr	BASEPRI, r3
 80029d6:	f3bf 8f6f 	isb	sy
 80029da:	f3bf 8f4f 	dsb	sy
 80029de:	617b      	str	r3, [r7, #20]
    }
 80029e0:	bf00      	nop
 80029e2:	bf00      	nop
 80029e4:	e7fd      	b.n	80029e2 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d01e      	beq.n	8002a2a <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80029ec:	2300      	movs	r3, #0
 80029ee:	61fb      	str	r3, [r7, #28]
 80029f0:	e012      	b.n	8002a18 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80029f2:	68ba      	ldr	r2, [r7, #8]
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	4413      	add	r3, r2
 80029f8:	7819      	ldrb	r1, [r3, #0]
 80029fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	4413      	add	r3, r2
 8002a00:	3334      	adds	r3, #52	@ 0x34
 8002a02:	460a      	mov	r2, r1
 8002a04:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002a06:	68ba      	ldr	r2, [r7, #8]
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	4413      	add	r3, r2
 8002a0c:	781b      	ldrb	r3, [r3, #0]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d006      	beq.n	8002a20 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	3301      	adds	r3, #1
 8002a16:	61fb      	str	r3, [r7, #28]
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	2b09      	cmp	r3, #9
 8002a1c:	d9e9      	bls.n	80029f2 <prvInitialiseNewTask+0x66>
 8002a1e:	e000      	b.n	8002a22 <prvInitialiseNewTask+0x96>
            {
                break;
 8002a20:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002a22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a24:	2200      	movs	r2, #0
 8002a26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002a2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a2c:	2b04      	cmp	r3, #4
 8002a2e:	d90b      	bls.n	8002a48 <prvInitialiseNewTask+0xbc>
        __asm volatile
 8002a30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a34:	f383 8811 	msr	BASEPRI, r3
 8002a38:	f3bf 8f6f 	isb	sy
 8002a3c:	f3bf 8f4f 	dsb	sy
 8002a40:	613b      	str	r3, [r7, #16]
    }
 8002a42:	bf00      	nop
 8002a44:	bf00      	nop
 8002a46:	e7fd      	b.n	8002a44 <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002a48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a4a:	2b04      	cmp	r3, #4
 8002a4c:	d901      	bls.n	8002a52 <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002a4e:	2304      	movs	r3, #4
 8002a50:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002a52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a54:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002a56:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8002a58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a5a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002a5c:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002a5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a60:	3304      	adds	r3, #4
 8002a62:	4618      	mov	r0, r3
 8002a64:	f7ff fbfc 	bl	8002260 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002a68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a6a:	3318      	adds	r3, #24
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7ff fbf7 	bl	8002260 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002a72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002a76:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a7a:	f1c3 0205 	rsb	r2, r3, #5
 8002a7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a80:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002a82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002a86:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002a88:	683a      	ldr	r2, [r7, #0]
 8002a8a:	68f9      	ldr	r1, [r7, #12]
 8002a8c:	69b8      	ldr	r0, [r7, #24]
 8002a8e:	f001 f8e7 	bl	8003c60 <pxPortInitialiseStack>
 8002a92:	4602      	mov	r2, r0
 8002a94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a96:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002a98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d002      	beq.n	8002aa4 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002a9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002aa0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002aa2:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002aa4:	bf00      	nop
 8002aa6:	3720      	adds	r7, #32
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}

08002aac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b084      	sub	sp, #16
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002ab4:	f001 fa0a 	bl	8003ecc <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002ab8:	4b3a      	ldr	r3, [pc, #232]	@ (8002ba4 <prvAddNewTaskToReadyList+0xf8>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	3301      	adds	r3, #1
 8002abe:	4a39      	ldr	r2, [pc, #228]	@ (8002ba4 <prvAddNewTaskToReadyList+0xf8>)
 8002ac0:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002ac2:	4b39      	ldr	r3, [pc, #228]	@ (8002ba8 <prvAddNewTaskToReadyList+0xfc>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d109      	bne.n	8002ade <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002aca:	4a37      	ldr	r2, [pc, #220]	@ (8002ba8 <prvAddNewTaskToReadyList+0xfc>)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002ad0:	4b34      	ldr	r3, [pc, #208]	@ (8002ba4 <prvAddNewTaskToReadyList+0xf8>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d110      	bne.n	8002afa <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002ad8:	f000 fcfe 	bl	80034d8 <prvInitialiseTaskLists>
 8002adc:	e00d      	b.n	8002afa <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002ade:	4b33      	ldr	r3, [pc, #204]	@ (8002bac <prvAddNewTaskToReadyList+0x100>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d109      	bne.n	8002afa <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002ae6:	4b30      	ldr	r3, [pc, #192]	@ (8002ba8 <prvAddNewTaskToReadyList+0xfc>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d802      	bhi.n	8002afa <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002af4:	4a2c      	ldr	r2, [pc, #176]	@ (8002ba8 <prvAddNewTaskToReadyList+0xfc>)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002afa:	4b2d      	ldr	r3, [pc, #180]	@ (8002bb0 <prvAddNewTaskToReadyList+0x104>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	3301      	adds	r3, #1
 8002b00:	4a2b      	ldr	r2, [pc, #172]	@ (8002bb0 <prvAddNewTaskToReadyList+0x104>)
 8002b02:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002b04:	4b2a      	ldr	r3, [pc, #168]	@ (8002bb0 <prvAddNewTaskToReadyList+0x104>)
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b10:	2201      	movs	r2, #1
 8002b12:	409a      	lsls	r2, r3
 8002b14:	4b27      	ldr	r3, [pc, #156]	@ (8002bb4 <prvAddNewTaskToReadyList+0x108>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	4a26      	ldr	r2, [pc, #152]	@ (8002bb4 <prvAddNewTaskToReadyList+0x108>)
 8002b1c:	6013      	str	r3, [r2, #0]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b22:	4925      	ldr	r1, [pc, #148]	@ (8002bb8 <prvAddNewTaskToReadyList+0x10c>)
 8002b24:	4613      	mov	r3, r2
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	4413      	add	r3, r2
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	440b      	add	r3, r1
 8002b2e:	3304      	adds	r3, #4
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	60fb      	str	r3, [r7, #12]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	68fa      	ldr	r2, [r7, #12]
 8002b38:	609a      	str	r2, [r3, #8]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	689a      	ldr	r2, [r3, #8]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	60da      	str	r2, [r3, #12]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	3204      	adds	r2, #4
 8002b4a:	605a      	str	r2, [r3, #4]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	1d1a      	adds	r2, r3, #4
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	609a      	str	r2, [r3, #8]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b58:	4613      	mov	r3, r2
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	4413      	add	r3, r2
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	4a15      	ldr	r2, [pc, #84]	@ (8002bb8 <prvAddNewTaskToReadyList+0x10c>)
 8002b62:	441a      	add	r2, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	615a      	str	r2, [r3, #20]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b6c:	4912      	ldr	r1, [pc, #72]	@ (8002bb8 <prvAddNewTaskToReadyList+0x10c>)
 8002b6e:	4613      	mov	r3, r2
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	4413      	add	r3, r2
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	440b      	add	r3, r1
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	1c59      	adds	r1, r3, #1
 8002b7c:	480e      	ldr	r0, [pc, #56]	@ (8002bb8 <prvAddNewTaskToReadyList+0x10c>)
 8002b7e:	4613      	mov	r3, r2
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	4413      	add	r3, r2
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	4403      	add	r3, r0
 8002b88:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002b8a:	f001 f9d1 	bl	8003f30 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002b8e:	4b07      	ldr	r3, [pc, #28]	@ (8002bac <prvAddNewTaskToReadyList+0x100>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d001      	beq.n	8002b9a <prvAddNewTaskToReadyList+0xee>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002b96:	4b04      	ldr	r3, [pc, #16]	@ (8002ba8 <prvAddNewTaskToReadyList+0xfc>)
 8002b98:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002b9a:	bf00      	nop
 8002b9c:	3710      	adds	r7, #16
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	200001f0 	.word	0x200001f0
 8002ba8:	20000118 	.word	0x20000118
 8002bac:	200001fc 	.word	0x200001fc
 8002bb0:	2000020c 	.word	0x2000020c
 8002bb4:	200001f8 	.word	0x200001f8
 8002bb8:	2000011c 	.word	0x2000011c

08002bbc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b086      	sub	sp, #24
 8002bc0:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8002bc2:	4b20      	ldr	r3, [pc, #128]	@ (8002c44 <vTaskStartScheduler+0x88>)
 8002bc4:	9301      	str	r3, [sp, #4]
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	9300      	str	r3, [sp, #0]
 8002bca:	2300      	movs	r3, #0
 8002bcc:	2282      	movs	r2, #130	@ 0x82
 8002bce:	491e      	ldr	r1, [pc, #120]	@ (8002c48 <vTaskStartScheduler+0x8c>)
 8002bd0:	481e      	ldr	r0, [pc, #120]	@ (8002c4c <vTaskStartScheduler+0x90>)
 8002bd2:	f7ff fe95 	bl	8002900 <xTaskCreate>
 8002bd6:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d102      	bne.n	8002be4 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8002bde:	f000 fdb3 	bl	8003748 <xTimerCreateTimerTask>
 8002be2:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d116      	bne.n	8002c18 <vTaskStartScheduler+0x5c>
        __asm volatile
 8002bea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bee:	f383 8811 	msr	BASEPRI, r3
 8002bf2:	f3bf 8f6f 	isb	sy
 8002bf6:	f3bf 8f4f 	dsb	sy
 8002bfa:	60bb      	str	r3, [r7, #8]
    }
 8002bfc:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8002bfe:	4b14      	ldr	r3, [pc, #80]	@ (8002c50 <vTaskStartScheduler+0x94>)
 8002c00:	f04f 32ff 	mov.w	r2, #4294967295
 8002c04:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002c06:	4b13      	ldr	r3, [pc, #76]	@ (8002c54 <vTaskStartScheduler+0x98>)
 8002c08:	2201      	movs	r2, #1
 8002c0a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002c0c:	4b12      	ldr	r3, [pc, #72]	@ (8002c58 <vTaskStartScheduler+0x9c>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8002c12:	f001 f8b7 	bl	8003d84 <xPortStartScheduler>
 8002c16:	e00f      	b.n	8002c38 <vTaskStartScheduler+0x7c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c1e:	d10b      	bne.n	8002c38 <vTaskStartScheduler+0x7c>
        __asm volatile
 8002c20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c24:	f383 8811 	msr	BASEPRI, r3
 8002c28:	f3bf 8f6f 	isb	sy
 8002c2c:	f3bf 8f4f 	dsb	sy
 8002c30:	607b      	str	r3, [r7, #4]
    }
 8002c32:	bf00      	nop
 8002c34:	bf00      	nop
 8002c36:	e7fd      	b.n	8002c34 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002c38:	4b08      	ldr	r3, [pc, #32]	@ (8002c5c <vTaskStartScheduler+0xa0>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
}
 8002c3c:	bf00      	nop
 8002c3e:	3710      	adds	r7, #16
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	20000214 	.word	0x20000214
 8002c48:	08004e18 	.word	0x08004e18
 8002c4c:	080034b5 	.word	0x080034b5
 8002c50:	20000210 	.word	0x20000210
 8002c54:	200001fc 	.word	0x200001fc
 8002c58:	200001f4 	.word	0x200001f4
 8002c5c:	2000000c 	.word	0x2000000c

08002c60 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002c60:	b480      	push	{r7}
 8002c62:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002c64:	4b04      	ldr	r3, [pc, #16]	@ (8002c78 <vTaskSuspendAll+0x18>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	3301      	adds	r3, #1
 8002c6a:	4a03      	ldr	r2, [pc, #12]	@ (8002c78 <vTaskSuspendAll+0x18>)
 8002c6c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002c6e:	bf00      	nop
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr
 8002c78:	20000218 	.word	0x20000218

08002c7c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b088      	sub	sp, #32
 8002c80:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002c82:	2300      	movs	r3, #0
 8002c84:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002c86:	2300      	movs	r3, #0
 8002c88:	617b      	str	r3, [r7, #20]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002c8a:	4b6b      	ldr	r3, [pc, #428]	@ (8002e38 <xTaskResumeAll+0x1bc>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d10b      	bne.n	8002caa <xTaskResumeAll+0x2e>
        __asm volatile
 8002c92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c96:	f383 8811 	msr	BASEPRI, r3
 8002c9a:	f3bf 8f6f 	isb	sy
 8002c9e:	f3bf 8f4f 	dsb	sy
 8002ca2:	607b      	str	r3, [r7, #4]
    }
 8002ca4:	bf00      	nop
 8002ca6:	bf00      	nop
 8002ca8:	e7fd      	b.n	8002ca6 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002caa:	f001 f90f 	bl	8003ecc <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002cae:	4b62      	ldr	r3, [pc, #392]	@ (8002e38 <xTaskResumeAll+0x1bc>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	3b01      	subs	r3, #1
 8002cb4:	4a60      	ldr	r2, [pc, #384]	@ (8002e38 <xTaskResumeAll+0x1bc>)
 8002cb6:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002cb8:	4b5f      	ldr	r3, [pc, #380]	@ (8002e38 <xTaskResumeAll+0x1bc>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	f040 80b4 	bne.w	8002e2a <xTaskResumeAll+0x1ae>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002cc2:	4b5e      	ldr	r3, [pc, #376]	@ (8002e3c <xTaskResumeAll+0x1c0>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	f000 80af 	beq.w	8002e2a <xTaskResumeAll+0x1ae>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002ccc:	e08a      	b.n	8002de4 <xTaskResumeAll+0x168>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002cce:	4b5c      	ldr	r3, [pc, #368]	@ (8002e40 <xTaskResumeAll+0x1c4>)
 8002cd0:	68db      	ldr	r3, [r3, #12]
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cda:	613b      	str	r3, [r7, #16]
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	69db      	ldr	r3, [r3, #28]
 8002ce0:	69fa      	ldr	r2, [r7, #28]
 8002ce2:	6a12      	ldr	r2, [r2, #32]
 8002ce4:	609a      	str	r2, [r3, #8]
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	6a1b      	ldr	r3, [r3, #32]
 8002cea:	69fa      	ldr	r2, [r7, #28]
 8002cec:	69d2      	ldr	r2, [r2, #28]
 8002cee:	605a      	str	r2, [r3, #4]
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	685a      	ldr	r2, [r3, #4]
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	3318      	adds	r3, #24
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d103      	bne.n	8002d04 <xTaskResumeAll+0x88>
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	6a1a      	ldr	r2, [r3, #32]
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	605a      	str	r2, [r3, #4]
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	2200      	movs	r2, #0
 8002d08:	629a      	str	r2, [r3, #40]	@ 0x28
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	1e5a      	subs	r2, r3, #1
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	695b      	ldr	r3, [r3, #20]
 8002d18:	60fb      	str	r3, [r7, #12]
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	69fa      	ldr	r2, [r7, #28]
 8002d20:	68d2      	ldr	r2, [r2, #12]
 8002d22:	609a      	str	r2, [r3, #8]
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	69fa      	ldr	r2, [r7, #28]
 8002d2a:	6892      	ldr	r2, [r2, #8]
 8002d2c:	605a      	str	r2, [r3, #4]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	685a      	ldr	r2, [r3, #4]
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	3304      	adds	r3, #4
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d103      	bne.n	8002d42 <xTaskResumeAll+0xc6>
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	68da      	ldr	r2, [r3, #12]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	605a      	str	r2, [r3, #4]
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	2200      	movs	r2, #0
 8002d46:	615a      	str	r2, [r3, #20]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	1e5a      	subs	r2, r3, #1
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d56:	2201      	movs	r2, #1
 8002d58:	409a      	lsls	r2, r3
 8002d5a:	4b3a      	ldr	r3, [pc, #232]	@ (8002e44 <xTaskResumeAll+0x1c8>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	4a38      	ldr	r2, [pc, #224]	@ (8002e44 <xTaskResumeAll+0x1c8>)
 8002d62:	6013      	str	r3, [r2, #0]
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d68:	4937      	ldr	r1, [pc, #220]	@ (8002e48 <xTaskResumeAll+0x1cc>)
 8002d6a:	4613      	mov	r3, r2
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	4413      	add	r3, r2
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	440b      	add	r3, r1
 8002d74:	3304      	adds	r3, #4
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	60bb      	str	r3, [r7, #8]
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	68ba      	ldr	r2, [r7, #8]
 8002d7e:	609a      	str	r2, [r3, #8]
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	689a      	ldr	r2, [r3, #8]
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	60da      	str	r2, [r3, #12]
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	69fa      	ldr	r2, [r7, #28]
 8002d8e:	3204      	adds	r2, #4
 8002d90:	605a      	str	r2, [r3, #4]
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	1d1a      	adds	r2, r3, #4
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	609a      	str	r2, [r3, #8]
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d9e:	4613      	mov	r3, r2
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	4413      	add	r3, r2
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	4a28      	ldr	r2, [pc, #160]	@ (8002e48 <xTaskResumeAll+0x1cc>)
 8002da8:	441a      	add	r2, r3
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	615a      	str	r2, [r3, #20]
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002db2:	4925      	ldr	r1, [pc, #148]	@ (8002e48 <xTaskResumeAll+0x1cc>)
 8002db4:	4613      	mov	r3, r2
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	4413      	add	r3, r2
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	440b      	add	r3, r1
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	1c59      	adds	r1, r3, #1
 8002dc2:	4821      	ldr	r0, [pc, #132]	@ (8002e48 <xTaskResumeAll+0x1cc>)
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	4413      	add	r3, r2
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	4403      	add	r3, r0
 8002dce:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002dd4:	4b1d      	ldr	r3, [pc, #116]	@ (8002e4c <xTaskResumeAll+0x1d0>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d302      	bcc.n	8002de4 <xTaskResumeAll+0x168>
                    {
                        xYieldPending = pdTRUE;
 8002dde:	4b1c      	ldr	r3, [pc, #112]	@ (8002e50 <xTaskResumeAll+0x1d4>)
 8002de0:	2201      	movs	r2, #1
 8002de2:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002de4:	4b16      	ldr	r3, [pc, #88]	@ (8002e40 <xTaskResumeAll+0x1c4>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	f47f af70 	bne.w	8002cce <xTaskResumeAll+0x52>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d001      	beq.n	8002df8 <xTaskResumeAll+0x17c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002df4:	f000 fbee 	bl	80035d4 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002df8:	4b16      	ldr	r3, [pc, #88]	@ (8002e54 <xTaskResumeAll+0x1d8>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	61bb      	str	r3, [r7, #24]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002dfe:	69bb      	ldr	r3, [r7, #24]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d010      	beq.n	8002e26 <xTaskResumeAll+0x1aa>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002e04:	f000 f838 	bl	8002e78 <xTaskIncrementTick>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d002      	beq.n	8002e14 <xTaskResumeAll+0x198>
                            {
                                xYieldPending = pdTRUE;
 8002e0e:	4b10      	ldr	r3, [pc, #64]	@ (8002e50 <xTaskResumeAll+0x1d4>)
 8002e10:	2201      	movs	r2, #1
 8002e12:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002e14:	69bb      	ldr	r3, [r7, #24]
 8002e16:	3b01      	subs	r3, #1
 8002e18:	61bb      	str	r3, [r7, #24]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002e1a:	69bb      	ldr	r3, [r7, #24]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d1f1      	bne.n	8002e04 <xTaskResumeAll+0x188>

                        xPendedTicks = 0;
 8002e20:	4b0c      	ldr	r3, [pc, #48]	@ (8002e54 <xTaskResumeAll+0x1d8>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002e26:	4b0a      	ldr	r3, [pc, #40]	@ (8002e50 <xTaskResumeAll+0x1d4>)
 8002e28:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002e2a:	f001 f881 	bl	8003f30 <vPortExitCritical>

    return xAlreadyYielded;
 8002e2e:	697b      	ldr	r3, [r7, #20]
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3720      	adds	r7, #32
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	20000218 	.word	0x20000218
 8002e3c:	200001f0 	.word	0x200001f0
 8002e40:	200001b0 	.word	0x200001b0
 8002e44:	200001f8 	.word	0x200001f8
 8002e48:	2000011c 	.word	0x2000011c
 8002e4c:	20000118 	.word	0x20000118
 8002e50:	20000204 	.word	0x20000204
 8002e54:	20000200 	.word	0x20000200

08002e58 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8002e5e:	4b05      	ldr	r3, [pc, #20]	@ (8002e74 <xTaskGetTickCount+0x1c>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8002e64:	687b      	ldr	r3, [r7, #4]
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	370c      	adds	r7, #12
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop
 8002e74:	200001f4 	.word	0x200001f4

08002e78 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b08a      	sub	sp, #40	@ 0x28
 8002e7c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002e82:	4b6e      	ldr	r3, [pc, #440]	@ (800303c <xTaskIncrementTick+0x1c4>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	f040 80ce 	bne.w	8003028 <xTaskIncrementTick+0x1b0>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002e8c:	4b6c      	ldr	r3, [pc, #432]	@ (8003040 <xTaskIncrementTick+0x1c8>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	3301      	adds	r3, #1
 8002e92:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002e94:	4a6a      	ldr	r2, [pc, #424]	@ (8003040 <xTaskIncrementTick+0x1c8>)
 8002e96:	6a3b      	ldr	r3, [r7, #32]
 8002e98:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002e9a:	6a3b      	ldr	r3, [r7, #32]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d121      	bne.n	8002ee4 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8002ea0:	4b68      	ldr	r3, [pc, #416]	@ (8003044 <xTaskIncrementTick+0x1cc>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d00b      	beq.n	8002ec2 <xTaskIncrementTick+0x4a>
        __asm volatile
 8002eaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002eae:	f383 8811 	msr	BASEPRI, r3
 8002eb2:	f3bf 8f6f 	isb	sy
 8002eb6:	f3bf 8f4f 	dsb	sy
 8002eba:	607b      	str	r3, [r7, #4]
    }
 8002ebc:	bf00      	nop
 8002ebe:	bf00      	nop
 8002ec0:	e7fd      	b.n	8002ebe <xTaskIncrementTick+0x46>
 8002ec2:	4b60      	ldr	r3, [pc, #384]	@ (8003044 <xTaskIncrementTick+0x1cc>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	61fb      	str	r3, [r7, #28]
 8002ec8:	4b5f      	ldr	r3, [pc, #380]	@ (8003048 <xTaskIncrementTick+0x1d0>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a5d      	ldr	r2, [pc, #372]	@ (8003044 <xTaskIncrementTick+0x1cc>)
 8002ece:	6013      	str	r3, [r2, #0]
 8002ed0:	4a5d      	ldr	r2, [pc, #372]	@ (8003048 <xTaskIncrementTick+0x1d0>)
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	6013      	str	r3, [r2, #0]
 8002ed6:	4b5d      	ldr	r3, [pc, #372]	@ (800304c <xTaskIncrementTick+0x1d4>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	3301      	adds	r3, #1
 8002edc:	4a5b      	ldr	r2, [pc, #364]	@ (800304c <xTaskIncrementTick+0x1d4>)
 8002ede:	6013      	str	r3, [r2, #0]
 8002ee0:	f000 fb78 	bl	80035d4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002ee4:	4b5a      	ldr	r3, [pc, #360]	@ (8003050 <xTaskIncrementTick+0x1d8>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	6a3a      	ldr	r2, [r7, #32]
 8002eea:	429a      	cmp	r2, r3
 8002eec:	f0c0 80a1 	bcc.w	8003032 <xTaskIncrementTick+0x1ba>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002ef0:	4b54      	ldr	r3, [pc, #336]	@ (8003044 <xTaskIncrementTick+0x1cc>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d104      	bne.n	8002f04 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002efa:	4b55      	ldr	r3, [pc, #340]	@ (8003050 <xTaskIncrementTick+0x1d8>)
 8002efc:	f04f 32ff 	mov.w	r2, #4294967295
 8002f00:	601a      	str	r2, [r3, #0]
                    break;
 8002f02:	e096      	b.n	8003032 <xTaskIncrementTick+0x1ba>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f04:	4b4f      	ldr	r3, [pc, #316]	@ (8003044 <xTaskIncrementTick+0x1cc>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002f0e:	69bb      	ldr	r3, [r7, #24]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8002f14:	6a3a      	ldr	r2, [r7, #32]
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d203      	bcs.n	8002f24 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002f1c:	4a4c      	ldr	r2, [pc, #304]	@ (8003050 <xTaskIncrementTick+0x1d8>)
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8002f22:	e086      	b.n	8003032 <xTaskIncrementTick+0x1ba>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002f24:	69bb      	ldr	r3, [r7, #24]
 8002f26:	695b      	ldr	r3, [r3, #20]
 8002f28:	613b      	str	r3, [r7, #16]
 8002f2a:	69bb      	ldr	r3, [r7, #24]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	69ba      	ldr	r2, [r7, #24]
 8002f30:	68d2      	ldr	r2, [r2, #12]
 8002f32:	609a      	str	r2, [r3, #8]
 8002f34:	69bb      	ldr	r3, [r7, #24]
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	69ba      	ldr	r2, [r7, #24]
 8002f3a:	6892      	ldr	r2, [r2, #8]
 8002f3c:	605a      	str	r2, [r3, #4]
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	685a      	ldr	r2, [r3, #4]
 8002f42:	69bb      	ldr	r3, [r7, #24]
 8002f44:	3304      	adds	r3, #4
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d103      	bne.n	8002f52 <xTaskIncrementTick+0xda>
 8002f4a:	69bb      	ldr	r3, [r7, #24]
 8002f4c:	68da      	ldr	r2, [r3, #12]
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	605a      	str	r2, [r3, #4]
 8002f52:	69bb      	ldr	r3, [r7, #24]
 8002f54:	2200      	movs	r2, #0
 8002f56:	615a      	str	r2, [r3, #20]
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	1e5a      	subs	r2, r3, #1
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002f62:	69bb      	ldr	r3, [r7, #24]
 8002f64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d01e      	beq.n	8002fa8 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f6e:	60fb      	str	r3, [r7, #12]
 8002f70:	69bb      	ldr	r3, [r7, #24]
 8002f72:	69db      	ldr	r3, [r3, #28]
 8002f74:	69ba      	ldr	r2, [r7, #24]
 8002f76:	6a12      	ldr	r2, [r2, #32]
 8002f78:	609a      	str	r2, [r3, #8]
 8002f7a:	69bb      	ldr	r3, [r7, #24]
 8002f7c:	6a1b      	ldr	r3, [r3, #32]
 8002f7e:	69ba      	ldr	r2, [r7, #24]
 8002f80:	69d2      	ldr	r2, [r2, #28]
 8002f82:	605a      	str	r2, [r3, #4]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	685a      	ldr	r2, [r3, #4]
 8002f88:	69bb      	ldr	r3, [r7, #24]
 8002f8a:	3318      	adds	r3, #24
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d103      	bne.n	8002f98 <xTaskIncrementTick+0x120>
 8002f90:	69bb      	ldr	r3, [r7, #24]
 8002f92:	6a1a      	ldr	r2, [r3, #32]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	605a      	str	r2, [r3, #4]
 8002f98:	69bb      	ldr	r3, [r7, #24]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	629a      	str	r2, [r3, #40]	@ 0x28
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	1e5a      	subs	r2, r3, #1
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002fa8:	69bb      	ldr	r3, [r7, #24]
 8002faa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fac:	2201      	movs	r2, #1
 8002fae:	409a      	lsls	r2, r3
 8002fb0:	4b28      	ldr	r3, [pc, #160]	@ (8003054 <xTaskIncrementTick+0x1dc>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	4a27      	ldr	r2, [pc, #156]	@ (8003054 <xTaskIncrementTick+0x1dc>)
 8002fb8:	6013      	str	r3, [r2, #0]
 8002fba:	69bb      	ldr	r3, [r7, #24]
 8002fbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fbe:	4926      	ldr	r1, [pc, #152]	@ (8003058 <xTaskIncrementTick+0x1e0>)
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	4413      	add	r3, r2
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	440b      	add	r3, r1
 8002fca:	3304      	adds	r3, #4
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	60bb      	str	r3, [r7, #8]
 8002fd0:	69bb      	ldr	r3, [r7, #24]
 8002fd2:	68ba      	ldr	r2, [r7, #8]
 8002fd4:	609a      	str	r2, [r3, #8]
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	689a      	ldr	r2, [r3, #8]
 8002fda:	69bb      	ldr	r3, [r7, #24]
 8002fdc:	60da      	str	r2, [r3, #12]
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	69ba      	ldr	r2, [r7, #24]
 8002fe4:	3204      	adds	r2, #4
 8002fe6:	605a      	str	r2, [r3, #4]
 8002fe8:	69bb      	ldr	r3, [r7, #24]
 8002fea:	1d1a      	adds	r2, r3, #4
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	609a      	str	r2, [r3, #8]
 8002ff0:	69bb      	ldr	r3, [r7, #24]
 8002ff2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ff4:	4613      	mov	r3, r2
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	4413      	add	r3, r2
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	4a16      	ldr	r2, [pc, #88]	@ (8003058 <xTaskIncrementTick+0x1e0>)
 8002ffe:	441a      	add	r2, r3
 8003000:	69bb      	ldr	r3, [r7, #24]
 8003002:	615a      	str	r2, [r3, #20]
 8003004:	69bb      	ldr	r3, [r7, #24]
 8003006:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003008:	4913      	ldr	r1, [pc, #76]	@ (8003058 <xTaskIncrementTick+0x1e0>)
 800300a:	4613      	mov	r3, r2
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	4413      	add	r3, r2
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	440b      	add	r3, r1
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	1c59      	adds	r1, r3, #1
 8003018:	480f      	ldr	r0, [pc, #60]	@ (8003058 <xTaskIncrementTick+0x1e0>)
 800301a:	4613      	mov	r3, r2
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	4413      	add	r3, r2
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	4403      	add	r3, r0
 8003024:	6019      	str	r1, [r3, #0]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003026:	e763      	b.n	8002ef0 <xTaskIncrementTick+0x78>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003028:	4b0c      	ldr	r3, [pc, #48]	@ (800305c <xTaskIncrementTick+0x1e4>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	3301      	adds	r3, #1
 800302e:	4a0b      	ldr	r2, [pc, #44]	@ (800305c <xTaskIncrementTick+0x1e4>)
 8003030:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8003032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003034:	4618      	mov	r0, r3
 8003036:	3728      	adds	r7, #40	@ 0x28
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}
 800303c:	20000218 	.word	0x20000218
 8003040:	200001f4 	.word	0x200001f4
 8003044:	200001a8 	.word	0x200001a8
 8003048:	200001ac 	.word	0x200001ac
 800304c:	20000208 	.word	0x20000208
 8003050:	20000210 	.word	0x20000210
 8003054:	200001f8 	.word	0x200001f8
 8003058:	2000011c 	.word	0x2000011c
 800305c:	20000200 	.word	0x20000200

08003060 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003060:	b480      	push	{r7}
 8003062:	b087      	sub	sp, #28
 8003064:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003066:	4b27      	ldr	r3, [pc, #156]	@ (8003104 <vTaskSwitchContext+0xa4>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d003      	beq.n	8003076 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800306e:	4b26      	ldr	r3, [pc, #152]	@ (8003108 <vTaskSwitchContext+0xa8>)
 8003070:	2201      	movs	r2, #1
 8003072:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8003074:	e040      	b.n	80030f8 <vTaskSwitchContext+0x98>
        xYieldPending = pdFALSE;
 8003076:	4b24      	ldr	r3, [pc, #144]	@ (8003108 <vTaskSwitchContext+0xa8>)
 8003078:	2200      	movs	r2, #0
 800307a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800307c:	4b23      	ldr	r3, [pc, #140]	@ (800310c <vTaskSwitchContext+0xac>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	fab3 f383 	clz	r3, r3
 8003088:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800308a:	7afb      	ldrb	r3, [r7, #11]
 800308c:	f1c3 031f 	rsb	r3, r3, #31
 8003090:	617b      	str	r3, [r7, #20]
 8003092:	491f      	ldr	r1, [pc, #124]	@ (8003110 <vTaskSwitchContext+0xb0>)
 8003094:	697a      	ldr	r2, [r7, #20]
 8003096:	4613      	mov	r3, r2
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	4413      	add	r3, r2
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	440b      	add	r3, r1
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d10b      	bne.n	80030be <vTaskSwitchContext+0x5e>
        __asm volatile
 80030a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030aa:	f383 8811 	msr	BASEPRI, r3
 80030ae:	f3bf 8f6f 	isb	sy
 80030b2:	f3bf 8f4f 	dsb	sy
 80030b6:	607b      	str	r3, [r7, #4]
    }
 80030b8:	bf00      	nop
 80030ba:	bf00      	nop
 80030bc:	e7fd      	b.n	80030ba <vTaskSwitchContext+0x5a>
 80030be:	697a      	ldr	r2, [r7, #20]
 80030c0:	4613      	mov	r3, r2
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	4413      	add	r3, r2
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	4a11      	ldr	r2, [pc, #68]	@ (8003110 <vTaskSwitchContext+0xb0>)
 80030ca:	4413      	add	r3, r2
 80030cc:	613b      	str	r3, [r7, #16]
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	685a      	ldr	r2, [r3, #4]
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	605a      	str	r2, [r3, #4]
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	685a      	ldr	r2, [r3, #4]
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	3308      	adds	r3, #8
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d104      	bne.n	80030ee <vTaskSwitchContext+0x8e>
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	685a      	ldr	r2, [r3, #4]
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	605a      	str	r2, [r3, #4]
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	4a07      	ldr	r2, [pc, #28]	@ (8003114 <vTaskSwitchContext+0xb4>)
 80030f6:	6013      	str	r3, [r2, #0]
}
 80030f8:	bf00      	nop
 80030fa:	371c      	adds	r7, #28
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr
 8003104:	20000218 	.word	0x20000218
 8003108:	20000204 	.word	0x20000204
 800310c:	200001f8 	.word	0x200001f8
 8003110:	2000011c 	.word	0x2000011c
 8003114:	20000118 	.word	0x20000118

08003118 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b084      	sub	sp, #16
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
 8003120:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d10b      	bne.n	8003140 <vTaskPlaceOnEventList+0x28>
        __asm volatile
 8003128:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800312c:	f383 8811 	msr	BASEPRI, r3
 8003130:	f3bf 8f6f 	isb	sy
 8003134:	f3bf 8f4f 	dsb	sy
 8003138:	60fb      	str	r3, [r7, #12]
    }
 800313a:	bf00      	nop
 800313c:	bf00      	nop
 800313e:	e7fd      	b.n	800313c <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003140:	4b07      	ldr	r3, [pc, #28]	@ (8003160 <vTaskPlaceOnEventList+0x48>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	3318      	adds	r3, #24
 8003146:	4619      	mov	r1, r3
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	f7ff f896 	bl	800227a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800314e:	2101      	movs	r1, #1
 8003150:	6838      	ldr	r0, [r7, #0]
 8003152:	f000 fa79 	bl	8003648 <prvAddCurrentTaskToDelayedList>
}
 8003156:	bf00      	nop
 8003158:	3710      	adds	r7, #16
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	20000118 	.word	0x20000118

08003164 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003164:	b580      	push	{r7, lr}
 8003166:	b086      	sub	sp, #24
 8003168:	af00      	add	r7, sp, #0
 800316a:	60f8      	str	r0, [r7, #12]
 800316c:	60b9      	str	r1, [r7, #8]
 800316e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d10b      	bne.n	800318e <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 8003176:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800317a:	f383 8811 	msr	BASEPRI, r3
 800317e:	f3bf 8f6f 	isb	sy
 8003182:	f3bf 8f4f 	dsb	sy
 8003186:	613b      	str	r3, [r7, #16]
    }
 8003188:	bf00      	nop
 800318a:	bf00      	nop
 800318c:	e7fd      	b.n	800318a <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	617b      	str	r3, [r7, #20]
 8003194:	4b15      	ldr	r3, [pc, #84]	@ (80031ec <vTaskPlaceOnEventListRestricted+0x88>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	697a      	ldr	r2, [r7, #20]
 800319a:	61da      	str	r2, [r3, #28]
 800319c:	4b13      	ldr	r3, [pc, #76]	@ (80031ec <vTaskPlaceOnEventListRestricted+0x88>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	697a      	ldr	r2, [r7, #20]
 80031a2:	6892      	ldr	r2, [r2, #8]
 80031a4:	621a      	str	r2, [r3, #32]
 80031a6:	4b11      	ldr	r3, [pc, #68]	@ (80031ec <vTaskPlaceOnEventListRestricted+0x88>)
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	3218      	adds	r2, #24
 80031b0:	605a      	str	r2, [r3, #4]
 80031b2:	4b0e      	ldr	r3, [pc, #56]	@ (80031ec <vTaskPlaceOnEventListRestricted+0x88>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f103 0218 	add.w	r2, r3, #24
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	609a      	str	r2, [r3, #8]
 80031be:	4b0b      	ldr	r3, [pc, #44]	@ (80031ec <vTaskPlaceOnEventListRestricted+0x88>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	68fa      	ldr	r2, [r7, #12]
 80031c4:	629a      	str	r2, [r3, #40]	@ 0x28
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	1c5a      	adds	r2, r3, #1
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d002      	beq.n	80031dc <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 80031d6:	f04f 33ff 	mov.w	r3, #4294967295
 80031da:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80031dc:	6879      	ldr	r1, [r7, #4]
 80031de:	68b8      	ldr	r0, [r7, #8]
 80031e0:	f000 fa32 	bl	8003648 <prvAddCurrentTaskToDelayedList>
    }
 80031e4:	bf00      	nop
 80031e6:	3718      	adds	r7, #24
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	20000118 	.word	0x20000118

080031f0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80031f0:	b480      	push	{r7}
 80031f2:	b08b      	sub	sp, #44	@ 0x2c
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8003200:	6a3b      	ldr	r3, [r7, #32]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d10b      	bne.n	800321e <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 8003206:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800320a:	f383 8811 	msr	BASEPRI, r3
 800320e:	f3bf 8f6f 	isb	sy
 8003212:	f3bf 8f4f 	dsb	sy
 8003216:	60fb      	str	r3, [r7, #12]
    }
 8003218:	bf00      	nop
 800321a:	bf00      	nop
 800321c:	e7fd      	b.n	800321a <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800321e:	6a3b      	ldr	r3, [r7, #32]
 8003220:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003222:	61fb      	str	r3, [r7, #28]
 8003224:	6a3b      	ldr	r3, [r7, #32]
 8003226:	69db      	ldr	r3, [r3, #28]
 8003228:	6a3a      	ldr	r2, [r7, #32]
 800322a:	6a12      	ldr	r2, [r2, #32]
 800322c:	609a      	str	r2, [r3, #8]
 800322e:	6a3b      	ldr	r3, [r7, #32]
 8003230:	6a1b      	ldr	r3, [r3, #32]
 8003232:	6a3a      	ldr	r2, [r7, #32]
 8003234:	69d2      	ldr	r2, [r2, #28]
 8003236:	605a      	str	r2, [r3, #4]
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	685a      	ldr	r2, [r3, #4]
 800323c:	6a3b      	ldr	r3, [r7, #32]
 800323e:	3318      	adds	r3, #24
 8003240:	429a      	cmp	r2, r3
 8003242:	d103      	bne.n	800324c <xTaskRemoveFromEventList+0x5c>
 8003244:	6a3b      	ldr	r3, [r7, #32]
 8003246:	6a1a      	ldr	r2, [r3, #32]
 8003248:	69fb      	ldr	r3, [r7, #28]
 800324a:	605a      	str	r2, [r3, #4]
 800324c:	6a3b      	ldr	r3, [r7, #32]
 800324e:	2200      	movs	r2, #0
 8003250:	629a      	str	r2, [r3, #40]	@ 0x28
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	1e5a      	subs	r2, r3, #1
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800325c:	4b4a      	ldr	r3, [pc, #296]	@ (8003388 <xTaskRemoveFromEventList+0x198>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d15e      	bne.n	8003322 <xTaskRemoveFromEventList+0x132>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8003264:	6a3b      	ldr	r3, [r7, #32]
 8003266:	695b      	ldr	r3, [r3, #20]
 8003268:	617b      	str	r3, [r7, #20]
 800326a:	6a3b      	ldr	r3, [r7, #32]
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	6a3a      	ldr	r2, [r7, #32]
 8003270:	68d2      	ldr	r2, [r2, #12]
 8003272:	609a      	str	r2, [r3, #8]
 8003274:	6a3b      	ldr	r3, [r7, #32]
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	6a3a      	ldr	r2, [r7, #32]
 800327a:	6892      	ldr	r2, [r2, #8]
 800327c:	605a      	str	r2, [r3, #4]
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	685a      	ldr	r2, [r3, #4]
 8003282:	6a3b      	ldr	r3, [r7, #32]
 8003284:	3304      	adds	r3, #4
 8003286:	429a      	cmp	r2, r3
 8003288:	d103      	bne.n	8003292 <xTaskRemoveFromEventList+0xa2>
 800328a:	6a3b      	ldr	r3, [r7, #32]
 800328c:	68da      	ldr	r2, [r3, #12]
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	605a      	str	r2, [r3, #4]
 8003292:	6a3b      	ldr	r3, [r7, #32]
 8003294:	2200      	movs	r2, #0
 8003296:	615a      	str	r2, [r3, #20]
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	1e5a      	subs	r2, r3, #1
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80032a2:	6a3b      	ldr	r3, [r7, #32]
 80032a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032a6:	2201      	movs	r2, #1
 80032a8:	409a      	lsls	r2, r3
 80032aa:	4b38      	ldr	r3, [pc, #224]	@ (800338c <xTaskRemoveFromEventList+0x19c>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4313      	orrs	r3, r2
 80032b0:	4a36      	ldr	r2, [pc, #216]	@ (800338c <xTaskRemoveFromEventList+0x19c>)
 80032b2:	6013      	str	r3, [r2, #0]
 80032b4:	6a3b      	ldr	r3, [r7, #32]
 80032b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032b8:	4935      	ldr	r1, [pc, #212]	@ (8003390 <xTaskRemoveFromEventList+0x1a0>)
 80032ba:	4613      	mov	r3, r2
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	4413      	add	r3, r2
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	440b      	add	r3, r1
 80032c4:	3304      	adds	r3, #4
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	613b      	str	r3, [r7, #16]
 80032ca:	6a3b      	ldr	r3, [r7, #32]
 80032cc:	693a      	ldr	r2, [r7, #16]
 80032ce:	609a      	str	r2, [r3, #8]
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	689a      	ldr	r2, [r3, #8]
 80032d4:	6a3b      	ldr	r3, [r7, #32]
 80032d6:	60da      	str	r2, [r3, #12]
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	6a3a      	ldr	r2, [r7, #32]
 80032de:	3204      	adds	r2, #4
 80032e0:	605a      	str	r2, [r3, #4]
 80032e2:	6a3b      	ldr	r3, [r7, #32]
 80032e4:	1d1a      	adds	r2, r3, #4
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	609a      	str	r2, [r3, #8]
 80032ea:	6a3b      	ldr	r3, [r7, #32]
 80032ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032ee:	4613      	mov	r3, r2
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	4413      	add	r3, r2
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	4a26      	ldr	r2, [pc, #152]	@ (8003390 <xTaskRemoveFromEventList+0x1a0>)
 80032f8:	441a      	add	r2, r3
 80032fa:	6a3b      	ldr	r3, [r7, #32]
 80032fc:	615a      	str	r2, [r3, #20]
 80032fe:	6a3b      	ldr	r3, [r7, #32]
 8003300:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003302:	4923      	ldr	r1, [pc, #140]	@ (8003390 <xTaskRemoveFromEventList+0x1a0>)
 8003304:	4613      	mov	r3, r2
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	4413      	add	r3, r2
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	440b      	add	r3, r1
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	1c59      	adds	r1, r3, #1
 8003312:	481f      	ldr	r0, [pc, #124]	@ (8003390 <xTaskRemoveFromEventList+0x1a0>)
 8003314:	4613      	mov	r3, r2
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	4413      	add	r3, r2
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	4403      	add	r3, r0
 800331e:	6019      	str	r1, [r3, #0]
 8003320:	e01b      	b.n	800335a <xTaskRemoveFromEventList+0x16a>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003322:	4b1c      	ldr	r3, [pc, #112]	@ (8003394 <xTaskRemoveFromEventList+0x1a4>)
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	61bb      	str	r3, [r7, #24]
 8003328:	6a3b      	ldr	r3, [r7, #32]
 800332a:	69ba      	ldr	r2, [r7, #24]
 800332c:	61da      	str	r2, [r3, #28]
 800332e:	69bb      	ldr	r3, [r7, #24]
 8003330:	689a      	ldr	r2, [r3, #8]
 8003332:	6a3b      	ldr	r3, [r7, #32]
 8003334:	621a      	str	r2, [r3, #32]
 8003336:	69bb      	ldr	r3, [r7, #24]
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	6a3a      	ldr	r2, [r7, #32]
 800333c:	3218      	adds	r2, #24
 800333e:	605a      	str	r2, [r3, #4]
 8003340:	6a3b      	ldr	r3, [r7, #32]
 8003342:	f103 0218 	add.w	r2, r3, #24
 8003346:	69bb      	ldr	r3, [r7, #24]
 8003348:	609a      	str	r2, [r3, #8]
 800334a:	6a3b      	ldr	r3, [r7, #32]
 800334c:	4a11      	ldr	r2, [pc, #68]	@ (8003394 <xTaskRemoveFromEventList+0x1a4>)
 800334e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003350:	4b10      	ldr	r3, [pc, #64]	@ (8003394 <xTaskRemoveFromEventList+0x1a4>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	3301      	adds	r3, #1
 8003356:	4a0f      	ldr	r2, [pc, #60]	@ (8003394 <xTaskRemoveFromEventList+0x1a4>)
 8003358:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800335a:	6a3b      	ldr	r3, [r7, #32]
 800335c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800335e:	4b0e      	ldr	r3, [pc, #56]	@ (8003398 <xTaskRemoveFromEventList+0x1a8>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003364:	429a      	cmp	r2, r3
 8003366:	d905      	bls.n	8003374 <xTaskRemoveFromEventList+0x184>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003368:	2301      	movs	r3, #1
 800336a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800336c:	4b0b      	ldr	r3, [pc, #44]	@ (800339c <xTaskRemoveFromEventList+0x1ac>)
 800336e:	2201      	movs	r2, #1
 8003370:	601a      	str	r2, [r3, #0]
 8003372:	e001      	b.n	8003378 <xTaskRemoveFromEventList+0x188>
    }
    else
    {
        xReturn = pdFALSE;
 8003374:	2300      	movs	r3, #0
 8003376:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    return xReturn;
 8003378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800337a:	4618      	mov	r0, r3
 800337c:	372c      	adds	r7, #44	@ 0x2c
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr
 8003386:	bf00      	nop
 8003388:	20000218 	.word	0x20000218
 800338c:	200001f8 	.word	0x200001f8
 8003390:	2000011c 	.word	0x2000011c
 8003394:	200001b0 	.word	0x200001b0
 8003398:	20000118 	.word	0x20000118
 800339c:	20000204 	.word	0x20000204

080033a0 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80033a8:	4b06      	ldr	r3, [pc, #24]	@ (80033c4 <vTaskInternalSetTimeOutState+0x24>)
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80033b0:	4b05      	ldr	r3, [pc, #20]	@ (80033c8 <vTaskInternalSetTimeOutState+0x28>)
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	605a      	str	r2, [r3, #4]
}
 80033b8:	bf00      	nop
 80033ba:	370c      	adds	r7, #12
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr
 80033c4:	20000208 	.word	0x20000208
 80033c8:	200001f4 	.word	0x200001f4

080033cc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b088      	sub	sp, #32
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
 80033d4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d10b      	bne.n	80033f4 <xTaskCheckForTimeOut+0x28>
        __asm volatile
 80033dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033e0:	f383 8811 	msr	BASEPRI, r3
 80033e4:	f3bf 8f6f 	isb	sy
 80033e8:	f3bf 8f4f 	dsb	sy
 80033ec:	613b      	str	r3, [r7, #16]
    }
 80033ee:	bf00      	nop
 80033f0:	bf00      	nop
 80033f2:	e7fd      	b.n	80033f0 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d10b      	bne.n	8003412 <xTaskCheckForTimeOut+0x46>
        __asm volatile
 80033fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033fe:	f383 8811 	msr	BASEPRI, r3
 8003402:	f3bf 8f6f 	isb	sy
 8003406:	f3bf 8f4f 	dsb	sy
 800340a:	60fb      	str	r3, [r7, #12]
    }
 800340c:	bf00      	nop
 800340e:	bf00      	nop
 8003410:	e7fd      	b.n	800340e <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 8003412:	f000 fd5b 	bl	8003ecc <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003416:	4b1f      	ldr	r3, [pc, #124]	@ (8003494 <xTaskCheckForTimeOut+0xc8>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	69ba      	ldr	r2, [r7, #24]
 8003422:	1ad3      	subs	r3, r2, r3
 8003424:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800342e:	d102      	bne.n	8003436 <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003430:	2300      	movs	r3, #0
 8003432:	61fb      	str	r3, [r7, #28]
 8003434:	e026      	b.n	8003484 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	4b17      	ldr	r3, [pc, #92]	@ (8003498 <xTaskCheckForTimeOut+0xcc>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	429a      	cmp	r2, r3
 8003440:	d00a      	beq.n	8003458 <xTaskCheckForTimeOut+0x8c>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	69ba      	ldr	r2, [r7, #24]
 8003448:	429a      	cmp	r2, r3
 800344a:	d305      	bcc.n	8003458 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800344c:	2301      	movs	r3, #1
 800344e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	2200      	movs	r2, #0
 8003454:	601a      	str	r2, [r3, #0]
 8003456:	e015      	b.n	8003484 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	697a      	ldr	r2, [r7, #20]
 800345e:	429a      	cmp	r2, r3
 8003460:	d20b      	bcs.n	800347a <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	1ad2      	subs	r2, r2, r3
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f7ff ff96 	bl	80033a0 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003474:	2300      	movs	r3, #0
 8003476:	61fb      	str	r3, [r7, #28]
 8003478:	e004      	b.n	8003484 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	2200      	movs	r2, #0
 800347e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003480:	2301      	movs	r3, #1
 8003482:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003484:	f000 fd54 	bl	8003f30 <vPortExitCritical>

    return xReturn;
 8003488:	69fb      	ldr	r3, [r7, #28]
}
 800348a:	4618      	mov	r0, r3
 800348c:	3720      	adds	r7, #32
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	200001f4 	.word	0x200001f4
 8003498:	20000208 	.word	0x20000208

0800349c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800349c:	b480      	push	{r7}
 800349e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80034a0:	4b03      	ldr	r3, [pc, #12]	@ (80034b0 <vTaskMissedYield+0x14>)
 80034a2:	2201      	movs	r2, #1
 80034a4:	601a      	str	r2, [r3, #0]
}
 80034a6:	bf00      	nop
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr
 80034b0:	20000204 	.word	0x20000204

080034b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80034bc:	f000 f84c 	bl	8003558 <prvCheckTasksWaitingTermination>
        {
            /* If we are not using preemption we keep forcing a task switch to
             * see if any other task has become available.  If we are using
             * preemption we don't need to do this as any task becoming available
             * will automatically get the processor anyway. */
            taskYIELD();
 80034c0:	4b04      	ldr	r3, [pc, #16]	@ (80034d4 <prvIdleTask+0x20>)
 80034c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80034c6:	601a      	str	r2, [r3, #0]
 80034c8:	f3bf 8f4f 	dsb	sy
 80034cc:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80034d0:	bf00      	nop
 80034d2:	e7f3      	b.n	80034bc <prvIdleTask+0x8>
 80034d4:	e000ed04 	.word	0xe000ed04

080034d8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b082      	sub	sp, #8
 80034dc:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80034de:	2300      	movs	r3, #0
 80034e0:	607b      	str	r3, [r7, #4]
 80034e2:	e00c      	b.n	80034fe <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80034e4:	687a      	ldr	r2, [r7, #4]
 80034e6:	4613      	mov	r3, r2
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	4413      	add	r3, r2
 80034ec:	009b      	lsls	r3, r3, #2
 80034ee:	4a12      	ldr	r2, [pc, #72]	@ (8003538 <prvInitialiseTaskLists+0x60>)
 80034f0:	4413      	add	r3, r2
 80034f2:	4618      	mov	r0, r3
 80034f4:	f7fe fe94 	bl	8002220 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	3301      	adds	r3, #1
 80034fc:	607b      	str	r3, [r7, #4]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2b04      	cmp	r3, #4
 8003502:	d9ef      	bls.n	80034e4 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003504:	480d      	ldr	r0, [pc, #52]	@ (800353c <prvInitialiseTaskLists+0x64>)
 8003506:	f7fe fe8b 	bl	8002220 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800350a:	480d      	ldr	r0, [pc, #52]	@ (8003540 <prvInitialiseTaskLists+0x68>)
 800350c:	f7fe fe88 	bl	8002220 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003510:	480c      	ldr	r0, [pc, #48]	@ (8003544 <prvInitialiseTaskLists+0x6c>)
 8003512:	f7fe fe85 	bl	8002220 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8003516:	480c      	ldr	r0, [pc, #48]	@ (8003548 <prvInitialiseTaskLists+0x70>)
 8003518:	f7fe fe82 	bl	8002220 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 800351c:	480b      	ldr	r0, [pc, #44]	@ (800354c <prvInitialiseTaskLists+0x74>)
 800351e:	f7fe fe7f 	bl	8002220 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003522:	4b0b      	ldr	r3, [pc, #44]	@ (8003550 <prvInitialiseTaskLists+0x78>)
 8003524:	4a05      	ldr	r2, [pc, #20]	@ (800353c <prvInitialiseTaskLists+0x64>)
 8003526:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003528:	4b0a      	ldr	r3, [pc, #40]	@ (8003554 <prvInitialiseTaskLists+0x7c>)
 800352a:	4a05      	ldr	r2, [pc, #20]	@ (8003540 <prvInitialiseTaskLists+0x68>)
 800352c:	601a      	str	r2, [r3, #0]
}
 800352e:	bf00      	nop
 8003530:	3708      	adds	r7, #8
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	2000011c 	.word	0x2000011c
 800353c:	20000180 	.word	0x20000180
 8003540:	20000194 	.word	0x20000194
 8003544:	200001b0 	.word	0x200001b0
 8003548:	200001c4 	.word	0x200001c4
 800354c:	200001dc 	.word	0x200001dc
 8003550:	200001a8 	.word	0x200001a8
 8003554:	200001ac 	.word	0x200001ac

08003558 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b082      	sub	sp, #8
 800355c:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800355e:	e019      	b.n	8003594 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8003560:	f000 fcb4 	bl	8003ecc <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003564:	4b10      	ldr	r3, [pc, #64]	@ (80035a8 <prvCheckTasksWaitingTermination+0x50>)
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	68db      	ldr	r3, [r3, #12]
 800356a:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	3304      	adds	r3, #4
 8003570:	4618      	mov	r0, r3
 8003572:	f7fe febb 	bl	80022ec <uxListRemove>
                --uxCurrentNumberOfTasks;
 8003576:	4b0d      	ldr	r3, [pc, #52]	@ (80035ac <prvCheckTasksWaitingTermination+0x54>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	3b01      	subs	r3, #1
 800357c:	4a0b      	ldr	r2, [pc, #44]	@ (80035ac <prvCheckTasksWaitingTermination+0x54>)
 800357e:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8003580:	4b0b      	ldr	r3, [pc, #44]	@ (80035b0 <prvCheckTasksWaitingTermination+0x58>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	3b01      	subs	r3, #1
 8003586:	4a0a      	ldr	r2, [pc, #40]	@ (80035b0 <prvCheckTasksWaitingTermination+0x58>)
 8003588:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 800358a:	f000 fcd1 	bl	8003f30 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f000 f810 	bl	80035b4 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003594:	4b06      	ldr	r3, [pc, #24]	@ (80035b0 <prvCheckTasksWaitingTermination+0x58>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d1e1      	bne.n	8003560 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 800359c:	bf00      	nop
 800359e:	bf00      	nop
 80035a0:	3708      	adds	r7, #8
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	200001c4 	.word	0x200001c4
 80035ac:	200001f0 	.word	0x200001f0
 80035b0:	200001d8 	.word	0x200001d8

080035b4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b082      	sub	sp, #8
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035c0:	4618      	mov	r0, r3
 80035c2:	f000 fe27 	bl	8004214 <vPortFree>
            vPortFree( pxTCB );
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f000 fe24 	bl	8004214 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80035cc:	bf00      	nop
 80035ce:	3708      	adds	r7, #8
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}

080035d4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80035d4:	b480      	push	{r7}
 80035d6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80035d8:	4b0a      	ldr	r3, [pc, #40]	@ (8003604 <prvResetNextTaskUnblockTime+0x30>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d104      	bne.n	80035ec <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80035e2:	4b09      	ldr	r3, [pc, #36]	@ (8003608 <prvResetNextTaskUnblockTime+0x34>)
 80035e4:	f04f 32ff 	mov.w	r2, #4294967295
 80035e8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80035ea:	e005      	b.n	80035f8 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80035ec:	4b05      	ldr	r3, [pc, #20]	@ (8003604 <prvResetNextTaskUnblockTime+0x30>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	68db      	ldr	r3, [r3, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a04      	ldr	r2, [pc, #16]	@ (8003608 <prvResetNextTaskUnblockTime+0x34>)
 80035f6:	6013      	str	r3, [r2, #0]
}
 80035f8:	bf00      	nop
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr
 8003602:	bf00      	nop
 8003604:	200001a8 	.word	0x200001a8
 8003608:	20000210 	.word	0x20000210

0800360c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800360c:	b480      	push	{r7}
 800360e:	b083      	sub	sp, #12
 8003610:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003612:	4b0b      	ldr	r3, [pc, #44]	@ (8003640 <xTaskGetSchedulerState+0x34>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d102      	bne.n	8003620 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800361a:	2301      	movs	r3, #1
 800361c:	607b      	str	r3, [r7, #4]
 800361e:	e008      	b.n	8003632 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003620:	4b08      	ldr	r3, [pc, #32]	@ (8003644 <xTaskGetSchedulerState+0x38>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d102      	bne.n	800362e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003628:	2302      	movs	r3, #2
 800362a:	607b      	str	r3, [r7, #4]
 800362c:	e001      	b.n	8003632 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800362e:	2300      	movs	r3, #0
 8003630:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003632:	687b      	ldr	r3, [r7, #4]
    }
 8003634:	4618      	mov	r0, r3
 8003636:	370c      	adds	r7, #12
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr
 8003640:	200001fc 	.word	0x200001fc
 8003644:	20000218 	.word	0x20000218

08003648 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b086      	sub	sp, #24
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003652:	4b36      	ldr	r3, [pc, #216]	@ (800372c <prvAddCurrentTaskToDelayedList+0xe4>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003658:	4b35      	ldr	r3, [pc, #212]	@ (8003730 <prvAddCurrentTaskToDelayedList+0xe8>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	3304      	adds	r3, #4
 800365e:	4618      	mov	r0, r3
 8003660:	f7fe fe44 	bl	80022ec <uxListRemove>
 8003664:	4603      	mov	r3, r0
 8003666:	2b00      	cmp	r3, #0
 8003668:	d10b      	bne.n	8003682 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800366a:	4b31      	ldr	r3, [pc, #196]	@ (8003730 <prvAddCurrentTaskToDelayedList+0xe8>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003670:	2201      	movs	r2, #1
 8003672:	fa02 f303 	lsl.w	r3, r2, r3
 8003676:	43da      	mvns	r2, r3
 8003678:	4b2e      	ldr	r3, [pc, #184]	@ (8003734 <prvAddCurrentTaskToDelayedList+0xec>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4013      	ands	r3, r2
 800367e:	4a2d      	ldr	r2, [pc, #180]	@ (8003734 <prvAddCurrentTaskToDelayedList+0xec>)
 8003680:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003688:	d124      	bne.n	80036d4 <prvAddCurrentTaskToDelayedList+0x8c>
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d021      	beq.n	80036d4 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003690:	4b29      	ldr	r3, [pc, #164]	@ (8003738 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	613b      	str	r3, [r7, #16]
 8003696:	4b26      	ldr	r3, [pc, #152]	@ (8003730 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	693a      	ldr	r2, [r7, #16]
 800369c:	609a      	str	r2, [r3, #8]
 800369e:	4b24      	ldr	r3, [pc, #144]	@ (8003730 <prvAddCurrentTaskToDelayedList+0xe8>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	693a      	ldr	r2, [r7, #16]
 80036a4:	6892      	ldr	r2, [r2, #8]
 80036a6:	60da      	str	r2, [r3, #12]
 80036a8:	4b21      	ldr	r3, [pc, #132]	@ (8003730 <prvAddCurrentTaskToDelayedList+0xe8>)
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	3204      	adds	r2, #4
 80036b2:	605a      	str	r2, [r3, #4]
 80036b4:	4b1e      	ldr	r3, [pc, #120]	@ (8003730 <prvAddCurrentTaskToDelayedList+0xe8>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	1d1a      	adds	r2, r3, #4
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	609a      	str	r2, [r3, #8]
 80036be:	4b1c      	ldr	r3, [pc, #112]	@ (8003730 <prvAddCurrentTaskToDelayedList+0xe8>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a1d      	ldr	r2, [pc, #116]	@ (8003738 <prvAddCurrentTaskToDelayedList+0xf0>)
 80036c4:	615a      	str	r2, [r3, #20]
 80036c6:	4b1c      	ldr	r3, [pc, #112]	@ (8003738 <prvAddCurrentTaskToDelayedList+0xf0>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	3301      	adds	r3, #1
 80036cc:	4a1a      	ldr	r2, [pc, #104]	@ (8003738 <prvAddCurrentTaskToDelayedList+0xf0>)
 80036ce:	6013      	str	r3, [r2, #0]
 80036d0:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 80036d2:	e026      	b.n	8003722 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 80036d4:	697a      	ldr	r2, [r7, #20]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4413      	add	r3, r2
 80036da:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80036dc:	4b14      	ldr	r3, [pc, #80]	@ (8003730 <prvAddCurrentTaskToDelayedList+0xe8>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	68fa      	ldr	r2, [r7, #12]
 80036e2:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 80036e4:	68fa      	ldr	r2, [r7, #12]
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d209      	bcs.n	8003700 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80036ec:	4b13      	ldr	r3, [pc, #76]	@ (800373c <prvAddCurrentTaskToDelayedList+0xf4>)
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	4b0f      	ldr	r3, [pc, #60]	@ (8003730 <prvAddCurrentTaskToDelayedList+0xe8>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	3304      	adds	r3, #4
 80036f6:	4619      	mov	r1, r3
 80036f8:	4610      	mov	r0, r2
 80036fa:	f7fe fdbe 	bl	800227a <vListInsert>
}
 80036fe:	e010      	b.n	8003722 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003700:	4b0f      	ldr	r3, [pc, #60]	@ (8003740 <prvAddCurrentTaskToDelayedList+0xf8>)
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	4b0a      	ldr	r3, [pc, #40]	@ (8003730 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	3304      	adds	r3, #4
 800370a:	4619      	mov	r1, r3
 800370c:	4610      	mov	r0, r2
 800370e:	f7fe fdb4 	bl	800227a <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8003712:	4b0c      	ldr	r3, [pc, #48]	@ (8003744 <prvAddCurrentTaskToDelayedList+0xfc>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	68fa      	ldr	r2, [r7, #12]
 8003718:	429a      	cmp	r2, r3
 800371a:	d202      	bcs.n	8003722 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 800371c:	4a09      	ldr	r2, [pc, #36]	@ (8003744 <prvAddCurrentTaskToDelayedList+0xfc>)
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	6013      	str	r3, [r2, #0]
}
 8003722:	bf00      	nop
 8003724:	3718      	adds	r7, #24
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	200001f4 	.word	0x200001f4
 8003730:	20000118 	.word	0x20000118
 8003734:	200001f8 	.word	0x200001f8
 8003738:	200001dc 	.word	0x200001dc
 800373c:	200001ac 	.word	0x200001ac
 8003740:	200001a8 	.word	0x200001a8
 8003744:	20000210 	.word	0x20000210

08003748 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003748:	b580      	push	{r7, lr}
 800374a:	b084      	sub	sp, #16
 800374c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800374e:	2300      	movs	r3, #0
 8003750:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003752:	f000 fa4f 	bl	8003bf4 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003756:	4b12      	ldr	r3, [pc, #72]	@ (80037a0 <xTimerCreateTimerTask+0x58>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d00b      	beq.n	8003776 <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 800375e:	4b11      	ldr	r3, [pc, #68]	@ (80037a4 <xTimerCreateTimerTask+0x5c>)
 8003760:	9301      	str	r3, [sp, #4]
 8003762:	2302      	movs	r3, #2
 8003764:	9300      	str	r3, [sp, #0]
 8003766:	2300      	movs	r3, #0
 8003768:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800376c:	490e      	ldr	r1, [pc, #56]	@ (80037a8 <xTimerCreateTimerTask+0x60>)
 800376e:	480f      	ldr	r0, [pc, #60]	@ (80037ac <xTimerCreateTimerTask+0x64>)
 8003770:	f7ff f8c6 	bl	8002900 <xTaskCreate>
 8003774:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d10b      	bne.n	8003794 <xTimerCreateTimerTask+0x4c>
        __asm volatile
 800377c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003780:	f383 8811 	msr	BASEPRI, r3
 8003784:	f3bf 8f6f 	isb	sy
 8003788:	f3bf 8f4f 	dsb	sy
 800378c:	603b      	str	r3, [r7, #0]
    }
 800378e:	bf00      	nop
 8003790:	bf00      	nop
 8003792:	e7fd      	b.n	8003790 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003794:	687b      	ldr	r3, [r7, #4]
    }
 8003796:	4618      	mov	r0, r3
 8003798:	3708      	adds	r7, #8
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	2000024c 	.word	0x2000024c
 80037a4:	20000250 	.word	0x20000250
 80037a8:	08004e20 	.word	0x08004e20
 80037ac:	08003855 	.word	0x08003855

080037b0 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b084      	sub	sp, #16
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	60f8      	str	r0, [r7, #12]
 80037b8:	60b9      	str	r1, [r7, #8]
 80037ba:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80037bc:	e008      	b.n	80037d0 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	699b      	ldr	r3, [r3, #24]
 80037c2:	68ba      	ldr	r2, [r7, #8]
 80037c4:	4413      	add	r3, r2
 80037c6:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	6a1b      	ldr	r3, [r3, #32]
 80037cc:	68f8      	ldr	r0, [r7, #12]
 80037ce:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	699a      	ldr	r2, [r3, #24]
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	18d1      	adds	r1, r2, r3
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	68f8      	ldr	r0, [r7, #12]
 80037de:	f000 f8df 	bl	80039a0 <prvInsertTimerInActiveList>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d1ea      	bne.n	80037be <prvReloadTimer+0xe>
        }
    }
 80037e8:	bf00      	nop
 80037ea:	bf00      	nop
 80037ec:	3710      	adds	r7, #16
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
	...

080037f4 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b084      	sub	sp, #16
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037fe:	4b14      	ldr	r3, [pc, #80]	@ (8003850 <prvProcessExpiredTimer+0x5c>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	3304      	adds	r3, #4
 800380c:	4618      	mov	r0, r3
 800380e:	f7fe fd6d 	bl	80022ec <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003818:	f003 0304 	and.w	r3, r3, #4
 800381c:	2b00      	cmp	r3, #0
 800381e:	d005      	beq.n	800382c <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8003820:	683a      	ldr	r2, [r7, #0]
 8003822:	6879      	ldr	r1, [r7, #4]
 8003824:	68f8      	ldr	r0, [r7, #12]
 8003826:	f7ff ffc3 	bl	80037b0 <prvReloadTimer>
 800382a:	e008      	b.n	800383e <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003832:	f023 0301 	bic.w	r3, r3, #1
 8003836:	b2da      	uxtb	r2, r3
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6a1b      	ldr	r3, [r3, #32]
 8003842:	68f8      	ldr	r0, [r7, #12]
 8003844:	4798      	blx	r3
    }
 8003846:	bf00      	nop
 8003848:	3710      	adds	r7, #16
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	20000244 	.word	0x20000244

08003854 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800385c:	f107 0308 	add.w	r3, r7, #8
 8003860:	4618      	mov	r0, r3
 8003862:	f000 f859 	bl	8003918 <prvGetNextExpireTime>
 8003866:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	4619      	mov	r1, r3
 800386c:	68f8      	ldr	r0, [r7, #12]
 800386e:	f000 f805 	bl	800387c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003872:	f000 f8d7 	bl	8003a24 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003876:	bf00      	nop
 8003878:	e7f0      	b.n	800385c <prvTimerTask+0x8>
	...

0800387c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800387c:	b580      	push	{r7, lr}
 800387e:	b084      	sub	sp, #16
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003886:	f7ff f9eb 	bl	8002c60 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800388a:	f107 0308 	add.w	r3, r7, #8
 800388e:	4618      	mov	r0, r3
 8003890:	f000 f866 	bl	8003960 <prvSampleTimeNow>
 8003894:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d130      	bne.n	80038fe <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d10a      	bne.n	80038b8 <prvProcessTimerOrBlockTask+0x3c>
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d806      	bhi.n	80038b8 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80038aa:	f7ff f9e7 	bl	8002c7c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80038ae:	68f9      	ldr	r1, [r7, #12]
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f7ff ff9f 	bl	80037f4 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80038b6:	e024      	b.n	8003902 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d008      	beq.n	80038d0 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80038be:	4b13      	ldr	r3, [pc, #76]	@ (800390c <prvProcessTimerOrBlockTask+0x90>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d101      	bne.n	80038cc <prvProcessTimerOrBlockTask+0x50>
 80038c8:	2301      	movs	r3, #1
 80038ca:	e000      	b.n	80038ce <prvProcessTimerOrBlockTask+0x52>
 80038cc:	2300      	movs	r3, #0
 80038ce:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80038d0:	4b0f      	ldr	r3, [pc, #60]	@ (8003910 <prvProcessTimerOrBlockTask+0x94>)
 80038d2:	6818      	ldr	r0, [r3, #0]
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	683a      	ldr	r2, [r7, #0]
 80038dc:	4619      	mov	r1, r3
 80038de:	f7fe ffdb 	bl	8002898 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80038e2:	f7ff f9cb 	bl	8002c7c <xTaskResumeAll>
 80038e6:	4603      	mov	r3, r0
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d10a      	bne.n	8003902 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80038ec:	4b09      	ldr	r3, [pc, #36]	@ (8003914 <prvProcessTimerOrBlockTask+0x98>)
 80038ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80038f2:	601a      	str	r2, [r3, #0]
 80038f4:	f3bf 8f4f 	dsb	sy
 80038f8:	f3bf 8f6f 	isb	sy
    }
 80038fc:	e001      	b.n	8003902 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80038fe:	f7ff f9bd 	bl	8002c7c <xTaskResumeAll>
    }
 8003902:	bf00      	nop
 8003904:	3710      	adds	r7, #16
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
 800390a:	bf00      	nop
 800390c:	20000248 	.word	0x20000248
 8003910:	2000024c 	.word	0x2000024c
 8003914:	e000ed04 	.word	0xe000ed04

08003918 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003918:	b480      	push	{r7}
 800391a:	b085      	sub	sp, #20
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003920:	4b0e      	ldr	r3, [pc, #56]	@ (800395c <prvGetNextExpireTime+0x44>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d101      	bne.n	800392e <prvGetNextExpireTime+0x16>
 800392a:	2201      	movs	r2, #1
 800392c:	e000      	b.n	8003930 <prvGetNextExpireTime+0x18>
 800392e:	2200      	movs	r2, #0
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d105      	bne.n	8003948 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800393c:	4b07      	ldr	r3, [pc, #28]	@ (800395c <prvGetNextExpireTime+0x44>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	68db      	ldr	r3, [r3, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	60fb      	str	r3, [r7, #12]
 8003946:	e001      	b.n	800394c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003948:	2300      	movs	r3, #0
 800394a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800394c:	68fb      	ldr	r3, [r7, #12]
    }
 800394e:	4618      	mov	r0, r3
 8003950:	3714      	adds	r7, #20
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr
 800395a:	bf00      	nop
 800395c:	20000244 	.word	0x20000244

08003960 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003960:	b580      	push	{r7, lr}
 8003962:	b084      	sub	sp, #16
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003968:	f7ff fa76 	bl	8002e58 <xTaskGetTickCount>
 800396c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800396e:	4b0b      	ldr	r3, [pc, #44]	@ (800399c <prvSampleTimeNow+0x3c>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	68fa      	ldr	r2, [r7, #12]
 8003974:	429a      	cmp	r2, r3
 8003976:	d205      	bcs.n	8003984 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003978:	f000 f916 	bl	8003ba8 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2201      	movs	r2, #1
 8003980:	601a      	str	r2, [r3, #0]
 8003982:	e002      	b.n	800398a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2200      	movs	r2, #0
 8003988:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800398a:	4a04      	ldr	r2, [pc, #16]	@ (800399c <prvSampleTimeNow+0x3c>)
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003990:	68fb      	ldr	r3, [r7, #12]
    }
 8003992:	4618      	mov	r0, r3
 8003994:	3710      	adds	r7, #16
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
 800399a:	bf00      	nop
 800399c:	20000254 	.word	0x20000254

080039a0 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b086      	sub	sp, #24
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	60f8      	str	r0, [r7, #12]
 80039a8:	60b9      	str	r1, [r7, #8]
 80039aa:	607a      	str	r2, [r7, #4]
 80039ac:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80039ae:	2300      	movs	r3, #0
 80039b0:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	68ba      	ldr	r2, [r7, #8]
 80039b6:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	68fa      	ldr	r2, [r7, #12]
 80039bc:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80039be:	68ba      	ldr	r2, [r7, #8]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d812      	bhi.n	80039ec <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	1ad2      	subs	r2, r2, r3
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	699b      	ldr	r3, [r3, #24]
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d302      	bcc.n	80039da <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80039d4:	2301      	movs	r3, #1
 80039d6:	617b      	str	r3, [r7, #20]
 80039d8:	e01b      	b.n	8003a12 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80039da:	4b10      	ldr	r3, [pc, #64]	@ (8003a1c <prvInsertTimerInActiveList+0x7c>)
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	3304      	adds	r3, #4
 80039e2:	4619      	mov	r1, r3
 80039e4:	4610      	mov	r0, r2
 80039e6:	f7fe fc48 	bl	800227a <vListInsert>
 80039ea:	e012      	b.n	8003a12 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80039ec:	687a      	ldr	r2, [r7, #4]
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d206      	bcs.n	8003a02 <prvInsertTimerInActiveList+0x62>
 80039f4:	68ba      	ldr	r2, [r7, #8]
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d302      	bcc.n	8003a02 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80039fc:	2301      	movs	r3, #1
 80039fe:	617b      	str	r3, [r7, #20]
 8003a00:	e007      	b.n	8003a12 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003a02:	4b07      	ldr	r3, [pc, #28]	@ (8003a20 <prvInsertTimerInActiveList+0x80>)
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	3304      	adds	r3, #4
 8003a0a:	4619      	mov	r1, r3
 8003a0c:	4610      	mov	r0, r2
 8003a0e:	f7fe fc34 	bl	800227a <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003a12:	697b      	ldr	r3, [r7, #20]
    }
 8003a14:	4618      	mov	r0, r3
 8003a16:	3718      	adds	r7, #24
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	20000248 	.word	0x20000248
 8003a20:	20000244 	.word	0x20000244

08003a24 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b088      	sub	sp, #32
 8003a28:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003a2a:	e0a9      	b.n	8003b80 <prvProcessReceivedCommands+0x15c>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	f2c0 80a6 	blt.w	8003b80 <prvProcessReceivedCommands+0x15c>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	695b      	ldr	r3, [r3, #20]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d004      	beq.n	8003a4a <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003a40:	69fb      	ldr	r3, [r7, #28]
 8003a42:	3304      	adds	r3, #4
 8003a44:	4618      	mov	r0, r3
 8003a46:	f7fe fc51 	bl	80022ec <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003a4a:	1d3b      	adds	r3, r7, #4
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f7ff ff87 	bl	8003960 <prvSampleTimeNow>
 8003a52:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	3b01      	subs	r3, #1
 8003a58:	2b08      	cmp	r3, #8
 8003a5a:	f200 808e 	bhi.w	8003b7a <prvProcessReceivedCommands+0x156>
 8003a5e:	a201      	add	r2, pc, #4	@ (adr r2, 8003a64 <prvProcessReceivedCommands+0x40>)
 8003a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a64:	08003a89 	.word	0x08003a89
 8003a68:	08003a89 	.word	0x08003a89
 8003a6c:	08003af1 	.word	0x08003af1
 8003a70:	08003b05 	.word	0x08003b05
 8003a74:	08003b51 	.word	0x08003b51
 8003a78:	08003a89 	.word	0x08003a89
 8003a7c:	08003a89 	.word	0x08003a89
 8003a80:	08003af1 	.word	0x08003af1
 8003a84:	08003b05 	.word	0x08003b05
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003a88:	69fb      	ldr	r3, [r7, #28]
 8003a8a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003a8e:	f043 0301 	orr.w	r3, r3, #1
 8003a92:	b2da      	uxtb	r2, r3
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003a9a:	68fa      	ldr	r2, [r7, #12]
 8003a9c:	69fb      	ldr	r3, [r7, #28]
 8003a9e:	699b      	ldr	r3, [r3, #24]
 8003aa0:	18d1      	adds	r1, r2, r3
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	69ba      	ldr	r2, [r7, #24]
 8003aa6:	69f8      	ldr	r0, [r7, #28]
 8003aa8:	f7ff ff7a 	bl	80039a0 <prvInsertTimerInActiveList>
 8003aac:	4603      	mov	r3, r0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d065      	beq.n	8003b7e <prvProcessReceivedCommands+0x15a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003ab8:	f003 0304 	and.w	r3, r3, #4
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d009      	beq.n	8003ad4 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8003ac0:	68fa      	ldr	r2, [r7, #12]
 8003ac2:	69fb      	ldr	r3, [r7, #28]
 8003ac4:	699b      	ldr	r3, [r3, #24]
 8003ac6:	4413      	add	r3, r2
 8003ac8:	69ba      	ldr	r2, [r7, #24]
 8003aca:	4619      	mov	r1, r3
 8003acc:	69f8      	ldr	r0, [r7, #28]
 8003ace:	f7ff fe6f 	bl	80037b0 <prvReloadTimer>
 8003ad2:	e008      	b.n	8003ae6 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003ad4:	69fb      	ldr	r3, [r7, #28]
 8003ad6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003ada:	f023 0301 	bic.w	r3, r3, #1
 8003ade:	b2da      	uxtb	r2, r3
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	6a1b      	ldr	r3, [r3, #32]
 8003aea:	69f8      	ldr	r0, [r7, #28]
 8003aec:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8003aee:	e046      	b.n	8003b7e <prvProcessReceivedCommands+0x15a>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003af6:	f023 0301 	bic.w	r3, r3, #1
 8003afa:	b2da      	uxtb	r2, r3
 8003afc:	69fb      	ldr	r3, [r7, #28]
 8003afe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8003b02:	e03d      	b.n	8003b80 <prvProcessReceivedCommands+0x15c>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003b04:	69fb      	ldr	r3, [r7, #28]
 8003b06:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003b0a:	f043 0301 	orr.w	r3, r3, #1
 8003b0e:	b2da      	uxtb	r2, r3
 8003b10:	69fb      	ldr	r3, [r7, #28]
 8003b12:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003b16:	68fa      	ldr	r2, [r7, #12]
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003b1c:	69fb      	ldr	r3, [r7, #28]
 8003b1e:	699b      	ldr	r3, [r3, #24]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d10b      	bne.n	8003b3c <prvProcessReceivedCommands+0x118>
        __asm volatile
 8003b24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b28:	f383 8811 	msr	BASEPRI, r3
 8003b2c:	f3bf 8f6f 	isb	sy
 8003b30:	f3bf 8f4f 	dsb	sy
 8003b34:	617b      	str	r3, [r7, #20]
    }
 8003b36:	bf00      	nop
 8003b38:	bf00      	nop
 8003b3a:	e7fd      	b.n	8003b38 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	699a      	ldr	r2, [r3, #24]
 8003b40:	69bb      	ldr	r3, [r7, #24]
 8003b42:	18d1      	adds	r1, r2, r3
 8003b44:	69bb      	ldr	r3, [r7, #24]
 8003b46:	69ba      	ldr	r2, [r7, #24]
 8003b48:	69f8      	ldr	r0, [r7, #28]
 8003b4a:	f7ff ff29 	bl	80039a0 <prvInsertTimerInActiveList>
                        break;
 8003b4e:	e017      	b.n	8003b80 <prvProcessReceivedCommands+0x15c>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003b56:	f003 0302 	and.w	r3, r3, #2
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d103      	bne.n	8003b66 <prvProcessReceivedCommands+0x142>
                            {
                                vPortFree( pxTimer );
 8003b5e:	69f8      	ldr	r0, [r7, #28]
 8003b60:	f000 fb58 	bl	8004214 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003b64:	e00c      	b.n	8003b80 <prvProcessReceivedCommands+0x15c>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003b66:	69fb      	ldr	r3, [r7, #28]
 8003b68:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003b6c:	f023 0301 	bic.w	r3, r3, #1
 8003b70:	b2da      	uxtb	r2, r3
 8003b72:	69fb      	ldr	r3, [r7, #28]
 8003b74:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8003b78:	e002      	b.n	8003b80 <prvProcessReceivedCommands+0x15c>

                    default:
                        /* Don't expect to get here. */
                        break;
 8003b7a:	bf00      	nop
 8003b7c:	e000      	b.n	8003b80 <prvProcessReceivedCommands+0x15c>
                        break;
 8003b7e:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003b80:	4b08      	ldr	r3, [pc, #32]	@ (8003ba4 <prvProcessReceivedCommands+0x180>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f107 0108 	add.w	r1, r7, #8
 8003b88:	2200      	movs	r2, #0
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f7fe fcce 	bl	800252c <xQueueReceive>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	f47f af4a 	bne.w	8003a2c <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8003b98:	bf00      	nop
 8003b9a:	bf00      	nop
 8003b9c:	3720      	adds	r7, #32
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	2000024c 	.word	0x2000024c

08003ba8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b082      	sub	sp, #8
 8003bac:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003bae:	e009      	b.n	8003bc4 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003bb0:	4b0e      	ldr	r3, [pc, #56]	@ (8003bec <prvSwitchTimerLists+0x44>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	68db      	ldr	r3, [r3, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8003bba:	f04f 31ff 	mov.w	r1, #4294967295
 8003bbe:	6838      	ldr	r0, [r7, #0]
 8003bc0:	f7ff fe18 	bl	80037f4 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003bc4:	4b09      	ldr	r3, [pc, #36]	@ (8003bec <prvSwitchTimerLists+0x44>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d1f0      	bne.n	8003bb0 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8003bce:	4b07      	ldr	r3, [pc, #28]	@ (8003bec <prvSwitchTimerLists+0x44>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8003bd4:	4b06      	ldr	r3, [pc, #24]	@ (8003bf0 <prvSwitchTimerLists+0x48>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a04      	ldr	r2, [pc, #16]	@ (8003bec <prvSwitchTimerLists+0x44>)
 8003bda:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003bdc:	4a04      	ldr	r2, [pc, #16]	@ (8003bf0 <prvSwitchTimerLists+0x48>)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6013      	str	r3, [r2, #0]
    }
 8003be2:	bf00      	nop
 8003be4:	3708      	adds	r7, #8
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	20000244 	.word	0x20000244
 8003bf0:	20000248 	.word	0x20000248

08003bf4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003bf8:	f000 f968 	bl	8003ecc <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003bfc:	4b12      	ldr	r3, [pc, #72]	@ (8003c48 <prvCheckForValidListAndQueue+0x54>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d11d      	bne.n	8003c40 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8003c04:	4811      	ldr	r0, [pc, #68]	@ (8003c4c <prvCheckForValidListAndQueue+0x58>)
 8003c06:	f7fe fb0b 	bl	8002220 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003c0a:	4811      	ldr	r0, [pc, #68]	@ (8003c50 <prvCheckForValidListAndQueue+0x5c>)
 8003c0c:	f7fe fb08 	bl	8002220 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003c10:	4b10      	ldr	r3, [pc, #64]	@ (8003c54 <prvCheckForValidListAndQueue+0x60>)
 8003c12:	4a0e      	ldr	r2, [pc, #56]	@ (8003c4c <prvCheckForValidListAndQueue+0x58>)
 8003c14:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003c16:	4b10      	ldr	r3, [pc, #64]	@ (8003c58 <prvCheckForValidListAndQueue+0x64>)
 8003c18:	4a0d      	ldr	r2, [pc, #52]	@ (8003c50 <prvCheckForValidListAndQueue+0x5c>)
 8003c1a:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	210c      	movs	r1, #12
 8003c20:	200a      	movs	r0, #10
 8003c22:	f7fe fc11 	bl	8002448 <xQueueGenericCreate>
 8003c26:	4603      	mov	r3, r0
 8003c28:	4a07      	ldr	r2, [pc, #28]	@ (8003c48 <prvCheckForValidListAndQueue+0x54>)
 8003c2a:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8003c2c:	4b06      	ldr	r3, [pc, #24]	@ (8003c48 <prvCheckForValidListAndQueue+0x54>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d005      	beq.n	8003c40 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003c34:	4b04      	ldr	r3, [pc, #16]	@ (8003c48 <prvCheckForValidListAndQueue+0x54>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4908      	ldr	r1, [pc, #32]	@ (8003c5c <prvCheckForValidListAndQueue+0x68>)
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f7fe fddc 	bl	80027f8 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003c40:	f000 f976 	bl	8003f30 <vPortExitCritical>
    }
 8003c44:	bf00      	nop
 8003c46:	bd80      	pop	{r7, pc}
 8003c48:	2000024c 	.word	0x2000024c
 8003c4c:	2000021c 	.word	0x2000021c
 8003c50:	20000230 	.word	0x20000230
 8003c54:	20000244 	.word	0x20000244
 8003c58:	20000248 	.word	0x20000248
 8003c5c:	08004e28 	.word	0x08004e28

08003c60 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003c60:	b480      	push	{r7}
 8003c62:	b085      	sub	sp, #20
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	60f8      	str	r0, [r7, #12]
 8003c68:	60b9      	str	r1, [r7, #8]
 8003c6a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	3b04      	subs	r3, #4
 8003c70:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003c78:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	3b04      	subs	r3, #4
 8003c7e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	f023 0201 	bic.w	r2, r3, #1
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	3b04      	subs	r3, #4
 8003c8e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003c90:	4a0c      	ldr	r2, [pc, #48]	@ (8003cc4 <pxPortInitialiseStack+0x64>)
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	3b14      	subs	r3, #20
 8003c9a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003c9c:	687a      	ldr	r2, [r7, #4]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	3b04      	subs	r3, #4
 8003ca6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f06f 0202 	mvn.w	r2, #2
 8003cae:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	3b20      	subs	r3, #32
 8003cb4:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3714      	adds	r7, #20
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr
 8003cc4:	08003cc9 	.word	0x08003cc9

08003cc8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b085      	sub	sp, #20
 8003ccc:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003cd2:	4b13      	ldr	r3, [pc, #76]	@ (8003d20 <prvTaskExitError+0x58>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cda:	d00b      	beq.n	8003cf4 <prvTaskExitError+0x2c>
        __asm volatile
 8003cdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ce0:	f383 8811 	msr	BASEPRI, r3
 8003ce4:	f3bf 8f6f 	isb	sy
 8003ce8:	f3bf 8f4f 	dsb	sy
 8003cec:	60fb      	str	r3, [r7, #12]
    }
 8003cee:	bf00      	nop
 8003cf0:	bf00      	nop
 8003cf2:	e7fd      	b.n	8003cf0 <prvTaskExitError+0x28>
        __asm volatile
 8003cf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cf8:	f383 8811 	msr	BASEPRI, r3
 8003cfc:	f3bf 8f6f 	isb	sy
 8003d00:	f3bf 8f4f 	dsb	sy
 8003d04:	60bb      	str	r3, [r7, #8]
    }
 8003d06:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003d08:	bf00      	nop
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d0fc      	beq.n	8003d0a <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003d10:	bf00      	nop
 8003d12:	bf00      	nop
 8003d14:	3714      	adds	r7, #20
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr
 8003d1e:	bf00      	nop
 8003d20:	20000010 	.word	0x20000010
	...

08003d30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003d30:	4b07      	ldr	r3, [pc, #28]	@ (8003d50 <pxCurrentTCBConst2>)
 8003d32:	6819      	ldr	r1, [r3, #0]
 8003d34:	6808      	ldr	r0, [r1, #0]
 8003d36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d3a:	f380 8809 	msr	PSP, r0
 8003d3e:	f3bf 8f6f 	isb	sy
 8003d42:	f04f 0000 	mov.w	r0, #0
 8003d46:	f380 8811 	msr	BASEPRI, r0
 8003d4a:	4770      	bx	lr
 8003d4c:	f3af 8000 	nop.w

08003d50 <pxCurrentTCBConst2>:
 8003d50:	20000118 	.word	0x20000118
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003d54:	bf00      	nop
 8003d56:	bf00      	nop

08003d58 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003d58:	4808      	ldr	r0, [pc, #32]	@ (8003d7c <prvPortStartFirstTask+0x24>)
 8003d5a:	6800      	ldr	r0, [r0, #0]
 8003d5c:	6800      	ldr	r0, [r0, #0]
 8003d5e:	f380 8808 	msr	MSP, r0
 8003d62:	f04f 0000 	mov.w	r0, #0
 8003d66:	f380 8814 	msr	CONTROL, r0
 8003d6a:	b662      	cpsie	i
 8003d6c:	b661      	cpsie	f
 8003d6e:	f3bf 8f4f 	dsb	sy
 8003d72:	f3bf 8f6f 	isb	sy
 8003d76:	df00      	svc	0
 8003d78:	bf00      	nop
 8003d7a:	0000      	.short	0x0000
 8003d7c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003d80:	bf00      	nop
 8003d82:	bf00      	nop

08003d84 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b086      	sub	sp, #24
 8003d88:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003d8a:	4b47      	ldr	r3, [pc, #284]	@ (8003ea8 <xPortStartScheduler+0x124>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a47      	ldr	r2, [pc, #284]	@ (8003eac <xPortStartScheduler+0x128>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d10b      	bne.n	8003dac <xPortStartScheduler+0x28>
        __asm volatile
 8003d94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d98:	f383 8811 	msr	BASEPRI, r3
 8003d9c:	f3bf 8f6f 	isb	sy
 8003da0:	f3bf 8f4f 	dsb	sy
 8003da4:	613b      	str	r3, [r7, #16]
    }
 8003da6:	bf00      	nop
 8003da8:	bf00      	nop
 8003daa:	e7fd      	b.n	8003da8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003dac:	4b3e      	ldr	r3, [pc, #248]	@ (8003ea8 <xPortStartScheduler+0x124>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a3f      	ldr	r2, [pc, #252]	@ (8003eb0 <xPortStartScheduler+0x12c>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d10b      	bne.n	8003dce <xPortStartScheduler+0x4a>
        __asm volatile
 8003db6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dba:	f383 8811 	msr	BASEPRI, r3
 8003dbe:	f3bf 8f6f 	isb	sy
 8003dc2:	f3bf 8f4f 	dsb	sy
 8003dc6:	60fb      	str	r3, [r7, #12]
    }
 8003dc8:	bf00      	nop
 8003dca:	bf00      	nop
 8003dcc:	e7fd      	b.n	8003dca <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003dce:	4b39      	ldr	r3, [pc, #228]	@ (8003eb4 <xPortStartScheduler+0x130>)
 8003dd0:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	781b      	ldrb	r3, [r3, #0]
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	22ff      	movs	r2, #255	@ 0xff
 8003dde:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	781b      	ldrb	r3, [r3, #0]
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003de8:	78fb      	ldrb	r3, [r7, #3]
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003df0:	b2da      	uxtb	r2, r3
 8003df2:	4b31      	ldr	r3, [pc, #196]	@ (8003eb8 <xPortStartScheduler+0x134>)
 8003df4:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003df6:	4b31      	ldr	r3, [pc, #196]	@ (8003ebc <xPortStartScheduler+0x138>)
 8003df8:	2207      	movs	r2, #7
 8003dfa:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003dfc:	e009      	b.n	8003e12 <xPortStartScheduler+0x8e>
        {
            ulMaxPRIGROUPValue--;
 8003dfe:	4b2f      	ldr	r3, [pc, #188]	@ (8003ebc <xPortStartScheduler+0x138>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	3b01      	subs	r3, #1
 8003e04:	4a2d      	ldr	r2, [pc, #180]	@ (8003ebc <xPortStartScheduler+0x138>)
 8003e06:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003e08:	78fb      	ldrb	r3, [r7, #3]
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	005b      	lsls	r3, r3, #1
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003e12:	78fb      	ldrb	r3, [r7, #3]
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e1a:	2b80      	cmp	r3, #128	@ 0x80
 8003e1c:	d0ef      	beq.n	8003dfe <xPortStartScheduler+0x7a>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003e1e:	4b27      	ldr	r3, [pc, #156]	@ (8003ebc <xPortStartScheduler+0x138>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f1c3 0307 	rsb	r3, r3, #7
 8003e26:	2b04      	cmp	r3, #4
 8003e28:	d00b      	beq.n	8003e42 <xPortStartScheduler+0xbe>
        __asm volatile
 8003e2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e2e:	f383 8811 	msr	BASEPRI, r3
 8003e32:	f3bf 8f6f 	isb	sy
 8003e36:	f3bf 8f4f 	dsb	sy
 8003e3a:	60bb      	str	r3, [r7, #8]
    }
 8003e3c:	bf00      	nop
 8003e3e:	bf00      	nop
 8003e40:	e7fd      	b.n	8003e3e <xPortStartScheduler+0xba>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003e42:	4b1e      	ldr	r3, [pc, #120]	@ (8003ebc <xPortStartScheduler+0x138>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	021b      	lsls	r3, r3, #8
 8003e48:	4a1c      	ldr	r2, [pc, #112]	@ (8003ebc <xPortStartScheduler+0x138>)
 8003e4a:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003e4c:	4b1b      	ldr	r3, [pc, #108]	@ (8003ebc <xPortStartScheduler+0x138>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003e54:	4a19      	ldr	r2, [pc, #100]	@ (8003ebc <xPortStartScheduler+0x138>)
 8003e56:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	b2da      	uxtb	r2, r3
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003e60:	4b17      	ldr	r3, [pc, #92]	@ (8003ec0 <xPortStartScheduler+0x13c>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a16      	ldr	r2, [pc, #88]	@ (8003ec0 <xPortStartScheduler+0x13c>)
 8003e66:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003e6a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003e6c:	4b14      	ldr	r3, [pc, #80]	@ (8003ec0 <xPortStartScheduler+0x13c>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a13      	ldr	r2, [pc, #76]	@ (8003ec0 <xPortStartScheduler+0x13c>)
 8003e72:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8003e76:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003e78:	f000 f8e0 	bl	800403c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003e7c:	4b11      	ldr	r3, [pc, #68]	@ (8003ec4 <xPortStartScheduler+0x140>)
 8003e7e:	2200      	movs	r2, #0
 8003e80:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8003e82:	f000 f8ff 	bl	8004084 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003e86:	4b10      	ldr	r3, [pc, #64]	@ (8003ec8 <xPortStartScheduler+0x144>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a0f      	ldr	r2, [pc, #60]	@ (8003ec8 <xPortStartScheduler+0x144>)
 8003e8c:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8003e90:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003e92:	f7ff ff61 	bl	8003d58 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003e96:	f7ff f8e3 	bl	8003060 <vTaskSwitchContext>
    prvTaskExitError();
 8003e9a:	f7ff ff15 	bl	8003cc8 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003e9e:	2300      	movs	r3, #0
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3718      	adds	r7, #24
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}
 8003ea8:	e000ed00 	.word	0xe000ed00
 8003eac:	410fc271 	.word	0x410fc271
 8003eb0:	410fc270 	.word	0x410fc270
 8003eb4:	e000e400 	.word	0xe000e400
 8003eb8:	20000258 	.word	0x20000258
 8003ebc:	2000025c 	.word	0x2000025c
 8003ec0:	e000ed20 	.word	0xe000ed20
 8003ec4:	20000010 	.word	0x20000010
 8003ec8:	e000ef34 	.word	0xe000ef34

08003ecc <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b083      	sub	sp, #12
 8003ed0:	af00      	add	r7, sp, #0
        __asm volatile
 8003ed2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ed6:	f383 8811 	msr	BASEPRI, r3
 8003eda:	f3bf 8f6f 	isb	sy
 8003ede:	f3bf 8f4f 	dsb	sy
 8003ee2:	607b      	str	r3, [r7, #4]
    }
 8003ee4:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8003ee6:	4b10      	ldr	r3, [pc, #64]	@ (8003f28 <vPortEnterCritical+0x5c>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	3301      	adds	r3, #1
 8003eec:	4a0e      	ldr	r2, [pc, #56]	@ (8003f28 <vPortEnterCritical+0x5c>)
 8003eee:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003ef0:	4b0d      	ldr	r3, [pc, #52]	@ (8003f28 <vPortEnterCritical+0x5c>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d110      	bne.n	8003f1a <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003ef8:	4b0c      	ldr	r3, [pc, #48]	@ (8003f2c <vPortEnterCritical+0x60>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d00b      	beq.n	8003f1a <vPortEnterCritical+0x4e>
        __asm volatile
 8003f02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f06:	f383 8811 	msr	BASEPRI, r3
 8003f0a:	f3bf 8f6f 	isb	sy
 8003f0e:	f3bf 8f4f 	dsb	sy
 8003f12:	603b      	str	r3, [r7, #0]
    }
 8003f14:	bf00      	nop
 8003f16:	bf00      	nop
 8003f18:	e7fd      	b.n	8003f16 <vPortEnterCritical+0x4a>
    }
}
 8003f1a:	bf00      	nop
 8003f1c:	370c      	adds	r7, #12
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr
 8003f26:	bf00      	nop
 8003f28:	20000010 	.word	0x20000010
 8003f2c:	e000ed04 	.word	0xe000ed04

08003f30 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003f30:	b480      	push	{r7}
 8003f32:	b083      	sub	sp, #12
 8003f34:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8003f36:	4b12      	ldr	r3, [pc, #72]	@ (8003f80 <vPortExitCritical+0x50>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d10b      	bne.n	8003f56 <vPortExitCritical+0x26>
        __asm volatile
 8003f3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f42:	f383 8811 	msr	BASEPRI, r3
 8003f46:	f3bf 8f6f 	isb	sy
 8003f4a:	f3bf 8f4f 	dsb	sy
 8003f4e:	607b      	str	r3, [r7, #4]
    }
 8003f50:	bf00      	nop
 8003f52:	bf00      	nop
 8003f54:	e7fd      	b.n	8003f52 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8003f56:	4b0a      	ldr	r3, [pc, #40]	@ (8003f80 <vPortExitCritical+0x50>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	3b01      	subs	r3, #1
 8003f5c:	4a08      	ldr	r2, [pc, #32]	@ (8003f80 <vPortExitCritical+0x50>)
 8003f5e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003f60:	4b07      	ldr	r3, [pc, #28]	@ (8003f80 <vPortExitCritical+0x50>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d105      	bne.n	8003f74 <vPortExitCritical+0x44>
 8003f68:	2300      	movs	r3, #0
 8003f6a:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003f72:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8003f74:	bf00      	nop
 8003f76:	370c      	adds	r7, #12
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr
 8003f80:	20000010 	.word	0x20000010
	...

08003f90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003f90:	f3ef 8009 	mrs	r0, PSP
 8003f94:	f3bf 8f6f 	isb	sy
 8003f98:	4b15      	ldr	r3, [pc, #84]	@ (8003ff0 <pxCurrentTCBConst>)
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	f01e 0f10 	tst.w	lr, #16
 8003fa0:	bf08      	it	eq
 8003fa2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003fa6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003faa:	6010      	str	r0, [r2, #0]
 8003fac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003fb0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8003fb4:	f380 8811 	msr	BASEPRI, r0
 8003fb8:	f3bf 8f4f 	dsb	sy
 8003fbc:	f3bf 8f6f 	isb	sy
 8003fc0:	f7ff f84e 	bl	8003060 <vTaskSwitchContext>
 8003fc4:	f04f 0000 	mov.w	r0, #0
 8003fc8:	f380 8811 	msr	BASEPRI, r0
 8003fcc:	bc09      	pop	{r0, r3}
 8003fce:	6819      	ldr	r1, [r3, #0]
 8003fd0:	6808      	ldr	r0, [r1, #0]
 8003fd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fd6:	f01e 0f10 	tst.w	lr, #16
 8003fda:	bf08      	it	eq
 8003fdc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003fe0:	f380 8809 	msr	PSP, r0
 8003fe4:	f3bf 8f6f 	isb	sy
 8003fe8:	4770      	bx	lr
 8003fea:	bf00      	nop
 8003fec:	f3af 8000 	nop.w

08003ff0 <pxCurrentTCBConst>:
 8003ff0:	20000118 	.word	0x20000118
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003ff4:	bf00      	nop
 8003ff6:	bf00      	nop

08003ff8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b082      	sub	sp, #8
 8003ffc:	af00      	add	r7, sp, #0
        __asm volatile
 8003ffe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004002:	f383 8811 	msr	BASEPRI, r3
 8004006:	f3bf 8f6f 	isb	sy
 800400a:	f3bf 8f4f 	dsb	sy
 800400e:	607b      	str	r3, [r7, #4]
    }
 8004010:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004012:	f7fe ff31 	bl	8002e78 <xTaskIncrementTick>
 8004016:	4603      	mov	r3, r0
 8004018:	2b00      	cmp	r3, #0
 800401a:	d003      	beq.n	8004024 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800401c:	4b06      	ldr	r3, [pc, #24]	@ (8004038 <SysTick_Handler+0x40>)
 800401e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004022:	601a      	str	r2, [r3, #0]
 8004024:	2300      	movs	r3, #0
 8004026:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	f383 8811 	msr	BASEPRI, r3
    }
 800402e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8004030:	bf00      	nop
 8004032:	3708      	adds	r7, #8
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}
 8004038:	e000ed04 	.word	0xe000ed04

0800403c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800403c:	b480      	push	{r7}
 800403e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004040:	4b0b      	ldr	r3, [pc, #44]	@ (8004070 <vPortSetupTimerInterrupt+0x34>)
 8004042:	2200      	movs	r2, #0
 8004044:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004046:	4b0b      	ldr	r3, [pc, #44]	@ (8004074 <vPortSetupTimerInterrupt+0x38>)
 8004048:	2200      	movs	r2, #0
 800404a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800404c:	4b0a      	ldr	r3, [pc, #40]	@ (8004078 <vPortSetupTimerInterrupt+0x3c>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a0a      	ldr	r2, [pc, #40]	@ (800407c <vPortSetupTimerInterrupt+0x40>)
 8004052:	fba2 2303 	umull	r2, r3, r2, r3
 8004056:	099b      	lsrs	r3, r3, #6
 8004058:	4a09      	ldr	r2, [pc, #36]	@ (8004080 <vPortSetupTimerInterrupt+0x44>)
 800405a:	3b01      	subs	r3, #1
 800405c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800405e:	4b04      	ldr	r3, [pc, #16]	@ (8004070 <vPortSetupTimerInterrupt+0x34>)
 8004060:	2207      	movs	r2, #7
 8004062:	601a      	str	r2, [r3, #0]
}
 8004064:	bf00      	nop
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr
 800406e:	bf00      	nop
 8004070:	e000e010 	.word	0xe000e010
 8004074:	e000e018 	.word	0xe000e018
 8004078:	20000000 	.word	0x20000000
 800407c:	10624dd3 	.word	0x10624dd3
 8004080:	e000e014 	.word	0xe000e014

08004084 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004084:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004094 <vPortEnableVFP+0x10>
 8004088:	6801      	ldr	r1, [r0, #0]
 800408a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800408e:	6001      	str	r1, [r0, #0]
 8004090:	4770      	bx	lr
 8004092:	0000      	.short	0x0000
 8004094:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004098:	bf00      	nop
 800409a:	bf00      	nop

0800409c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b08a      	sub	sp, #40	@ 0x28
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 80040a4:	2300      	movs	r3, #0
 80040a6:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 80040a8:	f7fe fdda 	bl	8002c60 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80040ac:	4b54      	ldr	r3, [pc, #336]	@ (8004200 <pvPortMalloc+0x164>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d101      	bne.n	80040b8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80040b4:	f000 f90c 	bl	80042d0 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d012      	beq.n	80040e4 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 80040be:	2208      	movs	r2, #8
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	f003 0307 	and.w	r3, r3, #7
 80040c6:	1ad3      	subs	r3, r2, r3
 80040c8:	3308      	adds	r3, #8
 80040ca:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 80040cc:	69bb      	ldr	r3, [r7, #24]
 80040ce:	43db      	mvns	r3, r3
 80040d0:	687a      	ldr	r2, [r7, #4]
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d804      	bhi.n	80040e0 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	69bb      	ldr	r3, [r7, #24]
 80040da:	4413      	add	r3, r2
 80040dc:	607b      	str	r3, [r7, #4]
 80040de:	e001      	b.n	80040e4 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 80040e0:	2300      	movs	r3, #0
 80040e2:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	db71      	blt.n	80041ce <pvPortMalloc+0x132>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d06e      	beq.n	80041ce <pvPortMalloc+0x132>
 80040f0:	4b44      	ldr	r3, [pc, #272]	@ (8004204 <pvPortMalloc+0x168>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	687a      	ldr	r2, [r7, #4]
 80040f6:	429a      	cmp	r2, r3
 80040f8:	d869      	bhi.n	80041ce <pvPortMalloc+0x132>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80040fa:	4b43      	ldr	r3, [pc, #268]	@ (8004208 <pvPortMalloc+0x16c>)
 80040fc:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80040fe:	4b42      	ldr	r3, [pc, #264]	@ (8004208 <pvPortMalloc+0x16c>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004104:	e004      	b.n	8004110 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8004106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004108:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800410a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	687a      	ldr	r2, [r7, #4]
 8004116:	429a      	cmp	r2, r3
 8004118:	d903      	bls.n	8004122 <pvPortMalloc+0x86>
 800411a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d1f1      	bne.n	8004106 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004122:	4b37      	ldr	r3, [pc, #220]	@ (8004200 <pvPortMalloc+0x164>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004128:	429a      	cmp	r2, r3
 800412a:	d050      	beq.n	80041ce <pvPortMalloc+0x132>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800412c:	6a3b      	ldr	r3, [r7, #32]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	2208      	movs	r2, #8
 8004132:	4413      	add	r3, r2
 8004134:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004138:	681a      	ldr	r2, [r3, #0]
 800413a:	6a3b      	ldr	r3, [r7, #32]
 800413c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800413e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004140:	685a      	ldr	r2, [r3, #4]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	1ad2      	subs	r2, r2, r3
 8004146:	2308      	movs	r3, #8
 8004148:	005b      	lsls	r3, r3, #1
 800414a:	429a      	cmp	r2, r3
 800414c:	d920      	bls.n	8004190 <pvPortMalloc+0xf4>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800414e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	4413      	add	r3, r2
 8004154:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	f003 0307 	and.w	r3, r3, #7
 800415c:	2b00      	cmp	r3, #0
 800415e:	d00b      	beq.n	8004178 <pvPortMalloc+0xdc>
        __asm volatile
 8004160:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004164:	f383 8811 	msr	BASEPRI, r3
 8004168:	f3bf 8f6f 	isb	sy
 800416c:	f3bf 8f4f 	dsb	sy
 8004170:	613b      	str	r3, [r7, #16]
    }
 8004172:	bf00      	nop
 8004174:	bf00      	nop
 8004176:	e7fd      	b.n	8004174 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800417a:	685a      	ldr	r2, [r3, #4]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	1ad2      	subs	r2, r2, r3
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004186:	687a      	ldr	r2, [r7, #4]
 8004188:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800418a:	6978      	ldr	r0, [r7, #20]
 800418c:	f000 f8fc 	bl	8004388 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004190:	4b1c      	ldr	r3, [pc, #112]	@ (8004204 <pvPortMalloc+0x168>)
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	4a1a      	ldr	r2, [pc, #104]	@ (8004204 <pvPortMalloc+0x168>)
 800419c:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800419e:	4b19      	ldr	r3, [pc, #100]	@ (8004204 <pvPortMalloc+0x168>)
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	4b1a      	ldr	r3, [pc, #104]	@ (800420c <pvPortMalloc+0x170>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d203      	bcs.n	80041b2 <pvPortMalloc+0x116>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80041aa:	4b16      	ldr	r3, [pc, #88]	@ (8004204 <pvPortMalloc+0x168>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a17      	ldr	r2, [pc, #92]	@ (800420c <pvPortMalloc+0x170>)
 80041b0:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 80041b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80041ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041bc:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80041be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041c0:	2200      	movs	r2, #0
 80041c2:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80041c4:	4b12      	ldr	r3, [pc, #72]	@ (8004210 <pvPortMalloc+0x174>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	3301      	adds	r3, #1
 80041ca:	4a11      	ldr	r2, [pc, #68]	@ (8004210 <pvPortMalloc+0x174>)
 80041cc:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80041ce:	f7fe fd55 	bl	8002c7c <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80041d2:	69fb      	ldr	r3, [r7, #28]
 80041d4:	f003 0307 	and.w	r3, r3, #7
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d00b      	beq.n	80041f4 <pvPortMalloc+0x158>
        __asm volatile
 80041dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041e0:	f383 8811 	msr	BASEPRI, r3
 80041e4:	f3bf 8f6f 	isb	sy
 80041e8:	f3bf 8f4f 	dsb	sy
 80041ec:	60fb      	str	r3, [r7, #12]
    }
 80041ee:	bf00      	nop
 80041f0:	bf00      	nop
 80041f2:	e7fd      	b.n	80041f0 <pvPortMalloc+0x154>
    return pvReturn;
 80041f4:	69fb      	ldr	r3, [r7, #28]
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3728      	adds	r7, #40	@ 0x28
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}
 80041fe:	bf00      	nop
 8004200:	20012e68 	.word	0x20012e68
 8004204:	20012e6c 	.word	0x20012e6c
 8004208:	20012e60 	.word	0x20012e60
 800420c:	20012e70 	.word	0x20012e70
 8004210:	20012e74 	.word	0x20012e74

08004214 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b086      	sub	sp, #24
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d04b      	beq.n	80042be <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004226:	2308      	movs	r3, #8
 8004228:	425b      	negs	r3, r3
 800422a:	697a      	ldr	r2, [r7, #20]
 800422c:	4413      	add	r3, r2
 800422e:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	2b00      	cmp	r3, #0
 800423a:	db0b      	blt.n	8004254 <vPortFree+0x40>
        __asm volatile
 800423c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004240:	f383 8811 	msr	BASEPRI, r3
 8004244:	f3bf 8f6f 	isb	sy
 8004248:	f3bf 8f4f 	dsb	sy
 800424c:	60fb      	str	r3, [r7, #12]
    }
 800424e:	bf00      	nop
 8004250:	bf00      	nop
 8004252:	e7fd      	b.n	8004250 <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d00b      	beq.n	8004274 <vPortFree+0x60>
        __asm volatile
 800425c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004260:	f383 8811 	msr	BASEPRI, r3
 8004264:	f3bf 8f6f 	isb	sy
 8004268:	f3bf 8f4f 	dsb	sy
 800426c:	60bb      	str	r3, [r7, #8]
    }
 800426e:	bf00      	nop
 8004270:	bf00      	nop
 8004272:	e7fd      	b.n	8004270 <vPortFree+0x5c>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	0fdb      	lsrs	r3, r3, #31
 800427a:	f003 0301 	and.w	r3, r3, #1
 800427e:	b2db      	uxtb	r3, r3
 8004280:	2b00      	cmp	r3, #0
 8004282:	d01c      	beq.n	80042be <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d118      	bne.n	80042be <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8004298:	f7fe fce2 	bl	8002c60 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	685a      	ldr	r2, [r3, #4]
 80042a0:	4b09      	ldr	r3, [pc, #36]	@ (80042c8 <vPortFree+0xb4>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4413      	add	r3, r2
 80042a6:	4a08      	ldr	r2, [pc, #32]	@ (80042c8 <vPortFree+0xb4>)
 80042a8:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80042aa:	6938      	ldr	r0, [r7, #16]
 80042ac:	f000 f86c 	bl	8004388 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80042b0:	4b06      	ldr	r3, [pc, #24]	@ (80042cc <vPortFree+0xb8>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	3301      	adds	r3, #1
 80042b6:	4a05      	ldr	r2, [pc, #20]	@ (80042cc <vPortFree+0xb8>)
 80042b8:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80042ba:	f7fe fcdf 	bl	8002c7c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80042be:	bf00      	nop
 80042c0:	3718      	adds	r7, #24
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}
 80042c6:	bf00      	nop
 80042c8:	20012e6c 	.word	0x20012e6c
 80042cc:	20012e78 	.word	0x20012e78

080042d0 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80042d0:	b480      	push	{r7}
 80042d2:	b085      	sub	sp, #20
 80042d4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80042d6:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 80042da:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 80042dc:	4b25      	ldr	r3, [pc, #148]	@ (8004374 <prvHeapInit+0xa4>)
 80042de:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f003 0307 	and.w	r3, r3, #7
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d00c      	beq.n	8004304 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	3307      	adds	r3, #7
 80042ee:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	f023 0307 	bic.w	r3, r3, #7
 80042f6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 80042f8:	68ba      	ldr	r2, [r7, #8]
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	1ad3      	subs	r3, r2, r3
 80042fe:	4a1d      	ldr	r2, [pc, #116]	@ (8004374 <prvHeapInit+0xa4>)
 8004300:	4413      	add	r3, r2
 8004302:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004308:	4a1b      	ldr	r2, [pc, #108]	@ (8004378 <prvHeapInit+0xa8>)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800430e:	4b1a      	ldr	r3, [pc, #104]	@ (8004378 <prvHeapInit+0xa8>)
 8004310:	2200      	movs	r2, #0
 8004312:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	68ba      	ldr	r2, [r7, #8]
 8004318:	4413      	add	r3, r2
 800431a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800431c:	2208      	movs	r2, #8
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	1a9b      	subs	r3, r3, r2
 8004322:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f023 0307 	bic.w	r3, r3, #7
 800432a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	4a13      	ldr	r2, [pc, #76]	@ (800437c <prvHeapInit+0xac>)
 8004330:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004332:	4b12      	ldr	r3, [pc, #72]	@ (800437c <prvHeapInit+0xac>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	2200      	movs	r2, #0
 8004338:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800433a:	4b10      	ldr	r3, [pc, #64]	@ (800437c <prvHeapInit+0xac>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	2200      	movs	r2, #0
 8004340:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	68fa      	ldr	r2, [r7, #12]
 800434a:	1ad2      	subs	r2, r2, r3
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004350:	4b0a      	ldr	r3, [pc, #40]	@ (800437c <prvHeapInit+0xac>)
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	4a08      	ldr	r2, [pc, #32]	@ (8004380 <prvHeapInit+0xb0>)
 800435e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	4a07      	ldr	r2, [pc, #28]	@ (8004384 <prvHeapInit+0xb4>)
 8004366:	6013      	str	r3, [r2, #0]
}
 8004368:	bf00      	nop
 800436a:	3714      	adds	r7, #20
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr
 8004374:	20000260 	.word	0x20000260
 8004378:	20012e60 	.word	0x20012e60
 800437c:	20012e68 	.word	0x20012e68
 8004380:	20012e70 	.word	0x20012e70
 8004384:	20012e6c 	.word	0x20012e6c

08004388 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004388:	b480      	push	{r7}
 800438a:	b085      	sub	sp, #20
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004390:	4b28      	ldr	r3, [pc, #160]	@ (8004434 <prvInsertBlockIntoFreeList+0xac>)
 8004392:	60fb      	str	r3, [r7, #12]
 8004394:	e002      	b.n	800439c <prvInsertBlockIntoFreeList+0x14>
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	60fb      	str	r3, [r7, #12]
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d8f7      	bhi.n	8004396 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	68ba      	ldr	r2, [r7, #8]
 80043b0:	4413      	add	r3, r2
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d108      	bne.n	80043ca <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	685a      	ldr	r2, [r3, #4]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	441a      	add	r2, r3
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	68ba      	ldr	r2, [r7, #8]
 80043d4:	441a      	add	r2, r3
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	429a      	cmp	r2, r3
 80043dc:	d118      	bne.n	8004410 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	4b15      	ldr	r3, [pc, #84]	@ (8004438 <prvInsertBlockIntoFreeList+0xb0>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d00d      	beq.n	8004406 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	685a      	ldr	r2, [r3, #4]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	441a      	add	r2, r3
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	601a      	str	r2, [r3, #0]
 8004404:	e008      	b.n	8004418 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004406:	4b0c      	ldr	r3, [pc, #48]	@ (8004438 <prvInsertBlockIntoFreeList+0xb0>)
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	601a      	str	r2, [r3, #0]
 800440e:	e003      	b.n	8004418 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004418:	68fa      	ldr	r2, [r7, #12]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	429a      	cmp	r2, r3
 800441e:	d002      	beq.n	8004426 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	687a      	ldr	r2, [r7, #4]
 8004424:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004426:	bf00      	nop
 8004428:	3714      	adds	r7, #20
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr
 8004432:	bf00      	nop
 8004434:	20012e60 	.word	0x20012e60
 8004438:	20012e68 	.word	0x20012e68

0800443c <std>:
 800443c:	2300      	movs	r3, #0
 800443e:	b510      	push	{r4, lr}
 8004440:	4604      	mov	r4, r0
 8004442:	e9c0 3300 	strd	r3, r3, [r0]
 8004446:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800444a:	6083      	str	r3, [r0, #8]
 800444c:	8181      	strh	r1, [r0, #12]
 800444e:	6643      	str	r3, [r0, #100]	@ 0x64
 8004450:	81c2      	strh	r2, [r0, #14]
 8004452:	6183      	str	r3, [r0, #24]
 8004454:	4619      	mov	r1, r3
 8004456:	2208      	movs	r2, #8
 8004458:	305c      	adds	r0, #92	@ 0x5c
 800445a:	f000 f9e7 	bl	800482c <memset>
 800445e:	4b0d      	ldr	r3, [pc, #52]	@ (8004494 <std+0x58>)
 8004460:	6263      	str	r3, [r4, #36]	@ 0x24
 8004462:	4b0d      	ldr	r3, [pc, #52]	@ (8004498 <std+0x5c>)
 8004464:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004466:	4b0d      	ldr	r3, [pc, #52]	@ (800449c <std+0x60>)
 8004468:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800446a:	4b0d      	ldr	r3, [pc, #52]	@ (80044a0 <std+0x64>)
 800446c:	6323      	str	r3, [r4, #48]	@ 0x30
 800446e:	4b0d      	ldr	r3, [pc, #52]	@ (80044a4 <std+0x68>)
 8004470:	6224      	str	r4, [r4, #32]
 8004472:	429c      	cmp	r4, r3
 8004474:	d006      	beq.n	8004484 <std+0x48>
 8004476:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800447a:	4294      	cmp	r4, r2
 800447c:	d002      	beq.n	8004484 <std+0x48>
 800447e:	33d0      	adds	r3, #208	@ 0xd0
 8004480:	429c      	cmp	r4, r3
 8004482:	d105      	bne.n	8004490 <std+0x54>
 8004484:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004488:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800448c:	f000 ba40 	b.w	8004910 <__retarget_lock_init_recursive>
 8004490:	bd10      	pop	{r4, pc}
 8004492:	bf00      	nop
 8004494:	0800467d 	.word	0x0800467d
 8004498:	0800469f 	.word	0x0800469f
 800449c:	080046d7 	.word	0x080046d7
 80044a0:	080046fb 	.word	0x080046fb
 80044a4:	20012e7c 	.word	0x20012e7c

080044a8 <stdio_exit_handler>:
 80044a8:	4a02      	ldr	r2, [pc, #8]	@ (80044b4 <stdio_exit_handler+0xc>)
 80044aa:	4903      	ldr	r1, [pc, #12]	@ (80044b8 <stdio_exit_handler+0x10>)
 80044ac:	4803      	ldr	r0, [pc, #12]	@ (80044bc <stdio_exit_handler+0x14>)
 80044ae:	f000 b869 	b.w	8004584 <_fwalk_sglue>
 80044b2:	bf00      	nop
 80044b4:	20000014 	.word	0x20000014
 80044b8:	08004c2d 	.word	0x08004c2d
 80044bc:	20000024 	.word	0x20000024

080044c0 <cleanup_stdio>:
 80044c0:	6841      	ldr	r1, [r0, #4]
 80044c2:	4b0c      	ldr	r3, [pc, #48]	@ (80044f4 <cleanup_stdio+0x34>)
 80044c4:	4299      	cmp	r1, r3
 80044c6:	b510      	push	{r4, lr}
 80044c8:	4604      	mov	r4, r0
 80044ca:	d001      	beq.n	80044d0 <cleanup_stdio+0x10>
 80044cc:	f000 fbae 	bl	8004c2c <_fflush_r>
 80044d0:	68a1      	ldr	r1, [r4, #8]
 80044d2:	4b09      	ldr	r3, [pc, #36]	@ (80044f8 <cleanup_stdio+0x38>)
 80044d4:	4299      	cmp	r1, r3
 80044d6:	d002      	beq.n	80044de <cleanup_stdio+0x1e>
 80044d8:	4620      	mov	r0, r4
 80044da:	f000 fba7 	bl	8004c2c <_fflush_r>
 80044de:	68e1      	ldr	r1, [r4, #12]
 80044e0:	4b06      	ldr	r3, [pc, #24]	@ (80044fc <cleanup_stdio+0x3c>)
 80044e2:	4299      	cmp	r1, r3
 80044e4:	d004      	beq.n	80044f0 <cleanup_stdio+0x30>
 80044e6:	4620      	mov	r0, r4
 80044e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80044ec:	f000 bb9e 	b.w	8004c2c <_fflush_r>
 80044f0:	bd10      	pop	{r4, pc}
 80044f2:	bf00      	nop
 80044f4:	20012e7c 	.word	0x20012e7c
 80044f8:	20012ee4 	.word	0x20012ee4
 80044fc:	20012f4c 	.word	0x20012f4c

08004500 <global_stdio_init.part.0>:
 8004500:	b510      	push	{r4, lr}
 8004502:	4b0b      	ldr	r3, [pc, #44]	@ (8004530 <global_stdio_init.part.0+0x30>)
 8004504:	4c0b      	ldr	r4, [pc, #44]	@ (8004534 <global_stdio_init.part.0+0x34>)
 8004506:	4a0c      	ldr	r2, [pc, #48]	@ (8004538 <global_stdio_init.part.0+0x38>)
 8004508:	601a      	str	r2, [r3, #0]
 800450a:	4620      	mov	r0, r4
 800450c:	2200      	movs	r2, #0
 800450e:	2104      	movs	r1, #4
 8004510:	f7ff ff94 	bl	800443c <std>
 8004514:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004518:	2201      	movs	r2, #1
 800451a:	2109      	movs	r1, #9
 800451c:	f7ff ff8e 	bl	800443c <std>
 8004520:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004524:	2202      	movs	r2, #2
 8004526:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800452a:	2112      	movs	r1, #18
 800452c:	f7ff bf86 	b.w	800443c <std>
 8004530:	20012fb4 	.word	0x20012fb4
 8004534:	20012e7c 	.word	0x20012e7c
 8004538:	080044a9 	.word	0x080044a9

0800453c <__sfp_lock_acquire>:
 800453c:	4801      	ldr	r0, [pc, #4]	@ (8004544 <__sfp_lock_acquire+0x8>)
 800453e:	f000 b9e8 	b.w	8004912 <__retarget_lock_acquire_recursive>
 8004542:	bf00      	nop
 8004544:	20012fbd 	.word	0x20012fbd

08004548 <__sfp_lock_release>:
 8004548:	4801      	ldr	r0, [pc, #4]	@ (8004550 <__sfp_lock_release+0x8>)
 800454a:	f000 b9e3 	b.w	8004914 <__retarget_lock_release_recursive>
 800454e:	bf00      	nop
 8004550:	20012fbd 	.word	0x20012fbd

08004554 <__sinit>:
 8004554:	b510      	push	{r4, lr}
 8004556:	4604      	mov	r4, r0
 8004558:	f7ff fff0 	bl	800453c <__sfp_lock_acquire>
 800455c:	6a23      	ldr	r3, [r4, #32]
 800455e:	b11b      	cbz	r3, 8004568 <__sinit+0x14>
 8004560:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004564:	f7ff bff0 	b.w	8004548 <__sfp_lock_release>
 8004568:	4b04      	ldr	r3, [pc, #16]	@ (800457c <__sinit+0x28>)
 800456a:	6223      	str	r3, [r4, #32]
 800456c:	4b04      	ldr	r3, [pc, #16]	@ (8004580 <__sinit+0x2c>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d1f5      	bne.n	8004560 <__sinit+0xc>
 8004574:	f7ff ffc4 	bl	8004500 <global_stdio_init.part.0>
 8004578:	e7f2      	b.n	8004560 <__sinit+0xc>
 800457a:	bf00      	nop
 800457c:	080044c1 	.word	0x080044c1
 8004580:	20012fb4 	.word	0x20012fb4

08004584 <_fwalk_sglue>:
 8004584:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004588:	4607      	mov	r7, r0
 800458a:	4688      	mov	r8, r1
 800458c:	4614      	mov	r4, r2
 800458e:	2600      	movs	r6, #0
 8004590:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004594:	f1b9 0901 	subs.w	r9, r9, #1
 8004598:	d505      	bpl.n	80045a6 <_fwalk_sglue+0x22>
 800459a:	6824      	ldr	r4, [r4, #0]
 800459c:	2c00      	cmp	r4, #0
 800459e:	d1f7      	bne.n	8004590 <_fwalk_sglue+0xc>
 80045a0:	4630      	mov	r0, r6
 80045a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80045a6:	89ab      	ldrh	r3, [r5, #12]
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d907      	bls.n	80045bc <_fwalk_sglue+0x38>
 80045ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80045b0:	3301      	adds	r3, #1
 80045b2:	d003      	beq.n	80045bc <_fwalk_sglue+0x38>
 80045b4:	4629      	mov	r1, r5
 80045b6:	4638      	mov	r0, r7
 80045b8:	47c0      	blx	r8
 80045ba:	4306      	orrs	r6, r0
 80045bc:	3568      	adds	r5, #104	@ 0x68
 80045be:	e7e9      	b.n	8004594 <_fwalk_sglue+0x10>

080045c0 <_puts_r>:
 80045c0:	6a03      	ldr	r3, [r0, #32]
 80045c2:	b570      	push	{r4, r5, r6, lr}
 80045c4:	6884      	ldr	r4, [r0, #8]
 80045c6:	4605      	mov	r5, r0
 80045c8:	460e      	mov	r6, r1
 80045ca:	b90b      	cbnz	r3, 80045d0 <_puts_r+0x10>
 80045cc:	f7ff ffc2 	bl	8004554 <__sinit>
 80045d0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80045d2:	07db      	lsls	r3, r3, #31
 80045d4:	d405      	bmi.n	80045e2 <_puts_r+0x22>
 80045d6:	89a3      	ldrh	r3, [r4, #12]
 80045d8:	0598      	lsls	r0, r3, #22
 80045da:	d402      	bmi.n	80045e2 <_puts_r+0x22>
 80045dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80045de:	f000 f998 	bl	8004912 <__retarget_lock_acquire_recursive>
 80045e2:	89a3      	ldrh	r3, [r4, #12]
 80045e4:	0719      	lsls	r1, r3, #28
 80045e6:	d502      	bpl.n	80045ee <_puts_r+0x2e>
 80045e8:	6923      	ldr	r3, [r4, #16]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d135      	bne.n	800465a <_puts_r+0x9a>
 80045ee:	4621      	mov	r1, r4
 80045f0:	4628      	mov	r0, r5
 80045f2:	f000 f8c5 	bl	8004780 <__swsetup_r>
 80045f6:	b380      	cbz	r0, 800465a <_puts_r+0x9a>
 80045f8:	f04f 35ff 	mov.w	r5, #4294967295
 80045fc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80045fe:	07da      	lsls	r2, r3, #31
 8004600:	d405      	bmi.n	800460e <_puts_r+0x4e>
 8004602:	89a3      	ldrh	r3, [r4, #12]
 8004604:	059b      	lsls	r3, r3, #22
 8004606:	d402      	bmi.n	800460e <_puts_r+0x4e>
 8004608:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800460a:	f000 f983 	bl	8004914 <__retarget_lock_release_recursive>
 800460e:	4628      	mov	r0, r5
 8004610:	bd70      	pop	{r4, r5, r6, pc}
 8004612:	2b00      	cmp	r3, #0
 8004614:	da04      	bge.n	8004620 <_puts_r+0x60>
 8004616:	69a2      	ldr	r2, [r4, #24]
 8004618:	429a      	cmp	r2, r3
 800461a:	dc17      	bgt.n	800464c <_puts_r+0x8c>
 800461c:	290a      	cmp	r1, #10
 800461e:	d015      	beq.n	800464c <_puts_r+0x8c>
 8004620:	6823      	ldr	r3, [r4, #0]
 8004622:	1c5a      	adds	r2, r3, #1
 8004624:	6022      	str	r2, [r4, #0]
 8004626:	7019      	strb	r1, [r3, #0]
 8004628:	68a3      	ldr	r3, [r4, #8]
 800462a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800462e:	3b01      	subs	r3, #1
 8004630:	60a3      	str	r3, [r4, #8]
 8004632:	2900      	cmp	r1, #0
 8004634:	d1ed      	bne.n	8004612 <_puts_r+0x52>
 8004636:	2b00      	cmp	r3, #0
 8004638:	da11      	bge.n	800465e <_puts_r+0x9e>
 800463a:	4622      	mov	r2, r4
 800463c:	210a      	movs	r1, #10
 800463e:	4628      	mov	r0, r5
 8004640:	f000 f85f 	bl	8004702 <__swbuf_r>
 8004644:	3001      	adds	r0, #1
 8004646:	d0d7      	beq.n	80045f8 <_puts_r+0x38>
 8004648:	250a      	movs	r5, #10
 800464a:	e7d7      	b.n	80045fc <_puts_r+0x3c>
 800464c:	4622      	mov	r2, r4
 800464e:	4628      	mov	r0, r5
 8004650:	f000 f857 	bl	8004702 <__swbuf_r>
 8004654:	3001      	adds	r0, #1
 8004656:	d1e7      	bne.n	8004628 <_puts_r+0x68>
 8004658:	e7ce      	b.n	80045f8 <_puts_r+0x38>
 800465a:	3e01      	subs	r6, #1
 800465c:	e7e4      	b.n	8004628 <_puts_r+0x68>
 800465e:	6823      	ldr	r3, [r4, #0]
 8004660:	1c5a      	adds	r2, r3, #1
 8004662:	6022      	str	r2, [r4, #0]
 8004664:	220a      	movs	r2, #10
 8004666:	701a      	strb	r2, [r3, #0]
 8004668:	e7ee      	b.n	8004648 <_puts_r+0x88>
	...

0800466c <puts>:
 800466c:	4b02      	ldr	r3, [pc, #8]	@ (8004678 <puts+0xc>)
 800466e:	4601      	mov	r1, r0
 8004670:	6818      	ldr	r0, [r3, #0]
 8004672:	f7ff bfa5 	b.w	80045c0 <_puts_r>
 8004676:	bf00      	nop
 8004678:	20000020 	.word	0x20000020

0800467c <__sread>:
 800467c:	b510      	push	{r4, lr}
 800467e:	460c      	mov	r4, r1
 8004680:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004684:	f000 f8fc 	bl	8004880 <_read_r>
 8004688:	2800      	cmp	r0, #0
 800468a:	bfab      	itete	ge
 800468c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800468e:	89a3      	ldrhlt	r3, [r4, #12]
 8004690:	181b      	addge	r3, r3, r0
 8004692:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004696:	bfac      	ite	ge
 8004698:	6563      	strge	r3, [r4, #84]	@ 0x54
 800469a:	81a3      	strhlt	r3, [r4, #12]
 800469c:	bd10      	pop	{r4, pc}

0800469e <__swrite>:
 800469e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046a2:	461f      	mov	r7, r3
 80046a4:	898b      	ldrh	r3, [r1, #12]
 80046a6:	05db      	lsls	r3, r3, #23
 80046a8:	4605      	mov	r5, r0
 80046aa:	460c      	mov	r4, r1
 80046ac:	4616      	mov	r6, r2
 80046ae:	d505      	bpl.n	80046bc <__swrite+0x1e>
 80046b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046b4:	2302      	movs	r3, #2
 80046b6:	2200      	movs	r2, #0
 80046b8:	f000 f8d0 	bl	800485c <_lseek_r>
 80046bc:	89a3      	ldrh	r3, [r4, #12]
 80046be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80046c2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80046c6:	81a3      	strh	r3, [r4, #12]
 80046c8:	4632      	mov	r2, r6
 80046ca:	463b      	mov	r3, r7
 80046cc:	4628      	mov	r0, r5
 80046ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80046d2:	f000 b8e7 	b.w	80048a4 <_write_r>

080046d6 <__sseek>:
 80046d6:	b510      	push	{r4, lr}
 80046d8:	460c      	mov	r4, r1
 80046da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046de:	f000 f8bd 	bl	800485c <_lseek_r>
 80046e2:	1c43      	adds	r3, r0, #1
 80046e4:	89a3      	ldrh	r3, [r4, #12]
 80046e6:	bf15      	itete	ne
 80046e8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80046ea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80046ee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80046f2:	81a3      	strheq	r3, [r4, #12]
 80046f4:	bf18      	it	ne
 80046f6:	81a3      	strhne	r3, [r4, #12]
 80046f8:	bd10      	pop	{r4, pc}

080046fa <__sclose>:
 80046fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046fe:	f000 b89d 	b.w	800483c <_close_r>

08004702 <__swbuf_r>:
 8004702:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004704:	460e      	mov	r6, r1
 8004706:	4614      	mov	r4, r2
 8004708:	4605      	mov	r5, r0
 800470a:	b118      	cbz	r0, 8004714 <__swbuf_r+0x12>
 800470c:	6a03      	ldr	r3, [r0, #32]
 800470e:	b90b      	cbnz	r3, 8004714 <__swbuf_r+0x12>
 8004710:	f7ff ff20 	bl	8004554 <__sinit>
 8004714:	69a3      	ldr	r3, [r4, #24]
 8004716:	60a3      	str	r3, [r4, #8]
 8004718:	89a3      	ldrh	r3, [r4, #12]
 800471a:	071a      	lsls	r2, r3, #28
 800471c:	d501      	bpl.n	8004722 <__swbuf_r+0x20>
 800471e:	6923      	ldr	r3, [r4, #16]
 8004720:	b943      	cbnz	r3, 8004734 <__swbuf_r+0x32>
 8004722:	4621      	mov	r1, r4
 8004724:	4628      	mov	r0, r5
 8004726:	f000 f82b 	bl	8004780 <__swsetup_r>
 800472a:	b118      	cbz	r0, 8004734 <__swbuf_r+0x32>
 800472c:	f04f 37ff 	mov.w	r7, #4294967295
 8004730:	4638      	mov	r0, r7
 8004732:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004734:	6823      	ldr	r3, [r4, #0]
 8004736:	6922      	ldr	r2, [r4, #16]
 8004738:	1a98      	subs	r0, r3, r2
 800473a:	6963      	ldr	r3, [r4, #20]
 800473c:	b2f6      	uxtb	r6, r6
 800473e:	4283      	cmp	r3, r0
 8004740:	4637      	mov	r7, r6
 8004742:	dc05      	bgt.n	8004750 <__swbuf_r+0x4e>
 8004744:	4621      	mov	r1, r4
 8004746:	4628      	mov	r0, r5
 8004748:	f000 fa70 	bl	8004c2c <_fflush_r>
 800474c:	2800      	cmp	r0, #0
 800474e:	d1ed      	bne.n	800472c <__swbuf_r+0x2a>
 8004750:	68a3      	ldr	r3, [r4, #8]
 8004752:	3b01      	subs	r3, #1
 8004754:	60a3      	str	r3, [r4, #8]
 8004756:	6823      	ldr	r3, [r4, #0]
 8004758:	1c5a      	adds	r2, r3, #1
 800475a:	6022      	str	r2, [r4, #0]
 800475c:	701e      	strb	r6, [r3, #0]
 800475e:	6962      	ldr	r2, [r4, #20]
 8004760:	1c43      	adds	r3, r0, #1
 8004762:	429a      	cmp	r2, r3
 8004764:	d004      	beq.n	8004770 <__swbuf_r+0x6e>
 8004766:	89a3      	ldrh	r3, [r4, #12]
 8004768:	07db      	lsls	r3, r3, #31
 800476a:	d5e1      	bpl.n	8004730 <__swbuf_r+0x2e>
 800476c:	2e0a      	cmp	r6, #10
 800476e:	d1df      	bne.n	8004730 <__swbuf_r+0x2e>
 8004770:	4621      	mov	r1, r4
 8004772:	4628      	mov	r0, r5
 8004774:	f000 fa5a 	bl	8004c2c <_fflush_r>
 8004778:	2800      	cmp	r0, #0
 800477a:	d0d9      	beq.n	8004730 <__swbuf_r+0x2e>
 800477c:	e7d6      	b.n	800472c <__swbuf_r+0x2a>
	...

08004780 <__swsetup_r>:
 8004780:	b538      	push	{r3, r4, r5, lr}
 8004782:	4b29      	ldr	r3, [pc, #164]	@ (8004828 <__swsetup_r+0xa8>)
 8004784:	4605      	mov	r5, r0
 8004786:	6818      	ldr	r0, [r3, #0]
 8004788:	460c      	mov	r4, r1
 800478a:	b118      	cbz	r0, 8004794 <__swsetup_r+0x14>
 800478c:	6a03      	ldr	r3, [r0, #32]
 800478e:	b90b      	cbnz	r3, 8004794 <__swsetup_r+0x14>
 8004790:	f7ff fee0 	bl	8004554 <__sinit>
 8004794:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004798:	0719      	lsls	r1, r3, #28
 800479a:	d422      	bmi.n	80047e2 <__swsetup_r+0x62>
 800479c:	06da      	lsls	r2, r3, #27
 800479e:	d407      	bmi.n	80047b0 <__swsetup_r+0x30>
 80047a0:	2209      	movs	r2, #9
 80047a2:	602a      	str	r2, [r5, #0]
 80047a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80047a8:	81a3      	strh	r3, [r4, #12]
 80047aa:	f04f 30ff 	mov.w	r0, #4294967295
 80047ae:	e033      	b.n	8004818 <__swsetup_r+0x98>
 80047b0:	0758      	lsls	r0, r3, #29
 80047b2:	d512      	bpl.n	80047da <__swsetup_r+0x5a>
 80047b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80047b6:	b141      	cbz	r1, 80047ca <__swsetup_r+0x4a>
 80047b8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80047bc:	4299      	cmp	r1, r3
 80047be:	d002      	beq.n	80047c6 <__swsetup_r+0x46>
 80047c0:	4628      	mov	r0, r5
 80047c2:	f000 f8b7 	bl	8004934 <_free_r>
 80047c6:	2300      	movs	r3, #0
 80047c8:	6363      	str	r3, [r4, #52]	@ 0x34
 80047ca:	89a3      	ldrh	r3, [r4, #12]
 80047cc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80047d0:	81a3      	strh	r3, [r4, #12]
 80047d2:	2300      	movs	r3, #0
 80047d4:	6063      	str	r3, [r4, #4]
 80047d6:	6923      	ldr	r3, [r4, #16]
 80047d8:	6023      	str	r3, [r4, #0]
 80047da:	89a3      	ldrh	r3, [r4, #12]
 80047dc:	f043 0308 	orr.w	r3, r3, #8
 80047e0:	81a3      	strh	r3, [r4, #12]
 80047e2:	6923      	ldr	r3, [r4, #16]
 80047e4:	b94b      	cbnz	r3, 80047fa <__swsetup_r+0x7a>
 80047e6:	89a3      	ldrh	r3, [r4, #12]
 80047e8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80047ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80047f0:	d003      	beq.n	80047fa <__swsetup_r+0x7a>
 80047f2:	4621      	mov	r1, r4
 80047f4:	4628      	mov	r0, r5
 80047f6:	f000 fa67 	bl	8004cc8 <__smakebuf_r>
 80047fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80047fe:	f013 0201 	ands.w	r2, r3, #1
 8004802:	d00a      	beq.n	800481a <__swsetup_r+0x9a>
 8004804:	2200      	movs	r2, #0
 8004806:	60a2      	str	r2, [r4, #8]
 8004808:	6962      	ldr	r2, [r4, #20]
 800480a:	4252      	negs	r2, r2
 800480c:	61a2      	str	r2, [r4, #24]
 800480e:	6922      	ldr	r2, [r4, #16]
 8004810:	b942      	cbnz	r2, 8004824 <__swsetup_r+0xa4>
 8004812:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004816:	d1c5      	bne.n	80047a4 <__swsetup_r+0x24>
 8004818:	bd38      	pop	{r3, r4, r5, pc}
 800481a:	0799      	lsls	r1, r3, #30
 800481c:	bf58      	it	pl
 800481e:	6962      	ldrpl	r2, [r4, #20]
 8004820:	60a2      	str	r2, [r4, #8]
 8004822:	e7f4      	b.n	800480e <__swsetup_r+0x8e>
 8004824:	2000      	movs	r0, #0
 8004826:	e7f7      	b.n	8004818 <__swsetup_r+0x98>
 8004828:	20000020 	.word	0x20000020

0800482c <memset>:
 800482c:	4402      	add	r2, r0
 800482e:	4603      	mov	r3, r0
 8004830:	4293      	cmp	r3, r2
 8004832:	d100      	bne.n	8004836 <memset+0xa>
 8004834:	4770      	bx	lr
 8004836:	f803 1b01 	strb.w	r1, [r3], #1
 800483a:	e7f9      	b.n	8004830 <memset+0x4>

0800483c <_close_r>:
 800483c:	b538      	push	{r3, r4, r5, lr}
 800483e:	4d06      	ldr	r5, [pc, #24]	@ (8004858 <_close_r+0x1c>)
 8004840:	2300      	movs	r3, #0
 8004842:	4604      	mov	r4, r0
 8004844:	4608      	mov	r0, r1
 8004846:	602b      	str	r3, [r5, #0]
 8004848:	f7fc f8ff 	bl	8000a4a <_close>
 800484c:	1c43      	adds	r3, r0, #1
 800484e:	d102      	bne.n	8004856 <_close_r+0x1a>
 8004850:	682b      	ldr	r3, [r5, #0]
 8004852:	b103      	cbz	r3, 8004856 <_close_r+0x1a>
 8004854:	6023      	str	r3, [r4, #0]
 8004856:	bd38      	pop	{r3, r4, r5, pc}
 8004858:	20012fb8 	.word	0x20012fb8

0800485c <_lseek_r>:
 800485c:	b538      	push	{r3, r4, r5, lr}
 800485e:	4d07      	ldr	r5, [pc, #28]	@ (800487c <_lseek_r+0x20>)
 8004860:	4604      	mov	r4, r0
 8004862:	4608      	mov	r0, r1
 8004864:	4611      	mov	r1, r2
 8004866:	2200      	movs	r2, #0
 8004868:	602a      	str	r2, [r5, #0]
 800486a:	461a      	mov	r2, r3
 800486c:	f7fc f914 	bl	8000a98 <_lseek>
 8004870:	1c43      	adds	r3, r0, #1
 8004872:	d102      	bne.n	800487a <_lseek_r+0x1e>
 8004874:	682b      	ldr	r3, [r5, #0]
 8004876:	b103      	cbz	r3, 800487a <_lseek_r+0x1e>
 8004878:	6023      	str	r3, [r4, #0]
 800487a:	bd38      	pop	{r3, r4, r5, pc}
 800487c:	20012fb8 	.word	0x20012fb8

08004880 <_read_r>:
 8004880:	b538      	push	{r3, r4, r5, lr}
 8004882:	4d07      	ldr	r5, [pc, #28]	@ (80048a0 <_read_r+0x20>)
 8004884:	4604      	mov	r4, r0
 8004886:	4608      	mov	r0, r1
 8004888:	4611      	mov	r1, r2
 800488a:	2200      	movs	r2, #0
 800488c:	602a      	str	r2, [r5, #0]
 800488e:	461a      	mov	r2, r3
 8004890:	f7fc f8a2 	bl	80009d8 <_read>
 8004894:	1c43      	adds	r3, r0, #1
 8004896:	d102      	bne.n	800489e <_read_r+0x1e>
 8004898:	682b      	ldr	r3, [r5, #0]
 800489a:	b103      	cbz	r3, 800489e <_read_r+0x1e>
 800489c:	6023      	str	r3, [r4, #0]
 800489e:	bd38      	pop	{r3, r4, r5, pc}
 80048a0:	20012fb8 	.word	0x20012fb8

080048a4 <_write_r>:
 80048a4:	b538      	push	{r3, r4, r5, lr}
 80048a6:	4d07      	ldr	r5, [pc, #28]	@ (80048c4 <_write_r+0x20>)
 80048a8:	4604      	mov	r4, r0
 80048aa:	4608      	mov	r0, r1
 80048ac:	4611      	mov	r1, r2
 80048ae:	2200      	movs	r2, #0
 80048b0:	602a      	str	r2, [r5, #0]
 80048b2:	461a      	mov	r2, r3
 80048b4:	f7fc f8ad 	bl	8000a12 <_write>
 80048b8:	1c43      	adds	r3, r0, #1
 80048ba:	d102      	bne.n	80048c2 <_write_r+0x1e>
 80048bc:	682b      	ldr	r3, [r5, #0]
 80048be:	b103      	cbz	r3, 80048c2 <_write_r+0x1e>
 80048c0:	6023      	str	r3, [r4, #0]
 80048c2:	bd38      	pop	{r3, r4, r5, pc}
 80048c4:	20012fb8 	.word	0x20012fb8

080048c8 <__libc_init_array>:
 80048c8:	b570      	push	{r4, r5, r6, lr}
 80048ca:	4d0d      	ldr	r5, [pc, #52]	@ (8004900 <__libc_init_array+0x38>)
 80048cc:	4c0d      	ldr	r4, [pc, #52]	@ (8004904 <__libc_init_array+0x3c>)
 80048ce:	1b64      	subs	r4, r4, r5
 80048d0:	10a4      	asrs	r4, r4, #2
 80048d2:	2600      	movs	r6, #0
 80048d4:	42a6      	cmp	r6, r4
 80048d6:	d109      	bne.n	80048ec <__libc_init_array+0x24>
 80048d8:	4d0b      	ldr	r5, [pc, #44]	@ (8004908 <__libc_init_array+0x40>)
 80048da:	4c0c      	ldr	r4, [pc, #48]	@ (800490c <__libc_init_array+0x44>)
 80048dc:	f000 fa70 	bl	8004dc0 <_init>
 80048e0:	1b64      	subs	r4, r4, r5
 80048e2:	10a4      	asrs	r4, r4, #2
 80048e4:	2600      	movs	r6, #0
 80048e6:	42a6      	cmp	r6, r4
 80048e8:	d105      	bne.n	80048f6 <__libc_init_array+0x2e>
 80048ea:	bd70      	pop	{r4, r5, r6, pc}
 80048ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80048f0:	4798      	blx	r3
 80048f2:	3601      	adds	r6, #1
 80048f4:	e7ee      	b.n	80048d4 <__libc_init_array+0xc>
 80048f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80048fa:	4798      	blx	r3
 80048fc:	3601      	adds	r6, #1
 80048fe:	e7f2      	b.n	80048e6 <__libc_init_array+0x1e>
 8004900:	08004e50 	.word	0x08004e50
 8004904:	08004e50 	.word	0x08004e50
 8004908:	08004e50 	.word	0x08004e50
 800490c:	08004e54 	.word	0x08004e54

08004910 <__retarget_lock_init_recursive>:
 8004910:	4770      	bx	lr

08004912 <__retarget_lock_acquire_recursive>:
 8004912:	4770      	bx	lr

08004914 <__retarget_lock_release_recursive>:
 8004914:	4770      	bx	lr

08004916 <memcpy>:
 8004916:	440a      	add	r2, r1
 8004918:	4291      	cmp	r1, r2
 800491a:	f100 33ff 	add.w	r3, r0, #4294967295
 800491e:	d100      	bne.n	8004922 <memcpy+0xc>
 8004920:	4770      	bx	lr
 8004922:	b510      	push	{r4, lr}
 8004924:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004928:	f803 4f01 	strb.w	r4, [r3, #1]!
 800492c:	4291      	cmp	r1, r2
 800492e:	d1f9      	bne.n	8004924 <memcpy+0xe>
 8004930:	bd10      	pop	{r4, pc}
	...

08004934 <_free_r>:
 8004934:	b538      	push	{r3, r4, r5, lr}
 8004936:	4605      	mov	r5, r0
 8004938:	2900      	cmp	r1, #0
 800493a:	d041      	beq.n	80049c0 <_free_r+0x8c>
 800493c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004940:	1f0c      	subs	r4, r1, #4
 8004942:	2b00      	cmp	r3, #0
 8004944:	bfb8      	it	lt
 8004946:	18e4      	addlt	r4, r4, r3
 8004948:	f000 f8e0 	bl	8004b0c <__malloc_lock>
 800494c:	4a1d      	ldr	r2, [pc, #116]	@ (80049c4 <_free_r+0x90>)
 800494e:	6813      	ldr	r3, [r2, #0]
 8004950:	b933      	cbnz	r3, 8004960 <_free_r+0x2c>
 8004952:	6063      	str	r3, [r4, #4]
 8004954:	6014      	str	r4, [r2, #0]
 8004956:	4628      	mov	r0, r5
 8004958:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800495c:	f000 b8dc 	b.w	8004b18 <__malloc_unlock>
 8004960:	42a3      	cmp	r3, r4
 8004962:	d908      	bls.n	8004976 <_free_r+0x42>
 8004964:	6820      	ldr	r0, [r4, #0]
 8004966:	1821      	adds	r1, r4, r0
 8004968:	428b      	cmp	r3, r1
 800496a:	bf01      	itttt	eq
 800496c:	6819      	ldreq	r1, [r3, #0]
 800496e:	685b      	ldreq	r3, [r3, #4]
 8004970:	1809      	addeq	r1, r1, r0
 8004972:	6021      	streq	r1, [r4, #0]
 8004974:	e7ed      	b.n	8004952 <_free_r+0x1e>
 8004976:	461a      	mov	r2, r3
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	b10b      	cbz	r3, 8004980 <_free_r+0x4c>
 800497c:	42a3      	cmp	r3, r4
 800497e:	d9fa      	bls.n	8004976 <_free_r+0x42>
 8004980:	6811      	ldr	r1, [r2, #0]
 8004982:	1850      	adds	r0, r2, r1
 8004984:	42a0      	cmp	r0, r4
 8004986:	d10b      	bne.n	80049a0 <_free_r+0x6c>
 8004988:	6820      	ldr	r0, [r4, #0]
 800498a:	4401      	add	r1, r0
 800498c:	1850      	adds	r0, r2, r1
 800498e:	4283      	cmp	r3, r0
 8004990:	6011      	str	r1, [r2, #0]
 8004992:	d1e0      	bne.n	8004956 <_free_r+0x22>
 8004994:	6818      	ldr	r0, [r3, #0]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	6053      	str	r3, [r2, #4]
 800499a:	4408      	add	r0, r1
 800499c:	6010      	str	r0, [r2, #0]
 800499e:	e7da      	b.n	8004956 <_free_r+0x22>
 80049a0:	d902      	bls.n	80049a8 <_free_r+0x74>
 80049a2:	230c      	movs	r3, #12
 80049a4:	602b      	str	r3, [r5, #0]
 80049a6:	e7d6      	b.n	8004956 <_free_r+0x22>
 80049a8:	6820      	ldr	r0, [r4, #0]
 80049aa:	1821      	adds	r1, r4, r0
 80049ac:	428b      	cmp	r3, r1
 80049ae:	bf04      	itt	eq
 80049b0:	6819      	ldreq	r1, [r3, #0]
 80049b2:	685b      	ldreq	r3, [r3, #4]
 80049b4:	6063      	str	r3, [r4, #4]
 80049b6:	bf04      	itt	eq
 80049b8:	1809      	addeq	r1, r1, r0
 80049ba:	6021      	streq	r1, [r4, #0]
 80049bc:	6054      	str	r4, [r2, #4]
 80049be:	e7ca      	b.n	8004956 <_free_r+0x22>
 80049c0:	bd38      	pop	{r3, r4, r5, pc}
 80049c2:	bf00      	nop
 80049c4:	20012fc4 	.word	0x20012fc4

080049c8 <sbrk_aligned>:
 80049c8:	b570      	push	{r4, r5, r6, lr}
 80049ca:	4e0f      	ldr	r6, [pc, #60]	@ (8004a08 <sbrk_aligned+0x40>)
 80049cc:	460c      	mov	r4, r1
 80049ce:	6831      	ldr	r1, [r6, #0]
 80049d0:	4605      	mov	r5, r0
 80049d2:	b911      	cbnz	r1, 80049da <sbrk_aligned+0x12>
 80049d4:	f000 f9d6 	bl	8004d84 <_sbrk_r>
 80049d8:	6030      	str	r0, [r6, #0]
 80049da:	4621      	mov	r1, r4
 80049dc:	4628      	mov	r0, r5
 80049de:	f000 f9d1 	bl	8004d84 <_sbrk_r>
 80049e2:	1c43      	adds	r3, r0, #1
 80049e4:	d103      	bne.n	80049ee <sbrk_aligned+0x26>
 80049e6:	f04f 34ff 	mov.w	r4, #4294967295
 80049ea:	4620      	mov	r0, r4
 80049ec:	bd70      	pop	{r4, r5, r6, pc}
 80049ee:	1cc4      	adds	r4, r0, #3
 80049f0:	f024 0403 	bic.w	r4, r4, #3
 80049f4:	42a0      	cmp	r0, r4
 80049f6:	d0f8      	beq.n	80049ea <sbrk_aligned+0x22>
 80049f8:	1a21      	subs	r1, r4, r0
 80049fa:	4628      	mov	r0, r5
 80049fc:	f000 f9c2 	bl	8004d84 <_sbrk_r>
 8004a00:	3001      	adds	r0, #1
 8004a02:	d1f2      	bne.n	80049ea <sbrk_aligned+0x22>
 8004a04:	e7ef      	b.n	80049e6 <sbrk_aligned+0x1e>
 8004a06:	bf00      	nop
 8004a08:	20012fc0 	.word	0x20012fc0

08004a0c <_malloc_r>:
 8004a0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a10:	1ccd      	adds	r5, r1, #3
 8004a12:	f025 0503 	bic.w	r5, r5, #3
 8004a16:	3508      	adds	r5, #8
 8004a18:	2d0c      	cmp	r5, #12
 8004a1a:	bf38      	it	cc
 8004a1c:	250c      	movcc	r5, #12
 8004a1e:	2d00      	cmp	r5, #0
 8004a20:	4606      	mov	r6, r0
 8004a22:	db01      	blt.n	8004a28 <_malloc_r+0x1c>
 8004a24:	42a9      	cmp	r1, r5
 8004a26:	d904      	bls.n	8004a32 <_malloc_r+0x26>
 8004a28:	230c      	movs	r3, #12
 8004a2a:	6033      	str	r3, [r6, #0]
 8004a2c:	2000      	movs	r0, #0
 8004a2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a32:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004b08 <_malloc_r+0xfc>
 8004a36:	f000 f869 	bl	8004b0c <__malloc_lock>
 8004a3a:	f8d8 3000 	ldr.w	r3, [r8]
 8004a3e:	461c      	mov	r4, r3
 8004a40:	bb44      	cbnz	r4, 8004a94 <_malloc_r+0x88>
 8004a42:	4629      	mov	r1, r5
 8004a44:	4630      	mov	r0, r6
 8004a46:	f7ff ffbf 	bl	80049c8 <sbrk_aligned>
 8004a4a:	1c43      	adds	r3, r0, #1
 8004a4c:	4604      	mov	r4, r0
 8004a4e:	d158      	bne.n	8004b02 <_malloc_r+0xf6>
 8004a50:	f8d8 4000 	ldr.w	r4, [r8]
 8004a54:	4627      	mov	r7, r4
 8004a56:	2f00      	cmp	r7, #0
 8004a58:	d143      	bne.n	8004ae2 <_malloc_r+0xd6>
 8004a5a:	2c00      	cmp	r4, #0
 8004a5c:	d04b      	beq.n	8004af6 <_malloc_r+0xea>
 8004a5e:	6823      	ldr	r3, [r4, #0]
 8004a60:	4639      	mov	r1, r7
 8004a62:	4630      	mov	r0, r6
 8004a64:	eb04 0903 	add.w	r9, r4, r3
 8004a68:	f000 f98c 	bl	8004d84 <_sbrk_r>
 8004a6c:	4581      	cmp	r9, r0
 8004a6e:	d142      	bne.n	8004af6 <_malloc_r+0xea>
 8004a70:	6821      	ldr	r1, [r4, #0]
 8004a72:	1a6d      	subs	r5, r5, r1
 8004a74:	4629      	mov	r1, r5
 8004a76:	4630      	mov	r0, r6
 8004a78:	f7ff ffa6 	bl	80049c8 <sbrk_aligned>
 8004a7c:	3001      	adds	r0, #1
 8004a7e:	d03a      	beq.n	8004af6 <_malloc_r+0xea>
 8004a80:	6823      	ldr	r3, [r4, #0]
 8004a82:	442b      	add	r3, r5
 8004a84:	6023      	str	r3, [r4, #0]
 8004a86:	f8d8 3000 	ldr.w	r3, [r8]
 8004a8a:	685a      	ldr	r2, [r3, #4]
 8004a8c:	bb62      	cbnz	r2, 8004ae8 <_malloc_r+0xdc>
 8004a8e:	f8c8 7000 	str.w	r7, [r8]
 8004a92:	e00f      	b.n	8004ab4 <_malloc_r+0xa8>
 8004a94:	6822      	ldr	r2, [r4, #0]
 8004a96:	1b52      	subs	r2, r2, r5
 8004a98:	d420      	bmi.n	8004adc <_malloc_r+0xd0>
 8004a9a:	2a0b      	cmp	r2, #11
 8004a9c:	d917      	bls.n	8004ace <_malloc_r+0xc2>
 8004a9e:	1961      	adds	r1, r4, r5
 8004aa0:	42a3      	cmp	r3, r4
 8004aa2:	6025      	str	r5, [r4, #0]
 8004aa4:	bf18      	it	ne
 8004aa6:	6059      	strne	r1, [r3, #4]
 8004aa8:	6863      	ldr	r3, [r4, #4]
 8004aaa:	bf08      	it	eq
 8004aac:	f8c8 1000 	streq.w	r1, [r8]
 8004ab0:	5162      	str	r2, [r4, r5]
 8004ab2:	604b      	str	r3, [r1, #4]
 8004ab4:	4630      	mov	r0, r6
 8004ab6:	f000 f82f 	bl	8004b18 <__malloc_unlock>
 8004aba:	f104 000b 	add.w	r0, r4, #11
 8004abe:	1d23      	adds	r3, r4, #4
 8004ac0:	f020 0007 	bic.w	r0, r0, #7
 8004ac4:	1ac2      	subs	r2, r0, r3
 8004ac6:	bf1c      	itt	ne
 8004ac8:	1a1b      	subne	r3, r3, r0
 8004aca:	50a3      	strne	r3, [r4, r2]
 8004acc:	e7af      	b.n	8004a2e <_malloc_r+0x22>
 8004ace:	6862      	ldr	r2, [r4, #4]
 8004ad0:	42a3      	cmp	r3, r4
 8004ad2:	bf0c      	ite	eq
 8004ad4:	f8c8 2000 	streq.w	r2, [r8]
 8004ad8:	605a      	strne	r2, [r3, #4]
 8004ada:	e7eb      	b.n	8004ab4 <_malloc_r+0xa8>
 8004adc:	4623      	mov	r3, r4
 8004ade:	6864      	ldr	r4, [r4, #4]
 8004ae0:	e7ae      	b.n	8004a40 <_malloc_r+0x34>
 8004ae2:	463c      	mov	r4, r7
 8004ae4:	687f      	ldr	r7, [r7, #4]
 8004ae6:	e7b6      	b.n	8004a56 <_malloc_r+0x4a>
 8004ae8:	461a      	mov	r2, r3
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	42a3      	cmp	r3, r4
 8004aee:	d1fb      	bne.n	8004ae8 <_malloc_r+0xdc>
 8004af0:	2300      	movs	r3, #0
 8004af2:	6053      	str	r3, [r2, #4]
 8004af4:	e7de      	b.n	8004ab4 <_malloc_r+0xa8>
 8004af6:	230c      	movs	r3, #12
 8004af8:	6033      	str	r3, [r6, #0]
 8004afa:	4630      	mov	r0, r6
 8004afc:	f000 f80c 	bl	8004b18 <__malloc_unlock>
 8004b00:	e794      	b.n	8004a2c <_malloc_r+0x20>
 8004b02:	6005      	str	r5, [r0, #0]
 8004b04:	e7d6      	b.n	8004ab4 <_malloc_r+0xa8>
 8004b06:	bf00      	nop
 8004b08:	20012fc4 	.word	0x20012fc4

08004b0c <__malloc_lock>:
 8004b0c:	4801      	ldr	r0, [pc, #4]	@ (8004b14 <__malloc_lock+0x8>)
 8004b0e:	f7ff bf00 	b.w	8004912 <__retarget_lock_acquire_recursive>
 8004b12:	bf00      	nop
 8004b14:	20012fbc 	.word	0x20012fbc

08004b18 <__malloc_unlock>:
 8004b18:	4801      	ldr	r0, [pc, #4]	@ (8004b20 <__malloc_unlock+0x8>)
 8004b1a:	f7ff befb 	b.w	8004914 <__retarget_lock_release_recursive>
 8004b1e:	bf00      	nop
 8004b20:	20012fbc 	.word	0x20012fbc

08004b24 <__sflush_r>:
 8004b24:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004b28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b2c:	0716      	lsls	r6, r2, #28
 8004b2e:	4605      	mov	r5, r0
 8004b30:	460c      	mov	r4, r1
 8004b32:	d454      	bmi.n	8004bde <__sflush_r+0xba>
 8004b34:	684b      	ldr	r3, [r1, #4]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	dc02      	bgt.n	8004b40 <__sflush_r+0x1c>
 8004b3a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	dd48      	ble.n	8004bd2 <__sflush_r+0xae>
 8004b40:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004b42:	2e00      	cmp	r6, #0
 8004b44:	d045      	beq.n	8004bd2 <__sflush_r+0xae>
 8004b46:	2300      	movs	r3, #0
 8004b48:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004b4c:	682f      	ldr	r7, [r5, #0]
 8004b4e:	6a21      	ldr	r1, [r4, #32]
 8004b50:	602b      	str	r3, [r5, #0]
 8004b52:	d030      	beq.n	8004bb6 <__sflush_r+0x92>
 8004b54:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004b56:	89a3      	ldrh	r3, [r4, #12]
 8004b58:	0759      	lsls	r1, r3, #29
 8004b5a:	d505      	bpl.n	8004b68 <__sflush_r+0x44>
 8004b5c:	6863      	ldr	r3, [r4, #4]
 8004b5e:	1ad2      	subs	r2, r2, r3
 8004b60:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004b62:	b10b      	cbz	r3, 8004b68 <__sflush_r+0x44>
 8004b64:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004b66:	1ad2      	subs	r2, r2, r3
 8004b68:	2300      	movs	r3, #0
 8004b6a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004b6c:	6a21      	ldr	r1, [r4, #32]
 8004b6e:	4628      	mov	r0, r5
 8004b70:	47b0      	blx	r6
 8004b72:	1c43      	adds	r3, r0, #1
 8004b74:	89a3      	ldrh	r3, [r4, #12]
 8004b76:	d106      	bne.n	8004b86 <__sflush_r+0x62>
 8004b78:	6829      	ldr	r1, [r5, #0]
 8004b7a:	291d      	cmp	r1, #29
 8004b7c:	d82b      	bhi.n	8004bd6 <__sflush_r+0xb2>
 8004b7e:	4a2a      	ldr	r2, [pc, #168]	@ (8004c28 <__sflush_r+0x104>)
 8004b80:	410a      	asrs	r2, r1
 8004b82:	07d6      	lsls	r6, r2, #31
 8004b84:	d427      	bmi.n	8004bd6 <__sflush_r+0xb2>
 8004b86:	2200      	movs	r2, #0
 8004b88:	6062      	str	r2, [r4, #4]
 8004b8a:	04d9      	lsls	r1, r3, #19
 8004b8c:	6922      	ldr	r2, [r4, #16]
 8004b8e:	6022      	str	r2, [r4, #0]
 8004b90:	d504      	bpl.n	8004b9c <__sflush_r+0x78>
 8004b92:	1c42      	adds	r2, r0, #1
 8004b94:	d101      	bne.n	8004b9a <__sflush_r+0x76>
 8004b96:	682b      	ldr	r3, [r5, #0]
 8004b98:	b903      	cbnz	r3, 8004b9c <__sflush_r+0x78>
 8004b9a:	6560      	str	r0, [r4, #84]	@ 0x54
 8004b9c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004b9e:	602f      	str	r7, [r5, #0]
 8004ba0:	b1b9      	cbz	r1, 8004bd2 <__sflush_r+0xae>
 8004ba2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004ba6:	4299      	cmp	r1, r3
 8004ba8:	d002      	beq.n	8004bb0 <__sflush_r+0x8c>
 8004baa:	4628      	mov	r0, r5
 8004bac:	f7ff fec2 	bl	8004934 <_free_r>
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	6363      	str	r3, [r4, #52]	@ 0x34
 8004bb4:	e00d      	b.n	8004bd2 <__sflush_r+0xae>
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	4628      	mov	r0, r5
 8004bba:	47b0      	blx	r6
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	1c50      	adds	r0, r2, #1
 8004bc0:	d1c9      	bne.n	8004b56 <__sflush_r+0x32>
 8004bc2:	682b      	ldr	r3, [r5, #0]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d0c6      	beq.n	8004b56 <__sflush_r+0x32>
 8004bc8:	2b1d      	cmp	r3, #29
 8004bca:	d001      	beq.n	8004bd0 <__sflush_r+0xac>
 8004bcc:	2b16      	cmp	r3, #22
 8004bce:	d11e      	bne.n	8004c0e <__sflush_r+0xea>
 8004bd0:	602f      	str	r7, [r5, #0]
 8004bd2:	2000      	movs	r0, #0
 8004bd4:	e022      	b.n	8004c1c <__sflush_r+0xf8>
 8004bd6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004bda:	b21b      	sxth	r3, r3
 8004bdc:	e01b      	b.n	8004c16 <__sflush_r+0xf2>
 8004bde:	690f      	ldr	r7, [r1, #16]
 8004be0:	2f00      	cmp	r7, #0
 8004be2:	d0f6      	beq.n	8004bd2 <__sflush_r+0xae>
 8004be4:	0793      	lsls	r3, r2, #30
 8004be6:	680e      	ldr	r6, [r1, #0]
 8004be8:	bf08      	it	eq
 8004bea:	694b      	ldreq	r3, [r1, #20]
 8004bec:	600f      	str	r7, [r1, #0]
 8004bee:	bf18      	it	ne
 8004bf0:	2300      	movne	r3, #0
 8004bf2:	eba6 0807 	sub.w	r8, r6, r7
 8004bf6:	608b      	str	r3, [r1, #8]
 8004bf8:	f1b8 0f00 	cmp.w	r8, #0
 8004bfc:	dde9      	ble.n	8004bd2 <__sflush_r+0xae>
 8004bfe:	6a21      	ldr	r1, [r4, #32]
 8004c00:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004c02:	4643      	mov	r3, r8
 8004c04:	463a      	mov	r2, r7
 8004c06:	4628      	mov	r0, r5
 8004c08:	47b0      	blx	r6
 8004c0a:	2800      	cmp	r0, #0
 8004c0c:	dc08      	bgt.n	8004c20 <__sflush_r+0xfc>
 8004c0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c16:	81a3      	strh	r3, [r4, #12]
 8004c18:	f04f 30ff 	mov.w	r0, #4294967295
 8004c1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c20:	4407      	add	r7, r0
 8004c22:	eba8 0800 	sub.w	r8, r8, r0
 8004c26:	e7e7      	b.n	8004bf8 <__sflush_r+0xd4>
 8004c28:	dfbffffe 	.word	0xdfbffffe

08004c2c <_fflush_r>:
 8004c2c:	b538      	push	{r3, r4, r5, lr}
 8004c2e:	690b      	ldr	r3, [r1, #16]
 8004c30:	4605      	mov	r5, r0
 8004c32:	460c      	mov	r4, r1
 8004c34:	b913      	cbnz	r3, 8004c3c <_fflush_r+0x10>
 8004c36:	2500      	movs	r5, #0
 8004c38:	4628      	mov	r0, r5
 8004c3a:	bd38      	pop	{r3, r4, r5, pc}
 8004c3c:	b118      	cbz	r0, 8004c46 <_fflush_r+0x1a>
 8004c3e:	6a03      	ldr	r3, [r0, #32]
 8004c40:	b90b      	cbnz	r3, 8004c46 <_fflush_r+0x1a>
 8004c42:	f7ff fc87 	bl	8004554 <__sinit>
 8004c46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d0f3      	beq.n	8004c36 <_fflush_r+0xa>
 8004c4e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004c50:	07d0      	lsls	r0, r2, #31
 8004c52:	d404      	bmi.n	8004c5e <_fflush_r+0x32>
 8004c54:	0599      	lsls	r1, r3, #22
 8004c56:	d402      	bmi.n	8004c5e <_fflush_r+0x32>
 8004c58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004c5a:	f7ff fe5a 	bl	8004912 <__retarget_lock_acquire_recursive>
 8004c5e:	4628      	mov	r0, r5
 8004c60:	4621      	mov	r1, r4
 8004c62:	f7ff ff5f 	bl	8004b24 <__sflush_r>
 8004c66:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004c68:	07da      	lsls	r2, r3, #31
 8004c6a:	4605      	mov	r5, r0
 8004c6c:	d4e4      	bmi.n	8004c38 <_fflush_r+0xc>
 8004c6e:	89a3      	ldrh	r3, [r4, #12]
 8004c70:	059b      	lsls	r3, r3, #22
 8004c72:	d4e1      	bmi.n	8004c38 <_fflush_r+0xc>
 8004c74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004c76:	f7ff fe4d 	bl	8004914 <__retarget_lock_release_recursive>
 8004c7a:	e7dd      	b.n	8004c38 <_fflush_r+0xc>

08004c7c <__swhatbuf_r>:
 8004c7c:	b570      	push	{r4, r5, r6, lr}
 8004c7e:	460c      	mov	r4, r1
 8004c80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c84:	2900      	cmp	r1, #0
 8004c86:	b096      	sub	sp, #88	@ 0x58
 8004c88:	4615      	mov	r5, r2
 8004c8a:	461e      	mov	r6, r3
 8004c8c:	da0d      	bge.n	8004caa <__swhatbuf_r+0x2e>
 8004c8e:	89a3      	ldrh	r3, [r4, #12]
 8004c90:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004c94:	f04f 0100 	mov.w	r1, #0
 8004c98:	bf14      	ite	ne
 8004c9a:	2340      	movne	r3, #64	@ 0x40
 8004c9c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004ca0:	2000      	movs	r0, #0
 8004ca2:	6031      	str	r1, [r6, #0]
 8004ca4:	602b      	str	r3, [r5, #0]
 8004ca6:	b016      	add	sp, #88	@ 0x58
 8004ca8:	bd70      	pop	{r4, r5, r6, pc}
 8004caa:	466a      	mov	r2, sp
 8004cac:	f000 f848 	bl	8004d40 <_fstat_r>
 8004cb0:	2800      	cmp	r0, #0
 8004cb2:	dbec      	blt.n	8004c8e <__swhatbuf_r+0x12>
 8004cb4:	9901      	ldr	r1, [sp, #4]
 8004cb6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004cba:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004cbe:	4259      	negs	r1, r3
 8004cc0:	4159      	adcs	r1, r3
 8004cc2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004cc6:	e7eb      	b.n	8004ca0 <__swhatbuf_r+0x24>

08004cc8 <__smakebuf_r>:
 8004cc8:	898b      	ldrh	r3, [r1, #12]
 8004cca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004ccc:	079d      	lsls	r5, r3, #30
 8004cce:	4606      	mov	r6, r0
 8004cd0:	460c      	mov	r4, r1
 8004cd2:	d507      	bpl.n	8004ce4 <__smakebuf_r+0x1c>
 8004cd4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004cd8:	6023      	str	r3, [r4, #0]
 8004cda:	6123      	str	r3, [r4, #16]
 8004cdc:	2301      	movs	r3, #1
 8004cde:	6163      	str	r3, [r4, #20]
 8004ce0:	b003      	add	sp, #12
 8004ce2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ce4:	ab01      	add	r3, sp, #4
 8004ce6:	466a      	mov	r2, sp
 8004ce8:	f7ff ffc8 	bl	8004c7c <__swhatbuf_r>
 8004cec:	9f00      	ldr	r7, [sp, #0]
 8004cee:	4605      	mov	r5, r0
 8004cf0:	4639      	mov	r1, r7
 8004cf2:	4630      	mov	r0, r6
 8004cf4:	f7ff fe8a 	bl	8004a0c <_malloc_r>
 8004cf8:	b948      	cbnz	r0, 8004d0e <__smakebuf_r+0x46>
 8004cfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004cfe:	059a      	lsls	r2, r3, #22
 8004d00:	d4ee      	bmi.n	8004ce0 <__smakebuf_r+0x18>
 8004d02:	f023 0303 	bic.w	r3, r3, #3
 8004d06:	f043 0302 	orr.w	r3, r3, #2
 8004d0a:	81a3      	strh	r3, [r4, #12]
 8004d0c:	e7e2      	b.n	8004cd4 <__smakebuf_r+0xc>
 8004d0e:	89a3      	ldrh	r3, [r4, #12]
 8004d10:	6020      	str	r0, [r4, #0]
 8004d12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d16:	81a3      	strh	r3, [r4, #12]
 8004d18:	9b01      	ldr	r3, [sp, #4]
 8004d1a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004d1e:	b15b      	cbz	r3, 8004d38 <__smakebuf_r+0x70>
 8004d20:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004d24:	4630      	mov	r0, r6
 8004d26:	f000 f81d 	bl	8004d64 <_isatty_r>
 8004d2a:	b128      	cbz	r0, 8004d38 <__smakebuf_r+0x70>
 8004d2c:	89a3      	ldrh	r3, [r4, #12]
 8004d2e:	f023 0303 	bic.w	r3, r3, #3
 8004d32:	f043 0301 	orr.w	r3, r3, #1
 8004d36:	81a3      	strh	r3, [r4, #12]
 8004d38:	89a3      	ldrh	r3, [r4, #12]
 8004d3a:	431d      	orrs	r5, r3
 8004d3c:	81a5      	strh	r5, [r4, #12]
 8004d3e:	e7cf      	b.n	8004ce0 <__smakebuf_r+0x18>

08004d40 <_fstat_r>:
 8004d40:	b538      	push	{r3, r4, r5, lr}
 8004d42:	4d07      	ldr	r5, [pc, #28]	@ (8004d60 <_fstat_r+0x20>)
 8004d44:	2300      	movs	r3, #0
 8004d46:	4604      	mov	r4, r0
 8004d48:	4608      	mov	r0, r1
 8004d4a:	4611      	mov	r1, r2
 8004d4c:	602b      	str	r3, [r5, #0]
 8004d4e:	f7fb fe88 	bl	8000a62 <_fstat>
 8004d52:	1c43      	adds	r3, r0, #1
 8004d54:	d102      	bne.n	8004d5c <_fstat_r+0x1c>
 8004d56:	682b      	ldr	r3, [r5, #0]
 8004d58:	b103      	cbz	r3, 8004d5c <_fstat_r+0x1c>
 8004d5a:	6023      	str	r3, [r4, #0]
 8004d5c:	bd38      	pop	{r3, r4, r5, pc}
 8004d5e:	bf00      	nop
 8004d60:	20012fb8 	.word	0x20012fb8

08004d64 <_isatty_r>:
 8004d64:	b538      	push	{r3, r4, r5, lr}
 8004d66:	4d06      	ldr	r5, [pc, #24]	@ (8004d80 <_isatty_r+0x1c>)
 8004d68:	2300      	movs	r3, #0
 8004d6a:	4604      	mov	r4, r0
 8004d6c:	4608      	mov	r0, r1
 8004d6e:	602b      	str	r3, [r5, #0]
 8004d70:	f7fb fe87 	bl	8000a82 <_isatty>
 8004d74:	1c43      	adds	r3, r0, #1
 8004d76:	d102      	bne.n	8004d7e <_isatty_r+0x1a>
 8004d78:	682b      	ldr	r3, [r5, #0]
 8004d7a:	b103      	cbz	r3, 8004d7e <_isatty_r+0x1a>
 8004d7c:	6023      	str	r3, [r4, #0]
 8004d7e:	bd38      	pop	{r3, r4, r5, pc}
 8004d80:	20012fb8 	.word	0x20012fb8

08004d84 <_sbrk_r>:
 8004d84:	b538      	push	{r3, r4, r5, lr}
 8004d86:	4d06      	ldr	r5, [pc, #24]	@ (8004da0 <_sbrk_r+0x1c>)
 8004d88:	2300      	movs	r3, #0
 8004d8a:	4604      	mov	r4, r0
 8004d8c:	4608      	mov	r0, r1
 8004d8e:	602b      	str	r3, [r5, #0]
 8004d90:	f000 f808 	bl	8004da4 <_sbrk>
 8004d94:	1c43      	adds	r3, r0, #1
 8004d96:	d102      	bne.n	8004d9e <_sbrk_r+0x1a>
 8004d98:	682b      	ldr	r3, [r5, #0]
 8004d9a:	b103      	cbz	r3, 8004d9e <_sbrk_r+0x1a>
 8004d9c:	6023      	str	r3, [r4, #0]
 8004d9e:	bd38      	pop	{r3, r4, r5, pc}
 8004da0:	20012fb8 	.word	0x20012fb8

08004da4 <_sbrk>:
 8004da4:	4a04      	ldr	r2, [pc, #16]	@ (8004db8 <_sbrk+0x14>)
 8004da6:	6811      	ldr	r1, [r2, #0]
 8004da8:	4603      	mov	r3, r0
 8004daa:	b909      	cbnz	r1, 8004db0 <_sbrk+0xc>
 8004dac:	4903      	ldr	r1, [pc, #12]	@ (8004dbc <_sbrk+0x18>)
 8004dae:	6011      	str	r1, [r2, #0]
 8004db0:	6810      	ldr	r0, [r2, #0]
 8004db2:	4403      	add	r3, r0
 8004db4:	6013      	str	r3, [r2, #0]
 8004db6:	4770      	bx	lr
 8004db8:	20012fc8 	.word	0x20012fc8
 8004dbc:	20012fd0 	.word	0x20012fd0

08004dc0 <_init>:
 8004dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dc2:	bf00      	nop
 8004dc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dc6:	bc08      	pop	{r3}
 8004dc8:	469e      	mov	lr, r3
 8004dca:	4770      	bx	lr

08004dcc <_fini>:
 8004dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dce:	bf00      	nop
 8004dd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dd2:	bc08      	pop	{r3}
 8004dd4:	469e      	mov	lr, r3
 8004dd6:	4770      	bx	lr
